{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"DraKwon.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at EtherScan.com on 2069-04-20\\n */\\n\\n// SPDX-License-Identifier: MIT\\n\\n// Dependency file: contracts\\\\interface\\\\IERC20.sol\\n\\n/**\\n\\n________                ____  __.\\n\\\\______ \\\\____________  |    |/ _|_  _  ______   ____\\n |    |  \\\\_  __ \\\\__  \\\\ |      < \\\\ \\\\/ \\\\/ /  _ \\\\ /    \\\\\\n |    `   \\\\  | \\\\// __ \\\\|    |  \\\\ \\\\     (  <_> )   |  \\\\\\n/_______  /__|  (____  /____|__ \\\\ \\\\/\\\\_/ \\\\____/|___|  /\\n        \\\\/           \\\\/        \\\\/                  \\\\/\\n\\nToken: DraKwon\\nTicker: DraKwon\\n\\n    Features:\\n    - 2.7 Billion DrakWon Supply in honour of the $ DoKwon ran off with.\\n    - Additional function to add progressive burn on every transaction\\n        - Function for users to burn tokens, in future makes it possible to have dApp/s or competitions which encourage burning\\n        - Burned tokens are instantly removed out of existence & Token Supply\\n    - 10% max tax restriction in update functions\\n    - 5/5% Launch Taxes: 2% liquidity, 2% Ops & Marketing, 1% burn\\n    - Renouncable functions (_renounceFeeFunctions, _renounceMaxUpdateFunctions,\\n      _renounceWalletChanges) so that entire ownership doesn't need to\\n      be renounced (in case of CEX listing or etc)\\n    - 0 maxSellTransaction Amount for first 2 minutes to prevent whale bot flips\\n    - 1% max sell transaction restriction\\n    - 2% max wallet/buy restriction\\n    - 180 second cooldown on sells after transactions to prevent bot flips\\n\\n                                ,-\\n                               //\\n                              /:      ,\\n                             ;.(     //\\n                   |   ,     /`|    //\\n                   |\\\\  |\\\\    |,|   //\\n                |  (\\\\  (\\\\    |`|   |(\\n                (\\\\  \\\\\\\\  \\\\\\\\   |,|   ;|\\n            .   ||   \\\\\\\\  \\\\\\\\  |`(   ;(\\n            \\\\\\\\   \\\\\\\\  \\\\\\\\  \\\\\\\\  |.\\\\\\\\  ((\\n             \\\\\\\\   \\\\\\\\  \\\\\\\\  \\\\\\\\  \\\\\\\\ \\\\;/:\\\\\\n               \\\\\\\\  \\\\\\\\  \\\\'. \\\\\\\\_,\\\\\\\\ /\\\\\\\"\\\"-._\\n                \\\\\\\\  \\\\\\\\  \\\\ \\\\-\\\"   \\\\/ `;._ \\\".\\n               ___\\\\\\\\-\\\\\\\\-\\\" \\\\ \\\\_  /,  |_ \\\"._\\\\\\n         _,--\\\"\\\"___ \\\\ \\\\,_   \\\"-_\\\"- |\\\".|(._ \\\".\\\".-.\\n     _,-\\\"_,--\\\"\\\"\\\"__ ) \\\".\\\"-_    \\\"--\\\\ \\\\\\\"(\\\"o\\\\_\\\\ \\\"- \\\".\\n   ,\\\",-\\\"\\\"\\\" _.-'''_-\\\"   \\\"-_\\\"-.__   \\\\ \\\\_\\\\_//\\\\)__\\\"\\\\_)\\n ,\\\"    ',-'  ,-\\\"\\\"   7\\\"  _ \\\"-.._\\\"\\\"_>\\\\__`\\\"\\\"'\\\"__ \\\"\\\"``-._\\n        ;  ,\\\" ,-\\\",'/` ,\\\":\\\\.    `   `  `\\\"\\\"\\\"___`\\\"\\\"-._  \\\".   )\\n        ;,\\\"_,\\\" ,' /`,\\\"}}::\\\\\\\\         `... \\\\____''' \\\"\\\\  '.|\\\\\\n       ,\\\",\\\"   :  /`/{{)/:::\\\"\\\\__,---._    \\\\  \\\\_____'''\\\\    \\\\\\n      , ,\\\"_  ;  /`/ ///::::::::' ,-\\\"-\\\\    \\\\__   \\\\____''\\\\ \\\\ \\\\\\n     ,,\\\"   `;| \\\";; /}}/::'``':::(._``.\\\"-.__  \\\"\\\"\\\"--    '_\\\\ \\\\ \\\\\\n    ('       ;// / {;;:'`````':; /`._.\\\"\\\"\\\"  \\\"\\\"-.._ `\\\"-. \\\" (   )\\n    /         )(/ <\\\";\\\"'``   ``/ /_.(             \\\"_  \\\"-_\\\"\\\\`);\\n              (/ <\\\";\\\"``     `/ /`,(                \\\"._ _\\\".\\\\;\\n               |<\\\";\\\"`   ``  / /\\\"-\\\"   DraKwon          \\\"\\n               <\\\";\\\"` ``    / /__,;\\n\\n */\\n\\npragma solidity 0.8.17;\\n\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether/ETH and Wei/gas. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"DraKwon: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"DraKwon: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"DraKwon: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"DraKwon: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"DraKwon: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"DraKwon: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"DraKwon: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"DraKwon: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"DraKwon: approve from the zero address\\\");\\n        require(spender != address(0), \\\"DraKwon: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address); // WETH\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n    returns (uint[] memory amounts);\\n\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burnTokens(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n\\n    function skim(address to) external;\\n    function sync() external;\\n    function initialize(address, address) external;\\n}\\n\\n\\nlibrary SafeMathUint {\\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\\n        int256 b = int256(a);\\n        require(b >= 0);\\n        return b;\\n    }\\n}\\n\\n\\n/**\\n * @title SafeMathInt\\n * @dev Math operations with safety checks that revert on error\\n * @dev SafeMath adapted for int256\\n * Based on code of  https://github.com/RequestNetwork/requestNetwork/blob/master/packages/requestNetworkSmartContracts/contracts/base/math/SafeMathInt.sol\\n */\\nlibrary SafeMathInt {\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when multiplying INT256_MIN with -1\\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\\n        require(!(a == - 2 ** 255 && b == - 1) && !(b == - 2 ** 255 && a == - 1));\\n\\n        int256 c = a * b;\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        // Prevent overflow when dividing INT256_MIN by -1\\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\\n        require(!(a == - 2 ** 255 && b == - 1) && (b > 0));\\n\\n        return a / b;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\\n\\n        return a - b;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\\n        require(a >= 0);\\n        return uint256(a);\\n    }\\n}\\n\\n/* \ud835\ude3f\ud835\ude67\ud835\ude56\ud835\ude46\ud835\ude6c\ud835\ude64\ud835\ude63 */\\n\\ncontract DraKwon is ERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    bool private swapping;\\n\\n    mapping(address => bool) private _isExcludedFromFees;\\n    mapping(address => bool) public _isExcludedMaxSellTransactionAmount;\\n\\n    // store automatic market maker pairs ADDRESSES. Any transfer *to* these addresses\\n    // could be subject to a maximum transfer amount\\n    mapping(address => bool) public automatedMarketMakerPairs;\\n\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniswapV2Pair;\\n\\n    address private opsMarketingWallet;\\n    address public liquidityAddress;\\n    address public burnWallet = address(0xdead);\\n\\n    uint256 public launchMaxSellTransactionAmount = 0; // 0 for 2 min to prevent whale/flip bots on launch\\n    uint256 public maxSellTransactionAmount;\\n\\n    uint256 private feeUnits = 10000;\\n\\n    uint256 public walletSellDelayTime;\\n\\n    uint256 public liquidityFee;\\n    uint256 private opsMarketingWalletFee;\\n    uint256 public burnFee;\\n    uint256 public buyFeesTotal;\\n\\n    uint256 public sellLiquidity;\\n    uint256 private sellOpsMarketingWallet;\\n    uint256 public sellBurn;\\n    uint256 public sellFeesTotal;\\n\\n    uint256 public liquidityBalance;\\n    uint256 private opsMarketingWalletBalance;\\n    uint256 private burnBalance;\\n\\n    uint256 public swapTokensAtAmount;\\n    uint256 public maxWallet;\\n\\n    uint256 public maxSellTransaction;\\n    uint256 public maxWalletTotal;\\n\\n    bool public _renounceFeeFunctions = false;\\n    bool public _renounceMaxUpdateFunctions = false;\\n    bool public _renounceWalletChanges = false;\\n\\n    bool public directLiquidityInjectionEnabled = false;\\n    bool public swapAndLiquifyEnabled = false;\\n    bool public sellDelayActive = false;\\n    bool public tradingActive = false;\\n\\n    event SwapAndLiquifyEnabled(bool enabled);\\n\\n    bool public _tradingLaunched = false;\\n\\n    uint256 public supply;\\n    uint256 public swapMultiplier;\\n\\n    uint256 public gasForProcessing = 300000;\\n\\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\\n    event LiquidityAddressUpdated(address indexed newLiquidityAddress, address indexed oldLiquidityAddress);\\n    event TeamWallet1Updated(address indexed newTeamWallet1, address indexed oldTeamWallet1);\\n    event TeamWallet2Updated(address indexed newTeamWallet2, address indexed oldTeamWallet2);\\n    event TeamWallet3Updated(address indexed newTeamWallet3, address indexed oldTeamWallet3);\\n    event opsMarketingWalletUpdated(address indexed newopsMarketingWallet, address indexed oldopsMarketingWallet);\\n    event Log(bool swapping, bool fee);\\n\\n    uint256 public tradingEnabledTimestamp;\\n\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\\n    event updateHolderLastTransferTimestamp(address indexed account, uint256 timestamp);\\n\\n    constructor() ERC20(\\\"DraKwon\\\", \\\"DraKwon\\\") {\\n\\n        liquidityAddress = owner();\\n\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\\n            .createPair(address(this), _uniswapV2Router.WETH());\\n\\n        excludeFromMaxSellTransaction(address(_uniswapV2Router), true);\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        excludeFromMaxSellTransaction(address(uniswapV2Pair), true);\\n\\n        liquidityAddress = owner();\\n        burnWallet = address(0xdead); // Launch with 0% but good to have the option to add burn / for community vote later\\n\\n        _isExcludedFromFees[owner()] = true;\\n        _isExcludedFromFees[address(this)] = true;\\n        _isExcludedFromFees[liquidityAddress] = true;\\n        _isExcludedFromFees[opsMarketingWallet] = true;\\n        _isExcludedFromFees[burnWallet] = true;\\n\\n        excludeFromMaxSellTransaction(owner(), true);\\n        excludeFromMaxSellTransaction(address(this), true);\\n        excludeFromMaxSellTransaction(burnWallet, true);\\n\\n        _setAutomatedMarketMakerPair(uniswapV2Pair, true);\\n\\n        uint256 totalSupply = 2700000000 * (10**18);\\n        supply += totalSupply;\\n\\n        uint256 _liquidityFee = 0;\\n        uint256 _opsMarketingWalletFee = 0;\\n        uint256 _burnFee = 0;\\n\\n        uint256 _sellLiquidity = 0;\\n        uint256 _sellOpsMarketingWallet = 0;\\n        uint256 _sellBurn = 0;\\n\\n        maxWallet = 100;\\n        maxSellTransaction = 1;\\n        walletSellDelayTime = 0;\\n\\n        swapMultiplier = 10000; // 0.05% swap;\\n\\n        maxSellTransactionAmount = (supply * maxSellTransaction) / 100;\\n        swapTokensAtAmount = (supply * 5) / swapMultiplier;\\n        maxWalletTotal = (supply * maxWallet) / 100;\\n\\n        liquidityFee = _liquidityFee;\\n        opsMarketingWalletFee = _opsMarketingWalletFee;\\n        burnFee = _burnFee;\\n        buyFeesTotal = _liquidityFee + _opsMarketingWalletFee + _burnFee;\\n\\n        sellLiquidity = _sellLiquidity;\\n        sellOpsMarketingWallet = _sellOpsMarketingWallet;\\n        sellBurn = _sellBurn;\\n        sellFeesTotal = _sellLiquidity + _sellOpsMarketingWallet + _sellBurn;\\n\\n\\n        _approve(owner(), address(uniswapV2Router), totalSupply);\\n\\n        _mint(owner(), 2700000000 * 1e18);\\n        tradingEnabledTimestamp = block.timestamp;\\n    }\\n\\n    receive() external payable {}\\n\\n    function toggleSellDelayActive() external onlyOwner {\\n        sellDelayActive = !sellDelayActive;\\n    }\\n\\n    function enableTradingOnLaunch() external onlyOwner {\\n        require(!_tradingLaunched);\\n        feeUnits = 10000;\\n\\n        liquidityFee = 200;\\n        opsMarketingWalletFee = 200;\\n        burnFee = 100;\\n        buyFeesTotal = liquidityFee + opsMarketingWalletFee + burnFee;\\n\\n        sellLiquidity = 200;\\n        sellOpsMarketingWallet = 200;\\n        sellBurn = 100;\\n        sellFeesTotal = sellLiquidity + sellOpsMarketingWallet + sellBurn;\\n\\n        maxWallet = 2;\\n        walletSellDelayTime = 180;\\n\\n        sellDelayActive = true;\\n        tradingActive = true;\\n\\n        _tradingLaunched = true;\\n    }\\n\\n    function setLaunchWallet(address _opsMarketingWallet) external onlyOwner {\\n        opsMarketingWallet = _opsMarketingWallet;\\n    }\\n\\n    function updateLimits() private {\\n        maxSellTransactionAmount = (supply * maxSellTransaction) / 100;\\n        swapTokensAtAmount = (supply * 5) / swapMultiplier; // 0.05% default;\\n        maxWalletTotal = (supply * maxWallet) / 100;\\n    }\\n\\n    function updateSwapMultiplier(uint256 _swapMultiplier) external onlyOwner {\\n        require(!_renounceMaxUpdateFunctions, \\\"Max update functions are renounced\\\");\\n        swapMultiplier = _swapMultiplier;\\n        updateLimits();\\n    }\\n\\n    function updateMaxTransaction(uint256 newNum) external onlyOwner {\\n      require(!_renounceMaxUpdateFunctions, \\\"Cannot update max transaction amount after renouncement\\\");\\n        require(newNum >= 1);\\n        maxSellTransaction = newNum;\\n        updateLimits();\\n    }\\n\\n    function updateMaxWallet(uint256 newNum) external onlyOwner {\\n      require(!_renounceMaxUpdateFunctions, \\\"Cannot update max transaction amount after renouncement\\\");\\n        require(newNum >= 1);\\n        maxWallet = newNum;\\n        updateLimits();\\n    }\\n\\n    function updateWalletSellDelayTime(uint256 newNum) external onlyOwner{\\n        walletSellDelayTime = newNum;\\n    }\\n\\n    function updateFees(uint256 _liquidityFee, uint256 _opsMarketingWalletFee, uint256 _burnFee) public onlyOwner {\\n        require(!_renounceFeeFunctions, \\\"Cannot update fees after renouncemennt\\\");\\n\\n        liquidityFee = _liquidityFee;\\n        opsMarketingWalletFee = _opsMarketingWalletFee;\\n        burnFee = _burnFee;\\n\\n        buyFeesTotal = liquidityFee +  opsMarketingWalletFee + burnFee;\\n\\n        require(buyFeesTotal <= (feeUnits/10), \\\"Must keep fees at 10% or less\\\");\\n    }\\n\\n    function updateSellFees(uint256 _sellLiquidityFee, uint256 _sellOpsMarketingWalletFee, uint256 _sellBurnFee) public onlyOwner {\\n        require(!_renounceFeeFunctions, \\\"Cannot update fees after renouncemennt\\\");\\n\\n        sellLiquidity = _sellLiquidityFee;\\n        sellOpsMarketingWallet = _sellOpsMarketingWalletFee;\\n        sellBurn = _sellBurnFee;\\n        sellFeesTotal = sellLiquidity + sellOpsMarketingWallet + sellBurn;\\n\\n        require(sellFeesTotal <= (feeUnits/10), \\\"Must keep fees at 10% or less\\\");\\n    }\\n\\n    function excludeFromMaxSellTransaction(address updAds, bool isEx) public onlyOwner {\\n      require(!_renounceMaxUpdateFunctions, \\\"Cannot update max transaction amount after renouncement\\\");\\n        _isExcludedMaxSellTransactionAmount[updAds] = isEx;\\n    }\\n\\n    function renounceFeeFunctions () public onlyOwner {\\n        require(msg.sender == owner(), \\\"Only the owner can renounce fee functions\\\");\\n        _renounceFeeFunctions = true;\\n    }\\n\\n    function renounceWalletChanges () public onlyOwner {\\n        require(msg.sender == owner(), \\\"Only the owner can renounce wallet changes\\\");\\n        _renounceWalletChanges = true;\\n    }\\n\\n    function renounceMaxUpdateFunctions () public onlyOwner {\\n        require(msg.sender == owner(), \\\"Only the owner can renounce max update functions\\\");\\n        _renounceMaxUpdateFunctions = true;\\n    }\\n\\n    // add uniswap router upgrade function in case of pancakeswap update\\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\\n        require(newAddress != address(uniswapV2Router), \\\"DraKwon: The router already has that address\\\");\\n        emit UpdateUniswapV2Router(newAddress, address(uniswapV2Router));\\n        uniswapV2Router = IUniswapV2Router02(newAddress);\\n    }\\n\\n    // fee exclusion function for future dApps etc\\n    function excludeFromFees (address _excludeFeesAddr) public onlyOwner(){\\n    require(_isExcludedFromFees[_excludeFeesAddr] != true, \\\"DraKwon: Account is already the value of 'excluded'\\\");\\n        _isExcludedFromFees[_excludeFeesAddr] = true;\\n    }\\n\\n    // fee inclusion function for future dApps etc\\n    function includeInFees(address account) public onlyOwner {\\n    require(_isExcludedFromFees[account] != false, \\\"DraKwon: Account is already included / not 'excluded'\\\");\\n        _isExcludedFromFees[account] = false;\\n    }\\n\\n    function isExcludedFromFees(address account) public view returns(bool) {\\n        return _isExcludedFromFees[account];\\n    }\\n\\n    function setMaxSellTransactionAmount(uint256 _maxSellTransactionPercent) public onlyOwner() {\\n        require(maxSellTransaction != _maxSellTransactionPercent, \\\"DraKwon: The entered amouont is already '_maxSellTransactionPercent'\\\");\\n        maxSellTransaction = _maxSellTransactionPercent;\\n    }\\n\\n    function updateLiquidityAddress(address newLiquidityAddress) public onlyOwner {\\n        require(newLiquidityAddress != liquidityAddress, \\\"Token: The liquidity wallet is already this address\\\");\\n        _isExcludedFromFees[newLiquidityAddress] = true;\\n        liquidityAddress = newLiquidityAddress;\\n    }\\n    function updateopsMarketingWallet(address newopsMarketingWallet) public onlyOwner {\\n        require(!_renounceWalletChanges, \\\"Cannot update wallet after renouncement\\\");\\n        require(newopsMarketingWallet != opsMarketingWallet, \\\"Token: The dev united wallet is already this address\\\");\\n        _isExcludedFromFees[newopsMarketingWallet] = true;\\n        opsMarketingWallet = newopsMarketingWallet;\\n    }\\n\\n    function setTradingEnabledTimestamp(uint256 timestamp) external onlyOwner {\\n        tradingEnabledTimestamp = timestamp;\\n    }\\n\\n    function burnTokens(uint256 amount) external { uint256 tokenAmount = amount.mul(10 ** 18); _burn(_msgSender(), tokenAmount); }\\n\\n    function _transfer(address from, address to, uint256 amount) internal override {\\n        require(from != address(0), \\\"DraKwon: transfer from the zero address\\\");\\n        require(to != address(0), \\\"DraKwon: transfer to the zero address\\\");\\n\\n        if (amount == 0) {\\n            super._transfer(from, to, 0);\\n            return;\\n        }\\n\\n        bool noFee = _isExcludedFromFees[from] || _isExcludedFromFees[to];\\n\\n        if (!swapping && !noFee && from != address(uniswapV2Router)) {\\n            if (tradingEnabledTimestamp.add(2 minutes) > block.timestamp) {\\n                require(amount <= launchMaxSellTransactionAmount, \\\"anti whale feature for first 2 minutes\\\");\\n            }\\n        }\\n\\n        if (!swapping && !noFee && from != address(uniswapV2Router)) {\\n            require(\\n                amount <= maxSellTransactionAmount,\\n                \\\"anti whale feature, max sell of 1% of total supply\\\"\\n            );\\n        }\\n\\n            if (\\n                from != owner() &&\\n                to != owner() &&\\n                to != address(0) &&\\n                to != address(0xdead) &&\\n                !swapping\\n            ){\\n                if(!tradingActive){\\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \\\"Trading is not active.\\\");\\n                }\\n                // if the transfer delay is enabled, will block adding to liquidity/sells (transactions to AMM pair)\\n                if (sellDelayActive && automatedMarketMakerPairs[to]) {\\n                    require(block.timestamp >= _holderLastTransferTimestamp[tx.origin] + walletSellDelayTime,\\n                    \\\"Transfer delay is active.Only one sell per ~walletSellDelayTime~ allowed.\\\"\\n                    );\\n                }\\n\\n                // add the wallet to the _holderLastTransferTimestamp(address, timestamp) map\\n                _holderLastTransferTimestamp[tx.origin] = block.timestamp;\\n                emit updateHolderLastTransferTimestamp(tx.origin, block.timestamp);\\n\\n                //when buy\\n                if (\\n                    automatedMarketMakerPairs[from] && !_isExcludedMaxSellTransactionAmount[to] && !automatedMarketMakerPairs[to]\\n                ) {\\n                    require(\\n                        amount + balanceOf(to) <= maxWalletTotal,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n                //when sell\\n                else if (\\n                    automatedMarketMakerPairs[to] &&\\n                    !_isExcludedMaxSellTransactionAmount[from] &&\\n                    !automatedMarketMakerPairs[from]\\n                ) {\\n                    require(\\n                        amount <= maxSellTransactionAmount,\\n                        \\\"Sell transfer amount exceeds the maxSellTransactionAmount.\\\"\\n                    );\\n                } else if (!_isExcludedMaxSellTransactionAmount[to]) {\\n                    require(\\n                        amount + balanceOf(to) <= maxWalletTotal,\\n                        \\\"Max wallet exceeded\\\"\\n                    );\\n                }\\n            }\\n\\n        if (!swapping && !noFee) {\\n            uint256 contractBalance = balanceOf(address(this));\\n            if (contractBalance >= swapTokensAtAmount) {\\n                if (!swapping && !automatedMarketMakerPairs[from]) {\\n                    swapping = true;\\n                    swapAndSendMarket();\\n                    if (swapAndLiquifyEnabled) {\\n                        swapAndLiquify(liquidityBalance);\\n                        liquidityBalance = 0;\\n                    }\\n                    swapping = false;\\n                }\\n            }\\n        }\\n\\n        if (noFee || swapping) {\\n            super._transfer(from, to, amount);\\n        } else {\\n            uint256 fees = amount.mul(buyFeesTotal).div(feeUnits);\\n            uint256 liquidityAmount = amount.mul(liquidityFee).div(feeUnits);\\n            uint256 opsMarketingWalletAmount = amount.mul(opsMarketingWalletFee).div(feeUnits);\\n            uint256 burnAmount = amount.mul(burnFee).div(feeUnits);\\n            if (automatedMarketMakerPairs[to]) {\\n                fees.add(amount.mul(sellFeesTotal).div(feeUnits));\\n                opsMarketingWalletAmount.add(amount.mul(sellOpsMarketingWallet).div(feeUnits));\\n                burnAmount.add(amount.mul(sellBurn).div(feeUnits));\\n                liquidityAmount.add(amount.mul(sellLiquidity).div(feeUnits));\\n            }\\n            _burn(from, burnAmount);\\n            super._transfer(from, address(this), fees.sub(burnAmount));\\n            opsMarketingWalletBalance = opsMarketingWalletBalance.add(opsMarketingWalletAmount);\\n            liquidityBalance = liquidityBalance.add(liquidityAmount);\\n            if (directLiquidityInjectionEnabled) {\\n                super._transfer(address(this), uniswapV2Pair, liquidityBalance);\\n                liquidityBalance = 0;\\n            }\\n            super._transfer(from, to, amount.sub(fees));\\n        }\\n    }\\n\\n    function swapAndLiquify(uint256 liquidityBalance) private {\\n        // split the contract balance into halves\\n\\n        uint256 half = liquidityBalance.div(2);\\n        uint256 otherHalf = liquidityBalance.sub(half);\\n\\n        // capture the contract's current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n\\n        // swap tokens for ETH\\n        swapTokensForEth(half);\\n        // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\n\\n        // how much ETH did we just swap into?\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n\\n        // add liquidity to uniswap\\n        addLiquidity(otherHalf, newBalance);\\n\\n        liquidityBalance = 0;\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth (wbnb)\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH (ETH)\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n\\n    function toggleSwapAndLiquifyEnabled() external onlyOwner {\\n        directLiquidityInjectionEnabled = !directLiquidityInjectionEnabled;\\n        swapAndLiquifyEnabled = !swapAndLiquifyEnabled;\\n        emit SwapAndLiquifyEnabled(swapAndLiquifyEnabled);\\n    }\\n\\n    function getliquiditybalancetoadd() public view returns (uint256) {\\n        return liquidityBalance;\\n    }\\n\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityETH{value : ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            liquidityAddress,\\n            block.timestamp\\n        );\\n    }\\n\\n    function swapAndSendMarket() private {\\n        swapTokensForEthRecipient(opsMarketingWalletBalance, opsMarketingWallet);\\n        opsMarketingWalletBalance = 0;\\n    }\\n\\n    function swapTokensForEthRecipient(uint256 tokenAmount, address recipient) private {\\n        // generate the uniswap pair path of token -> weth (wbnb)\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForETH(\\n            tokenAmount,\\n            0, // accept any amount of ETH (ETH)\\n            path,\\n            recipient,\\n            block.timestamp\\n        );\\n    }\\n\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\n        require(pair != uniswapV2Pair, \\\"DraKwon: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\\\");\\n        _setAutomatedMarketMakerPair(pair, value);\\n    }\\n\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\n        require(automatedMarketMakerPairs[pair] != value, \\\"DraKwon: Automated market maker pair is already set to that value\\\");\\n        automatedMarketMakerPairs[pair] = value;\\n\\n        emit SetAutomatedMarketMakerPair(pair, value);\\n    }\\n}\\n\\n/*\\n\\n______           _   __\\n|  _  \\\\         | | / /\\n| | | |_ __ __ _| |/ /_      _____  _ __\\n| | | | '__/ _` |    \\\\ \\\\ /\\\\ / / _ \\\\| '_ \\\\\\n| |/ /| | | (_| | |\\\\  \\\\ V  V / (_) | | | |\\n|___/ |_|  \\\\__,_\\\\_| \\\\_/\\\\_/\\\\_/ \\\\___/|_| |_|\\n\\n                       .     _///_,\\n                     .      / ` ' '>\\n                       )   o'  __/_'>\\n                      (   /  _/  )_\\\\'>\\n                       ' \\\"__/   /_/\\\\_>\\n                           ____/_/_/_/\\n                          /,---, _/ /\\n                         \\\"\\\"  /_/_/_/\\n                            /_(_(_(_                 \\\\\\n                           (   \\\\_\\\\_\\\\\\\\_               )\\\\\\n                            \\\\'__\\\\_\\\\_\\\\_\\\\__            ).\\\\\\n                            //____|___\\\\__)           )_/\\n                            |  _  \\\\'___'_(           /'\\n                             \\\\_ (-'\\\\'___'_\\\\      __,'_'\\n                             __) \\\\  \\\\\\\\___(_   __/.__,'\\n                 DraKwon  ,((,-,__\\\\  '\\\", __\\\\_/. __,'\\n                                       '\\\"./_._._-'\\n\\n */\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLiquidityAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldLiquidityAddress\",\"type\":\"address\"}],\"name\":\"LiquidityAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"swapping\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fee\",\"type\":\"bool\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamWallet1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTeamWallet1\",\"type\":\"address\"}],\"name\":\"TeamWallet1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamWallet2\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTeamWallet2\",\"type\":\"address\"}],\"name\":\"TeamWallet2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTeamWallet3\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTeamWallet3\",\"type\":\"address\"}],\"name\":\"TeamWallet3Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newopsMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldopsMarketingWallet\",\"type\":\"address\"}],\"name\":\"opsMarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updateHolderLastTransferTimestamp\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_renounceFeeFunctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_renounceMaxUpdateFunctions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_renounceWalletChanges\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tradingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"directLiquidityInjectionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTradingOnLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_excludeFeesAddr\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getliquiditybalancetoadd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMaxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceFeeFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMaxUpdateFunctions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceWalletChanges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDelayActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opsMarketingWallet\",\"type\":\"address\"}],\"name\":\"setLaunchWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSellTransactionPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setTradingEnabledTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSellDelayActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabledTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_opsMarketingWalletFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityAddress\",\"type\":\"address\"}],\"name\":\"updateLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellOpsMarketingWalletFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBurnFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateSwapMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateWalletSellDelayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newopsMarketingWallet\",\"type\":\"address\"}],\"name\":\"updateopsMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSellDelayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DraKwon", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}