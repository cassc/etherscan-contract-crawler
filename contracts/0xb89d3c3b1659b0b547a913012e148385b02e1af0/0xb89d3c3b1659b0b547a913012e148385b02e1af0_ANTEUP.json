{"SourceCode": "//.----------------.  .-----------------. .----------------.  .----------------.  .----------------.  .----------------. \r\n//| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\r\n//| |      __      | || | ____  _____  | || |  _________   | || |  _________   | || |    _____     | || |     ____     | |\r\n//| |     /  \\     | || ||_   \\|_   _| | || | |  _   _  |  | || | |_   ___  |  | || |   / ___ `.   | || |   .' __ '.   | |\r\n//| |    / /\\ \\    | || |  |   \\ | |   | || | |_/ | | \\_|  | || |   | |_  \\_|  | || |  |_/___) |   | || |   | (__) |   | |\r\n//| |   / ____ \\   | || |  | |\\ \\| |   | || |     | |      | || |   |  _|  _   | || |   .'____.'   | || |   .`____'.   | |\r\n//| | _/ /    \\ \\_ | || | _| |_\\   |_  | || |    _| |_     | || |  _| |___/ |  | || |  / /____     | || |  | (____) |  | |\r\n//| ||____|  |____|| || ||_____|\\____| | || |   |_____|    | || | |_________|  | || |  |_______|   | || |  `.______.'  | |\r\n//| |              | || |              | || |              | || |              | || |              | || |              | |\r\n//| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\r\n//'----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \r\n\r\n// @anteup_portal \r\n\r\n/**\r\n * SPDX-License-Identifier: MIT\r\n */ \r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n \r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\r\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;}\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) { \r\n        uint256 size; assembly { size := extcodesize(account) } return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");(bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n        \r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n        \r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n        \r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) { return returndata; } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {revert(errorMessage);}\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IPancakeV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    \r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract ANTEUP is IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    address internal deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    string constant _name = \"AnteUp\";\r\n    string constant _symbol = \"ANTE\";\r\n    uint8 constant _decimals = 18;\r\n    \r\n    uint256 internal constant _totalSupply = 28_000_000 * (10**18);\r\n  \r\n    uint256 public maxTxAmount = _totalSupply / 1000; // 0.1% of the total supply\r\n    uint256 public maxWalletBalance = _totalSupply / 50; // 2% of the total supply\r\n\r\n    uint256 private constant FEES_DIVISOR = 10**3;\r\n\r\n    uint256 public sellingMarketingFee = 10; // 1%\r\n    uint256 public buyingMarketingFee = 10;\r\n    \r\n    uint256 public sellingTreasuryFee = 10;\r\n    uint256 public buyingTreasuryFee = 10;\r\n    \r\n    uint256 public lpFee = 5; // 0.5%\r\n    uint256 public teamFee = 10;\r\n\r\n    uint256 public buyersTotalFees = buyingMarketingFee.add(buyingTreasuryFee).add(lpFee);\r\n    uint256 public sellersTotalFees = sellingMarketingFee.add(sellingTreasuryFee).add(teamFee);\r\n\r\n    // Total = 100% (1000)\r\n    uint256 public taxPortionOfSwap = 950; // 95%\r\n    uint256 public lpPortionOfSwap = 50; // 5%\r\n\r\n    address public treasuryWallet = 0x281fAA72161bbe49DD2D0987c8BA5870Bd398B26;\r\n    \r\n    bool public antiBotEnabled = false;\r\n    uint256 public antiBotFee = 990; // 99%\r\n    uint256 public _startTimeForSwap;\r\n    \r\n\r\n    IPancakeV2Router public router;\r\n    address public pair;\r\n    \r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping(address => bool) public _iswhitelisted;\r\n    mapping (address => bool) internal _isExcludedFromFee;\r\n    \r\n    event UpdatePancakeswapRouter(address indexed newAddress, address indexed oldAddress);\r\n    \r\n    event SwapTokensForETH(uint256 amountIn, address[] path);\r\n    event TreasuryWalletUpdated(address indexed newTreasuryWallet, address indexed oldTreasuryWallet);\r\n    event LiquidityAdded(uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity);\r\n    \r\n    constructor () {\r\n        _balances[msg.sender] = _totalSupply;\r\n        \r\n        IPancakeV2Router _newPancakeRouter = IPancakeV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pair = IPancakeV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        router = _newPancakeRouter;\r\n\r\n\r\n        // exclude owner and this contract from fee\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        _approve(owner(), address(router), ~uint256(0));\r\n        \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n    \r\n    receive() external payable { }\r\n    \r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) { \r\n        return _balances[account]; \r\n    }\r\n    \r\n        \r\n    function transfer(address recipient, uint256 amount) external override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n        }\r\n        \r\n    function allowance(address owner, address spender) external view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n        }\r\n    \r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n        }\r\n        \r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool){\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    \r\n    }\r\n        \r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BaseRfiToken: approve from the zero address\");\r\n        require(spender != address(0), \"BaseRfiToken: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function blacklistAddress(address account, bool value) external onlyOwner{\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function whitelistAddress(address account, bool value) external onlyOwner{\r\n        _iswhitelisted[account] = value;\r\n    }\r\n    \r\n    function updateWalletMax(uint256 _walletMax) external onlyOwner {\r\n        maxWalletBalance = _walletMax * (10**18);\r\n    }\r\n    \r\n    function updateTransactionMax(uint256 _txMax) external onlyOwner {\r\n        maxTxAmount = _txMax * (10**18);\r\n    }\r\n\r\n    function updateTreasuryWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != treasuryWallet, \"The Treasury wallet is already this address\");\r\n        emit TreasuryWalletUpdated(newWallet, treasuryWallet);\r\n        \r\n        treasuryWallet = newWallet;\r\n    }\r\n\r\n    function updatePortionsOfSwap(uint256 taxPortion, uint256 lpPortion) external onlyOwner {\r\n        \r\n        uint256 totalPortion = taxPortion.add(lpPortion);\r\n        require(totalPortion == 1000, \"Total must be equal to 1000 (100%)\");\r\n        \r\n        taxPortionOfSwap = taxPortion;\r\n        lpPortionOfSwap = lpPortion;\r\n    }\r\n\r\n    function calcBuyersTotalFees() private {\r\n        buyersTotalFees = buyingMarketingFee.add(buyingTreasuryFee).add(lpFee);\r\n    }\r\n    \r\n    function calcSellersTotalFees() private {\r\n        sellersTotalFees = sellingMarketingFee.add(sellingTreasuryFee).add(teamFee);\r\n    }\r\n    \r\n    function updateSellingMarketingFee (uint256 newFee) external onlyOwner {\r\n        sellingMarketingFee = newFee;\r\n        calcSellersTotalFees();\r\n    }\r\n    \r\n    function updateSellingTreasuryFee (uint256 newFee) external onlyOwner {\r\n        sellingTreasuryFee = newFee;\r\n        calcSellersTotalFees();\r\n    }\r\n\r\n    function updateTeamFee (uint256 newFee) external onlyOwner {\r\n        teamFee = newFee;\r\n        calcSellersTotalFees();\r\n    }\r\n    \r\n    function updateLpFee (uint256 newFee) external onlyOwner {\r\n        lpFee = newFee;\r\n       calcBuyersTotalFees();\r\n    }\r\n\r\n    function updateBuyingMarketingFee (uint256 newFee) external onlyOwner {\r\n        buyingMarketingFee = newFee;\r\n        calcBuyersTotalFees();\r\n    }\r\n    \r\n    function updateBuyingTreasuryFee (uint256 newFee) external onlyOwner {\r\n        buyingTreasuryFee = newFee;\r\n        calcBuyersTotalFees();\r\n    }\r\n    \r\n\r\n    function toggleAntiBot(bool toggleStatus) external onlyOwner() {\r\n        antiBotEnabled = toggleStatus;\r\n\r\n        if(antiBotEnabled){\r\n            _startTimeForSwap = block.timestamp + 30;    \r\n        }    \r\n    }\r\n    \r\n    function updateRouterAddress(address newAddress) external onlyOwner {\r\n        require(newAddress != address(router), \"The router already has that address\");\r\n        emit UpdatePancakeswapRouter(newAddress, address(router));\r\n        \r\n        router = IPancakeV2Router(newAddress);   \r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount, uint256 fee) internal returns (uint256)  {\r\n        uint256 feeAmount = amount.mul(fee).div(FEES_DIVISOR);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        \r\n        // Fee: convert and send ETH\r\n        swapBack();\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n        \r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"Token: transfer from the zero address\");\r\n        require(recipient != address(0), \"Token: transfer to the zero address\");\r\n        require(sender != address(deadAddress), \"Token: transfer from the burn address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        require(!_isBlacklisted[sender] && !_isBlacklisted[recipient], \"Blacklisted address\");\r\n        \r\n        if (\r\n            sender != address(router) && //router -> pair is removing liquidity which shouldn't have max\r\n            !_iswhitelisted[recipient] && //no max for those whitelisted\r\n            !_iswhitelisted[sender] \r\n        ) {\r\n            require(amount <= maxTxAmount, \"Transfer amount exceeds the Max Transaction Amount.\");\r\n            \r\n        }\r\n        \r\n        if ( maxWalletBalance > 0 && !_iswhitelisted[recipient] && !_iswhitelisted[sender] && recipient != address(pair) ) {\r\n                uint256 recipientBalance = balanceOf(recipient);\r\n                require(recipientBalance + amount <= maxWalletBalance, \"New balance would exceed the maxWalletBalance\");\r\n            }\r\n\r\n        // Exchange tokens - deduct from senders balance\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n            \r\n         // Indicates whether or not fee should be deducted from the transfer - only when antibot enabled\r\n        bool _isTakeFee = antiBotEnabled && block.timestamp <= _startTimeForSwap ? true : false;\r\n        \r\n         // If any account belongs to _iswhitelisted account then remove the fee\r\n        if(_iswhitelisted[sender] || _iswhitelisted[recipient]) { \r\n            _isTakeFee = false; \r\n        }\r\n\r\n        // Transfer between wallets\r\n        if(sender != pair && recipient != pair) {\r\n           _isTakeFee = false;\r\n        }\r\n\r\n        uint256 sumOfFees = recipient == pair ? sellersTotalFees : buyersTotalFees;\r\n\r\n        // Antibot enabled\r\n        sumOfFees = antiBotEnabled && block.timestamp <= _startTimeForSwap ? antiBotFee : sumOfFees;\r\n        \r\n         uint256 amountReceived = _isTakeFee ? takeFee(sender, amount, sumOfFees) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);   \r\n    }\r\n\r\n\r\n    function swapBack() private {\r\n        uint256 splitLiquidityPortion = lpPortionOfSwap.div(2);\r\n        uint256 amountToLiquify = balanceOf(address(this)).mul(splitLiquidityPortion).div(FEES_DIVISOR);\r\n        uint256 amountToSwap = balanceOf(address(this)).sub(amountToLiquify);\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n        \r\n        swapTokensForETH(amountToSwap);\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        \r\n        uint256 amountBNBTax = amountBNB.mul(taxPortionOfSwap).div(FEES_DIVISOR);\r\n        uint256 amountBNBLiquidity = amountBNB.mul(splitLiquidityPortion).div(FEES_DIVISOR);\r\n        \r\n          //Send to addresses\r\n        transferToAddress(payable(treasuryWallet), amountBNBTax);\r\n        \r\n        // add liquidity\r\n        _addLiquidity(amountToLiquify, amountBNBLiquidity);\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        (uint256 tokenAmountSent, uint256 ethAmountSent, uint256 liquidity) = router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        emit LiquidityAdded(tokenAmountSent, ethAmountSent, liquidity);\r\n    }\r\n    \r\n    \r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function transferToAddress(address payable recipient, uint256 amount) private {\r\n        require(recipient != address(0), \"Cannot transfer the ETH to a zero address\");\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function TransferETH(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \"Cannot withdraw the ETH balance to a zero address\");\r\n        recipient.transfer(amount);\r\n    }\r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmountSent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTreasuryWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTreasuryWallet\",\"type\":\"address\"}],\"name\":\"TreasuryWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdatePancakeswapRouter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_iswhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_startTimeForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyersTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyingTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPortionOfSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellersTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellingTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPortionOfSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toggleStatus\",\"type\":\"bool\"}],\"name\":\"toggleAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyingMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyingTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxPortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpPortion\",\"type\":\"uint256\"}],\"name\":\"updatePortionsOfSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateSellingMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateSellingTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_txMax\",\"type\":\"uint256\"}],\"name\":\"updateTransactionMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_walletMax\",\"type\":\"uint256\"}],\"name\":\"updateWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ANTEUP", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e924be4795d7d5877a264fc913a5d470934e2ae0a5af440c55d5d8367c6b450"}