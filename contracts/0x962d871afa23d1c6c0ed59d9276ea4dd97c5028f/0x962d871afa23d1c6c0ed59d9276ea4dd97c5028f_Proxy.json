{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nimport \\\"./LibRawResult.sol\\\";\\nimport \\\"./Implementation.sol\\\";\\n\\n/// @notice Base class for all proxy contracts.\\ncontract Proxy {\\n    using LibRawResult for bytes;\\n\\n    /// @notice The address of the implementation contract used by this proxy.\\n    Implementation public immutable IMPL;\\n\\n    // Made `payable` to allow initialized crowdfunds to receive ETH as an\\n    // initial contribution.\\n    constructor(Implementation impl, bytes memory initCallData) payable {\\n        IMPL = impl;\\n        (bool s, bytes memory r) = address(impl).delegatecall(initCallData);\\n        if (!s) {\\n            r.rawRevert();\\n        }\\n    }\\n\\n    // Forward all calls to the implementation.\\n    fallback() external payable {\\n        Implementation impl = IMPL;\\n        assembly {\\n            calldatacopy(0x00, 0x00, calldatasize())\\n            let s := delegatecall(gas(), impl, 0x00, calldatasize(), 0x00, 0)\\n            returndatacopy(0x00, 0x00, returndatasize())\\n            if iszero(s) {\\n                revert(0x00, returndatasize())\\n            }\\n            return(0x00, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/LibRawResult.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nlibrary LibRawResult {\\n    // Revert with the data in `b`.\\n    function rawRevert(bytes memory b) internal pure {\\n        assembly {\\n            revert(add(b, 32), mload(b))\\n        }\\n    }\\n\\n    // Return with the data in `b`.\\n    function rawReturn(bytes memory b) internal pure {\\n        assembly {\\n            return(add(b, 32), mload(b))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Implementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\n// Base contract for all contracts intended to be delegatecalled into.\\nabstract contract Implementation {\\n    error OnlyDelegateCallError();\\n    error OnlyConstructorError();\\n\\n    address public immutable IMPL;\\n\\n    constructor() {\\n        IMPL = address(this);\\n    }\\n\\n    // Reverts if the current function context is not inside of a delegatecall.\\n    modifier onlyDelegateCall() virtual {\\n        if (address(this) == IMPL) {\\n            revert OnlyDelegateCallError();\\n        }\\n        _;\\n    }\\n\\n    // Reverts if the current function context is not inside of a constructor.\\n    modifier onlyConstructor() {\\n        if (address(this).code.length != 0) {\\n            revert OnlyConstructorError();\\n        }\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"viaIR\": true\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract Implementation\",\"name\":\"impl\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initCallData\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"IMPL\",\"outputs\":[{\"internalType\":\"contract Implementation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b676cfeeed5c7b739452a502f1eff9ab684a56da000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000005042d992cd3000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000460000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000004ae00000000000000000000000000000000000000000000000000000000000069780000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000000005dc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000f7f52dd34bc21eda08c0b804c7c1dbc48375820f000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000ef30f368238beecdf6900203e965a636e3d9bf41000000000000000000000000a3e0fe34932646818f421879c98863a7afe707290000000000000000000000008d33d35089e81d580f7ef57ab000c5126554a07b000000000000000000000000bf3bd25f7671eb1723f31c32fb85dd2a57401ac300000000000000000000000060b57251e2a8dae6dba4b515f76be3758bff8821000000000000000000000000b3a107edf162d07b7790c7f28674cbb58a5992eb0000000000000000000000004502ef5ea38a01f943aebb4a058df82f81c7816700000000000000000000000012d6ed71b6eeadc23e1a9be9d3fc887d1ca60b92000000000000000000000000f478bde9e21eafebe71cb37d876c0e6119bb7a1700000000000000000000000030e543dd7d0949803400302bf69ed0f28390add3000000000000000000000000000000000000000000000000000000000000000d4d6179706f6c65206b7572746100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d4d6179706f6c65206b757274610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000014a1925c2fedb14593913f0d0d03b03318b913c200000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}