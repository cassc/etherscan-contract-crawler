{"SourceCode": "/*\r\n   ________          _       ______           __                  \r\n  / ____/ /_  ____ _(_)___  / ____/___ ______/ /_____  _______  __\r\n / /   / __ \\/ __ `/ / __ \\/ /_  / __ `/ ___/ __/ __ \\/ ___/ / / /\r\n/ /___/ / / / /_/ / / / / / __/ / /_/ / /__/ /_/ /_/ / /  / /_/ / \r\n\\____/_/ /_/\\__,_/_/_/ /_/_/    \\__,_/\\___/\\__/\\____/_/   \\__, /  \r\n                                                         /____/   \r\n  ChainFactory Transparent Upgradeable Proxy\r\n\r\n  Web:      https://chainfactory.app/\r\n  X:        https://x.com/ChainFactoryApp\r\n  Telegram: https://t.me/ChainFactory\r\n  Discord:  https://discord.gg/fpjxD39v3k\r\n  YouTube:  https://youtube.com/@UpfrontDeFi\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.23;\r\n\r\nlibrary Address {\r\n  function isContract(address _contract) internal view returns (bool) {\r\n    return _contract.code.length > 0;\r\n  }\r\n}\r\n\r\nlibrary StorageSlot {\r\n  function getAddressSlot(bytes32 _slot) internal view returns (address) {\r\n    address addr;\r\n\r\n    assembly {\r\n      addr := sload(_slot)\r\n    }\r\n\r\n    return addr;\r\n  }\r\n\r\n  function setAddressSlot(bytes32 _slot, address _addr) internal {\r\n    assembly {\r\n      sstore(_slot, _addr)\r\n    }\r\n  }\r\n}\r\n\r\ncontract ChainFactory_TransparentUpgradeableProxy {\r\n  bytes32 private constant ADMIN_SLOT = bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1);\r\n  bytes32 private constant IMPLEMENTATION_SLOT = bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1);\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event ImplementationUpgraded(address indexed implementation);\r\n\r\n  modifier onlyOwner() {\r\n    if (msg.sender == owner()) {\r\n      _;\r\n    } else {\r\n      _fallback();\r\n    }\r\n  }\r\n\r\n  constructor() {\r\n    _transferOwnership(msg.sender);\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return StorageSlot.getAddressSlot(ADMIN_SLOT);\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    require(newOwner != address(0));\r\n\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function getImplementation() external view returns (address) {\r\n    return _getImplementation();\r\n  }\r\n\r\n  function setImplementation(address _implementation) external onlyOwner {\r\n    _setImplementation(_implementation);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n\r\n    address oldOwner = owner();\r\n\r\n    StorageSlot.setAddressSlot(ADMIN_SLOT, newOwner);\r\n\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n\r\n  function _getImplementation() internal view returns (address) {\r\n    return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT);\r\n  }\r\n\r\n  function _setImplementation(address _implementation) internal {\r\n    require(Address.isContract(_implementation), \"Not a contract\");\r\n\r\n    StorageSlot.setAddressSlot(IMPLEMENTATION_SLOT, _implementation);\r\n\r\n    emit ImplementationUpgraded(_implementation);\r\n  }\r\n\r\n  function _delegate(address _implementation) internal returns (bytes memory) {\r\n    assembly {\r\n      let csize := calldatasize()\r\n\r\n      calldatacopy(0, 0, csize)\r\n\r\n      let result := delegatecall(gas(), _implementation, 0, csize, 0, 0)\r\n      let rsize := returndatasize()\r\n\r\n      returndatacopy(0, 0, rsize)\r\n\r\n      switch result\r\n        case 0 { revert(0, rsize) }\r\n        default { return(0, rsize) }\r\n    }\r\n  }\r\n\r\n  function _fallback() internal {\r\n    _delegate(_getImplementation());\r\n  }\r\n\r\n  receive() external payable { _fallback(); }\r\n  fallback() external payable { _fallback(); }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ChainFactory_TransparentUpgradeableProxy", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0x018af0e9165b398ee44c6f4edd68ca0a6a98c58e", "SwarmSource": "ipfs://2a207a3e525e527aad9effa34ef9d366d03824bad60a926d655858fab7810488"}