{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/lib/DTClaims.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\n/* *\\n * Copyright 2021-2023 LI LI @ JINGTIAN & GONGCHENG.\\n * All Rights Reserved.\\n * */\\n\\npragma solidity ^0.8.8;\\n\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\nlibrary DTClaims {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Head {\\n        uint16 seqOfDeal;\\n        bool dragAlong;\\n        uint32 seqOfShare;\\n        uint64 paid;\\n        uint64 par;\\n        uint40 caller;\\n        uint16 para;\\n        uint16 argu;\\n    }\\n\\n    struct Claim {\\n        uint8 typeOfClaim;\\n        uint32 seqOfShare;\\n        uint64 paid;\\n        uint64 par;\\n        uint40 claimer;\\n        uint48 sigDate;\\n        bytes32 sigHash;\\n    }\\n\\n    struct Pack {\\n        //seqOfShare => Claim\\n        mapping(uint256 => Claim) claims;\\n        EnumerableSet.UintSet shares;\\n    }\\n\\n    struct Claims {\\n        // seqOfDeal => drag/tag/merged => Pack\\n        mapping(uint256 => mapping(uint256 => Pack)) packs;\\n        EnumerableSet.UintSet deals;\\n    }\\n\\n    modifier dealExist(Claims storage cls, uint seqOfDeal) {\\n        require (hasClaim(cls, seqOfDeal), \\\"DTClaims.mf.dealExist: not\\\");\\n        _;\\n    }\\n\\n    //#################\\n    //##  Write I/O  ##\\n    //#################\\n\\n    function snParser(bytes32 sn) public pure returns(Head memory head) {\\n        uint _sn = uint(sn);\\n        head = Head({\\n            seqOfDeal: uint16(_sn >> 240),\\n            dragAlong: bool(uint8(_sn >> 232) == 1),\\n            seqOfShare: uint32(_sn >> 200),\\n            paid: uint64(_sn >> 136),\\n            par: uint64(_sn >> 72),\\n            caller: uint40(_sn >> 32),\\n            para: uint16(_sn >> 16),\\n            argu: uint16(_sn)\\n        });\\n    }\\n\\n    function codifyHead(Head memory head) public pure returns(bytes32 sn) {\\n        bytes memory _sn = abi.encodePacked(\\n                            head.seqOfDeal,\\n                            head.dragAlong,\\n                            head.seqOfShare,\\n                            head.paid,\\n                            head.par,\\n                            head.caller,\\n                            head.para,\\n                            head.argu\\n        );\\n\\n        assembly {\\n            sn := mload(add(_sn, 0x20))\\n        }\\n    }\\n\\n    function execAlongRight(\\n        Claims storage cls,\\n        bool dragAlong,\\n        uint256 seqOfDeal,\\n        uint256 seqOfShare,\\n        uint paid,\\n        uint par,\\n        uint256 claimer,\\n        bytes32 sigHash\\n    ) public {\\n\\n        uint16 intSeqOfDeal = uint16(seqOfDeal);\\n        require(intSeqOfDeal > 0, \\\"DTClaims.exec: zero seqOfDeal\\\");\\n\\n        Claim memory newClaim = Claim({\\n            typeOfClaim: dragAlong ? 0 : 1,\\n            seqOfShare: uint32(seqOfShare),\\n            paid: uint64(paid),\\n            par: uint64(par),\\n            claimer: uint40(claimer),\\n            sigDate: uint48(block.timestamp),\\n            sigHash: sigHash\\n        }); \\n\\n        require(newClaim.seqOfShare > 0, \\\"DTClaims.exec: zero seqOfShare\\\");\\n\\n        Pack storage p = cls.packs[intSeqOfDeal][newClaim.typeOfClaim];\\n\\n        if (p.shares.add(newClaim.seqOfShare)){\\n\\n            p.claims[newClaim.seqOfShare] = newClaim;\\n\\n            cls.deals.add(intSeqOfDeal);\\n\\n            _consolidateClaimsOfShare(cls, intSeqOfDeal, newClaim);\\n        }\\n    }\\n\\n    function _consolidateClaimsOfShare(\\n        Claims storage cls,\\n        uint intSeqOfDeal,\\n        Claim memory newClaim\\n    ) private {\\n        Pack storage m = cls.packs[intSeqOfDeal][2];\\n\\n        if (m.shares.add(newClaim.seqOfShare)) {\\n            m.claims[newClaim.seqOfShare] = newClaim;\\n        } else {\\n            Claim storage mClaim = m.claims[newClaim.seqOfShare];\\n\\n            mClaim.paid = newClaim.paid > mClaim.paid  ? newClaim.paid :  mClaim.paid;\\n            mClaim.par = newClaim.par > mClaim.par ? newClaim.par : mClaim.par;\\n\\n            if (mClaim.typeOfClaim == 0){\\n\\n                Claim memory tClaim = cls.packs[intSeqOfDeal][1].claims[newClaim.seqOfShare];\\n\\n                mClaim.typeOfClaim = 1;\\n                mClaim.claimer = tClaim.claimer;\\n                mClaim.sigDate = tClaim.sigDate;\\n                mClaim.sigHash = tClaim.sigHash;\\n            }\\n        }\\n    }\\n\\n    function acceptAlongClaims(\\n        Claims storage cls,\\n        uint seqOfDeal\\n    ) public returns (Claim[] memory) {\\n        cls.packs[seqOfDeal][2].claims[0].typeOfClaim = 1;\\n        return getClaimsOfDeal(cls, seqOfDeal);\\n    }\\n\\n    //  ################################\\n    //  ##       \u67e5\u8be2\u63a5\u53e3              ##\\n    //  ################################\\n\\n    function hasClaim(Claims storage cls, uint seqOfDeal) public view returns(bool) {\\n        return cls.deals.contains(seqOfDeal);\\n    }\\n\\n    function getDeals(Claims storage cls) public view returns(uint[] memory) {\\n        return cls.deals.values();\\n    }\\n\\n    function getClaimsOfDeal(\\n        Claims storage cls,\\n        uint seqOfDeal\\n    ) public view dealExist(cls, seqOfDeal) returns(Claim[] memory) {\\n\\n        Pack storage m = cls.packs[seqOfDeal][2];\\n\\n        uint[] memory sharesList = m.shares.values();\\n        uint len = sharesList.length;\\n\\n        Claim[] memory output = new Claim[](len);\\n\\n        while (len > 0) {\\n            output[len - 1] = m.claims[sharesList[len - 1]];\\n            len --;\\n        }\\n\\n        return output;\\n    }\\n\\n    function hasShare(\\n        Claims storage cls,\\n        uint seqOfDeal,\\n        uint seqOfShare        \\n    ) public view dealExist(cls, seqOfDeal) returns(bool) {\\n        return cls.packs[seqOfDeal][2].shares.contains(seqOfShare);\\n    }\\n\\n    function getClaimForShare(\\n        Claims storage cls,\\n        uint seqOfDeal,\\n        uint seqOfShare\\n    ) public view returns (Claim memory) {\\n        require (hasShare(cls, seqOfDeal, seqOfShare), \\\"DTClaims.getClaimsForShare: not exist\\\");\\n        return cls.packs[seqOfDeal][2].claims[seqOfShare];\\n    }\\n\\n    function allAccepted(Claims storage cls) public view returns(bool flag) {\\n        uint[] memory dealsList = cls.deals.values();\\n        uint len = dealsList.length;\\n\\n        flag = true;\\n        while(len > 0) {\\n            if (cls.packs[dealsList[len - 1]][2].claims[0].typeOfClaim == 0) {\\n                flag = false;\\n                break;\\n            }\\n            len--;\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/lib/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.8;\\n\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                set._values[toDeleteIndex] = lastValue;\\n                set._indexes[lastValue] = valueIndex;\\n            }\\n\\n            delete set._values[lastIndex];\\n            set._values.pop();\\n\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return set._values[index];\\n    }\\n\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    //======== Bytes32Set ========\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function length(Bytes32Set storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function values(Bytes32Set storage set)\\n        public\\n        view\\n        returns (bytes32[] memory)\\n    {\\n        return _values(set._inner);\\n    }\\n\\n    //======== AddressSet ========\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function length(AddressSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function values(AddressSet storage set)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    //======== UintSet ========\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function add(UintSet storage set, uint256 value) public returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) public view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function values(UintSet storage set)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/lib/EnumerableSet.sol\": {\r\n        \"EnumerableSet\": \"0xc4f24b69792ff96f0316fab2d7df198af8033930\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"seqOfDeal\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"dragAlong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"paid\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"par\",\"type\":\"uint64\"},{\"internalType\":\"uint40\",\"name\":\"caller\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"para\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"argu\",\"type\":\"uint16\"}],\"internalType\":\"struct DTClaims.Head\",\"name\":\"head\",\"type\":\"tuple\"}],\"name\":\"codifyHead\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sn\",\"type\":\"bytes32\"}],\"name\":\"snParser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"seqOfDeal\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"dragAlong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"seqOfShare\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"paid\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"par\",\"type\":\"uint64\"},{\"internalType\":\"uint40\",\"name\":\"caller\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"para\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"argu\",\"type\":\"uint16\"}],\"internalType\":\"struct DTClaims.Head\",\"name\":\"head\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "DTClaims", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}