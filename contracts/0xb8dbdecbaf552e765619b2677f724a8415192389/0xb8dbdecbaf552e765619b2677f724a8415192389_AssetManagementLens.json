{"SourceCode": "// SPDX-License-Identifier: BUSL-1.1\r\n// File: lib/ipor-protocol/contracts/libraries/errors/IporErrors.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\nlibrary IporErrors {\r\n    // 000-199 - general codes\r\n\r\n    /// @notice General problem, address is wrong\r\n    string public constant WRONG_ADDRESS = \"IPOR_000\";\r\n\r\n    /// @notice General problem. Wrong decimals\r\n    string public constant WRONG_DECIMALS = \"IPOR_001\";\r\n\r\n    /// @notice General problem, addresses mismatch\r\n    string public constant ADDRESSES_MISMATCH = \"IPOR_002\";\r\n\r\n    /// @notice Sender's asset balance is too low to transfer and to open a swap\r\n    string public constant SENDER_ASSET_BALANCE_TOO_LOW = \"IPOR_003\";\r\n\r\n    /// @notice Value is not greater than zero\r\n    string public constant VALUE_NOT_GREATER_THAN_ZERO = \"IPOR_004\";\r\n\r\n    /// @notice Input arrays length mismatch\r\n    string public constant INPUT_ARRAYS_LENGTH_MISMATCH = \"IPOR_005\";\r\n\r\n    /// @notice Amount is too low to transfer\r\n    string public constant NOT_ENOUGH_AMOUNT_TO_TRANSFER = \"IPOR_006\";\r\n\r\n    /// @notice msg.sender is not an appointed owner, so cannot confirm his appointment to be an owner of a specific smart contract\r\n    string public constant SENDER_NOT_APPOINTED_OWNER = \"IPOR_007\";\r\n\r\n    /// @notice only Router can have access to function\r\n    string public constant CALLER_NOT_IPOR_PROTOCOL_ROUTER = \"IPOR_008\";\r\n\r\n    /// @notice Chunk size is equal to zero\r\n    string public constant CHUNK_SIZE_EQUAL_ZERO = \"IPOR_009\";\r\n\r\n    /// @notice Chunk size is too big\r\n    string public constant CHUNK_SIZE_TOO_BIG = \"IPOR_010\";\r\n\r\n    /// @notice Caller is not a  guardian\r\n    string public constant CALLER_NOT_GUARDIAN = \"IPOR_011\";\r\n\r\n    /// @notice Request contains invalid method signature, which is not supported by the Ipor Protocol Router\r\n    string public constant ROUTER_INVALID_SIGNATURE = \"IPOR_012\";\r\n\r\n    /// @notice Only AMM Treasury can have access to function\r\n    string public constant CALLER_NOT_AMM_TREASURY = \"IPOR_013\";\r\n\r\n    /// @notice Caller is not an owner\r\n    string public constant CALLER_NOT_OWNER = \"IPOR_014\";\r\n\r\n    /// @notice Method is paused\r\n    string public constant METHOD_PAUSED = \"IPOR_015\";\r\n\r\n    /// @notice Reentrancy appears\r\n    string public constant REENTRANCY = \"IPOR_016\";\r\n\r\n    /// @notice Asset is not supported\r\n    string public constant ASSET_NOT_SUPPORTED = \"IPOR_017\";\r\n\r\n    /// @notice Return back ETH failed in Ipor Protocol Router\r\n    string public constant ROUTER_RETURN_BACK_ETH_FAILED = \"IPOR_018\";\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/libraries/IporContractValidator.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nlibrary IporContractValidator {\r\n    function checkAddress(address addr) internal pure returns (address) {\r\n        require(addr != address(0), IporErrors.WRONG_ADDRESS);\r\n        return addr;\r\n    }\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/interfaces/IStrategy.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Interface for interaction with  Asset Management's strategy.\r\n/// @notice Strategy represents an external DeFi protocol and acts as and wrapper that standarizes the API of the external protocol.\r\ninterface IStrategy {\r\n    /// @notice Returns current version of strategy\r\n    /// @dev Increase number when implementation inside source code is different that implementation deployed on Mainnet\r\n    /// @return current Strategy's version\r\n    function getVersion() external pure returns (uint256);\r\n\r\n    /// @notice Gets asset / underlying token / stablecoin which is assocciated with this Strategy instance\r\n    /// @return asset / underlying token / stablecoin address\r\n    function asset() external view returns (address);\r\n\r\n    /// @notice Returns strategy's share token address\r\n    function shareToken() external view returns (address);\r\n\r\n    /// @notice Gets annualised interest rate (APR) for this strategy. Returns current APY from Dai Savings Rate.\r\n    /// @return APR value, represented in 18 decimals.\r\n    /// @dev APY = dsr^(365*24*60*60), dsr represented in 27 decimals\r\n    function getApy() external view returns (uint256);\r\n\r\n    /// @notice Gets balance for given asset (underlying / stablecoin) allocated to this strategy.\r\n    /// @return balance for given asset, represented in 18 decimals.\r\n    function balanceOf() external view returns (uint256);\r\n\r\n    /// @notice Deposits asset amount from AssetManagement to this specific Strategy. Function available only for AssetManagement.\r\n    /// @dev Emits {Transfer} from ERC20 asset. If available then events from external DeFi protocol assocciated with this strategy.\r\n    /// @param amount asset amount represented in 18 decimals.\r\n    function deposit(uint256 amount) external returns (uint256 depositedAmount);\r\n\r\n    /// @notice Withdraws asset amount from Strategy to AssetManagement. Function available only for AssetManagement.\r\n    /// @dev Emits {Transfer} from ERC20 asset. If available then events from external DeFi protocol assocciated with this strategy.\r\n    /// @param amount asset amount represented in 18 decimals.\r\n    /// @return withdrawnAmount The final amount withdrawn, represented in 18 decimals\r\n    function withdraw(uint256 amount) external returns (uint256 withdrawnAmount);\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/interfaces/IAssetManagement.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title Interface for interaction with Asset Management DSR smart contract.\r\n/// @notice Asset Management is responsible for delegating assets stored in AmmTreasury to Asset Management and forward to money market where they can earn interest.\r\ninterface IAssetManagement {\r\n    /// @notice Gets total balance of AmmTreasury, transferred assets to Asset Management.\r\n    /// @return Total balance for specific account given as a parameter, represented in 18 decimals.\r\n    function totalBalance() external view returns (uint256);\r\n\r\n    /// @notice Deposits ERC20 underlying assets to AssetManagement. Function available only for AmmTreasury.\r\n    /// @dev Emits {Deposit} event from AssetManagement, emits {Transfer} event from ERC20 asset.\r\n    /// Input and output values are represented in 18 decimals.\r\n    /// @param amount amount deposited by AmmTreasury to AssetManagement.\r\n    /// @return vaultBalance current balance including amount deposited on AssteManagement.\r\n    /// @return depositedAmount final deposited amount.\r\n    function deposit(uint256 amount) external returns (uint256 vaultBalance, uint256 depositedAmount);\r\n\r\n    /// @notice Withdraws declared amount of asset from AssetManagement to AmmTreasury. Function available only for AmmTreasury.\r\n    /// @dev Emits {Withdraw} event from AssetManagement, emits {Transfer} event from ERC20 asset.\r\n    /// All input and output values are represented in 18 decimals.\r\n    /// @param amount deposited amount of underlying asset represented in 18 decimals.\r\n    /// @return withdrawnAmount final withdrawn amount of asset from AssetManagement, can be different than input amount due to passing time.\r\n    /// @return vaultBalance current asset balance on AssetManagement\r\n    function withdraw(uint256 amount) external returns (uint256 withdrawnAmount, uint256 vaultBalance);\r\n\r\n    /// @notice Withdraws all of the asset from AssetManagement to AmmTreasury. Function available only for AmmTreasury.\r\n    /// @dev Emits {Withdraw} event from AssetManagement, emits {Transfer} event from ERC20 asset.\r\n    /// Output values are represented in 18 decimals.\r\n    /// @return withdrawnAmount final withdrawn amount of the asset.\r\n    /// @return vaultBalance current asset's balance on AssetManagement\r\n    function withdrawAll() external returns (uint256 withdrawnAmount, uint256 vaultBalance);\r\n\r\n    /// @notice Emitted after AmmTreasury has executed deposit function.\r\n    /// @param from account address from which assets are transferred\r\n    /// @param to account address where assets are transferred to\r\n    /// @param amount of asset transferred from AmmTreasury to AssetManagement, represented in 18 decimals\r\n    event Deposit(address from, address to, uint256 amount);\r\n\r\n    /// @notice Emitted when AmmTreasury executes withdraw function.\r\n    /// @param to account address where assets are transferred to\r\n    /// @param amount of asset transferred from AmmTreasury to AssetManagement, represented in 18 decimals\r\n    event Withdraw(address to, uint256 amount);\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/interfaces/IAssetManagementLens.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n/// @title AssetManagementLens interface responsible for reading data from AssetManagement.\r\ninterface IAssetManagementLens {\r\n    /// @dev A struct to represent an asset configuration.\r\n    struct AssetManagementConfiguration {\r\n        /// @notice The address of the asset.\r\n        address asset;\r\n        /// @notice Asset decimals.\r\n        uint256 decimals;\r\n        /// @notice The address of the asset management contract.\r\n        address assetManagement;\r\n        /// @notice The address of the AMM treasury contract.\r\n        address ammTreasury;\r\n    }\r\n\r\n    /// @notice Gets the AssetManagement configuration for the given asset.\r\n    /// @param asset The address of the asset.\r\n    /// @return AssetManagementConfiguration The AssetManagement configuration for the given asset.\r\n    function getAssetManagementConfiguration(address asset) external view returns (AssetManagementConfiguration memory);\r\n\r\n    /// @notice Gets balance of the AmmTreasury contract in the AssetManagement.\r\n    /// @dev This includes assets transferred to AssetManagement.\r\n    /// @param asset The address of the asset.\r\n    /// @return uint256 The total balance for the specified account, represented in 18 decimals.\r\n    function balanceOfAmmTreasuryInAssetManagement(address asset) external view returns (uint256);\r\n}\r\n\r\n// File: lib/ipor-protocol/contracts/amm/AssetManagementLens.sol\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @dev It is not recommended to use lens contract directly, should be used only through IporProtocolRouter.\r\ncontract AssetManagementLens is IAssetManagementLens {\r\n    using IporContractValidator for address;\r\n\r\n    address internal immutable _usdt;\r\n    uint256 internal immutable _usdtDecimals;\r\n    address internal immutable _usdtAssetManagement;\r\n    address internal immutable _usdtAmmTreasury;\r\n\r\n    address internal immutable _usdc;\r\n    uint256 internal immutable _usdcDecimals;\r\n    address internal immutable _usdcAssetManagement;\r\n    address internal immutable _usdcAmmTreasury;\r\n\r\n    address internal immutable _dai;\r\n    uint256 internal immutable _daiDecimals;\r\n    address internal immutable _daiAssetManagement;\r\n    address internal immutable _daiAmmTreasury;\r\n\r\n    constructor(\r\n        AssetManagementConfiguration memory usdtAssetManagementCfg,\r\n        AssetManagementConfiguration memory usdcAssetManagementCfg,\r\n        AssetManagementConfiguration memory daiAssetManagementCfg\r\n    ) {\r\n        _usdt = usdtAssetManagementCfg.asset.checkAddress();\r\n        _usdtDecimals = usdtAssetManagementCfg.decimals;\r\n        _usdtAssetManagement = usdtAssetManagementCfg.assetManagement.checkAddress();\r\n        _usdtAmmTreasury = usdtAssetManagementCfg.ammTreasury.checkAddress();\r\n\r\n        _usdc = usdcAssetManagementCfg.asset.checkAddress();\r\n        _usdcDecimals = usdcAssetManagementCfg.decimals;\r\n        _usdcAssetManagement = usdcAssetManagementCfg.assetManagement.checkAddress();\r\n        _usdcAmmTreasury = usdcAssetManagementCfg.ammTreasury.checkAddress();\r\n\r\n        _dai = daiAssetManagementCfg.asset.checkAddress();\r\n        _daiDecimals = daiAssetManagementCfg.decimals;\r\n        _daiAssetManagement = daiAssetManagementCfg.assetManagement.checkAddress();\r\n        _daiAmmTreasury = daiAssetManagementCfg.ammTreasury.checkAddress();\r\n    }\r\n\r\n    function getAssetManagementConfiguration(\r\n        address asset\r\n    ) external view override returns (AssetManagementConfiguration memory) {\r\n        return _getAssetManagementConfiguration(asset);\r\n    }\r\n\r\n    function balanceOfAmmTreasuryInAssetManagement(address asset) external view returns (uint256) {\r\n        AssetManagementConfiguration memory assetManagementConfiguration = _getAssetManagementConfiguration(asset);\r\n        return IAssetManagement(assetManagementConfiguration.assetManagement).totalBalance();\r\n    }\r\n\r\n    function _getAssetManagementConfiguration(\r\n        address asset\r\n    ) internal view returns (AssetManagementConfiguration memory) {\r\n        if (asset == _usdt) {\r\n            return\r\n                AssetManagementConfiguration({\r\n                    asset: _usdt,\r\n                    decimals: _usdtDecimals,\r\n                    assetManagement: _usdtAssetManagement,\r\n                    ammTreasury: _usdtAmmTreasury\r\n                });\r\n        } else if (asset == _usdc) {\r\n            return\r\n                AssetManagementConfiguration({\r\n                    asset: _usdc,\r\n                    decimals: _usdcDecimals,\r\n                    assetManagement: _usdcAssetManagement,\r\n                    ammTreasury: _usdcAmmTreasury\r\n                });\r\n        } else if (asset == _dai) {\r\n            return\r\n                AssetManagementConfiguration({\r\n                    asset: _dai,\r\n                    decimals: _daiDecimals,\r\n                    assetManagement: _daiAssetManagement,\r\n                    ammTreasury: _daiAmmTreasury\r\n                });\r\n        } else {\r\n            revert(IporErrors.ASSET_NOT_SUPPORTED);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManagement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammTreasury\",\"type\":\"address\"}],\"internalType\":\"struct IAssetManagementLens.AssetManagementConfiguration\",\"name\":\"usdtAssetManagementCfg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManagement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammTreasury\",\"type\":\"address\"}],\"internalType\":\"struct IAssetManagementLens.AssetManagementConfiguration\",\"name\":\"usdcAssetManagementCfg\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManagement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammTreasury\",\"type\":\"address\"}],\"internalType\":\"struct IAssetManagementLens.AssetManagementConfiguration\",\"name\":\"daiAssetManagementCfg\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"balanceOfAmmTreasuryInAssetManagement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetManagementConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetManagement\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammTreasury\",\"type\":\"address\"}],\"internalType\":\"struct IAssetManagementLens.AssetManagementConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AssetManagementLens", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000060000000000000000000000008e679c1d67af0cd4b314896856f09ece9e64d6b500000000000000000000000028bc58e600ef718b9e97d294098abecb8c96b687000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000060000000000000000000000007aa7b0b738c2570c2f9f892cb7ca5bb89b9bf260000000000000000000000000137000352b4ed784e8fa8815d225c713ab2e7dc90000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000a6ac8b6af789319a1db994e25760eb86f796e2b0000000000000000000000000ed7d74aa7eb1f12f83da36dfac1de2257b4e7523", "EVMVersion": "paris", "Library": "", "LicenseType": "BSL 1.1", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d63a4e763d12b6d401f403df9130ce2e357ee0f7a4b3b14c4e67bebbbcb847dd"}