{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC1155/IERC1155.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/Protected.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\n\\nerror WrongBuyerSignature();\\nerror WrongPlatformSignature();\\nerror WrongSellerSignature();\\nerror PlatformSignatureExpired();\\n\\nabstract contract Protected is Ownable, EIP712 {\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant _DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    bytes32 private constant _ORDER_TYPEHASH =\\n        keccak256(\\n            \\\"OrderInfo(address signer,address tokenAddress,uint256 tokenId,uint256 totalTrading,address currency,uint96 feeRate,uint256 price,bool isInitial)\\\"\\n        );\\n    bytes32 private constant _MINT_TYPEHASH =\\n        keccak256(\\n            \\\"MintInfo(uint256 totalSupply,string meta,address royaltyReceiver,uint96 royalty)\\\"\\n        );\\n    bytes32 internal constant _SALE_TYPEHASH =\\n        // prettier-ignore\\n        keccak256(\\n            \\\"SaleParams(address seller,uint256 listingId,OrderInfo order,uint256 startTime,uint256 endTime,MintInfo mint)\\\"\\n            \\\"MintInfo(uint256 totalSupply,string meta,address royaltyReceiver,uint96 royalty)\\\"\\n            \\\"OrderInfo(address signer,address tokenAddress,uint256 tokenId,uint256 totalTrading,address currency,uint96 feeRate,uint256 price,bool isInitial)\\\"\\n        );\\n    bytes32 internal constant _OFFER_TYPEHASH =\\n        // prettier-ignore\\n        keccak256(\\n            \\\"OfferParams(address buyer,uint256 offerId,OrderInfo order,uint256 endTime,MintInfo mint)\\\"\\n            \\\"MintInfo(uint256 totalSupply,string meta,address royaltyReceiver,uint96 royalty)\\\"\\n            \\\"OrderInfo(address signer,address tokenAddress,uint256 tokenId,uint256 totalTrading,address currency,uint96 feeRate,uint256 price,bool isInitial)\\\"\\n        );\\n\\n    bytes32 internal constant _PLATFORM_TYPEHASH =\\n        keccak256(\\n            \\\"PlatformParams(address receiver,uint256 editionsToBuy,bytes sellerSignature,uint256 expirationTime)\\\"\\n        );\\n    bytes32 internal constant _PLATFORM_OFFER_TYPEHASH =\\n        keccak256(\\n            \\\"PlatformOfferParams(address seller,uint256 editionsToSell,bytes buyerSignature,uint256 expirationTime)\\\"\\n        );\\n\\n    bytes32 internal constant _BID_TYPEHASH =\\n        keccak256(\\n            \\\"PlatformBidParams(uint256 listingId,address currency,uint256 price,uint256 expirationTime)\\\"\\n        );\\n\\n    struct OrderInfo {\\n        address signer;\\n        address tokenAddress;\\n        uint256 tokenId;\\n        uint256 totalTrading;\\n        address currency;\\n        uint96 feeRate;\\n        uint256 price;\\n        bool isInitial;\\n    }\\n\\n    struct MintInfo {\\n        uint256 totalSupply;\\n        string meta;\\n        address royaltyReceiver;\\n        uint96 royalty;\\n    }\\n\\n    struct SaleParams {\\n        address payable seller;\\n        uint256 listingId;\\n        OrderInfo order;\\n        uint256 startTime;\\n        uint256 endTime;\\n        MintInfo mint;\\n    }\\n    struct OfferParams {\\n        address buyer;\\n        uint256 offerId;\\n        OrderInfo order;\\n        uint256 endTime;\\n        MintInfo mint;\\n    }\\n    struct PlatformParams {\\n        address receiver;\\n        uint256 editionsToBuy;\\n        bytes sellerSignature;\\n        uint256 expirationTime;\\n    }\\n    struct PlatformOfferParams {\\n        address payable seller;\\n        uint256 editionsToSell;\\n        bytes buyerSignature;\\n        uint256 expirationTime;\\n    }\\n    struct PlatformBidParams {\\n        uint256 listingId;\\n        address currency;\\n        uint256 price;\\n        uint256 expirationTime;\\n    }\\n    address public platform;\\n\\n    constructor() EIP712(\\\"NFTMarketplace\\\", \\\"1.0\\\") {}\\n\\n    function _hashTypedDataV4(\\n        bytes32 structHash\\n    ) internal view virtual override returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorOverriden(), structHash);\\n    }\\n\\n    function _domainSeparatorOverriden() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _DOMAIN_TYPEHASH,\\n                    keccak256(bytes(\\\"NFTMarketplace\\\")),\\n                    keccak256(bytes(\\\"1.0\\\")),\\n                    block.chainid,\\n                    address(0)\\n                )\\n            );\\n    }\\n\\n    /// @notice Set the platform address\\n    /// @param _platform New address of the platform\\n    function setPlatform(address _platform) external onlyOwner {\\n        platform = _platform;\\n    }\\n\\n    /// @notice Check the signature for signed direct sale & auction\\n    /// @param saleData Sale params\\n    /// @param sellerSig Signature of seller\\n    /// @return True, if signature signer matches the seller\\n    function _checkSaleSignature(\\n        SaleParams calldata saleData,\\n        bytes calldata sellerSig\\n    ) internal view returns (bool) {\\n        bytes32 hashStruct = _getSaleHashStruct(saleData);\\n        address signer = _hashTypedDataV4(hashStruct).recover(sellerSig);\\n\\n        return signer == saleData.order.signer;\\n    }\\n\\n    /// @notice Check the signature for signed offers\\n    /// @param offerData Offer params\\n    /// @param buyerSig Signature of buyer\\n    /// @return True, if signature signer matches the seller\\n    function _checkOfferSignature(\\n        OfferParams calldata offerData,\\n        bytes calldata buyerSig\\n    ) internal view returns (bool) {\\n        bytes32 hashStruct = _getOfferHashStruct(offerData);\\n        address signer = _hashTypedDataV4(hashStruct).recover(buyerSig);\\n\\n        return signer == offerData.order.signer;\\n    }\\n\\n    /// @notice \u0421heck the signature of the platform (Direct Sale & Auction)\\n    /// @param platformData Buyer address & seller signature\\n    /// @param platformSig Platform signature\\n    /// @return True, if signature signer matches the platform\\n    function _checkPlatformSignature(\\n        PlatformParams calldata platformData,\\n        bytes calldata platformSig\\n    ) internal view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    _PLATFORM_TYPEHASH,\\n                    platformData.receiver,\\n                    platformData.editionsToBuy,\\n                    keccak256(platformData.sellerSignature),\\n                    platformData.expirationTime\\n                )\\n            )\\n        ).recover(platformSig);\\n\\n        return signer == platform;\\n    }\\n\\n    /// @notice \u0421heck the signature of the platform (Offers)\\n    /// @param platformData Seller address & buyer signature\\n    /// @param platformSig Platform signature\\n    /// @return True, if signature signer matches the platform\\n    function _checkPlatformOfferSignature(\\n        PlatformOfferParams calldata platformData,\\n        bytes calldata platformSig\\n    ) internal view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    _PLATFORM_OFFER_TYPEHASH,\\n                    platformData.seller,\\n                    platformData.editionsToSell,\\n                    keccak256(platformData.buyerSignature),\\n                    platformData.expirationTime\\n                )\\n            )\\n        ).recover(platformSig);\\n\\n        return signer == platform;\\n    }\\n\\n    /// @notice \u0421heck the signature of the platform (Bids)\\n    /// @param bidData Listing id, address of currency to pay, amount to pay\\n    /// @param bidSignature Platform signature\\n    /// @return True, if signature signer matches the platform\\n    function _checkPlatformBidSignature(\\n        PlatformBidParams calldata bidData,\\n        bytes calldata bidSignature\\n    ) internal view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    _BID_TYPEHASH,\\n                    bidData.listingId,\\n                    bidData.currency,\\n                    bidData.price,\\n                    bidData.expirationTime\\n                )\\n            )\\n        ).recover(bidSignature);\\n        return signer == platform;\\n    }\\n\\n    function _getOrderHashStruct(\\n        OrderInfo calldata order\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _ORDER_TYPEHASH,\\n                    order.signer,\\n                    order.tokenAddress,\\n                    order.tokenId,\\n                    order.totalTrading,\\n                    order.currency,\\n                    order.feeRate,\\n                    order.price,\\n                    order.isInitial\\n                )\\n            );\\n    }\\n\\n    function _getMintHashStruct(\\n        MintInfo calldata mint\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _MINT_TYPEHASH,\\n                    mint.totalSupply,\\n                    keccak256(bytes(mint.meta)),\\n                    mint.royaltyReceiver,\\n                    mint.royalty\\n                )\\n            );\\n    }\\n\\n    /// @notice Calculate hash struct for Direct Sale & Auction\\n    function _getSaleHashStruct(\\n        SaleParams calldata saleData\\n    ) internal pure returns (bytes32) {\\n        bytes32 orderHashStruct = _getOrderHashStruct(saleData.order);\\n        bytes32 mintHashStruct = _getMintHashStruct(saleData.mint);\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _SALE_TYPEHASH,\\n                    saleData.seller,\\n                    saleData.listingId,\\n                    orderHashStruct,\\n                    saleData.startTime,\\n                    saleData.endTime,\\n                    mintHashStruct\\n                )\\n            );\\n    }\\n\\n    /// @notice Calculate hash struct for offer\\n    function _getOfferHashStruct(\\n        OfferParams calldata offerData\\n    ) internal pure returns (bytes32) {\\n        bytes32 orderHashStruct = _getOrderHashStruct(offerData.order);\\n        bytes32 mintHashStruct = _getMintHashStruct(offerData.mint);\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _OFFER_TYPEHASH,\\n                    offerData.buyer,\\n                    offerData.offerId,\\n                    orderHashStruct,\\n                    offerData.endTime,\\n                    mintHashStruct\\n                )\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICounter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ICounter {\\n    function remainingInListing(\\n        uint256 listingID\\n    ) external view returns (uint256);\\n\\n    function isListingFilled(uint256 listingID) external view returns (bool);\\n\\n    function initListing(uint256 listingID, uint256 remainingEditions) external;\\n\\n    function decreaseListing(uint256 listingID, uint256 selling) external;\\n\\n    function remainingInOffer(uint256 offerID) external view returns (uint256);\\n\\n    function isOfferFilled(uint256 offerID) external view returns (bool);\\n\\n    function initOffer(uint256 offerID, uint256 remainingEditions) external;\\n\\n    function decreaseOffer(uint256 offerID, uint256 selling) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEtherspotWalletFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IEtherspotWalletFactory {\\n    function getAddress(\\n        address owner,\\n        uint256 index\\n    ) external view returns (address proxy);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IMintable {\\n    function mint(\\n        address buyer,\\n        uint256 id,\\n        uint256 editions,\\n        string calldata meta,\\n        address royaltyReceiver,\\n        uint96 royalty\\n    ) external;\\n\\n    function exists(uint256 id) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRoyalties {\\n    function royaltyInfo(\\n        address token,\\n        uint256 salePrice\\n    ) external view returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IVault {\\n    function isBidExist(uint256 listingId) external view returns (bool);\\n\\n    function isBidder(\\n        address sender,\\n        uint256 listingId\\n    ) external view returns (bool);\\n\\n    function getBidPrice(uint256 listingId) external view returns (uint256);\\n\\n    function updateBid(\\n        uint256 listingId,\\n        address bidder,\\n        address currency,\\n        uint256 price\\n    ) external;\\n\\n    function refundBid(uint256 listingId, address currency) external;\\n\\n    function acceptBid(\\n        uint256 listingId,\\n        address receiver,\\n        address currency,\\n        uint256 fee,\\n        address royaltyReceiver,\\n        uint256 royalty\\n    ) external;\\n\\n    function updateFeeAccumulator(address currency, uint256 fee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IWallet {\\n    function isOwner(address signer) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Marketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./base/Protected.sol\\\";\\nimport \\\"./interfaces/IMintable.sol\\\";\\nimport \\\"./interfaces/IRoyalties.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/ICounter.sol\\\";\\nimport \\\"./interfaces/IWallet.sol\\\";\\nimport \\\"./interfaces/IEtherspotWalletFactory.sol\\\";\\n\\nerror TransferFailed();\\n\\nerror IncorrectEditions();\\nerror IdTooBig(uint256 id, uint256 totalSupply);\\n\\nerror NotEnoughNativeTokens();\\nerror NotEnoughTokensApproved();\\nerror UnsupportedToken();\\nerror NotOwnerOrPlatform();\\n\\nerror TooEarly(uint256 startTime, uint256 currentTime);\\nerror TooLate(uint256 endTime, uint256 currentTime);\\n\\nerror NotABidder();\\nerror NotASeller();\\nerror NotAPlatform();\\n\\nerror NotEnoughEditionsRemained();\\nerror TokenIsNotUnique();\\n\\nerror InvalidToken(address token);\\n\\nerror NotAWalletOwner();\\n\\ncontract Marketplace is Protected, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    uint96 public constant FEE_DENOMINATOR = 10000;\\n    address public walletFactory;\\n\\n    address private _trustedForwarder;\\n    address public vault;\\n    address public royalties;\\n    address public counter;\\n\\n    event InitialPurchase(\\n        address indexed seller,\\n        uint256 listingId,\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 tokenId,\\n        uint256 totalSupply,\\n        uint256 soldEditions,\\n        uint256 remainingEditions,\\n        address currency,\\n        uint256 price,\\n        uint256 fee\\n    );\\n\\n    event SecondaryPurchase(\\n        address indexed seller,\\n        uint256 listingId,\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 tokenId,\\n        uint256 soldEditions,\\n        uint256 remainingEditions,\\n        address currency,\\n        uint256 price,\\n        uint256 fee,\\n        uint256 royalty\\n    );\\n\\n    event InitialOfferPurchase(\\n        address indexed seller,\\n        uint256 offerId,\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 tokenId,\\n        uint256 totalSupply,\\n        uint256 soldEditions,\\n        uint256 remainingEditions,\\n        address currency,\\n        uint256 price,\\n        uint256 fee\\n    );\\n\\n    event SecondaryOfferPurchase(\\n        address indexed seller,\\n        uint256 offerId,\\n        address indexed receiver,\\n        address indexed tokenAddress,\\n        uint256 tokenId,\\n        uint256 soldEditions,\\n        uint256 remainingEditions,\\n        address currency,\\n        uint256 price,\\n        uint256 fee,\\n        uint256 royalty\\n    );\\n\\n    event AuctionCancelled(\\n        address seller,\\n        uint256 listingId,\\n        address tokenAddress,\\n        uint256 tokenId\\n    );\\n\\n    modifier onlySeller(address seller) {\\n        if (_msgSender() != seller) revert NotASeller();\\n        _;\\n    }\\n\\n    modifier onlyPlatform() {\\n        if (_msgSender() != platform) revert NotASeller();\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrPlatform() {\\n        if (_msgSender() != owner() && _msgSender() != platform)\\n            revert NotOwnerOrPlatform();\\n        _;\\n    }\\n\\n    constructor(\\n        address _platform,\\n        address _vault,\\n        address _royalties,\\n        address _counter\\n    ) {\\n        platform = _platform;\\n        vault = _vault;\\n        royalties = _royalties;\\n        counter = _counter;\\n        walletFactory = 0x7f6d8F107fE8551160BD5351d5F1514A6aD5d40E;\\n    }\\n\\n    function pause() external onlyOwnerOrPlatform {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwnerOrPlatform {\\n        _unpause();\\n    }\\n\\n    /// @notice Check if the forwarder trusted\\n    /// @param forwarder Address of the forwarder\\n    /// @return True if the forwarder trusted\\n    function isTrustedForwarder(\\n        address forwarder\\n    ) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @notice Buy token (Direct Sale)\\n    /// @param saleData Params of mint\\n    /// @param platformData Receiver's address & seller signature\\n    /// @param platformSignature Platform's signature\\n    function buy(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        bytes calldata platformSignature\\n    ) external payable whenNotPaused {\\n        _checkActive(\\n            saleData.startTime,\\n            saleData.endTime,\\n            platformData.expirationTime\\n        );\\n        _checkOwnedWallet(saleData.order.signer, saleData.seller);\\n\\n        uint256 payment = saleData.order.price * platformData.editionsToBuy;\\n        _checkMoney(_msgSender(), saleData.order.currency, payment);\\n\\n        if (!_checkPlatformSignature(platformData, platformSignature))\\n            revert WrongPlatformSignature();\\n        if (!_checkSaleSignature(saleData, platformData.sellerSignature))\\n            revert WrongSellerSignature();\\n\\n        if (\\n            _getRemainingEditionsInListing(saleData.listingId) == 0 &&\\n            !ICounter(counter).isListingFilled(saleData.listingId)\\n        ) {\\n            ICounter(counter).initListing(\\n                saleData.listingId,\\n                saleData.order.totalTrading\\n            );\\n        }\\n\\n        if (\\n            platformData.editionsToBuy >\\n            _getRemainingEditionsInListing(saleData.listingId)\\n        ) revert NotEnoughEditionsRemained();\\n\\n        uint256 fee = (payment * saleData.order.feeRate) / FEE_DENOMINATOR;\\n        address royaltyReceiver;\\n        uint256 royalty;\\n\\n        if (saleData.order.isInitial) {\\n            if (\\n                !_isTokenMinted(\\n                    saleData.order.tokenAddress,\\n                    saleData.order.tokenId\\n                )\\n            ) {\\n                _mintDirect(saleData);\\n            }\\n        } else {\\n            // calculate royalties\\n            if (\\n                IERC165(saleData.order.tokenAddress).supportsInterface(\\n                    type(IERC2981).interfaceId\\n                )\\n            ) {\\n                (royaltyReceiver, royalty) = IERC2981(\\n                    saleData.order.tokenAddress\\n                ).royaltyInfo(saleData.order.tokenId, payment);\\n            } else {\\n                (royaltyReceiver, royalty) = IRoyalties(royalties).royaltyInfo(\\n                    saleData.order.tokenAddress,\\n                    payment\\n                );\\n            }\\n        }\\n\\n        _transfer(\\n            saleData.order.tokenAddress,\\n            saleData.seller,\\n            platformData.receiver,\\n            saleData.order.tokenId,\\n            platformData.editionsToBuy\\n        );\\n\\n        ICounter(counter).decreaseListing(\\n            saleData.listingId,\\n            platformData.editionsToBuy\\n        );\\n\\n        _payDirect(\\n            saleData.seller,\\n            saleData.order.currency,\\n            payment,\\n            fee,\\n            royaltyReceiver,\\n            royalty\\n        );\\n\\n        if (saleData.order.isInitial) {\\n            emitInitialPurchase(\\n                saleData,\\n                platformData,\\n                _getRemainingEditionsInListing(saleData.listingId),\\n                saleData.order.price,\\n                fee\\n            );\\n        } else {\\n            emitSecondaryPurchase(\\n                saleData,\\n                platformData,\\n                _getRemainingEditionsInListing(saleData.listingId),\\n                saleData.order.price,\\n                fee,\\n                royalty\\n            );\\n        }\\n    }\\n\\n    function emitInitialPurchase(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        uint256 remainingEditions,\\n        uint256 price,\\n        uint256 fee\\n    ) internal {\\n        emit InitialPurchase(\\n            saleData.seller,\\n            saleData.listingId,\\n            platformData.receiver,\\n            saleData.order.tokenAddress,\\n            saleData.order.tokenId,\\n            saleData.mint.totalSupply,\\n            platformData.editionsToBuy,\\n            remainingEditions,\\n            saleData.order.currency,\\n            price,\\n            fee\\n        );\\n    }\\n\\n    function emitSecondaryPurchase(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        uint256 remainingEditions,\\n        uint256 price,\\n        uint256 fee,\\n        uint256 royalty\\n    ) internal {\\n        emit SecondaryPurchase(\\n            saleData.seller,\\n            saleData.listingId,\\n            platformData.receiver,\\n            saleData.order.tokenAddress,\\n            saleData.order.tokenId,\\n            platformData.editionsToBuy,\\n            remainingEditions,\\n            saleData.order.currency,\\n            price,\\n            fee,\\n            royalty\\n        );\\n    }\\n\\n    /// @notice Mint new token (Offer)\\n    /// @param offerData Params of mint\\n    /// @param platformData Seller's address & buyer signature\\n    /// @param platformSignature Platform's signature\\n    function sell(\\n        OfferParams calldata offerData,\\n        PlatformOfferParams calldata platformData,\\n        bytes calldata platformSignature\\n    ) external onlySeller(platformData.seller) whenNotPaused {\\n        if (block.timestamp > offerData.endTime)\\n            revert TooLate(offerData.endTime, block.timestamp);\\n        if (\\n            platformData.expirationTime != 0 &&\\n            block.timestamp > platformData.expirationTime\\n        ) revert PlatformSignatureExpired();\\n        _checkOwnedWallet(offerData.order.signer, offerData.buyer);\\n\\n        uint256 payment = offerData.order.price * platformData.editionsToSell;\\n        _checkMoney(offerData.buyer, offerData.order.currency, payment);\\n\\n        if (!_checkPlatformOfferSignature(platformData, platformSignature))\\n            revert WrongPlatformSignature();\\n        if (!_checkOfferSignature(offerData, platformData.buyerSignature))\\n            revert WrongBuyerSignature();\\n\\n        if (\\n            _getRemainingEditionsInOffer(offerData.offerId) == 0 &&\\n            !ICounter(counter).isOfferFilled(offerData.offerId)\\n        ) {\\n            ICounter(counter).initOffer(\\n                offerData.offerId,\\n                offerData.order.totalTrading\\n            );\\n        }\\n\\n        if (\\n            platformData.editionsToSell >\\n            _getRemainingEditionsInOffer(offerData.offerId)\\n        ) revert NotEnoughEditionsRemained();\\n\\n        uint256 fee = (payment * offerData.order.feeRate) / FEE_DENOMINATOR;\\n        address royaltyReceiver;\\n        uint256 royalty;\\n\\n        if (offerData.order.isInitial) {\\n            if (\\n                !_isTokenMinted(\\n                    offerData.order.tokenAddress,\\n                    offerData.order.tokenId\\n                )\\n            ) {\\n                _mintOffer(offerData, platformData.seller);\\n            }\\n        } else {\\n            if (\\n                IERC165(offerData.order.tokenAddress).supportsInterface(\\n                    type(IERC2981).interfaceId\\n                )\\n            ) {\\n                (royaltyReceiver, royalty) = IERC2981(\\n                    offerData.order.tokenAddress\\n                ).royaltyInfo(offerData.order.tokenId, payment);\\n            } else {\\n                (royaltyReceiver, royalty) = IRoyalties(royalties).royaltyInfo(\\n                    offerData.order.tokenAddress,\\n                    payment\\n                );\\n            }\\n        }\\n\\n        _transfer(\\n            offerData.order.tokenAddress,\\n            platformData.seller,\\n            offerData.buyer,\\n            offerData.order.tokenId,\\n            platformData.editionsToSell\\n        );\\n\\n        ICounter(counter).decreaseOffer(\\n            offerData.offerId,\\n            platformData.editionsToSell\\n        );\\n\\n        _payOffer(\\n            offerData.buyer,\\n            offerData.order.currency,\\n            payment,\\n            fee,\\n            royaltyReceiver,\\n            royalty\\n        );\\n\\n        if (offerData.order.isInitial) {\\n            emitInitialOfferPurchase(\\n                offerData,\\n                platformData,\\n                _getRemainingEditionsInOffer(offerData.offerId),\\n                fee\\n            );\\n        } else {\\n            emitSecondaryOfferPurchase(\\n                offerData,\\n                platformData,\\n                _getRemainingEditionsInOffer(offerData.offerId),\\n                fee,\\n                royalty\\n            );\\n        }\\n    }\\n\\n    function emitInitialOfferPurchase(\\n        OfferParams calldata offerData,\\n        PlatformOfferParams calldata platformData,\\n        uint256 remainingEditions,\\n        uint256 fee\\n    ) internal {\\n        emit InitialOfferPurchase(\\n            platformData.seller,\\n            offerData.offerId,\\n            offerData.buyer,\\n            offerData.order.tokenAddress,\\n            offerData.order.tokenId,\\n            offerData.mint.totalSupply,\\n            platformData.editionsToSell,\\n            remainingEditions,\\n            offerData.order.currency,\\n            offerData.order.price,\\n            fee\\n        );\\n    }\\n\\n    function emitSecondaryOfferPurchase(\\n        OfferParams calldata offerData,\\n        PlatformOfferParams calldata platformData,\\n        uint256 remainingEditions,\\n        uint256 fee,\\n        uint256 royalty\\n    ) internal {\\n        emit SecondaryOfferPurchase(\\n            platformData.seller,\\n            offerData.offerId,\\n            offerData.buyer,\\n            offerData.order.tokenAddress,\\n            offerData.order.tokenId,\\n            platformData.editionsToSell,\\n            remainingEditions,\\n            offerData.order.currency,\\n            offerData.order.price,\\n            fee,\\n            royalty\\n        );\\n    }\\n\\n    /// @notice Bid in auction\\n    /// @param bidData Listing id, currency to bid, price to bid\\n    /// @param bidSignature Platform's signature\\n    function bid(\\n        PlatformBidParams calldata bidData,\\n        bytes calldata bidSignature\\n    ) external payable whenNotPaused {\\n        _checkPlatformBidSignature(bidData, bidSignature);\\n        if (\\n            bidData.expirationTime != 0 &&\\n            block.timestamp > bidData.expirationTime\\n        ) revert PlatformSignatureExpired();\\n\\n        if (bidData.currency != address(0))\\n            IERC20(bidData.currency).safeTransferFrom(\\n                _msgSender(),\\n                vault,\\n                bidData.price\\n            );\\n        else {\\n            if (msg.value < bidData.price) revert NotEnoughNativeTokens();\\n            _transfer(vault, msg.value);\\n        }\\n\\n        IVault(vault).updateBid(\\n            bidData.listingId,\\n            _msgSender(),\\n            bidData.currency,\\n            bidData.price\\n        );\\n    }\\n\\n    /// @notice Cancel active auction (only seller, token to mint)\\n    /// @param saleData Params of the token to mint\\n    /// @param platformData Receiver's address & seller signature\\n    /// @param platformSignature Platform's signature\\n    function cancelAuction(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        bytes calldata platformSignature\\n    ) external onlySeller(saleData.seller) whenNotPaused {\\n        _checkActive(\\n            saleData.startTime,\\n            saleData.endTime,\\n            platformData.expirationTime\\n        );\\n        _cancelAuction(saleData, platformData, platformSignature);\\n    }\\n\\n    /// @notice Make a deal (only seller)\\n    function acceptBid(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        bytes calldata platformSignature\\n    ) external onlySeller(saleData.seller) whenNotPaused {\\n        _checkActive(\\n            saleData.startTime,\\n            saleData.endTime,\\n            platformData.expirationTime\\n        );\\n        _acceptBid(saleData, platformData, platformSignature);\\n    }\\n\\n    /// @notice Finish the auction platform-side\\n    /// @param saleData Params of mint\\n    /// @param platformData Receiver's address & seller signature\\n    /// @param platformSignature Platform's signature\\n    /// @param toCancel If true don't make a deal, cancel auction instead\\n    function executeAuction(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        bytes calldata platformSignature,\\n        bool toCancel\\n    ) external onlyOwnerOrPlatform whenNotPaused {\\n        if (\\n            platformData.expirationTime != 0 &&\\n            block.timestamp > platformData.expirationTime\\n        ) revert PlatformSignatureExpired();\\n\\n        // Platform can cancel at any time\\n        if (toCancel)\\n            _cancelAuction(saleData, platformData, platformSignature);\\n            // If the auction is over\\n        else if (block.timestamp > saleData.endTime) {\\n            if (IVault(vault).isBidExist(saleData.listingId))\\n                // And bid exist, platform will accept the bid\\n                _acceptBid(saleData, platformData, platformSignature);\\n                // Or if bid doesn't exist, it will cancel\\n            else _cancelAuction(saleData, platformData, platformSignature);\\n        }\\n        // If auction isn't over and shouldn't be canceled, the function fails\\n        else revert TooEarly(saleData.endTime, block.timestamp);\\n    }\\n\\n    /// @notice Check if permit active\\n    /// @param startTime Time when permit starts to be active\\n    /// @param endTime Time when permit ends to be active\\n    function _checkActive(\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 expirationTime\\n    ) internal view {\\n        if (block.timestamp < startTime)\\n            revert TooEarly(startTime, block.timestamp);\\n        if (block.timestamp > endTime) revert TooLate(endTime, block.timestamp);\\n\\n        if (expirationTime != 0 && block.timestamp > expirationTime)\\n            revert PlatformSignatureExpired();\\n    }\\n\\n    function _cancelAuction(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        bytes calldata platformSignature\\n    ) internal {\\n        _checkOwnedWallet(saleData.order.signer, saleData.seller);\\n\\n        if (!_checkPlatformSignature(platformData, platformSignature))\\n            revert WrongPlatformSignature();\\n        if (!_checkSaleSignature(saleData, platformData.sellerSignature))\\n            revert WrongSellerSignature();\\n\\n        if (IVault(vault).isBidExist(saleData.listingId))\\n            IVault(vault).refundBid(\\n                saleData.listingId,\\n                saleData.order.currency\\n            );\\n\\n        emit AuctionCancelled(\\n            saleData.seller,\\n            saleData.listingId,\\n            saleData.order.tokenAddress,\\n            saleData.order.tokenId\\n        );\\n    }\\n\\n    function _acceptBid(\\n        SaleParams calldata saleData,\\n        PlatformParams calldata platformData,\\n        bytes calldata platformSignature\\n    ) internal {\\n        _checkOwnedWallet(saleData.order.signer, saleData.seller);\\n\\n        if (saleData.order.totalTrading != 1) revert TokenIsNotUnique();\\n        if (block.timestamp < saleData.startTime)\\n            revert TooEarly(saleData.startTime, block.timestamp);\\n        if (\\n            platformData.receiver == address(0) ||\\n            !IVault(vault).isBidder(platformData.receiver, saleData.listingId)\\n        ) revert NotABidder();\\n\\n        if (!_checkPlatformSignature(platformData, platformSignature))\\n            revert WrongPlatformSignature();\\n        if (!_checkSaleSignature(saleData, platformData.sellerSignature))\\n            revert WrongSellerSignature();\\n\\n        uint256 bidPrice = IVault(vault).getBidPrice(saleData.listingId);\\n        uint256 bidFee = (bidPrice * saleData.order.feeRate) / FEE_DENOMINATOR;\\n        address royaltyReceiver;\\n        uint256 royalty;\\n\\n        if (saleData.order.isInitial) {\\n            if (\\n                !_isTokenMinted(\\n                    saleData.order.tokenAddress,\\n                    saleData.order.tokenId\\n                )\\n            ) {\\n                _mintDirect(saleData);\\n            }\\n        } else {\\n            if (\\n                IERC165(saleData.order.tokenAddress).supportsInterface(\\n                    type(IERC2981).interfaceId\\n                )\\n            ) {\\n                (royaltyReceiver, royalty) = IERC2981(\\n                    saleData.order.tokenAddress\\n                ).royaltyInfo(saleData.order.tokenId, bidPrice);\\n            } else {\\n                (royaltyReceiver, royalty) = IRoyalties(royalties).royaltyInfo(\\n                    saleData.order.tokenAddress,\\n                    saleData.order.price\\n                );\\n            }\\n        }\\n\\n        _transfer(\\n            saleData.order.tokenAddress,\\n            saleData.seller,\\n            platformData.receiver,\\n            saleData.order.tokenId,\\n            1\\n        );\\n\\n        IVault(vault).acceptBid(\\n            saleData.listingId,\\n            saleData.seller,\\n            saleData.order.currency,\\n            bidFee,\\n            royaltyReceiver,\\n            royalty\\n        );\\n\\n        if (saleData.order.isInitial) {\\n            emitInitialPurchase(saleData, platformData, 0, bidPrice, bidFee);\\n        } else {\\n            emitSecondaryPurchase(\\n                saleData,\\n                platformData,\\n                0,\\n                bidPrice,\\n                bidFee,\\n                royalty\\n            );\\n        }\\n    }\\n\\n    /// @notice Check payment\\n    /// @param payer Address of buyer\\n    /// @param currency Address of token to pay (zero if native)\\n    /// @param payment Price per token to purchase\\n    function _checkMoney(\\n        address payer,\\n        address currency,\\n        uint256 payment\\n    ) internal view {\\n        if (currency == address(0)) {\\n            if (msg.value < payment) revert NotEnoughNativeTokens();\\n        } else if (IERC20(currency).allowance(payer, address(this)) < payment)\\n            revert NotEnoughTokensApproved();\\n    }\\n\\n    function _checkOwnedWallet(address signer, address wallet) internal view {\\n        if (signer != wallet) {\\n            if (wallet.code.length == 0) {\\n                if (walletFactory.code.length == 0) revert NotAWalletOwner();\\n                try\\n                    IEtherspotWalletFactory(walletFactory).getAddress(signer, 0)\\n                returns (address futureAddress) {\\n                    if (wallet != futureAddress) revert NotAWalletOwner();\\n                } catch {\\n                    revert NotAWalletOwner();\\n                }\\n            } else {\\n                try IWallet(wallet).isOwner(signer) returns (bool result) {\\n                    if (!result) revert NotAWalletOwner();\\n                } catch {\\n                    revert NotAWalletOwner();\\n                }\\n            }\\n        }\\n    }\\n\\n    function _isTokenMinted(\\n        address token,\\n        uint256 id\\n    ) internal view returns (bool) {\\n        try IMintable(token).exists(id) returns (bool result) {\\n            return result;\\n        } catch {\\n            // If token do not support exists function, we assume token minted\\n            return true;\\n        }\\n    }\\n\\n    function mintFree(\\n        address token,\\n        address receiver,\\n        uint256 id,\\n        MintInfo calldata mint\\n    ) external onlyOwner {\\n        _mint(receiver, token, id, mint);\\n    }\\n\\n    function _mintDirect(SaleParams calldata saleData) internal {\\n        _mint(\\n            saleData.seller,\\n            saleData.order.tokenAddress,\\n            saleData.order.tokenId,\\n            saleData.mint\\n        );\\n    }\\n\\n    function _mintOffer(\\n        OfferParams calldata offerData,\\n        address seller\\n    ) internal {\\n        _mint(\\n            seller,\\n            offerData.order.tokenAddress,\\n            offerData.order.tokenId,\\n            offerData.mint\\n        );\\n    }\\n\\n    /// @notice Mint new internal ERC1155\\n    /// @param receiver Address of future owner of tokens\\n    /// @param id ID of tokens to mint\\n    function _mint(\\n        address receiver,\\n        address token,\\n        uint256 id,\\n        MintInfo calldata mint\\n    ) internal {\\n        IMintable(token).mint(\\n            receiver,\\n            id,\\n            mint.totalSupply,\\n            mint.meta,\\n            mint.royaltyReceiver,\\n            mint.royalty\\n        );\\n    }\\n\\n    function _transfer(\\n        address tokenAddress,\\n        address seller,\\n        address receiver,\\n        uint256 tokenId,\\n        uint256 editions\\n    ) internal {\\n        if (\\n            IERC165(tokenAddress).supportsInterface(type(IERC1155).interfaceId)\\n        ) {\\n            IERC1155(tokenAddress).safeTransferFrom(\\n                seller,\\n                receiver,\\n                tokenId,\\n                editions,\\n                \\\"\\\"\\n            );\\n        } else if (\\n            IERC165(tokenAddress).supportsInterface(type(IERC721).interfaceId)\\n        ) {\\n            IERC721(tokenAddress).safeTransferFrom(seller, receiver, tokenId);\\n        } else {\\n            revert UnsupportedToken();\\n        }\\n    }\\n\\n    function _payDirect(\\n        address receiver,\\n        address currency,\\n        uint256 payment,\\n        uint256 fee,\\n        address royaltyReceiver,\\n        uint256 royalty\\n    ) internal {\\n        _pay(\\n            _msgSender(),\\n            receiver,\\n            currency,\\n            payment,\\n            fee,\\n            royaltyReceiver,\\n            royalty\\n        );\\n    }\\n\\n    function _payOffer(\\n        address payer,\\n        address currency,\\n        uint256 payment,\\n        uint256 fee,\\n        address royaltyReceiver,\\n        uint256 royalty\\n    ) internal {\\n        _pay(\\n            payer,\\n            _msgSender(),\\n            currency,\\n            payment,\\n            fee,\\n            royaltyReceiver,\\n            royalty\\n        );\\n    }\\n\\n    /// @notice Pay for tokens\\n    /// @param payer Payer\\n    /// @param receiver Receiver of payment\\n    /// @param currency Address of token to pay (zero if native)\\n    /// @param payment Price to pay\\n    function _pay(\\n        address payer,\\n        address receiver,\\n        address currency,\\n        uint256 payment,\\n        uint256 fee,\\n        address royaltyReceiver,\\n        uint256 royalty\\n    ) internal {\\n        if (currency == address(0)) {\\n            if (royaltyReceiver == address(0) || royaltyReceiver == receiver) {\\n                _transfer(receiver, payment - fee);\\n            } else {\\n                _transfer(receiver, payment - fee - royalty);\\n                _transfer(royaltyReceiver, royalty);\\n            }\\n        } else {\\n            if (royaltyReceiver == address(0) || royaltyReceiver == receiver)\\n                IERC20(currency).safeTransferFrom(\\n                    payer,\\n                    receiver,\\n                    payment - fee\\n                );\\n            else {\\n                IERC20(currency).safeTransferFrom(\\n                    payer,\\n                    receiver,\\n                    payment - fee - royalty\\n                );\\n                IERC20(currency).safeTransferFrom(\\n                    payer,\\n                    royaltyReceiver,\\n                    royalty\\n                );\\n            }\\n            IERC20(currency).safeTransferFrom(payer, vault, fee);\\n            IVault(vault).updateFeeAccumulator(currency, fee);\\n        }\\n    }\\n\\n    function _msgSender() internal view override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _getRemainingEditionsInListing(\\n        uint256 listingId\\n    ) internal view returns (uint256) {\\n        return ICounter(counter).remainingInListing(listingId);\\n    }\\n\\n    function _getRemainingEditionsInOffer(\\n        uint256 offerId\\n    ) internal view returns (uint256) {\\n        return ICounter(counter).remainingInOffer(offerId);\\n    }\\n\\n    function _transfer(address receiver, uint256 value) internal {\\n        (bool status, ) = payable(receiver).call{value: value, gas: 10000}(\\\"\\\");\\n        if (!status) revert TransferFailed();\\n    }\\n\\n    function setTrustedForwarder(address forwarder) external onlyOwner {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function setVault(address _vault) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    function setWalletFactory(address _walletFactory) external onlyOwner {\\n        walletFactory = _walletFactory;\\n    }\\n\\n    function withdrawNative(address receiver) external onlyOwner {\\n        _transfer(receiver, address(this).balance);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royalties\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_counter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotABidder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotASeller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAWalletOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughEditionsRemained\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughNativeTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughTokensApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrPlatform\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PlatformSignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsNotUnique\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooEarly\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"TooLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongBuyerSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPlatformSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSellerSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"InitialOfferPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"InitialPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"name\":\"SecondaryOfferPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"soldEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingEditions\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royalty\",\"type\":\"uint256\"}],\"name\":\"SecondaryPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTrading\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitial\",\"type\":\"bool\"}],\"internalType\":\"struct Protected.OrderInfo\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"internalType\":\"struct Protected.MintInfo\",\"name\":\"mint\",\"type\":\"tuple\"}],\"internalType\":\"struct Protected.SaleParams\",\"name\":\"saleData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionsToBuy\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sellerSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Protected.PlatformParams\",\"name\":\"platformData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"platformSignature\",\"type\":\"bytes\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Protected.PlatformBidParams\",\"name\":\"bidData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTrading\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitial\",\"type\":\"bool\"}],\"internalType\":\"struct Protected.OrderInfo\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"internalType\":\"struct Protected.MintInfo\",\"name\":\"mint\",\"type\":\"tuple\"}],\"internalType\":\"struct Protected.SaleParams\",\"name\":\"saleData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionsToBuy\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sellerSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Protected.PlatformParams\",\"name\":\"platformData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"platformSignature\",\"type\":\"bytes\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTrading\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitial\",\"type\":\"bool\"}],\"internalType\":\"struct Protected.OrderInfo\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"internalType\":\"struct Protected.MintInfo\",\"name\":\"mint\",\"type\":\"tuple\"}],\"internalType\":\"struct Protected.SaleParams\",\"name\":\"saleData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionsToBuy\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sellerSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Protected.PlatformParams\",\"name\":\"platformData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"platformSignature\",\"type\":\"bytes\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTrading\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitial\",\"type\":\"bool\"}],\"internalType\":\"struct Protected.OrderInfo\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"internalType\":\"struct Protected.MintInfo\",\"name\":\"mint\",\"type\":\"tuple\"}],\"internalType\":\"struct Protected.SaleParams\",\"name\":\"saleData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionsToBuy\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sellerSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Protected.PlatformParams\",\"name\":\"platformData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"platformSignature\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toCancel\",\"type\":\"bool\"}],\"name\":\"executeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"internalType\":\"struct Protected.MintInfo\",\"name\":\"mint\",\"type\":\"tuple\"}],\"name\":\"mintFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royalties\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTrading\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitial\",\"type\":\"bool\"}],\"internalType\":\"struct Protected.OrderInfo\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"meta\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"royalty\",\"type\":\"uint96\"}],\"internalType\":\"struct Protected.MintInfo\",\"name\":\"mint\",\"type\":\"tuple\"}],\"internalType\":\"struct Protected.OfferParams\",\"name\":\"offerData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"editionsToSell\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"buyerSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Protected.PlatformOfferParams\",\"name\":\"platformData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"platformSignature\",\"type\":\"bytes\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"setPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletFactory\",\"type\":\"address\"}],\"name\":\"setWalletFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Marketplace", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b1fe4bf104294da3b2a68d69824bc6d26827bd7e000000000000000000000000319c1b663556abcf57ffe82df84cc83dc03eae0b000000000000000000000000fa1b0e01231abffae01ddf64ca2c99d7209125a70000000000000000000000002ea30e0560effbede6ddd9bf474adc37080ef507", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}