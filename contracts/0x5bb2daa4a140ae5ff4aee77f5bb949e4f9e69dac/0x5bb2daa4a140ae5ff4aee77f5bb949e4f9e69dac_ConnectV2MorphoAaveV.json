{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function approve(TokenInterface token, address spender, uint256 amount) internal {\\n        try token.approve(spender, amount) {\\n\\n        } catch {\\n            token.approve(spender, 0);\\n            token.approve(spender, amount);\\n        }\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function changeEthAddrToWethAddr(address token) internal pure returns(address tokenAddr){\\n        tokenAddr = token == ethAddr ? wethAddr : token;\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            approve(token, address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n    function cast(\\n        string[] calldata _targetNames,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32[] memory responses);\\n}\\n\\ninterface ListInterface {\\n    function accountID(address) external returns (uint64);\\n}\\n\\ninterface InstaConnectors {\\n    function isConnectors(string[] calldata) external returns (bool, address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toUint(int256 x) internal pure returns (uint256) {\\n      require(x >= 0, \\\"int-overflow\\\");\\n      return uint256(x);\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping, ListInterface, InstaConnectors } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Return InstaList Address\\n   */\\n  ListInterface internal constant instaList = ListInterface(0x4c8a1BEb8a87765788946D6B19C6C6355194AbEb);\\n\\n  /**\\n\\t * @dev Return connectors registry address\\n\\t */\\n\\tInstaConnectors internal constant instaConnectors = InstaConnectors(0x97b0B3A8bDeFE8cB9563a3c610019Ad10DB8aD11);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/morpho-aave-v3/events.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ncontract Events {\\n\\tevent LogDeposit(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogDepositWithMaxIterations(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 maxIteration,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogDepositOnBehalfWithMaxIterations(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalf,\\n\\t\\tuint256 maxIteration,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogDepositCollateral(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogDepositCollateralOnBehalf(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalf,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogBorrow(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogBorrowWithMaxIterations(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 maxIteration,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogBorrowOnBehalfWithMaxIterations(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalf,\\n\\t\\taddress receiver,\\n\\t\\tuint256 maxIteration,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogWithdraw(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogWithdrawWithMaxIterations(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 maxIteration,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogWithdrawOnBehalfWithMaxIterations(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalf,\\n\\t\\taddress receiver,\\n\\t\\tuint256 maxIteration,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogWithdrawCollateral(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogWithdrawCollateralOnBehalf(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalf,\\n\\t\\taddress receiver,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogPayback(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogPaybackOnBehalf(\\n\\t\\taddress tokenAddress,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalf,\\n\\t\\tuint256 getId,\\n\\t\\tuint256 setId\\n\\t);\\n\\n\\tevent LogApproveManger(address manger, bool isAllowed);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/morpho-aave-v3/helpers.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./interface.sol\\\";\\nimport \\\"../../common/stores.sol\\\";\\nimport \\\"../../common/basic.sol\\\";\\nimport \\\"../../common/interfaces.sol\\\";\\n\\nabstract contract Helpers is Stores, Basic {\\n\\tIMorphoCore public constant MORPHO_AAVE_V3 =\\n\\t\\tIMorphoCore(0x33333aea097c193e66081E930c33020272b33333);\\n\\t\\n\\tuint256 public constant MAX_ITERATIONS = 4;\\n\\n\\tfunction _performEthToWethConversion(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId\\n\\t) internal returns (TokenInterface _tokenContract, uint256 _amt) {\\n\\t\\t_amt = getUint(_getId, _amount);\\n\\n\\t\\tif (_tokenAddress == ethAddr) {\\n\\t\\t        _tokenContract = TokenInterface(wethAddr);\\n\\t\\t        if (_amt == type(uint256).max) _amt = address(this).balance;\\n\\t\\t        convertEthToWeth(true, _tokenContract, _amt);\\n\\t\\t} else {\\n\\t\\t       _tokenContract = TokenInterface(_tokenAddress);\\n\\t\\t        if (_amt == type(uint256).max) _amt = _tokenContract.balanceOf(address(this)); \\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/morpho-aave-v3/interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMorphoCore {\\n\\n\\tfunction supply(address underlying, uint256 amount, address onBehalf, uint256 maxIterations)\\n        external\\n        returns (uint256 supplied);\\n\\n    function supplyCollateral(address underlying, uint256 amount, address onBehalf)\\n        external\\n        returns (uint256 supplied);\\n\\n    function borrow(address underlying, uint256 amount, address onBehalf, address receiver, uint256 maxIterations)\\n        external\\n        returns (uint256 borrowed);\\n\\n    function repay(address underlying, uint256 amount, address onBehalf) external returns (uint256 repaid);\\n\\n    function withdraw(address underlying, uint256 amount, address onBehalf, address receiver, uint256 maxIterations)\\n        external\\n        returns (uint256 withdrawn);\\n\\n    function withdrawCollateral(address underlying, uint256 amount, address onBehalf, address receiver)\\n        external\\n        returns (uint256 withdrawn);\\n    \\n    function approveManager(address manager, bool isAllowed) external;\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/morpho-aave-v3/main.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"./helpers.sol\\\";\\nimport \\\"./events.sol\\\";\\n\\nabstract contract MorphoAaveV3 is Helpers, Events {\\n\\t/**\\n\\t * @dev Supply ETH/ERC20 Token for lending.\\n\\t * @notice Supply ETH/ERC20 Token to Morpho Aave for lending. It will be elible for P2P matching but will not have nay borrowing power.\\n\\t * @param _tokenAddress The address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens deposited.\\n\\t */\\n\\tfunction deposit(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tTokenInterface _tokenContract,\\n\\t\\t\\tuint256 _amt\\n\\t\\t) = _performEthToWethConversion(_tokenAddress, _amount, _getId);\\n\\n\\t\\tapprove(_tokenContract, address(MORPHO_AAVE_V3), _amt);\\n\\n\\t\\tMORPHO_AAVE_V3.supply(address(_tokenContract), _amt, address(this), MAX_ITERATIONS);\\n\\n\\t\\tsetUint(_setId, _amt);\\n\\n\\t\\t_eventName = \\\"LogDeposit(address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Supply ETH/ERC20 Token for lending with max iterations.\\n\\t * @notice Supply ETH/ERC20 Token to Morpho Aave for lending with max iterations. It will be elible for P2P matching but will not have nay borrowing power.\\n\\t * @param _tokenAddress The address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\\n\\t * @param _maxIteration The maximum number of iterations allowed during the matching process.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens deposited.\\n\\t */\\n\\tfunction depositWithMaxIterations(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _maxIteration,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tTokenInterface _tokenContract,\\n\\t\\t\\tuint256 _amt\\n\\t\\t) = _performEthToWethConversion(_tokenAddress, _amount, _getId);\\n\\n\\t\\tapprove(_tokenContract, address(MORPHO_AAVE_V3), _amt);\\n\\n\\t\\tMORPHO_AAVE_V3.supply(address(_tokenContract), _amt, address(this), _maxIteration);\\n\\n\\t\\tsetUint(_setId, _amt);\\n\\n\\t\\t_eventName = \\\"LogDepositWithMaxIterations(address,uint256,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_maxIteration,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Supply ETH/ERC20 Token on Behalf for lending with max iterations.\\n\\t * @notice Supply ETH/ERC20 Token on behalf to Morpho Aave for lending with max iterations. It will be elible for P2P matching but will not have nay borrowing power.\\n\\t * @param _tokenAddress The address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\\n\\t * @param _onBehalf The address of user on behalf of whom we want to deposit.\\n\\t * @param _maxIteration The maximum number of iterations allowed during the matching process.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens deposited.\\n\\t */\\n\\tfunction depositOnBehalfWithMaxIterations (\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _onBehalf,\\n\\t\\tuint256 _maxIteration,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tTokenInterface _tokenContract,\\n\\t\\t\\tuint256 _amt\\n\\t\\t) = _performEthToWethConversion(_tokenAddress, _amount, _getId);\\n\\n\\t\\tapprove(_tokenContract, address(MORPHO_AAVE_V3), _amt);\\n\\n\\t\\tMORPHO_AAVE_V3.supply(address(_tokenContract), _amt, _onBehalf, _maxIteration);\\n\\n\\t\\tsetUint(_setId, _amt);\\n\\n\\t\\t_eventName = \\\"LogDepositOnBehalfWithMaxIterations(address,uint256,address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_onBehalf,\\n\\t\\t\\t_maxIteration,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deposit ETH/ERC20 Token for collateralization.\\n\\t * @notice Deposit a token to Morpho Aave for collaterization. It will not be eligible for P2P matching.\\n\\t * @param _tokenAddress The address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens deposited.\\n\\t */\\n\\tfunction depositCollateral(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tTokenInterface _tokenContract,\\n\\t\\t\\tuint256 _amt\\n\\t\\t) = _performEthToWethConversion(_tokenAddress, _amount, _getId);\\n\\n\\t\\tapprove(_tokenContract, address(MORPHO_AAVE_V3), _amt);\\n\\n\\t\\tMORPHO_AAVE_V3.supplyCollateral(address(_tokenContract), _amt, address(this));\\n\\n\\t\\tsetUint(_setId, _amt);\\n\\n\\t\\t_eventName = \\\"LogDepositCollateral(address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deposit ETH/ERC20 Token on behalf for collateralization.\\n\\t * @notice Deposit a token on behalf to Morpho Aave for collaterization. It will not be eligible for P2P matching.\\n\\t * @param _tokenAddress The address of underlying token to deposit.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to deposit. (For max: `uint256(-1)`)\\n\\t * @param _onBehalf The address of user on behalf to deposit.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens deposited.\\n\\t */\\n\\tfunction depositCollateralOnBehalf(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _onBehalf,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tTokenInterface _tokenContract,\\n\\t\\t\\tuint256 _amt\\n\\t\\t) = _performEthToWethConversion(_tokenAddress, _amount, _getId);\\n\\n\\t\\tapprove(_tokenContract, address(MORPHO_AAVE_V3), _amt);\\n\\n\\t\\tMORPHO_AAVE_V3.supplyCollateral(address(_tokenContract), _amt, _onBehalf);\\n\\n\\t\\tsetUint(_setId, _amt);\\n\\n\\t\\t_eventName = \\\"LogDepositCollateralOnBehalf(address,uint256,address,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_onBehalf,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Borrow ETH/ERC20 Token.\\n\\t * @notice Borrow a token from Morpho Aave V3.\\n\\t * @param _tokenAddress The address of underlying token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to borrow.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens borrowed.\\n\\t */\\n\\tfunction borrow(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isETH = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isETH ? wethAddr : _tokenAddress;\\n\\t\\t\\n\\t\\tuint256 _borrowed = MORPHO_AAVE_V3.borrow(_token, _amt, address(this), address(this), MAX_ITERATIONS);\\n\\n\\t\\tconvertWethToEth(_isETH, TokenInterface(_token), _borrowed);\\n\\n\\t\\tsetUint(_setId, _borrowed);\\n\\n\\t\\t_eventName = \\\"LogBorrow(address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_borrowed,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Borrow ETH/ERC20 Token.\\n\\t * @notice Borrow a token from Morpho Aave V3 with max iterations.\\n\\t * @param _tokenAddress The address of underlying token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to borrow.\\n\\t * @param _maxIteration The maximum number of iterations to be used for borrow.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens borrowed.\\n\\t */\\n\\tfunction borrowWithMaxIterations(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _maxIteration,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isETH = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isETH ? wethAddr : _tokenAddress;\\n\\n\\t\\tuint256 _borrowed = MORPHO_AAVE_V3.borrow(_token, _amt, address(this), address(this), _maxIteration);\\n\\n\\t\\tconvertWethToEth(_isETH, TokenInterface(_token), _borrowed);\\n\\n\\t\\tsetUint(_setId, _borrowed);\\n\\n\\t\\t_eventName = \\\"LogBorrowWithMaxIterations(address,uint256,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_borrowed,\\n\\t\\t\\t_maxIteration,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Borrow ETH/ERC20 Token.\\n\\t * @notice Borrow a token from Morpho Aave V3 on behalf with max iterations.\\n\\t * @param _tokenAddress The address of underlying token to borrow.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to borrow.\\n\\t * @param _onBehalf The address of user on behalf to borrow.\\n\\t * @param _receiver The address of receiver to receive the borrowed tokens.\\n\\t   Note that if receiver is not the same as the borrower, receiver will receive WETH instead of ETH.\\n\\t * @param _maxIteration The maximum number of iterations to be used for borrow.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens borrowed.\\n\\t */\\n\\tfunction borrowOnBehalfWithMaxIterations (\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _onBehalf,\\n\\t\\taddress _receiver,\\n\\t\\tuint256 _maxIteration,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isETH = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isETH ? wethAddr : _tokenAddress;\\n\\n\\t\\tuint256 _borrowed = MORPHO_AAVE_V3.borrow(_token, _amt, _onBehalf, _receiver, _maxIteration);\\n\\n\\t\\tif(_receiver == address(this)) convertWethToEth(_isETH, TokenInterface(_token), _borrowed);\\n\\n\\t\\tsetUint(_setId, _borrowed);\\n\\n\\t\\t_eventName = \\\"LogBorrowOnBehalfWithMaxIterations(address,uint256,addresss,address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_borrowed,\\n\\t\\t\\t_onBehalf,\\n\\t\\t\\t_receiver,\\n\\t\\t\\t_maxIteration,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw ETH/ERC20 \\\"Supplied\\\" Token.\\n\\t * @notice Withdraw a supplied token from Morpho Aave V3.\\n\\t * @param _tokenAddress The address of underlying token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens withdrawed.\\n\\t */\\n\\tfunction withdraw(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isEth = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isEth? wethAddr : _tokenAddress;\\n\\t\\t\\n\\t\\t// Morpho will internally handle max amount conversion by taking the minimum of amount or supplied collateral.\\n\\t\\tuint256 _withdrawn = MORPHO_AAVE_V3.withdraw(_token, _amt, address(this), address(this), MAX_ITERATIONS);\\n\\n\\t\\tconvertWethToEth(_isEth, TokenInterface(_token), _withdrawn);\\n\\n\\t\\tsetUint(_setId, _withdrawn);\\n\\n\\t\\t_eventName = \\\"LogWithdraw(address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_withdrawn,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw ETH/ERC20 \\\"Supplied\\\" Token.\\n\\t * @notice Withdraw a supplied token from Morpho Aave V3 with max iterations.\\n\\t * @param _tokenAddress The address of underlying token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\\n\\t * @param _maxIteration Max number of iterations to run.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens withdrawed.\\n\\t */\\n\\tfunction withdrawWithMaxIterations(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _maxIteration,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isEth = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isEth ? wethAddr : _tokenAddress;\\n\\n\\t\\t// Morpho will internally handle max amount conversion by taking the minimum of amount or supplied collateral.\\n\\t\\tuint256 _withdrawn = MORPHO_AAVE_V3.withdraw(_token, _amt, address(this), address(this), _maxIteration);\\n\\n\\t\\tconvertWethToEth(_isEth, TokenInterface(_token), _withdrawn);\\n\\n\\t\\tsetUint(_setId, _withdrawn);\\n\\n\\t\\t_eventName = \\\"LogWithdrawWithMaxIterations(address,uint256,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_withdrawn,\\n\\t\\t\\t_maxIteration,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw ETH/ERC20 \\\"Supplied\\\" Token.\\n\\t * @notice Withdraw a supplied token from Morpho Aave V3 on behalf with max iterations.\\n\\t * @param _tokenAddress The address of underlying token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\\n\\t * @param _onBehalf Address for which tokens are being withdrawn.\\n\\t * @param _receiver Address to which tokens are being transferred.\\n\\t   Note that if receiver is not the same as the supplier, receiver will receive WETH instead of ETH.\\n\\t * @param _maxIteration Max number of iterations to run.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens withdrawed.\\n\\t */\\n\\tfunction withdrawOnBehalfWithMaxIterations(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _onBehalf,\\n\\t\\taddress _receiver,\\n\\t\\tuint256 _maxIteration,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isEth = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isEth ? wethAddr : _tokenAddress;\\n\\n\\t\\t// Morpho will internally handle max amount conversion by taking the minimum of amount or supplied collateral.\\n\\t\\tuint256 _withdrawn = MORPHO_AAVE_V3.withdraw(_token, _amt, _onBehalf, _receiver, _maxIteration);\\n\\n\\t\\tif(_receiver == address(this)) convertWethToEth(_isEth, TokenInterface(_token), _withdrawn);\\n\\n\\t\\tsetUint(_setId, _withdrawn);\\n\\n\\t\\t_eventName = \\\"LogWithdrawOnBehalfWithMaxIterations(address,uint256,address,address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_withdrawn,\\n\\t\\t\\t_onBehalf,\\n\\t\\t\\t_receiver,\\n\\t\\t\\t_maxIteration,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw ETH/ERC20 \\\"collateral\\\" token.\\n\\t * @notice Withdraw a collateral token from Morpho Aave V3.\\n\\t * @param _tokenAddress The address of underlying token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens withdrawed.\\n\\t */\\n\\tfunction withdrawCollateral(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isEth = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isEth ? wethAddr : _tokenAddress;\\n\\n\\t\\tuint256 _withdrawn = MORPHO_AAVE_V3.withdrawCollateral(_token, _amt, address(this), address(this));\\n\\n\\t\\tconvertWethToEth(_isEth, TokenInterface(_token), _withdrawn);\\n\\n\\t\\tsetUint(_setId, _withdrawn);\\n\\n\\t\\t_eventName = \\\"LogWithdrawCollateral(address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_withdrawn,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraw ETH/ERC20 \\\"collateral\\\" token on behalf.\\n\\t * @notice Withdraw a collateral token on behalf from Morpho Aave V3.\\n\\t * @param _tokenAddress The address of underlying token to withdraw.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to withdraw. (For max: `uint256(-1)`)\\n\\t * @param _onBehalf Address for which tokens are being withdrawn.\\n\\t * @param _receiver Address to which tokens are being transferred.\\n\\t   Note that if receiver is not the same as the supplier, receiver will receive WETH instead of ETH.\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens withdrawed.\\n\\t */\\n\\tfunction withdrawCollateralOnBehalf(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\taddress _onBehalf,\\n\\t\\taddress _receiver,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\tuint256 _amt = getUint(_getId, _amount);\\n\\t\\tbool _isEth = _tokenAddress == ethAddr;\\n\\t\\taddress _token = _isEth ? wethAddr : _tokenAddress;\\n\\n\\t\\tuint256 _withdrawn = MORPHO_AAVE_V3.withdrawCollateral(_token, _amt, _onBehalf, _receiver);\\n\\n\\t\\tif(_receiver == address(this)) convertWethToEth(_isEth, TokenInterface(_token), _withdrawn);\\n\\n\\t\\tsetUint(_setId, _withdrawn);\\n\\n\\t\\t_eventName = \\\"LogWithdrawCollateralOnBehalf(address,uint256,address,address,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_withdrawn,\\n\\t\\t\\t_onBehalf,\\n\\t\\t\\t_receiver,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Payback ETH/ERC20 Token.\\n\\t * @notice Payback borrowed token to Morpho Aave V3.\\n\\t * @param _tokenAddress The address of underlying token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _amount The amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens paid back.\\n\\t */\\n\\tfunction payback(\\n\\t\\taddress _tokenAddress,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tTokenInterface _tokenContract,\\n\\t\\t\\tuint256 _amt\\n\\t\\t) = _performEthToWethConversion(_tokenAddress, _amount, _getId);\\n\\n\\t\\tapprove(_tokenContract, address(MORPHO_AAVE_V3), _amt);\\n\\n\\t\\tMORPHO_AAVE_V3.repay(address(_tokenContract), _amt, address(this));\\n\\n\\t\\tsetUint(_setId, _amt);\\n\\n\\t\\t_eventName = \\\"LogPayback(address,uint256,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Payback ETH/ERC20 Token on behalf.\\n\\t * @notice Payback borrowed token on bahelf to Morpho Aave V3.\\n\\t * @param _tokenAddress The address of underlying token to payback.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n\\t * @param _onBehalf The address of user who's debt to repay.\\n\\t * @param _amount The amount of the token (in underlying) to payback. (For max: `uint256(-1)`)\\n\\t * @param _getId ID to retrieve amt.\\n\\t * @param _setId ID stores the amount of tokens paid back.\\n\\t */\\n\\tfunction paybackOnBehalf(\\n\\t\\taddress _tokenAddress,\\n\\t\\taddress _onBehalf,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _getId,\\n\\t\\tuint256 _setId\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tTokenInterface _tokenContract,\\n\\t\\t\\tuint256 _amt\\n\\t\\t) = _performEthToWethConversion(_tokenAddress, _amount, _getId);\\n\\n\\t\\tapprove(_tokenContract, address(MORPHO_AAVE_V3), _amt);\\n\\n\\t\\tMORPHO_AAVE_V3.repay(address(_tokenContract), _amt, _onBehalf);\\n\\n\\t\\tsetUint(_setId, _amt);\\n\\n\\t\\t_eventName = \\\"LogPaybackOnBehalf(address,uint256,address,uint256,uint256)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_tokenAddress,\\n\\t\\t\\t_amt,\\n\\t\\t\\t_onBehalf,\\n\\t\\t\\t_getId,\\n\\t\\t\\t_setId\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Approves a `manager` to borrow/withdraw on behalf of the sender.\\n    /// @param _manager The address of the manager.\\n    /// @param _isAllowed Whether `manager` is allowed to manage `msg.sender`'s position or not.\\n    function approveManager(address _manager, bool _isAllowed) \\n\\t\\texternal \\n\\t\\treturns (string memory _eventName, bytes memory _eventParam)\\n\\t{\\n        MORPHO_AAVE_V3.approveManager(_manager, _isAllowed);\\n\\t\\t\\n\\t\\t_eventName = \\\"LogApproveManger(address,bool)\\\";\\n\\t\\t_eventParam = abi.encode(\\n\\t\\t\\t_manager,\\n\\t\\t\\t_isAllowed\\n\\t\\t);\\n    }\\n}\\n\\ncontract ConnectV2MorphoAaveV3 is MorphoAaveV3 {\\n\\tstring public constant name = \\\"Morpho-AaveV3-v1.1\\\";\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"LogApproveManger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrowOnBehalfWithMaxIterations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogBorrowWithMaxIterations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositCollateralOnBehalf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositOnBehalfWithMaxIterations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogDepositWithMaxIterations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogPaybackOnBehalf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawCollateralOnBehalf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawOnBehalfWithMaxIterations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawWithMaxIterations\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_ITERATIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MORPHO_AAVE_V3\",\"outputs\":[{\"internalType\":\"contract IMorphoCore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"approveManager\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"borrowOnBehalfWithMaxIterations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"borrowWithMaxIterations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"depositCollateralOnBehalf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"depositOnBehalfWithMaxIterations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"depositWithMaxIterations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"payback\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"paybackOnBehalf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateralOnBehalf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"withdrawOnBehalfWithMaxIterations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_setId\",\"type\":\"uint256\"}],\"name\":\"withdrawWithMaxIterations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ConnectV2MorphoAaveV3", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}