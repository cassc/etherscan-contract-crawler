{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n\\tfunction _msgSender() internal view virtual returns (address payable) {\\n\\t\\treturn payable(msg.sender);\\n\\t}\\n\\n\\tfunction _msgData() internal view virtual returns (bytes memory) {\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n\\t\\treturn msg.data;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n\\t/**\\n\\t * @dev Emitted when the implementation is upgraded.\\n\\t * @param implementation Address of the new implementation.\\n\\t */\\n\\tevent Upgraded(address indexed implementation);\\n\\n\\t/**\\n\\t * @dev Storage slot with the address of the current implementation.\\n\\t * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n\\t * validated in the constructor.\\n\\t */\\n\\tbytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n\\t/**\\n\\t * @dev Returns the current implementation.\\n\\t * @return impl Address of the current implementation\\n\\t */\\n\\tfunction _implementation() internal view override returns (address impl) {\\n\\t\\tbytes32 slot = IMPLEMENTATION_SLOT;\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\timpl := sload(slot)\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Upgrades the proxy to a new implementation.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t */\\n\\tfunction _upgradeTo(address newImplementation) internal {\\n\\t\\t_setImplementation(newImplementation);\\n\\t\\temit Upgraded(newImplementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the implementation address of the proxy.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t */\\n\\tfunction _setImplementation(address newImplementation) internal {\\n\\t\\trequire(Address.isContract(newImplementation), \\\"Cannot set a proxy implementation to a non-contract address\\\");\\n\\n\\t\\tbytes32 slot = IMPLEMENTATION_SLOT;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tsstore(slot, newImplementation)\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n\\t/**\\n\\t * @dev Contract initializer.\\n\\t * @param _logic Address of the initial implementation.\\n\\t * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n\\t * It should include the signature and the parameters of the function to be called, as described in\\n\\t * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n\\t * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n\\t */\\n\\tfunction initialize(address _logic, bytes memory _data) public payable {\\n\\t\\trequire(_implementation() == address(0));\\n\\t\\tassert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n\\t\\t_setImplementation(_logic);\\n\\t\\tif (_data.length > 0) {\\n\\t\\t\\t(bool success, ) = _logic.delegatecall(_data);\\n\\t\\t\\trequire(success);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/dependencies/openzeppelin/upgradeability/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n\\t/**\\n\\t * @dev Fallback function.\\n\\t * Implemented entirely in `_fallback`.\\n\\t */\\n\\tfallback() external payable {\\n\\t\\t_fallback();\\n\\t}\\n\\n\\t/**\\n\\t * @return The Address of the implementation.\\n\\t */\\n\\tfunction _implementation() internal view virtual returns (address);\\n\\n\\t/**\\n\\t * @dev Delegates execution to an implementation contract.\\n\\t * This is a low level function that doesn't return to its internal call site.\\n\\t * It will return to the external caller whatever the implementation returns.\\n\\t * @param implementation Address to delegate.\\n\\t */\\n\\tfunction _delegate(address implementation) internal {\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\t// Copy msg.data. We take full control of memory in this inline assembly\\n\\t\\t\\t// block because it will not return to Solidity code. We overwrite the\\n\\t\\t\\t// Solidity scratch pad at memory position 0.\\n\\t\\t\\tcalldatacopy(0, 0, calldatasize())\\n\\n\\t\\t\\t// Call the implementation.\\n\\t\\t\\t// out and outsize are 0 because we don't know the size yet.\\n\\t\\t\\tlet result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n\\t\\t\\t// Copy the returned data.\\n\\t\\t\\treturndatacopy(0, 0, returndatasize())\\n\\n\\t\\t\\tswitch result\\n\\t\\t\\t// delegatecall returns 0 on error.\\n\\t\\t\\tcase 0 {\\n\\t\\t\\t\\trevert(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t\\tdefault {\\n\\t\\t\\t\\treturn(0, returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function that is run as the first thing in the fallback function.\\n\\t * Can be redefined in derived contracts to add functionality.\\n\\t * Redefinitions must call super._willFallback().\\n\\t */\\n\\tfunction _willFallback() internal virtual {}\\n\\n\\t/**\\n\\t * @dev fallback implementation.\\n\\t * Extracted to enable manual triggering.\\n\\t */\\n\\tfunction _fallback() internal {\\n\\t\\t_willFallback();\\n\\t\\t_delegate(_implementation());\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param value The amount being\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted after aTokens are burned\\n\\t * @param from The owner of the aTokens, getting them burned\\n\\t * @param target The address that will receive the underlying\\n\\t * @param value The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Emitted during the transfer action\\n\\t * @param from The user whose tokens are being transferred\\n\\t * @param to The recipient\\n\\t * @param value The amount being transferred\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param user The recipient of the underlying\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChefIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction setEligibilityExempt(address _address, bool _value) external;\\n\\n\\tfunction manualStopEmissionsFor(address _user, address[] memory _tokens) external;\\n\\n\\tfunction manualStopAllEmissionsFor(address _user) external;\\n\\n\\tfunction setAddressWLstatus(address user, bool status) external;\\n\\n\\tfunction toggleWhitelist() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction removeReward(address _rewardToken) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInitializableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Aave\\n **/\\ninterface IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when a debt token is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param debtTokenDecimals the decimals of the debt token\\n\\t * @param debtTokenName the name of the debt token\\n\\t * @param debtTokenSymbol the symbol of the debt token\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring debtTokenName,\\n\\t\\tstring debtTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) external;\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolCollateralManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title ILendingPoolCollateralManager\\n * @author Aave\\n * @notice Defines the actions involving management of collateral in the protocol.\\n **/\\ninterface ILendingPoolCollateralManager {\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated\\n\\t * @param collateral The address of the collateral being liquidated\\n\\t * @param principal The address of the reserve\\n\\t * @param user The address of the user being liquidated\\n\\t * @param debtToCover The total amount liquidated\\n\\t * @param liquidatedCollateralAmount The amount of collateral being liquidated\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken true if the liquidator wants to receive aTokens, false otherwise\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateral,\\n\\t\\taddress indexed principal,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken,\\n\\t\\taddress liquidationFeeTo\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is disabled as collateral for an user\\n\\t * @param reserve The address of the reserve\\n\\t * @param user The address of the user\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is enabled as collateral for an user\\n\\t * @param reserve The address of the reserve\\n\\t * @param user The address of the user\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Users can invoke this function to liquidate an undercollateralized position.\\n\\t * @param collateral The address of the collateral to liquidated\\n\\t * @param principal The address of the principal reserve\\n\\t * @param user The address of the borrower\\n\\t * @param debtToCover The amount of principal that the liquidator wants to repay\\n\\t * @param receiveAToken true if the liquidators wants to receive the aTokens, false if\\n\\t * he wants to receive the underlying asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateral,\\n\\t\\taddress principal,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken,\\n\\t\\taddress liquidationFeeTo\\n\\t) external returns (uint256, string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILendingPoolConfigurator {\\n\\tstruct InitReserveInput {\\n\\t\\taddress aTokenImpl;\\n\\t\\taddress stableDebtTokenImpl;\\n\\t\\taddress variableDebtTokenImpl;\\n\\t\\tuint8 underlyingAssetDecimals;\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\taddress underlyingAsset;\\n\\t\\taddress treasury;\\n\\t\\taddress incentivesController;\\n\\t\\tuint256 allocPoint;\\n\\t\\tstring underlyingAssetName;\\n\\t\\tstring aTokenName;\\n\\t\\tstring aTokenSymbol;\\n\\t\\tstring variableDebtTokenName;\\n\\t\\tstring variableDebtTokenSymbol;\\n\\t\\tstring stableDebtTokenName;\\n\\t\\tstring stableDebtTokenSymbol;\\n\\t\\tbytes params;\\n\\t}\\n\\n\\tstruct UpdateATokenInput {\\n\\t\\taddress asset;\\n\\t\\taddress treasury;\\n\\t\\taddress incentivesController;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\taddress implementation;\\n\\t\\tbytes params;\\n\\t}\\n\\n\\tstruct UpdateDebtTokenInput {\\n\\t\\taddress asset;\\n\\t\\taddress incentivesController;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\taddress implementation;\\n\\t\\tbytes params;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is initialized.\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param aToken The address of the associated aToken contract\\n\\t * @param stableDebtToken The address of the associated stable rate debt token\\n\\t * @param variableDebtToken The address of the associated variable rate debt token\\n\\t * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n\\t **/\\n\\tevent ReserveInitialized(\\n\\t\\taddress indexed asset,\\n\\t\\taddress indexed aToken,\\n\\t\\taddress stableDebtToken,\\n\\t\\taddress variableDebtToken,\\n\\t\\taddress interestRateStrategyAddress\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when borrowing is enabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param stableRateEnabled True if stable rate borrowing is enabled, false otherwise\\n\\t **/\\n\\tevent BorrowingEnabledOnReserve(address indexed asset, bool stableRateEnabled);\\n\\n\\t/**\\n\\t * @dev Emitted when borrowing is disabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent BorrowingDisabledOnReserve(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param ltv The loan to value of the asset when used as collateral\\n\\t * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n\\t * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n\\t **/\\n\\tevent CollateralConfigurationChanged(\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 ltv,\\n\\t\\tuint256 liquidationThreshold,\\n\\t\\tuint256 liquidationBonus\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when stable rate borrowing is enabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent StableRateEnabledOnReserve(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when stable rate borrowing is disabled on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent StableRateDisabledOnReserve(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is activated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveActivated(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is deactivated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveDeactivated(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is frozen\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveFrozen(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve is unfrozen\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tevent ReserveUnfrozen(address indexed asset);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve factor is updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param factor The new reserve factor\\n\\t **/\\n\\tevent ReserveFactorChanged(address indexed asset, uint256 factor);\\n\\n\\t/**\\n\\t * @dev Emitted when the reserve decimals are updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param decimals The new decimals\\n\\t **/\\n\\tevent ReserveDecimalsChanged(address indexed asset, uint256 decimals);\\n\\n\\t/**\\n\\t * @dev Emitted when a reserve interest strategy contract is updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param strategy The new address of the interest strategy contract\\n\\t **/\\n\\tevent ReserveInterestRateStrategyChanged(address indexed asset, address strategy);\\n\\n\\t/**\\n\\t * @dev Emitted when an aToken implementation is upgraded\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param proxy The aToken proxy address\\n\\t * @param implementation The new aToken implementation\\n\\t **/\\n\\tevent ATokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n\\t/**\\n\\t * @dev Emitted when the implementation of a stable debt token is upgraded\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param proxy The stable debt token proxy address\\n\\t * @param implementation The new aToken implementation\\n\\t **/\\n\\tevent StableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n\\n\\t/**\\n\\t * @dev Emitted when the implementation of a variable debt token is upgraded\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param proxy The variable debt token proxy address\\n\\t * @param implementation The new aToken implementation\\n\\t **/\\n\\tevent VariableDebtTokenUpgraded(address indexed asset, address indexed proxy, address indexed implementation);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendingRateOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title ILendingRateOracle interface\\n * @notice Interface for the Aave borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\\n **/\\n\\ninterface ILendingRateOracle {\\n\\t/**\\n    @dev returns the market borrow rate in ray\\n    **/\\n\\tfunction getMarketBorrowRate(address asset) external view returns (uint256);\\n\\n\\t/**\\n    @dev sets the market borrow rate. Rate value must be in ray\\n    **/\\n\\tfunction setMarketBorrowRate(address asset, uint256 rate) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILeverager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILeverager {\\n\\tfunction wethToZap(address user) external view returns (uint256);\\n\\n\\tfunction zapWETHWithBorrow(uint256 amount, address borrower) external returns (uint256 liquidity);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMiddleFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n\\tfunction forwardReward(address[] memory _rewardTokens) external;\\n\\n\\tfunction getRdntTokenAddress() external view returns (address);\\n\\n\\tfunction getMultiFeeDistributionAddress() external view returns (address);\\n\\n\\tfunction operationExpenseRatio() external view returns (uint256);\\n\\n\\tfunction operationExpenses() external view returns (address);\\n\\n\\tfunction isRewardToken(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMultiFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction rdntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction userSlippage(address) external view returns (uint256);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction vestTokens(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction setUserSlippage(uint256 slippage) external;\\n\\n\\tfunction toggleAutocompound() external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/************\\n@title IPriceOracle interface\\n@notice Interface for the Aave price oracle.*/\\ninterface IPriceOracle {\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\t/***********\\n    @dev sets the asset price, in wei\\n     */\\n\\tfunction setAssetPrice(address asset, uint256 price) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IPriceOracleGetter interface\\n * @notice Interface for the Aave price oracle.\\n **/\\n\\ninterface IPriceOracleGetter {\\n\\t/**\\n\\t * @dev returns the asset price in ETH\\n\\t * @param asset the address of the asset\\n\\t * @return the ETH price of the asset\\n\\t **/\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n\\tfunction baseVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction getMaxVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\tuint256 availableLiquidity,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256, uint256, uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\taddress aToken,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IStableDebtToken\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n * @author Aave\\n **/\\n\\ninterface IStableDebtToken is IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when new stable debt is minted\\n\\t * @param user The address of the user who triggered the minting\\n\\t * @param onBehalfOf The recipient of stable debt tokens\\n\\t * @param amount The amount minted\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The increase in balance since the last action of the user\\n\\t * @param newRate The rate of the debt after the minting\\n\\t * @param avgStableRate The new average stable rate after the minting\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Mint(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 newRate,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when new stable debt is burned\\n\\t * @param user The address of the user\\n\\t * @param amount The amount being burned\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The the increase in balance since the last action of the user\\n\\t * @param avgStableRate The new average stable rate after the burning\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Burn(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address.\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt tokens to mint\\n\\t * @param rate The rate of the debt being minted\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 rate) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Burns debt of `user`\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address of the user getting his debt burned\\n\\t * @param amount The amount of debt tokens getting burned\\n\\t **/\\n\\tfunction burn(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the average rate of all the stable rate loans.\\n\\t * @return The average stable rate\\n\\t **/\\n\\tfunction getAverageStableRate() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the stable rate of the user debt\\n\\t * @return The stable rate of the user\\n\\t **/\\n\\tfunction getUserStableRate(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the user\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getUserLastUpdated(address user) external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the principal, the total supply and the average stable rate\\n\\t **/\\n\\tfunction getSupplyData() external view returns (uint256, uint256, uint256, uint40);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the total supply\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the total supply and the average stable rate\\n\\t **/\\n\\tfunction getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the principal debt balance of the user\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction principalBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVariableDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param onBehalfOf The address of the user on which behalf minting has been performed\\n\\t * @param value The amount to be minted\\n\\t * @param index The last index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt being minted\\n\\t * @param index The variable debt index of the reserve\\n\\t * @return `true` if the the previous balance of the user is 0\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when variable debt is burnt\\n\\t * @param user The user which debt has been burned\\n\\t * @param amount The amount of debt being burned\\n\\t * @param index The index of the user\\n\\t **/\\n\\tevent Burn(address indexed user, uint256 amount, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns user variable debt\\n\\t * @param user The user which debt is burnt\\n\\t * @param index The variable debt index of the reserve\\n\\t **/\\n\\tfunction burn(address user, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/LockedBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\\n\"\r\n    },\r\n    \"contracts/lending/ATokensAndRatesHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {LendingPool} from \\\"./lendingpool/LendingPool.sol\\\";\\nimport {LendingPoolAddressesProvider} from \\\"./configuration/LendingPoolAddressesProvider.sol\\\";\\nimport {LendingPoolConfigurator} from \\\"./lendingpool/LendingPoolConfigurator.sol\\\";\\nimport {AToken} from \\\"./tokenization/AToken.sol\\\";\\nimport {DefaultReserveInterestRateStrategy} from \\\"./lendingpool/DefaultReserveInterestRateStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ATokensAndRatesHelper is Ownable {\\n\\taddress payable private pool;\\n\\taddress private addressesProvider;\\n\\taddress private poolConfigurator;\\n\\tevent deployedContracts(address aToken, address strategy);\\n\\n\\tstruct InitDeploymentInput {\\n\\t\\taddress asset;\\n\\t\\tuint256[6] rates;\\n\\t}\\n\\n\\tstruct ConfigureReserveInput {\\n\\t\\taddress asset;\\n\\t\\tuint256 baseLTV;\\n\\t\\tuint256 liquidationThreshold;\\n\\t\\tuint256 liquidationBonus;\\n\\t\\tuint256 reserveFactor;\\n\\t\\tbool stableBorrowingEnabled;\\n\\t\\tbool borrowingEnabled;\\n\\t}\\n\\n\\tconstructor(address payable _pool, address _addressesProvider, address _poolConfigurator) {\\n\\t\\tpool = _pool;\\n\\t\\taddressesProvider = _addressesProvider;\\n\\t\\tpoolConfigurator = _poolConfigurator;\\n\\t}\\n\\n\\tfunction initDeployment(InitDeploymentInput[] calldata inputParams) external onlyOwner {\\n\\t\\tuint256 length = inputParams.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\temit deployedContracts(\\n\\t\\t\\t\\taddress(new AToken()),\\n\\t\\t\\t\\taddress(\\n\\t\\t\\t\\t\\tnew DefaultReserveInterestRateStrategy(\\n\\t\\t\\t\\t\\t\\tLendingPoolAddressesProvider(addressesProvider),\\n\\t\\t\\t\\t\\t\\tinputParams[i].rates[0],\\n\\t\\t\\t\\t\\t\\tinputParams[i].rates[1],\\n\\t\\t\\t\\t\\t\\tinputParams[i].rates[2],\\n\\t\\t\\t\\t\\t\\tinputParams[i].rates[3],\\n\\t\\t\\t\\t\\t\\tinputParams[i].rates[4],\\n\\t\\t\\t\\t\\t\\tinputParams[i].rates[5]\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction configureReserves(ConfigureReserveInput[] calldata inputParams) external onlyOwner {\\n\\t\\tLendingPoolConfigurator configurator = LendingPoolConfigurator(poolConfigurator);\\n\\t\\tuint256 length = inputParams.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tconfigurator.configureReserveAsCollateral(\\n\\t\\t\\t\\tinputParams[i].asset,\\n\\t\\t\\t\\tinputParams[i].baseLTV,\\n\\t\\t\\t\\tinputParams[i].liquidationThreshold,\\n\\t\\t\\t\\tinputParams[i].liquidationBonus\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (inputParams[i].borrowingEnabled) {\\n\\t\\t\\t\\tconfigurator.enableBorrowingOnReserve(inputParams[i].asset, inputParams[i].stableBorrowingEnabled);\\n\\t\\t\\t}\\n\\t\\t\\tconfigurator.setReserveFactor(inputParams[i].asset, inputParams[i].reserveFactor);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/configuration/LendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Prettier ignore to prevent buidler flatter bug\\n// prettier-ignore\\nimport {InitializableImmutableAdminUpgradeabilityProxy} from '../libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol';\\n\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ncontract LendingPoolAddressesProvider is Ownable, ILendingPoolAddressesProvider {\\n\\tstring private _marketId;\\n\\tmapping(bytes32 => address) private _addresses;\\n\\taddress private _liquidationFeeTo;\\n\\n\\tbytes32 private constant LENDING_POOL = \\\"LENDING_POOL\\\";\\n\\tbytes32 private constant LENDING_POOL_CONFIGURATOR = \\\"LENDING_POOL_CONFIGURATOR\\\";\\n\\tbytes32 private constant POOL_ADMIN = \\\"POOL_ADMIN\\\";\\n\\tbytes32 private constant EMERGENCY_ADMIN = \\\"EMERGENCY_ADMIN\\\";\\n\\tbytes32 private constant LENDING_POOL_COLLATERAL_MANAGER = \\\"COLLATERAL_MANAGER\\\";\\n\\tbytes32 private constant PRICE_ORACLE = \\\"PRICE_ORACLE\\\";\\n\\tbytes32 private constant LENDING_RATE_ORACLE = \\\"LENDING_RATE_ORACLE\\\";\\n\\n\\tconstructor(string memory marketId) {\\n\\t\\t_setMarketId(marketId);\\n\\t\\t_liquidationFeeTo = 0xF90C69D16599A5C657A05Fe76Cd22fD9Cab44598;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the id of the Aave market to which this contracts points to\\n\\t * @return The market id\\n\\t **/\\n\\tfunction getMarketId() external view returns (string memory) {\\n\\t\\treturn _marketId;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows to set the market which this LendingPoolAddressesProvider represents\\n\\t * @param marketId The market id\\n\\t */\\n\\tfunction setMarketId(string memory marketId) external onlyOwner {\\n\\t\\t_setMarketId(marketId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev General function to update the implementation of a proxy registered with\\n\\t * certain `id`. If there is no proxy registered, it will instantiate one and\\n\\t * set as implementation the `implementationAddress`\\n\\t * IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n\\t * setter function, in order to avoid unexpected consequences\\n\\t * @param id The id\\n\\t * @param implementationAddress The address of the new implementation\\n\\t */\\n\\tfunction setAddressAsProxy(bytes32 id, address implementationAddress) external onlyOwner {\\n\\t\\t_updateImpl(id, implementationAddress);\\n\\t\\temit AddressSet(id, implementationAddress, true);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets an address for an id replacing the address saved in the addresses map\\n\\t * IMPORTANT Use this function carefully, as it will do a hard replacement\\n\\t * @param id The id\\n\\t * @param newAddress The address to set\\n\\t */\\n\\tfunction setAddress(bytes32 id, address newAddress) external onlyOwner {\\n\\t\\t_addresses[id] = newAddress;\\n\\t\\temit AddressSet(id, newAddress, false);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns an address by id\\n\\t * @return The address\\n\\t */\\n\\tfunction getAddress(bytes32 id) public view returns (address) {\\n\\t\\treturn _addresses[id];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the LendingPool proxy\\n\\t * @return The LendingPool proxy address\\n\\t **/\\n\\tfunction getLendingPool() external view returns (address) {\\n\\t\\treturn getAddress(LENDING_POOL);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the implementation of the LendingPool, or creates the proxy\\n\\t * setting the new `pool` implementation on the first time calling it\\n\\t * @param pool The new LendingPool implementation\\n\\t **/\\n\\tfunction setLendingPoolImpl(address pool) external onlyOwner {\\n\\t\\t_updateImpl(LENDING_POOL, pool);\\n\\t\\temit LendingPoolUpdated(pool);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the LendingPoolConfigurator proxy\\n\\t * @return The LendingPoolConfigurator proxy address\\n\\t **/\\n\\tfunction getLendingPoolConfigurator() external view returns (address) {\\n\\t\\treturn getAddress(LENDING_POOL_CONFIGURATOR);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the implementation of the LendingPoolConfigurator, or creates the proxy\\n\\t * setting the new `configurator` implementation on the first time calling it\\n\\t * @param configurator The new LendingPoolConfigurator implementation\\n\\t **/\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external onlyOwner {\\n\\t\\t_updateImpl(LENDING_POOL_CONFIGURATOR, configurator);\\n\\t\\temit LendingPoolConfiguratorUpdated(configurator);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the LendingPoolCollateralManager. Since the manager is used\\n\\t * through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence\\n\\t * the addresses are changed directly\\n\\t * @return The address of the LendingPoolCollateralManager\\n\\t **/\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address) {\\n\\t\\treturn getAddress(LENDING_POOL_COLLATERAL_MANAGER);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the address of the LendingPoolCollateralManager\\n\\t * @param manager The new LendingPoolCollateralManager address\\n\\t **/\\n\\tfunction setLendingPoolCollateralManager(address manager) external onlyOwner {\\n\\t\\t_addresses[LENDING_POOL_COLLATERAL_MANAGER] = manager;\\n\\t\\temit LendingPoolCollateralManagerUpdated(manager);\\n\\t}\\n\\n\\t/**\\n\\t * @dev The functions below are getters/setters of addresses that are outside the context\\n\\t * of the protocol hence the upgradable proxy pattern is not used\\n\\t **/\\n\\n\\tfunction getPoolAdmin() external view returns (address) {\\n\\t\\treturn getAddress(POOL_ADMIN);\\n\\t}\\n\\n\\tfunction setPoolAdmin(address admin) external onlyOwner {\\n\\t\\t_addresses[POOL_ADMIN] = admin;\\n\\t\\temit ConfigurationAdminUpdated(admin);\\n\\t}\\n\\n\\tfunction getEmergencyAdmin() external view returns (address) {\\n\\t\\treturn getAddress(EMERGENCY_ADMIN);\\n\\t}\\n\\n\\tfunction setEmergencyAdmin(address emergencyAdmin) external onlyOwner {\\n\\t\\t_addresses[EMERGENCY_ADMIN] = emergencyAdmin;\\n\\t\\temit EmergencyAdminUpdated(emergencyAdmin);\\n\\t}\\n\\n\\tfunction getPriceOracle() external view returns (address) {\\n\\t\\treturn getAddress(PRICE_ORACLE);\\n\\t}\\n\\n\\tfunction setPriceOracle(address priceOracle) external onlyOwner {\\n\\t\\t_addresses[PRICE_ORACLE] = priceOracle;\\n\\t\\temit PriceOracleUpdated(priceOracle);\\n\\t}\\n\\n\\tfunction getLendingRateOracle() external view returns (address) {\\n\\t\\treturn getAddress(LENDING_RATE_ORACLE);\\n\\t}\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external onlyOwner {\\n\\t\\t_addresses[LENDING_RATE_ORACLE] = lendingRateOracle;\\n\\t\\temit LendingRateOracleUpdated(lendingRateOracle);\\n\\t}\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address) {\\n\\t\\treturn _liquidationFeeTo;\\n\\t}\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external onlyOwner {\\n\\t\\t_liquidationFeeTo = liquidationFeeTo;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Internal function to update the implementation of a specific proxied component of the protocol\\n\\t * - If there is no proxy registered in the given `id`, it creates the proxy setting `newAdress`\\n\\t *   as implementation and calls the initialize() function on the proxy\\n\\t * - If there is already a proxy registered, it just updates the implementation to `newAddress` and\\n\\t *   calls the initialize() function via upgradeToAndCall() in the proxy\\n\\t * @param id The id of the proxy to be updated\\n\\t * @param newAddress The address of the new implementation\\n\\t **/\\n\\tfunction _updateImpl(bytes32 id, address newAddress) internal {\\n\\t\\taddress payable proxyAddress = payable(_addresses[id]);\\n\\n\\t\\tInitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(\\n\\t\\t\\tproxyAddress\\n\\t\\t);\\n\\t\\tbytes memory params = abi.encodeCall(ILendingPool.initialize, ILendingPoolAddressesProvider(address(this)));\\n\\n\\t\\tif (proxyAddress == address(0)) {\\n\\t\\t\\tproxy = new InitializableImmutableAdminUpgradeabilityProxy(address(this));\\n\\t\\t\\tproxy.initialize(newAddress, params);\\n\\t\\t\\t_addresses[id] = address(proxy);\\n\\t\\t\\temit ProxyCreated(id, address(proxy));\\n\\t\\t} else {\\n\\t\\t\\tproxy.upgradeToAndCall(newAddress, params);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _setMarketId(string memory marketId) internal {\\n\\t\\t_marketId = marketId;\\n\\t\\temit MarketIdSet(marketId);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/flashloan/interfaces/IFlashLoanReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"../../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../../interfaces/ILendingPool.sol\\\";\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for the Aave fee IFlashLoanReceiver.\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n\\tfunction executeOperation(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata premiums,\\n\\t\\taddress initiator,\\n\\t\\tbytes calldata params\\n\\t) external returns (bool);\\n\\n\\tfunction ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction LENDING_POOL() external view returns (ILendingPool);\\n}\\n\"\r\n    },\r\n    \"contracts/lending/lendingpool/DefaultReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingRateOracle} from \\\"../../interfaces/ILendingRateOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title DefaultReserveInterestRateStrategy contract\\n * @notice Implements the calculation of the interest rates depending on the reserve state\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of utilization and another from that one to 100%\\n * - An instance of this same contract, can't be used across different Aave markets, due to the caching\\n *   of the LendingPoolAddressesProvider\\n * @author Aave\\n **/\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n\\tusing WadRayMath for uint256;\\n\\tusing SafeMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\n\\t/**\\n\\t * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n\\t * Expressed in ray\\n\\t **/\\n\\tuint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n\\t/**\\n\\t * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\\n\\t * 1-optimal utilization rate. Added as a constant here for gas optimizations.\\n\\t * Expressed in ray\\n\\t **/\\n\\n\\tuint256 public immutable EXCESS_UTILIZATION_RATE;\\n\\n\\tILendingPoolAddressesProvider public immutable addressesProvider;\\n\\n\\t// Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n\\tuint256 internal immutable _baseVariableBorrowRate;\\n\\n\\t// Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _variableRateSlope1;\\n\\n\\t// Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _variableRateSlope2;\\n\\n\\t// Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _stableRateSlope1;\\n\\n\\t// Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _stableRateSlope2;\\n\\n\\tconstructor(\\n\\t\\tILendingPoolAddressesProvider provider,\\n\\t\\tuint256 optimalUtilizationRate_,\\n\\t\\tuint256 baseVariableBorrowRate_,\\n\\t\\tuint256 variableRateSlope1_,\\n\\t\\tuint256 variableRateSlope2_,\\n\\t\\tuint256 stableRateSlope1_,\\n\\t\\tuint256 stableRateSlope2_\\n\\t) {\\n\\t\\tOPTIMAL_UTILIZATION_RATE = optimalUtilizationRate_;\\n\\t\\tEXCESS_UTILIZATION_RATE = WadRayMath.ray().sub(optimalUtilizationRate_);\\n\\t\\taddressesProvider = provider;\\n\\t\\t_baseVariableBorrowRate = baseVariableBorrowRate_;\\n\\t\\t_variableRateSlope1 = variableRateSlope1_;\\n\\t\\t_variableRateSlope2 = variableRateSlope2_;\\n\\t\\t_stableRateSlope1 = stableRateSlope1_;\\n\\t\\t_stableRateSlope2 = stableRateSlope2_;\\n\\t}\\n\\n\\tfunction variableRateSlope1() external view returns (uint256) {\\n\\t\\treturn _variableRateSlope1;\\n\\t}\\n\\n\\tfunction variableRateSlope2() external view returns (uint256) {\\n\\t\\treturn _variableRateSlope2;\\n\\t}\\n\\n\\tfunction stableRateSlope1() external view returns (uint256) {\\n\\t\\treturn _stableRateSlope1;\\n\\t}\\n\\n\\tfunction stableRateSlope2() external view returns (uint256) {\\n\\t\\treturn _stableRateSlope2;\\n\\t}\\n\\n\\tfunction baseVariableBorrowRate() external view returns (uint256) {\\n\\t\\treturn _baseVariableBorrowRate;\\n\\t}\\n\\n\\tfunction getMaxVariableBorrowRate() external view returns (uint256) {\\n\\t\\treturn _baseVariableBorrowRate.add(_variableRateSlope1).add(_variableRateSlope2);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the interest rates depending on the reserve's state and configurations\\n\\t * @param reserve The address of the reserve\\n\\t * @param liquidityAdded The liquidity added during the operation\\n\\t * @param liquidityTaken The liquidity taken during the operation\\n\\t * @param totalStableDebt The total borrowed from the reserve a stable rate\\n\\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n\\t * @param averageStableBorrowRate The weighted average of all the stable rate loans\\n\\t * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\n\\t * @return The liquidity rate, the stable borrow rate and the variable borrow rate\\n\\t **/\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\taddress aToken,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256, uint256, uint256) {\\n\\t\\tuint256 availableLiquidity = IERC20(reserve).balanceOf(aToken);\\n\\t\\t//avoid stack too deep\\n\\t\\tavailableLiquidity = availableLiquidity.add(liquidityAdded).sub(liquidityTaken);\\n\\n\\t\\treturn\\n\\t\\t\\tcalculateInterestRates(\\n\\t\\t\\t\\treserve,\\n\\t\\t\\t\\tavailableLiquidity,\\n\\t\\t\\t\\ttotalStableDebt,\\n\\t\\t\\t\\ttotalVariableDebt,\\n\\t\\t\\t\\taverageStableBorrowRate,\\n\\t\\t\\t\\treserveFactor\\n\\t\\t\\t);\\n\\t}\\n\\n\\tstruct CalcInterestRatesLocalVars {\\n\\t\\tuint256 totalDebt;\\n\\t\\tuint256 currentVariableBorrowRate;\\n\\t\\tuint256 currentStableBorrowRate;\\n\\t\\tuint256 currentLiquidityRate;\\n\\t\\tuint256 utilizationRate;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n\\t * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\\n\\t * New protocol implementation uses the new calculateInterestRates() interface\\n\\t * @param reserve The address of the reserve\\n\\t * @param availableLiquidity The liquidity available in the corresponding aToken\\n\\t * @param totalStableDebt The total borrowed from the reserve a stable rate\\n\\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n\\t * @param averageStableBorrowRate The weighted average of all the stable rate loans\\n\\t * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\n\\t * @return The liquidity rate, the stable borrow rate and the variable borrow rate\\n\\t **/\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\tuint256 availableLiquidity,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) public view returns (uint256, uint256, uint256) {\\n\\t\\tCalcInterestRatesLocalVars memory vars;\\n\\n\\t\\tvars.totalDebt = totalStableDebt.add(totalVariableDebt);\\n\\t\\tvars.currentVariableBorrowRate = 0;\\n\\t\\tvars.currentStableBorrowRate = 0;\\n\\t\\tvars.currentLiquidityRate = 0;\\n\\n\\t\\tvars.utilizationRate = vars.totalDebt == 0 ? 0 : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n\\t\\tvars.currentStableBorrowRate = ILendingRateOracle(addressesProvider.getLendingRateOracle()).getMarketBorrowRate(\\n\\t\\t\\treserve\\n\\t\\t);\\n\\n\\t\\tif (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n\\t\\t\\tuint256 excessUtilizationRateRatio = vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE).rayDiv(\\n\\t\\t\\t\\tEXCESS_UTILIZATION_RATE\\n\\t\\t\\t);\\n\\n\\t\\t\\tvars.currentStableBorrowRate = vars.currentStableBorrowRate.add(_stableRateSlope1).add(\\n\\t\\t\\t\\t_stableRateSlope2.rayMul(excessUtilizationRateRatio)\\n\\t\\t\\t);\\n\\n\\t\\t\\tvars.currentVariableBorrowRate = _baseVariableBorrowRate.add(_variableRateSlope1).add(\\n\\t\\t\\t\\t_variableRateSlope2.rayMul(excessUtilizationRateRatio)\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tvars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n\\t\\t\\t\\t_stableRateSlope1.rayMul(vars.utilizationRate.rayDiv(OPTIMAL_UTILIZATION_RATE))\\n\\t\\t\\t);\\n\\t\\t\\tvars.currentVariableBorrowRate = _baseVariableBorrowRate.add(\\n\\t\\t\\t\\tvars.utilizationRate.rayMul(_variableRateSlope1).rayDiv(OPTIMAL_UTILIZATION_RATE)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tvars.currentLiquidityRate = _getOverallBorrowRate(\\n\\t\\t\\ttotalStableDebt,\\n\\t\\t\\ttotalVariableDebt,\\n\\t\\t\\tvars.currentVariableBorrowRate,\\n\\t\\t\\taverageStableBorrowRate\\n\\t\\t).rayMul(vars.utilizationRate).percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(reserveFactor));\\n\\n\\t\\treturn (vars.currentLiquidityRate, vars.currentStableBorrowRate, vars.currentVariableBorrowRate);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the overall borrow rate as the weighted average between the total variable debt and total stable debt\\n\\t * @param totalStableDebt The total borrowed from the reserve a stable rate\\n\\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n\\t * @param currentVariableBorrowRate The current variable borrow rate of the reserve\\n\\t * @param currentAverageStableBorrowRate The current weighted average of all the stable rate loans\\n\\t * @return The weighted averaged borrow rate\\n\\t **/\\n\\tfunction _getOverallBorrowRate(\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 currentVariableBorrowRate,\\n\\t\\tuint256 currentAverageStableBorrowRate\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 totalDebt = totalStableDebt.add(totalVariableDebt);\\n\\n\\t\\tif (totalDebt == 0) return 0;\\n\\n\\t\\tuint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);\\n\\n\\t\\tuint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);\\n\\n\\t\\tuint256 overallBorrowRate = weightedVariableRate.add(weightedStableRate).rayDiv(totalDebt.wadToRay());\\n\\n\\t\\treturn overallBorrowRate;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/lendingpool/LendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPoolCollateralManager} from \\\"../../interfaces/ILendingPoolCollateralManager.sol\\\";\\nimport {IAToken} from \\\"../../interfaces/IAToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IFlashLoanReceiver} from \\\"../flashloan/interfaces/IFlashLoanReceiver.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../interfaces/IPriceOracleGetter.sol\\\";\\nimport {IStableDebtToken} from \\\"../../interfaces/IStableDebtToken.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {ILeverager} from \\\"../../interfaces/ILeverager.sol\\\";\\nimport {VersionedInitializable} from \\\"../libraries/aave-upgradeability/VersionedInitializable.sol\\\";\\nimport {Helpers} from \\\"../libraries/helpers/Helpers.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\nimport {GenericLogic} from \\\"../libraries/logic/GenericLogic.sol\\\";\\nimport {ValidationLogic} from \\\"../libraries/logic/ValidationLogic.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../libraries/configuration/UserConfiguration.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {LendingPoolStorage} from \\\"./LendingPoolStorage.sol\\\";\\n\\n/**\\n * @title LendingPool contract\\n * @dev Main point of interaction with an Aave protocol's market\\n * - Users can:\\n *   # Deposit\\n *   # Withdraw\\n *   # Borrow\\n *   # Repay\\n *   # Swap their loans between variable and stable rate\\n *   # Enable/disable their deposits as collateral rebalance stable rate borrow positions\\n *   # Liquidate positions\\n *   # Execute Flash Loans\\n * - To be covered by a proxy contract, owned by the LendingPoolAddressesProvider of the specific market\\n * - All admin functions are callable by the LendingPoolConfigurator contract defined also in the\\n *   LendingPoolAddressesProvider\\n * @author Aave\\n **/\\ncontract LendingPool is VersionedInitializable, ILendingPool, LendingPoolStorage {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant LENDINGPOOL_REVISION = 0x2;\\n\\n\\tILeverager public leverager;\\n\\n\\taddress public owner;\\n\\n\\tmodifier whenNotPaused() {\\n\\t\\t_whenNotPaused();\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyLendingPoolConfigurator() {\\n\\t\\t_onlyLendingPoolConfigurator();\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction _whenNotPaused() internal view {\\n\\t\\trequire(!_paused, Errors.LP_IS_PAUSED);\\n\\t}\\n\\n\\tfunction _onlyLendingPoolConfigurator() internal view {\\n\\t\\trequire(\\n\\t\\t\\t_addressesProvider.getLendingPoolConfigurator() == msg.sender,\\n\\t\\t\\tErrors.LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getRevision() internal pure override returns (uint256) {\\n\\t\\treturn LENDINGPOOL_REVISION;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function is invoked by the proxy contract when the LendingPool contract is added to the\\n\\t * LendingPoolAddressesProvider of the market.\\n\\t * - Caching the address of the LendingPoolAddressesProvider in order to reduce gas consumption\\n\\t *   on subsequent operations\\n\\t * @param provider The address of the LendingPoolAddressesProvider\\n\\t **/\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) public override initializer {\\n\\t\\t_addressesProvider = provider;\\n\\t\\t_maxStableRateBorrowSizePercent = 2500;\\n\\t\\t_flashLoanPremiumTotal = 9;\\n\\t\\t_maxNumberOfReserves = 128;\\n\\t\\towner = tx.origin;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) public whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\tValidationLogic.validateDeposit(reserve, amount);\\n\\n\\t\\taddress aToken = reserve.aTokenAddress;\\n\\n\\t\\treserve.updateState();\\n\\t\\treserve.updateInterestRates(asset, aToken, amount, 0);\\n\\n\\t\\tIERC20(asset).safeTransferFrom(msg.sender, aToken, amount);\\n\\n\\t\\tif (IAToken(aToken).balanceOf(onBehalfOf) == 0) {\\n\\t\\t\\t_usersConfig[onBehalfOf].setUsingAsCollateral(reserve.id, true);\\n\\t\\t\\temit ReserveUsedAsCollateralEnabled(asset, onBehalfOf);\\n\\t\\t}\\n\\n\\t\\tIAToken(aToken).mint(onBehalfOf, amount, reserve.liquidityIndex);\\n\\n\\t\\temit Deposit(asset, msg.sender, onBehalfOf, amount, referralCode);\\n\\t}\\n\\n\\tfunction depositWithAutoDLP(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external whenNotPaused {\\n\\t\\trequire(tx.origin == onBehalfOf);\\n\\t\\tdeposit(asset, amount, onBehalfOf, referralCode);\\n\\t\\tleverager.zapWETHWithBorrow(leverager.wethToZap(onBehalfOf), onBehalfOf);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external whenNotPaused returns (uint256) {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\taddress aToken = reserve.aTokenAddress;\\n\\n\\t\\tuint256 userBalance = IAToken(aToken).balanceOf(msg.sender);\\n\\n\\t\\tuint256 amountToWithdraw = amount;\\n\\n\\t\\tif (amount == type(uint256).max) {\\n\\t\\t\\tamountToWithdraw = userBalance;\\n\\t\\t}\\n\\n\\t\\tValidationLogic.validateWithdraw(\\n\\t\\t\\tasset,\\n\\t\\t\\tamountToWithdraw,\\n\\t\\t\\tuserBalance,\\n\\t\\t\\t_reserves,\\n\\t\\t\\t_usersConfig[msg.sender],\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\treserve.updateInterestRates(asset, aToken, 0, amountToWithdraw);\\n\\n\\t\\tif (amountToWithdraw == userBalance) {\\n\\t\\t\\t_usersConfig[msg.sender].setUsingAsCollateral(reserve.id, false);\\n\\t\\t\\temit ReserveUsedAsCollateralDisabled(asset, msg.sender);\\n\\t\\t}\\n\\n\\t\\tIAToken(aToken).burn(msg.sender, to, amountToWithdraw, reserve.liquidityIndex);\\n\\n\\t\\temit Withdraw(asset, msg.sender, to, amountToWithdraw);\\n\\n\\t\\treturn amountToWithdraw;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\t_executeBorrow(\\n\\t\\t\\tExecuteBorrowParams(\\n\\t\\t\\t\\tasset,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tonBehalfOf,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\tinterestRateMode,\\n\\t\\t\\t\\treserve.aTokenAddress,\\n\\t\\t\\t\\treferralCode,\\n\\t\\t\\t\\ttrue\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 rateMode,\\n\\t\\taddress onBehalfOf\\n\\t) external whenNotPaused returns (uint256) {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\t(uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(onBehalfOf, reserve);\\n\\n\\t\\tDataTypes.InterestRateMode interestRateMode = DataTypes.InterestRateMode(rateMode);\\n\\n\\t\\tValidationLogic.validateRepay(reserve, amount, interestRateMode, onBehalfOf, stableDebt, variableDebt);\\n\\n\\t\\tuint256 paybackAmount = interestRateMode == DataTypes.InterestRateMode.STABLE ? stableDebt : variableDebt;\\n\\n\\t\\tif (amount < paybackAmount) {\\n\\t\\t\\tpaybackAmount = amount;\\n\\t\\t}\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tif (interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\tIStableDebtToken(reserve.stableDebtTokenAddress).burn(onBehalfOf, paybackAmount);\\n\\t\\t} else {\\n\\t\\t\\tIVariableDebtToken(reserve.variableDebtTokenAddress).burn(\\n\\t\\t\\t\\tonBehalfOf,\\n\\t\\t\\t\\tpaybackAmount,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\taddress aToken = reserve.aTokenAddress;\\n\\t\\treserve.updateInterestRates(asset, aToken, paybackAmount, 0);\\n\\n\\t\\tif (stableDebt.add(variableDebt).sub(paybackAmount) == 0) {\\n\\t\\t\\t_usersConfig[onBehalfOf].setBorrowing(reserve.id, false);\\n\\t\\t}\\n\\n\\t\\tIERC20(asset).safeTransferFrom(msg.sender, aToken, paybackAmount);\\n\\n\\t\\tIAToken(aToken).handleRepayment(msg.sender, paybackAmount);\\n\\n\\t\\temit Repay(asset, onBehalfOf, msg.sender, paybackAmount);\\n\\n\\t\\treturn paybackAmount;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\t(uint256 stableDebt, uint256 variableDebt) = Helpers.getUserCurrentDebt(msg.sender, reserve);\\n\\n\\t\\tDataTypes.InterestRateMode interestRateMode = DataTypes.InterestRateMode(rateMode);\\n\\n\\t\\tValidationLogic.validateSwapRateMode(\\n\\t\\t\\treserve,\\n\\t\\t\\t_usersConfig[msg.sender],\\n\\t\\t\\tstableDebt,\\n\\t\\t\\tvariableDebt,\\n\\t\\t\\tinterestRateMode\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tif (interestRateMode == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\tIStableDebtToken(reserve.stableDebtTokenAddress).burn(msg.sender, stableDebt);\\n\\t\\t\\tIVariableDebtToken(reserve.variableDebtTokenAddress).mint(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tstableDebt,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tIVariableDebtToken(reserve.variableDebtTokenAddress).burn(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tvariableDebt,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t\\tIStableDebtToken(reserve.stableDebtTokenAddress).mint(\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tvariableDebt,\\n\\t\\t\\t\\treserve.currentStableBorrowRate\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treserve.updateInterestRates(asset, reserve.aTokenAddress, 0, 0);\\n\\n\\t\\temit Swap(asset, msg.sender, rateMode);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\tIERC20 stableDebtToken = IERC20(reserve.stableDebtTokenAddress);\\n\\t\\tIERC20 variableDebtToken = IERC20(reserve.variableDebtTokenAddress);\\n\\t\\taddress aTokenAddress = reserve.aTokenAddress;\\n\\n\\t\\tuint256 stableDebt = IERC20(stableDebtToken).balanceOf(user);\\n\\n\\t\\tValidationLogic.validateRebalanceStableBorrowRate(\\n\\t\\t\\treserve,\\n\\t\\t\\tasset,\\n\\t\\t\\tstableDebtToken,\\n\\t\\t\\tvariableDebtToken,\\n\\t\\t\\taTokenAddress\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tIStableDebtToken(address(stableDebtToken)).burn(user, stableDebt);\\n\\t\\tIStableDebtToken(address(stableDebtToken)).mint(user, user, stableDebt, reserve.currentStableBorrowRate);\\n\\n\\t\\treserve.updateInterestRates(asset, aTokenAddress, 0, 0);\\n\\n\\t\\temit RebalanceStableBorrowRate(asset, user);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external whenNotPaused {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[asset];\\n\\n\\t\\tValidationLogic.validateSetUseReserveAsCollateral(\\n\\t\\t\\treserve,\\n\\t\\t\\tasset,\\n\\t\\t\\tuseAsCollateral,\\n\\t\\t\\t_reserves,\\n\\t\\t\\t_usersConfig[msg.sender],\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t);\\n\\n\\t\\t_usersConfig[msg.sender].setUsingAsCollateral(reserve.id, useAsCollateral);\\n\\n\\t\\tif (useAsCollateral) {\\n\\t\\t\\temit ReserveUsedAsCollateralEnabled(asset, msg.sender);\\n\\t\\t} else {\\n\\t\\t\\temit ReserveUsedAsCollateralDisabled(asset, msg.sender);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external whenNotPaused {\\n\\t\\taddress collateralManager = _addressesProvider.getLendingPoolCollateralManager();\\n\\t\\taddress liquidationFeeTo = _addressesProvider.getLiquidationFeeTo();\\n\\t\\tif (liquidationFeeTo == address(0)) {\\n\\t\\t\\tliquidationFeeTo = msg.sender;\\n\\t\\t}\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\t(bool success, bytes memory result) = collateralManager.delegatecall(\\n\\t\\t\\tabi.encodeCall(\\n\\t\\t\\t\\tILendingPoolCollateralManager.liquidationCall,\\n\\t\\t\\t\\t(collateralAsset, debtAsset, user, debtToCover, receiveAToken, liquidationFeeTo)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\trequire(success, Errors.LP_LIQUIDATION_CALL_FAILED);\\n\\n\\t\\t(uint256 returnCode, string memory returnMessage) = abi.decode(result, (uint256, string));\\n\\n\\t\\trequire(returnCode == 0, string(abi.encodePacked(returnMessage)));\\n\\t}\\n\\n\\tstruct FlashLoanLocalVars {\\n\\t\\tIFlashLoanReceiver receiver;\\n\\t\\taddress oracle;\\n\\t\\tuint256 i;\\n\\t\\taddress currentAsset;\\n\\t\\taddress currentATokenAddress;\\n\\t\\tuint256 currentAmount;\\n\\t\\tuint256 currentPremium;\\n\\t\\tuint256 currentAmountPlusPremium;\\n\\t\\taddress debtToken;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external whenNotPaused {\\n\\t\\tFlashLoanLocalVars memory vars;\\n\\n\\t\\tValidationLogic.validateFlashloan(assets, amounts);\\n\\n\\t\\taddress[] memory aTokenAddresses = new address[](assets.length);\\n\\t\\tuint256[] memory premiums = new uint256[](assets.length);\\n\\n\\t\\tvars.receiver = IFlashLoanReceiver(receiverAddress);\\n\\n\\t\\tfor (vars.i = 0; vars.i < assets.length; ) {\\n\\t\\t\\taTokenAddresses[vars.i] = _reserves[assets[vars.i]].aTokenAddress;\\n\\n\\t\\t\\tpremiums[vars.i] = amounts[vars.i].mul(_flashLoanPremiumTotal).div(10000);\\n\\n\\t\\t\\tIAToken(aTokenAddresses[vars.i]).transferUnderlyingTo(receiverAddress, amounts[vars.i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tvars.i++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.receiver.executeOperation(assets, amounts, premiums, msg.sender, params),\\n\\t\\t\\tErrors.LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN\\n\\t\\t);\\n\\n\\t\\tfor (vars.i = 0; vars.i < assets.length; ) {\\n\\t\\t\\tvars.currentAsset = assets[vars.i];\\n\\t\\t\\tvars.currentAmount = amounts[vars.i];\\n\\t\\t\\tvars.currentPremium = premiums[vars.i];\\n\\t\\t\\tvars.currentATokenAddress = aTokenAddresses[vars.i];\\n\\t\\t\\tvars.currentAmountPlusPremium = vars.currentAmount.add(vars.currentPremium);\\n\\n\\t\\t\\tif (DataTypes.InterestRateMode(modes[vars.i]) == DataTypes.InterestRateMode.NONE) {\\n\\t\\t\\t\\t_reserves[vars.currentAsset].updateState();\\n\\t\\t\\t\\t_reserves[vars.currentAsset].cumulateToLiquidityIndex(\\n\\t\\t\\t\\t\\tIERC20(vars.currentATokenAddress).totalSupply(),\\n\\t\\t\\t\\t\\tvars.currentPremium\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\t_reserves[vars.currentAsset].updateInterestRates(\\n\\t\\t\\t\\t\\tvars.currentAsset,\\n\\t\\t\\t\\t\\tvars.currentATokenAddress,\\n\\t\\t\\t\\t\\tvars.currentAmountPlusPremium,\\n\\t\\t\\t\\t\\t0\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tIERC20(vars.currentAsset).safeTransferFrom(\\n\\t\\t\\t\\t\\treceiverAddress,\\n\\t\\t\\t\\t\\tvars.currentATokenAddress,\\n\\t\\t\\t\\t\\tvars.currentAmountPlusPremium\\n\\t\\t\\t\\t);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t// If the user chose to not return the funds, the system checks if there is enough collateral and\\n\\t\\t\\t\\t// eventually opens a debt position\\n\\t\\t\\t\\t_executeBorrow(\\n\\t\\t\\t\\t\\tExecuteBorrowParams(\\n\\t\\t\\t\\t\\t\\tvars.currentAsset,\\n\\t\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\t\\tonBehalfOf,\\n\\t\\t\\t\\t\\t\\tvars.currentAmount,\\n\\t\\t\\t\\t\\t\\tmodes[vars.i],\\n\\t\\t\\t\\t\\t\\tvars.currentATokenAddress,\\n\\t\\t\\t\\t\\t\\treferralCode,\\n\\t\\t\\t\\t\\t\\tfalse\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\temit FlashLoan(\\n\\t\\t\\t\\treceiverAddress,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tvars.currentAsset,\\n\\t\\t\\t\\tvars.currentAmount,\\n\\t\\t\\t\\tvars.currentPremium,\\n\\t\\t\\t\\treferralCode\\n\\t\\t\\t);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\tvars.i++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory) {\\n\\t\\treturn _reserves[asset];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t)\\n\\t{\\n\\t\\t(totalCollateralETH, totalDebtETH, ltv, currentLiquidationThreshold, healthFactor) = GenericLogic\\n\\t\\t\\t.calculateUserAccountData(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\t_reserves,\\n\\t\\t\\t\\t_usersConfig[user],\\n\\t\\t\\t\\t_reservesList,\\n\\t\\t\\t\\t_reservesCount,\\n\\t\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t\\t);\\n\\n\\t\\tavailableBorrowsETH = GenericLogic.calculateAvailableBorrowsETH(totalCollateralETH, totalDebtETH, ltv);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory) {\\n\\t\\treturn _reserves[asset].configuration;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory) {\\n\\t\\treturn _usersConfig[user];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the normalized income per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view virtual returns (uint256) {\\n\\t\\treturn _reserves[asset].getNormalizedIncome();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256) {\\n\\t\\treturn _reserves[asset].getNormalizedDebt();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns if the LendingPool is paused\\n\\t */\\n\\tfunction paused() external view returns (bool) {\\n\\t\\treturn _paused;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the list of the initialized reserves\\n\\t **/\\n\\tfunction getReservesList() external view returns (address[] memory) {\\n\\t\\taddress[] memory _activeReserves = new address[](_reservesCount);\\n\\n\\t\\tfor (uint256 i = 0; i < _reservesCount; ) {\\n\\t\\t\\t_activeReserves[i] = _reservesList[i];\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn _activeReserves;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the cached LendingPoolAddressesProvider connected to this contract\\n\\t **/\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider) {\\n\\t\\treturn _addressesProvider;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n\\t */\\n\\tfunction MAX_STABLE_RATE_BORROW_SIZE_PERCENT() public view returns (uint256) {\\n\\t\\treturn _maxStableRateBorrowSizePercent;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the fee on flash loans\\n\\t */\\n\\tfunction FLASHLOAN_PREMIUM_TOTAL() public view returns (uint256) {\\n\\t\\treturn _flashLoanPremiumTotal;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the maximum number of reserves supported to be listed in this LendingPool\\n\\t */\\n\\tfunction MAX_NUMBER_RESERVES() public view returns (uint256) {\\n\\t\\treturn _maxNumberOfReserves;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates and finalizes an aToken transfer\\n\\t * - Only callable by the overlying aToken of the `asset`\\n\\t * @param asset The address of the underlying asset of the aToken\\n\\t * @param from The user from which the aTokens are transferred\\n\\t * @param to The user receiving the aTokens\\n\\t * @param amount The amount being transferred/withdrawn\\n\\t * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n\\t * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n\\t */\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromBefore,\\n\\t\\tuint256 balanceToBefore\\n\\t) external whenNotPaused {\\n\\t\\trequire(msg.sender == _reserves[asset].aTokenAddress, Errors.LP_CALLER_MUST_BE_AN_ATOKEN);\\n\\n\\t\\tValidationLogic.validateTransfer(\\n\\t\\t\\tfrom,\\n\\t\\t\\t_reserves,\\n\\t\\t\\t_usersConfig[from],\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\t_addressesProvider.getPriceOracle()\\n\\t\\t);\\n\\n\\t\\tuint256 reserveId = _reserves[asset].id;\\n\\n\\t\\tif (from != to) {\\n\\t\\t\\tif (balanceFromBefore.sub(amount) == 0) {\\n\\t\\t\\t\\tDataTypes.UserConfigurationMap storage fromConfig = _usersConfig[from];\\n\\t\\t\\t\\tfromConfig.setUsingAsCollateral(reserveId, false);\\n\\t\\t\\t\\temit ReserveUsedAsCollateralDisabled(asset, from);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (balanceToBefore == 0 && amount != 0) {\\n\\t\\t\\t\\tDataTypes.UserConfigurationMap storage toConfig = _usersConfig[to];\\n\\t\\t\\t\\ttoConfig.setUsingAsCollateral(reserveId, true);\\n\\t\\t\\t\\temit ReserveUsedAsCollateralEnabled(asset, to);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n\\t * interest rate strategy\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n\\t * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n\\t * @param aTokenAddress The address of the VariableDebtToken that will be assigned to the reserve\\n\\t * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n\\t **/\\n\\tfunction initReserve(\\n\\t\\taddress asset,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external onlyLendingPoolConfigurator {\\n\\t\\trequire(Address.isContract(asset), Errors.LP_NOT_CONTRACT);\\n\\t\\t_reserves[asset].init(aTokenAddress, stableDebtAddress, variableDebtAddress, interestRateStrategyAddress);\\n\\t\\t_addReserveToList(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the address of the interest rate strategy contract\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param rateStrategyAddress The address of the interest rate strategy contract\\n\\t **/\\n\\tfunction setReserveInterestRateStrategyAddress(\\n\\t\\taddress asset,\\n\\t\\taddress rateStrategyAddress\\n\\t) external onlyLendingPoolConfigurator {\\n\\t\\t_reserves[asset].interestRateStrategyAddress = rateStrategyAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the configuration bitmap of the reserve as a whole\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param configuration The new configuration bitmap\\n\\t **/\\n\\tfunction setConfiguration(address asset, uint256 configuration) external onlyLendingPoolConfigurator {\\n\\t\\t_reserves[asset].configuration.data = configuration;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Set the _pause state of a reserve\\n\\t * - Only callable by the LendingPoolConfigurator contract\\n\\t * @param val `true` to pause the reserve, `false` to un-pause it\\n\\t */\\n\\tfunction setPause(bool val) external onlyLendingPoolConfigurator {\\n\\t\\t_paused = val;\\n\\t\\tif (_paused) {\\n\\t\\t\\temit Paused();\\n\\t\\t} else {\\n\\t\\t\\temit Unpaused();\\n\\t\\t}\\n\\t}\\n\\n\\tstruct ExecuteBorrowParams {\\n\\t\\taddress asset;\\n\\t\\taddress user;\\n\\t\\taddress onBehalfOf;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 interestRateMode;\\n\\t\\taddress aTokenAddress;\\n\\t\\tuint16 referralCode;\\n\\t\\tbool releaseUnderlying;\\n\\t}\\n\\n\\tfunction _executeBorrow(ExecuteBorrowParams memory vars) internal {\\n\\t\\tDataTypes.ReserveData storage reserve = _reserves[vars.asset];\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig = _usersConfig[vars.onBehalfOf];\\n\\n\\t\\taddress oracle = _addressesProvider.getPriceOracle();\\n\\n\\t\\tuint256 amountInETH = IPriceOracleGetter(oracle).getAssetPrice(vars.asset).mul(vars.amount).div(\\n\\t\\t\\t10 ** reserve.configuration.getDecimals()\\n\\t\\t);\\n\\n\\t\\tValidationLogic.validateBorrow(\\n\\t\\t\\tvars.asset,\\n\\t\\t\\treserve,\\n\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\tvars.amount,\\n\\t\\t\\tamountInETH,\\n\\t\\t\\tvars.interestRateMode,\\n\\t\\t\\t_maxStableRateBorrowSizePercent,\\n\\t\\t\\t_reserves,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\t_reservesList,\\n\\t\\t\\t_reservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\treserve.updateState();\\n\\n\\t\\tuint256 currentStableRate = 0;\\n\\n\\t\\tbool isFirstBorrowing = false;\\n\\t\\tif (DataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\tcurrentStableRate = reserve.currentStableBorrowRate;\\n\\n\\t\\t\\tisFirstBorrowing = IStableDebtToken(reserve.stableDebtTokenAddress).mint(\\n\\t\\t\\t\\tvars.user,\\n\\t\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\t\\tvars.amount,\\n\\t\\t\\t\\tcurrentStableRate\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tisFirstBorrowing = IVariableDebtToken(reserve.variableDebtTokenAddress).mint(\\n\\t\\t\\t\\tvars.user,\\n\\t\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\t\\tvars.amount,\\n\\t\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (isFirstBorrowing) {\\n\\t\\t\\tuserConfig.setBorrowing(reserve.id, true);\\n\\t\\t}\\n\\n\\t\\treserve.updateInterestRates(vars.asset, vars.aTokenAddress, 0, vars.releaseUnderlying ? vars.amount : 0);\\n\\n\\t\\tif (vars.releaseUnderlying) {\\n\\t\\t\\tIAToken(vars.aTokenAddress).transferUnderlyingTo(vars.user, vars.amount);\\n\\t\\t}\\n\\n\\t\\temit Borrow(\\n\\t\\t\\tvars.asset,\\n\\t\\t\\tvars.user,\\n\\t\\t\\tvars.onBehalfOf,\\n\\t\\t\\tvars.amount,\\n\\t\\t\\tvars.interestRateMode,\\n\\t\\t\\tDataTypes.InterestRateMode(vars.interestRateMode) == DataTypes.InterestRateMode.STABLE\\n\\t\\t\\t\\t? currentStableRate\\n\\t\\t\\t\\t: reserve.currentVariableBorrowRate,\\n\\t\\t\\tvars.referralCode\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _addReserveToList(address asset) internal {\\n\\t\\tuint256 reservesCount = _reservesCount;\\n\\n\\t\\trequire(reservesCount < _maxNumberOfReserves, Errors.LP_NO_MORE_RESERVES_ALLOWED);\\n\\n\\t\\tbool reserveAlreadyAdded = _reserves[asset].id != 0 || _reservesList[0] == asset;\\n\\n\\t\\tif (!reserveAlreadyAdded) {\\n\\t\\t\\t_reserves[asset].id = uint8(reservesCount);\\n\\t\\t\\t_reservesList[reservesCount] = asset;\\n\\n\\t\\t\\t_reservesCount = reservesCount + 1;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setLeverager(ILeverager _leverager) external {\\n\\t\\trequire(msg.sender == owner, \\\"!owner\\\");\\n\\t\\trequire(address(leverager) == address(0), \\\"Leverager Already Set\\\");\\n\\t\\tleverager = _leverager;\\n\\t}\\n\\n\\tfunction setNewOwner(address _newOwner) external {\\n\\t\\trequire(msg.sender == owner, \\\"!owner\\\");\\n\\t\\towner = _newOwner;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/lendingpool/LendingPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {VersionedInitializable} from \\\"../libraries/aave-upgradeability/VersionedInitializable.sol\\\";\\nimport {InitializableImmutableAdminUpgradeabilityProxy} from \\\"../libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {IInitializableDebtToken} from \\\"../../interfaces/IInitializableDebtToken.sol\\\";\\nimport {IInitializableAToken} from \\\"../../interfaces/IInitializableAToken.sol\\\";\\nimport {IChefIncentivesController} from \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../interfaces/IAaveIncentivesController.sol\\\";\\nimport {ILendingPoolConfigurator} from \\\"../../interfaces/ILendingPoolConfigurator.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\n\\n/**\\n * @title LendingPoolConfigurator contract\\n * @author Aave\\n * @dev Implements the configuration methods for the Aave protocol\\n **/\\n\\ncontract LendingPoolConfigurator is VersionedInitializable, ILendingPoolConfigurator {\\n\\tusing SafeMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n\\tILendingPoolAddressesProvider internal addressesProvider;\\n\\tILendingPool internal pool;\\n\\n\\tmodifier onlyPoolAdmin() {\\n\\t\\trequire(addressesProvider.getPoolAdmin() == msg.sender, Errors.CALLER_NOT_POOL_ADMIN);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyEmergencyAdmin() {\\n\\t\\trequire(addressesProvider.getEmergencyAdmin() == msg.sender, Errors.LPC_CALLER_NOT_EMERGENCY_ADMIN);\\n\\t\\t_;\\n\\t}\\n\\n\\tuint256 internal constant CONFIGURATOR_REVISION = 0x1;\\n\\n\\tfunction getRevision() internal pure override returns (uint256) {\\n\\t\\treturn CONFIGURATOR_REVISION;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) public initializer {\\n\\t\\taddressesProvider = provider;\\n\\t\\tpool = ILendingPool(addressesProvider.getLendingPool());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes reserves in batch\\n\\t **/\\n\\tfunction batchInitReserve(InitReserveInput[] calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\t\\tuint256 length = input.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\t_initReserve(cachedPool, input[i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _initReserve(ILendingPool _pool, InitReserveInput calldata input) internal {\\n\\t\\tIChefIncentivesController incentivesController = IChefIncentivesController(input.incentivesController);\\n\\t\\taddress aTokenProxyAddress = _initTokenWithProxy(\\n\\t\\t\\tinput.aTokenImpl,\\n\\t\\t\\tabi.encodeCall(\\n\\t\\t\\t\\tIInitializableAToken.initialize,\\n\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t_pool,\\n\\t\\t\\t\\t\\tinput.treasury,\\n\\t\\t\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\t\\t\\tIAaveIncentivesController(input.incentivesController),\\n\\t\\t\\t\\t\\tinput.underlyingAssetDecimals,\\n\\t\\t\\t\\t\\tinput.aTokenName,\\n\\t\\t\\t\\t\\tinput.aTokenSymbol,\\n\\t\\t\\t\\t\\tinput.params\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tincentivesController.addPool(aTokenProxyAddress, input.allocPoint);\\n\\t\\tIMultiFeeDistribution(input.treasury).addReward(aTokenProxyAddress);\\n\\n\\t\\taddress stableDebtTokenProxyAddress = _initTokenWithProxy(\\n\\t\\t\\tinput.stableDebtTokenImpl,\\n\\t\\t\\tabi.encodeCall(\\n\\t\\t\\t\\tIInitializableDebtToken.initialize,\\n\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t_pool,\\n\\t\\t\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\t\\t\\tIAaveIncentivesController(input.incentivesController),\\n\\t\\t\\t\\t\\tinput.underlyingAssetDecimals,\\n\\t\\t\\t\\t\\tinput.stableDebtTokenName,\\n\\t\\t\\t\\t\\tinput.stableDebtTokenSymbol,\\n\\t\\t\\t\\t\\tinput.params\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\t// stableDebt is not added to incentives controller\\n\\t\\t// GEIST does not support stable lending\\n\\n\\t\\taddress variableDebtTokenProxyAddress = _initTokenWithProxy(\\n\\t\\t\\tinput.variableDebtTokenImpl,\\n\\t\\t\\tabi.encodeCall(\\n\\t\\t\\t\\tIInitializableDebtToken.initialize,\\n\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t_pool,\\n\\t\\t\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\t\\t\\tIAaveIncentivesController(input.incentivesController),\\n\\t\\t\\t\\t\\tinput.underlyingAssetDecimals,\\n\\t\\t\\t\\t\\tinput.variableDebtTokenName,\\n\\t\\t\\t\\t\\tinput.variableDebtTokenSymbol,\\n\\t\\t\\t\\t\\tinput.params\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tincentivesController.addPool(variableDebtTokenProxyAddress, input.allocPoint);\\n\\n\\t\\t_pool.initReserve(\\n\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\taTokenProxyAddress,\\n\\t\\t\\tstableDebtTokenProxyAddress,\\n\\t\\t\\tvariableDebtTokenProxyAddress,\\n\\t\\t\\tinput.interestRateStrategyAddress\\n\\t\\t);\\n\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = _pool.getConfiguration(input.underlyingAsset);\\n\\n\\t\\tcurrentConfig.setDecimals(input.underlyingAssetDecimals);\\n\\n\\t\\tcurrentConfig.setActive(true);\\n\\t\\tcurrentConfig.setFrozen(false);\\n\\n\\t\\tpool.setConfiguration(input.underlyingAsset, currentConfig.data);\\n\\n\\t\\temit ReserveInitialized(\\n\\t\\t\\tinput.underlyingAsset,\\n\\t\\t\\taTokenProxyAddress,\\n\\t\\t\\tstableDebtTokenProxyAddress,\\n\\t\\t\\tvariableDebtTokenProxyAddress,\\n\\t\\t\\tinput.interestRateStrategyAddress\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the aToken implementation for the reserve\\n\\t **/\\n\\tfunction updateAToken(UpdateATokenInput calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\n\\t\\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\n\\n\\t\\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\\n\\n\\t\\tbytes memory encodedCall = abi.encodeCall(\\n\\t\\t\\tIInitializableAToken.initialize,\\n\\t\\t\\t(\\n\\t\\t\\t\\tcachedPool,\\n\\t\\t\\t\\tinput.treasury,\\n\\t\\t\\t\\tinput.asset,\\n\\t\\t\\t\\tIAaveIncentivesController(input.incentivesController),\\n\\t\\t\\t\\tuint8(decimals),\\n\\t\\t\\t\\tinput.name,\\n\\t\\t\\t\\tinput.symbol,\\n\\t\\t\\t\\tinput.params\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t_upgradeTokenImplementation(reserveData.aTokenAddress, input.implementation, encodedCall);\\n\\n\\t\\temit ATokenUpgraded(input.asset, reserveData.aTokenAddress, input.implementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the stable debt token implementation for the reserve\\n\\t **/\\n\\tfunction updateStableDebtToken(UpdateDebtTokenInput calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\n\\t\\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\n\\n\\t\\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\\n\\n\\t\\tbytes memory encodedCall = abi.encodeCall(\\n\\t\\t\\tIInitializableDebtToken.initialize,\\n\\t\\t\\t(\\n\\t\\t\\t\\tcachedPool,\\n\\t\\t\\t\\tinput.asset,\\n\\t\\t\\t\\tIAaveIncentivesController(input.incentivesController),\\n\\t\\t\\t\\tuint8(decimals),\\n\\t\\t\\t\\tinput.name,\\n\\t\\t\\t\\tinput.symbol,\\n\\t\\t\\t\\tinput.params\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t_upgradeTokenImplementation(reserveData.stableDebtTokenAddress, input.implementation, encodedCall);\\n\\n\\t\\temit StableDebtTokenUpgraded(input.asset, reserveData.stableDebtTokenAddress, input.implementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the variable debt token implementation for the asset\\n\\t **/\\n\\tfunction updateVariableDebtToken(UpdateDebtTokenInput calldata input) external onlyPoolAdmin {\\n\\t\\tILendingPool cachedPool = pool;\\n\\n\\t\\tDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\\n\\n\\t\\t(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\\n\\n\\t\\tbytes memory encodedCall = abi.encodeCall(\\n\\t\\t\\tIInitializableDebtToken.initialize,\\n\\t\\t\\t(\\n\\t\\t\\t\\tcachedPool,\\n\\t\\t\\t\\tinput.asset,\\n\\t\\t\\t\\tIAaveIncentivesController(input.incentivesController),\\n\\t\\t\\t\\tuint8(decimals),\\n\\t\\t\\t\\tinput.name,\\n\\t\\t\\t\\tinput.symbol,\\n\\t\\t\\t\\tinput.params\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\t_upgradeTokenImplementation(reserveData.variableDebtTokenAddress, input.implementation, encodedCall);\\n\\n\\t\\temit VariableDebtTokenUpgraded(input.asset, reserveData.variableDebtTokenAddress, input.implementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\\n\\t **/\\n\\tfunction enableBorrowingOnReserve(address asset, bool stableBorrowRateEnabled) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setBorrowingEnabled(true);\\n\\t\\tcurrentConfig.setStableRateBorrowingEnabled(stableBorrowRateEnabled);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit BorrowingEnabledOnReserve(asset, stableBorrowRateEnabled);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Disables borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction disableBorrowingOnReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setBorrowingEnabled(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\t\\temit BorrowingDisabledOnReserve(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Configures the reserve collateralization parameters\\n\\t * all the values are expressed in percentages with two decimals of precision. A valid value is 10000, which means 100.00%\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param ltv The loan to value of the asset when used as collateral\\n\\t * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n\\t * @param liquidationBonus The bonus liquidators receive to liquidate this asset. The values is always above 100%. A value of 105%\\n\\t * means the liquidator will receive a 5% bonus\\n\\t **/\\n\\tfunction configureReserveAsCollateral(\\n\\t\\taddress asset,\\n\\t\\tuint256 ltv,\\n\\t\\tuint256 liquidationThreshold,\\n\\t\\tuint256 liquidationBonus\\n\\t) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\t//validation of the parameters: the LTV can\\n\\t\\t//only be lower or equal than the liquidation threshold\\n\\t\\t//(otherwise a loan against the asset would cause instantaneous liquidation)\\n\\t\\trequire(ltv <= liquidationThreshold, Errors.LPC_INVALID_CONFIGURATION);\\n\\n\\t\\tif (liquidationThreshold != 0) {\\n\\t\\t\\t//liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less\\n\\t\\t\\t//collateral than needed to cover the debt\\n\\t\\t\\trequire(liquidationBonus > PercentageMath.PERCENTAGE_FACTOR, Errors.LPC_INVALID_CONFIGURATION);\\n\\n\\t\\t\\t//if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\\n\\t\\t\\t//a loan is taken there is enough collateral available to cover the liquidation bonus\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tliquidationThreshold.percentMul(liquidationBonus) <= PercentageMath.PERCENTAGE_FACTOR,\\n\\t\\t\\t\\tErrors.LPC_INVALID_CONFIGURATION\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trequire(liquidationBonus == 0, Errors.LPC_INVALID_CONFIGURATION);\\n\\t\\t\\t//if the liquidation threshold is being set to 0,\\n\\t\\t\\t// the reserve is being disabled as collateral. To do so,\\n\\t\\t\\t//we need to ensure no liquidity is deposited\\n\\t\\t\\t_checkNoLiquidity(asset);\\n\\t\\t}\\n\\n\\t\\tcurrentConfig.setLtv(ltv);\\n\\t\\tcurrentConfig.setLiquidationThreshold(liquidationThreshold);\\n\\t\\tcurrentConfig.setLiquidationBonus(liquidationBonus);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit CollateralConfigurationChanged(asset, ltv, liquidationThreshold, liquidationBonus);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enable stable rate borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction enableReserveStableRate(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setStableRateBorrowingEnabled(true);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit StableRateEnabledOnReserve(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Disable stable rate borrowing on a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction disableReserveStableRate(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setStableRateBorrowingEnabled(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit StableRateDisabledOnReserve(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Activates a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction activateReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setActive(true);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveActivated(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Deactivates a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction deactivateReserve(address asset) external onlyPoolAdmin {\\n\\t\\t_checkNoLiquidity(asset);\\n\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setActive(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveDeactivated(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow or rate swap\\n\\t *  but allows repayments, liquidations, rate rebalances and withdrawals\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction freezeReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setFrozen(true);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveFrozen(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Unfreezes a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t **/\\n\\tfunction unfreezeReserve(address asset) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setFrozen(false);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveUnfrozen(asset);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve factor of a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param reserveFactor The new reserve factor of the reserve\\n\\t **/\\n\\tfunction setReserveFactor(address asset, uint256 reserveFactor) external onlyPoolAdmin {\\n\\t\\tDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\\n\\n\\t\\tcurrentConfig.setReserveFactor(reserveFactor);\\n\\n\\t\\tpool.setConfiguration(asset, currentConfig.data);\\n\\n\\t\\temit ReserveFactorChanged(asset, reserveFactor);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the interest rate strategy of a reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param rateStrategyAddress The new address of the interest strategy contract\\n\\t **/\\n\\tfunction setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress) external onlyPoolAdmin {\\n\\t\\tpool.setReserveInterestRateStrategyAddress(asset, rateStrategyAddress);\\n\\t\\temit ReserveInterestRateStrategyChanged(asset, rateStrategyAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @dev pauses or unpauses all the actions of the protocol, including aToken transfers\\n\\t * @param val true if protocol needs to be paused, false otherwise\\n\\t **/\\n\\tfunction setPoolPause(bool val) external onlyEmergencyAdmin {\\n\\t\\tpool.setPause(val);\\n\\t}\\n\\n\\tfunction _initTokenWithProxy(address implementation, bytes memory initParams) internal returns (address) {\\n\\t\\tInitializableImmutableAdminUpgradeabilityProxy proxy = new InitializableImmutableAdminUpgradeabilityProxy(\\n\\t\\t\\taddress(this)\\n\\t\\t);\\n\\n\\t\\tproxy.initialize(implementation, initParams);\\n\\n\\t\\treturn address(proxy);\\n\\t}\\n\\n\\tfunction _upgradeTokenImplementation(\\n\\t\\taddress proxyAddress,\\n\\t\\taddress implementation,\\n\\t\\tbytes memory initParams\\n\\t) internal {\\n\\t\\tInitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(\\n\\t\\t\\tpayable(proxyAddress)\\n\\t\\t);\\n\\n\\t\\tproxy.upgradeToAndCall(implementation, initParams);\\n\\t}\\n\\n\\tfunction _checkNoLiquidity(address asset) internal view {\\n\\t\\tDataTypes.ReserveData memory reserveData = pool.getReserveData(asset);\\n\\n\\t\\tuint256 availableLiquidity = IERC20Metadata(asset).balanceOf(reserveData.aTokenAddress);\\n\\n\\t\\trequire(availableLiquidity == 0 && reserveData.currentLiquidityRate == 0, Errors.LPC_RESERVE_LIQUIDITY_NOT_0);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/lendingpool/LendingPoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {UserConfiguration} from \\\"../libraries/configuration/UserConfiguration.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {ReserveLogic} from \\\"../libraries/logic/ReserveLogic.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ncontract LendingPoolStorage {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tILendingPoolAddressesProvider internal _addressesProvider;\\n\\n\\tmapping(address => DataTypes.ReserveData) internal _reserves;\\n\\tmapping(address => DataTypes.UserConfigurationMap) internal _usersConfig;\\n\\n\\t// the list of the available reserves, structured as a mapping for gas savings reasons\\n\\tmapping(uint256 => address) internal _reservesList;\\n\\n\\tuint256 internal _reservesCount;\\n\\n\\tbool internal _paused;\\n\\n\\tuint256 internal _maxStableRateBorrowSizePercent;\\n\\n\\tuint256 internal _flashLoanPremiumTotal;\\n\\n\\tuint256 internal _maxNumberOfReserves;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/aave-upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title BaseImmutableAdminUpgradeabilityProxy\\n * @author Aave, inspired by the OpenZeppelin upgradeability proxy pattern\\n * @dev This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks. The admin role is stored in an immutable, which\\n * helps saving transactions costs\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n\\taddress immutable ADMIN;\\n\\n\\tconstructor(address _admin) {\\n\\t\\tADMIN = _admin;\\n\\t}\\n\\n\\tmodifier ifAdmin() {\\n\\t\\tif (msg.sender == ADMIN) {\\n\\t\\t\\t_;\\n\\t\\t} else {\\n\\t\\t\\t_fallback();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @return _address The address of the proxy admin.\\n\\t */\\n\\tfunction admin() external ifAdmin returns (address _address) {\\n\\t\\treturn ADMIN;\\n\\t}\\n\\n\\t/**\\n\\t * @return _address The address of the implementation.\\n\\t */\\n\\tfunction implementation() external ifAdmin returns (address _address) {\\n\\t\\treturn _implementation();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Upgrade the backing implementation of the proxy.\\n\\t * Only the admin can call this function.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t */\\n\\tfunction upgradeTo(address newImplementation) external ifAdmin {\\n\\t\\t_upgradeTo(newImplementation);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Upgrade the backing implementation of the proxy and call a function\\n\\t * on the new implementation.\\n\\t * This is useful to initialize the proxied contract.\\n\\t * @param newImplementation Address of the new implementation.\\n\\t * @param data Data to send as msg.data in the low level call.\\n\\t * It should include the signature and the parameters of the function to be called, as described in\\n\\t * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n\\t */\\n\\tfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n\\t\\t_upgradeTo(newImplementation);\\n\\t\\t(bool success, ) = newImplementation.delegatecall(data);\\n\\t\\trequire(success);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Only fall back when the sender is not the admin.\\n\\t */\\n\\tfunction _willFallback() internal virtual override {\\n\\t\\trequire(msg.sender != ADMIN, \\\"Cannot call fallback function from the proxy admin\\\");\\n\\t\\tsuper._willFallback();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./BaseImmutableAdminUpgradeabilityProxy.sol\\\";\\nimport \\\"../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function\\n */\\ncontract InitializableImmutableAdminUpgradeabilityProxy is\\n\\tBaseImmutableAdminUpgradeabilityProxy,\\n\\tInitializableUpgradeabilityProxy\\n{\\n\\tconstructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {}\\n\\n\\t/**\\n\\t * @dev Only fall back when the sender is not the admin.\\n\\t */\\n\\tfunction _willFallback() internal override(BaseImmutableAdminUpgradeabilityProxy, Proxy) {\\n\\t\\tBaseImmutableAdminUpgradeabilityProxy._willFallback();\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/aave-upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tuint256 private lastInitializedRevision = 0;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract is in the process of being initialized.\\n\\t */\\n\\tbool private initializing;\\n\\n\\t/**\\n\\t * @dev Indicates that the contract has been initialized.\\n\\t */\\n\\tbool private initialized;\\n\\n\\t/**\\n\\t * @dev Modifier to use in the initializer function of a contract.\\n\\t */\\n\\tmodifier initializer() {\\n\\t\\tuint256 revision = getRevision();\\n\\t\\tbool isTopLevelCall = !initializing;\\n\\n\\t\\trequire(\\n\\t\\t\\tisTopLevelCall && (revision > lastInitializedRevision || !initialized),\\n\\t\\t\\t\\\"Contract instance has already been initialized\\\"\\n\\t\\t);\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = true;\\n\\t\\t\\tinitialized = true;\\n\\t\\t\\tlastInitializedRevision = revision;\\n\\t\\t}\\n\\n\\t\\t_;\\n\\n\\t\\tif (isTopLevelCall) {\\n\\t\\t\\tinitializing = false;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the revision number of the contract\\n\\t * Needs to be defined in the inherited class as a constant.\\n\\t **/\\n\\tfunction getRevision() internal pure virtual returns (uint256);\\n\\n\\tfunction _disableInitializers() internal virtual {\\n\\t\\trequire(!initializing, \\\"Initializable: contract is initializing\\\");\\n\\t\\tif (!initialized) {\\n\\t\\t\\tinitialized = true;\\n\\t\\t}\\n\\t}\\n\\n\\t// Reserved storage space to allow for layout changes in the future.\\n\\tuint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n\\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n\\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n\\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n\\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n\\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n\\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n\\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n\\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n\\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n\\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n\\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n\\tuint256 constant MAX_VALID_LTV = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n\\tuint256 constant MAX_VALID_DECIMALS = 255;\\n\\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n\\t/**\\n\\t * @dev Sets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param ltv the new ltv\\n\\t **/\\n\\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n\\t\\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n\\t\\tself.data = (self.data & LTV_MASK) | ltv;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The loan to value\\n\\t **/\\n\\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn self.data & ~LTV_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param threshold The new liquidation threshold\\n\\t **/\\n\\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n\\t\\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation threshold\\n\\t **/\\n\\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param bonus The new liquidation bonus\\n\\t **/\\n\\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n\\t\\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation bonus\\n\\t **/\\n\\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param decimals The decimals\\n\\t **/\\n\\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n\\t\\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n\\t\\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The decimals of the asset\\n\\t **/\\n\\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param active The active state\\n\\t **/\\n\\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n\\t\\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The active state\\n\\t **/\\n\\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~ACTIVE_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param frozen The frozen state\\n\\t **/\\n\\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n\\t\\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The frozen state\\n\\t **/\\n\\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~FROZEN_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The borrowing state\\n\\t **/\\n\\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables stable rate borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & STABLE_BORROWING_MASK) |\\n\\t\\t\\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the stable rate borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The stable rate borrowing state\\n\\t **/\\n\\tfunction getStableRateBorrowingEnabled(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (bool) {\\n\\t\\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param reserveFactor The reserve factor\\n\\t **/\\n\\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\n\\t\\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n\\t\\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The reserve factor\\n\\t **/\\n\\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\t(dataLocal & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParams(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\tdataLocal & ~LTV_MASK,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParamsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tself.data & ~LTV_MASK,\\n\\t\\t\\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlagsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (bool, bool, bool, bool) {\\n\\t\\treturn (\\n\\t\\t\\t(self.data & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(self.data & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(self.data & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(self.data & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/configuration/UserConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title UserConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n\\tuint256 internal constant BORROWING_MASK = 0x5555555555555555555555555555555555555555555555555555555555555555;\\n\\n\\t/**\\n\\t * @dev Sets if the user is borrowing the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param borrowing True if the user is borrowing the reserve, false otherwise\\n\\t **/\\n\\tfunction setBorrowing(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool borrowing) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data = (self.data & ~(1 << (reserveIndex * 2))) | (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction setUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap storage self,\\n\\t\\tuint256 reserveIndex,\\n\\t\\tbool usingAsCollateral\\n\\t) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & ~(1 << (reserveIndex * 2 + 1))) |\\n\\t\\t\\t(uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateralOrBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 3 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing, false otherwise\\n\\t **/\\n\\tfunction isBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been borrowing from any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data & BORROWING_MASK != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has not been using any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data == 0;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n\\t//common errors\\n\\tstring public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n\\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n\\t//contract specific errors\\n\\tstring public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n\\tstring public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n\\tstring public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n\\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n\\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n\\tstring public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n\\tstring public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n\\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n\\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n\\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n\\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n\\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n\\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n\\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n\\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n\\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n\\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n\\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n\\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n\\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n\\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n\\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n\\tstring public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n\\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n\\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n\\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n\\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n\\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n\\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n\\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n\\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n\\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n\\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n\\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n\\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n\\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n\\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n\\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n\\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n\\tstring public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n\\tstring public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n\\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n\\tstring public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n\\tstring public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n\\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n\\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n\\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n\\tstring public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n\\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n\\tstring public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n\\tstring public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n\\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n\\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n\\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n\\tstring public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n\\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n\\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n\\tstring public constant RC_INVALID_LTV = \\\"67\\\";\\n\\tstring public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n\\tstring public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n\\tstring public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n\\tstring public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n\\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n\\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n\\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n\\tstring public constant UL_INVALID_INDEX = \\\"77\\\";\\n\\tstring public constant LP_NOT_CONTRACT = \\\"78\\\";\\n\\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n\\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n\\tenum CollateralManagerErrors {\\n\\t\\tNO_ERROR,\\n\\t\\tNO_COLLATERAL_AVAILABLE,\\n\\t\\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\\n\\t\\tCURRRENCY_NOT_BORROWED,\\n\\t\\tHEALTH_FACTOR_ABOVE_THRESHOLD,\\n\\t\\tNOT_ENOUGH_LIQUIDITY,\\n\\t\\tNO_ACTIVE_RESERVE,\\n\\t\\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n\\t\\tINVALID_EQUAL_ASSETS_TO_SWAP,\\n\\t\\tFROZEN_RESERVE\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/helpers/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title Helpers library\\n * @author Aave\\n */\\nlibrary Helpers {\\n\\t/**\\n\\t * @dev Fetches the user current stable and variable debt balances\\n\\t * @param user The user address\\n\\t * @param reserve The reserve data object\\n\\t * @return The stable and variable debt balance\\n\\t **/\\n\\tfunction getUserCurrentDebt(\\n\\t\\taddress user,\\n\\t\\tDataTypes.ReserveData storage reserve\\n\\t) internal view returns (uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n\\t\\t\\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getUserCurrentDebtMemory(\\n\\t\\taddress user,\\n\\t\\tDataTypes.ReserveData memory reserve\\n\\t) internal view returns (uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tIERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n\\t\\t\\tIERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/logic/GenericLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {IPriceOracleGetter} from \\\"../../../interfaces/IPriceOracleGetter.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title GenericLogic library\\n * @author Aave\\n * @title Implements protocol-level logic to calculate and validate the state of a user\\n */\\nlibrary GenericLogic {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\\n\\n\\tstruct balanceDecreaseAllowedLocalVars {\\n\\t\\tuint256 decimals;\\n\\t\\tuint256 liquidationThreshold;\\n\\t\\tuint256 totalCollateralInETH;\\n\\t\\tuint256 totalDebtInETH;\\n\\t\\tuint256 avgLiquidationThreshold;\\n\\t\\tuint256 amountToDecreaseInETH;\\n\\t\\tuint256 collateralBalanceAfterDecrease;\\n\\t\\tuint256 liquidationThresholdAfterDecrease;\\n\\t\\tuint256 healthFactorAfterDecrease;\\n\\t\\tbool reserveUsageAsCollateralEnabled;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if a specific balance decrease is allowed\\n\\t * (i.e. doesn't bring the user borrow position health factor under HEALTH_FACTOR_LIQUIDATION_THRESHOLD)\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param user The address of the user\\n\\t * @param amount The amount to decrease\\n\\t * @param reservesData The data of all the reserves\\n\\t * @param userConfig The user configuration\\n\\t * @param reserves The list of all the active reserves\\n\\t * @param oracle The address of the oracle contract\\n\\t * @return true if the decrease of the balance is allowed\\n\\t **/\\n\\tfunction balanceDecreaseAllowed(\\n\\t\\taddress asset,\\n\\t\\taddress user,\\n\\t\\tuint256 amount,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap calldata userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view returns (bool) {\\n\\t\\tif (!userConfig.isBorrowingAny() || !userConfig.isUsingAsCollateral(reservesData[asset].id)) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tbalanceDecreaseAllowedLocalVars memory vars;\\n\\n\\t\\t(, vars.liquidationThreshold, , vars.decimals, ) = reservesData[asset].configuration.getParams();\\n\\n\\t\\tif (vars.liquidationThreshold == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\t(vars.totalCollateralInETH, vars.totalDebtInETH, , vars.avgLiquidationThreshold, ) = calculateUserAccountData(\\n\\t\\t\\tuser,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\tif (vars.totalDebtInETH == 0) {\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\tvars.amountToDecreaseInETH = IPriceOracleGetter(oracle).getAssetPrice(asset).mul(amount).div(\\n\\t\\t\\t10 ** vars.decimals\\n\\t\\t);\\n\\n\\t\\tvars.collateralBalanceAfterDecrease = vars.totalCollateralInETH.sub(vars.amountToDecreaseInETH);\\n\\n\\t\\t//if there is a borrow, there can't be 0 collateral\\n\\t\\tif (vars.collateralBalanceAfterDecrease == 0) {\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\n\\t\\tvars.liquidationThresholdAfterDecrease = vars\\n\\t\\t\\t.totalCollateralInETH\\n\\t\\t\\t.mul(vars.avgLiquidationThreshold)\\n\\t\\t\\t.sub(vars.amountToDecreaseInETH.mul(vars.liquidationThreshold))\\n\\t\\t\\t.div(vars.collateralBalanceAfterDecrease);\\n\\n\\t\\tuint256 healthFactorAfterDecrease = calculateHealthFactorFromBalances(\\n\\t\\t\\tvars.collateralBalanceAfterDecrease,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.liquidationThresholdAfterDecrease\\n\\t\\t);\\n\\n\\t\\treturn healthFactorAfterDecrease >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD;\\n\\t}\\n\\n\\tstruct CalculateUserAccountDataVars {\\n\\t\\tuint256 reserveUnitPrice;\\n\\t\\tuint256 tokenUnit;\\n\\t\\tuint256 compoundedLiquidityBalance;\\n\\t\\tuint256 compoundedBorrowBalance;\\n\\t\\tuint256 decimals;\\n\\t\\tuint256 ltv;\\n\\t\\tuint256 liquidationThreshold;\\n\\t\\tuint256 i;\\n\\t\\tuint256 healthFactor;\\n\\t\\tuint256 totalCollateralInETH;\\n\\t\\tuint256 totalDebtInETH;\\n\\t\\tuint256 avgLtv;\\n\\t\\tuint256 avgLiquidationThreshold;\\n\\t\\tuint256 reservesLength;\\n\\t\\tbool healthFactorBelowThreshold;\\n\\t\\taddress currentReserveAddress;\\n\\t\\tbool usageAsCollateralEnabled;\\n\\t\\tbool userUsesReserveAsCollateral;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the user data across the reserves.\\n\\t * this includes the total liquidity/collateral/borrow balances in ETH,\\n\\t * the average Loan To Value, the average Liquidation Ratio, and the Health factor.\\n\\t * @param user The address of the user\\n\\t * @param reservesData Data of all the reserves\\n\\t * @param userConfig The configuration of the user\\n\\t * @param reserves The list of the available reserves\\n\\t * @param oracle The price oracle address\\n\\t * @return The total collateral and total debt of the user in ETH, the avg ltv, liquidation threshold and the HF\\n\\t **/\\n\\tfunction calculateUserAccountData(\\n\\t\\taddress user,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap memory userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tCalculateUserAccountDataVars memory vars;\\n\\n\\t\\tif (userConfig.isEmpty()) {\\n\\t\\t\\treturn (0, 0, 0, 0, type(uint256).max);\\n\\t\\t}\\n\\t\\tfor (vars.i = 0; vars.i < reservesCount; vars.i++) {\\n\\t\\t\\tif (!userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\tvars.currentReserveAddress = reserves[vars.i];\\n\\t\\t\\tDataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\\n\\n\\t\\t\\t(vars.ltv, vars.liquidationThreshold, , vars.decimals, ) = currentReserve.configuration.getParams();\\n\\n\\t\\t\\tvars.tokenUnit = 10 ** vars.decimals;\\n\\t\\t\\tvars.reserveUnitPrice = IPriceOracleGetter(oracle).getAssetPrice(vars.currentReserveAddress);\\n\\n\\t\\t\\tif (vars.liquidationThreshold != 0 && userConfig.isUsingAsCollateral(vars.i)) {\\n\\t\\t\\t\\tvars.compoundedLiquidityBalance = IERC20(currentReserve.aTokenAddress).balanceOf(user);\\n\\n\\t\\t\\t\\tuint256 liquidityBalanceETH = vars.reserveUnitPrice.mul(vars.compoundedLiquidityBalance).div(\\n\\t\\t\\t\\t\\tvars.tokenUnit\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tvars.totalCollateralInETH = vars.totalCollateralInETH.add(liquidityBalanceETH);\\n\\n\\t\\t\\t\\tvars.avgLtv = vars.avgLtv.add(liquidityBalanceETH.mul(vars.ltv));\\n\\t\\t\\t\\tvars.avgLiquidationThreshold = vars.avgLiquidationThreshold.add(\\n\\t\\t\\t\\t\\tliquidityBalanceETH.mul(vars.liquidationThreshold)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (userConfig.isBorrowing(vars.i)) {\\n\\t\\t\\t\\tvars.compoundedBorrowBalance = IERC20(currentReserve.stableDebtTokenAddress).balanceOf(user);\\n\\t\\t\\t\\tvars.compoundedBorrowBalance = vars.compoundedBorrowBalance.add(\\n\\t\\t\\t\\t\\tIERC20(currentReserve.variableDebtTokenAddress).balanceOf(user)\\n\\t\\t\\t\\t);\\n\\n\\t\\t\\t\\tvars.totalDebtInETH = vars.totalDebtInETH.add(\\n\\t\\t\\t\\t\\tvars.reserveUnitPrice.mul(vars.compoundedBorrowBalance).div(vars.tokenUnit)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvars.avgLtv = vars.totalCollateralInETH > 0 ? vars.avgLtv.div(vars.totalCollateralInETH) : 0;\\n\\t\\tvars.avgLiquidationThreshold = vars.totalCollateralInETH > 0\\n\\t\\t\\t? vars.avgLiquidationThreshold.div(vars.totalCollateralInETH)\\n\\t\\t\\t: 0;\\n\\n\\t\\tvars.healthFactor = calculateHealthFactorFromBalances(\\n\\t\\t\\tvars.totalCollateralInETH,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.avgLiquidationThreshold\\n\\t\\t);\\n\\t\\treturn (\\n\\t\\t\\tvars.totalCollateralInETH,\\n\\t\\t\\tvars.totalDebtInETH,\\n\\t\\t\\tvars.avgLtv,\\n\\t\\t\\tvars.avgLiquidationThreshold,\\n\\t\\t\\tvars.healthFactor\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the health factor from the corresponding balances\\n\\t * @param totalCollateralInETH The total collateral in ETH\\n\\t * @param totalDebtInETH The total debt in ETH\\n\\t * @param liquidationThreshold The avg liquidation threshold\\n\\t * @return The health factor calculated from the balances provided\\n\\t **/\\n\\tfunction calculateHealthFactorFromBalances(\\n\\t\\tuint256 totalCollateralInETH,\\n\\t\\tuint256 totalDebtInETH,\\n\\t\\tuint256 liquidationThreshold\\n\\t) internal pure returns (uint256) {\\n\\t\\tif (totalDebtInETH == 0) return type(uint256).max;\\n\\n\\t\\treturn (totalCollateralInETH.percentMul(liquidationThreshold)).wadDiv(totalDebtInETH);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\\n\\t * average Loan To Value\\n\\t * @param totalCollateralInETH The total collateral in ETH\\n\\t * @param totalDebtInETH The total borrow balance\\n\\t * @param ltv The average loan to value\\n\\t * @return the amount available to borrow in ETH for the user\\n\\t **/\\n\\n\\tfunction calculateAvailableBorrowsETH(\\n\\t\\tuint256 totalCollateralInETH,\\n\\t\\tuint256 totalDebtInETH,\\n\\t\\tuint256 ltv\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 availableBorrowsETH = totalCollateralInETH.percentMul(ltv);\\n\\n\\t\\tif (availableBorrowsETH < totalDebtInETH) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tavailableBorrowsETH = availableBorrowsETH.sub(totalDebtInETH);\\n\\t\\treturn availableBorrowsETH;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/logic/ReserveLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IAToken} from \\\"../../../interfaces/IAToken.sol\\\";\\nimport {IStableDebtToken} from \\\"../../../interfaces/IStableDebtToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../../../interfaces/IVariableDebtToken.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {MathUtils} from \\\"../math/MathUtils.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements the logic to update the reserves state\\n */\\nlibrary ReserveLogic {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n\\t/**\\n\\t * @dev Returns the ongoing normalized income for the reserve\\n\\t * A value of 1e27 means there is no income. As time passes, the income is accrued\\n\\t * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n\\t * @param reserve The reserve object\\n\\t * @return the normalized income. expressed in ray\\n\\t **/\\n\\tfunction getNormalizedIncome(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n\\t\\tuint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tif (timestamp == uint40(block.timestamp)) {\\n\\t\\t\\t//if the index was updated in the same block, no need to perform any calculation\\n\\t\\t\\treturn reserve.liquidityIndex;\\n\\t\\t}\\n\\n\\t\\tuint256 cumulated = MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\n\\t\\t\\treserve.liquidityIndex\\n\\t\\t);\\n\\n\\t\\treturn cumulated;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the ongoing normalized variable debt for the reserve\\n\\t * A value of 1e27 means there is no debt. As time passes, the income is accrued\\n\\t * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\n\\t * @param reserve The reserve object\\n\\t * @return The normalized variable debt. expressed in ray\\n\\t **/\\n\\tfunction getNormalizedDebt(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\n\\t\\tuint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tif (timestamp == uint40(block.timestamp)) {\\n\\t\\t\\t//if the index was updated in the same block, no need to perform any calculation\\n\\t\\t\\treturn reserve.variableBorrowIndex;\\n\\t\\t}\\n\\n\\t\\tuint256 cumulated = MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\n\\t\\treturn cumulated;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the liquidity cumulative index and the variable borrow index.\\n\\t * @param reserve the reserve object\\n\\t **/\\n\\tfunction updateState(DataTypes.ReserveData storage reserve) internal {\\n\\t\\tuint256 scaledVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\\n\\t\\tuint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\n\\t\\tuint256 previousLiquidityIndex = reserve.liquidityIndex;\\n\\t\\tuint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\n\\n\\t\\t(uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) = _updateIndexes(\\n\\t\\t\\treserve,\\n\\t\\t\\tscaledVariableDebt,\\n\\t\\t\\tpreviousLiquidityIndex,\\n\\t\\t\\tpreviousVariableBorrowIndex,\\n\\t\\t\\tlastUpdatedTimestamp\\n\\t\\t);\\n\\n\\t\\t_mintToTreasury(\\n\\t\\t\\treserve,\\n\\t\\t\\tscaledVariableDebt,\\n\\t\\t\\tpreviousVariableBorrowIndex,\\n\\t\\t\\tnewLiquidityIndex,\\n\\t\\t\\tnewVariableBorrowIndex,\\n\\t\\t\\tlastUpdatedTimestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income. Used for example to accumulate\\n\\t * the flashloan fee to the reserve, and spread it between all the depositors\\n\\t * @param reserve The reserve object\\n\\t * @param totalLiquidity The total liquidity available in the reserve\\n\\t * @param amount The amount to accomulate\\n\\t **/\\n\\tfunction cumulateToLiquidityIndex(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 totalLiquidity,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\tuint256 amountToLiquidityRatio = amount.wadToRay().rayDiv(totalLiquidity.wadToRay());\\n\\n\\t\\tuint256 result = amountToLiquidityRatio.add(WadRayMath.ray());\\n\\n\\t\\tresult = result.rayMul(reserve.liquidityIndex);\\n\\t\\trequire(result <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n\\t\\treserve.liquidityIndex = uint128(result);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes a reserve\\n\\t * @param reserve The reserve object\\n\\t * @param aTokenAddress The address of the overlying atoken contract\\n\\t * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n\\t **/\\n\\tfunction init(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtTokenAddress,\\n\\t\\taddress variableDebtTokenAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external {\\n\\t\\trequire(reserve.aTokenAddress == address(0), Errors.RL_RESERVE_ALREADY_INITIALIZED);\\n\\n\\t\\treserve.liquidityIndex = uint128(WadRayMath.ray());\\n\\t\\treserve.variableBorrowIndex = uint128(WadRayMath.ray());\\n\\t\\treserve.aTokenAddress = aTokenAddress;\\n\\t\\treserve.stableDebtTokenAddress = stableDebtTokenAddress;\\n\\t\\treserve.variableDebtTokenAddress = variableDebtTokenAddress;\\n\\t\\treserve.interestRateStrategyAddress = interestRateStrategyAddress;\\n\\t}\\n\\n\\tstruct UpdateInterestRatesLocalVars {\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\tuint256 availableLiquidity;\\n\\t\\tuint256 totalStableDebt;\\n\\t\\tuint256 newLiquidityRate;\\n\\t\\tuint256 newStableRate;\\n\\t\\tuint256 newVariableRate;\\n\\t\\tuint256 avgStableRate;\\n\\t\\tuint256 totalVariableDebt;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\n\\t * @param reserve The address of the reserve to be updated\\n\\t * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\n\\t * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\n\\t **/\\n\\tfunction updateInterestRates(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\taddress aTokenAddress,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken\\n\\t) internal {\\n\\t\\tUpdateInterestRatesLocalVars memory vars;\\n\\n\\t\\tvars.stableDebtTokenAddress = reserve.stableDebtTokenAddress;\\n\\n\\t\\t(vars.totalStableDebt, vars.avgStableRate) = IStableDebtToken(vars.stableDebtTokenAddress)\\n\\t\\t\\t.getTotalSupplyAndAvgRate();\\n\\n\\t\\t//calculates the total variable debt locally using the scaled total supply instead\\n\\t\\t//of totalSupply(), as it's noticeably cheaper. Also, the index has been\\n\\t\\t//updated by the previous updateState() call\\n\\t\\tvars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply().rayMul(\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\n\\t\\t(vars.newLiquidityRate, vars.newStableRate, vars.newVariableRate) = IReserveInterestRateStrategy(\\n\\t\\t\\treserve.interestRateStrategyAddress\\n\\t\\t).calculateInterestRates(\\n\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\taTokenAddress,\\n\\t\\t\\t\\tliquidityAdded,\\n\\t\\t\\t\\tliquidityTaken,\\n\\t\\t\\t\\tvars.totalStableDebt,\\n\\t\\t\\t\\tvars.totalVariableDebt,\\n\\t\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\t\\treserve.configuration.getReserveFactor()\\n\\t\\t\\t);\\n\\t\\trequire(vars.newLiquidityRate <= type(uint128).max, Errors.RL_LIQUIDITY_RATE_OVERFLOW);\\n\\t\\trequire(vars.newStableRate <= type(uint128).max, Errors.RL_STABLE_BORROW_RATE_OVERFLOW);\\n\\t\\trequire(vars.newVariableRate <= type(uint128).max, Errors.RL_VARIABLE_BORROW_RATE_OVERFLOW);\\n\\n\\t\\treserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\n\\t\\treserve.currentStableBorrowRate = uint128(vars.newStableRate);\\n\\t\\treserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\n\\n\\t\\temit ReserveDataUpdated(\\n\\t\\t\\treserveAddress,\\n\\t\\t\\tvars.newLiquidityRate,\\n\\t\\t\\tvars.newStableRate,\\n\\t\\t\\tvars.newVariableRate,\\n\\t\\t\\treserve.liquidityIndex,\\n\\t\\t\\treserve.variableBorrowIndex\\n\\t\\t);\\n\\t}\\n\\n\\tstruct MintToTreasuryLocalVars {\\n\\t\\tuint256 currentStableDebt;\\n\\t\\tuint256 principalStableDebt;\\n\\t\\tuint256 previousStableDebt;\\n\\t\\tuint256 currentVariableDebt;\\n\\t\\tuint256 previousVariableDebt;\\n\\t\\tuint256 avgStableRate;\\n\\t\\tuint256 cumulatedStableInterest;\\n\\t\\tuint256 totalDebtAccrued;\\n\\t\\tuint256 amountToMint;\\n\\t\\tuint256 reserveFactor;\\n\\t\\tuint40 stableSupplyUpdatedTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor for the\\n\\t * specific asset.\\n\\t * @param reserve The reserve reserve to be updated\\n\\t * @param scaledVariableDebt The current scaled total variable debt\\n\\t * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\n\\t * @param newLiquidityIndex The new liquidity index\\n\\t * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\n\\t **/\\n\\tfunction _mintToTreasury(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 scaledVariableDebt,\\n\\t\\tuint256 previousVariableBorrowIndex,\\n\\t\\tuint256 newLiquidityIndex,\\n\\t\\tuint256 newVariableBorrowIndex,\\n\\t\\tuint40 timestamp\\n\\t) internal {\\n\\t\\tMintToTreasuryLocalVars memory vars;\\n\\n\\t\\tvars.reserveFactor = reserve.configuration.getReserveFactor();\\n\\n\\t\\tif (vars.reserveFactor == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t//fetching the principal, total stable debt and the avg stable rate\\n\\t\\t(\\n\\t\\t\\tvars.principalStableDebt,\\n\\t\\t\\tvars.currentStableDebt,\\n\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\tvars.stableSupplyUpdatedTimestamp\\n\\t\\t) = IStableDebtToken(reserve.stableDebtTokenAddress).getSupplyData();\\n\\n\\t\\t//calculate the last principal variable debt\\n\\t\\tvars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\n\\n\\t\\t//calculate the new total supply after accumulation of the index\\n\\t\\tvars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\n\\n\\t\\t//calculate the stable debt until the last timestamp update\\n\\t\\tvars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\\n\\t\\t\\tvars.avgStableRate,\\n\\t\\t\\tvars.stableSupplyUpdatedTimestamp,\\n\\t\\t\\ttimestamp\\n\\t\\t);\\n\\n\\t\\tvars.previousStableDebt = vars.principalStableDebt.rayMul(vars.cumulatedStableInterest);\\n\\n\\t\\t//debt accrued is the sum of the current debt minus the sum of the debt at the last update\\n\\t\\tvars.totalDebtAccrued = vars.currentVariableDebt.add(vars.currentStableDebt).sub(vars.previousVariableDebt).sub(\\n\\t\\t\\tvars.previousStableDebt\\n\\t\\t);\\n\\n\\t\\tvars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\n\\n\\t\\tif (vars.amountToMint != 0) {\\n\\t\\t\\tIAToken(reserve.aTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates the reserve indexes and the timestamp of the update\\n\\t * @param reserve The reserve reserve to be updated\\n\\t * @param scaledVariableDebt The scaled variable debt\\n\\t * @param liquidityIndex The last stored liquidity index\\n\\t * @param variableBorrowIndex The last stored variable borrow index\\n\\t **/\\n\\tfunction _updateIndexes(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 scaledVariableDebt,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex,\\n\\t\\tuint40 timestamp\\n\\t) internal returns (uint256, uint256) {\\n\\t\\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\n\\t\\tuint256 newLiquidityIndex = liquidityIndex;\\n\\t\\tuint256 newVariableBorrowIndex = variableBorrowIndex;\\n\\n\\t\\t//only cumulating if there is any income being produced\\n\\t\\tif (currentLiquidityRate > 0) {\\n\\t\\t\\tuint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\n\\t\\t\\tnewLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\n\\t\\t\\trequire(newLiquidityIndex <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\n\\n\\t\\t\\treserve.liquidityIndex = uint128(newLiquidityIndex);\\n\\n\\t\\t\\t//as the liquidity rate might come only from stable rate loans, we need to ensure\\n\\t\\t\\t//that there is actual variable debt before accumulating\\n\\t\\t\\tif (scaledVariableDebt != 0) {\\n\\t\\t\\t\\tuint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(\\n\\t\\t\\t\\t\\treserve.currentVariableBorrowRate,\\n\\t\\t\\t\\t\\ttimestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tnewVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\n\\t\\t\\t\\trequire(newVariableBorrowIndex <= type(uint128).max, Errors.RL_VARIABLE_BORROW_INDEX_OVERFLOW);\\n\\t\\t\\t\\treserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\treserve.lastUpdateTimestamp = uint40(block.timestamp);\\n\\t\\treturn (newLiquidityIndex, newVariableBorrowIndex);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/logic/ValidationLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ReserveLogic} from \\\"./ReserveLogic.sol\\\";\\nimport {GenericLogic} from \\\"./GenericLogic.sol\\\";\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"../configuration/UserConfiguration.sol\\\";\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {Helpers} from \\\"../helpers/Helpers.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveLogic library\\n * @author Aave\\n * @notice Implements functions to validate the different actions of the protocol\\n */\\nlibrary ValidationLogic {\\n\\tusing ReserveLogic for DataTypes.ReserveData;\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tuint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 4000;\\n\\tuint256 public constant REBALANCE_UP_USAGE_RATIO_THRESHOLD = 0.95 * 1e27; //usage ratio of 95%\\n\\n\\t/**\\n\\t * @dev Validates a deposit action\\n\\t * @param reserve The reserve object on which the user is depositing\\n\\t * @param amount The amount to be deposited\\n\\t */\\n\\tfunction validateDeposit(DataTypes.ReserveData storage reserve, uint256 amount) external view {\\n\\t\\t(bool isActive, bool isFrozen, , ) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a withdraw action\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param amount The amount to be withdrawn\\n\\t * @param userBalance The balance of the user\\n\\t * @param reservesData The reserves state\\n\\t * @param userConfig The user configuration\\n\\t * @param reserves The addresses of the reserves\\n\\t * @param reservesCount The number of reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateWithdraw(\\n\\t\\taddress reserveAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 userBalance,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\t\\trequire(amount <= userBalance, Errors.VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE);\\n\\n\\t\\t(bool isActive, , , ) = reservesData[reserveAddress].configuration.getFlags();\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\trequire(\\n\\t\\t\\tGenericLogic.balanceDecreaseAllowed(\\n\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\tamount,\\n\\t\\t\\t\\treservesData,\\n\\t\\t\\t\\tuserConfig,\\n\\t\\t\\t\\treserves,\\n\\t\\t\\t\\treservesCount,\\n\\t\\t\\t\\toracle\\n\\t\\t\\t),\\n\\t\\t\\tErrors.VL_TRANSFER_NOT_ALLOWED\\n\\t\\t);\\n\\t}\\n\\n\\tstruct ValidateBorrowLocalVars {\\n\\t\\tuint256 currentLtv;\\n\\t\\tuint256 currentLiquidationThreshold;\\n\\t\\tuint256 amountOfCollateralNeededETH;\\n\\t\\tuint256 userCollateralBalanceETH;\\n\\t\\tuint256 userBorrowBalanceETH;\\n\\t\\tuint256 availableLiquidity;\\n\\t\\tuint256 healthFactor;\\n\\t\\tbool isActive;\\n\\t\\tbool isFrozen;\\n\\t\\tbool borrowingEnabled;\\n\\t\\tbool stableRateBorrowingEnabled;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a borrow action\\n\\t * @param asset The address of the asset to borrow\\n\\t * @param reserve The reserve state from which the user is borrowing\\n\\t * @param userAddress The address of the user\\n\\t * @param amount The amount to be borrowed\\n\\t * @param amountInETH The amount to be borrowed, in ETH\\n\\t * @param interestRateMode The interest rate mode at which the user is borrowing\\n\\t * @param maxStableLoanPercent The max amount of the liquidity that can be borrowed at stable rate, in percentage\\n\\t * @param reservesData The state of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\n\\tfunction validateBorrow(\\n\\t\\taddress asset,\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress userAddress,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 amountInETH,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint256 maxStableLoanPercent,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\tValidateBorrowLocalVars memory vars;\\n\\n\\t\\t(vars.isActive, vars.isFrozen, vars.borrowingEnabled, vars.stableRateBorrowingEnabled) = reserve\\n\\t\\t\\t.configuration\\n\\t\\t\\t.getFlags();\\n\\n\\t\\trequire(vars.isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!vars.isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\t\\trequire(amount != 0, Errors.VL_INVALID_AMOUNT);\\n\\n\\t\\trequire(vars.borrowingEnabled, Errors.VL_BORROWING_NOT_ENABLED);\\n\\n\\t\\t//validate interest rate mode\\n\\t\\trequire(\\n\\t\\t\\tuint256(DataTypes.InterestRateMode.VARIABLE) == interestRateMode ||\\n\\t\\t\\t\\tuint256(DataTypes.InterestRateMode.STABLE) == interestRateMode,\\n\\t\\t\\tErrors.VL_INVALID_INTEREST_RATE_MODE_SELECTED\\n\\t\\t);\\n\\n\\t\\t(\\n\\t\\t\\tvars.userCollateralBalanceETH,\\n\\t\\t\\tvars.userBorrowBalanceETH,\\n\\t\\t\\tvars.currentLtv,\\n\\t\\t\\tvars.currentLiquidationThreshold,\\n\\t\\t\\tvars.healthFactor\\n\\t\\t) = GenericLogic.calculateUserAccountData(\\n\\t\\t\\tuserAddress,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\trequire(vars.userCollateralBalanceETH > 0, Errors.VL_COLLATERAL_BALANCE_IS_0);\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.healthFactor > GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\n\\t\\t\\tErrors.VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD\\n\\t\\t);\\n\\n\\t\\t//add the current already borrowed amount to the amount requested to calculate the total collateral needed.\\n\\t\\tvars.amountOfCollateralNeededETH = vars.userBorrowBalanceETH.add(amountInETH).percentDiv(vars.currentLtv); //LTV is calculated in percentage\\n\\n\\t\\trequire(\\n\\t\\t\\tvars.amountOfCollateralNeededETH <= vars.userCollateralBalanceETH,\\n\\t\\t\\tErrors.VL_COLLATERAL_CANNOT_COVER_NEW_BORROW\\n\\t\\t);\\n\\n\\t\\t/**\\n\\t\\t * Following conditions need to be met if the user is borrowing at a stable rate:\\n\\t\\t * 1. Reserve must be enabled for stable rate borrowing\\n\\t\\t * 2. Users cannot borrow from the reserve if their collateral is (mostly) the same currency\\n\\t\\t *    they are borrowing, to prevent abuses.\\n\\t\\t * 3. Users will be able to borrow only a portion of the total available liquidity\\n\\t\\t **/\\n\\n\\t\\tif (interestRateMode == uint256(DataTypes.InterestRateMode.STABLE)) {\\n\\t\\t\\t//check if the borrow mode is stable and if stable rate borrowing is enabled on this reserve\\n\\n\\t\\t\\trequire(vars.stableRateBorrowingEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!userConfig.isUsingAsCollateral(reserve.id) ||\\n\\t\\t\\t\\t\\treserve.configuration.getLtv() == 0 ||\\n\\t\\t\\t\\t\\tamount > IERC20(reserve.aTokenAddress).balanceOf(userAddress),\\n\\t\\t\\t\\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n\\t\\t\\t);\\n\\n\\t\\t\\tvars.availableLiquidity = IERC20(asset).balanceOf(reserve.aTokenAddress);\\n\\n\\t\\t\\t//calculate the max available loan size in stable rate mode as a percentage of the\\n\\t\\t\\t//available liquidity\\n\\t\\t\\tuint256 maxLoanSizeStable = vars.availableLiquidity.percentMul(maxStableLoanPercent);\\n\\n\\t\\t\\trequire(amount <= maxLoanSizeStable, Errors.VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a repay action\\n\\t * @param reserve The reserve state from which the user is repaying\\n\\t * @param amountSent The amount sent for the repayment. Can be an actual value or uint256(-1)\\n\\t * @param onBehalfOf The address of the user msg.sender is repaying for\\n\\t * @param stableDebt The borrow balance of the user\\n\\t * @param variableDebt The borrow balance of the user\\n\\t */\\n\\tfunction validateRepay(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tuint256 amountSent,\\n\\t\\tDataTypes.InterestRateMode rateMode,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint256 stableDebt,\\n\\t\\tuint256 variableDebt\\n\\t) external view {\\n\\t\\tbool isActive = reserve.configuration.getActive();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\trequire(amountSent > 0, Errors.VL_INVALID_AMOUNT);\\n\\n\\t\\trequire(\\n\\t\\t\\t(stableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\\n\\t\\t\\t\\t(variableDebt > 0 && DataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\\n\\t\\t\\tErrors.VL_NO_DEBT_OF_SELECTED_TYPE\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\tamountSent != type(uint256).max || msg.sender == onBehalfOf,\\n\\t\\t\\tErrors.VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a swap of borrow rate mode.\\n\\t * @param reserve The reserve state on which the user is swapping the rate\\n\\t * @param userConfig The user reserves configuration\\n\\t * @param stableDebt The stable debt of the user\\n\\t * @param variableDebt The variable debt of the user\\n\\t * @param currentRateMode The rate mode of the borrow\\n\\t */\\n\\tfunction validateSwapRateMode(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tuint256 stableDebt,\\n\\t\\tuint256 variableDebt,\\n\\t\\tDataTypes.InterestRateMode currentRateMode\\n\\t) external view {\\n\\t\\t(bool isActive, bool isFrozen, , bool stableRateEnabled) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\trequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\\n\\n\\t\\tif (currentRateMode == DataTypes.InterestRateMode.STABLE) {\\n\\t\\t\\trequire(stableDebt > 0, Errors.VL_NO_STABLE_RATE_LOAN_IN_RESERVE);\\n\\t\\t} else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\\n\\t\\t\\trequire(variableDebt > 0, Errors.VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE);\\n\\t\\t\\t/**\\n\\t\\t\\t * user wants to swap to stable, before swapping we need to ensure that\\n\\t\\t\\t * 1. stable borrow rate is enabled on the reserve\\n\\t\\t\\t * 2. user is not trying to abuse the reserve by depositing\\n\\t\\t\\t * more collateral than he is borrowing, artificially lowering\\n\\t\\t\\t * the interest rate, borrowing at variable, and switching to stable\\n\\t\\t\\t **/\\n\\t\\t\\trequire(stableRateEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\\n\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!userConfig.isUsingAsCollateral(reserve.id) ||\\n\\t\\t\\t\\t\\treserve.configuration.getLtv() == 0 ||\\n\\t\\t\\t\\t\\tstableDebt.add(variableDebt) > IERC20(reserve.aTokenAddress).balanceOf(msg.sender),\\n\\t\\t\\t\\tErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\trevert(Errors.VL_INVALID_INTEREST_RATE_MODE_SELECTED);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a stable borrow rate rebalance action\\n\\t * @param reserve The reserve state on which the user is getting rebalanced\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param stableDebtToken The stable debt token instance\\n\\t * @param variableDebtToken The variable debt token instance\\n\\t * @param aTokenAddress The address of the aToken contract\\n\\t */\\n\\tfunction validateRebalanceStableBorrowRate(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\tIERC20 stableDebtToken,\\n\\t\\tIERC20 variableDebtToken,\\n\\t\\taddress aTokenAddress\\n\\t) external view {\\n\\t\\t(bool isActive, , , ) = reserve.configuration.getFlags();\\n\\n\\t\\trequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\\n\\n\\t\\t//if the usage ratio is below 95%, no rebalances are needed\\n\\t\\tuint256 totalDebt = stableDebtToken.totalSupply().add(variableDebtToken.totalSupply()).wadToRay();\\n\\t\\tuint256 availableLiquidity = IERC20(reserveAddress).balanceOf(aTokenAddress).wadToRay();\\n\\t\\tuint256 usageRatio = totalDebt == 0 ? 0 : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\\n\\n\\t\\t//if the liquidity rate is below REBALANCE_UP_THRESHOLD of the max variable APR at 95% usage,\\n\\t\\t//then we allow rebalancing of the stable rate positions.\\n\\n\\t\\tuint256 currentLiquidityRate = reserve.currentLiquidityRate;\\n\\t\\tuint256 maxVariableBorrowRate = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress)\\n\\t\\t\\t.getMaxVariableBorrowRate();\\n\\n\\t\\trequire(\\n\\t\\t\\tusageRatio >= REBALANCE_UP_USAGE_RATIO_THRESHOLD &&\\n\\t\\t\\t\\tcurrentLiquidityRate <= maxVariableBorrowRate.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\\n\\t\\t\\tErrors.LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates the action of setting an asset as collateral\\n\\t * @param reserve The state of the reserve that the user is enabling or disabling as collateral\\n\\t * @param reserveAddress The address of the reserve\\n\\t * @param reservesData The data of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateSetUseReserveAsCollateral(\\n\\t\\tDataTypes.ReserveData storage reserve,\\n\\t\\taddress reserveAddress,\\n\\t\\tbool useAsCollateral,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) external view {\\n\\t\\tuint256 underlyingBalance = IERC20(reserve.aTokenAddress).balanceOf(msg.sender);\\n\\n\\t\\trequire(underlyingBalance > 0, Errors.VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0);\\n\\n\\t\\trequire(\\n\\t\\t\\tuseAsCollateral ||\\n\\t\\t\\t\\tGenericLogic.balanceDecreaseAllowed(\\n\\t\\t\\t\\t\\treserveAddress,\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\tunderlyingBalance,\\n\\t\\t\\t\\t\\treservesData,\\n\\t\\t\\t\\t\\tuserConfig,\\n\\t\\t\\t\\t\\treserves,\\n\\t\\t\\t\\t\\treservesCount,\\n\\t\\t\\t\\t\\toracle\\n\\t\\t\\t\\t),\\n\\t\\t\\tErrors.VL_DEPOSIT_ALREADY_IN_USE\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates a flashloan action\\n\\t * @param assets The assets being flashborrowed\\n\\t * @param amounts The amounts for each asset being borrowed\\n\\t **/\\n\\tfunction validateFlashloan(address[] memory assets, uint256[] memory amounts) internal pure {\\n\\t\\trequire(assets.length == amounts.length, Errors.VL_INCONSISTENT_FLASHLOAN_PARAMS);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates the liquidation action\\n\\t * @param collateralReserve The reserve data of the collateral\\n\\t * @param principalReserve The reserve data of the principal\\n\\t * @param userConfig The user configuration\\n\\t * @param userHealthFactor The user's health factor\\n\\t * @param userStableDebt Total stable debt balance of the user\\n\\t * @param userVariableDebt Total variable debt balance of the user\\n\\t **/\\n\\tfunction validateLiquidationCall(\\n\\t\\tDataTypes.ReserveData storage collateralReserve,\\n\\t\\tDataTypes.ReserveData storage principalReserve,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tuint256 userHealthFactor,\\n\\t\\tuint256 userStableDebt,\\n\\t\\tuint256 userVariableDebt\\n\\t) internal view returns (uint256, string memory) {\\n\\t\\tif (!collateralReserve.configuration.getActive() || !principalReserve.configuration.getActive()) {\\n\\t\\t\\treturn (uint256(Errors.CollateralManagerErrors.NO_ACTIVE_RESERVE), Errors.VL_NO_ACTIVE_RESERVE);\\n\\t\\t}\\n\\n\\t\\tif (userHealthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.HEALTH_FACTOR_ABOVE_THRESHOLD),\\n\\t\\t\\t\\tErrors.LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tbool isCollateralEnabled = collateralReserve.configuration.getLiquidationThreshold() > 0 &&\\n\\t\\t\\tuserConfig.isUsingAsCollateral(collateralReserve.id);\\n\\n\\t\\t//if collateral isn't enabled as collateral by user, it cannot be liquidated\\n\\t\\tif (!isCollateralEnabled) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.COLLATERAL_CANNOT_BE_LIQUIDATED),\\n\\t\\t\\t\\tErrors.LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tif (userStableDebt == 0 && userVariableDebt == 0) {\\n\\t\\t\\treturn (\\n\\t\\t\\t\\tuint256(Errors.CollateralManagerErrors.CURRRENCY_NOT_BORROWED),\\n\\t\\t\\t\\tErrors.LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\treturn (uint256(Errors.CollateralManagerErrors.NO_ERROR), Errors.LPCM_NO_ERRORS);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Validates an aToken transfer\\n\\t * @param from The user from which the aTokens are being transferred\\n\\t * @param reservesData The state of all the reserves\\n\\t * @param userConfig The state of the user for the specific reserve\\n\\t * @param reserves The addresses of all the active reserves\\n\\t * @param oracle The price oracle\\n\\t */\\n\\tfunction validateTransfer(\\n\\t\\taddress from,\\n\\t\\tmapping(address => DataTypes.ReserveData) storage reservesData,\\n\\t\\tDataTypes.UserConfigurationMap storage userConfig,\\n\\t\\tmapping(uint256 => address) storage reserves,\\n\\t\\tuint256 reservesCount,\\n\\t\\taddress oracle\\n\\t) internal view {\\n\\t\\t(, , , , uint256 healthFactor) = GenericLogic.calculateUserAccountData(\\n\\t\\t\\tfrom,\\n\\t\\t\\treservesData,\\n\\t\\t\\tuserConfig,\\n\\t\\t\\treserves,\\n\\t\\t\\treservesCount,\\n\\t\\t\\toracle\\n\\t\\t);\\n\\n\\t\\trequire(healthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD, Errors.VL_TRANSFER_NOT_ALLOWED);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n\\tusing SafeMath for uint256;\\n\\tusing WadRayMath for uint256;\\n\\n\\t/// @dev Ignoring leap years\\n\\tuint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate linearly accumulated during the timeDelta, in ray\\n\\t **/\\n\\n\\tfunction calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\treturn (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\n\\t}\\n\\n\\t/**\\n\\t * @dev Function to calculate the interest using a compounded interest rate formula\\n\\t * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n\\t *\\n\\t *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n\\t *\\n\\t * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n\\t * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n\\t *\\n\\t * @param rate The interest rate, in ray\\n\\t * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n\\t * @return The interest rate compounded during the timeDelta, in ray\\n\\t **/\\n\\tfunction calculateCompoundedInterest(\\n\\t\\tuint256 rate,\\n\\t\\tuint40 lastUpdateTimestamp,\\n\\t\\tuint256 currentTimestamp\\n\\t) internal pure returns (uint256) {\\n\\t\\t//solium-disable-next-line\\n\\t\\tuint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\n\\n\\t\\tif (exp == 0) {\\n\\t\\t\\treturn WadRayMath.ray();\\n\\t\\t}\\n\\n\\t\\tuint256 expMinusOne = exp - 1;\\n\\n\\t\\tuint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n\\t\\tuint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n\\t\\tuint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n\\t\\tuint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n\\t\\tuint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\n\\t\\tuint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\n\\n\\t\\treturn WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n\\t * @param rate The interest rate (in ray)\\n\\t * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n\\t **/\\n\\tfunction calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n\\t\\treturn calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n\\tuint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n\\tuint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n\\t/**\\n\\t * @dev Executes a percentage multiplication\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The percentage of value\\n\\t **/\\n\\tfunction percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\tif (value == 0 || percentage == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes a percentage division\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The value divided the percentage\\n\\t **/\\n\\tfunction percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\trequire(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfPercentage = percentage / 2;\\n\\n\\t\\trequire(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n\\tuint256 internal constant WAD = 1e18;\\n\\tuint256 internal constant halfWAD = WAD / 2;\\n\\n\\tuint256 internal constant RAY = 1e27;\\n\\tuint256 internal constant halfRAY = RAY / 2;\\n\\n\\tuint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n\\t/**\\n\\t * @return One ray, 1e27\\n\\t **/\\n\\tfunction ray() internal pure returns (uint256) {\\n\\t\\treturn RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return One wad, 1e18\\n\\t **/\\n\\n\\tfunction wad() internal pure returns (uint256) {\\n\\t\\treturn WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e27/2\\n\\t **/\\n\\tfunction halfRay() internal pure returns (uint256) {\\n\\t\\treturn halfRAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e18/2\\n\\t **/\\n\\tfunction halfWad() internal pure returns (uint256) {\\n\\t\\treturn halfWAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a*b, in wad\\n\\t **/\\n\\tfunction wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfWAD) / WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a/b, in wad\\n\\t **/\\n\\tfunction wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * WAD + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a*b, in ray\\n\\t **/\\n\\tfunction rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfRAY) / RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a/b, in ray\\n\\t **/\\n\\tfunction rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * RAY + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Casts ray down to wad\\n\\t * @param a Ray\\n\\t * @return a casted to wad, rounded half up to the nearest wad\\n\\t **/\\n\\tfunction rayToWad(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\t\\tuint256 result = halfRatio + a;\\n\\t\\trequire(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n\\t\\treturn result / WAD_RAY_RATIO;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts wad up to ray\\n\\t * @param a Wad\\n\\t * @return a converted in ray\\n\\t **/\\n\\tfunction wadToRay(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 result = a * WAD_RAY_RATIO;\\n\\t\\trequire(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\t\\treturn result;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/tokenization/AToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {IAToken} from \\\"../../interfaces/IAToken.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {VersionedInitializable} from \\\"../libraries/aave-upgradeability/VersionedInitializable.sol\\\";\\nimport {IncentivizedERC20} from \\\"./IncentivizedERC20.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../interfaces/IAaveIncentivesController.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IMiddleFeeDistribution} from \\\"../../interfaces/IMiddleFeeDistribution.sol\\\";\\n\\n/**\\n * @title Aave ERC20 AToken\\n * @dev Implementation of the interest bearing token for the Aave protocol\\n * @author Aave\\n */\\ncontract AToken is VersionedInitializable, IncentivizedERC20(\\\"ATOKEN_IMPL\\\", \\\"ATOKEN_IMPL\\\", 0), IAToken {\\n\\tusing WadRayMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for uint256;\\n\\n\\tbytes public constant EIP712_REVISION = bytes(\\\"1\\\");\\n\\tbytes32 internal constant EIP712_DOMAIN =\\n\\t\\tkeccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\tbytes32 public constant PERMIT_TYPEHASH =\\n\\t\\tkeccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n\\tuint256 public constant ATOKEN_REVISION = 0x1;\\n\\n\\t/// @dev owner => next valid nonce to submit with permit()\\n\\tmapping(address => uint256) public _nonces;\\n\\n\\tbytes32 public DOMAIN_SEPARATOR;\\n\\n\\taddress internal _treasury;\\n\\tIAaveIncentivesController internal _incentivesController;\\n\\n\\tmodifier onlyLendingPool() {\\n\\t\\trequire(_msgSender() == address(_pool), Errors.CT_CALLER_MUST_BE_LENDING_POOL);\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction getRevision() internal pure virtual override returns (uint256) {\\n\\t\\treturn ATOKEN_REVISION;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external override initializer {\\n\\t\\tuint256 chainId;\\n\\n\\t\\t//solium-disable-next-line\\n\\t\\tassembly {\\n\\t\\t\\tchainId := chainid()\\n\\t\\t}\\n\\n\\t\\tDOMAIN_SEPARATOR = keccak256(\\n\\t\\t\\tabi.encode(EIP712_DOMAIN, keccak256(bytes(aTokenName)), keccak256(EIP712_REVISION), chainId, address(this))\\n\\t\\t);\\n\\n\\t\\t_setName(aTokenName);\\n\\t\\t_setSymbol(aTokenSymbol);\\n\\t\\t_setDecimals(aTokenDecimals);\\n\\n\\t\\t_pool = pool;\\n\\t\\t_treasury = treasury;\\n\\t\\t_underlyingAsset = underlyingAsset;\\n\\t\\t_incentivesController = incentivesController;\\n\\n\\t\\temit Initialized(\\n\\t\\t\\tunderlyingAsset,\\n\\t\\t\\taddress(pool),\\n\\t\\t\\ttreasury,\\n\\t\\t\\taddress(incentivesController),\\n\\t\\t\\taTokenDecimals,\\n\\t\\t\\taTokenName,\\n\\t\\t\\taTokenSymbol,\\n\\t\\t\\tparams\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * - Only callable by the LendingPool, as extra state updates there need to be managed\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(\\n\\t\\taddress user,\\n\\t\\taddress receiverOfUnderlying,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 index\\n\\t) external override onlyLendingPool {\\n\\t\\tuint256 amountScaled = amount.rayDiv(index);\\n\\t\\trequire(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\\n\\t\\t_burn(user, amountScaled);\\n\\n\\t\\tIERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);\\n\\n\\t\\temit Transfer(user, address(0), amount);\\n\\t\\temit Burn(user, receiverOfUnderlying, amount, index);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * - Only callable by the LendingPool, as extra state updates there need to be managed\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external override onlyLendingPool returns (bool) {\\n\\t\\tuint256 previousBalance = super.balanceOf(user);\\n\\n\\t\\tuint256 amountScaled = amount.rayDiv(index);\\n\\t\\trequire(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\\n\\t\\t_mint(user, amountScaled);\\n\\n\\t\\temit Transfer(address(0), user, amount);\\n\\t\\temit Mint(user, amount, index);\\n\\n\\t\\treturn previousBalance == 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * - Only callable by the LendingPool\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external override onlyLendingPool {\\n\\t\\tif (amount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\taddress treasury = _treasury;\\n\\n\\t\\t// Compared to the normal mint, we don't check for rounding errors.\\n\\t\\t// The amount to mint can easily be very small since it is a fraction of the interest ccrued.\\n\\t\\t// In that case, the treasury will experience a (very small) loss, but it\\n\\t\\t// wont cause potentially valid transactions to fail.\\n\\t\\t_mint(treasury, amount.rayDiv(index));\\n\\n\\t\\temit Transfer(address(0), treasury, amount);\\n\\t\\temit Mint(treasury, amount, index);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * - Only callable by the LendingPool\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external override onlyLendingPool {\\n\\t\\t// Being a normal transfer, the Transfer() and BalanceTransfer() are emitted\\n\\t\\t// so no need to emit a specific event here\\n\\t\\t_transfer(from, to, value, false);\\n\\n\\t\\temit Transfer(from, to, value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The balance of the user\\n\\t **/\\n\\tfunction balanceOf(address user) public view override(IncentivizedERC20, IERC20) returns (uint256) {\\n\\t\\treturn super.balanceOf(user).rayMul(_pool.getReserveNormalizedIncome(_underlyingAsset));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view override returns (uint256) {\\n\\t\\treturn super.balanceOf(user);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view override returns (uint256, uint256) {\\n\\t\\treturn (super.balanceOf(user), super.totalSupply());\\n\\t}\\n\\n\\t/**\\n\\t * @dev calculates the total supply of the specific aToken\\n\\t * since the balance of every single user increases over time, the total supply\\n\\t * does that too.\\n\\t * @return the current total supply\\n\\t **/\\n\\tfunction totalSupply() public view override(IncentivizedERC20, IERC20) returns (uint256) {\\n\\t\\tuint256 currentSupplyScaled = super.totalSupply();\\n\\n\\t\\tif (currentSupplyScaled == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn currentSupplyScaled.rayMul(_pool.getReserveNormalizedIncome(_underlyingAsset));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return the scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() public view virtual override returns (uint256) {\\n\\t\\treturn super.totalSupply();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the Aave treasury, receiving the fees on this aToken\\n\\t **/\\n\\tfunction RESERVE_TREASURY_ADDRESS() public view returns (address) {\\n\\t\\treturn _treasury;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() public view override returns (address) {\\n\\t\\treturn _underlyingAsset;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the lending pool where this aToken is used\\n\\t **/\\n\\tfunction POOL() public view returns (ILendingPool) {\\n\\t\\treturn _pool;\\n\\t}\\n\\n\\t/**\\n\\t * @dev For internal usage in the logic of the parent contract IncentivizedERC20\\n\\t **/\\n\\tfunction _getIncentivesController() internal view override returns (IAaveIncentivesController) {\\n\\t\\treturn _incentivesController;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view override returns (IAaveIncentivesController) {\\n\\t\\treturn _getIncentivesController();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param target The recipient of the aTokens\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address target, uint256 amount) external override onlyLendingPool returns (uint256) {\\n\\t\\tIERC20(_underlyingAsset).safeTransfer(target, amount);\\n\\t\\treturn amount;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external override onlyLendingPool {}\\n\\n\\t/**\\n\\t * @dev implements the permit function as for\\n\\t * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n\\t * @param owner The owner of the funds\\n\\t * @param spender The spender\\n\\t * @param value The amount\\n\\t * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n\\t * @param v Signature param\\n\\t * @param s Signature param\\n\\t * @param r Signature param\\n\\t */\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external {\\n\\t\\trequire(owner != address(0), \\\"INVALID_OWNER\\\");\\n\\t\\t//solium-disable-next-line\\n\\t\\trequire(block.timestamp <= deadline, \\\"INVALID_EXPIRATION\\\");\\n\\t\\tuint256 currentValidNonce = _nonces[owner];\\n\\t\\tbytes32 digest = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19\\\\x01\\\",\\n\\t\\t\\t\\tDOMAIN_SEPARATOR,\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\trequire(owner == ecrecover(digest, v, r, s), \\\"INVALID_SIGNATURE\\\");\\n\\t\\t_nonces[owner] = currentValidNonce.add(1);\\n\\t\\t_approve(owner, spender, value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Transfers the aTokens between two users. Validates the transfer\\n\\t * (ie checks for valid HF after the transfer) if required\\n\\t * @param from The source address\\n\\t * @param to The destination address\\n\\t * @param amount The amount getting transferred\\n\\t * @param validate `true` if the transfer needs to be validated\\n\\t **/\\n\\tfunction _transfer(address from, address to, uint256 amount, bool validate) internal {\\n\\t\\taddress underlyingAsset = _underlyingAsset;\\n\\t\\tILendingPool pool = _pool;\\n\\n\\t\\tuint256 index = pool.getReserveNormalizedIncome(underlyingAsset);\\n\\n\\t\\tuint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);\\n\\t\\tuint256 toBalanceBefore = super.balanceOf(to).rayMul(index);\\n\\n\\t\\tsuper._transfer(from, to, amount.rayDiv(index));\\n\\n\\t\\tif (validate) {\\n\\t\\t\\tpool.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);\\n\\t\\t}\\n\\n\\t\\temit BalanceTransfer(from, to, amount, index);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Overrides the parent _transfer to force validated transfer() and transferFrom()\\n\\t * @param from The source address\\n\\t * @param to The destination address\\n\\t * @param amount The amount getting transferred\\n\\t **/\\n\\tfunction _transfer(address from, address to, uint256 amount) internal override {\\n\\t\\t_transfer(from, to, amount, true);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/lending/tokenization/IncentivizedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.12;\\n\\nimport {Context} from \\\"../../dependencies/openzeppelin/contracts/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../interfaces/IAaveIncentivesController.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\n\\n/**\\n * @title ERC20\\n * @notice Basic ERC20 implementation\\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\\n **/\\nabstract contract IncentivizedERC20 is Context, IERC20, IERC20Metadata {\\n\\tusing SafeMath for uint256;\\n\\n\\tmapping(address => uint256) internal _balances;\\n\\n\\tmapping(address => mapping(address => uint256)) private _allowances;\\n\\tuint256 internal _totalSupply;\\n\\tstring private _name;\\n\\tstring private _symbol;\\n\\tuint8 private _decimals;\\n\\n\\tILendingPool internal _pool;\\n\\taddress internal _underlyingAsset;\\n\\n\\tconstructor(string memory name_, string memory symbol_, uint8 decimals_) {\\n\\t\\t_name = name_;\\n\\t\\t_symbol = symbol_;\\n\\t\\t_decimals = decimals_;\\n\\t}\\n\\n\\t/**\\n\\t * @return The name of the token\\n\\t **/\\n\\tfunction name() public view returns (string memory) {\\n\\t\\treturn _name;\\n\\t}\\n\\n\\t/**\\n\\t * @return The symbol of the token\\n\\t **/\\n\\tfunction symbol() public view returns (string memory) {\\n\\t\\treturn _symbol;\\n\\t}\\n\\n\\t/**\\n\\t * @return The decimals of the token\\n\\t **/\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn _decimals;\\n\\t}\\n\\n\\t/**\\n\\t * @return The total supply of the token\\n\\t **/\\n\\tfunction totalSupply() public view virtual returns (uint256) {\\n\\t\\treturn _totalSupply;\\n\\t}\\n\\n\\t/**\\n\\t * @return The balance of the token\\n\\t **/\\n\\tfunction balanceOf(address account) public view virtual returns (uint256) {\\n\\t\\treturn _balances[account];\\n\\t}\\n\\n\\t/**\\n\\t * @return Abstract function implemented by the child aToken/debtToken.\\n\\t * Done this way in order to not break compatibility with previous versions of aTokens/debtTokens\\n\\t **/\\n\\tfunction _getIncentivesController() internal view virtual returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Executes a transfer of tokens from _msgSender() to recipient\\n\\t * @param recipient The recipient of the tokens\\n\\t * @param amount The amount of tokens being transferred\\n\\t * @return `true` if the transfer succeeds, `false` otherwise\\n\\t **/\\n\\tfunction transfer(address recipient, uint256 amount) public virtual returns (bool) {\\n\\t\\t_transfer(_msgSender(), recipient, amount);\\n\\t\\temit Transfer(_msgSender(), recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the allowance of spender on the tokens owned by owner\\n\\t * @param owner The owner of the tokens\\n\\t * @param spender The user allowed to spend the owner's tokens\\n\\t * @return The amount of owner's tokens spender is allowed to spend\\n\\t **/\\n\\tfunction allowance(address owner, address spender) public view virtual returns (uint256) {\\n\\t\\treturn _allowances[owner][spender];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows `spender` to spend the tokens owned by _msgSender()\\n\\t * @param spender The user allowed to spend _msgSender() tokens\\n\\t * @return `true`\\n\\t **/\\n\\tfunction approve(address spender, uint256 amount) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes a transfer of token from sender to recipient, if _msgSender() is allowed to do so\\n\\t * @param sender The owner of the tokens\\n\\t * @param recipient The recipient of the tokens\\n\\t * @param amount The amount of tokens being transferred\\n\\t * @return `true` if the transfer succeeds, `false` otherwise\\n\\t **/\\n\\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\\n\\t\\t_transfer(sender, recipient, amount);\\n\\t\\t_approve(\\n\\t\\t\\tsender,\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\t_allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n\\t\\t);\\n\\t\\temit Transfer(sender, recipient, amount);\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Increases the allowance of spender to spend _msgSender() tokens\\n\\t * @param spender The user allowed to spend on behalf of _msgSender()\\n\\t * @param addedValue The amount being added to the allowance\\n\\t * @return `true`\\n\\t **/\\n\\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n\\t\\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Decreases the allowance of spender to spend _msgSender() tokens\\n\\t * @param spender The user allowed to spend on behalf of _msgSender()\\n\\t * @param subtractedValue The amount being subtracted to the allowance\\n\\t * @return `true`\\n\\t **/\\n\\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n\\t\\t_approve(\\n\\t\\t\\t_msgSender(),\\n\\t\\t\\tspender,\\n\\t\\t\\t_allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n\\t\\t);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n\\t\\trequire(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n\\t\\trequire(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(sender, recipient, amount);\\n\\n\\t\\tuint256 senderBalance = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t// uint256 currentTotalSupply = _totalSupply;\\n\\t\\t\\t_getIncentivesController().handleActionBefore(sender);\\n\\t\\t\\tif (sender != recipient) {\\n\\t\\t\\t\\t_getIncentivesController().handleActionBefore(recipient);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_balances[sender] = senderBalance;\\n\\t\\tuint256 recipientBalance = _balances[recipient].add(amount);\\n\\t\\t_balances[recipient] = recipientBalance;\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\tuint256 currentTotalSupply = _totalSupply;\\n\\t\\t\\t_getIncentivesController().handleActionAfter(sender, _balances[sender], currentTotalSupply);\\n\\t\\t\\tif (sender != recipient) {\\n\\t\\t\\t\\t_getIncentivesController().handleActionAfter(recipient, _balances[recipient], currentTotalSupply);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _mint(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(address(0), account, amount);\\n\\n\\t\\tuint256 currentTotalSupply = _totalSupply.add(amount);\\n\\t\\tuint256 accountBalance = _balances[account].add(amount);\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionBefore(account);\\n\\t\\t}\\n\\t\\t_totalSupply = currentTotalSupply;\\n\\t\\t_balances[account] = accountBalance;\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionAfter(account, accountBalance, currentTotalSupply);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _burn(address account, uint256 amount) internal virtual {\\n\\t\\trequire(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n\\t\\t_beforeTokenTransfer(account, address(0), amount);\\n\\n\\t\\tuint256 currentTotalSupply = _totalSupply.sub(amount);\\n\\t\\tuint256 accountBalance = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionBefore(account);\\n\\t\\t}\\n\\n\\t\\t_totalSupply = currentTotalSupply;\\n\\t\\t_balances[account] = accountBalance;\\n\\n\\t\\tif (address(_getIncentivesController()) != address(0)) {\\n\\t\\t\\t_getIncentivesController().handleActionAfter(account, accountBalance, currentTotalSupply);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\\n\\t\\trequire(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n\\t\\trequire(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n\\t\\t_allowances[owner][spender] = amount;\\n\\t\\temit Approval(owner, spender, amount);\\n\\t}\\n\\n\\tfunction _setName(string memory newName) internal {\\n\\t\\t_name = newName;\\n\\t}\\n\\n\\tfunction _setSymbol(string memory newSymbol) internal {\\n\\t\\t_symbol = newSymbol;\\n\\t}\\n\\n\\tfunction _setDecimals(uint8 newDecimals) internal {\\n\\t\\t_decimals = newDecimals;\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n\\tfunction getAssetPrice() external view returns (uint256) {\\n\\t\\tILendingPoolAddressesProvider provider = _pool.getAddressesProvider();\\n\\t\\taddress oracle = provider.getPriceOracle();\\n\\t\\treturn IPriceOracle(oracle).getAssetPrice(_underlyingAsset);\\n\\t}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolConfigurator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"deployedContracts\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseLTV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct ATokensAndRatesHelper.ConfigureReserveInput[]\",\"name\":\"inputParams\",\"type\":\"tuple[]\"}],\"name\":\"configureReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256[6]\",\"name\":\"rates\",\"type\":\"uint256[6]\"}],\"internalType\":\"struct ATokensAndRatesHelper.InitDeploymentInput[]\",\"name\":\"inputParams\",\"type\":\"tuple[]\"}],\"name\":\"initDeployment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ATokensAndRatesHelper", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000e6df708f0ae4619691c77923c818c288f7a09762000000000000000000000000b7855b1aa5b467f9c2959c5f88958a602a103a3b000000000000000000000000739f80cb2f78544168319b3ebb185b921bdd4bbe", "EVMVersion": "london", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}