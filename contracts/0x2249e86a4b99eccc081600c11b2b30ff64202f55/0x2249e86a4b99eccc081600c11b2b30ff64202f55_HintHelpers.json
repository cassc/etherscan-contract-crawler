{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/BaseMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\ncontract BaseMath {\\r\\n    uint256 constant public DECIMAL_PRECISION = 1e18;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/CheckContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n\\r\\ncontract CheckContract {\\r\\n    /**\\r\\n     * Check that the account is an already deployed non-destroyed contract.\\r\\n     * See: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol#L12\\r\\n     */\\r\\n    function checkContract(address _account) internal view {\\r\\n        require(_account != address(0), \\\"Account cannot be zero address\\\");\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(_account) }\\r\\n        require(size > 0, \\\"Account code size cannot be zero\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/IERC2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC2612 standard as defined in the EIP.\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change one's\\r\\n * {IERC20-allowance} without having to send a transaction, by signing a\\r\\n * message. This allows users to spend tokens without having to hold Ether.\\r\\n *\\r\\n * See https://eips.ethereum.org/EIPS/eip-2612.\\r\\n * \\r\\n * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\\r\\n */\\r\\ninterface IERC2612 {\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\r\\n     * given `owner`'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(address owner, address spender, uint256 amount, \\r\\n                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases `owner`'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     *\\r\\n     * `owner` can limit the time a Permit is valid for by setting `deadline` to \\r\\n     * a value in the near future. The deadline argument can be set to uint(-1) to \\r\\n     * create Permits that effectively never expire.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n    \\r\\n    function version() external view returns (string memory);\\r\\n    function permitTypeHash() external view returns (bytes32);\\r\\n    function domainSeparator() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/LiquityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./BaseMath.sol\\\";\\r\\nimport \\\"./LiquityMath.sol\\\";\\r\\nimport \\\"../Interfaces/IActivePool.sol\\\";\\r\\nimport \\\"../Interfaces/IDefaultPool.sol\\\";\\r\\nimport \\\"../Interfaces/IPriceFeed.sol\\\";\\r\\nimport \\\"../Interfaces/ILiquityBase.sol\\\";\\r\\n\\r\\n/*\\r\\n* Base contract for TroveManager, BorrowerOperations and StabilityPool. Contains global system constants and\\r\\n* common functions.\\r\\n*/\\r\\ncontract LiquityBase is BaseMath, ILiquityBase {\\r\\n\\r\\n    uint256 constant public _100pct = 1e18; // 1e18 == 100%\\r\\n\\r\\n    // Minimum collateral ratio for individual troves\\r\\n    uint256 constant public MCR = 1.1e18; // 110%\\r\\n\\r\\n    // Critical system collateral ratio. If the system's total collateral ratio (TCR) falls below the CCR, Recovery Mode is triggered.\\r\\n    uint256 constant public CCR = 1.5e18; // 150%\\r\\n\\r\\n    // Amount of THUSD to be locked in gas pool on opening troves\\r\\n    uint256 constant public THUSD_GAS_COMPENSATION = 200e18;\\r\\n\\r\\n    // Minimum amount of net THUSD debt a trove must have\\r\\n    uint256 constant public MIN_NET_DEBT = 1800e18;\\r\\n    // uint256 constant public MIN_NET_DEBT = 0;\\r\\n\\r\\n    uint256 constant public PERCENT_DIVISOR = 200; // dividing by 200 yields 0.5%\\r\\n\\r\\n    uint256 constant public BORROWING_FEE_FLOOR = DECIMAL_PRECISION / 1000 * 5; // 0.5%\\r\\n\\r\\n    IActivePool public activePool;\\r\\n\\r\\n    IDefaultPool public defaultPool;\\r\\n\\r\\n    IPriceFeed public override priceFeed;\\r\\n\\r\\n    // --- Gas compensation functions ---\\r\\n\\r\\n    // Returns the composite debt (drawn debt + gas compensation) of a trove, for the purpose of ICR calculation\\r\\n    function _getCompositeDebt(uint256 _debt) internal pure returns (uint) {\\r\\n        return _debt + THUSD_GAS_COMPENSATION;\\r\\n    }\\r\\n\\r\\n    function _getNetDebt(uint256 _debt) internal pure returns (uint) {\\r\\n        return _debt - THUSD_GAS_COMPENSATION;\\r\\n    }\\r\\n\\r\\n    // Return the amount of collateral to be drawn from a trove's collateral and sent as gas compensation.\\r\\n    function _getCollGasCompensation(uint256 _entireColl) internal pure returns (uint) {\\r\\n        return _entireColl / PERCENT_DIVISOR;\\r\\n    }\\r\\n\\r\\n    function getEntireSystemColl() public view returns (uint256 entireSystemColl) {\\r\\n        uint256 activeColl = activePool.getCollateralBalance();\\r\\n        uint256 liquidatedColl = defaultPool.getCollateralBalance();\\r\\n\\r\\n        return activeColl + liquidatedColl;\\r\\n    }\\r\\n\\r\\n    function getEntireSystemDebt() public view returns (uint256 entireSystemDebt) {\\r\\n        uint256 activeDebt = activePool.getTHUSDDebt();\\r\\n        uint256 closedDebt = defaultPool.getTHUSDDebt();\\r\\n\\r\\n        return activeDebt + closedDebt;\\r\\n    }\\r\\n\\r\\n    function _getTCR(uint256 _price) internal view returns (uint256 TCR) {\\r\\n        uint256 entireSystemColl = getEntireSystemColl();\\r\\n        uint256 entireSystemDebt = getEntireSystemDebt();\\r\\n\\r\\n        TCR = LiquityMath._computeCR(entireSystemColl, entireSystemDebt, _price);\\r\\n        return TCR;\\r\\n    }\\r\\n\\r\\n    function _checkRecoveryMode(uint256 _price) internal view returns (bool) {\\r\\n        uint256 TCR = _getTCR(_price);\\r\\n        return TCR < CCR;\\r\\n    }\\r\\n\\r\\n    function _requireUserAcceptsFee(uint256 _fee, uint256 _amount, uint256 _maxFeePercentage) internal pure {\\r\\n        uint256 feePercentage = _fee * DECIMAL_PRECISION / _amount;\\r\\n        require(feePercentage <= _maxFeePercentage, \\\"Fee exceeded provided maximum\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/LiquityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nlibrary LiquityMath {\\r\\n\\r\\n    uint256 internal constant DECIMAL_PRECISION = 1e18;\\r\\n\\r\\n    /* Precision for Nominal ICR (independent of price). Rationale for the value:\\r\\n     *\\r\\n     * - Making it \u201ctoo high\u201d could lead to overflows.\\r\\n     * - Making it \u201ctoo low\u201d could lead to an ICR equal to zero, due to truncation from Solidity floor division.\\r\\n     *\\r\\n     * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 ETH,\\r\\n     * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.\\r\\n     *\\r\\n     */\\r\\n    uint256 internal constant NICR_PRECISION = 1e20;\\r\\n\\r\\n    function _min(uint256 _a, uint256 _b) internal pure returns (uint) {\\r\\n        return (_a < _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    function _max(uint256 _a, uint256 _b) internal pure returns (uint) {\\r\\n        return (_a >= _b) ? _a : _b;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * Multiply two decimal numbers and use normal rounding rules:\\r\\n    * -round product up if 19'th mantissa digit >= 5\\r\\n    * -round product down if 19'th mantissa digit < 5\\r\\n    *\\r\\n    * Used only inside the exponentiation, _decPow().\\r\\n    */\\r\\n    function decMul(uint256 x, uint256 y) internal pure returns (uint256 decProd) {\\r\\n        uint256 prod_xy = x * y;\\r\\n\\r\\n        decProd = (prod_xy + (DECIMAL_PRECISION / 2)) / DECIMAL_PRECISION;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.\\r\\n    *\\r\\n    * Uses the efficient \\\"exponentiation by squaring\\\" algorithm. O(log(n)) complexity.\\r\\n    *\\r\\n    * Called by one function that represent time in units of minutes:\\r\\n    * 1) TroveManager._calcDecayedBaseRate\\r\\n    *\\r\\n    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals\\r\\n    * \\\"minutes in 1000 years\\\": 60 * 24 * 365 * 1000\\r\\n    *\\r\\n    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be\\r\\n    * negligibly different from just passing the cap, since:\\r\\n    *\\r\\n    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years\\r\\n    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible\\r\\n    */\\r\\n    function _decPow(uint256 _base, uint256 _minutes) internal pure returns (uint) {\\r\\n\\r\\n        if (_minutes > 525600000) {_minutes = 525600000;}  // cap to avoid overflow\\r\\n\\r\\n        if (_minutes == 0) {return DECIMAL_PRECISION;}\\r\\n\\r\\n        uint256 y = DECIMAL_PRECISION;\\r\\n        uint256 x = _base;\\r\\n        uint256 n = _minutes;\\r\\n\\r\\n        // Exponentiation-by-squaring\\r\\n        while (n > 1) {\\r\\n            if (n % 2 == 0) {\\r\\n                x = decMul(x, x);\\r\\n                n = n / 2;\\r\\n            } else { // if (n % 2 != 0)\\r\\n                y = decMul(x, y);\\r\\n                x = decMul(x, x);\\r\\n                n = (n - 1) / 2;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return decMul(x, y);\\r\\n  }\\r\\n\\r\\n    function _getAbsoluteDifference(uint256 _a, uint256 _b) internal pure returns (uint) {\\r\\n        return (_a >= _b) ? _a - _b : _b - _a;\\r\\n    }\\r\\n\\r\\n    function _computeNominalCR(uint256 _coll, uint256 _debt) internal pure returns (uint) {\\r\\n        if (_debt > 0) {\\r\\n            return _coll * NICR_PRECISION / _debt;\\r\\n        }\\r\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\r\\n        else { // if (_debt == 0)\\r\\n            return type(uint256).max;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _computeCR(uint256 _coll, uint256 _debt, uint256 _price) internal pure returns (uint) {\\r\\n        if (_debt > 0) {\\r\\n            uint256 newCollRatio = _coll * _price / _debt;\\r\\n\\r\\n            return newCollRatio;\\r\\n        }\\r\\n        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents \\\"infinite\\\" CR.\\r\\n        else { // if (_debt == 0)\\r\\n            return type(uint256).max;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Dependencies/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/**\\r\\n * Based on OpenZeppelin's Ownable contract:\\r\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\r\\n *\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return msg.sender == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     *\\r\\n     * NOTE: This function is not safe, as it doesn\u2019t check owner is calling it.\\r\\n     * Make sure you check it before calling it.\\r\\n     */\\r\\n    function _renounceOwnership() internal {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/HintHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Interfaces/ITroveManager.sol\\\";\\r\\nimport \\\"./Interfaces/ISortedTroves.sol\\\";\\r\\nimport \\\"./Dependencies/LiquityBase.sol\\\";\\r\\nimport \\\"./Dependencies/Ownable.sol\\\";\\r\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\r\\n\\r\\ncontract HintHelpers is LiquityBase, Ownable, CheckContract {\\r\\n\\r\\n    string constant public NAME = \\\"HintHelpers\\\";\\r\\n\\r\\n    ISortedTroves public sortedTroves;\\r\\n    ITroveManager public troveManager;\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event TroveManagerAddressChanged(address _troveManagerAddress);\\r\\n\\r\\n    // --- Dependency setters ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _sortedTrovesAddress,\\r\\n        address _troveManagerAddress\\r\\n    )\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        checkContract(_sortedTrovesAddress);\\r\\n        checkContract(_troveManagerAddress);\\r\\n\\r\\n        sortedTroves = ISortedTroves(_sortedTrovesAddress);\\r\\n        troveManager = ITroveManager(_troveManagerAddress);\\r\\n\\r\\n        emit SortedTrovesAddressChanged(_sortedTrovesAddress);\\r\\n        emit TroveManagerAddressChanged(_troveManagerAddress);\\r\\n\\r\\n        _renounceOwnership();\\r\\n    }\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /* getRedemptionHints() - Helper function for finding the right hints to pass to redeemCollateral().\\r\\n     *\\r\\n     * It simulates a redemption of `_THUSDamount` to figure out where the redemption sequence will start and what state the final Trove\\r\\n     * of the sequence will end up in.\\r\\n     *\\r\\n     * Returns three hints:\\r\\n     *  - `firstRedemptionHint` is the address of the first Trove with ICR >= MCR (i.e. the first Trove that will be redeemed).\\r\\n     *  - `partialRedemptionHintNICR` is the final nominal ICR of the last Trove of the sequence after being hit by partial redemption,\\r\\n     *     or zero in case of no partial redemption.\\r\\n     *  - `truncatedTHUSDamount` is the maximum amount that can be redeemed out of the the provided `_THUSDamount`. This can be lower than\\r\\n     *    `_THUSDamount` when redeeming the full amount would leave the last Trove of the redemption sequence with less net debt than the\\r\\n     *    minimum allowed value (i.e. MIN_NET_DEBT).\\r\\n     *\\r\\n     * The number of Troves to consider for redemption can be capped by passing a non-zero value as `_maxIterations`, while passing zero\\r\\n     * will leave it uncapped.\\r\\n     */\\r\\n\\r\\n    function getRedemptionHints(\\r\\n        uint256 _THUSDamount,\\r\\n        uint256 _price,\\r\\n        uint256 _maxIterations\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address firstRedemptionHint,\\r\\n            uint256 partialRedemptionHintNICR,\\r\\n            uint256 truncatedTHUSDamount\\r\\n        )\\r\\n    {\\r\\n        ISortedTroves sortedTrovesCached = sortedTroves;\\r\\n\\r\\n        uint256 remainingTHUSD = _THUSDamount;\\r\\n        address currentTroveuser = sortedTrovesCached.getLast();\\r\\n\\r\\n        while (currentTroveuser != address(0) && troveManager.getCurrentICR(currentTroveuser, _price) < MCR) {\\r\\n            currentTroveuser = sortedTrovesCached.getPrev(currentTroveuser);\\r\\n        }\\r\\n\\r\\n        firstRedemptionHint = currentTroveuser;\\r\\n\\r\\n        if (_maxIterations == 0) {\\r\\n            _maxIterations = type(uint256).max;\\r\\n        }\\r\\n\\r\\n        while (currentTroveuser != address(0) && remainingTHUSD > 0 && _maxIterations-- > 0) {\\r\\n            uint256 netTHUSDDebt = _getNetDebt(troveManager.getTroveDebt(currentTroveuser))\\r\\n                + troveManager.getPendingTHUSDDebtReward(currentTroveuser);\\r\\n\\r\\n            if (netTHUSDDebt > remainingTHUSD) {\\r\\n                if (netTHUSDDebt > MIN_NET_DEBT) {\\r\\n                    uint256 maxRedeemableTHUSD = LiquityMath._min(remainingTHUSD, netTHUSDDebt - MIN_NET_DEBT);\\r\\n\\r\\n                    uint256 collateral = troveManager.getTroveColl(currentTroveuser)\\r\\n                        + troveManager.getPendingCollateralReward(currentTroveuser);\\r\\n\\r\\n                    uint256 newColl = collateral - (maxRedeemableTHUSD * DECIMAL_PRECISION / _price);\\r\\n                    uint256 newDebt = netTHUSDDebt - maxRedeemableTHUSD;\\r\\n\\r\\n                    uint256 compositeDebt = _getCompositeDebt(newDebt);\\r\\n                    partialRedemptionHintNICR = LiquityMath._computeNominalCR(newColl, compositeDebt);\\r\\n\\r\\n                    remainingTHUSD -= maxRedeemableTHUSD;\\r\\n                }\\r\\n                break;\\r\\n            } else {\\r\\n                remainingTHUSD -= netTHUSDDebt;\\r\\n            }\\r\\n\\r\\n            currentTroveuser = sortedTrovesCached.getPrev(currentTroveuser);\\r\\n        }\\r\\n\\r\\n        truncatedTHUSDamount = _THUSDamount - remainingTHUSD;\\r\\n    }\\r\\n\\r\\n    /* getApproxHint() - return address of a Trove that is, on average, (length / numTrials) positions away in the\\r\\n    sortedTroves list from the correct insert position of the Trove to be inserted.\\r\\n\\r\\n    Note: The output address is worst-case O(n) positions away from the correct insert position, however, the function\\r\\n    is probabilistic. Input can be tuned to guarantee results to a high degree of confidence, e.g:\\r\\n\\r\\n    Submitting numTrials = k * sqrt(length), with k = 15 makes it very, very likely that the ouput address will\\r\\n    be <= sqrt(length) positions away from the correct insert position.\\r\\n    */\\r\\n    function getApproxHint(uint256 _CR, uint256 _numTrials, uint256 _inputRandomSeed)\\r\\n        external\\r\\n        view\\r\\n        returns (address hintAddress, uint256 diff, uint256 latestRandomSeed)\\r\\n    {\\r\\n        uint256 arrayLength = troveManager.getTroveOwnersCount();\\r\\n\\r\\n        if (arrayLength == 0) {\\r\\n            return (address(0), 0, _inputRandomSeed);\\r\\n        }\\r\\n\\r\\n        hintAddress = sortedTroves.getLast();\\r\\n        diff = LiquityMath._getAbsoluteDifference(_CR, troveManager.getNominalICR(hintAddress));\\r\\n        latestRandomSeed = _inputRandomSeed;\\r\\n\\r\\n        uint256 i = 1;\\r\\n\\r\\n        while (i < _numTrials) {\\r\\n            latestRandomSeed = uint(keccak256(abi.encodePacked(latestRandomSeed)));\\r\\n\\r\\n            uint256 arrayIndex = latestRandomSeed % arrayLength;\\r\\n            address currentAddress = troveManager.getTroveFromTroveOwnersArray(arrayIndex);\\r\\n            uint256 currentNICR = troveManager.getNominalICR(currentAddress);\\r\\n\\r\\n            // check if abs(current - CR) > abs(closest - CR), and update closest if current is closer\\r\\n            uint256 currentDiff = LiquityMath._getAbsoluteDifference(currentNICR, _CR);\\r\\n\\r\\n            if (currentDiff < diff) {\\r\\n                diff = currentDiff;\\r\\n                hintAddress = currentAddress;\\r\\n            }\\r\\n            i++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function computeNominalCR(uint256 _coll, uint256 _debt) external pure returns (uint) {\\r\\n        return LiquityMath._computeNominalCR(_coll, _debt);\\r\\n    }\\r\\n\\r\\n    function computeCR(uint256 _coll, uint256 _debt, uint256 _price) external pure returns (uint) {\\r\\n        return LiquityMath._computeCR(_coll, _debt, _price);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IActivePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\n\\r\\ninterface IActivePool is IPool {\\r\\n    // --- Events ---\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolTHUSDDebtUpdated(uint256 _THUSDDebt);\\r\\n    event ActivePoolCollateralBalanceUpdated(uint256 _collateral);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _newCollSurplusPoolAddress);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function sendCollateral(address _account, uint256 _amount) external;\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IDefaultPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./IPool.sol\\\";\\r\\n\\r\\n\\r\\ninterface IDefaultPool is IPool {\\r\\n    // --- Events ---\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event DefaultPoolTHUSDDebtUpdated(uint256 _THUSDDebt);\\r\\n    event DefaultPoolCollateralBalanceUpdated(uint256 _collateral);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function sendCollateralToActivePool(uint256 _amount) external;\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ILiquityBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./IPriceFeed.sol\\\";\\r\\n\\r\\n\\r\\ninterface ILiquityBase {\\r\\n    function priceFeed() external view returns (IPriceFeed);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPCV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./ITHUSDToken.sol\\\";\\r\\n\\r\\ninterface IPCV {\\r\\n\\r\\n    // --- Events --\\r\\n    event THUSDTokenAddressSet(address _thusdTokenAddress);\\r\\n    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\\r\\n    event CollateralAddressSet(address _collateralAddress);\\r\\n    event BAMMAddressSet(address _bammAddress);\\r\\n    event RolesSet(address _council, address _treasury);\\r\\n\\r\\n    event BAMMDeposit(uint256 _thusdAmount);\\r\\n    event BAMMWithdraw(uint256 _numShares);\\r\\n    event THUSDWithdraw(address _recipient, uint256 _thusdAmount);\\r\\n    event CollateralWithdraw(address _recipient, uint256 _collateralAmount);\\r\\n\\r\\n    event PCVDebtPaid(uint256 _paidDebt);\\r\\n    \\r\\n    event RecipientAdded(address _recipient);\\r\\n    event RecipientRemoved(address _recipient);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function debtToPay() external returns(uint256);\\r\\n    function payDebt(uint256 _thusdToBurn) external;\\r\\n\\r\\n    function setAddresses(\\r\\n        address _thusdTokenAddress, \\r\\n        address _borrowerOperations, \\r\\n        address payable _bammAddress,\\r\\n        address _collateralERC20\\r\\n    ) external;\\r\\n    function initialize() external;\\r\\n\\r\\n    function depositToBAMM(uint256 _thusdAmount) external;\\r\\n    function withdrawFromBAMM(uint256 _numShares) external;\\r\\n    function withdrawTHUSD(address _recipient, uint256 _thusdAmount) external;\\r\\n    function withdrawCollateral(address _recipient, uint256 _collateralAmount) external;\\r\\n\\r\\n    function addRecipientToWhitelist(address _recipient) external;\\r\\n    function addRecipientsToWhitelist(address[] calldata _recipients) external;\\r\\n    function removeRecipientFromWhitelist(address _recipient) external;\\r\\n    function removeRecipientsFromWhitelist(address[] calldata _recipients) external;\\r\\n\\r\\n    function startChangingRoles(address _council, address _treasury) external;\\r\\n    function cancelChangingRoles() external;\\r\\n    function finalizeChangingRoles() external;\\r\\n    \\r\\n    function collateralERC20() external view returns(IERC20);\\r\\n    function thusdToken() external view returns(ITHUSDToken);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// Common interface for the Pools.\\r\\ninterface IPool {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event CollateralBalanceUpdated(uint256 _newBalance);\\r\\n    event THUSDBalanceUpdated(uint256 _newBalance);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\r\\n    event CollateralSent(address _to, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function getCollateralBalance() external view returns (uint);\\r\\n\\r\\n    function getTHUSDDebt() external view returns (uint);\\r\\n\\r\\n    function increaseTHUSDDebt(uint256 _amount) external;\\r\\n\\r\\n    function decreaseTHUSDDebt(uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPriceFeed {\\r\\n\\r\\n    // --- Events ---\\r\\n    event LastGoodPriceUpdated(uint256 _lastGoodPrice);\\r\\n   \\r\\n    // --- Function ---\\r\\n    function fetchPrice() external returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ISortedTroves.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n// Common interface for the SortedTroves Doubly Linked List.\\r\\ninterface ISortedTroves {\\r\\n\\r\\n    // --- Events ---\\r\\n    \\r\\n    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\\r\\n    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\\r\\n    event NodeAdded(address _id, uint256 _NICR);\\r\\n    event NodeRemoved(address _id);\\r\\n\\r\\n    // --- Functions ---\\r\\n    \\r\\n    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\\r\\n\\r\\n    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\\r\\n\\r\\n    function remove(address _id) external;\\r\\n\\r\\n    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\\r\\n\\r\\n    function contains(address _id) external view returns (bool);\\r\\n\\r\\n    function isFull() external view returns (bool);\\r\\n\\r\\n    function isEmpty() external view returns (bool);\\r\\n\\r\\n    function getSize() external view returns (uint256);\\r\\n\\r\\n    function getMaxSize() external view returns (uint256);\\r\\n\\r\\n    function getFirst() external view returns (address);\\r\\n\\r\\n    function getLast() external view returns (address);\\r\\n\\r\\n    function getNext(address _id) external view returns (address);\\r\\n\\r\\n    function getPrev(address _id) external view returns (address);\\r\\n\\r\\n    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\\r\\n\\r\\n    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IStabilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\n/*\\r\\n * The Stability Pool holds THUSD tokens deposited by Stability Pool depositors.\\r\\n *\\r\\n * When a trove is liquidated, then depending on system conditions, some of its THUSD debt gets offset with\\r\\n * THUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of THUSD tokens in the Stability Pool is burned.\\r\\n *\\r\\n * Thus, a liquidation causes each depositor to receive a THUSD loss, in proportion to their deposit as a share of total deposits.\\r\\n * They also receive an collateral gain, as the collateral of the liquidated trove is distributed among Stability depositors,\\r\\n * in the same proportion.\\r\\n *\\r\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\r\\n * of the total THUSD in the Stability Pool, depletes 40% of each deposit.\\r\\n *\\r\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\r\\n * multiplying it by some factor in range ]0,1[\\r\\n *\\r\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / collateral gain derivations:\\r\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\r\\n *\\r\\n */\\r\\ninterface IStabilityPool {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event StabilityPoolCollateralBalanceUpdated(uint256 _newBalance);\\r\\n    event StabilityPoolTHUSDBalanceUpdated(uint256 _newBalance);\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event TroveManagerAddressChanged(address _newTroveManagerAddress);\\r\\n    event ActivePoolAddressChanged(address _newActivePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\r\\n    event THUSDTokenAddressChanged(address _newTHUSDTokenAddress);\\r\\n    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event CollateralAddressChanged(address _newCollateralAddress);\\r\\n\\r\\n    event P_Updated(uint256 _P);\\r\\n    event S_Updated(uint256 _S, uint128 _epoch, uint128 _scale);\\r\\n    event EpochUpdated(uint128 _currentEpoch);\\r\\n    event ScaleUpdated(uint128 _currentScale);\\r\\n\\r\\n    event DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _S);\\r\\n    event UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\r\\n\\r\\n    event CollateralGainWithdrawn(address indexed _depositor, uint256 _collateral, uint256 _THUSDLoss);\\r\\n    event CollateralSent(address _to, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    /*\\r\\n     * Called only once on init, to set addresses of other Liquity contracts\\r\\n     * Callable only by owner, renounces ownership at the end\\r\\n     */\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _troveManagerAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _collateralAddress\\r\\n    ) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - _amount is not zero\\r\\n     * ---\\r\\n     * - Sends depositor's accumulated gains (collateral) to depositor\\r\\n     */\\r\\n    function provideToSP(uint256 _amount) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - _amount is zero or there are no under collateralized troves left in the system\\r\\n     * - User has a non zero deposit\\r\\n     * ---\\r\\n     * - Sends all depositor's accumulated gains (collateral) to depositor\\r\\n     * - Decreases deposit stake, and takes new snapshot.\\r\\n     *\\r\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\r\\n     */\\r\\n    function withdrawFromSP(uint256 _amount) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - User has a non zero deposit\\r\\n     * - User has an open trove\\r\\n     * - User has some collateral gain\\r\\n     * ---\\r\\n     * - Transfers the depositor's entire collateral gain from the Stability Pool to the caller's trove\\r\\n     * - Leaves their compounded deposit in the Stability Pool\\r\\n     * - Updates snapshots for deposit\\r\\n     */\\r\\n    function withdrawCollateralGainToTrove(address _upperHint, address _lowerHint) external;\\r\\n\\r\\n    /*\\r\\n     * Initial checks:\\r\\n     * - Caller is TroveManager\\r\\n     * ---\\r\\n     * Cancels out the specified debt against the THUSD contained in the Stability Pool (as far as possible)\\r\\n     * and transfers the Trove's collateral from ActivePool to StabilityPool.\\r\\n     * Only called by liquidation functions in the TroveManager.\\r\\n     */\\r\\n    function offset(uint256 _debt, uint256 _coll) external;\\r\\n\\r\\n    /*\\r\\n     * Returns the total amount of collateral held by the pool, accounted in an internal variable instead of `balance`,\\r\\n     * to exclude edge cases like collateral received from a self-destruct.\\r\\n     */\\r\\n    function getCollateralBalance() external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Returns THUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\r\\n     */\\r\\n    function getTotalTHUSDDeposits() external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Calculates the collateral gain earned by the deposit since its last snapshots were taken.\\r\\n     */\\r\\n    function getDepositorCollateralGain(address _depositor) external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Return the user's compounded deposit.\\r\\n     */\\r\\n    function getCompoundedTHUSDDeposit(address _depositor) external view returns (uint);\\r\\n\\r\\n    /*\\r\\n     * Only callable by Active Pool, updates ERC20 tokens recieved\\r\\n     */\\r\\n    function updateCollateralBalance(uint256 _amount) external;\\r\\n    /*\\r\\n     * Fallback function\\r\\n     * Only callable by Active Pool, it just accounts for ETH received\\r\\n     * receive() external payable;\\r\\n     */\\r\\n    \\r\\n    function collateralAddress() external view returns(address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITHUSDToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../Dependencies/IERC2612.sol\\\";\\r\\n\\r\\ninterface ITHUSDToken is IERC20Metadata, IERC2612 {\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event TroveManagerAddressAdded(address _troveManagerAddress);\\r\\n    event StabilityPoolAddressAdded(address _newStabilityPoolAddress);\\r\\n    event BorrowerOperationsAddressAdded(address _newBorrowerOperationsAddress);\\r\\n\\r\\n    event THUSDTokenBalanceUpdated(address _user, uint256 _amount);\\r\\n\\r\\n    // --- Functions ---\\r\\n    function mintList(address contractAddress) external view returns (bool);\\r\\n    function burnList(address contractAddress) external view returns (bool);\\r\\n\\r\\n    function mint(address _account, uint256 _amount) external;\\r\\n\\r\\n    function burn(address _account, uint256 _amount) external;\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/ITroveManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./ILiquityBase.sol\\\";\\r\\nimport \\\"./IStabilityPool.sol\\\";\\r\\nimport \\\"./ITHUSDToken.sol\\\";\\r\\nimport \\\"./IPCV.sol\\\";\\r\\n\\r\\n\\r\\n// Common interface for the Trove Manager.\\r\\ninterface ITroveManager is ILiquityBase {\\r\\n\\r\\n    enum Status {\\r\\n        nonExistent,\\r\\n        active,\\r\\n        closedByOwner,\\r\\n        closedByLiquidation,\\r\\n        closedByRedemption\\r\\n    }\\r\\n\\r\\n    // --- Events ---\\r\\n\\r\\n    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\r\\n    event PriceFeedAddressChanged(address _newPriceFeedAddress);\\r\\n    event THUSDTokenAddressChanged(address _newTHUSDTokenAddress);\\r\\n    event ActivePoolAddressChanged(address _activePoolAddress);\\r\\n    event DefaultPoolAddressChanged(address _defaultPoolAddress);\\r\\n    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\\r\\n    event GasPoolAddressChanged(address _gasPoolAddress);\\r\\n    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\\r\\n    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\\r\\n    event PCVAddressChanged(address _pcvAddress);\\r\\n\\r\\n    event Liquidation(uint256 _liquidatedDebt, uint256 _liquidatedColl, uint256 _collGasCompensation, uint256 _THUSDGasCompensation);\\r\\n    event Redemption(uint256 _attemptedTHUSDAmount, uint256 _actualTHUSDAmount, uint256 _collateralSent, uint256 _collateralFee);\\r\\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, uint8 operation);\\r\\n    event TroveLiquidated(address indexed _borrower, uint256 _debt, uint256 _coll, uint8 operation);\\r\\n    event BaseRateUpdated(uint256 _baseRate);\\r\\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\\r\\n    event TotalStakesUpdated(uint256 _newTotalStakes);\\r\\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\\r\\n    event LTermsUpdated(uint256 _L_Collateral, uint256 _L_THUSDDebt);\\r\\n    event TroveSnapshotsUpdated(uint256 _L_Collateral, uint256 _L_THUSDDebt);\\r\\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\\r\\n\\r\\n    // --- Functions ---\\r\\n\\r\\n    function setAddresses(\\r\\n        address _borrowerOperationsAddress,\\r\\n        address _activePoolAddress,\\r\\n        address _defaultPoolAddress,\\r\\n        address _stabilityPoolAddress,\\r\\n        address _gasPoolAddress,\\r\\n        address _collSurplusPoolAddress,\\r\\n        address _priceFeedAddress,\\r\\n        address _thusdTokenAddress,\\r\\n        address _sortedTrovesAddress,\\r\\n        address _pcvAddress\\r\\n    ) external;\\r\\n\\r\\n    function stabilityPool() external view returns (IStabilityPool);\\r\\n    function thusdToken() external view returns (ITHUSDToken);\\r\\n    function pcv() external view returns (IPCV);\\r\\n\\r\\n    function getTroveOwnersCount() external view returns (uint);\\r\\n\\r\\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\\r\\n\\r\\n    function getNominalICR(address _borrower) external view returns (uint);\\r\\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint);\\r\\n\\r\\n    function liquidate(address _borrower) external;\\r\\n\\r\\n    function liquidateTroves(uint256 _n) external;\\r\\n\\r\\n    function batchLiquidateTroves(address[] calldata _troveArray) external;\\r\\n\\r\\n    function redeemCollateral(\\r\\n        uint256 _THUSDAmount,\\r\\n        address _firstRedemptionHint,\\r\\n        address _upperPartialRedemptionHint,\\r\\n        address _lowerPartialRedemptionHint,\\r\\n        uint256 _partialRedemptionHintNICR,\\r\\n        uint256 _maxIterations,\\r\\n        uint256 _maxFee\\r\\n    ) external;\\r\\n\\r\\n    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\\r\\n\\r\\n    function updateTroveRewardSnapshots(address _borrower) external;\\r\\n\\r\\n    function addTroveOwnerToArray(address _borrower) external returns (uint256 index);\\r\\n\\r\\n    function applyPendingRewards(address _borrower) external;\\r\\n\\r\\n    function getPendingCollateralReward(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getPendingTHUSDDebtReward(address _borrower) external view returns (uint);\\r\\n\\r\\n     function hasPendingRewards(address _borrower) external view returns (bool);\\r\\n\\r\\n    function getEntireDebtAndColl(address _borrower) external view returns (\\r\\n        uint256 debt,\\r\\n        uint256 coll,\\r\\n        uint256 pendingTHUSDDebtReward,\\r\\n        uint256 pendingCollateralReward\\r\\n    );\\r\\n\\r\\n    function closeTrove(address _borrower) external;\\r\\n\\r\\n    function removeStake(address _borrower) external;\\r\\n\\r\\n    function getRedemptionRate() external view returns (uint);\\r\\n    function getRedemptionRateWithDecay() external view returns (uint);\\r\\n\\r\\n    function getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint);\\r\\n\\r\\n    function getBorrowingRate() external view returns (uint);\\r\\n    function getBorrowingRateWithDecay() external view returns (uint);\\r\\n\\r\\n    function getBorrowingFee(uint256 THUSDDebt) external view returns (uint);\\r\\n    function getBorrowingFeeWithDecay(uint256 _THUSDDebt) external view returns (uint);\\r\\n\\r\\n    function decayBaseRateFromBorrowing() external;\\r\\n\\r\\n    function getTroveStatus(address _borrower) external view returns (Status);\\r\\n\\r\\n    function getTroveStake(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getTroveDebt(address _borrower) external view returns (uint);\\r\\n\\r\\n    function getTroveColl(address _borrower) external view returns (uint);\\r\\n\\r\\n    function setTroveStatus(address _borrower, Status _status) external;\\r\\n\\r\\n    function increaseTroveColl(address _borrower, uint256 _collIncrease) external returns (uint);\\r\\n\\r\\n    function decreaseTroveColl(address _borrower, uint256 _collDecrease) external returns (uint);\\r\\n\\r\\n    function increaseTroveDebt(address _borrower, uint256 _debtIncrease) external returns (uint);\\r\\n\\r\\n    function decreaseTroveDebt(address _borrower, uint256 _collDecrease) external returns (uint);\\r\\n\\r\\n    function getTCR(uint256 _price) external view returns (uint);\\r\\n\\r\\n    function checkRecoveryMode(uint256 _price) external view returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"}],\"name\":\"SortedTrovesAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"TroveManagerAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWING_FEE_FLOOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_NET_DEBT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THUSD_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_100pct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePool\",\"outputs\":[{\"internalType\":\"contract IActivePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"computeCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_debt\",\"type\":\"uint256\"}],\"name\":\"computeNominalCR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPool\",\"outputs\":[{\"internalType\":\"contract IDefaultPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_CR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numTrials\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputRandomSeed\",\"type\":\"uint256\"}],\"name\":\"getApproxHint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"hintAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"diff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestRandomSeed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemColl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemColl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntireSystemDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entireSystemDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_THUSDamount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIterations\",\"type\":\"uint256\"}],\"name\":\"getRedemptionHints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"firstRedemptionHint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partialRedemptionHintNICR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truncatedTHUSDamount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sortedTrovesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_troveManagerAddress\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sortedTroves\",\"outputs\":[{\"internalType\":\"contract ISortedTroves\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveManager\",\"outputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HintHelpers", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}