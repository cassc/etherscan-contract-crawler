{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BoostDelegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./interfaces/ITokenMinter.sol\\\";\\r\\nimport \\\"./interfaces/ITokenLocker.sol\\\";\\r\\nimport \\\"./interfaces/IBoostDelegate.sol\\\";\\r\\nimport \\\"./interfaces/IVoterProxy.sol\\\";\\r\\nimport \\\"./interfaces/IBooster.sol\\\";\\r\\n\\r\\ncontract BoostDelegate is IBoostDelegate{\\r\\n\\r\\n    address public constant escrow = address(0x3f78544364c3eCcDCe4d9C89a630AEa26122829d);\\r\\n    address public immutable convexproxy;\\r\\n    address public immutable cvxprisma;\\r\\n\\r\\n    uint256 public boostFee;\\r\\n    \\r\\n    event SetMintableClaimer(address indexed _address, bool _valid);\\r\\n    event SetBoostFee(uint256 _fee);\\r\\n\\r\\n    constructor(address _proxy, address _cvxprisma, uint256 _fee){\\r\\n        convexproxy = _proxy;\\r\\n        cvxprisma = _cvxprisma;\\r\\n        boostFee = _fee;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(IBooster(IVoterProxy(convexproxy).operator()).owner() == msg.sender, \\\"!owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setFee(uint256 _fee) external onlyOwner{\\r\\n        boostFee = _fee;\\r\\n        emit SetBoostFee(_fee);\\r\\n    }\\r\\n\\r\\n    function getFeePct(\\r\\n        address, // claimant,\\r\\n        address,// receiver,\\r\\n        uint,// amount,\\r\\n        uint,// previousAmount,\\r\\n        uint// totalWeeklyEmissions\\r\\n    ) external view returns (uint256 feePct){\\r\\n        return boostFee;\\r\\n    }\\r\\n\\r\\n    function delegatedBoostCallback(\\r\\n        address claimant,\\r\\n        address receiver,\\r\\n        uint,// amount,\\r\\n        uint adjustedAmount,\\r\\n        uint,// fee,\\r\\n        uint,// previousAmount,\\r\\n        uint// totalWeeklyEmissions\\r\\n    ) external returns (bool success){\\r\\n        if(receiver == convexproxy){\\r\\n\\r\\n            adjustedAmount = adjustedAmount / ITokenLocker(escrow).lockToTokenRatio() * ITokenLocker(escrow).lockToTokenRatio();\\r\\n            if(adjustedAmount > 0){\\r\\n                ITokenMinter(cvxprisma).mint(claimant, adjustedAmount);\\r\\n            }\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IVoterProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IVoterProxy{\\r\\n    function operator() external view returns(address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ITokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITokenMinter{\\r\\n    function mint(address,uint256) external;\\r\\n    function burn(address,uint256) external;\\r\\n    function setOperator(address _operator, bool _active) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ITokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITokenLocker {\\r\\n    struct LockData {\\r\\n        uint amount;\\r\\n        uint weeksToUnlock;\\r\\n    }\\r\\n\\r\\n    function lock(address _account, uint256 _amount, uint256 _weeks) external returns (bool);\\r\\n    function withdrawExpiredLocks(uint256 _weeks) external returns (bool);\\r\\n    function withdrawWithPenalty(uint amountToWithdraw) external returns (uint);\\r\\n\\r\\n    function getAccountBalances(address account) external view returns (uint256 locked, uint256 unlocked);\\r\\n    function getAccountActiveLocks(\\r\\n        address account,\\r\\n        uint minWeeks\\r\\n    ) external view returns (LockData[] memory lockData, uint frozenAmount);\\r\\n\\r\\n    function getAccountWeightAt(address account, uint week) external view returns (uint256);\\r\\n\\r\\n    function getTotalWeightAt(uint week) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawWithPenaltyAmounts(address account, uint amountToWithdraw) external view returns (uint amountWithdrawn, uint penaltyAmountPaid);\\r\\n\\r\\n    function lockToTokenRatio() external view returns (uint256);\\r\\n\\r\\n    function freeze() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IBooster {\\r\\n   function owner() external returns(address);\\r\\n   function rewardManager() external returns(address);\\r\\n   function isShutdown() external returns(bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IBoostDelegate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/**\\r\\n    @title Prisma Boost Delegate Interface\\r\\n    @notice When enabling boost delegation via `Vault.setBoostDelegationParams`,\\r\\n            you may optionally set a `callback` contract. If set, it should adhere\\r\\n            to the following interface.\\r\\n */\\r\\ninterface IBoostDelegate {\\r\\n    /**\\r\\n        @notice Get the current fee percent charged to use this boost delegate\\r\\n        @dev Optional. Only called if the feePct is set to `type(uint16).max` when\\r\\n             enabling delegation.\\r\\n        @param claimant Address that will perform the claim\\r\\n        @param amount Amount to be claimed (before applying boost or fee)\\r\\n        @param previousAmount Previous amount claimed this week by this contract\\r\\n        @param totalWeeklyEmissions Total weekly emissions released this week\\r\\n        @return feePct Fee % charged for claims that use this contracts' delegated boost.\\r\\n                      Given as a whole number out of 10000. If a claim would be rejected,\\r\\n                      the preferred return value is `type(uint256).max`.\\r\\n     */\\r\\n    function getFeePct(\\r\\n        address claimant,\\r\\n        address receiver,\\r\\n        uint amount,\\r\\n        uint previousAmount,\\r\\n        uint totalWeeklyEmissions\\r\\n    ) external view returns (uint256 feePct);\\r\\n\\r\\n    /**\\r\\n        @notice Callback function for boost delegators\\r\\n        @dev MUST BE INCLUDED. Called after each successful claim which used\\r\\n             this contract's delegated boost.\\r\\n        @param claimant Address that performed the claim\\r\\n        @param amount Amount that claimed (before applying boost or fee)\\r\\n        @param adjustedAmount Actual amount received by `claimant`\\r\\n        @param fee Fee amount paid by `claimant`\\r\\n        @param previousAmount Previous amount claimed this week by this contract\\r\\n        @param totalWeeklyEmissions Total weekly emissions released this week\\r\\n     */\\r\\n    function delegatedBoostCallback(\\r\\n        address claimant,\\r\\n        address receiver,\\r\\n        uint amount,\\r\\n        uint adjustedAmount,\\r\\n        uint fee,\\r\\n        uint previousAmount,\\r\\n        uint totalWeeklyEmissions\\r\\n    ) external returns (bool success);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cvxprisma\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"SetBoostFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_valid\",\"type\":\"bool\"}],\"name\":\"SetMintableClaimer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"boostFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexproxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxprisma\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegatedBoostCallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getFeePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoostDelegate", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ad7a9e2b3cd9214f36cb871336d8ab34ddfdd5b00000000000000000000000034635280737b5bfe6c7dc2fc3065d60d66e781850000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}