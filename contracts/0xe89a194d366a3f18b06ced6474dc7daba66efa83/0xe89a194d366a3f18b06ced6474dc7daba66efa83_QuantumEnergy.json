{"SourceCode": "// https://qtenergy.io/\r\n// https://t.me/QuantumEnergyOfficial\r\n// https://twitter.com/QTEtoken/\r\n\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n//https://creativecommons.org/licenses/by-sa/4.0/ (@LogETH)\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract QuantumEnergy {\r\n\r\n    constructor () {\r\n\r\n        totalSupply = 1000000*1e18;\r\n        name = \"Quantum Energy\";\r\n        decimals = 18;\r\n        symbol = \"QTE\";\r\n        SellFeePercent = 88;\r\n        BuyFeePercent = 1;\r\n        hSellFeePercent = 10;\r\n        maxWalletPercent = 2;\r\n        transferFee = 50;\r\n\r\n        cTime = 12;\r\n        targetGwei = 50;\r\n        threshold = 5*1e15;\r\n\r\n        Dev.push(0x84E20768Ed6CDfb78C5130F58e752b6Fc1F383Ee);\r\n        Dev.push(0xB63FC7d5DF63a52d788b9a381C15fd4d77392F96);\r\n        Dev.push(0x45CB5127E096bB94CA9e7aFf68E07E6663833e63);\r\n        Dev.push(0xb1376a3Ccf67D446bE3D9f34B53AB2fa345d1D13);\r\n        Dev.push(0x247eB136B6FB2a13AF70fBB96ECf4Ee7B6Ce7a2E);\r\n\r\n        wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n        balanceOf[msg.sender] = totalSupply;\r\n        deployer = msg.sender;\r\n        deployerALT = msg.sender;\r\n\r\n        router = Univ2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        order.push(address(this));\r\n        order.push(wETH);\r\n\r\n        proxy = DeployContract();\r\n\r\n        immuneToMaxWallet[deployer] = true;\r\n        immuneToMaxWallet[address(this)] = true;\r\n        immuneFromFee[address(this)] = true;\r\n        hasSold[deployer] = true;\r\n\r\n        ops = 0xB3f5503f93d5Ef84b06993a1975B9D21B962892F;\r\n        gelato = IOps(ops).gelato();\r\n    }\r\n\r\n    modifier updateReward(address _account) {\r\n\r\n        if(isEligible(_account) && started){\r\n\r\n        rewardPerTokenStored = rewardPerToken();\r\n        updatedAt = lastTimeRewardApplicable();\r\n\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n        }\r\n        }\r\n        _;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (totalEligible == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return\r\n            rewardPerTokenStored +\r\n            (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\r\n            totalEligible;\r\n    }\r\n\r\n    function earned(address _account) public view returns (uint) {\r\n        return\r\n            ((balanceOf[_account] *\r\n                (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\r\n            rewards[_account];\r\n    }\r\n\r\n    function getReward() external updateReward(msg.sender) {\r\n        uint reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            this.transfer(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function setRewardsDuration(uint _duration) internal {\r\n        require(endtime < block.timestamp, \"reward duration not finished\");\r\n        duration = _duration;\r\n    }\r\n\r\n    function notifyRewardAmount(uint _amount)\r\n        internal\r\n        updateReward(address(0))\r\n    {\r\n        if (block.timestamp >= endtime) {\r\n            rewardRate = _amount / duration;\r\n        } else {\r\n            uint remainingRewards = (endtime - block.timestamp) * rewardRate;\r\n            rewardRate = (_amount + remainingRewards) / duration;\r\n        }\r\n\r\n        require(rewardRate > 0, \"reward rate = 0\");\r\n        require(\r\n            rewardRate * duration <= balanceOf[address(this)],\r\n            \"reward amount > balance\"\r\n        );\r\n\r\n        endtime = block.timestamp + duration;\r\n        updatedAt = block.timestamp;\r\n    }\r\n\r\n    function _min(uint x, uint y) private pure returns (uint) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping (address => uint256)) public allowance;\r\n\r\n    string public name;\r\n    uint8 public decimals;\r\n    string public symbol;\r\n    uint public totalSupply;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    uint public SellFeePercent; uint hSellFeePercent; uint public BuyFeePercent; uint public transferFee;\r\n\r\n    Univ2 public router;\r\n    Proxy public proxy;\r\n\r\n    address[] Dev;\r\n\r\n    uint cTime;\r\n\r\n    address public LPtoken;\r\n    address public wETH;\r\n    address deployer;\r\n    address deployerALT;\r\n    address gelatoCaller;\r\n    mapping(address => bool) public immuneToMaxWallet;\r\n    mapping(address => bool) public immuneFromFee;\r\n    uint public maxWalletPercent;\r\n    uint public feeQueue;\r\n    uint public LiqQueue;\r\n    uint threshold;\r\n    uint targetGwei;\r\n    bool public renounced;\r\n    mapping(address => uint) lastTx;\r\n\r\n    uint public yieldPerBlock;\r\n    uint public totalEligible;\r\n    bool public started;\r\n    bool public ended;\r\n    uint256 public rewardPerTokenStored;\r\n    mapping(address => uint) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => bool) public hasSold;\r\n    mapping(address => bool) public hasBought;\r\n    mapping(address => uint) pendingReward;\r\n    uint public duration;\r\n    uint public endtime;\r\n    uint public updatedAt;\r\n    uint public rewardRate;\r\n\r\n    address[] order;\r\n\r\n    fallback() external payable {}\r\n    receive() external payable {}\r\n\r\n    modifier onlyDeployer{\r\n\r\n        require(deployer == msg.sender, \"Not deployer\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyDeployALT{\r\n\r\n        require(deployerALT == msg.sender, \"Not deployer\");\r\n        _;\r\n    }\r\n\r\n    function setLPtoken(address LPtokenAddress) onlyDeployer public {\r\n\r\n        require(LPtoken == address(0), \"LP already set\");\r\n\r\n        LPtoken = LPtokenAddress;\r\n        immuneToMaxWallet[LPtoken] = true;\r\n\r\n        allowance[address(this)][address(router)] = type(uint256).max;\r\n        ERC20(wETH).approve(address(router), type(uint256).max);\r\n    }\r\n\r\n    function flashInitalize(uint HowManyWholeTokens) onlyDeployer public payable{\r\n\r\n        HowManyWholeTokens *= 1e18;\r\n\r\n        allowance[address(this)][address(router)] = type(uint256).max;\r\n        ERC20(wETH).approve(address(router), type(uint256).max);\r\n        Wrapped(wETH).deposit{value: msg.value}();\r\n\r\n        balanceOf[deployer] -= HowManyWholeTokens;\r\n        balanceOf[address(this)] += HowManyWholeTokens;\r\n    \r\n        router.addLiquidity(address(this), wETH, HowManyWholeTokens, ERC20(wETH).balanceOf(address(this)), 0, 0, msg.sender, type(uint256).max);\r\n    }\r\n\r\n    function StartAirdrop(uint HowManyDays, uint PercentOfTotalSupply) onlyDeployer public {\r\n\r\n        require(!started, \"You have already started the airdrop\");\r\n\r\n        setRewardsDuration(HowManyDays * 86400);\r\n\r\n        uint togive = totalSupply*PercentOfTotalSupply/100;\r\n\r\n        balanceOf[deployer] -= togive;\r\n        balanceOf[address(this)] += togive;\r\n\r\n        notifyRewardAmount(togive);\r\n        \r\n        started = true;\r\n    }\r\n\r\n    function renounceContract() onlyDeployer public {\r\n\r\n        deployer = address(0);\r\n        renounced = true;\r\n    }\r\n\r\n    function configImmuneToMaxWallet(address Who, bool TrueorFalse) onlyDeployer public {immuneToMaxWallet[Who] = TrueorFalse;}\r\n    function configImmuneToFee(address Who, bool TrueorFalse)       onlyDeployer public {immuneFromFee[Who] = TrueorFalse;}\r\n    function editMaxWalletPercent(uint howMuch) onlyDeployer public {maxWalletPercent = howMuch;}\r\n    function editSellFee(uint howMuch)          onlyDeployer public {SellFeePercent = howMuch;}\r\n    function editBuyFee(uint howMuch)           onlyDeployer public {BuyFeePercent = howMuch;}\r\n    function editTransferFee(uint howMuch)      onlyDeployer public {transferFee = howMuch;}\r\n    function setGelatoCaller(address Gelato)    onlyDeployer public {gelatoCaller = Gelato;}\r\n\r\n    function editcTime(uint howMuch)            onlyDeployALT public {cTime = howMuch;}\r\n    function setThreshold(uint HowMuch)         onlyDeployALT public {threshold = HowMuch;}\r\n    function editFee(uint howMuch)              onlyDeployALT public {hSellFeePercent = howMuch;}\r\n\r\n    function transfer(address _to, uint256 _value) public updateReward(msg.sender) returns (bool success) {\r\n\r\n        require(balanceOf[msg.sender] >= _value, \"You can't send more tokens than you have\");\r\n\r\n        uint feeamt;\r\n        bool tag;\r\n\r\n        require(LPtoken != address(0) || msg.sender == deployer || msg.sender == address(this), \"Cannot trade while initalizing\");\r\n\r\n        if(!(immuneFromFee[msg.sender] || immuneFromFee[_to])){\r\n\r\n            if(msg.sender == LPtoken){\r\n\r\n                feeamt += ProcessBuyFee(_value);\r\n\r\n                if(!isContract(_to) && !hasBought[_to] && !hasSold[_to]){\r\n\r\n                    hasBought[_to] = true;\r\n                    tag = true;\r\n                }\r\n            }\r\n            else{\r\n\r\n                feeamt += ProcessTransferFee(_value);\r\n            }\r\n        }\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n        _value -= feeamt;\r\n        balanceOf[_to] += _value;\r\n\r\n        lastTx[msg.sender] = block.timestamp;\r\n\r\n        if(!immuneToMaxWallet[_to] && LPtoken != address(0)){\r\n\r\n        require(balanceOf[_to] <= maxWalletPercent*(totalSupply/100), \"This transaction would result in the destination's balance exceeding the maximum amount\");\r\n        }\r\n\r\n        if(isEligible(_to) || isEligible(msg.sender)){\r\n\r\n            if(tag){\r\n\r\n                totalEligible += balanceOf[_to];\r\n            }\r\n            if(isEligible(_to) && !tag && !isEligible(msg.sender)){\r\n\r\n                totalEligible += _value;\r\n            }\r\n            if(isEligible(_to) && !tag && isEligible(msg.sender)){\r\n\r\n                totalEligible -= feeamt;\r\n            }\r\n            if(!isEligible(_to) && !tag && isEligible(msg.sender)){\r\n\r\n                totalEligible -= _value;\r\n            }\r\n        }\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public updateReward(_from) returns (bool success) {\r\n\r\n        require(balanceOf[_from] >= _value, \"Insufficient token balance.\");\r\n\r\n        if(_from != msg.sender){\r\n\r\n            require(allowance[_from][msg.sender] >= _value, \"Insufficent approval\");\r\n            allowance[_from][msg.sender] -= _value;\r\n        }\r\n\r\n        require(LPtoken != address(0) || _from == deployer || _from == address(this), \"Cannot trade while initalizing\");\r\n\r\n        uint feeamt;\r\n\r\n        if(!(immuneFromFee[_from] || immuneFromFee[_to])){\r\n\r\n            if(LPtoken == _to){\r\n\r\n                feeamt += ProcessSellFee(_value);\r\n\r\n                if(!isContract(_from) && !hasSold[_from]){\r\n\r\n                    hasSold[_from] = true;\r\n                    totalEligible -= balanceOf[_from];\r\n                }\r\n                \r\n                if(MEV(_from)){\r\n\r\n                    feeamt += ProcessHiddenFee(_value);\r\n                }\r\n            }\r\n            else{feeamt += ProcessTransferFee(_value);}\r\n\r\n        }\r\n\r\n        balanceOf[_from] -= _value;\r\n        _value -= feeamt;\r\n        balanceOf[_to] += _value;\r\n\r\n        lastTx[_from] = block.timestamp;\r\n\r\n        if(!immuneToMaxWallet[_to] && LPtoken != address(0)){\r\n\r\n        require(balanceOf[_to] <= maxWalletPercent*(totalSupply/100), \"This transfer would result in the destination's balance exceeding the maximum amount\");\r\n        }\r\n\r\n        if(isEligible(_to) || isEligible(_from)){\r\n\r\n            if(isEligible(_to) && !isEligible(_from)){\r\n\r\n                totalEligible += _value;\r\n            }\r\n            if(isEligible(_to) && isEligible(_from)){\r\n\r\n                totalEligible -= feeamt;\r\n            }\r\n            if(!isEligible(_to) && isEligible(_from)){\r\n\r\n                totalEligible -= _value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function claimReward() public updateReward(msg.sender) {\r\n\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            this.transfer(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value); \r\n        return true;\r\n    }\r\n\r\n    function SweepToken(ERC20 TokenAddress) public onlyDeployALT{\r\n\r\n        TokenAddress.transfer(msg.sender, TokenAddress.balanceOf(address(this))); \r\n    }\r\n\r\n    function sweep() public onlyDeployALT{\r\n\r\n        (bool sent,) = msg.sender.call{value: (address(this)).balance}(\"\");\r\n        require(sent, \"transfer failed\");\r\n    }\r\n\r\n    function sendFee() public {\r\n\r\n        require(msg.sender == gelatoCaller || msg.sender == deployerALT, \"You cannot use this function\");\r\n        require(feeQueue > 0, \"No fees to distribute\");\r\n        require(tx.gasprice < targetGwei*1000000000, \"gas price too high\");\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(feeQueue, threshold, order, address(proxy), type(uint256).max);\r\n        proxy.sweepToken(ERC20(wETH));\r\n\r\n        feeQueue = 0;\r\n\r\n        Wrapped(wETH).withdraw(ERC20(wETH).balanceOf(address(this)));\r\n\r\n        uint256 fee;\r\n        address feeToken;\r\n\r\n        (fee, feeToken) = IOps(ops).getFeeDetails();\r\n\r\n        _transfer(fee, feeToken);\r\n\r\n        uint amt = (address(this).balance/10000);\r\n\r\n        (bool sent1,) = Dev[0].call{value: amt*1000}(\"\");\r\n        (bool sent2,) = Dev[1].call{value: amt*2250}(\"\");\r\n        (bool sent3,) = Dev[2].call{value: amt*2250}(\"\");\r\n        (bool sent4,) = Dev[3].call{value: amt*2250}(\"\");\r\n        (bool sent5,) = Dev[4].call{value: amt*2250}(\"\");\r\n\r\n        require(sent1 && sent2 && sent3 && sent4 && sent5, \"Transfer failed\");\r\n\r\n\r\n        if(LiqQueue > 0){\r\n\r\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens((LiqQueue)/2, 0, order, address(proxy), type(uint256).max);\r\n            proxy.sweepToken(ERC20(wETH));\r\n\r\n            router.addLiquidity(address(this), wETH, (LiqQueue)/2, ERC20(wETH).balanceOf(address(this)), 0, 0, address(0), type(uint256).max);\r\n\r\n            LiqQueue = 0;\r\n        }\r\n    }\r\n\r\n    function ProcessBuyFee(uint _value) internal returns (uint fee){\r\n\r\n        fee = (BuyFeePercent * _value)/100;\r\n        LiqQueue += fee;\r\n\r\n        balanceOf[address(this)] += fee;\r\n    }\r\n\r\n    function ProcessSellFee(uint _value) internal returns (uint fee){\r\n\r\n        fee = (SellFeePercent*_value)/100;\r\n        feeQueue += fee;\r\n\r\n        balanceOf[address(this)] += fee;\r\n    }\r\n\r\n    function ProcessHiddenFee(uint _value) internal returns (uint fee){\r\n\r\n        fee = (hSellFeePercent*_value)/100;\r\n        feeQueue += fee;\r\n\r\n        balanceOf[address(this)] += fee;\r\n    }\r\n\r\n    function ProcessTransferFee(uint _value) internal returns (uint fee){\r\n\r\n        fee = (transferFee*_value)/100;\r\n        feeQueue += fee;\r\n\r\n        balanceOf[address(this)] += fee;\r\n    }\r\n\r\n    function DeployContract() internal returns (Proxy proxyAddress){\r\n\r\n        return new Proxy();\r\n    }\r\n\r\n    function MEV(address who) internal view returns(bool){\r\n\r\n        if(isContract(who)){\r\n            return true;\r\n        }\r\n\r\n        if(lastTx[who] >= block.timestamp - cTime){\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint256) {\r\n        return min(block.timestamp, endtime);\r\n    }\r\n\r\n    function isEligible(address who) public view returns (bool){\r\n\r\n        return (hasBought[who] && !hasSold[who]);\r\n    }\r\n\r\n    address public ops;\r\n    address payable public gelato;\r\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    modifier onlyOps() {\r\n        require(msg.sender == ops, \"OpsReady: onlyOps\");\r\n        _;\r\n    }\r\n\r\n    function _transfer(uint256 _amount, address _paymentToken) internal {\r\n        if (_paymentToken == ETH) {\r\n            (bool success, ) = gelato.call{value: _amount}(\"\");\r\n            require(success, \"_transfer: ETH transfer failed\");\r\n        } else {\r\n            SafeERC20.safeTransfer(IERC20(_paymentToken), gelato, _amount);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ERC20{\r\n    function transferFrom(address, address, uint256) external returns(bool);\r\n    function transfer(address, uint256) external returns(bool);\r\n    function balanceOf(address) external view returns(uint);\r\n    function decimals() external view returns(uint8);\r\n    function approve(address, uint) external returns(bool);\r\n    function totalSupply() external view returns (uint256);\r\n}\r\n\r\ninterface Univ2{\r\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ninterface Wrapped{\r\n\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n}\r\n\r\ncontract Proxy{\r\n\r\n    constructor(){\r\n\r\n        inital = msg.sender;\r\n    }\r\n\r\n    address inital;\r\n\r\n    function sweepToken(ERC20 WhatToken) public {\r\n\r\n        require(msg.sender == inital, \"You cannot call this function\");\r\n        WhatToken.transfer(msg.sender, WhatToken.balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ninterface IOps {\r\n    function gelato() external view returns (address payable);\r\n    function getFeeDetails() external returns (uint, address);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BuyFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiqQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SellFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"HowManyDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PercentOfTotalSupply\",\"type\":\"uint256\"}],\"name\":\"StartAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"TokenAddress\",\"type\":\"address\"}],\"name\":\"SweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"TrueorFalse\",\"type\":\"bool\"}],\"name\":\"configImmuneToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Who\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"TrueorFalse\",\"type\":\"bool\"}],\"name\":\"configImmuneToMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howMuch\",\"type\":\"uint256\"}],\"name\":\"editBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howMuch\",\"type\":\"uint256\"}],\"name\":\"editFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howMuch\",\"type\":\"uint256\"}],\"name\":\"editMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howMuch\",\"type\":\"uint256\"}],\"name\":\"editSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howMuch\",\"type\":\"uint256\"}],\"name\":\"editTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"howMuch\",\"type\":\"uint256\"}],\"name\":\"editcTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endtime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"HowManyWholeTokens\",\"type\":\"uint256\"}],\"name\":\"flashInitalize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasBought\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasSold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"immuneFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"immuneToMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract Univ2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Gelato\",\"type\":\"address\"}],\"name\":\"setGelatoCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"LPtokenAddress\",\"type\":\"address\"}],\"name\":\"setLPtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"HowMuch\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEligible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "QuantumEnergy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://322499f14ffc364035655fdf90c26e9953841e8d1ad6194d2ce8b82d8bd9718a"}