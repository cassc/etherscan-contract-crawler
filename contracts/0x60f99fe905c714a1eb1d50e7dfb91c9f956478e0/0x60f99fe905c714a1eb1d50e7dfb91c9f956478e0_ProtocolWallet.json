{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/spec_interfaces/IProtocolWallet.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/// @title Protocol Wallet interface\r\ninterface IProtocolWallet {\r\n    event FundsAddedToPool(uint256 added, uint256 total);\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    /// Returns the address of the underlying staked token\r\n    /// @return balance is the wallet balance\r\n    function getBalance() external view returns (uint256 balance);\r\n\r\n    /// Transfers the given amount of orbs tokens form the sender to this contract and updates the pool\r\n    /// @dev assumes the caller approved the amount prior to calling\r\n    /// @param amount is the amount to add to the wallet\r\n    function topUp(uint256 amount) external;\r\n\r\n    /// Withdraws from pool to the client address, limited by the pool's MaxRate.\r\n    /// @dev may only be called by the wallet client\r\n    /// @dev no more than MaxRate x time period since the last withdraw may be withdrawn\r\n    /// @dev allocation that wasn't withdrawn can not be withdrawn in the next call\r\n    /// @param amount is the amount to withdraw\r\n    function withdraw(uint256 amount) external; /* onlyClient */\r\n\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    event ClientSet(address client);\r\n    event MaxAnnualRateSet(uint256 maxAnnualRate);\r\n    event EmergencyWithdrawal(address addr, address token);\r\n    event OutstandingTokensReset(uint256 startTime);\r\n\r\n    /// Sets a new annual withdraw rate for the pool\r\n    /// @dev governance function called only by the migration owner\r\n    /// @dev the rate for a duration is duration x annualRate / 1 year \r\n    /// @param _annualRate is the maximum annual rate that can be withdrawn\r\n    function setMaxAnnualRate(uint256 _annualRate) external; /* onlyMigrationOwner */\r\n\r\n    /// Returns the annual withdraw rate of the pool\r\n    /// @return annualRate is the maximum annual rate that can be withdrawn\r\n    function getMaxAnnualRate() external view returns (uint256);\r\n\r\n    /// Resets the outstanding tokens to new start time\r\n    /// @dev governance function called only by the migration owner\r\n    /// @dev the next duration will be calculated starting from the given time\r\n    /// @param startTime is the time to set as the last withdrawal time\r\n    function resetOutstandingTokens(uint256 startTime) external; /* onlyMigrationOwner */\r\n\r\n    /// Emergency withdraw the wallet funds\r\n    /// @dev governance function called only by the migration owner\r\n    /// @dev used in emergencies, when a migration to a new wallet is needed\r\n    /// @param erc20 is the erc20 address of the token to withdraw\r\n    function emergencyWithdraw(address erc20) external; /* onlyMigrationOwner */\r\n\r\n    /// Sets the address of the client that can withdraw funds\r\n    /// @dev governance function called only by the functional owner\r\n    /// @param _client is the address of the new client\r\n    function setClient(address _client) external; /* onlyFunctionalOwner */\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableMigrationOwnership.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableMigrationOwnership is Context{\r\n    address private _migrationOwner;\r\n    address private _pendingMigrationOwner;\r\n\r\n    event MigrationOwnershipTransferred(address indexed previousMigrationOwner, address indexed newMigrationOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial migrationMigrationOwner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _migrationOwner = msgSender;\r\n        emit MigrationOwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current migrationOwner.\r\n     */\r\n    function migrationOwner() public view returns (address) {\r\n        return _migrationOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the migrationOwner.\r\n     */\r\n    modifier onlyMigrationOwner() {\r\n        require(isMigrationOwner(), \"WithClaimableMigrationOwnership: caller is not the migrationOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current migrationOwner.\r\n     */\r\n    function isMigrationOwner() public view returns (bool) {\r\n        return _msgSender() == _migrationOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without migrationOwner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current migrationOwner.\r\n     *\r\n     * NOTE: Renouncing migrationOwnership will leave the contract without an migrationOwner,\r\n     * thereby removing any functionality that is only available to the migrationOwner.\r\n     */\r\n    function renounceMigrationOwnership() public onlyMigrationOwner {\r\n        emit MigrationOwnershipTransferred(_migrationOwner, address(0));\r\n        _migrationOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers migrationOwnership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferMigrationOwnership(address newMigrationOwner) internal {\r\n        require(newMigrationOwner != address(0), \"MigrationOwner: new migrationOwner is the zero address\");\r\n        emit MigrationOwnershipTransferred(_migrationOwner, newMigrationOwner);\r\n        _migrationOwner = newMigrationOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingMigrationOwner() {\r\n        require(msg.sender == _pendingMigrationOwner, \"Caller is not the pending migrationOwner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current migrationOwner to set the pendingOwner address.\r\n     * @param newMigrationOwner The address to transfer migrationOwnership to.\r\n     */\r\n    function transferMigrationOwnership(address newMigrationOwner) public onlyMigrationOwner {\r\n        _pendingMigrationOwner = newMigrationOwner;\r\n    }\r\n    /**\r\n     * @dev Allows the _pendingMigrationOwner address to finalize the transfer.\r\n     */\r\n    function claimMigrationOwnership() external onlyPendingMigrationOwner {\r\n        _transferMigrationOwnership(_pendingMigrationOwner);\r\n        _pendingMigrationOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current _pendingMigrationOwner\r\n    */\r\n    function pendingMigrationOwner() public view returns (address) {\r\n       return _pendingMigrationOwner;  \r\n    }\r\n}\r\n\r\n// File: contracts/WithClaimableFunctionalOwnership.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract WithClaimableFunctionalOwnership is Context{\r\n    address private _functionalOwner;\r\n    address private _pendingFunctionalOwner;\r\n\r\n    event FunctionalOwnershipTransferred(address indexed previousFunctionalOwner, address indexed newFunctionalOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial functionalFunctionalOwner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _functionalOwner = msgSender;\r\n        emit FunctionalOwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current functionalOwner.\r\n     */\r\n    function functionalOwner() public view returns (address) {\r\n        return _functionalOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the functionalOwner.\r\n     */\r\n    modifier onlyFunctionalOwner() {\r\n        require(isFunctionalOwner(), \"WithClaimableFunctionalOwnership: caller is not the functionalOwner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current functionalOwner.\r\n     */\r\n    function isFunctionalOwner() public view returns (bool) {\r\n        return _msgSender() == _functionalOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without functionalOwner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current functionalOwner.\r\n     *\r\n     * NOTE: Renouncing functionalOwnership will leave the contract without an functionalOwner,\r\n     * thereby removing any functionality that is only available to the functionalOwner.\r\n     */\r\n    function renounceFunctionalOwnership() public onlyFunctionalOwner {\r\n        emit FunctionalOwnershipTransferred(_functionalOwner, address(0));\r\n        _functionalOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers functionalOwnership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferFunctionalOwnership(address newFunctionalOwner) internal {\r\n        require(newFunctionalOwner != address(0), \"FunctionalOwner: new functionalOwner is the zero address\");\r\n        emit FunctionalOwnershipTransferred(_functionalOwner, newFunctionalOwner);\r\n        _functionalOwner = newFunctionalOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingFunctionalOwner() {\r\n        require(msg.sender == _pendingFunctionalOwner, \"Caller is not the pending functionalOwner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Allows the current functionalOwner to set the pendingOwner address.\r\n     * @param newFunctionalOwner The address to transfer functionalOwnership to.\r\n     */\r\n    function transferFunctionalOwnership(address newFunctionalOwner) public onlyFunctionalOwner {\r\n        _pendingFunctionalOwner = newFunctionalOwner;\r\n    }\r\n    /**\r\n     * @dev Allows the _pendingFunctionalOwner address to finalize the transfer.\r\n     */\r\n    function claimFunctionalOwnership() external onlyPendingFunctionalOwner {\r\n        _transferFunctionalOwnership(_pendingFunctionalOwner);\r\n        _pendingFunctionalOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current _pendingFunctionalOwner\r\n    */\r\n    function pendingFunctionalOwner() public view returns (address) {\r\n       return _pendingFunctionalOwner;  \r\n    }\r\n}\r\n\r\n// File: contracts/ProtocolWallet.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Protocol Wallet contract\r\n/// @dev the protocol wallet utilizes two claimable owners: migrationOwner and functionalOwner\r\ncontract ProtocolWallet is IProtocolWallet, WithClaimableMigrationOwnership, WithClaimableFunctionalOwnership {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n    address public client;\r\n    uint256 public lastWithdrawal;\r\n    uint256 maxAnnualRate;\r\n\r\n    /// Constructor\r\n    /// @param _token is the wallet token\r\n    /// @param _client is the initial wallet client address\r\n    /// @param _maxAnnualRate is the maximum annual rate that can be withdrawn\r\n    constructor(IERC20 _token, address _client, uint256 _maxAnnualRate) public {\r\n        token = _token;\r\n        client = _client;\r\n        lastWithdrawal = block.timestamp;\r\n\r\n        setMaxAnnualRate(_maxAnnualRate);\r\n    }\r\n\r\n    modifier onlyClient() {\r\n        require(msg.sender == client, \"caller is not the wallet client\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*\r\n    * External functions\r\n    */\r\n\r\n    /// Returns the address of the underlying staked token\r\n    /// @return balance is the wallet balance\r\n    function getBalance() public override view returns (uint256 balance) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /// Transfers the given amount of orbs tokens form the sender to this contract and updates the pool\r\n    /// @dev assumes the caller approved the amount prior to calling\r\n    /// @param amount is the amount to add to the wallet\r\n    function topUp(uint256 amount) external override {\r\n        emit FundsAddedToPool(amount, getBalance().add(amount));\r\n        require(token.transferFrom(msg.sender, address(this), amount), \"ProtocolWallet::topUp - insufficient allowance\");\r\n    }\r\n\r\n    /// Withdraws from pool to the client address, limited by the pool's MaxRate.\r\n    /// @dev may only be called by the wallet client\r\n    /// @dev no more than MaxRate x time period since the last withdraw may be withdrawn\r\n    /// @dev allocation that wasn't withdrawn can not be withdrawn in the next call\r\n    /// @param amount is the amount to withdraw\r\n    function withdraw(uint256 amount) external override onlyClient {\r\n        uint256 _lastWithdrawal = lastWithdrawal;\r\n        require(_lastWithdrawal <= block.timestamp, \"withdrawal is not yet active\");\r\n\r\n        uint duration = block.timestamp.sub(_lastWithdrawal);\r\n        require(amount.mul(365 * 24 * 60 * 60) <= maxAnnualRate.mul(duration), \"ProtocolWallet::withdraw - requested amount is larger than allowed by rate\");\r\n\r\n        lastWithdrawal = block.timestamp;\r\n        if (amount > 0) {\r\n            require(token.transfer(msg.sender, amount), \"ProtocolWallet::withdraw - transfer failed\");\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Governance functions\r\n    */\r\n\r\n    /// Sets a new annual withdraw rate for the pool\r\n    /// @dev governance function called only by the migration owner\r\n    /// @dev the rate for a duration is duration x annualRate / 1 year\r\n    /// @param _annualRate is the maximum annual rate that can be withdrawn\r\n    function setMaxAnnualRate(uint256 _annualRate) public override onlyMigrationOwner {\r\n        maxAnnualRate = _annualRate;\r\n        emit MaxAnnualRateSet(_annualRate);\r\n    }\r\n\r\n    /// Returns the annual withdraw rate of the pool\r\n    /// @return annualRate is the maximum annual rate that can be withdrawn\r\n    function getMaxAnnualRate() external override view returns (uint256) {\r\n        return maxAnnualRate;\r\n    }\r\n\r\n    /// Resets the outstanding tokens to new start time\r\n    /// @dev governance function called only by the migration owner\r\n    /// @dev the next duration will be calculated starting from the given time\r\n    /// @param startTime is the time to set as the last withdrawal time\r\n    function resetOutstandingTokens(uint256 startTime) external override onlyMigrationOwner {\r\n        lastWithdrawal = startTime;\r\n        emit OutstandingTokensReset(startTime);\r\n    }\r\n\r\n    /// Emergency withdraw the wallet funds\r\n    /// @dev governance function called only by the migration owner\r\n    /// @dev used in emergencies, when a migration to a new wallet is needed\r\n    /// @param erc20 is the erc20 address of the token to withdraw\r\n    function emergencyWithdraw(address erc20) external override onlyMigrationOwner {\r\n        IERC20 _token = IERC20(erc20);\r\n        emit EmergencyWithdrawal(msg.sender, address(_token));\r\n        require(_token.transfer(msg.sender, _token.balanceOf(address(this))), \"FeesWallet::emergencyWithdraw - transfer failed\");\r\n    }\r\n\r\n    /// Sets the address of the client that can withdraw funds\r\n    /// @dev governance function called only by the functional owner\r\n    /// @param _client is the address of the new client\r\n    function setClient(address _client) external override onlyFunctionalOwner {\r\n        client = _client;\r\n        emit ClientSet(_client);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAnnualRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"ClientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFunctionalOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFunctionalOwner\",\"type\":\"address\"}],\"name\":\"FunctionalOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"added\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"FundsAddedToPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAnnualRate\",\"type\":\"uint256\"}],\"name\":\"MaxAnnualRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMigrationOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"MigrationOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"OutstandingTokensReset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimFunctionalOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMigrationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"client\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"functionalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxAnnualRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFunctionalOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrationOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFunctionalOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMigrationOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceFunctionalOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceMigrationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"resetOutstandingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"setClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_annualRate\",\"type\":\"uint256\"}],\"name\":\"setMaxAnnualRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFunctionalOwner\",\"type\":\"address\"}],\"name\":\"transferFunctionalOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMigrationOwner\",\"type\":\"address\"}],\"name\":\"transferMigrationOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProtocolWallet", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000da7e381544fc73cad7d9e63c86e561452b9b9e9c000000000000000000000000000000000000000000000165c96647b38a200000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5bea6d61c0509b01fa676d039fa937764073d84a95209676c2241dde32a8689d"}