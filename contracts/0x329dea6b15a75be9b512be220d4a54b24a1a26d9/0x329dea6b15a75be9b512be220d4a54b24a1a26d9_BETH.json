{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/beth/BETH.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC20Rebase.sol\\\";\\n\\ncontract BETH is ERC20Rebase {\\n    constructor() initializer {}\\n\\n    function initialize(\\n        string memory _domainName,\\n        address _admin,\\n        address[] memory _minters,\\n        address _oracle,\\n        address _owner,\\n        address _ethReceiver,\\n        address _operator\\n    ) public initializer {\\n        __ERC20_init();\\n        bytes32 _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(_domainName)),\\n                keccak256(bytes(\\\"1.0\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        _setDomainSeparator(_DOMAIN_SEPARATOR);\\n        require(_admin != address(0), \\\"can not set address 0 as admin\\\");\\n        require(_oracle != address(0), \\\"can not set address 0 as oracle\\\");\\n        require(_owner != address(0), \\\"can not set address 0 as owner\\\");\\n        require(_ethReceiver != address(0), \\\"can not set address 0 as ethReceiver\\\");\\n        require(_operator != address(0), \\\"can not set address 0 as operator\\\");\\n\\n        _setPaused(false);\\n\\n        _setExchangeRate(1e18);\\n\\n        _setAdmin(_admin);\\n        _setOracle(_oracle);\\n        _setOwner(_owner);\\n        _setEthReceiver(_ethReceiver);\\n        _setOperator(_operator);\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n        emit AdminUpdated(address(0), _admin);\\n        emit OracleUpdated(address(0), _oracle);\\n        emit EthReceiverUpdated(address(0), _ethReceiver);\\n        emit OperatorUpdated(address(0), _operator);\\n        emit ExchangeRateUpdated(_oracle, 1e18);\\n\\n        for (uint256 i = 0; i < _minters.length; i++) {\\n            require(_minters[i] != address(0), \\\"can not set address 0 as minter\\\");\\n            _setMinter(_minters[i], true);\\n            emit MinterUpdated(_minters[i], true);\\n        }\\n    }\\n\\n    function version() public pure returns (string memory _version) {\\n        return \\\"1.0\\\";\\n    }\\n\\n    // user function\\n    function deposit(address referral) external payable {\\n        return _deposit(msg.sender, referral);\\n    }\\n\\n    function _deposit(address user, address referral) internal whenNotPaused notBlacklisted(user) {\\n        require(msg.value > 0, \\\"deposit amount should be greater than 0\\\");\\n\\n        _mint(user, msg.value);\\n\\n        uint256 share = msg.value * PRECISION / exchangeRate();\\n        emit DepositEth(user, msg.value, share, referral);\\n    }\\n\\n    // minter function\\n    function mint(uint256 _amount) external whenNotPaused notBlacklisted(msg.sender) onlyMinter returns (bool) {\\n        return _mint(msg.sender, _amount);\\n    }\\n\\n    function burn(uint256 _amount) external whenNotPaused notBlacklisted(msg.sender) onlyMinter returns (bool) {\\n        return _burn(msg.sender, _amount);\\n    }\\n    // oracle function\\n\\n    function updateExchangeRate(uint256 newExchangeRate) external whenNotPaused onlyOracle {\\n        require(newExchangeRate > 0, \\\"exchange rate should be greater than 0\\\");\\n        _setExchangeRate(newExchangeRate);\\n        emit ExchangeRateUpdated(msg.sender, newExchangeRate);\\n    }\\n\\n    // operator function\\n    // gas = 5000, please refer to the doc\\n    function moveToStakingAddress(uint256 amount) external onlyOperator {\\n        address _ethReceiver = ethReceiver();\\n        require(_ethReceiver != address(0), \\\"eth receiver is not set\\\");\\n        require(amount > 0, \\\"zero amount\\\");\\n        require(address(this).balance >= amount, \\\"insufficient balance\\\");\\n        (bool success,) = _ethReceiver.call{value: amount, gas: 5000}(\\\"\\\");\\n        require(success, \\\"transfer failed\\\");\\n        emit MovedToStakingAddress(_ethReceiver, amount);\\n    }\\n\\n    function supplyEth() external payable onlyOperator {\\n        require(msg.value > 0, \\\"zero ETH amount\\\");\\n\\n        emit SuppliedEth(msg.sender, msg.value);\\n    }\\n\\n    receive() external payable {\\n        _deposit(msg.sender, address(0));\\n    }\\n\\n    // admin function\\n\\n    function blacklist(address _account) external onlyAdmin {\\n        require(_account != address(0), \\\"cannot black address zero\\\");\\n        require(_getBlacklist()[_account] == false, \\\"StakedTokenV1: account is already blacklisted\\\");\\n        _getBlacklist()[_account] = true;\\n        emit Blacklisted(_account);\\n    }\\n\\n    function unBlacklist(address _account) external onlyAdmin {\\n        require(_account != address(0), \\\"cannot unblack address zero\\\");\\n        require(_getBlacklist()[_account], \\\"StakedTokenV1: account is not blacklisted\\\");\\n        _getBlacklist()[_account] = false;\\n        emit UnBlacklisted(_account);\\n    }\\n\\n    function unpause() external onlyAdmin {\\n        _setPaused(false);\\n        emit Unpause();\\n    }\\n\\n    function pause() external onlyAdmin {\\n        _setPaused(true);\\n        emit Pause();\\n    }\\n\\n    function updateEthReceiver(address newEthReceiver) external onlyAdmin {\\n        require(newEthReceiver != address(0), \\\"StakedTokenV1: newEthReceiver is the zero address\\\");\\n\\n        address currentReceiver = ethReceiver();\\n        require(newEthReceiver != currentReceiver, \\\"StakedTokenV1: newEthReceiver is already the ethReceiver\\\");\\n\\n        _setEthReceiver(newEthReceiver);\\n        emit EthReceiverUpdated(currentReceiver, newEthReceiver);\\n    }\\n\\n    function updateOperator(address newOperator) external onlyAdmin {\\n        require(newOperator != address(0), \\\"StakedTokenV1: newOperator is the zero address\\\");\\n\\n        address currentOperator = operator();\\n        require(newOperator != currentOperator, \\\"StakedTokenV1: newOperator is already the operator\\\");\\n        _setOperator(newOperator);\\n        emit OperatorUpdated(currentOperator, newOperator);\\n    }\\n\\n    function updateOracle(address newOracle) external onlyAdmin {\\n        address currentOracle = oracle();\\n        require(newOracle != address(0), \\\"StakedTokenV1: oracle is the zero address\\\");\\n        require(newOracle != currentOracle, \\\"StakedTokenV1: new oracle is the same as oracle\\\");\\n        _setOracle(newOracle);\\n        emit OracleUpdated(currentOracle, newOracle);\\n    }\\n\\n    function updateMinter(address minter, bool isActive) external onlyAdmin {\\n        require(minter != address(0), \\\"StakedTokenV1: minter is the zero address\\\");\\n        require(isActive != isMinter(minter), \\\"StakedTokenV1: minter status doesn't change\\\");\\n        _setMinter(minter, isActive);\\n        emit MinterUpdated(minter, isActive);\\n    }\\n\\n    function rescueERC20(address tokenContract, address to, uint256 amount) external onlyAdmin {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(tokenContract)\\n        }\\n        require(size > 0, \\\"token contract must be a contract\\\");\\n        require(to != address(0), \\\"can not rescue to address 0\\\");\\n        require(amount > 0, \\\"can not rescue 0 amount\\\");\\n        (bool success, bytes memory res) =\\n            tokenContract.call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", to, amount));\\n        require(success && (res.length == 0 || abi.decode(res, (bool))), \\\"transfer failed\\\");\\n    }\\n\\n    // owner function\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(owner(), newOwner);\\n        _setOwner(newOwner);\\n    }\\n\\n    function updateAdmin(address newAdmin) external onlyOwner {\\n        require(newAdmin != address(0), \\\"Ownable: new admin is the zero address\\\");\\n        emit AdminUpdated(admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/beth/ERC20Rebase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ECRecover.sol\\\";\\nimport \\\"./OkStorage.sol\\\";\\n\\ncontract ERC20Rebase is OkStorage {\\n    uint256 internal constant PRECISION = 1e18;\\n\\n    constructor() {}\\n\\n    // ERC20 function\\n\\n    function __ERC20_init() internal initializer {}\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"Beacon ETH 2.0\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"BETH\\\";\\n    }\\n\\n    function decimals() external view returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        uint256 a = totalShare() * exchangeRate();\\n        uint256 b = PRECISION;\\n        return a / b;\\n    }\\n\\n    function balanceOf(address _account) public view returns (uint256) {\\n        uint256 a = _getShare()[_account] * exchangeRate();\\n        uint256 b = PRECISION;\\n        return a / b;\\n    }\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return _getAllowance()[_owner][_spender];\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount)\\n        public\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(_recipient)\\n        returns (bool)\\n    {\\n        return _transfer(msg.sender, _recipient, _amount);\\n    }\\n\\n    function approve(address _spender, uint256 _amount)\\n        public\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(_spender)\\n        returns (bool)\\n    {\\n        return _approve(msg.sender, _spender, _amount);\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount)\\n        public\\n        whenNotPaused\\n        notBlacklisted(_sender)\\n        notBlacklisted(_recipient)\\n        returns (bool)\\n    {\\n        require(_getAllowance()[_sender][msg.sender] >= _amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _getAllowance()[_sender][msg.sender] -= _amount;\\n        return _transfer(_sender, _recipient, _amount);\\n    }\\n\\n    //https://eips.ethereum.org/EIPS/eip-2612\\n    function permit(address from, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external\\n        whenNotPaused\\n        notBlacklisted(from)\\n        notBlacklisted(spender)\\n    {\\n        require(deadline >= block.timestamp, \\\"ERC20: permit is expired\\\");\\n        require(from != address(0), \\\"ERC20: permit from the zero address\\\");\\n\\n        bytes memory data = abi.encode(PERMIT_TYPEHASH, from, spender, value, _getNonce()[from], deadline);\\n        _getNonce()[from] += 1;\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), keccak256(data)));\\n        require(ECRecover.recover(digest, v, r, s) == from, \\\"EIP2612: invalid signature\\\");\\n        _approve(from, spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 increment)\\n        external\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        return _approve(msg.sender, spender, _getAllowance()[msg.sender][spender] + increment);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 decrement)\\n        external\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(spender)\\n        returns (bool)\\n    {\\n        require(_getAllowance()[msg.sender][spender] >= decrement, \\\"ERC20: decreased allowance below zero\\\");\\n        return _approve(msg.sender, spender, _getAllowance()[msg.sender][spender] - decrement);\\n    }\\n\\n    function sharesOf(address _account) external view returns (uint256) {\\n        return _getShare()[_account];\\n    }\\n\\n    function getTotalShares() public view returns (uint256) {\\n        return totalShare();\\n    }\\n\\n    function getSharesByPooledEth(uint256 _ethAmount) public view returns (uint256) {\\n        uint256 exR = exchangeRate();\\n        if (exR == 0) return 0;\\n        return _ethAmount * PRECISION / exR;\\n    }\\n\\n    function getPooledEthByShares(uint256 _shareAmount) public view returns (uint256) {\\n        if (totalShare() == 0) return 0;\\n        return _shareAmount * exchangeRate() / PRECISION;\\n    }\\n\\n    function transferShares(address _recipient, uint256 _sharesAmount)\\n        public\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(_recipient)\\n        returns (uint256)\\n    {\\n        _transferShares(msg.sender, _recipient, _sharesAmount);\\n        uint256 tokensAmount = getPooledEthByShares(_sharesAmount);\\n        emit Transfer(msg.sender, _recipient, tokensAmount);\\n        return tokensAmount;\\n    }\\n\\n    function transferSharesFrom(address _sender, address _recipient, uint256 _sharesAmount)\\n        public\\n        whenNotPaused\\n        notBlacklisted(_sender)\\n        notBlacklisted(_recipient)\\n        returns (uint256)\\n    {\\n        uint256 tokensAmount = getPooledEthByShares(_sharesAmount);\\n        require(_getAllowance()[_sender][msg.sender] >= tokensAmount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _getAllowance()[_sender][msg.sender] -= tokensAmount;\\n        _transferShares(_sender, _recipient, _sharesAmount);\\n        emit Transfer(_sender, _recipient, tokensAmount);\\n        return tokensAmount;\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) internal returns (bool) {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _getAllowance()[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n        return true;\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal returns (bool) {\\n        uint256 exR = exchangeRate();\\n        uint256 share = _amount * PRECISION / exR;\\n\\n        _transferShares(_sender, _recipient, share);\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function _transferShares(address _sender, address _recipient, uint256 _sharesAmount) internal returns (bool) {\\n        require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        require(_getShare()[_sender] >= _sharesAmount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _getShare()[_sender] -= _sharesAmount;\\n        _getShare()[_recipient] += _sharesAmount;\\n        emit TransferShares(_sender, _recipient, _sharesAmount);\\n        return true;\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal returns (bool) {\\n        require(_account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        uint256 exR = exchangeRate();\\n        uint256 share = _amount * PRECISION / exR;\\n\\n        _getShare()[_account] += share;\\n        _setTotalShare(totalShare() + share);\\n\\n        emit Transfer(address(0), _account, _amount);\\n        emit Mint(msg.sender, _account, _amount, exR);\\n        return true;\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal returns (bool) {\\n        require(_account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        uint256 exR = exchangeRate();\\n        uint256 share = _amount * PRECISION / exR;\\n\\n        require(_getShare()[_account] >= share, \\\"ERC20: burn amount exceeds balance\\\");\\n        _getShare()[_account] -= share;\\n        _setTotalShare(totalShare() - share);\\n\\n        emit Transfer(_account, address(0), _amount);\\n        emit Burn(msg.sender, _account, _amount, exR);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/beth/ECRecover.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary ECRecover {\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\\n     * Modifications: Accept v, r, and s as separate arguments\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     * @return Signer address\\n     */\\n    function recover(bytes32 digest, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECRecover: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECRecover: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(digest, v, r, s);\\n        require(signer != address(0), \\\"ECRecover: invalid signature\\\");\\n\\n        return signer;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/beth/OkStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\ncontract OkStorage is Initializable {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Blacklisted(address indexed _account);\\n    event DepositEth(address indexed user, uint256 ethAmount, uint256 bETHAmount, address indexed referral);\\n    event EthReceiverUpdated(address indexed previousReceiver, address indexed newReceiver);\\n    event ExchangeRateUpdated(address indexed oracle, uint256 newExchangeRate);\\n    event Mint(address indexed minter, address indexed to, uint256 amount, uint256 exchangeRate);\\n    event Burn(address indexed minter, address indexed from, uint256 amount, uint256 exchangeRate);\\n    event MinterUpdated(address indexed minter, bool indexed isActive);\\n    event MovedToStakingAddress(address indexed ethReceiver, uint256 ethAmount);\\n    event OperatorUpdated(address indexed previousOperator, address indexed newOperator);\\n    event OracleUpdated(address indexed previousOracle, address indexed newOracle);\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    event AdminUpdated(address indexed previousAdmin, address indexed newAdmin);\\n    event Pause();\\n    event SuppliedEth(address indexed supplier, uint256 ethAmount);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event UnBlacklisted(address indexed _account);\\n    event Unpause();\\n    event TransferShares(address indexed from, address indexed to, uint256 sharesValue);\\n    // ERC20 related\\n\\n    bytes32 private constant _TOTAL_SHARE_POSITION = keccak256(\\\"org.okx.stakedToken.totalShare\\\");\\n    bytes32 private constant _SHARE_POSITION = keccak256(\\\"org.okx.stakedToken.share\\\");\\n    bytes32 private constant _ALLOWANCE_POSITION = keccak256(\\\"org.okx.stakedToken.allowance\\\");\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    bytes32 private constant _DOMAIN_SEPARATOR_POSITION = keccak256(\\\"org.okx.stakedToken.domainSeparator\\\");\\n\\n    // role\\n    bytes32 private constant _ADMIN_POSITION = keccak256(\\\"org.okx.stakedToken.admin\\\");\\n    bytes32 private constant _ORACLE_POSITION = keccak256(\\\"org.okx.stakedToken.oracle\\\");\\n    bytes32 private constant _OWNER_POSITION = keccak256(\\\"org.okx.stakedToken.owner\\\");\\n    bytes32 private constant _MINTERS_POSITION = keccak256(\\\"org.okx.stakedToken.minters\\\");\\n    bytes32 private constant _ETH_RECIEVER_POSITION = keccak256(\\\"org.okx.stakedToken.ethReciever\\\");\\n    bytes32 private constant _OPERATOR_POSITION = keccak256(\\\"org.okx.stakedToken.operator\\\");\\n\\n    // status\\n    bytes32 private constant _PAUSED_POSITION = keccak256(\\\"org.okx.stakedToken.paused\\\");\\n    bytes32 private constant _BLACKLISTED_POSITION = keccak256(\\\"org.okx.stakedToken.blacklisted\\\");\\n    bytes32 private constant _NONCES_POSITION = keccak256(\\\"org.okx.stakedToken.nonces\\\");\\n    bytes32 private constant _EXCHANGE_RATE_POSITION = keccak256(\\\"org.okx.stakedToken.exchangeRate\\\");\\n\\n    function totalShare() internal view returns (uint256 _totalShare) {\\n        bytes32 position = _TOTAL_SHARE_POSITION;\\n        assembly {\\n            _totalShare := sload(position)\\n        }\\n    }\\n\\n    function _setTotalShare(uint256 _newTotalShare) internal {\\n        bytes32 position = _TOTAL_SHARE_POSITION;\\n        assembly {\\n            sstore(position, _newTotalShare)\\n        }\\n    }\\n\\n    function _getShare() internal pure returns (mapping(address => uint256) storage _share) {\\n        bytes32 position = _SHARE_POSITION;\\n        assembly {\\n            _share.slot := position\\n        }\\n    }\\n\\n    function _getAllowance()\\n        internal\\n        pure\\n        returns (mapping(address => mapping(address => uint256)) storage _allowance)\\n    {\\n        bytes32 position = _ALLOWANCE_POSITION;\\n        assembly {\\n            _allowance.slot := position\\n        }\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32 _domainSeparator) {\\n        bytes32 position = _DOMAIN_SEPARATOR_POSITION;\\n        assembly {\\n            _domainSeparator := sload(position)\\n        }\\n    }\\n\\n    function _setDomainSeparator(bytes32 _newDomainSeparator) internal {\\n        bytes32 position = _DOMAIN_SEPARATOR_POSITION;\\n        assembly {\\n            sstore(position, _newDomainSeparator)\\n        }\\n    }\\n\\n    function owner() public view returns (address _owner) {\\n        bytes32 position = _OWNER_POSITION;\\n        assembly {\\n            _owner := sload(position)\\n        }\\n    }\\n\\n    function _setOwner(address _newOwner) internal {\\n        bytes32 position = _OWNER_POSITION;\\n        assembly {\\n            sstore(position, _newOwner)\\n        }\\n    }\\n\\n    function admin() public view returns (address _admin) {\\n        bytes32 position = _ADMIN_POSITION;\\n        assembly {\\n            _admin := sload(position)\\n        }\\n    }\\n\\n    function _setAdmin(address _newAdmin) internal {\\n        bytes32 position = _ADMIN_POSITION;\\n        assembly {\\n            sstore(position, _newAdmin)\\n        }\\n    }\\n\\n    function oracle() public view returns (address _oracle) {\\n        bytes32 position = _ORACLE_POSITION;\\n        assembly {\\n            _oracle := sload(position)\\n        }\\n    }\\n\\n    function _setOracle(address _newOracle) internal {\\n        bytes32 position = _ORACLE_POSITION;\\n        assembly {\\n            sstore(position, _newOracle)\\n        }\\n    }\\n\\n    function ethReceiver() public view returns (address _ethReceiver) {\\n        bytes32 position = _ETH_RECIEVER_POSITION;\\n        assembly {\\n            _ethReceiver := sload(position)\\n        }\\n    }\\n\\n    function _setEthReceiver(address _newEthReceiver) internal {\\n        bytes32 position = _ETH_RECIEVER_POSITION;\\n        assembly {\\n            sstore(position, _newEthReceiver)\\n        }\\n    }\\n\\n    function operator() public view returns (address _operator) {\\n        bytes32 position = _OPERATOR_POSITION;\\n        assembly {\\n            _operator := sload(position)\\n        }\\n    }\\n\\n    function _setOperator(address _newOperator) internal {\\n        bytes32 position = _OPERATOR_POSITION;\\n        assembly {\\n            sstore(position, _newOperator)\\n        }\\n    }\\n\\n    function paused() public view returns (bool _paused) {\\n        bytes32 position = _PAUSED_POSITION;\\n        assembly {\\n            _paused := sload(position)\\n        }\\n    }\\n\\n    function _setPaused(bool _newPaused) internal {\\n        bytes32 position = _PAUSED_POSITION;\\n        assembly {\\n            sstore(position, _newPaused)\\n        }\\n    }\\n\\n    function _getBlacklist() internal pure returns (mapping(address => bool) storage _blacklist) {\\n        bytes32 position = _BLACKLISTED_POSITION;\\n        assembly {\\n            _blacklist.slot := position\\n        }\\n    }\\n\\n    function blacklisted(address _account) public view returns (bool _blacklisted) {\\n        return _getBlacklist()[_account];\\n    }\\n\\n    function _getMinters() internal pure returns (mapping(address => bool) storage _minters) {\\n        bytes32 position = _MINTERS_POSITION;\\n        assembly {\\n            _minters.slot := position\\n        }\\n    }\\n\\n    function _setMinter(address _minter, bool _isActive) internal {\\n        mapping(address => bool) storage minters = _getMinters();\\n        minters[_minter] = _isActive;\\n    }\\n\\n    function isMinter(address _account) public view returns (bool _isMinter) {\\n        mapping(address => bool) storage minters = _getMinters();\\n        return minters[_account];\\n    }\\n\\n    function _getNonce() internal pure returns (mapping(address => uint256) storage _nonce) {\\n        bytes32 position = _NONCES_POSITION;\\n        assembly {\\n            _nonce.slot := position\\n        }\\n    }\\n\\n    function nonces(address _owner) public view returns (uint256 _nonces) {\\n        return _getNonce()[_owner];\\n    }\\n\\n    function exchangeRate() public view returns (uint256 _exchangeRate) {\\n        bytes32 position = _EXCHANGE_RATE_POSITION;\\n        assembly {\\n            _exchangeRate := sload(position)\\n        }\\n    }\\n\\n    function _setExchangeRate(uint256 _newExchangeRate) internal {\\n        bytes32 position = _EXCHANGE_RATE_POSITION;\\n        assembly {\\n            sstore(position, _newExchangeRate)\\n        }\\n    }\\n\\n    // modifier\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier notBlacklisted(address _account) {\\n        require(!blacklisted(_account), \\\"Blacklistable: account is blacklisted\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admin() == msg.sender, \\\"Ownable: caller is not the admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyOracle() {\\n        require(oracle() == msg.sender, \\\"Ownable: caller is not the oracle\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(msg.sender), \\\"Ownable: caller is not the minter\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operator() == msg.sender, \\\"Ownable: caller is not the operator\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin-upgradeable/contracts/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bETHAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"DepositEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"EthReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"MinterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ethReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"MovedToStakingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"SuppliedEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesValue\",\"type\":\"uint256\"}],\"name\":\"TransferShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_blacklisted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_ethReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shareAmount\",\"type\":\"uint256\"}],\"name\":\"getPooledEthByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getSharesByPooledEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_domainName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isMinter\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"moveToStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonces\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"transferShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"transferSharesFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEthReceiver\",\"type\":\"address\"}],\"name\":\"updateEthReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExchangeRate\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"updateMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BETH", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}