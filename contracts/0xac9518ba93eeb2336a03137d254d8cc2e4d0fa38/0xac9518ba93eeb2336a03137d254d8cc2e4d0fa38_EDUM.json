{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: contracts/EDUM.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract EDUM is ERC20, Ownable {\r\n    // Initial totalSupply\r\n    uint256 private constant TOTAL_SUPPLY = 2000000000;\r\n\r\n    /**\r\n     * @dev transferWithLocked function can only be called by a controller \r\n     */\r\n    modifier onlyController {\r\n        require(isController[_msgSender()]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Lockup event \r\n     * @param addr \uc218\uc2e0 \uc8fc\uc18c \r\n     * @param amount Lockup \uc218\ub7c9\r\n     * @param timestamp Release \uc2dc\uac04\r\n     *        isListed == true  -> \uc808\ub300 \uc2dc\uac04\r\n     *        isListed == false -> listingDate \uc0c1\ub300 \uc2dc\uac04   \uac04 \r\n     * @param isListed transferPreTimelock(\uc0c1\uc7a5 \uc804), transferTimelock(\uc0c1\uc7a5 \ud6c4) \uad6c\ubd84\r\n     */   \r\n    event Locked(address indexed addr, uint256 amount, uint timestamp, bool isListed);\r\n    \r\n    /**\r\n     * @dev Lising event \r\n     * @param timestamp Listing Date\r\n     */   \r\n    event Listing(uint timestamp);\r\n\r\n    /**\r\n     * @dev Specify the lockup quantity and release time. \r\n     * @dev Lockup Lockup quantity \r\n     * @dev releaseTime Release time\r\n     */\r\n    struct TokenLockInfo {\r\n        uint256 amount;                 // locked amount\r\n        uint256 releaseTime;            // unix timestamp\r\n    }\r\n\r\n    /**\r\n     * @dev Account \ubcc4 Lockup \uc815\ubcf4 \uc800\uc7a5 \r\n     * @dev minReleaeTime lockInfo \ub9ac\uc2a4\ud2b8 \uc911 \uac00\uc7a5 \uc791\uc740 releaseTime \uac12.\r\n     *      transferPreTimelock \ud568\uc218 \ud638\ucd9c \uc2dc\uc5d0\ub294 0 \uc73c\ub85c \uc138\ud305 \ub428. (_refactoringPreTimelock \uc138\ud305 \ub428) \r\n     *      transferTimeLock \ud638\ucd9c \uc2dc\uc5d0\ub294 \uac12\uc774 \uc138\ud305 \ub428\r\n     * @dev lockInfo TokenLockInfo \ubc30\uc5f4\r\n     */\r\n    struct TokenLockState {\r\n        uint256 minReleaseTime;\r\n        TokenLockInfo[] lockInfo;     // Multiple token locks can exist\r\n    }\r\n\r\n    // mapping for TokenLockState \r\n    mapping(address => TokenLockState) public lockStates;\r\n\r\n    // Mapping from controllers to controller status.\r\n    mapping(address => bool) internal isController;\r\n\r\n    // Array of controllers.\r\n    address[] internal controllers;  \r\n\r\n    // \uc0c1\uc7a5 \uc77c \r\n    uint256 listingDate = 0;\r\n\r\n    /**\r\n     * @dev Initialize EDUM.\r\n     *      \ucd1d \ubc1c\ud589\ub7c9\uc740 20\uc5b5\uac1c (\ucd94\uac00 \uc0c1\uc7a5 \ubd88\uac00)\r\n     */\r\n    constructor() ERC20('EDUM', 'EDUM') {\r\n        _mint(_msgSender(), TOTAL_SUPPLY*10**decimals());\r\n    }\r\n\r\n    /**\r\n     * @dev \uc0c1\uc7a5\uc77c \uc124\uc815. \ud55c\ubc88\ub9cc \ubd88\ub9b4 \uc218 \uc788\uc74c \r\n     *      transferPreTimelock \uc758 ReleaseTime \uc774 \ud655\uc815 \ub428\r\n     * @param _listingDate \uc0c1\uc7a5\uc77c\r\n     */\r\n    function setListingDate(uint _listingDate) external onlyOwner {\r\n        require(listingDate == 0, \"listingDate already set\");\r\n\r\n        // listingDate = block.timestamp;\r\n        if (_listingDate == 0) {\r\n            listingDate = block.timestamp;\r\n        } else {\r\n            listingDate = _listingDate;\r\n        }\r\n\r\n        emit Listing(listingDate);\r\n    }\r\n\r\n    /**\r\n     * @dev Get listingDate \r\n     * @return listingDate Date of listing\r\n     */\r\n    function getListingDate() public view returns(uint256) {\r\n        return listingDate;\r\n    }\r\n\r\n    /**\r\n     * @dev Set list of controllers.\r\n     * @param controllerList List of controller addresses.\r\n     */\r\n    function setControllers(address[] memory controllerList) public onlyOwner {\r\n        uint ii;\r\n        for (ii = 0; ii < controllers.length; ii++) {\r\n            isController[controllers[ii]] = false;\r\n        }\r\n        for (ii = 0; ii < controllerList.length; ii++) {\r\n            isController[controllerList[ii]] = true;\r\n        }\r\n        controllers = controllerList;\r\n    }    \r\n\r\n    /**\r\n     * @dev Get list of controllers.\r\n     * @return List of address of all the controllers.\r\n     */\r\n    function getControllers() public view returns(address[] memory) {\r\n        return controllers;\r\n    }    \r\n\r\n    /**\r\n     * @dev don't send eth directly to token contract \r\n     */\r\n    receive() external payable {\r\n        revert(\"Don't accept ETH\");\r\n    }\r\n\r\n   /**\r\n    * @dev transferPreTimelock \uc73c\ub85c \ucd94\uac00 \ub41c Lockup ReleaseTime \uc815\ubcf4\ub97c \uc138\ud305.\r\n    *      _beforeTransfer / transferTimelock \uc5d0\uc11c \ud638\ucd9c. \r\n    * @param _addr address.\r\n    */\r\n    function _refactoringPreTimelock(address _addr) internal {\r\n        uint length = lockStates[_addr].lockInfo.length;\r\n        // transferPreTimelock \ud638\ucd9c\uc774 \ub41c \uc0c1\ud0dc && \uc0c1\uc7a5 \ud6c4 \uccab\ubc88\uc9f8 \ud638\ucd9c \uc2dc\uc5d0\ub9cc \uc9c4\ud589 \ub428. \r\n        if ((length > 0) &&                                 // \ucc98\ub9ac\ud560 \ub0b4\uc6a9\uc774 \uc788\ub294\uac00\r\n            (lockStates[_addr].minReleaseTime == 0) &&      // transferPreTimelock \uc778\uac00 & \uc774\ubbf8 \ucc98\ub9ac\uac00 \ub418\uc5c8\ub294\uac00  \r\n            (listingDate > 0))                              // \uc0c1\uc7a5\ub41c \uc0c1\ud0dc\uc778\uac00\r\n        {\r\n            uint releaseTime;\r\n            for (uint ii = 0; ii < length; /* unchecked inc */) {\r\n                releaseTime = lockStates[_addr].lockInfo[ii].releaseTime + listingDate; \r\n                lockStates[_addr].lockInfo[ii].releaseTime = releaseTime; \r\n                if (lockStates[_addr].minReleaseTime == 0 || lockStates[_addr].minReleaseTime > releaseTime) {\r\n                   lockStates[_addr].minReleaseTime = releaseTime; \r\n                }\r\n                unchecked {\r\n                    ii++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev Release \ub41c Lock \uc815\ubcf4\ub97c \uc0ad\uc81c \r\n    * @param _addr address.\r\n    */\r\n    function _releaseLockInfo(address _addr) internal {\r\n        uint256 lockCount = 0;\r\n        uint256 lockLength;\r\n\r\n        // \uc0c1\uc7a5\uc774 \ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc5d0\uc11c\ub294 Release \ub420 Lock \uc815\ubcf4\ub294 \uc5c6\uc74c. \r\n        if (listingDate==0) return;\r\n\r\n        // transferPreTimelock \uc815\ubcf4 refactoring \r\n        _refactoringPreTimelock(_addr);\r\n\r\n        // \ud604\uc7ac \uc2dc\uc810\uc5d0\uc11c Release \ud560 Lock \uc815\ubcf4\ub294 \uc5c6\uc74c.\r\n        if (lockStates[_addr].minReleaseTime > block.timestamp) return;\r\n\r\n        lockStates[_addr].minReleaseTime = 0;\r\n        lockLength = lockStates[_addr].lockInfo.length; \r\n        for (uint256 ii = 0; ii < lockLength; /* unchecked inc */) {\r\n            // \uc544\uc9c1 Release \uc2dc\uac04\uc774 \ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc \uc774\uba74 \ub0a8\uaca8\ub454\ub2e4.\r\n            if (lockStates[_addr].lockInfo[ii].releaseTime > block.timestamp) {   \r\n                // Update minReleaseTime\r\n                if ((lockStates[_addr].minReleaseTime == 0) || \r\n                    (lockStates[_addr].minReleaseTime > lockStates[_addr].lockInfo[ii].releaseTime)) \r\n                {\r\n                    lockStates[_addr].minReleaseTime = lockStates[_addr].lockInfo[ii].releaseTime;\r\n                }\r\n                lockStates[_addr].lockInfo[lockCount] = lockStates[_addr].lockInfo[ii];\r\n                unchecked {\r\n                    lockCount++;\r\n                }\r\n            }\r\n            unchecked {\r\n                ii++;\r\n            }\r\n        }\r\n\r\n        if (lockCount == 0) {\r\n            // \ubaa8\ub4e0 Lock \uc815\ubcf4\uac00 \uc0ad\uc81c\ub418\uc5c8\uc744 \uacbd\uc6b0 \r\n            delete lockStates[_addr];\r\n        } else {\r\n            // \uc0ad\uc81c\ub41c Lock \uc815\ubcf4 \uc218 \ub9cc\ud070 Pop \r\n            uint256 removeCount = lockStates[_addr].lockInfo.length - lockCount;            \r\n            for (uint256 ii = 0; ii < removeCount; /* unchecked inc */) {\r\n                lockStates[_addr].lockInfo.pop();\r\n                unchecked {\r\n                    ii++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n  /**\r\n   * @dev Get the amount of locked tokens \r\n   * @param _addr address.\r\n   * @return totalLocked Amount of locked tokens.\r\n   */\r\n    function getLockedBalance(address _addr) public view returns (uint256) {\r\n        uint256 totalLocked = 0;\r\n        uint256 lockLength;\r\n        uint256 releaseTime;\r\n\r\n        lockLength = lockStates[_addr].lockInfo.length; \r\n        for (uint256 ii = 0; ii < lockLength; /* unchecked inc */) {\r\n            if (listingDate == 0) {\r\n                // \uc544\uc9c1 \uc0c1\uc7a5\uc774 \ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc774\uba74 \ubb34\uc870\uac74 Lock \uc0c1\ud0dc\r\n                totalLocked += lockStates[_addr].lockInfo[ii].amount;\r\n            } else {\r\n                releaseTime = lockStates[_addr].lockInfo[ii].releaseTime;\r\n                // \uc0c1\uc7a5 \ud6c4 _refactoringPreTimelock \uc774 \ud638\ucd9c\ub418\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0 listingDate \uae30\uc900\uc73c\ub85c ReleaseTime \uacc4\uc0b0\r\n                if (lockStates[_addr].minReleaseTime == 0) {\r\n                    releaseTime += listingDate;\r\n                }\r\n\r\n                if (releaseTime > block.timestamp) {\r\n                    totalLocked += lockStates[_addr].lockInfo[ii].amount;\r\n                }\r\n            }\r\n            unchecked {\r\n                ii++;\r\n            }\r\n        }\r\n\r\n        return totalLocked;\r\n    }\r\n\r\n   /**\r\n    * @dev Hook that is called before any transfer of tokens. \r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param amount The amount to be transferred.\r\n    */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        // Release \ub418\uc5b4\uc57c \ud560 Lock \uc815\ubcf4 \uc0ad\uc81c\r\n        _releaseLockInfo(from);\r\n\r\n        if (from != address(0)) {       // Skip when mint\r\n            uint256 locked = getLockedBalance(from);\r\n            uint256 accountBalance = balanceOf(from);\r\n            require(accountBalance - locked >= amount, \"Transfer amount exeeds balance or some amounts are locked.\");\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev \ud1a0\ud070 Lock \uc804\uc1a1. \uc0c1\uc7a5 \ud6c4 \ud638\ucd9c \uac00\ub2a5. \r\n    * @param _addr The address to transfer to.\r\n    * @param _amount The amount to be transferred.\r\n    * @param _releaseTime The timestamp to unlock token.\r\n    * @return The result of transferTimelock\r\n    */\r\n    function transferTimelock(address _addr, uint256[] memory _amount, uint256[] memory _releaseTime)\r\n        external\r\n        onlyController\r\n        returns(bool)\r\n    {\r\n        require(listingDate > 0, \"Token is not listed\");\r\n        return _transferTimelock(_addr, _amount, _releaseTime);\r\n    }\r\n\r\n   /**\r\n    * @dev \ud1a0\ud070 Lock \uc804\uc1a1. \uc0c1\uc7a5 \uc804 \ud638\ucd9c \uac00\ub2a5. \r\n    * @param _addr The address to transfer to.\r\n    * @param _amount The amount to be transferred.\r\n    * @param _releaseTime The timestamp to unlock token.\r\n    * @return The result of transferPreTimelock\r\n    */\r\n    function transferPreTimelock(address _addr, uint256[] memory _amount, uint256[] memory _releaseTime)\r\n        external\r\n        onlyController\r\n        returns(bool)\r\n    {\r\n        require(listingDate == 0, \"Token is listed\");\r\n        return _transferTimelock(_addr, _amount, _releaseTime);\r\n    }\r\n\r\n   /**\r\n    * @dev \ud1a0\ud070 Lock \uc804\uc1a1\r\n    * @param _addr The address to transfer to.\r\n    * @param _amount The amount to be transferred.\r\n    * @param _releaseTime The timestamp to unlock token.\r\n    * @return The result of transferTimelock\r\n    */\r\n    function _transferTimelock(address _addr, uint256[] memory _amount, uint256[] memory _releaseTime) \r\n        internal\r\n        onlyController \r\n        returns (bool)\r\n    {\r\n        require(_amount.length == _releaseTime.length, \"amount and releaeTime must have save length\");\r\n\r\n        uint ii;\r\n        uint256 totalAmount = 0;\r\n        uint256 amountLength = 0;\r\n\r\n        // transferPreTimelock \uc815\ubcf4\uac00 \uc788\uc744 \uacbd\uc6b0 Release \uc815\ubcf4 \uc5c5\ub370\uc774\ud2b8\r\n        _refactoringPreTimelock(_addr);\r\n\r\n        amountLength = _amount.length; \r\n        for (ii = 0; ii < amountLength; /* unchecked inc */) {\r\n            totalAmount += _amount[ii]; \r\n\r\n            // Add lockInfo\r\n            lockStates[_addr].lockInfo.push(TokenLockInfo(_amount[ii], _releaseTime[ii]));\r\n\r\n            // If token is listed, update minReleaseTime\r\n            if (listingDate > 0) {\r\n                if ((lockStates[_addr].minReleaseTime == 0) || (lockStates[_addr].minReleaseTime > _releaseTime[ii])) {\r\n                    lockStates[_addr].minReleaseTime = _releaseTime[ii];\r\n                }\r\n            }\r\n            emit Locked(_addr, _amount[ii], _releaseTime[ii], listingDate>0);\r\n\r\n            unchecked {\r\n                ii++;\r\n            }\r\n        }\r\n\r\n        transfer(_addr, totalAmount);\r\n\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev \uacc4\uc815\ubcc4 TokenLockState \uc815\ubcf4 \ub9ac\ud134 \r\n    * @param _addr address\r\n    * @return The TokenLockState of _addr\r\n    */\r\n    function getTokenlockStates(address _addr) external view returns(TokenLockState memory) {\r\n        return lockStates[_addr];\r\n    }\r\n\r\n   /**\r\n    * @dev Multiple transfer function (onlyOwner)\r\n    * @param _to address list \r\n    * @param _amount amount list \r\n    */\r\n    function multiTransfer(address[] memory _to, uint256[] memory _amount) external onlyOwner {\r\n        uint transferCount = _to.length;\r\n\r\n        require(_to.length == _amount.length, \"to and amount must have save length\");\r\n\r\n        for (uint ii = 0; ii < transferCount; ) {\r\n            transfer(_to[ii], _amount[ii]);\r\n            unchecked {\r\n                ii++;\r\n            }\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev Destroy amount of tokens from account \r\n    * @dev Reduce totalSupply \r\n    * @dev A locked amount of token cannot be burned. \r\n    * @param _amount Amount to burn \r\n    */\r\n    function burn(uint256 _amount) external {\r\n        _burn(_msgSender(), _amount);\r\n    }\r\n\r\n    /*\r\n    /////////////////////////////////\r\n    // for test\r\n    /////////////////////////////////\r\n    function getLockedCount(address _account) public view returns (uint) {\r\n        return lockStates[_account].lockInfo.length;\r\n    }\r\n\r\n    event Dummy(uint value);\r\n    function dummy() public {\r\n        emit Dummy(0);\r\n    }\r\n    */\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Listing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getControllers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getListingDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getTokenlockStates\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minReleaseTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct EDUM.TokenLockInfo[]\",\"name\":\"lockInfo\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EDUM.TokenLockState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minReleaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"controllerList\",\"type\":\"address[]\"}],\"name\":\"setControllers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingDate\",\"type\":\"uint256\"}],\"name\":\"setListingDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_releaseTime\",\"type\":\"uint256[]\"}],\"name\":\"transferPreTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_releaseTime\",\"type\":\"uint256[]\"}],\"name\":\"transferTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EDUM", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://366efeb1b76c11ed3e2e2b3d9b356278ccfd039e24fd7bd95dd1481c301ca9ea"}