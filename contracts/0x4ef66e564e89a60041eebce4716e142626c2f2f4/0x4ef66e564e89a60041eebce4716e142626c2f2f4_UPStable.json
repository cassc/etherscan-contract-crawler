{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Crypto/Projects/zstable/contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nlibrary Constants {\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private constant _launchSupply = 185000 * 10**9;\\r\\n    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\\r\\n\\r\\n    uint256 private constant _deployerCost = 10 ether;\\r\\n\\r\\n    uint256 private constant _baseExpansionFactor = 300;\\r\\n    uint256 private constant _baseContractionFactor = 100;\\r\\n    uint256 private constant _baseUtilityFee = 50;\\r\\n    uint256 private constant _baseContractionCap = 1000;\\r\\n\\r\\n    uint256 private constant _presaleIndividualCap = 1 ether;\\r\\n    uint256 private constant _presaleIndividualMin = 1 ether;\\r\\n    uint256 private constant _presaleCap = 1 * 10**5 * 10**9;\\r\\n    uint256 private constant _maxPresaleGas = 200000000000;\\r\\n\\r\\n    uint256 private constant _epochLength = 30 minutes;\\r\\n\\r\\n    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\r\\n    address payable private constant _deployerAddress = 0x083c3b9a697596755834dbEF3D0a70a77c36Ae07;\\r\\n\\r\\n    string private constant _name = \\\"UPSTABLE.PROTOCOL\\\";\\r\\n    string private constant _symbol = \\\"UPS\\\";\\r\\n    uint8 private constant _decimals = 9;\\r\\n\\r\\n\\r\\n    /****** Getters *******/\\r\\n    function getLaunchSupply() internal pure returns (uint256) {\\r\\n        return _launchSupply;\\r\\n    }\\r\\n    function getLargeTotal() internal pure returns (uint256) {\\r\\n        return _largeTotal;\\r\\n    }\\r\\n    function getBaseExpansionFactor() internal pure returns (uint256) {\\r\\n        return _baseExpansionFactor;\\r\\n    }\\r\\n    function getBaseContractionFactor() internal pure returns (uint256) {\\r\\n        return _baseContractionFactor;\\r\\n    }\\r\\n    function getBaseContractionCap() internal pure returns (uint256) {\\r\\n        return _baseContractionCap;\\r\\n    }\\r\\n    function getDeployerCost() internal pure returns (uint256) {\\r\\n        return _deployerCost;\\r\\n    }\\r\\n    function getPresaleCap() internal pure returns (uint256) {\\r\\n        return _presaleCap;\\r\\n    }\\r\\n    function getPresaleIndividualMin() internal pure returns (uint256) {\\r\\n        return _presaleIndividualMin;\\r\\n    }\\r\\n    function getPresaleIndividualCap() internal pure returns (uint256) {\\r\\n        return _presaleIndividualCap;\\r\\n    }\\r\\n    function getMaxPresaleGas() internal pure returns (uint256) {\\r\\n        return _maxPresaleGas;\\r\\n    }\\r\\n    function getBaseUtilityFee() internal pure returns (uint256) {\\r\\n        return _baseUtilityFee;\\r\\n    }\\r\\n    function getEpochLength() internal pure returns (uint256) {\\r\\n        return _epochLength;\\r\\n    }\\r\\n    function getRouterAdd() internal pure returns (address) {\\r\\n        return _routerAddress;\\r\\n    }\\r\\n    function getFactoryAdd() internal pure returns (address) {\\r\\n        return _factoryAddress;\\r\\n    }\\r\\n    function getDeployerAdd() internal pure returns (address payable) {\\r\\n        return _deployerAddress;\\r\\n    }\\r\\n    function getName() internal pure returns (string memory)  {\\r\\n        return _name;\\r\\n    }\\r\\n    function getSymbol() internal pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function getDecimals() internal pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/Getters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./external/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./external/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./State.sol\\\";\\r\\n\\r\\ncontract Getters is State {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function getLargeBalances(address account) public view returns (uint256) {\\r\\n        return _largeBalances[account];\\r\\n    }\\r\\n    function getAllowances(address account, address spender) public view returns (uint256) {\\r\\n        return _allowances[account][spender];\\r\\n    } \\r\\n    function getSupportedPools(uint256 index) public view returns (address) {\\r\\n        return _supportedPools[index];\\r\\n    }\\r\\n    function getPoolCounters(address pool) public view returns (address, uint256, uint256, uint256, uint256, uint256) {\\r\\n        PoolCounter memory pc = _poolCounters[pool];\\r\\n        return (pc.pairToken, pc.tokenBalance, pc.pairTokenBalance, pc.lpBalance, pc.startTokenBalance, pc.startPairTokenBalance);\\r\\n    }\\r\\n    function isSupportedPool(address pool) public view returns (bool) {\\r\\n        return _isSupportedPool[pool];\\r\\n    }\\r\\n    function mainPool() public view returns (address) {\\r\\n        return _mainPool;\\r\\n    }\\r\\n    function getCurrentEpoch() public view returns (uint256) {\\r\\n        return _currentEpoch;\\r\\n    }\\r\\n    function getLargeTotal() public view returns (uint256) {\\r\\n        return _largeTotal;\\r\\n    }\\r\\n    function getTotalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    function isPresaleDone() public view returns (bool) {\\r\\n        return _presaleDone;\\r\\n    }\\r\\n    function isTaxLess() public view returns (bool) {\\r\\n        return _taxLess;\\r\\n    }\\r\\n    function getUniswapRouter() public view returns (IUniswapV2Router02) {\\r\\n        return IUniswapV2Router02(Constants.getRouterAdd());\\r\\n    }\\r\\n    function getUniswapFactory() public view returns (IUniswapV2Factory) {\\r\\n        return IUniswapV2Factory(Constants.getFactoryAdd());\\r\\n    }\\r\\n    function getFactor() public view returns(uint256) {\\r\\n        if (isPresaleDone()) {\\r\\n            return _largeTotal.div(_totalSupply);\\r\\n        } else {\\r\\n            return _largeTotal.div(Constants.getLaunchSupply());\\r\\n        }\\r\\n    }\\r\\n    function getUpdatedPoolCounters(address pool, address pairToken) public view returns (uint256, uint256, uint256) {\\r\\n        uint256 lpBalance = IERC20(pool).totalSupply();\\r\\n        uint256 tokenBalance = IERC20(address(this)).balanceOf(pool);\\r\\n        uint256 pairTokenBalance = IERC20(address(pairToken)).balanceOf(pool);\\r\\n        return (tokenBalance, pairTokenBalance, lpBalance);\\r\\n    }\\r\\n    function getMintValue(address sender, uint256 amount) internal view returns(uint256) {\\r\\n        uint256 expansionR = (_poolCounters[sender].pairTokenBalance).mul(_poolCounters[sender].startTokenBalance).mul(100).div(_poolCounters[sender].startPairTokenBalance).div(_poolCounters[sender].tokenBalance);\\r\\n        uint256 mintAmount;\\r\\n        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\\r\\n            uint256 mintFactor = expansionR.mul(expansionR);\\r\\n            mintAmount = amount.mul(mintFactor.sub(10000)).div(10000);\\r\\n        } else {\\r\\n            mintAmount = amount.mul(Constants.getBaseExpansionFactor()).div(10000);\\r\\n        }\\r\\n        return mintAmount;\\r\\n    }\\r\\n\\r\\n    function getUtilityFee(uint256 amount) internal view returns(uint256, uint256) {\\r\\n        uint256 currentFactor = getFactor();\\r\\n        uint256 utilityFee = amount.mul(Constants.getBaseUtilityFee()).div(10000);\\r\\n        return (utilityFee, utilityFee.mul(currentFactor));\\r\\n    }\\r\\n    function getMintRate(address pool) external view returns (uint256) {\\r\\n        uint256 expansionR = (_poolCounters[pool].pairTokenBalance).mul(_poolCounters[pool].startTokenBalance).mul(100).div(_poolCounters[pool].startPairTokenBalance).div(_poolCounters[pool].tokenBalance);\\r\\n        if (expansionR > (Constants.getBaseExpansionFactor()).add(10000).div(100)) {\\r\\n            uint256 mintFactor = expansionR.mul(expansionR);\\r\\n            return mintFactor.sub(10000);\\r\\n        } else {\\r\\n            return Constants.getBaseExpansionFactor();\\r\\n        }\\r\\n    }\\r\\n    function getBurnRate(address pool) external view returns (uint256) {\\r\\n        uint256 contractionR = (_poolCounters[pool].tokenBalance).mul(_poolCounters[pool].startPairTokenBalance).mul(100).div(_poolCounters[pool].pairTokenBalance).div(_poolCounters[pool].startTokenBalance);\\r\\n        uint256 burnRate;\\r\\n        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\\r\\n            uint256 burnFactor = contractionR.mul(contractionR);\\r\\n            burnRate = burnFactor.sub(10000);\\r\\n            if (burnRate > Constants.getBaseContractionCap()) {\\r\\n                return Constants.getBaseContractionCap();\\r\\n            }\\r\\n            return burnRate;\\r\\n\\r\\n        } else {\\r\\n            return Constants.getBaseContractionFactor();\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/Setters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./State.sol\\\";\\r\\nimport \\\"./Getters.sol\\\";\\r\\n\\r\\ncontract Setters is State, Getters {\\r\\n    function setAllowances(address owner, address spender, uint256 amount) internal {\\r\\n        _allowances[owner][spender] = amount;\\r\\n    }\\r\\n    function addToAccount(address account, uint256 amount) internal {\\r\\n        uint256 currentFactor = getFactor();\\r\\n        uint256 largeAmount = amount.mul(currentFactor);\\r\\n        _largeBalances[account] = _largeBalances[account].add(largeAmount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n    }\\r\\n    function addToAll(uint256 amount) internal {\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n    }\\r\\n    function initializeEpoch() internal {\\r\\n        _currentEpoch = now;\\r\\n    }\\r\\n    function updateEpoch() internal {\\r\\n        initializeEpoch();\\r\\n        for (uint256 i=0; i<_supportedPools.length; i++) {\\r\\n            _poolCounters[_supportedPools[i]].startTokenBalance = _poolCounters[_supportedPools[i]].tokenBalance;\\r\\n            _poolCounters[_supportedPools[i]].startPairTokenBalance = _poolCounters[_supportedPools[i]].pairTokenBalance;\\r\\n        }\\r\\n    }\\r\\n    function initializeLargeTotal() internal {\\r\\n        _largeTotal = Constants.getLargeTotal();\\r\\n    }\\r\\n    function syncPair(address pool) internal returns(bool) {\\r\\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\\r\\n        bool lpBurn = lpBalance < _poolCounters[pool].lpBalance;\\r\\n        _poolCounters[pool].lpBalance = lpBalance;\\r\\n        _poolCounters[pool].tokenBalance = tokenBalance;\\r\\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\\r\\n        return (lpBurn);\\r\\n    }\\r\\n    function silentSyncPair(address pool) public {\\r\\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\\r\\n        _poolCounters[pool].lpBalance = lpBalance;\\r\\n        _poolCounters[pool].tokenBalance = tokenBalance;\\r\\n        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\\r\\n    }\\r\\n    function addSupportedPool(address pool, address pairToken) internal {\\r\\n        require(!isSupportedPool(pool),\\\"This pool is already supported\\\");\\r\\n        _isSupportedPool[pool] = true;\\r\\n        _supportedPools.push(pool);\\r\\n        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, pairToken);\\r\\n        _poolCounters[pool] = PoolCounter(pairToken, tokenBalance, pairTokenBalance, lpBalance, tokenBalance, pairTokenBalance);\\r\\n    }\\r\\n    function removeSupportedPool(address pool) internal {\\r\\n        require(isSupportedPool(pool), \\\"This pool is currently not supported\\\");\\r\\n        for (uint256 i = 0; i < _supportedPools.length; i++) {\\r\\n            if (_supportedPools[i] == pool) {\\r\\n                _supportedPools[i] = _supportedPools[_supportedPools.length - 1];\\r\\n                _isSupportedPool[pool] = false;\\r\\n                delete _poolCounters[pool];\\r\\n                _supportedPools.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/State.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ncontract State {\\r\\n\\r\\n    mapping (address => uint256) _largeBalances;\\r\\n    mapping (address => mapping (address => uint256)) _allowances;\\r\\n\\r\\n    // Supported pools and data for measuring mint & burn factors\\r\\n    struct PoolCounter {\\r\\n        address pairToken;\\r\\n        uint256 tokenBalance;\\r\\n        uint256 pairTokenBalance;\\r\\n        uint256 lpBalance;\\r\\n        uint256 startTokenBalance;\\r\\n        uint256 startPairTokenBalance;\\r\\n    }\\r\\n\\r\\n    address[] _supportedPools;\\r\\n    mapping (address => PoolCounter) _poolCounters;\\r\\n    mapping (address => bool) _isSupportedPool;\\r\\n    address _mainPool;\\r\\n\\r\\n    uint256 _currentEpoch;\\r\\n \\r\\n    uint256 _largeTotal;\\r\\n    uint256 _totalSupply;\\r\\n\\r\\n    uint256 _presaleDist;\\r\\n    uint256 _presaleTime;\\r\\n    uint256 _presalePrice;\\r\\n    mapping (address => uint256) _presaleParticipation;\\r\\n    bool _presaleDone;\\r\\n    \\r\\n    bool _taxLess;\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/ZST.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\r\\nimport \\\"./external/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./external/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./external/IWETH.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./Setters.sol\\\";\\r\\n\\r\\ncontract UPStable is Setters, Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    modifier taxlessTx {\\r\\n        _taxLess = true;\\r\\n        _;\\r\\n        _taxLess = false;\\r\\n    }\\r\\n\\r\\n    constructor () public {\\r\\n        // uniswapRouterV2 = IUniswapV2Router02(Constants.getRouterAdd());\\r\\n        // uniswapFactory = IUniswapV2Factory(Constants.getFactoryAdd());\\r\\n        updateEpoch();\\r\\n        initializeLargeTotal();\\r\\n        _totalSupply = 10**5 * 10**9;\\r\\n        uint256 currentFactor = getFactor();\\r\\n        _largeBalances[_msgSender()] = _largeBalances[_msgSender()].add(_totalSupply.mul(currentFactor));\\r\\n        _presaleTime = now + 24 hours;\\r\\n        _presalePrice = 600000;\\r\\n        emit Transfer(address(0),_msgSender(),_totalSupply);\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return Constants.getName();\\r\\n    }\\r\\n    \\r\\n    function symbol() public view returns (string memory) {\\r\\n        return Constants.getSymbol();\\r\\n    }\\r\\n    \\r\\n    function decimals() public view returns (uint8) {\\r\\n        return Constants.getDecimals();\\r\\n    }\\r\\n    \\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return getTotalSupply();\\r\\n    }\\r\\n    \\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        uint256 currentFactor = getFactor();\\r\\n        return getLargeBalances(account).div(currentFactor);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return getAllowances(owner,spender);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), getAllowances(sender,_msgSender()).sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, getAllowances(_msgSender(),spender).sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        setAllowances(owner, spender, amount);\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        require(amount <= balanceOf(sender),\\\"Amount exceeds balance\\\");\\r\\n        require(isPresaleDone(),\\\"Presale yet to close\\\");\\r\\n        if (now > getCurrentEpoch().add(Constants.getEpochLength())) updateEpoch();\\r\\n        uint256 currentFactor = getFactor();\\r\\n        uint256 largeAmount = amount.mul(currentFactor);\\r\\n        uint256 txType;\\r\\n        if (isTaxLess()) {\\r\\n            txType = 3;\\r\\n        } else {\\r\\n            bool lpBurn;\\r\\n            if (isSupportedPool(sender)) {\\r\\n                lpBurn = syncPair(sender);\\r\\n            } else if (isSupportedPool(recipient)){\\r\\n                silentSyncPair(recipient);\\r\\n            } else {\\r\\n                silentSyncPair(_mainPool);\\r\\n            }\\r\\n            txType = _getTxType(sender, recipient, lpBurn);\\r\\n        }\\r\\n        // Buy Transaction from supported pools - requires mint, no utility fee\\r\\n        if (txType == 1) {\\r\\n            uint256 totalMint = getMintValue(sender, amount);\\r\\n            // uint256 mintSize = amount.div(100);\\r\\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\\r\\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\\r\\n            _totalSupply = _totalSupply.add(totalMint);\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        }\\r\\n        // Sells to supported pools or unsupported transfer - requires exit burn and utility fee\\r\\n        else if (txType == 2) {\\r\\n            (uint256 burnSize, uint256 largeBurnSize) = getBurnValues(recipient, amount);\\r\\n            uint256 actualTransferAmount = amount.sub(burnSize);\\r\\n            uint256 largeTransferAmount = actualTransferAmount.mul(currentFactor);\\r\\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\\r\\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeTransferAmount);\\r\\n            _totalSupply = _totalSupply.sub(burnSize);\\r\\n            _largeTotal = _largeTotal.sub(largeBurnSize);\\r\\n            emit Transfer(sender, recipient, actualTransferAmount);\\r\\n            emit Transfer(sender, address(0), burnSize);\\r\\n        } \\r\\n        // Add Liquidity via interface or Remove Liquidity Transaction to supported pools - no fee of any sort\\r\\n        else if (txType == 3) {\\r\\n            _largeBalances[sender] = _largeBalances[sender].sub(largeAmount);\\r\\n            _largeBalances[recipient] = _largeBalances[recipient].add(largeAmount);\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getTxType(address sender, address recipient, bool lpBurn) private returns(uint256) {\\r\\n        uint256 txType = 2;\\r\\n        if (isSupportedPool(sender)) {\\r\\n            if (lpBurn) {\\r\\n                txType = 3;\\r\\n            } else {\\r\\n                txType = 1;\\r\\n            }\\r\\n        } else if (sender == Constants.getRouterAdd()) {\\r\\n            txType = 3;\\r\\n        }\\r\\n        return txType;\\r\\n    }\\r\\n\\r\\n    function setPresaleTime(uint256 time) external onlyOwner() {\\r\\n        require(isPresaleDone() == false, \\\"This cannot be modified after the presale is done\\\");\\r\\n        _presaleTime = time;\\r\\n    }\\r\\n\\r\\n    function setPresalePrice(uint256 priceInWei) external onlyOwner() {\\r\\n        require(!isPresaleDone(),\\\"Can only be set before presale\\\");\\r\\n        _presalePrice = priceInWei;\\r\\n    }\\r\\n\\r\\n    // Presale function\\r\\n    function buyPresale() external payable {\\r\\n        require(!isPresaleDone(), \\\"Presale is already completed\\\");\\r\\n        require(_presaleTime <= now, \\\"Presale hasn't started yet\\\");\\r\\n        require(_presaleParticipation[_msgSender()].add(msg.value) <= Constants.getPresaleIndividualCap(), \\\"Crossed individual cap\\\");\\r\\n        require(_presalePrice != 0, \\\"Presale price is not set\\\");\\r\\n        require(msg.value >= Constants.getPresaleIndividualMin(), \\\"Needs to be above min eth!\\\");\\r\\n        require(!Address.isContract(_msgSender()),\\\"no contracts\\\");\\r\\n        require(tx.gasprice <= Constants.getMaxPresaleGas(),\\\"gas price above limit\\\");\\r\\n        uint256 amountToDist = msg.value.div(_presalePrice);\\r\\n        require(_presaleDist.add(amountToDist) <= Constants.getPresaleCap(), \\\"Presale max cap already reached\\\");\\r\\n        uint256 currentFactor = getFactor();\\r\\n        uint256 largeAmount = amountToDist.mul(currentFactor);\\r\\n        _largeBalances[owner()] = _largeBalances[owner()].sub(largeAmount);\\r\\n        _largeBalances[_msgSender()] = _largeBalances[_msgSender()].add(largeAmount);\\r\\n        emit Transfer(owner(), _msgSender(), amountToDist);\\r\\n        _presaleParticipation[_msgSender()] = _presaleParticipation[_msgSender()].add(msg.value);\\r\\n        _presaleDist = _presaleDist.add(amountToDist);\\r\\n    }\\r\\n\\r\\n    function setPresaleDone() public onlyOwner() {\\r\\n        require(totalSupply() <= Constants.getLaunchSupply(), \\\"Total supply is already minted\\\");\\r\\n        _mintRemaining();\\r\\n        _presaleDone = true;\\r\\n        _createEthPool();\\r\\n    }\\r\\n\\r\\n    function _mintRemaining() private {\\r\\n        require(!isPresaleDone(), \\\"Cannot mint post presale\\\");\\r\\n        addToAccount(address(this),70000 * 10 ** 9);\\r\\n        addToAccount(owner(),15000 * 10 ** 9);\\r\\n        emit Transfer(address(0),address(this),70000 * 10 ** 9);\\r\\n    }\\r\\n\\r\\n    function _createEthPool() private taxlessTx {\\r\\n        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\\r\\n        IUniswapV2Factory uniswapFactory = getUniswapFactory();\\r\\n        address tokenUniswapPair;\\r\\n        if (uniswapFactory.getPair(address(uniswapRouterV2.WETH()), address(this)) == address(0)) {\\r\\n            tokenUniswapPair = uniswapFactory.createPair(\\r\\n            address(uniswapRouterV2.WETH()), address(this));\\r\\n        } else {\\r\\n            tokenUniswapPair = uniswapFactory.getPair(address(this),uniswapRouterV2.WETH());\\r\\n        }\\r\\n        Constants.getDeployerAdd().transfer(Constants.getDeployerCost());\\r\\n        _approve(address(this), 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 7 * 10**4 * 10**9);\\r\\n        uniswapRouterV2.addLiquidityETH{value: address(this).balance}(address(this),\\r\\n            7 * 10**4 * 10**9, 0, 0, address(this), block.timestamp);\\r\\n        addSupportedPool(tokenUniswapPair, address(uniswapRouterV2.WETH()));\\r\\n        _mainPool = tokenUniswapPair;\\r\\n    }\\r\\n\\r\\n    function getBurnValues(address recipient, uint256 amount) internal returns(uint256, uint256) {\\r\\n        uint256 currentFactor = getFactor();\\r\\n        uint256 contractionR;\\r\\n        if (isSupportedPool(recipient)) {\\r\\n            contractionR = (_poolCounters[recipient].tokenBalance).mul(_poolCounters[recipient].startPairTokenBalance).mul(100).div(_poolCounters[recipient].pairTokenBalance).div(_poolCounters[recipient].startTokenBalance);\\r\\n        } else {\\r\\n            contractionR = (_poolCounters[_mainPool].tokenBalance).mul(_poolCounters[_mainPool].startPairTokenBalance).mul(100).div(_poolCounters[_mainPool].pairTokenBalance).div(_poolCounters[_mainPool].startTokenBalance);\\r\\n        }\\r\\n        uint256 burnAmount;\\r\\n        if (contractionR > (Constants.getBaseContractionFactor().add(10000)).div(100)) {\\r\\n            uint256 burnFactor = contractionR.mul(contractionR);\\r\\n            burnAmount = amount.mul(burnFactor.sub(10000)).div(10000);\\r\\n            require(burnAmount <= amount.mul(Constants.getBaseContractionCap()).div(10000),\\\"Burn rate at max, can't sell\\\");\\r\\n        } else {\\r\\n            burnAmount = amount.mul(Constants.getBaseContractionFactor()).div(10000);\\r\\n        }\\r\\n        return (burnAmount, burnAmount.mul(currentFactor));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/external/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/external/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/external/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\r\\n\\r\\nimport './IUniswapV2Router01.sol';\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"/C/Crypto/Projects/zstable/contracts/external/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getBurnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLargeBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLargeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getMintRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolCounters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSupportedPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairToken\",\"type\":\"address\"}],\"name\":\"getUpdatedPoolCounters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"isSupportedPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTaxLess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPresaleDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"setPresalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setPresaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"silentSyncPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UPStable", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}