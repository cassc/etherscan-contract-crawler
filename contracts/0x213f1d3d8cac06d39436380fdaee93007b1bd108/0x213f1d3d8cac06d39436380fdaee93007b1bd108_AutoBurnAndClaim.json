{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AutoBurnAndClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity >=0.8.20;\\n\\nimport {ERC20} from \\\"./interfaces/ERC20.sol\\\";\\n\\n// Gelato Dependency\\nimport {OpsProxy} from \\\"./interfaces/OpsProxy.sol\\\";\\nimport {OpsProxyFactory} from \\\"./interfaces/OpsProxyFactory.sol\\\";\\n\\n// Synthetix Dependency\\nimport {AddressResolver} from \\\"./interfaces/AddressResolver.sol\\\";\\nimport {DelegateApprovals} from \\\"./interfaces/DelegateApprovals.sol\\\";\\nimport {FeePool} from \\\"./interfaces/FeePool.sol\\\";\\nimport {Issuer} from \\\"./interfaces/Issuer.sol\\\";\\nimport {Synthetix} from \\\"./interfaces/Synthetix.sol\\\";\\nimport {SystemSettings} from \\\"./interfaces/SystemSettings.sol\\\";\\n\\ncontract AutoBurnAndClaim {\\n    bytes32 private constant DELEGATE_APPROVALS = \\\"DelegateApprovals\\\";\\n    bytes32 private constant SYSTEM_SETTINGS = \\\"SystemSettings\\\";\\n    bytes32 private constant FEE_POOL = \\\"FeePool\\\";\\n    bytes32 private constant ISSUER = \\\"Issuer\\\";\\n    bytes32 private constant SUSD_PROXY = \\\"ProxyERC20sUSD\\\";\\n    bytes32 private constant SYNTHETIX = \\\"Synthetix\\\";\\n\\n    AddressResolver immutable SNXAddressResolver;\\n    OpsProxyFactory private constant OPS_PROXY_FACTORY =\\n        OpsProxyFactory(0xC815dB16D4be6ddf2685C201937905aBf338F5D7);\\n    DelegateApprovals private delegateApprovals;\\n    FeePool private feePool;\\n    Issuer private issuer;\\n    ERC20 private sUSD;\\n    SystemSettings private systemSettings;\\n    address private SNX;\\n\\n    mapping(address => uint256) public baseFee;\\n\\n    error ZeroAddressResolved(bytes32 name);\\n\\n    constructor(address _SNXAddressResolver) {\\n        SNXAddressResolver = AddressResolver(_SNXAddressResolver);\\n        _rebuildCaches();\\n    }\\n\\n    function checker(\\n        address _account\\n    ) external view returns (bool, bytes memory execPayload) {\\n        (address dedicatedMsgSender, ) = OPS_PROXY_FACTORY.getProxyOf(_account);\\n\\n        // first off, check gas price\\n        uint256 _gasPrice = baseFee[_account];\\n        if(_gasPrice != 0 && block.basefee > _gasPrice) {\\n            return (false, \\\"basefee too high\\\");\\n        }\\n\\n        //second, check claim permission\\n        if(!delegateApprovals.canClaimFor(_account, dedicatedMsgSender) ) {\\n            return (false, \\\"no claim permission for gelato\\\");\\n        }\\n\\n        //third, is reward avaliable to claim?\\n        (uint256 fee, uint256 SNXRewards) = feePool.feesAvailable(_account);\\n        if((fee + SNXRewards) == 0 && feePool.totalRewardsAvailable() == 0) {\\n            return (false, \\\"no reward avaliable\\\");\\n        }\\n\\n        // forth, check burn permission and if need to burn\\n        uint256 issuanceRatio = systemSettings.issuanceRatio();\\n        uint256 cRatio = issuer.collateralisationRatio(_account);\\n\\n        address[] memory targets;\\n        bytes[] memory datas;\\n        uint256[] memory values;\\n\\n        if(cRatio > issuanceRatio) {\\n            uint256 threshold = 1e18 + systemSettings.targetThreshold();\\n            uint256 issuanceAdjusted = issuanceRatio * threshold / 1e18;\\n            if(cRatio > issuanceAdjusted) {\\n                bool burnPerms = delegateApprovals.canBurnFor(_account, dedicatedMsgSender);\\n                if(!burnPerms) {\\n                    return (false, \\\"no burn permission and c-ratio too low\\\");\\n                }\\n                else {\\n                    uint256 debtBalance = issuer.debtBalanceOf(_account, \\\"sUSD\\\");\\n                    uint256 maxIssuable = issuer.maxIssuableSynths(_account);\\n                    uint256 burnAmount = debtBalance - maxIssuable;\\n                    uint256 sUSDBalance = sUSD.balanceOf(_account);\\n                    if(sUSDBalance < burnAmount) {\\n                        return (false, \\\"not enough sUSD to fix c-ratio\\\");\\n                    }\\n                    else {\\n                        targets = new address[](2);\\n                        datas = new bytes[](2);\\n                        values = new uint256[](2);\\n                        targets[0] = SNX;\\n                        targets[1] = address(feePool);\\n                        datas[0] = abi.encodeWithSelector(Synthetix.burnSynthsToTargetOnBehalf.selector, _account);\\n                        datas[1] = abi.encodeWithSelector(feePool.claimOnBehalf.selector, _account);\\n                        values[0] = 0;\\n                        values[1] = 0;\\n                        return (true, \\n                            abi.encodeWithSelector(\\n                                OpsProxy.batchExecuteCall.selector, \\n                                targets,\\n                                datas,\\n                                values));\\n                    }\\n                }\\n            }\\n        }\\n\\n        targets = new address[](1);\\n        datas = new bytes[](1);\\n        values = new uint256[](1);\\n        targets[0] = address(feePool);\\n        datas[0] = abi.encodeWithSelector(feePool.claimOnBehalf.selector, _account);\\n        // values[0] = 0;\\n        return (true,\\n                abi.encodeWithSelector(\\n                    OpsProxy.batchExecuteCall.selector,\\n                    targets,\\n                    datas,\\n                    values\\n                    )\\n            );\\n    }\\n\\n    function setBaseFee(uint256 _baseFee) external {\\n        baseFee[msg.sender] = _baseFee;\\n    }\\n\\n    function rebuildCaches() external {\\n        _rebuildCaches();\\n    }\\n\\n    function _rebuildCaches() internal {\\n        feePool = FeePool(getAddress(FEE_POOL));\\n        delegateApprovals = DelegateApprovals(getAddress(DELEGATE_APPROVALS));\\n        systemSettings = SystemSettings(getAddress(SYSTEM_SETTINGS));\\n        issuer = Issuer(getAddress(ISSUER));\\n        SNX = getAddress(SYNTHETIX);\\n        sUSD = ERC20(getAddress(SUSD_PROXY));\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address resolved = SNXAddressResolver.getAddress(name);\\n        if (resolved == address(0)) {\\n            revert ZeroAddressResolved(name);\\n        }\\n        return resolved;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface ERC20 {\\n    function balanceOf(address _who) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/OpsProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface OpsProxy {\\n    function batchExecuteCall(\\n        address[] calldata _targets,\\n        bytes[] calldata _datas,\\n        uint256[] calldata _values\\n    ) external payable;\\n\\n    function owner() external returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/OpsProxyFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface OpsProxyFactory {\\n    function getProxyOf(address account) external view returns (address, bool);\\n\\n    function deployFor(address owner) external returns (address payable proxy);\\n\\n    function ops() external returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/AddressResolver.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface AddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/DelegateApprovals.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface DelegateApprovals {\\n    function canIssueFor(\\n        address authoriser,\\n        address delegate\\n    ) external view returns (bool);\\n    function approveIssueOnBehalf(address delegate) external;\\n\\n    function canClaimFor(address authoriser, address delegate) external view returns (bool);\\n\\n    function approveClaimOnBehalf(address delegate) external;\\n\\n    function canBurnFor(address authoriser, address delegate) external view returns (bool);\\n\\n    function approveBurnOnBehalf(address delegate) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/FeePool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface FeePool {\\n    function feesAvailable(\\n        address account\\n    ) external view returns (uint256, uint256);\\n\\n    function totalRewardsAvailable() external view returns (uint);\\n\\n    function claimOnBehalf(address claimingForAddress) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/Issuer.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface Issuer {\\n    function collateralisationRatio(address issuer) external view returns (uint);\\n\\n    function debtBalanceOf(address _issuer, bytes32 currencyKey) external view returns (uint256);\\n\\n    function maxIssuableSynths(address _issuer) external view returns (uint);\\n}\"\r\n    },\r\n    \"contracts/interfaces/Synthetix.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface Synthetix {\\n    function remainingIssuableSynths(address issuer)\\n        external\\n        view\\n        returns (\\n            uint maxIssuable,\\n            uint alreadyIssued,\\n            uint totalSystemDebt\\n        );\\n    \\n    function collateralisationRatio(address issuer) external view returns (uint);\\n\\n    function issueMaxSynthsOnBehalf(address issueForAddress) external;\\n\\n    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\\n    function burnSynthsToTarget() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/SystemSettings.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\ninterface SystemSettings {\\n    function issuanceRatio() external view returns (uint);\\n\\n    function targetThreshold() external view returns (uint);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=node_modules/ds-test/src/\",\r\n      \"forge-std/=node_modules/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SNXAddressResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"}],\"name\":\"ZeroAddressResolved\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"baseFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebuildCaches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFee\",\"type\":\"uint256\"}],\"name\":\"setBaseFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AutoBurnAndClaim", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004e3b31eb0e5cb73641ee1e65e7dcefe520ba3ef2", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://47edb1c6a02d9fd255464d7e6f8041809f58191b873a8062e64b40053ac09cdb"}