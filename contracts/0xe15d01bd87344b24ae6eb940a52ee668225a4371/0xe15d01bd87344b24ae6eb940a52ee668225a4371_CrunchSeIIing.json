{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CrunchFakeSelling.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"./erc677/IERC677Receiver.sol\\\";\\r\\nimport \\\"./CrunchSelling.sol\\\";\\r\\n\\r\\ncontract CrunchSeIIing is Ownable, IERC677Receiver {\\r\\n    /** @dev Emitted when the delegate contract is changed. */\\r\\n    event DelegateChanged(address indexed previousDelegate, address indexed newDelegate);\\r\\n\\r\\n    /** @dev Emitted when `addr` sold $CRUNCHs for $USDCs. */\\r\\n    event Sell(address indexed addr, uint256 inputAmount, uint256 outputAmount, uint256 price);\\r\\n\\r\\n    CrunchSelling public delegate;\\r\\n    bool private unused;\\r\\n\\r\\n    constructor(address _delegate) {\\r\\n        _setDelegate(_delegate);\\r\\n    }\\r\\n\\r\\n    /** @dev CRUNCH erc20 address. */\\r\\n    function crunch() public view returns (IERC20Metadata) {\\r\\n        return delegate.crunch();\\r\\n    }\\r\\n\\r\\n    /** @dev USDC erc20 address. */\\r\\n    function usdc() public view returns (IERC20) {\\r\\n        return delegate.usdc();\\r\\n    }\\r\\n\\r\\n    /** @dev How much USDC must be exchanged for 1 CRUNCH. */\\r\\n    function price() public view returns (uint256) {\\r\\n        return delegate.price();\\r\\n    }\\r\\n\\r\\n    /** @dev Cached value of 1 CRUNCH (1**18). */\\r\\n    function oneCrunch() public view returns (uint256) {\\r\\n        return delegate.oneCrunch();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sell `amount` CRUNCH to USDC.\\r\\n     *\\r\\n     * Emits a {Sell} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller's CRUNCH allowance is greater or equal to `amount`.\\r\\n     * - caller's CRUNCH balance is greater or equal to `amount`.\\r\\n     * - caller is not the owner.\\r\\n     * - `amount` is not zero.\\r\\n     * - the reserve has enough USDC after conversion.\\r\\n     *\\r\\n     * @dev the implementation use a {IERC20-transferFrom(address, address, uint256)} call to transfer the CRUNCH from the caller to the owner.\\r\\n     *\\r\\n     * @param amount CRUNCH amount to sell.\\r\\n     */\\r\\n    function sell(uint256 amount) public {\\r\\n        address seller = _msgSender();\\r\\n\\r\\n        require(crunch().allowance(seller, address(this)) >= amount, \\\"Selling: user's allowance is not enough\\\");\\r\\n        require(crunch().balanceOf(seller) >= amount, \\\"Selling: user's balance is not enough\\\");\\r\\n\\r\\n        crunch().transferFrom(seller, owner(), amount);\\r\\n\\r\\n        _sell(seller, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sell `amount` CRUNCH to USDC from a `transferAndCall`, avoiding the usage of an `approve` call.\\r\\n     *\\r\\n     * Emits a {Sell} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the crunch token.\\r\\n     * - `sender` is not the owner.\\r\\n     * - `amount` is not zero.\\r\\n     * - the reserve has enough USDC after conversion.\\r\\n     *\\r\\n     * @dev the implementation use a {IERC20-transfer(address, uint256)} call to transfer the received CRUNCH to the owner.\\r\\n     */\\r\\n    function onTokenTransfer(address sender, uint256 value, bytes memory data) external override {\\r\\n        require(address(crunch()) == _msgSender(), \\\"Selling: caller must be the crunch token\\\");\\r\\n\\r\\n        crunch().transfer(owner(), value);\\r\\n\\r\\n        _sell(sender, value);\\r\\n\\r\\n        data; /* silence unused */\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal selling function.\\r\\n     *\\r\\n     * Emits a {Sell} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `seller` is not the owner.\\r\\n     * - `amount` is not zero.\\r\\n     * - the reserve has enough USDC after conversion.\\r\\n     *\\r\\n     * @param seller seller address.\\r\\n     * @param amount CRUNCH amount to sell.\\r\\n     */\\r\\n    function _sell(address seller, uint256 amount) internal {\\r\\n        require(seller != owner(), \\\"Selling: owner cannot sell\\\");\\r\\n        require(amount != 0, \\\"Selling: cannot sell 0 unit\\\");\\r\\n\\r\\n        uint256 tokens = conversion(amount);\\r\\n        require(tokens != 0, \\\"Selling: selling will result in getting nothing\\\");\\r\\n        require(reserve() >= tokens, \\\"Selling: reserve is not big enough\\\");\\r\\n\\r\\n        emit Sell(seller, amount, tokens, price());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev convert a value in CRUNCH to USDC using the current price.\\r\\n     *\\r\\n     * @param inputAmount input value to convert.\\r\\n     * @return outputAmount the converted amount.\\r\\n     */\\r\\n    function conversion(uint256 inputAmount) public view returns (uint256 outputAmount) {\\r\\n        return delegate.conversion(inputAmount);\\r\\n    }\\r\\n\\r\\n    /** @return the USDC balance of the delegate contract. */\\r\\n    function reserve() public view returns (uint256) {\\r\\n        return delegate.reserve();\\r\\n    }\\r\\n\\r\\n    /** @return the USDC balance of the contract. */\\r\\n    function selfReserve() public view returns (uint256) {\\r\\n        return usdc().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Empty the USDC reserve.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     */\\r\\n    function emptyReserve() public onlyOwner {\\r\\n        bool success = _emptyReserve();\\r\\n\\r\\n        /* prevent useless call */\\r\\n        require(success, \\\"Selling: reserve already empty\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Empty the CRUNCH of the smart-contract.\\r\\n     * Must never be called because there is no need to send CRUNCH to this contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     */\\r\\n    function returnCrunchs() public onlyOwner {\\r\\n        bool success = _returnCrunchs();\\r\\n\\r\\n        /* prevent useless call */\\r\\n        require(success, \\\"Selling: no crunch\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the delegate contract address.\\r\\n     *\\r\\n     * Emits a {DelegateChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     *\\r\\n     * @param newDelegate new delete address.\\r\\n     */\\r\\n    function setDelegate(address newDelegate) external onlyOwner {\\r\\n        _setDelegate(newDelegate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the CRUNCH token address.\\r\\n     *\\r\\n     * Emits a {CrunchChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     *\\r\\n     * @param newCrunch new CRUNCH address.\\r\\n     */\\r\\n    function setCrunch(address newCrunch) external onlyOwner {\\r\\n        newCrunch; /* silence */\\r\\n        unused = true;\\r\\n\\r\\n        revert(\\\"Selling: use delegate\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the USDC token address.\\r\\n     *\\r\\n     * Emits a {UsdcChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     *\\r\\n     * @param newUsdc new USDC address.\\r\\n     */\\r\\n    function setUsdc(address newUsdc) external onlyOwner {\\r\\n        newUsdc; /* silence */\\r\\n        unused = true;\\r\\n\\r\\n        revert(\\\"Selling: use delegate\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the price.\\r\\n     *\\r\\n     * Emits a {PriceChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     *\\r\\n     * @param newPrice new price value.\\r\\n     */\\r\\n    function setPrice(uint256 newPrice) external onlyOwner {\\r\\n        newPrice; /* silence */\\r\\n        unused = true;\\r\\n\\r\\n        revert(\\\"Selling: use delegate\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Destroy the contract.\\r\\n     * This will send the tokens (CRUNCH and USDC) back to the owner.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     */\\r\\n    function destroy() external onlyOwner {\\r\\n        _emptyReserve();\\r\\n        _returnCrunchs();\\r\\n\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the delegate contract address.\\r\\n     *\\r\\n     * Emits a {DelegateChanged} event.\\r\\n     *\\r\\n     * @param newDelegate new delegate contract address.\\r\\n     */\\r\\n    function _setDelegate(address newDelegate) internal {\\r\\n        address previous = address(delegate);\\r\\n\\r\\n        delegate = CrunchSelling(newDelegate);\\r\\n\\r\\n        emit DelegateChanged(previous, newDelegate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Empty the reserve.\\r\\n     *\\r\\n     * @return true if at least 1 USDC has been transfered, false otherwise.\\r\\n     */\\r\\n    function _emptyReserve() internal returns (bool) {\\r\\n        uint256 amount = selfReserve();\\r\\n\\r\\n        if (amount != 0) {\\r\\n            usdc().transfer(owner(), amount);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Return the CRUNCHs.\\r\\n     *\\r\\n     * @return true if at least 1 CRUNCH has been transfered, false otherwise.\\r\\n     */\\r\\n    function _returnCrunchs() internal returns (bool) {\\r\\n        uint256 amount = crunch().balanceOf(address(this));\\r\\n\\r\\n        if (amount != 0) {\\r\\n            crunch().transfer(owner(), amount);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/erc677/IERC677Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC677Receiver {\\r\\n    function onTokenTransfer(\\r\\n        address sender,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/CrunchSelling.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\nimport \\\"./erc677/IERC677Receiver.sol\\\";\\r\\n\\r\\ncontract CrunchSelling is Ownable, Pausable, IERC677Receiver {\\r\\n    /** @dev Emitted when the crunch address is changed. */\\r\\n    event CrunchChanged(\\r\\n        address indexed previousCrunch,\\r\\n        address indexed newCrunch\\r\\n    );\\r\\n\\r\\n    /** @dev Emitted when the usdc address is changed. */\\r\\n    event UsdcChanged(address indexed previousUsdc, address indexed newUsdc);\\r\\n\\r\\n    /** @dev Emitted when the price is changed. */\\r\\n    event PriceChanged(uint256 previousPrice, uint256 newPrice);\\r\\n\\r\\n    /** @dev Emitted when `addr` sold $CRUNCHs for $USDCs. */\\r\\n    event Sell(\\r\\n        address indexed addr,\\r\\n        uint256 inputAmount,\\r\\n        uint256 outputAmount,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    /** @dev CRUNCH erc20 address. */\\r\\n    IERC20Metadata public crunch;\\r\\n\\r\\n    /** @dev USDC erc20 address. */\\r\\n    IERC20 public usdc;\\r\\n\\r\\n    /** @dev How much USDC must be exchanged for 1 CRUNCH. */\\r\\n    uint256 public price;\\r\\n\\r\\n    /** @dev Cached value of 1 CRUNCH (1**18). */\\r\\n    uint256 public oneCrunch;\\r\\n\\r\\n    constructor(\\r\\n        address _crunch,\\r\\n        address _usdc,\\r\\n        uint256 initialPrice\\r\\n    ) {\\r\\n        _setCrunch(_crunch);\\r\\n        _setUsdc(_usdc);\\r\\n        _setPrice(initialPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sell `amount` CRUNCH to USDC.\\r\\n     *\\r\\n     * Emits a {Sell} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller's CRUNCH allowance is greater or equal to `amount`.\\r\\n     * - caller's CRUNCH balance is greater or equal to `amount`.\\r\\n     * - the contract must not be paused.\\r\\n     * - caller is not the owner.\\r\\n     * - `amount` is not zero.\\r\\n     * - the reserve has enough USDC after conversion.\\r\\n     *\\r\\n     * @dev the implementation use a {IERC20-transferFrom(address, address, uint256)} call to transfer the CRUNCH from the caller to the owner.\\r\\n     *\\r\\n     * @param amount CRUNCH amount to sell.\\r\\n     */\\r\\n    function sell(uint256 amount) public whenNotPaused {\\r\\n        address seller = _msgSender();\\r\\n\\r\\n        require(\\r\\n            crunch.allowance(seller, address(this)) >= amount,\\r\\n            \\\"Selling: user's allowance is not enough\\\"\\r\\n        );\\r\\n        require(\\r\\n            crunch.balanceOf(seller) >= amount,\\r\\n            \\\"Selling: user's balance is not enough\\\"\\r\\n        );\\r\\n\\r\\n        crunch.transferFrom(seller, owner(), amount);\\r\\n\\r\\n        _sell(seller, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sell `amount` CRUNCH to USDC from a `transferAndCall`, avoiding the usage of an `approve` call.\\r\\n     *\\r\\n     * Emits a {Sell} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the crunch token.\\r\\n     * - the contract must not be paused.\\r\\n     * - `sender` is not the owner.\\r\\n     * - `amount` is not zero.\\r\\n     * - the reserve has enough USDC after conversion.\\r\\n     *\\r\\n     * @dev the implementation use a {IERC20-transfer(address, uint256)} call to transfer the received CRUNCH to the owner.\\r\\n     */\\r\\n    function onTokenTransfer(\\r\\n        address sender,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) external override onlyCrunch whenNotPaused {\\r\\n        data; /* silence unused */\\r\\n\\r\\n        crunch.transfer(owner(), value);\\r\\n\\r\\n        _sell(sender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Internal selling function.\\r\\n     *\\r\\n     * Emits a {Sell} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `seller` is not the owner.\\r\\n     * - `amount` is not zero.\\r\\n     * - the reserve has enough USDC after conversion.\\r\\n     *\\r\\n     * @param seller seller address.\\r\\n     * @param amount CRUNCH amount to sell.\\r\\n     */\\r\\n    function _sell(address seller, uint256 amount) internal {\\r\\n        require(seller != owner(), \\\"Selling: owner cannot sell\\\");\\r\\n        require(amount != 0, \\\"Selling: cannot sell 0 unit\\\");\\r\\n\\r\\n        uint256 tokens = conversion(amount);\\r\\n        require(tokens != 0, \\\"Selling: selling will result in getting nothing\\\");\\r\\n        require(reserve() >= tokens, \\\"Selling: reserve is not big enough\\\");\\r\\n\\r\\n        usdc.transfer(seller, tokens);\\r\\n\\r\\n        emit Sell(seller, amount, tokens, price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev convert a value in CRUNCH to USDC using the current price.\\r\\n     *\\r\\n     * @param inputAmount input value to convert.\\r\\n     * @return outputAmount the converted amount.\\r\\n     */\\r\\n    function conversion(uint256 inputAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 outputAmount)\\r\\n    {\\r\\n        return (inputAmount * price) / oneCrunch;\\r\\n    }\\r\\n\\r\\n    /** @return the USDC balance of the contract. */\\r\\n    function reserve() public view returns (uint256) {\\r\\n        return usdc.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Empty the USDC reserve.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function emptyReserve() public onlyOwner whenPaused {\\r\\n        bool success = _emptyReserve();\\r\\n\\r\\n        /* prevent useless call */\\r\\n        require(success, \\\"Selling: reserve already empty\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Empty the CRUNCH of the smart-contract.\\r\\n     * Must never be called because there is no need to send CRUNCH to this contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function returnCrunchs() public onlyOwner whenPaused {\\r\\n        bool success = _returnCrunchs();\\r\\n\\r\\n        /* prevent useless call */\\r\\n        require(success, \\\"Selling: no crunch\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Pause the contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     * - contract must not already be paused.\\r\\n     */\\r\\n    function pause()\\r\\n        external\\r\\n        onlyOwner /* whenNotPaused */\\r\\n    {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Unpause the contract.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     * - contract must be already paused.\\r\\n     */\\r\\n    function unpause()\\r\\n        external\\r\\n        onlyOwner /* whenPaused */\\r\\n    {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the CRUNCH token address.\\r\\n     *\\r\\n     * Emits a {CrunchChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     * - the contract must be paused.\\r\\n     *\\r\\n     * @param newCrunch new CRUNCH address.\\r\\n     */\\r\\n    function setCrunch(address newCrunch) external onlyOwner whenPaused {\\r\\n        _setCrunch(newCrunch);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the USDC token address.\\r\\n     *\\r\\n     * Emits a {UsdcChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     * - the contract must be paused.\\r\\n     *\\r\\n     * @param newUsdc new USDC address.\\r\\n     */\\r\\n    function setUsdc(address newUsdc) external onlyOwner whenPaused {\\r\\n        _setUsdc(newUsdc);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the price.\\r\\n     *\\r\\n     * Emits a {PriceChanged} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     *\\r\\n     * @param newPrice new price value.\\r\\n     */\\r\\n    function setPrice(uint256 newPrice) external onlyOwner {\\r\\n        _setPrice(newPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Destroy the contract.\\r\\n     * This will send the tokens (CRUNCH and USDC) back to the owner.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - caller must be the owner.\\r\\n     * - the contract must be paused.\\r\\n     */\\r\\n    function destroy() external onlyOwner whenPaused {\\r\\n        _emptyReserve();\\r\\n        _returnCrunchs();\\r\\n\\r\\n        selfdestruct(payable(owner()));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the CRUNCH token address.\\r\\n     *\\r\\n     * Emits a {CrunchChanged} event.\\r\\n     *\\r\\n     * @dev this will update the `oneCrunch` value.\\r\\n     *\\r\\n     * @param newCrunch new CRUNCH address.\\r\\n     */\\r\\n    function _setCrunch(address newCrunch) internal {\\r\\n        address previous = address(crunch);\\r\\n\\r\\n        crunch = IERC20Metadata(newCrunch);\\r\\n        oneCrunch = 10**crunch.decimals();\\r\\n\\r\\n        emit CrunchChanged(previous, newCrunch);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the USDC token address.\\r\\n     *\\r\\n     * Emits a {UsdcChanged} event.\\r\\n     *\\r\\n     * @param newUsdc new USDC address.\\r\\n     */\\r\\n    function _setUsdc(address newUsdc) internal {\\r\\n        address previous = address(usdc);\\r\\n\\r\\n        usdc = IERC20(newUsdc);\\r\\n\\r\\n        emit UsdcChanged(previous, newUsdc);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Update the price.\\r\\n     *\\r\\n     * Emits a {PriceChanged} event.\\r\\n     *\\r\\n     * @param newPrice new price value.\\r\\n     */\\r\\n    function _setPrice(uint256 newPrice) internal {\\r\\n        uint256 previous = price;\\r\\n\\r\\n        price = newPrice;\\r\\n\\r\\n        emit PriceChanged(previous, newPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Empty the reserve.\\r\\n     *\\r\\n     * @return true if at least 1 USDC has been transfered, false otherwise.\\r\\n     */\\r\\n    function _emptyReserve() internal returns (bool) {\\r\\n        uint256 amount = reserve();\\r\\n\\r\\n        if (amount != 0) {\\r\\n            usdc.transfer(owner(), amount);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Return the CRUNCHs.\\r\\n     *\\r\\n     * @return true if at least 1 CRUNCH has been transfered, false otherwise.\\r\\n     */\\r\\n    function _returnCrunchs() internal returns (bool) {\\r\\n        uint256 amount = crunch.balanceOf(address(this));\\r\\n\\r\\n        if (amount != 0) {\\r\\n            crunch.transfer(owner(), amount);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    modifier onlyCrunch() {\\r\\n        require(\\r\\n            address(crunch) == _msgSender(),\\r\\n            \\\"Selling: caller must be the crunch token\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"conversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crunch\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"contract CrunchSelling\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emptyReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneCrunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnCrunchs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCrunch\",\"type\":\"address\"}],\"name\":\"setCrunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDelegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUsdc\",\"type\":\"address\"}],\"name\":\"setUsdc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CrunchSeIIing", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000022525935cb0f5c27ae025fe5a403bc7a0eb9c857", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}