{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract Deelance_Vesting is Ownable {\r\n    IERC20 public assignedToken;\r\n    \r\n    // mapping of user addresses to their token balances\r\n    mapping(address => uint256) public balances;\r\n    mapping(address => uint256) public lastWithdrawalDate;\r\n\r\n    bool public paused = false;\r\n\r\n    constructor(IERC20 _token, address _owner) Ownable(_owner) {\r\n        assignedToken = _token;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    // owner can pause/unpause the contract\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        paused = _paused;\r\n    }\r\n\r\n    // only callable by owner, used to add users to the contract and assign them token balances\r\n    function addUsers(address[] calldata _users, uint256[] calldata _amounts) external onlyOwner  {\r\n        require(_users.length == _amounts.length, \"Users and amounts arrays must have the same length\");\r\n\r\n        uint256 totalAmount = 0;\r\n        for(uint256 i = 0; i < _users.length; i++) {\r\n            balances[_users[i]] += _amounts[i];\r\n            totalAmount += _amounts[i];\r\n        }\r\n        \r\n        require(assignedToken.transferFrom(msg.sender, address(this), totalAmount), \"Token transfer failed\");\r\n    }\r\n\r\n\r\n    // users can claim their tokens by calling this function\r\n    function Vesting_Claim() external whenNotPaused {\r\n        uint256 amount = balances[msg.sender];\r\n        require(amount > 0, \"No tokens to claim\");\r\n        require(assignedToken.balanceOf(address(this)) >= amount, \"Not enough tokens in the contract\");\r\n        \r\n        uint256 monthsElapsed = _monthsSinceLastWithdrawal(msg.sender);\r\n        \r\n        uint256 allowedWithdrawal = (amount * 10 / 100) * monthsElapsed; // 10% for each month\r\n        \r\n        require(allowedWithdrawal > 0, \"You have already withdrawn your allowed amount for this month.\");\r\n\r\n        if (allowedWithdrawal > amount) {\r\n            allowedWithdrawal = amount;\r\n        }\r\n        \r\n        // update balance and last withdrawal date before transfer to prevent reentrancy attacks\r\n        balances[msg.sender] -= allowedWithdrawal;\r\n        lastWithdrawalDate[msg.sender] = block.timestamp;\r\n        \r\n        require(assignedToken.transfer(msg.sender, allowedWithdrawal), \"Token transfer failed\");\r\n    }\r\n\r\n    function _monthsSinceLastWithdrawal(address user) internal view returns (uint256) {\r\n        if (lastWithdrawalDate[user] == 0) {\r\n            return 1; // If the user hasn't withdrawn before, they can withdraw for the first month.\r\n        }\r\n        uint256 timeDiff = block.timestamp - lastWithdrawalDate[user];\r\n        return timeDiff / 30 days;\r\n    }\r\n    \r\n    // owner can withdraw any unclaimed tokens of the assigned type\r\n    function withdraw() external onlyOwner {\r\n        uint256 contractBalance = assignedToken.balanceOf(address(this));\r\n        require(contractBalance > 0, \"No tokens to withdraw\");\r\n        \r\n        require(assignedToken.transfer(owner(), contractBalance), \"Token transfer failed\");\r\n    }\r\n\r\n    // only callable by owner, used to remove a user from the contract and zero their balance\r\n    function removeUser(address _user) external onlyOwner {\r\n        require(balances[_user] > 0, \"User does not exist or balance is already zero\");\r\n        balances[_user] = 0;\r\n    }\r\n\r\n    // only callable by owner, used to modify the token amount of multiple users\r\n    function modifyUserAmounts(address[] memory _users, uint256[] memory _newAmounts) external onlyOwner {\r\n        require(_users.length == _newAmounts.length, \"Users and amounts length mismatch\");\r\n\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            address currentUser = _users[i];\r\n            require(balances[currentUser] > 0, \"User does not exist\");\r\n            balances[currentUser] = _newAmounts[i];\r\n        }\r\n    }\r\n\r\n\r\n    // owner can withdraw any type of ERC20 tokens\r\n    function withdrawOtherTokens(IERC20 _token) external onlyOwner {\r\n        uint256 contractBalance = _token.balanceOf(address(this));\r\n        require(contractBalance > 0, \"No tokens to withdraw\");\r\n\r\n        require(_token.transfer(owner(), contractBalance), \"Token transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Vesting_Claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assignedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastWithdrawalDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newAmounts\",\"type\":\"uint256[]\"}],\"name\":\"modifyUserAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawOtherTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Deelance_Vesting", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007d60de2e7d92cb5c863bc82f8d59b37c59fc0a7a000000000000000000000000b7f5d500a33b199d20a22b6e93c73f8dcbac5ea9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d2a3b65106cb33ed7e055f3cbcf8590a16a0f193768240f0bb6effbcbbbcf86"}