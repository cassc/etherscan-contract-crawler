pragma solidity ^0.8.9;

import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "../libs/Permission.sol";
import "./IWishDaMo.sol";
/**
 * This is an DACDAO contract implementation of NFToken with metadata extension
 */
contract wishDaMo is 
    Ownable,
    Permission,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable,
    IWishDaMo
    
{

using Counters for Counters.Counter;
Counters.Counter private _tokenIdTracker;

mapping(uint256 => string) tokenChainUrlMap;
using Strings for uint256;

mapping(uint256 => uint8) nftGene;
mapping(uint256 => uint8) nftSource;
uint8 damoType = 2;

function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        if(bytes(tokenChainUrlMap[tokenId]).length>0){
            return tokenChainUrlMap[tokenId];
        }else{
            string memory baseURI = _baseURI();
            return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI,"/2/",uint256(nftGene[tokenId]).toString(),"/", tokenId.toString())) : "";
        }
}

function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {

        //
        if (nftGene[tokenId] ==2 && from !=address(0) && to !=address(0) ){
            revert("can't trans");
        }

        super._beforeTokenTransfer(from, to, tokenId);
        
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

/**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have pauser role to unpause");
        _unpause();
    }

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    //bytes32 public constant MANAGER_ROLE = keccak256("MANAGER_ROLE");
    string private _baseTokenURI;

 
  /**
   * @dev Contract constructor. Sets metadata extension `name` and `symbol`.
   */ 
  constructor(
        ) ERC721("PDN_Daruma","PDN_Daruma") 
  {


    _baseTokenURI = "https://intest.tengudaruma.com/work/nft/";
    _setupRole(MINTER_ROLE, _msgSender());
    _setupRole(PAUSER_ROLE, _msgSender());
    _tokenIdTracker.increment();
  }
  
   function setTokenURI(string calldata baseTokenURI) public onlyRole(MANAGER_ROLE){
        _baseTokenURI = baseTokenURI;
   }
 
   function setTokenChainUrl(uint256 tokenId,string calldata baseTokenURI)public onlyRole(MANAGER_ROLE){
       tokenChainUrlMap[tokenId] = baseTokenURI;
   }

   function batchSetTokenChainUrl(uint256[] memory tokenIds,string[] calldata baseTokenURIs)public onlyRole(MANAGER_ROLE){

       for(uint256 i=0;i<tokenIds.length;i++){
           tokenChainUrlMap[tokenIds[i]] = baseTokenURIs[i];
       }
       
   }

  /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, uint256 tokenId,uint8 source) public override {
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
        _innerMint(to, tokenId,1,source);
    } 

    function mintNFT(address to,uint8 genera,uint8 source) public  override returns(uint256){
        require(genera>0,"genera error");
        require(hasRole(MINTER_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
        uint256 tokenId = _tokenIdTracker.current();
        _tokenIdTracker.increment();
        _innerMint(to, tokenId,genera,source);
        return tokenId;
    }

    function _innerMint(address to, uint256 tokenId,uint8 genera,uint8 source) internal{
        require(genera>0,"genera error");
        _safeMint(to, tokenId);
        nftGene[tokenId] = genera;
        nftSource[tokenId] = source;
    }
    
     function existsTokenId(uint256 tokenId)   view public override returns (bool) {
         return _exists(tokenId);
     }
    
    function setupMintRole(address _addr) public{
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
        _setupRole(MINTER_ROLE, _addr);
    }

    function revokeMintRole(address _addr) public{
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "ERC721PresetMinterPauserAutoId: must have minter role to mint");
        _revokeRole(MINTER_ROLE, _addr);
    }

    function getId() public override  view returns(uint256){
        return _tokenIdTracker.current();
    }
    
    function tokenDetail(uint256 tokenId) public override view returns (uint8,uint8,string memory){
        return (damoType,nftGene[tokenId],tokenURI(tokenId));
    }
}