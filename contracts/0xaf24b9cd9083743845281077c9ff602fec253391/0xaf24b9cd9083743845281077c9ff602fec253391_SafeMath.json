{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// SafeMath\u5e93\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract SharkCoin {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \"Shark Coin\";\r\n    string public symbol = \"SHARK\";\r\n    uint8 public decimals = 18;\r\n    uint256 public totalSupply = 100000000000 * (10 ** uint256(decimals));\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply; // Initially assign all tokens to the contract's creator.\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value, \"Insufficient balance.\");\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value, \"Insufficient balance.\");\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}", "ABI": "[]", "ContractName": "SafeMath", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b823b34ec2a05a49f14d3f48c860b71fe9894accdb00255521f753028a9df336"}