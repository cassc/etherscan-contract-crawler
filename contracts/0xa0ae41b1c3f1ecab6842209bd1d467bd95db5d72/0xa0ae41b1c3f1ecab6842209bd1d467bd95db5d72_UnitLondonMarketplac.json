{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface INFT {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n}\r\n\r\ncontract UnitLondonMarketplace {\r\n    struct NFT {\r\n        address artist;\r\n        address collection;\r\n        uint256 tokenId;\r\n        uint256 price;\r\n    }\r\n\r\n    event NFTSold(address collection, uint256 tokenId, address to);\r\n    event HyperMintRegistered(address collection);\r\n\r\n    address public owner;\r\n    uint256 public feePercent = 30; // 30%\r\n\r\n    NFT[] public listings;\r\n    mapping(bytes32 => uint256) public signs;\r\n    mapping(address => bool) hypermints;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n\r\n    function setFeePercent(uint256 newFeePercent) external onlyOwner {\r\n        feePercent = newFeePercent;\r\n    }\r\n\r\n    function registerHyperMint(address[] calldata collections) external onlyOwner {\r\n      for (uint256 i; i < collections.length; i++) {\r\n        address collection = collections[i];\r\n        if (!hypermints[collection]) {\r\n          hypermints[collection] = true;\r\n          emit HyperMintRegistered(collection);\r\n        }\r\n      }\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function escapeTokens(address token, uint256 amount) external onlyOwner {\r\n        INFT(token).transferFrom(address(this), owner, amount);\r\n    }\r\n\r\n    function listNFT(\r\n        address artist,\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    ) external onlyOwner {\r\n        require(INFT(collection).ownerOf(tokenId) == address(this));\r\n        bytes32 sign = keccak256(abi.encodePacked(collection, tokenId));\r\n        require(signs[sign] == 0);\r\n        listings.push(NFT(artist, collection, tokenId, price));\r\n        uint256 listingId = listings.length;\r\n        signs[sign] = listingId;\r\n    }\r\n\r\n    function updateListing(\r\n        address collection,\r\n        uint256 tokenId,\r\n        uint256 price\r\n    ) external onlyOwner {\r\n        bytes32 sign = keccak256(abi.encodePacked(collection, tokenId));\r\n        uint256 listingId = signs[sign];\r\n        listings[listingId - 1].price = price;\r\n    }\r\n\r\n    function cancelListing(address collection, uint256 tokenId)\r\n        external\r\n        onlyOwner\r\n    {\r\n        bytes32 sign = keccak256(abi.encodePacked(collection, tokenId));\r\n        require(signs[sign] > 0);\r\n        delete signs[sign];\r\n        INFT(collection).transferFrom(address(this), owner, tokenId);\r\n    }\r\n\r\n    function buy(address collection, uint256 tokenId) external payable {\r\n        bytes32 sign = keccak256(abi.encodePacked(collection, tokenId));\r\n        uint256 listingId = signs[sign];\r\n        require(signs[sign] > 0);\r\n        require(listings[listingId - 1].price <= msg.value);\r\n        uint256 fee = (msg.value * feePercent) / 100;\r\n        payable(owner).transfer(fee);\r\n        payable(listings[listingId - 1].artist).transfer(msg.value - fee);\r\n        delete signs[sign];\r\n        INFT(collection).transferFrom(address(this), msg.sender, tokenId);\r\n        emit NFTSold(collection, tokenId, msg.sender);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"HyperMintRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"NFTSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"escapeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"artist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"registerHyperMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UnitLondonMarketplace", "CompilerVersion": "v0.8.1+commit.df193b15", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d4e25af3a780a85ddf72d6c585088a160e07173e9e2ddfe7ca3ee9687c87ca17"}