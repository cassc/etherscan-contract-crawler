{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC900 standard with custom modifications.\\n *\\n * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\\n */\\ninterface IStaking {\\n  /**\\n   * @dev Emitted when the `user` stakes an `amount` of tokens and\\n   * passes arbitrary `data`, therefore `total` is changed as well,\\n   * `personalStakeIndex`, `unlockedTimestamp` and `stakePercentageBasisPoints` are captured\\n   * according to the chosen stake option.\\n   */\\n  event LogStaked(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 personalStakeIndex,\\n    uint256 unlockedTimestamp,\\n    uint16 stakePercentageBasisPoints,\\n    uint256 total,\\n    bytes data\\n  );\\n\\n  /**\\n   * @dev Emitted when the `user` unstakes an `amount` of tokens and\\n   * passes arbitrary `data`, therefore `total` is changed as well,\\n   * `personalStakeIndex` and `stakeReward` are captured.\\n   */\\n  event LogUnstaked(\\n    address indexed user,\\n    uint256 amount,\\n    uint256 personalStakeIndex,\\n    uint256 stakeReward,\\n    uint256 total,\\n    bytes data\\n  );\\n\\n  /**\\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the user\\n   * @notice MUST trigger Staked event\\n   * @param stakeOptionIndex uint8 the chosen stake option\\n   * @param amount uint256 the amount of tokens to stake\\n   * @param data bytes optional data to include in the Stake event\\n   */\\n  function stake(\\n    uint8 stakeOptionIndex,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Stakes a certain amount of tokens, this MUST transfer the given amount from the caller\\n   * @notice MUST trigger Staked event\\n   * @param stakeOptionIndex uint8 the chosen stake option\\n   * @param user address the address the tokens are staked for\\n   * @param amount uint256 the amount of tokens to stake\\n   * @param data bytes optional data to include in the Stake event\\n   */\\n  function stakeFor(\\n    uint8 stakeOptionIndex,\\n    address user,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice Unstakes tokens, this SHOULD return the given amount of tokens to the user,\\n   * if unstaking is currently not possible the function MUST revert\\n   * @notice MUST trigger Unstaked event\\n   * @dev Unstaking tokens is an atomic operation\u2014either all of the tokens in a stake, or none of the tokens.\\n   * @dev Stake reward is minted if function is called after the stake's `unlockTimestamp`.\\n   * @param personalStakeIndex uint256 index of the stake to withdraw in the personalStakes mapping\\n   * @param data bytes optional data to include in the Unstake event\\n   */\\n  function unstake(uint256 personalStakeIndex, bytes calldata data) external;\\n\\n  /**\\n   * @notice Returns the current total of tokens staked for an address\\n   * @param addr address The address to query\\n   * @return uint256 The number of tokens staked for the given address\\n   */\\n  function totalStakedFor(address addr) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the current total of tokens staked\\n   * @return uint256 The number of tokens staked in the contract\\n   */\\n  function totalStaked() external view returns (uint256);\\n\\n  /**\\n   * @notice Address of the token being used by the staking interface\\n   * @return address The address of the ERC20 token used for staking\\n   */\\n  function token() external view returns (address);\\n\\n  /**\\n   * @notice MUST return true if the optional history functions are implemented, otherwise false\\n   * @dev Since we don't implement the optional interface, this always returns false\\n   * @return bool Whether or not the optional history functions are implemented\\n   */\\n  function supportsHistory() external pure returns (bool);\\n\\n  /**\\n   * @notice Sets the pairs of currently available staking options,\\n   * which will regulate the stake duration and reward percentage.\\n   * Stakes that were created through the old stake options will remain unchanged.\\n   * @param stakeDurations uint256[] array of stake option durations\\n   * @param stakePercentageBasisPoints uint16[] array of stake rewarding percentages (basis points)\\n   */\\n  function setStakingOptions(\\n    uint256[] memory stakeDurations,\\n    uint16[] memory stakePercentageBasisPoints\\n  ) external;\\n\\n  /**\\n   * @notice Returns the pairs of currently available staking options,\\n   * so that staker can choose a suitable combination of\\n   * stake duration and reward percentage.\\n   * @return stakeOptionIndexes uint256[] array of the stake option indexes used in other functions of this contract\\n   * @return stakeDurations uint256[] array of stake option durations\\n   * @return stakePercentageBasisPoints uint16[] array of stake rewarding percentages (basis points)\\n   */\\n  function getStakingOptions()\\n    external\\n    view\\n    returns (\\n      uint256[] memory stakeOptionIndexes,\\n      uint256[] memory stakeDurations,\\n      uint16[] memory stakePercentageBasisPoints\\n    );\\n\\n  /**\\n   * @dev Returns the stake indexes for\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake indexes array\\n   */\\n  function getPersonalStakeIndexes(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the stake unlock timestamps for\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake unlock timestamps array\\n   */\\n  function getPersonalStakeUnlockedTimestamps(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the stake values of\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * the personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake values array\\n   */\\n  function getPersonalStakeActualAmounts(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @dev Returns the adresses of stake owners of\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return address[] addresses of stake owners array\\n   */\\n  function getPersonalStakeForAddresses(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the stake rewards percentage (basis points) of\\n   * the last `amountToRetrieve` (with `offset` for pagination)\\n   * personal stakes created by `user`.\\n   * @param user address The address to query\\n   * @param amountToRetrieve uint256 Configures the amount of stakes to gather data for\\n   * @param offset uint256 Configures the offset for results pagination\\n   * @return uint256[] stake rewards percentage (basis points) array\\n   */\\n  function getPersonalStakePercentageBasisPoints(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/libraries/SafeMathUint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMathUint` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUint {\\n  /**\\n   * @dev Returns the addition of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `+` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Addition cannot overflow.\\n   */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n   * overflow (when the result is negative).\\n   *\\n   * Counterpart to Solidity's `-` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Subtraction cannot overflow.\\n   */\\n  function sub(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\n   * overflow.\\n   *\\n   * Counterpart to Solidity's `*` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - Multiplication cannot overflow.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n   * division by zero. The result is rounded towards zero.\\n   *\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function div(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n   * Reverts with custom message when dividing by zero.\\n   *\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\n   * invalid opcode to revert (consuming all remaining gas).\\n   *\\n   * Requirements:\\n   *\\n   * - The divisor cannot be zero.\\n   */\\n  function mod(\\n    uint256 a,\\n    uint256 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned integer to a signed integer,\\n   * Reverts when convertation overflows.\\n   *\\n   * Requirements:\\n   *\\n   * - Operation cannot overflow.\\n   */\\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\\n    int256 b = int256(a);\\n    require(b >= 0, \\\"SafeMath: convertation overflow\\\");\\n    return b;\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/staking/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../token/ERC20Mintable.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IStaking} interface.\\n *\\n * Provides a set of operations to enable staking of the {ERC20Mintable} token.\\n */\\ncontract Staking is IStaking, Context, Ownable {\\n  using SafeMathUint for uint256;\\n\\n  ERC20Mintable _stakingToken;\\n\\n  // To save on gas, rather than create a separate mapping for totalStakedFor & personalStakes,\\n  // both data structures are stored in a single mapping for a given addresses.\\n  // It's possible to have a non-existing personalStakes, but have tokens in totalStakedFor\\n  // if other users are staking on behalf of a given address.\\n  mapping(address => StakeContract) public _stakeHolders;\\n  mapping(uint256 => StakeOption[]) private _stakeOptions;\\n  uint256 private _currentStakeOptionArrayIndex;\\n\\n  // Struct for staking options\\n  // stakeDuration - seconds to pass before the stake unlocks\\n  // stakePercentageBasisPoints - the staking reward percentage (basis points)\\n  struct StakeOption {\\n    uint256 stakeDuration;\\n    uint16 stakePercentageBasisPoints;\\n  }\\n\\n  // Struct for personal stakes (i.e., stakes made by this address)\\n  // unlockedTimestamp - when the stake unlocks (in seconds since Unix epoch)\\n  // actualAmount - the amount of tokens in the stake\\n  // stakedFor - the address the stake was staked for\\n  struct Stake {\\n    uint256 unlockedTimestamp;\\n    uint256 actualAmount;\\n    address stakedFor;\\n    uint256 stakePercentageBasisPoints;\\n  }\\n\\n  // Struct for all stake metadata at a particular address\\n  // totalStakedFor - the number of tokens staked for this address\\n  // personalStakesLastIndex - index of the last stake in the personalStakes mapping\\n  // personalStakes - append only mapping of stakes made by this address\\n  // exists - whether or not there are stakes that involve this address\\n  struct StakeContract {\\n    uint256 totalStakedFor;\\n    uint256 personalStakesLastIndex;\\n    mapping(uint256 => Stake) personalStakes;\\n    bool exists;\\n  }\\n\\n  /**\\n   * @dev Sets the {ERC20Mintable} staking token.\\n   */\\n  constructor(ERC20Mintable stakingToken) {\\n    _stakingToken = stakingToken;\\n  }\\n\\n  /**\\n   * @dev See {IStaking-setStakingOptions}\\n   *\\n   * Requirements:\\n   *\\n   * - `stakeDurations` and `stakePercentageBasisPoints` arrays passed to\\n   * this function cannot be empty or have a different length.\\n   */\\n  function setStakingOptions(\\n    uint256[] memory stakeDurations,\\n    uint16[] memory stakePercentageBasisPoints\\n  ) external override onlyOwner {\\n    require(\\n      stakeDurations.length == stakePercentageBasisPoints.length && stakeDurations.length > 0,\\n      \\\"Staking: stake duration and percentage basis points arrays should be equal in size and non-empty\\\"\\n    );\\n\\n    _currentStakeOptionArrayIndex = _currentStakeOptionArrayIndex.add(1);\\n    for (uint256 i = 0; i < stakeDurations.length; i++) {\\n      _stakeOptions[_currentStakeOptionArrayIndex].push(\\n        StakeOption(stakeDurations[i], stakePercentageBasisPoints[i])\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IStaking-getStakingOptions}\\n   */\\n  function getStakingOptions()\\n    external\\n    override\\n    view\\n    returns (\\n      uint256[] memory stakeOptionIndexes,\\n      uint256[] memory stakeDurations,\\n      uint16[] memory stakePercentageBasisPoints\\n    )\\n  {\\n    stakeOptionIndexes = new uint256[](_stakeOptions[_currentStakeOptionArrayIndex].length);\\n    stakeDurations = new uint256[](_stakeOptions[_currentStakeOptionArrayIndex].length);\\n    stakePercentageBasisPoints = new uint16[](_stakeOptions[_currentStakeOptionArrayIndex].length);\\n\\n    for (uint256 i = 0; i < _stakeOptions[_currentStakeOptionArrayIndex].length; i++) {\\n      stakeOptionIndexes[i] = i;\\n      stakeDurations[i] = _stakeOptions[_currentStakeOptionArrayIndex][i].stakeDuration;\\n      stakePercentageBasisPoints[i] = _stakeOptions[_currentStakeOptionArrayIndex][i]\\n        .stakePercentageBasisPoints;\\n    }\\n\\n    return (stakeOptionIndexes, stakeDurations, stakePercentageBasisPoints);\\n  }\\n\\n  /**\\n   * @dev See {IStaking-getPersonalStakeIndexes}\\n   */\\n  function getPersonalStakeIndexes(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external override view returns (uint256[] memory) {\\n    uint256[] memory indexes;\\n    (indexes, , , , ) = getPersonalStakes(user, amountToRetrieve, offset);\\n\\n    return indexes;\\n  }\\n\\n  /**\\n   * @dev See {IStaking-getPersonalStakeUnlockedTimestamps}\\n   */\\n  function getPersonalStakeUnlockedTimestamps(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external override view returns (uint256[] memory) {\\n    uint256[] memory timestamps;\\n    (, timestamps, , , ) = getPersonalStakes(user, amountToRetrieve, offset);\\n\\n    return timestamps;\\n  }\\n\\n  /**\\n   * @dev See {IStaking-getPersonalStakeActualAmounts}\\n   */\\n  function getPersonalStakeActualAmounts(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external override view returns (uint256[] memory) {\\n    uint256[] memory actualAmounts;\\n    (, , actualAmounts, , ) = getPersonalStakes(user, amountToRetrieve, offset);\\n\\n    return actualAmounts;\\n  }\\n\\n  /**\\n   * @dev See {IStaking-getPersonalStakeForAddresses}\\n   */\\n  function getPersonalStakeForAddresses(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external override view returns (address[] memory) {\\n    address[] memory stakedFor;\\n    (, , , stakedFor, ) = getPersonalStakes(user, amountToRetrieve, offset);\\n\\n    return stakedFor;\\n  }\\n\\n  /**\\n   * @dev See {IStaking-getPersonalStakePercentageBasisPoints}\\n   */\\n  function getPersonalStakePercentageBasisPoints(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  ) external override view returns (uint256[] memory) {\\n    uint256[] memory stakePercentageBasisPoints;\\n    (, , , , stakePercentageBasisPoints) = getPersonalStakes(user, amountToRetrieve, offset);\\n\\n    return stakePercentageBasisPoints;\\n  }\\n\\n  /**\\n   * @dev Helper function to get specific properties of all of the personal stakes created by the `user`\\n   * @param user address The address to query\\n   * @return (uint256[], uint256[], address[], uint256[] memory)\\n   *  timestamps array, actualAmounts array, stakedFor array, stakePercentageBasisPoints array\\n   */\\n  function getPersonalStakes(\\n    address user,\\n    uint256 amountToRetrieve,\\n    uint256 offset\\n  )\\n    public\\n    view\\n    returns (\\n      uint256[] memory,\\n      uint256[] memory,\\n      uint256[] memory,\\n      address[] memory,\\n      uint256[] memory\\n    )\\n  {\\n    StakeContract storage stakeContract = _stakeHolders[user];\\n\\n    uint256 offsetStakeAmount = stakeContract.personalStakesLastIndex.sub(offset);\\n    if (amountToRetrieve > offsetStakeAmount) {\\n      amountToRetrieve = offsetStakeAmount;\\n    }\\n    uint256[] memory stakeIndexes = new uint256[](amountToRetrieve);\\n    uint256[] memory unlockedTimestamps = new uint256[](amountToRetrieve);\\n    uint256[] memory actualAmounts = new uint256[](amountToRetrieve);\\n    address[] memory stakedFor = new address[](amountToRetrieve);\\n    uint256[] memory stakePercentageBasisPoints = new uint256[](amountToRetrieve);\\n\\n    uint256 retrieved;\\n    for (uint256 i = stakeContract.personalStakesLastIndex.sub(1).sub(offset); i >= 0; i--) {\\n      stakeIndexes[retrieved] = i;\\n      unlockedTimestamps[retrieved] = stakeContract.personalStakes[i].unlockedTimestamp;\\n      actualAmounts[retrieved] = stakeContract.personalStakes[i].actualAmount;\\n      stakedFor[retrieved] = stakeContract.personalStakes[i].stakedFor;\\n      stakePercentageBasisPoints[retrieved] = stakeContract.personalStakes[i]\\n        .stakePercentageBasisPoints;\\n\\n      if (++retrieved >= amountToRetrieve) {\\n        break;\\n      }\\n    }\\n\\n    return (stakeIndexes, unlockedTimestamps, actualAmounts, stakedFor, stakePercentageBasisPoints);\\n  }\\n\\n  /**\\n   * @dev See {IStaking-stake}\\n   */\\n  function stake(\\n    uint8 stakeOptionIndex,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external override validStakeOption(stakeOptionIndex) {\\n    createStake(\\n      _msgSender(),\\n      amount,\\n      _stakeOptions[_currentStakeOptionArrayIndex][stakeOptionIndex].stakeDuration,\\n      _stakeOptions[_currentStakeOptionArrayIndex][stakeOptionIndex].stakePercentageBasisPoints,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IStaking-stakeFor}\\n   */\\n  function stakeFor(\\n    uint8 stakeOptionIndex,\\n    address user,\\n    uint256 amount,\\n    bytes calldata data\\n  ) public override validStakeOption(stakeOptionIndex) {\\n    createStake(\\n      user,\\n      amount,\\n      _stakeOptions[_currentStakeOptionArrayIndex][stakeOptionIndex].stakeDuration,\\n      _stakeOptions[_currentStakeOptionArrayIndex][stakeOptionIndex].stakePercentageBasisPoints,\\n      data\\n    );\\n  }\\n\\n  /**\\n   * @dev See {IStaking-unstake}\\n   */\\n  function unstake(uint256 personalStakeIndex, bytes calldata data) external override {\\n    withdrawStake(personalStakeIndex, data);\\n  }\\n\\n  /**\\n   * @dev See {IStaking-totalStakedFor}\\n   */\\n  function totalStakedFor(address user) public override view returns (uint256) {\\n    return _stakeHolders[user].totalStakedFor;\\n  }\\n\\n  /**\\n   * @dev See {IStaking-totalStaked}\\n   */\\n  function totalStaked() external override view returns (uint256) {\\n    return _stakingToken.balanceOf(address(this));\\n  }\\n\\n  /**\\n   * @dev See {IStaking-token}\\n   */\\n  function token() external override view returns (address) {\\n    return address(_stakingToken);\\n  }\\n\\n  /**\\n   * @dev See {IStaking-supportsHistory}\\n   *\\n   * Since we don't implement the optional interface, this always returns false\\n   */\\n  function supportsHistory() external override pure returns (bool) {\\n    return false;\\n  }\\n\\n  /**\\n   * @dev Helper function to create stakes for a given address\\n   * @param user address The address the stake is being created for\\n   * @param amount uint256 The number of tokens being staked\\n   * @param lockInDuration uint256 The duration to lock the tokens for\\n   * @param data bytes optional data to include in the Stake event\\n   * @param stakePercentageBasisPoints uint16 stake reward percentage (basis points)\\n   *\\n   * Requirements:\\n   *\\n   * - `_stakingToken` allowance should be granted to {Staking} contract\\n   * address in order for the stake creation to be successful.\\n   */\\n  function createStake(\\n    address user,\\n    uint256 amount,\\n    uint256 lockInDuration,\\n    uint16 stakePercentageBasisPoints,\\n    bytes calldata data\\n  ) internal {\\n    require(\\n      _stakingToken.transferFrom(_msgSender(), address(this), amount),\\n      \\\"Staking: stake required\\\"\\n    );\\n\\n    if (!_stakeHolders[user].exists) {\\n      _stakeHolders[user].exists = true;\\n    }\\n\\n    uint256 unlockedTimestamp = block.timestamp.add(lockInDuration);\\n    _stakeHolders[user].totalStakedFor = _stakeHolders[user].totalStakedFor.add(amount);\\n    _stakeHolders[user].personalStakes[_stakeHolders[user].personalStakesLastIndex] = Stake({\\n      unlockedTimestamp: unlockedTimestamp,\\n      actualAmount: amount,\\n      stakedFor: user,\\n      stakePercentageBasisPoints: stakePercentageBasisPoints\\n    });\\n\\n    emit LogStaked(\\n      user,\\n      amount,\\n      _stakeHolders[user].personalStakesLastIndex,\\n      unlockedTimestamp,\\n      stakePercentageBasisPoints,\\n      totalStakedFor(user),\\n      data\\n    );\\n    _stakeHolders[user].personalStakesLastIndex = _stakeHolders[user].personalStakesLastIndex.add(\\n      1\\n    );\\n  }\\n\\n  /**\\n   * @dev Helper function to withdraw stakes for the msg.sender\\n   * @param personalStakeIndex uint256 index of the stake to withdraw in the personalStakes mapping\\n   * @param data bytes optional data to include in the Unstake event\\n   *\\n   * Requirements:\\n   *\\n   * - valid personal stake index is passed.\\n   * - stake should not be already withdrawn.\\n   * - `_stakingToken` should transfer the stake amount successfully.\\n   * - `_stakingToken` should {mint} the stake reward successfully\\n   * if function is called after the stake's `unlockTimestamp`.\\n   */\\n  function withdrawStake(uint256 personalStakeIndex, bytes calldata data) internal {\\n    require(\\n      personalStakeIndex <= _stakeHolders[_msgSender()].personalStakesLastIndex.sub(1),\\n      \\\"Staking: passed the wrong personal stake index\\\"\\n    );\\n\\n    Stake storage personalStake = _stakeHolders[_msgSender()].personalStakes[personalStakeIndex];\\n\\n    require(personalStake.actualAmount > 0, \\\"Staking: already withdrawn this stake\\\");\\n\\n    require(\\n      _stakingToken.transfer(_msgSender(), personalStake.actualAmount),\\n      \\\"Staking: unable to withdraw the stake\\\"\\n    );\\n\\n    uint256 stakeReward = 0;\\n    if (personalStake.unlockedTimestamp <= block.timestamp) {\\n      stakeReward = personalStake.actualAmount.mul(personalStake.stakePercentageBasisPoints).div(\\n        uint256(10000)\\n      );\\n      require(\\n        _stakingToken.mint(_msgSender(), stakeReward),\\n        \\\"Staking: unable to mint the stake reward\\\"\\n      );\\n    }\\n\\n    _stakeHolders[personalStake.stakedFor].totalStakedFor = _stakeHolders[personalStake.stakedFor]\\n      .totalStakedFor\\n      .sub(personalStake.actualAmount);\\n\\n    emit LogUnstaked(\\n      personalStake.stakedFor,\\n      personalStake.actualAmount,\\n      personalStakeIndex,\\n      stakeReward,\\n      totalStakedFor(personalStake.stakedFor),\\n      data\\n    );\\n\\n    personalStake.actualAmount = 0;\\n  }\\n\\n  /**\\n   * @dev Modifier that checks if passed `stakeOptionIndex` is valid.\\n   *\\n   * Requirements:\\n   *\\n   * - `_stakeOptions[_currentStakeOptionArrayIndex]` should not be empty,\\n   * which means there are valid staking options at the moment.\\n   * - `stakeOptionIndex` should be a valid index of any stake option\\n   * in `_stakeOptions[_currentStakeOptionArrayIndex]`.\\n   */\\n  modifier validStakeOption(uint8 stakeOptionIndex) {\\n    require(\\n      _currentStakeOptionArrayIndex > 0 && _stakeOptions[_currentStakeOptionArrayIndex].length > 0,\\n      \\\"Staking: no available staking options at the moment.\\\"\\n    );\\n    require(\\n      stakeOptionIndex < _stakeOptions[_currentStakeOptionArrayIndex].length,\\n      \\\"Staking: passed a non-valid stake option index.\\\"\\n    );\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/token/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libraries/SafeMathUint.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Functions revert instead of returning `false` on failure.\\n * This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * The non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n  using SafeMathUint for uint256;\\n\\n  mapping(address => uint256) internal _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n  uint8 private _decimals;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n   * a default value of 18.\\n   *\\n   * To select a different value for {decimals}, use {_setupDecimals}.\\n   *\\n   * All three of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name, string memory symbol) {\\n    _name = name;\\n    _symbol = symbol;\\n    _decimals = 18;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n   * called.\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public override view returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public override view returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `recipient` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(_msgSender(), recipient, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender)\\n    public\\n    virtual\\n    override\\n    view\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(_msgSender(), spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` and `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``sender``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n    _approve(\\n      sender,\\n      _msgSender(),\\n      _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    _approve(\\n      _msgSender(),\\n      spender,\\n      _allowances[_msgSender()][spender].sub(\\n        subtractedValue,\\n        \\\"ERC20: decreased allowance below zero\\\"\\n      )\\n    );\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\n   *\\n   * This is internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `sender` cannot be the zero address.\\n   * - `recipient` cannot be the zero address.\\n   * - `sender` must have a balance of at least `amount`.\\n   */\\n  function _transfer(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) internal virtual {\\n    require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(sender, recipient, amount);\\n\\n    _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    _balances[recipient] = _balances[recipient].add(amount);\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeMint();\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply = _totalSupply.add(amount);\\n    _balances[account] = _balances[account].add(amount);\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    _totalSupply = _totalSupply.sub(amount);\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called before any token mint.\\n   */\\n  function _beforeMint() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/token/ERC20Mintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows new tokens to be created,\\n * in a way that can be recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Mintable is Context, ERC20 {\\n  /**\\n   * @dev Creates `amount` tokens for `account`.\\n   *\\n   * See {ERC20-_mint}.\\n   */\\n  function mint(address account, uint256 amount) external virtual returns (bool success) {\\n    _mint(account, amount);\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal virtual view returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal virtual view returns (bytes memory) {\\n    this;\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/alex/PERSONAL/Cocoricos-EGG/truffle/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache license 2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  event LogOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  address private _owner;\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _owner = _msgSender();\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(_msgSender() == _owner, \\\"Ownable: only contract owner can call this function.\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Checks if transaction sender account is an owner.\\n   */\\n  function isOwner() external view returns (bool) {\\n    return _msgSender() == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit LogOwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20Mintable\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"personalStakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockedTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"stakePercentageBasisPoints\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"personalStakeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogUnstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_stakeHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakedFor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"personalStakesLastIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRetrieve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPersonalStakeActualAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRetrieve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPersonalStakeForAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRetrieve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPersonalStakeIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRetrieve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPersonalStakePercentageBasisPoints\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRetrieve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPersonalStakeUnlockedTimestamps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToRetrieve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getPersonalStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingOptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeOptionIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakeDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"stakePercentageBasisPoints\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"stakeDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16[]\",\"name\":\"stakePercentageBasisPoints\",\"type\":\"uint16[]\"}],\"name\":\"setStakingOptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeOptionIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"stakeOptionIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"personalStakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.7.0+commit.9e61f92b", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d0983dd6a0334c71d0478255d1f794508026b888", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}