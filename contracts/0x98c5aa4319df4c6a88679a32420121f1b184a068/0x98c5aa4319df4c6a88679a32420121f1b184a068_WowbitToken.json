{"SourceCode": "{\"ERC20Interface.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\n//  ERC20 Interface\\r\\n//  - interface for ERC20 token functions for compatibility\\r\\ninterface ERC20Interface {\\r\\n    function balanceOf(address _who) external view returns (uint256);\\r\\n    function transfer(address _to, uint256 _value) external returns (bool);\\r\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\r\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\r\\n    function approve(address _spender, uint256 _value) external returns (bool);\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"ERC223Interface.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\n//  ERC223 Interface\\r\\n//  - interface for ERC223 token functions\\r\\ncontract ERC223Interface {\\r\\n    uint public _totalSupply;\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n    function transfer(address to, uint256 value) public returns (bool success);\\r\\n    function transfer(address to, uint256 value, bytes memory data) public returns (bool success);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\r\\n}\"},\"ERC223ReceivingContract.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\n//  ERC223 Receiving Contract contarct\\r\\n//  - interface for ERC223 token\\u0027s receiving smart contract\\r\\ncontract ERC223ReceivingContract {\\r\\n    function tokenFallback(address from, uint256 value, bytes memory data) public;\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\n//  SafeMath library\\r\\n//  - uint security overflow/underflow prevention\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) { return 0; }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"WowbitToken.sol\":{\"content\":\"pragma solidity \\u003e= 0.5.3 \\u003c 0.6.0;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ERC20Interface.sol\\\";\\r\\nimport \\\"./ERC223Interface.sol\\\";\\r\\nimport \\\"./ERC223ReceivingContract.sol\\\";\\r\\n\\r\\n//  Ownership contract\\r\\n//  - token contract ownership for owner \\u0026 lockup addresses\\r\\n\\r\\ncontract Ownership {\\r\\n    address private _owner;\\r\\n    address private _lockup;\\r\\n    \\r\\n    event OwnerOwnershipTransferred(address indexed prevOwner, address indexed newOwner);\\r\\n    event LockupOwnershipTransferred(address indexed prevLockup, address indexed newLockup);\\r\\n    \\r\\n    // Returns contract owner address\\r\\n    function owner() public view returns (address){\\r\\n        return _owner;\\r\\n    }\\r\\n    \\r\\n    // Returns contract lockup address\\r\\n    function lockup() public view returns (address){\\r\\n        return _lockup;\\r\\n    }\\r\\n    \\r\\n    // Check if caller is owner account\\r\\n    function isOwner() public view returns (bool){\\r\\n        return (msg.sender == _owner);\\r\\n    }\\r\\n    \\r\\n    // Check if caller is lockup account\\r\\n    function isLockup() public view returns (bool){\\r\\n        return (msg.sender == _lockup);\\r\\n    }\\r\\n    \\r\\n    // Modifier for function restricted to owner only\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownership: the caller is not the owner address\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // Modifier for function restricted to lockup only\\r\\n    modifier onlyLockup() {\\r\\n        require(isLockup(), \\\"Ownership: the caller is not the lockup address\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // Modifier for function restricted to owner \\u0026 lockup only\\r\\n    modifier onlyOwnerLockup() {\\r\\n        require(isOwner() || isLockup(), \\\"Ownership: the caller is not either owner or lockup address\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // Transfer owner\\u0027s ownership to new address\\r\\n    // # param newOwner: address of new owner to be transferred\\r\\n    function transferOwnerOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnerOwnership(newOwner);\\r\\n    }\\r\\n    \\r\\n    // Transfer lockup\\u0027s ownership to new address\\r\\n    // # param newLockup: address of new lockup to be transferred\\r\\n    function transferLockupOwnership(address newLockup) public onlyOwner {\\r\\n        _transferLockupOwnership(newLockup);\\r\\n    }\\r\\n    \\r\\n    // ==== internal functions ====\\r\\n\\r\\n    function _transferOwnerOwnership(address newOwner) internal {\\r\\n        require (newOwner != address(0), \\\"Ownable: new owner is zero address\\\");\\r\\n        emit OwnerOwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n    \\r\\n    function _transferLockupOwnership(address newLockup) internal {\\r\\n        require (newLockup != address(0), \\\"Ownable: new lockup is zero address\\\");\\r\\n        emit LockupOwnershipTransferred(_lockup, newLockup);\\r\\n        _lockup = newLockup;\\r\\n    }\\r\\n    \\r\\n    function _setupOwnerships(address own, address lock) internal {\\r\\n        require (own != address(0), \\\"Ownable: owner is zero address\\\");\\r\\n        require (lock != address(0), \\\"Ownable: lockup is zero address\\\");\\r\\n        \\r\\n        _owner = own;\\r\\n        _lockup = lock;\\r\\n        \\r\\n        emit OwnerOwnershipTransferred(address(0), own);\\r\\n        emit LockupOwnershipTransferred(address(0), lock);\\r\\n    }\\r\\n    \\r\\n}\\r\\n\\r\\n//  ERC20 Base Token contract\\r\\n//  - token functions for ERC20\\r\\ncontract ERC20CompatibleToken {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) internal balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n  \\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\\r\\n  \\t\\r\\n    // Moves the `_value` tokens from sender `_from` to recipient `_to` using the allowance mechanism.\\r\\n    // `_value` is then deducted from the caller\\u0027s allowance.\\r\\n    // # params _from:   sender\\u0027s address for token to be taken\\r\\n    // # params _to:     recepient\\u0027s address for token to be sent\\r\\n    // # params _value:  amount of tokens (in wei)\\r\\n    // * returns (bool): status of transaction if its succeed or not\\r\\n  \\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[_from]);\\r\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\r\\n        \\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // Sets `_value` of token as the allowance of `_spender` over the caller\\u0027s tokens.\\r\\n    // # params _spender: recepient\\u0027s address who will spends the token\\r\\n    // # params _value:   amount of tokens (in wei) to be sent\\r\\n    // * returns (bool):  status of transaction if its succeed or not\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // Returns the remaining number of tokens that `_spender` will be allowed to spend on behalf\\r\\n    // of `_owner` through transferFrom(). This is zero by default.\\r\\n    // # params _owner:    address of the owner approved for spender to spend tokens\\r\\n    // # params _spender:  address of spender\\r\\n    // * returns (uint256):amount of token (in wei) that can be spent\\r\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n    \\r\\n    // Adds `_addValue` of token to the allowance of `_spender`.\\r\\n    // # params _spender:  address of the spender to add its allowance\\r\\n    // # params _addValue: amount of token (in wei) to be added\\r\\n    // * returns (bool):  status of transaction if its succeed or not\\r\\n    function increaseApproval(address _spender, uint256 _addValue) public returns (bool) {\\r\\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addValue);\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // Subtracts `_subValue` of token from the allowance of `_spender`.\\r\\n    // # params _spender:  address of the spender to add its allowance\\r\\n    // # params _subValue: amount of token (in wei) to be subtracted\\r\\n    // * returns (bool):   status of transaction if its succeed or not\\r\\n    function decreaseApproval(address _spender, uint256 _subValue) public returns (bool) {\\r\\n        uint256 oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subValue \\u003e oldValue) {\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subValue);\\r\\n        }\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n//  Base ERC223 Token contract\\r\\n//  - Token with ERC223 standard functions including ERC20 token compability functions\\r\\ncontract BaseToken is ERC20Interface, ERC223Interface, ERC20CompatibleToken {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string internal _name;\\r\\n    string internal _symbol;\\r\\n    uint8 internal _decimals;\\r\\n\\r\\n    // Returns the name of the token\\r\\n    // * returns (string): name of token\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    // Returns the symbol of the token\\r\\n    // * returns (string): symbol of token\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    // Returns the decimals of the token\\r\\n    // * returns (uint8): decimal value of token\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    // Returns the total supply of the token\\r\\n    // * returns (uint256): total supply of token\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    \\r\\n    // Returns the amount of tokens owned by `_who`.\\r\\n    // # params _who:       the address of the account\\r\\n    // * returns balance:   the amount of token in the account\\r\\n    function balanceOf(address _who) public view returns (uint256 balance) {\\r\\n        return balances[_who];\\r\\n    }\\r\\n    \\r\\n    // Function that is called when a user or another contract wants to transfer funds\\r\\n    // (compatible with ERC20 standards).\\r\\n    // # params _to:     address of recipient\\r\\n    // # params _value:  amount of token (in wei) to be sent\\r\\n    // * returns (bool): status of transaction if its succeed or not\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(_value \\u003e 0, \\\"Token: value to send is zero value\\\");\\r\\n        require(balanceOf(msg.sender) \\u003e= _value, \\\"Token: balance of token is not enough\\\");\\r\\n\\r\\n        uint codeLength;\\r\\n        bytes memory empty;\\r\\n        assembly {\\r\\n            codeLength := extcodesize(_to)\\r\\n        }\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        // Check to see if receiver is contract\\r\\n        if(codeLength\\u003e0) {\\r\\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\\r\\n            receiver.tokenFallback(msg.sender, _value, empty);\\r\\n        }\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    // Function that is called when a user or another contract wants to transfer funds\\r\\n    // (for ERC223 standards use)\\r\\n    // # params _to:    address of recipient / contract\\r\\n    // # params _value: amount of token (in wei) to be sent\\r\\n    // # params _data:  additional data parameter in bytes\\r\\n    // * returns (bool): status of transaction if its succeed or not\\r\\n    function transfer(address _to, uint256 _value, bytes memory _data) public returns (bool) {\\r\\n        require(_value \\u003e 0, \\\"Token: value to send is zero value\\\");\\r\\n        require(balanceOf(msg.sender) \\u003e= _value, \\\"Token: balance of token is not enough\\\");\\r\\n\\r\\n        // Standard function transfer similar to ERC20 transfer with no _data .\\r\\n        // Added due to backwards compatibility reasons .\\r\\n        if(isContract(_to)) {\\r\\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\\r\\n            receiver.tokenFallback(msg.sender, _value, _data);\\r\\n        }\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        emit Transfer(msg.sender, _to, _value, _data);\\r\\n    }\\r\\n    \\r\\n    // ==== internal functions ====\\r\\n    \\r\\n    function isContract(address _addr) internal view returns (bool is_contract) {\\r\\n        uint length;\\r\\n        assembly {\\r\\n            //retrieve the size of the code on target address, this needs assembly\\r\\n            length := extcodesize(_addr)\\r\\n        }\\r\\n        return (length\\u003e0);\\r\\n    }\\r\\n}\\r\\n\\r\\n//  Wowbit Token contract\\r\\n//  - main contract for Wowbit ERC20-ERC223 token\\r\\ncontract WowbitToken is Ownership, BaseToken{\\r\\n    using SafeMath for uint256;\\r\\n    uint256 internal reservedTotal = 0;\\r\\n\\r\\n    event ReservedToken(address indexed caller, uint256 amount, uint256 newtotal, uint timestamp);\\r\\n    event ReleaseReservedToken(address indexed caller, uint256 amount, uint256 newtotal, uint timestamp);\\r\\n\\r\\n    // Constructor for Wowbit token initialization upon deployment\\r\\n    // # params name:           string name of the token\\r\\n    // # params symbol:         string symbol of the token\\r\\n    // # params decimals:       decimal of token (0 - 18 decimals)\\r\\n    // # params supply:         initial supply of the token\\r\\n    // # params contractOwner:  address of the contract owner account\\r\\n    // # params contractLockup: address of token lockup account\\r\\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 supply, address contractOwner, address contractLockup) public {\\r\\n        require(decimals \\u003c= 18, \\\"Token: decimals must be less than 18\\\");\\r\\n        require(supply \\u003e 0, \\\"Token: token supply must be greater than 0\\\");\\r\\n        _setupOwnerships(contractOwner, contractLockup);\\r\\n        \\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = decimals;\\r\\n        _totalSupply = supply * 10**uint(_decimals);\\r\\n        balances[owner()] = _totalSupply;\\r\\n        \\r\\n        emit Transfer(address(0x0), owner(), _totalSupply);\\r\\n    }\\r\\n    \\r\\n    // Mints the certain amount of token to owner\\r\\n    // # params _value: the amount of token (in decimals) to mint\\r\\n    function mint(uint256 _amount) public onlyOwner {\\r\\n        _mint(owner(), _amount);\\r\\n    }\\r\\n    \\r\\n    // Burns the certain amount of token\\r\\n    // # params _value: the amount of token (in wei) to burn\\r\\n    function burn(uint256 _value) public {\\r\\n        _burn(msg.sender, _value);\\r\\n    }\\r\\n    \\r\\n    // Burns the certain amount of token using on behalf of other user\\r\\n    // # params _account: the targer user\\u0027s account\\r\\n    // # params _value:   the amount of token (in wei) to burn\\r\\n    function burnFrom(address _account, uint256 _value) public {\\r\\n        _burnFrom(_account, _value);\\r\\n    }\\r\\n    \\r\\n    // Reserves the amount of token to lockup account\\r\\n    // # params _value: amount of token (in wei) to lock\\r\\n    function reserveToken(uint256 _value) public onlyOwner {\\r\\n        transfer(lockup(), _value);\\r\\n        reservedTotal = reservedTotal.add(_value);\\r\\n\\r\\n        emit ReservedToken(msg.sender, _value, reservedTotal, now);\\r\\n    } \\r\\n\\r\\n    // Returns the total amount of tokens reserved in lockup account\\r\\n    // * returns (uint256): amount of token reserved in lockup account\\r\\n    function reserveTotal() public view returns (uint256) {\\r\\n        return reservedTotal;\\r\\n    }\\r\\n\\r\\n    // Release amount of reserved token from lockup to owner address\\r\\n    // # params _value: amount of token (in wei) to release\\r\\n    function releaseReserveToken(uint256 _value) public onlyOwner returns (bool){\\r\\n        _releaseReserveToken(_value);\\r\\n    }\\r\\n\\r\\n    // ==== internal functions ====\\r\\n    \\r\\n    // Process in mint some tokens\\r\\n    function _mint(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _totalSupply = _totalSupply.add(value);\\r\\n        balances[account] = balances[account].add(value);\\r\\n        emit Transfer(address(0), account, value);\\r\\n    }\\r\\n    \\r\\n    // Process in burn token\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        balances[account] = balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n    \\r\\n    // Process in burn from tokens\\r\\n    function _burnFrom(address account, uint256 value) internal {\\r\\n        _burn(account, value);\\r\\n        approve(account, allowed[account][msg.sender].sub(value));\\r\\n    }\\r\\n    \\r\\n    // Process of releasing locked tokens from lockup account\\r\\n    function _releaseReserveToken(uint256 _value) internal {\\r\\n        require(_value \\u003e 0, \\\"Token: release reserve token amount is zero\\\");\\r\\n        if(_value \\u003e= reservedTotal){\\r\\n            _release(reservedTotal);\\r\\n            reservedTotal = 0;\\r\\n            emit ReleaseReservedToken(msg.sender, reservedTotal, reservedTotal, now);\\r\\n        } else {\\r\\n            _release(_value);\\r\\n            reservedTotal = reservedTotal.sub(_value);\\r\\n            emit ReleaseReservedToken(msg.sender, _value, reservedTotal, now);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Transfer process from lockup to owner accounts\\r\\n    function _release(uint256 _val) internal {\\r\\n        balances[lockup()] = balances[lockup()].sub(_val);\\r\\n        balances[owner()] = balances[owner()].add(_val);\\r\\n        emit Transfer(lockup(), owner(), _val);\\r\\n    }\\r\\n    \\r\\n    // Transfer process from lockup to owner accounts\\r\\n    function _lock(uint256 _val) internal {\\r\\n        balances[owner()] = balances[owner()].sub(_val);\\r\\n        balances[lockup()] = balances[lockup()].add(_val);\\r\\n        emit Transfer(lockup(), owner(), _val);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractLockup\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevLockup\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newLockup\",\"type\":\"address\"}],\"name\":\"LockupOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newtotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReleaseReservedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newtotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReservedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isLockup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"releaseReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"reserveToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLockup\",\"type\":\"address\"}],\"name\":\"transferLockupOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnerOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WowbitToken", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000423a35c70000000000000000000000002e5e6ebd6865effab33360d3c6102f723fd053d20000000000000000000000002e5e6ebd6865effab33360d3c6102f723fd053d20000000000000000000000000000000000000000000000000000000000000006576f77626974000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035757420000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c6fe57756469636f12dcb158eb7f8d123e71cc64e957cb6fd24af203b621ab9a"}