{"SourceCode": "//SPDX-License-Identifier: MIT Licensed\r\npragma solidity 0.8.10;\r\n\r\ninterface IDexRouter {\r\n    function WETH() external pure returns (address);\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface dexFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n}\r\n\r\ncontract preSale {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n    address payable public preSaleOwner;\r\n    IERC20 public token;\r\n    IDexRouter public routerAddress;\r\n    address public pancakePair;\r\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public tokenPrice;\r\n    address[] public contributors;\r\n    uint256 public preSaleStartTime;\r\n    uint256 public preSaleEndTime;\r\n\r\n    uint256 public hardCap;\r\n    uint256 public listingPrice;\r\n    uint256 public liquidityPercent;\r\n    uint256 public soldTokens;\r\n    uint256 public totalUser;\r\n    uint256 public amountRaised;\r\n    uint256 public walletHardcap;\r\n\r\n    bool public allow;\r\n    bool public lpUnlocked;\r\n    bool public canClaim;\r\n    bool public refundOrBurn; // true will be refund and false will be Burn\r\n\r\n    mapping(address => uint256) public ethBalance;\r\n    mapping(address => uint256) public tokenBalance;\r\n    mapping(address => uint256) public claimCount;\r\n    mapping(address => bool) public isExists;\r\n    mapping(address => uint256) public claimAbleAmount;\r\n    mapping(address => uint256) public claimedAmount;\r\n\r\n    modifier onlypreSaleOwner() {\r\n        require(msg.sender == preSaleOwner, \"PRESALE: Not a token owner\");\r\n        _;\r\n    }\r\n\r\n    modifier allowed() {\r\n        require(allow, \"PRESALE: Not allowed\");\r\n        _;\r\n    }\r\n\r\n    event TokenBought(\r\n        address indexed user,\r\n        uint256 indexed numberOfTokens,\r\n        uint256 indexed amountBusd\r\n    );\r\n\r\n    event TokenClaimed(address indexed user, uint256 indexed numberOfTokens);\r\n\r\n    event EthClaimed(address indexed user, uint256 indexed numberOfEth);\r\n\r\n    event TokenUnSold(address indexed user, uint256 indexed numberOfTokens);\r\n\r\n    constructor(address _owner, IERC20 _token) {\r\n        preSaleOwner = payable(_owner);\r\n        token = _token;\r\n        routerAddress = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        preSaleStartTime = 1698868800;\r\n        preSaleEndTime = 1699819200;\r\n        tokenPrice = 750_000_000;\r\n        listingPrice = 75_000_000_000;\r\n        liquidityPercent = 19;\r\n        hardCap = 100 * 10**18;\r\n        walletHardcap = 3 * 10**18;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // to buy token during preSale time => for web3 use\r\n    function buyToken() public payable allowed {\r\n        require(\r\n            block.timestamp > preSaleStartTime,\r\n            \"Wait For Presale Satrt Time\"\r\n        );\r\n        require(\r\n            msg.value + ethBalance[msg.sender] <= walletHardcap,\r\n            \"Wallet harcap Reached\"\r\n        );\r\n        require(block.timestamp <= preSaleEndTime, \"PRESALE: Time over\"); // time check\r\n        require(\r\n            amountRaised.add(msg.value) <= hardCap,\r\n            \"PRESALE: Exceeding Hardcap\"\r\n        );\r\n        uint256 numberOfTokens = ethToToken(msg.value);\r\n\r\n        if (tokenBalance[msg.sender] == 0) {\r\n            totalUser++;\r\n        }\r\n        if (!isExists[msg.sender]) {\r\n            isExists[msg.sender] = true;\r\n            contributors.push(msg.sender);\r\n        }\r\n        tokenBalance[msg.sender] = tokenBalance[msg.sender].add(numberOfTokens);\r\n        claimAbleAmount[msg.sender] = claimAbleAmount[msg.sender].add(\r\n            numberOfTokens\r\n        );\r\n        soldTokens = soldTokens.add(numberOfTokens);\r\n        ethBalance[msg.sender] = ethBalance[msg.sender].add(msg.value);\r\n        amountRaised = amountRaised.add(msg.value);\r\n\r\n        emit TokenBought(msg.sender, numberOfTokens, msg.value);\r\n    }\r\n\r\n    // to claim token after launch => for web3 use\r\n    function claim() public allowed {\r\n        require(canClaim, \"PRESALE: Wait for owner to end preSale\");\r\n        require(\r\n            tokenBalance[msg.sender] > 0,\r\n            \"PRESALE: Do not have any tokens to claim\"\r\n        );\r\n        require(claimAbleAmount[msg.sender] > 0, \"No Claimable Amount\");\r\n        claimtokens();\r\n    }\r\n\r\n    function claimtokens() internal {\r\n        uint256 transferAmount;\r\n        transferAmount = claimAbleAmount[msg.sender];\r\n        token.transfer(msg.sender, transferAmount);\r\n        claimAbleAmount[msg.sender] -= transferAmount;\r\n    }\r\n\r\n    // withdraw the funds and initialize the liquidity pool\r\n    function withdrawAndInitializePool() public onlypreSaleOwner allowed {\r\n        require(!canClaim, \"Presale: Already intialized\");\r\n        require(\r\n            block.timestamp > preSaleEndTime,\r\n            \"Presale: PreSale not over yet\"\r\n        );\r\n        uint256 EthAmountForLiquidity = amountRaised.mul(liquidityPercent).div(\r\n            100\r\n        );\r\n        uint256 tokenAmountForLiquidity = listingTokens(EthAmountForLiquidity);\r\n\r\n        // Create a pancake pair for this new token\r\n        pancakePair = dexFactory(routerAddress.factory()).getPair(\r\n            address(token),\r\n            routerAddress.WETH()\r\n        );\r\n        token.approve(address(routerAddress), tokenAmountForLiquidity);\r\n        addLiquidity(tokenAmountForLiquidity, EthAmountForLiquidity);\r\n\r\n        preSaleOwner.transfer(getContractethBalance());\r\n        uint256 leftOver = getContractTokenBalance().sub(soldTokens);\r\n        address receiver;\r\n        if (refundOrBurn) {\r\n            receiver = deadAddress;\r\n            if (leftOver > 0) token.transfer(receiver, leftOver);\r\n            emit TokenUnSold(receiver, leftOver);\r\n        } else {\r\n            receiver = preSaleOwner;\r\n            if (leftOver > 0) token.transfer(receiver, leftOver);\r\n            emit TokenUnSold(receiver, leftOver);\r\n        }\r\n\r\n        canClaim = true;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 EthAmount) internal {\r\n        // add the liquidity\r\n        routerAddress.addLiquidityETH{value: EthAmount}(\r\n            address(token),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp + 300\r\n        );\r\n    }\r\n\r\n    function unLockLiquidity() public onlypreSaleOwner {\r\n        require(!lpUnlocked, \"LP is already unlock\");\r\n\r\n        uint256 lpBalance = IPair(pancakePair).balanceOf(address(this));\r\n        IPair(pancakePair).transfer(preSaleOwner, lpBalance);\r\n        lpUnlocked = true;\r\n    }\r\n\r\n    function setPreSaleTime(uint256 _startTime, uint256 _endTime)\r\n        public\r\n        onlypreSaleOwner\r\n    {\r\n        preSaleStartTime = _startTime;\r\n        preSaleEndTime = _endTime;\r\n    }\r\n\r\n    // to check number of token for buying\r\n    function ethToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 numberOfTokens = _amount.mul(tokenPrice).mul(1000).div(1e18);\r\n        return numberOfTokens.mul(10**(token.decimals())).div(1000);\r\n    }\r\n\r\n    // to calculate number of tokens for listing price\r\n    function listingTokens(uint256 _amount) public view returns (uint256) {\r\n        uint256 numberOfTokens = _amount.mul(listingPrice).mul(1000).div(1e18);\r\n        return numberOfTokens.mul(10**(token.decimals())).div(1000);\r\n    }\r\n\r\n    // to check contribution\r\n    function userContribution(address _user) public view returns (uint256) {\r\n        return ethBalance[_user];\r\n    }\r\n\r\n    // to check token balance of user\r\n    function userTokenBalance(address _user) public view returns (uint256) {\r\n        return tokenBalance[_user];\r\n    }\r\n\r\n    // to Stop preSale in case of scam\r\n    function setAllow(bool _enable) external onlypreSaleOwner {\r\n        allow = _enable;\r\n    }\r\n\r\n    function getContractethBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getContractTokenBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getCurrentTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getContributorsLenght() public view returns (uint256) {\r\n        return contributors.length;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlypreSaleOwner {\r\n        preSaleOwner = payable(_newOwner);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numberOfEth\",\"type\":\"uint256\"}],\"name\":\"EthClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountBusd\",\"type\":\"uint256\"}],\"name\":\"TokenBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokenUnSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimAbleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractethBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributorsLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"listingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundOrBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setPreSaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unLockLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletHardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAndInitializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "preSale", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c24fad6ac3bcf3ee851984e10d27a7fd1f563b8000000000000000000000000d1c111c63d61ccdef3246c2c9987ab7882c2923c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2cd4ba57abb5a2835740e3b38cb0cafd771e7c2207a607e82f0089bb28b0639b"}