{"SourceCode": "// File: contracts/1404/IERC1404.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ninterface IERC1404 {\r\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n    /// @param from Sending address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function detectTransferRestriction (address from, address to, uint256 value) external view returns (uint8);\r\n\r\n    /// @notice Detects if a transferFrom will be reverted and if so returns an appropriate reference code\r\n    /// @param sender Transaction sending address\r\n    /// @param from Source of funds address\r\n    /// @param to Receiving address\r\n    /// @param value Amount of tokens being transferred\r\n    /// @return Code by which to reference message for rejection reasoning\r\n    /// @dev Overwrite with your custom transfer restriction logic\r\n    function detectTransferFromRestriction (address sender, address from, address to, uint256 value) external view returns (uint8);\r\n\r\n    /// @notice Returns a human-readable message for a given restriction code\r\n    /// @param restrictionCode Identifier for looking up a message\r\n    /// @return Text showing the restriction's reasoning\r\n    /// @dev Overwrite with your custom message and restrictionCode handling\r\n    function messageForTransferRestriction (uint8 restrictionCode) external view returns (string memory);\r\n}\r\n\r\ninterface IERC1404getSuccessCode {\r\n    /// @notice Return the uint256 that represents the SUCCESS_CODE\r\n    /// @return uint256 SUCCESS_CODE\r\n    function getSuccessCode () external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title IERC1404Success\r\n * @dev Combines IERC1404 and IERC1404getSuccessCode interfaces, to be implemented by the TransferRestrictions contract\r\n */\r\ncontract IERC1404Success is IERC1404getSuccessCode, IERC1404 {\r\n}\r\n\r\n// File: contracts/1404/IERC1404Validators.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n/**\r\n * @title IERC1404Validators\r\n * @dev Interfaces implemented by the token contract to be called by the TransferRestrictions contract\r\n */\r\ninterface IERC1404Validators {\r\n    /// @notice Returns the token balance for an account\r\n    /// @param account The address to get the token balance of\r\n    /// @return uint256 representing the token balance for the account\r\n    function balanceOf (address account) external view returns (uint256);\r\n\r\n    /// @notice Returns a boolean indicating the paused state of the contract\r\n    /// @return true if contract is paused, false if unpaused\r\n    function paused () external view returns (bool);\r\n\r\n    /// @notice Determine if sender and receiver are whitelisted, return true if both accounts are whitelisted\r\n    /// @param from The address sending tokens.\r\n    /// @param to The address receiving tokens.\r\n    /// @return true if both accounts are whitelisted, false if not\r\n    function checkWhitelists (address from, address to) external view returns (bool);\r\n\r\n    /// @notice Determine if a users tokens are locked preventing a transfer\r\n    /// @param _address the address to retrieve the data from\r\n    /// @param amount the amount to send\r\n    /// @param balance the token balance of the sending account\r\n    /// @return true if user has sufficient unlocked token to transfer the requested amount, false if not\r\n    function checkTimelock (address _address, uint256 amount, uint256 balance) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/roles/OwnerRole.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract OwnerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event OwnerAdded(address indexed addedOwner, address indexed addedBy);\r\n    event OwnerRemoved(address indexed removedOwner, address indexed removedBy);\r\n\r\n    Roles.Role private _owners;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"OwnerRole: caller does not have the Owner role\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return _owners.has(account);\r\n    }\r\n\r\n    function addOwner(address account) public onlyOwner {\r\n        _addOwner(account);\r\n    }\r\n\r\n    function removeOwner(address account) public onlyOwner {\r\n        require(msg.sender != account, \"Owners cannot remove themselves as owner\");\r\n        _removeOwner(account);\r\n    }\r\n\r\n    function _addOwner(address account) internal {\r\n        _owners.add(account);\r\n        emit OwnerAdded(account, msg.sender);\r\n    }\r\n\r\n    function _removeOwner(address account) internal {\r\n        _owners.remove(account);\r\n        emit OwnerRemoved(account, msg.sender);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/roles/RevokerRole.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract RevokerRole is OwnerRole {\r\n\r\n    event RevokerAdded(address indexed addedRevoker, address indexed addedBy);\r\n    event RevokerRemoved(address indexed removedRevoker, address indexed removedBy);\r\n\r\n    Roles.Role private _revokers;\r\n\r\n    modifier onlyRevoker() {\r\n        require(isRevoker(msg.sender), \"RevokerRole: caller does not have the Revoker role\");\r\n        _;\r\n    }\r\n\r\n    function isRevoker(address account) public view returns (bool) {\r\n        return _revokers.has(account);\r\n    }\r\n\r\n    function addRevoker(address account) public onlyOwner {\r\n        _addRevoker(account);\r\n    }\r\n\r\n    function removeRevoker(address account) public onlyOwner {\r\n        _removeRevoker(account);\r\n    }\r\n\r\n    function _addRevoker(address account) internal {\r\n        _revokers.add(account);\r\n        emit RevokerAdded(account, msg.sender);\r\n    }\r\n\r\n    function _removeRevoker(address account) internal {\r\n        _revokers.remove(account);\r\n        emit RevokerRemoved(account, msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/capabilities/Revocable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n/**\r\n * Allows an administrator to move tokens from a target account to their own.\r\n */\r\ncontract Revocable is ERC20, RevokerRole {\r\n\r\n  event Revoke(address indexed revoker, address indexed from, uint256 amount);\r\n\r\n  function revoke(\r\n    address _from,\r\n    uint256 _amount\r\n  )\r\n    public\r\n    onlyRevoker\r\n    returns (bool)\r\n  {\r\n    ERC20._transfer(_from, msg.sender, _amount);\r\n    emit Revoke(msg.sender, _from, _amount);\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/roles/WhitelisterRole.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract WhitelisterRole is OwnerRole {\r\n\r\n    event WhitelisterAdded(address indexed addedWhitelister, address indexed addedBy);\r\n    event WhitelisterRemoved(address indexed removedWhitelister, address indexed removedBy);\r\n\r\n    Roles.Role private _whitelisters;\r\n\r\n    modifier onlyWhitelister() {\r\n        require(isWhitelister(msg.sender), \"WhitelisterRole: caller does not have the Whitelister role\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelister(address account) public view returns (bool) {\r\n        return _whitelisters.has(account);\r\n    }\r\n\r\n    function addWhitelister(address account) public onlyOwner {\r\n        _addWhitelister(account);\r\n    }\r\n\r\n    function removeWhitelister(address account) public onlyOwner {\r\n        _removeWhitelister(account);\r\n    }\r\n\r\n    function _addWhitelister(address account) internal {\r\n        _whitelisters.add(account);\r\n        emit WhitelisterAdded(account, msg.sender);\r\n    }\r\n\r\n    function _removeWhitelister(address account) internal {\r\n        _whitelisters.remove(account);\r\n        emit WhitelisterRemoved(account, msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/capabilities/Whitelistable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n/**\r\n * @title Whitelistable\r\n * @dev Allows tracking whether addressess are allowed to hold tokens.\r\n */\r\ncontract Whitelistable is WhitelisterRole {\r\n\r\n    event WhitelistUpdate(address _address, bool status, string data);\r\n\r\n    // Tracks whether an address is whitelisted\r\n    // data field can track any external field (like a hash of personal details)\r\n    struct whiteListItem {\r\n        bool status;\r\n        string data;\r\n    }\r\n\r\n    // white list status\r\n    mapping (address => whiteListItem) public whitelist;\r\n\r\n    /**\r\n    * @dev Set a white list address\r\n    * @param to the address to be set\r\n    * @param status the whitelisting status (true for yes, false for no)\r\n    * @param data a string with data about the whitelisted address\r\n    */\r\n    function setWhitelist(address to, bool status, string memory data)  public onlyWhitelister returns(bool){\r\n        whitelist[to] = whiteListItem(status, data);\r\n        emit WhitelistUpdate(to, status, data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the status of the whitelist\r\n    * @param _address the address to be check\r\n    */\r\n    function getWhitelistStatus(address _address) public view returns(bool){\r\n        return whitelist[_address].status;\r\n    }\r\n\r\n    /**\r\n    * @dev Get the data of and address in the whitelist\r\n    * @param _address the address to retrieve the data from\r\n    */\r\n    function getWhitelistData(address _address) public view returns(string memory){\r\n        return whitelist[_address].data;\r\n    }\r\n\r\n    /**\r\n    * @dev Determine if sender and receiver are whitelisted, return true if both accounts are whitelisted\r\n    * @param from The address sending tokens.\r\n    * @param to The address receiving tokens.\r\n    */\r\n    function checkWhitelists(address from, address to) external view returns (bool) {\r\n        return whitelist[from].status && whitelist[to].status;\r\n    }\r\n}\r\n\r\n// File: contracts/roles/TimelockerRole.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract TimelockerRole is OwnerRole {\r\n\r\n    event TimelockerAdded(address indexed addedTimelocker, address indexed addedBy);\r\n    event TimelockerRemoved(address indexed removedTimelocker, address indexed removedBy);\r\n\r\n    Roles.Role private _timelockers;\r\n\r\n    modifier onlyTimelocker() {\r\n        require(isTimelocker(msg.sender), \"TimelockerRole: caller does not have the Timelocker role\");\r\n        _;\r\n    }\r\n\r\n    function isTimelocker(address account) public view returns (bool) {\r\n        return _timelockers.has(account);\r\n    }\r\n\r\n    function addTimelocker(address account) public onlyOwner {\r\n        _addTimelocker(account);\r\n    }\r\n\r\n    function removeTimelocker(address account) public onlyOwner {\r\n        _removeTimelocker(account);\r\n    }\r\n\r\n    function _addTimelocker(address account) internal {\r\n        _timelockers.add(account);\r\n        emit TimelockerAdded(account, msg.sender);\r\n    }\r\n\r\n    function _removeTimelocker(address account) internal {\r\n        _timelockers.remove(account);\r\n        emit TimelockerRemoved(account, msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/capabilities/Timelockable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n/**\r\n * @title Hag Timelockable\r\n * @dev Lockup all or a portion of an accounts tokens until an expiration date\r\n */\r\ncontract Timelockable is TimelockerRole {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct lockupItem {\r\n        uint256 amount;\r\n        uint256 releaseTime;\r\n    }\r\n\r\n    mapping (address => lockupItem) lockups;\r\n\r\n    event AccountLock(address _address, uint256 amount, uint256 releaseTime);\r\n    event AccountRelease(address _address, uint256 amount);\r\n\r\n\r\n    /**\r\n    * @dev lock address and amount and lock it, set the release time\r\n    * @param _address the address to lock\r\n    * @param amount the amount to lock\r\n    * @param releaseTime of the locked amount (in seconds since the epoch)\r\n    */\r\n    function lock( address _address, uint256 amount, uint256 releaseTime) public onlyTimelocker returns (bool) {\r\n        require(releaseTime > block.timestamp, \"Release time needs to be in the future\");\r\n        require(_address != address(0), \"Address must be valid for lockup\");\r\n\r\n        lockupItem memory _lockupItem = lockupItem(amount, releaseTime);\r\n        lockups[_address] = _lockupItem;\r\n        emit AccountLock(_address, amount, releaseTime);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev release locked amount\r\n    * @param _address the address to retrieve the data from\r\n    * @param amountToRelease the amount to check\r\n    */\r\n    function release( address _address, uint256 amountToRelease) public onlyTimelocker returns(bool) {\r\n        require(_address != address(0), \"Address must be valid for release\");\r\n\r\n        uint256 _lockedAmount = lockups[_address].amount;\r\n\r\n        // nothing to release\r\n        if(_lockedAmount == 0){\r\n            emit AccountRelease(_address, 0);\r\n            return true;\r\n        }\r\n\r\n        // extract release time for re-locking\r\n        uint256 _releaseTime = lockups[_address].releaseTime;\r\n\r\n        // delete the lock entry\r\n        delete lockups[_address];\r\n\r\n        if(_lockedAmount >= amountToRelease){\r\n           uint256 newLockedAmount = _lockedAmount.sub(amountToRelease);\r\n\r\n           // re-lock the new locked balance\r\n           lock(_address, newLockedAmount, _releaseTime);\r\n           emit AccountRelease(_address, amountToRelease);\r\n           return true;\r\n        } else {\r\n            // if they requested to release more than the locked amount emit the event with the locked amount that has been released\r\n            emit AccountRelease(_address, _lockedAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev return true if the given account has enough unlocked tokens to send the requested amount\r\n    * @param _address the address to retrieve the data from\r\n    * @param amount the amount to send\r\n    * @param balance the token balance of the sending account\r\n    */\r\n    function checkTimelock(address _address, uint256 amount, uint256 balance) external view returns (bool) {\r\n        // if the user does not have enough tokens to send regardless of lock return true here\r\n        // the failure will still fail but this should make it explicit that the transfer failure is not\r\n        // due to locked tokens but because of too low token balance\r\n        if (balance < amount) {\r\n            return true;\r\n        }\r\n\r\n        // get the sending addresses token balance that is not locked\r\n        uint256 nonLockedAmount = balance.sub(lockups[_address].amount);\r\n\r\n        // determine if the sending address has enough free tokens to send the entire amount\r\n        bool notLocked = amount <= nonLockedAmount;\r\n\r\n        // if the timelock is greater then the release time the time lock is expired\r\n        bool timeLockExpired = block.timestamp > lockups[_address].releaseTime;\r\n\r\n        // if the timelock is expired OR the requested amount is available the transfer is not locked\r\n        if(timeLockExpired || notLocked){\r\n            return true;\r\n\r\n        // if the timelocked is not expired AND the requested amount is not available the tranfer is locked\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev get address lockup info\r\n    * @param _address the address to retrieve the data from\r\n    * @return array of 2 uint256, release time (in seconds since the epoch) and amount (in HAG)\r\n    */\r\n    function checkLockup(address _address) public view returns(uint256, uint256) {\r\n        // copy lockup data into memory\r\n        lockupItem memory _lockupItem = lockups[_address];\r\n\r\n        return (_lockupItem.releaseTime, _lockupItem.amount);\r\n    }\r\n}\r\n\r\n// File: contracts/roles/PauserRole.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract PauserRole is OwnerRole {\r\n\r\n    event PauserAdded(address indexed addedPauser, address indexed addedBy);\r\n    event PauserRemoved(address indexed removedPauser, address indexed removedBy);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyOwner {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function removePauser(address account) public onlyOwner {\r\n        _removePauser(account);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account, msg.sender);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account, msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/capabilities/Pausable.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n/**\r\n * Allows transfers on a token contract to be paused by an administrator.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused();\r\n    event Unpaused();\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev internal function, triggers paused state\r\n     */\r\n    function _pause() internal {\r\n        _paused = true;\r\n        emit Paused();\r\n    }\r\n\r\n    /**\r\n     * @dev internal function, returns to unpaused state\r\n     */\r\n    function _unpause() internal {\r\n        _paused = false;\r\n        emit Unpaused();\r\n    }\r\n\r\n     /**\r\n     * @dev called by pauser role to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev called by pauer role to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser {\r\n        _unpause();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract MinterRole is OwnerRole {\r\n\r\n    event MinterAdded(address indexed addedMinter, address indexed addedBy);\r\n    event MinterRemoved(address indexed removedMinter, address indexed removedBy);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account, msg.sender);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account, msg.sender);\r\n    }\r\n\r\n    function addMinter(address account) public onlyOwner {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function removeMinter(address account) public onlyOwner {\r\n        _removeMinter(account);\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract Mintable is ERC20, MinterRole {\r\n  event Mint(address indexed minter, address indexed to, uint256 amount);\r\n\r\n  function _mint(address minter, address to, uint256 amount) internal returns (bool) {\r\n      ERC20._mint(to, amount);\r\n      emit Mint(minter, to, amount);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n  Allow Owners to mint tokens to valid addresses\r\n  */\r\n  function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n      return Mintable._mint(msg.sender, account, amount);\r\n  }\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract BurnerRole is OwnerRole {\r\n\r\n    event BurnerAdded(address indexed addedBurner, address indexed addedBy);\r\n    event BurnerRemoved(address indexed removedBurner, address indexed removedBy);\r\n\r\n    Roles.Role private _burners;\r\n\r\n    modifier onlyBurner() {\r\n        require(isBurner(msg.sender), \"BurnerRole: caller does not have the Burner role\");\r\n        _;\r\n    }\r\n\r\n    function isBurner(address account) public view returns (bool) {\r\n        return _burners.has(account);\r\n    }\r\n\r\n    function _addBurner(address account) internal {\r\n        _burners.add(account);\r\n        emit BurnerAdded(account, msg.sender);\r\n    }\r\n\r\n    function _removeBurner(address account) internal {\r\n        _burners.remove(account);\r\n        emit BurnerRemoved(account, msg.sender);\r\n    }\r\n\r\n    function addBurner(address account) public onlyOwner {\r\n        _addBurner(account);\r\n    }\r\n\r\n    function removeBurner(address account) public onlyOwner {\r\n        _removeBurner(account);\r\n    }\r\n\r\n}\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract Burnable is ERC20, BurnerRole {\r\n  event Burn(address indexed burner, address indexed from, uint256 amount);\r\n\r\n  function _burn(address burner, address from, uint256 amount) internal returns (bool) {\r\n      ERC20._burn(from, amount);\r\n      emit Burn(burner, from, amount);\r\n      return true;\r\n  }\r\n\r\n  /**\r\n  Allow Burners to burn tokens from valid addresses\r\n  */\r\n  function burn(address account, uint256 amount) public onlyBurner returns (bool) {\r\n      return _burn(msg.sender, account, amount);\r\n  }\r\n}\r\n\r\n// File: contracts/HagToken.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\ncontract HagToken is IERC1404, IERC1404Validators, IERC20, ERC20Detailed, OwnerRole, Revocable, Whitelistable, Timelockable, Pausable, Mintable, Burnable {\r\n\r\n    // Token Details\r\n    string constant TOKEN_NAME = \"HAG Token\";\r\n    string constant TOKEN_SYMBOL = \"HAG\";\r\n    uint8 constant TOKEN_DECIMALS = 18;\r\n\r\n    // Token supply - 1.2 Million Tokens, with 18 decimal precision\r\n    uint256 constant ONE_POINT_TWO_MILLION = 1200000;\r\n    uint256 constant TOKEN_SUPPLY = ONE_POINT_TWO_MILLION * (10 ** uint256(TOKEN_DECIMALS));\r\n\r\n    // This tracks the external contract where restriction logic is executed\r\n    IERC1404Success private transferRestrictions;\r\n\r\n    // Event tracking when restriction logic contract is updated\r\n    event RestrictionsUpdated (address newRestrictionsAddress, address updatedBy);\r\n\r\n    /**\r\n    Constructor for the token to set readable details and mint all tokens\r\n    to the specified owner.\r\n    */\r\n    constructor(address owner) public\r\n        ERC20Detailed(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\r\n    {\r\n        _mint(owner, TOKEN_SUPPLY);\r\n        _addOwner(owner);\r\n    }\r\n\r\n    /**\r\n    Function that can only be called by an owner that updates the address\r\n    with the ERC1404 Transfer Restrictions defined\r\n    */\r\n    function updateTransferRestrictions(address _newRestrictionsAddress)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        transferRestrictions = IERC1404Success(_newRestrictionsAddress);\r\n        emit RestrictionsUpdated(address(transferRestrictions), msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    The address with the Transfer Restrictions contract\r\n    */\r\n    function getRestrictionsAddress () public view returns (address) {\r\n        return address(transferRestrictions);\r\n    }\r\n\r\n\r\n    /**\r\n    This function detects whether a transfer should be restricted and not allowed.\r\n    If the function returns SUCCESS_CODE (0) then it should be allowed.\r\n    */\r\n    function detectTransferRestriction (address from, address to, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint8)\r\n    {\r\n        // Verify the external contract is valid\r\n        require(address(transferRestrictions) != address(0), 'TransferRestrictions contract must be set');\r\n\r\n        // call detectTransferRestriction on the current transferRestrictions contract\r\n        return transferRestrictions.detectTransferRestriction(from, to, amount);\r\n    }\r\n\r\n    /**\r\n    This function detects whether a transferFrom should be restricted and not allowed.\r\n    If the function returns SUCCESS_CODE (0) then it should be allowed.\r\n    */\r\n    function detectTransferFromRestriction (address sender, address from, address to, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint8)\r\n    {\r\n        // Verify the external contract is valid\r\n        require(address(transferRestrictions) != address(0), 'TransferRestrictions contract must be set');\r\n\r\n        // call detectTransferFromRestriction on the current transferRestrictions contract\r\n        return  transferRestrictions.detectTransferFromRestriction(sender, from, to, amount);\r\n    }\r\n\r\n    /**\r\n    This function allows a wallet or other client to get a human readable string to show\r\n    a user if a transfer was restricted.  It should return enough information for the user\r\n    to know why it failed.\r\n    */\r\n    function messageForTransferRestriction (uint8 restrictionCode)\r\n        external\r\n        view\r\n        returns (string memory)\r\n    {\r\n        // call messageForTransferRestriction on the current transferRestrictions contract\r\n        return transferRestrictions.messageForTransferRestriction(restrictionCode);\r\n    }\r\n\r\n    /**\r\n    Evaluates whether a transfer should be allowed or not.\r\n    */\r\n    modifier notRestricted (address from, address to, uint256 value) {\r\n        uint8 restrictionCode = transferRestrictions.detectTransferRestriction(from, to, value);\r\n        require(restrictionCode == transferRestrictions.getSuccessCode(), transferRestrictions.messageForTransferRestriction(restrictionCode));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    Evaluates whether a transferFrom should be allowed or not.\r\n    */\r\n    modifier notRestrictedTransferFrom (address sender, address from, address to, uint256 value) {\r\n        uint8 transferFromRestrictionCode = transferRestrictions.detectTransferFromRestriction(sender, from, to, value);\r\n        require(transferFromRestrictionCode == transferRestrictions.getSuccessCode(), transferRestrictions.messageForTransferRestriction(transferFromRestrictionCode));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    Overrides the parent class token transfer function to enforce restrictions.\r\n    */\r\n    function transfer (address to, uint256 value)\r\n        public\r\n        notRestricted(msg.sender, to, value)\r\n        returns (bool success)\r\n    {\r\n        success = ERC20.transfer(to, value);\r\n    }\r\n\r\n    /**\r\n    Overrides the parent class token transferFrom function to enforce restrictions.\r\n    */\r\n    function transferFrom (address from, address to, uint256 value)\r\n        public\r\n        notRestrictedTransferFrom(msg.sender, from, to, value)\r\n        returns (bool success)\r\n    {\r\n        success = ERC20.transferFrom(from, to, value);\r\n    }\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTimelocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amountToRelease\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRestrictionsAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"detectTransferFromRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTimelocker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"data\",\"type\":\"string\"}],\"name\":\"setWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWhitelistData\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelister\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeTimelocker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addRevoker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"checkWhitelists\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkLockup\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"status\",\"type\":\"bool\"},{\"name\":\"data\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeRevoker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"checkTimelock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getWhitelistStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRestrictionsAddress\",\"type\":\"address\"}],\"name\":\"updateTransferRestrictions\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"revoke\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelister\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRevoker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newRestrictionsAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"RestrictionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedBurner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"BurnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedBurner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"BurnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedMinter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedMinter\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedPauser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedPauser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"releaseTime\",\"type\":\"uint256\"}],\"name\":\"AccountLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AccountRelease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedTimelocker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"TimelockerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedTimelocker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"TimelockerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"string\"}],\"name\":\"WhitelistUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"WhitelisterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedWhitelister\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"WhitelisterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedRevoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"RevokerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedRevoker\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"RevokerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addedOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"addedBy\",\"type\":\"address\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"removedOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"removedBy\",\"type\":\"address\"}],\"name\":\"OwnerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "HagToken", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e4dc667f92b9d110a307b265bf8afacdd0fd3c8c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7d3afabbceccff0bda34b20c92cb0f58a5a8aa735387152c8f3e7670e0e4c496"}