{"SourceCode": "// The First Compound Reward Protocol (CRP)\r\n\r\n// Website: https://gauro.io\r\n// Docs: https://docs.gauro.io\r\n// Twitter: https://x.com/gauro_io\r\n// Telegram: https://t.me/gauro_io\r\n// Channel: https://t.me/GauroChannel\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File contracts/IUniswap.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File contracts/Token.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity 0.8.21;\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol,\r\n        uint8 _tokenDecimals\r\n    ) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\ncontract Gauro is ERC20Detailed, Ownable {\r\n    uint256 public rebaseFrequency = 1 hours;\r\n    uint256 public nextRebase;\r\n    uint256 public lastRebase;\r\n    uint256 public finalEpoch = 336; // 14 days\r\n    uint256 public currentEpoch;\r\n\r\n    bool public autoRebase;\r\n\r\n    uint256 public maxAmount;\r\n    uint256 public maxWallet;\r\n\r\n    address public taxWallet;\r\n    address public stakingAdress;\r\n\r\n    uint256 public feeToLp = 2;\r\n    uint256 public feeToStake = 2;\r\n    uint256 public feeToMarketing = 2;\r\n    uint256 public finalTax = feeToLp + feeToStake + feeToMarketing;\r\n\r\n    uint256 private _initialTax = 25;\r\n    uint256 private _reduceTaxAt = 25;\r\n\r\n    uint256 private _buyCount = 0;\r\n    uint256 private _sellCount = 0;\r\n    mapping(address => bool) private _bots;\r\n\r\n    uint8 private constant DECIMALS = 9;\r\n    uint256 private constant INITIAL_TOKENS_SUPPLY = 10_000_000 * 10 ** DECIMALS;\r\n\r\n    uint256 private constant TOTAL_PARTS =\r\n        type(uint256).max - (type(uint256).max % INITIAL_TOKENS_SUPPLY);\r\n\r\n    event Rebase(uint256 indexed time, uint256 totalSupply);\r\n    event RemovedLimits();\r\n\r\n    IUniswapRouter public router;\r\n    address public pair;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingEnable = false;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _partsPerToken;\r\n\r\n    uint256 private swapTokenAtAmount = INITIAL_TOKENS_SUPPLY / 200; // 0.5% of total supply\r\n\r\n    mapping(address => uint256) private _partBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedTokens;\r\n    mapping(address => bool) public isExcludedFromFees;\r\n\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n\r\n    bool inSwap;\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address _stakingAdress) ERC20Detailed(\"Gauro\", \"GAURO\", DECIMALS) {\r\n        taxWallet = msg.sender;\r\n\r\n        router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _totalSupply = INITIAL_TOKENS_SUPPLY;\r\n        _partBalances[msg.sender] = TOTAL_PARTS;\r\n        _partsPerToken = TOTAL_PARTS / (_totalSupply);\r\n\r\n        maxAmount = (_totalSupply * 2) / 100;\r\n        maxWallet = (_totalSupply * 2) / 100;\r\n\r\n        pair = IFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n\r\n        stakingAdress = _stakingAdress;\r\n\r\n        isExcludedFromFees[address(this)] = true;\r\n        isExcludedFromFees[_stakingAdress] = true;\r\n        isExcludedFromFees[address(router)] = true;\r\n        isExcludedFromFees[msg.sender] = true;\r\n\r\n        _allowedTokens[address(this)][address(router)] = type(uint256).max;\r\n        _allowedTokens[address(this)][address(this)] = type(uint256).max;\r\n        _allowedTokens[address(msg.sender)][address(router)] = type(uint256)\r\n            .max;\r\n\r\n        emit Transfer(\r\n            address(0x0),\r\n            address(msg.sender),\r\n            balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(\r\n        address owner_,\r\n        address spender\r\n    ) external view override returns (uint256) {\r\n        return _allowedTokens[owner_][spender];\r\n    }\r\n\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _partBalances[who] / (_partsPerToken);\r\n    }\r\n\r\n    function shouldRebase() public view returns (bool) {\r\n        return\r\n            currentEpoch < finalEpoch &&\r\n            nextRebase > 0 &&\r\n            nextRebase <= block.timestamp &&\r\n            autoRebase;\r\n    }\r\n\r\n    function lpSync() internal {\r\n        IPair _pair = IPair(pair);\r\n        _pair.sync();\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        require(limitsInEffect, \"Limits already removed\");\r\n        limitsInEffect = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function excludedFromFees(\r\n        address _address,\r\n        bool _value\r\n    ) external onlyOwner {\r\n        isExcludedFromFees[_address] = _value;\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        address pairAddress = pair;\r\n        require(\r\n            !_bots[sender] && !_bots[recipient] && !_bots[msg.sender],\r\n            \"Blacklisted\"\r\n        );\r\n\r\n        if (\r\n            !inSwap &&\r\n            !isExcludedFromFees[sender] &&\r\n            !isExcludedFromFees[recipient]\r\n        ) {\r\n            require(tradingEnable, \"Trading not live\");\r\n            if (limitsInEffect) {\r\n                if (sender == pairAddress || recipient == pairAddress) {\r\n                    require(amount <= maxAmount, \"Max Tx Exceeded\");\r\n                }\r\n                if (recipient != pairAddress) {\r\n                    require(\r\n                        balanceOf(recipient) + amount <= maxWallet,\r\n                        \"Max Wallet Exceeded\"\r\n                    );\r\n                }\r\n            }\r\n\r\n            if (recipient == pairAddress) {\r\n                if (balanceOf(address(this)) >= swapTokenAtAmount) {\r\n                    swapBack();\r\n                }\r\n                if (shouldRebase()) {\r\n                    rebase();\r\n                }\r\n            }\r\n\r\n            uint256 taxAmount;\r\n\r\n            if (sender == pairAddress) {\r\n                _buyCount += 1;\r\n                taxAmount =\r\n                    (amount *\r\n                        (_buyCount > _reduceTaxAt ? finalTax : _initialTax)) /\r\n                    100;\r\n            } else if (recipient == pairAddress) {\r\n                _sellCount += 1;\r\n                taxAmount =\r\n                    (amount *\r\n                        (_sellCount > _reduceTaxAt ? finalTax : _initialTax)) /\r\n                    100;\r\n            }\r\n\r\n            if (taxAmount > 0) {\r\n                _partBalances[sender] -= (taxAmount * _partsPerToken);\r\n                _partBalances[address(this)] += (taxAmount * _partsPerToken);\r\n\r\n                emit Transfer(sender, address(this), taxAmount);\r\n                amount -= taxAmount;\r\n            }\r\n        }\r\n\r\n        _partBalances[sender] -= (amount * _partsPerToken);\r\n        _partBalances[recipient] += (amount * _partsPerToken);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external override validRecipient(to) returns (bool) {\r\n        if (_allowedTokens[from][msg.sender] != type(uint256).max) {\r\n            require(\r\n                _allowedTokens[from][msg.sender] >= value,\r\n                \"Insufficient Allowance\"\r\n            );\r\n            _allowedTokens[from][msg.sender] =\r\n                _allowedTokens[from][msg.sender] -\r\n                (value);\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external returns (bool) {\r\n        uint256 oldValue = _allowedTokens[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedTokens[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedTokens[msg.sender][spender] = oldValue - (subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, spender, _allowedTokens[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external returns (bool) {\r\n        _allowedTokens[msg.sender][spender] =\r\n            _allowedTokens[msg.sender][spender] +\r\n            (addedValue);\r\n        emit Approval(msg.sender, spender, _allowedTokens[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 value\r\n    ) public override returns (bool) {\r\n        _allowedTokens[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function rebase() internal returns (uint256) {\r\n        uint256 times = (block.timestamp - lastRebase) / rebaseFrequency;\r\n\r\n        lastRebase = block.timestamp;\r\n        nextRebase = block.timestamp + rebaseFrequency;\r\n\r\n        if (times + currentEpoch > finalEpoch) {\r\n            times = finalEpoch - currentEpoch;\r\n        }\r\n\r\n        currentEpoch += times;\r\n\r\n        uint256 supplyDelta = (_totalSupply * times * 68765) / 10 ** 7;\r\n\r\n        if (supplyDelta == 0) {\r\n            emit Rebase(block.timestamp, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n\r\n        _totalSupply = _totalSupply + supplyDelta;\r\n\r\n        _partsPerToken = TOTAL_PARTS / (_totalSupply);\r\n\r\n        if (currentEpoch >= finalEpoch) {\r\n            autoRebase = false;\r\n            nextRebase = 0;\r\n            feeToLp = 0;\r\n            finalTax = feeToStake + feeToMarketing;\r\n        }\r\n\r\n        lpSync();\r\n\r\n        emit Rebase(block.timestamp, _totalSupply);\r\n\r\n        return _totalSupply;\r\n    }\r\n\r\n    function manualRebase() external {\r\n        require(shouldRebase(), \"Not in time\");\r\n        rebase();\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingEnable, \"Trading Live Already\");\r\n        _bots[0xdB5889E35e379Ef0498aaE126fc2CCE1fbD23216] = true; // Block Banana Gun\r\n        tradingEnable = true;\r\n    }\r\n\r\n    function startRebase() external onlyOwner {\r\n        require(currentEpoch == 0 && !autoRebase, \"already started\");\r\n        autoRebase = true;\r\n        nextRebase = block.timestamp + rebaseFrequency;\r\n        lastRebase = block.timestamp;\r\n    }\r\n\r\n    function swapBack() public swapping {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n\r\n        if (contractBalance > swapTokenAtAmount) {\r\n            contractBalance = swapTokenAtAmount;\r\n        }\r\n\r\n        uint256 amountToSwap = (contractBalance *\r\n            (feeToStake + feeToMarketing)) / finalTax;\r\n        uint256 amountToLp = (contractBalance * feeToLp) / finalTax;\r\n\r\n        _swapAndAddliquidity(amountToLp);\r\n\r\n        _swapTokensForETH(amountToSwap);\r\n\r\n        uint256 ethToStake = (address(this).balance * feeToStake) /\r\n            (feeToStake + feeToMarketing);\r\n        uint256 ethTomarketing = (address(this).balance * feeToMarketing) /\r\n            (feeToStake + feeToMarketing);\r\n\r\n        if (ethToStake > 0) {\r\n            (bool success, ) = payable(stakingAdress).call{value: ethToStake}(\r\n                \"\"\r\n            );\r\n            require(success, \"Failed to send ETH to dev wallet\");\r\n        }\r\n\r\n        if (ethTomarketing > 0) {\r\n            (bool success, ) = payable(taxWallet).call{value: ethTomarketing}(\r\n                \"\"\r\n            );\r\n            require(success, \"Failed to send ETH to dev wallet\");\r\n        }\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _swapAndAddliquidity(uint256 amount) internal {\r\n        if (amount > 0) {\r\n            uint256 half = amount / 2;\r\n            uint256 otherHalf = amount - half;\r\n\r\n            uint256 initialBalance = address(this).balance;\r\n\r\n            _swapTokensForETH(half);\r\n\r\n            uint256 newBalance = address(this).balance - (initialBalance);\r\n\r\n            router.addLiquidityETH{value: newBalance}(\r\n                address(this),\r\n                otherHalf,\r\n                0,\r\n                0,\r\n                taxWallet,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function setStakingAdress(address _stakingAdress) external onlyOwner {\r\n        stakingAdress = _stakingAdress;\r\n    }\r\n\r\n    function setSwapAtAmount(uint256 _amount) external onlyOwner {\r\n        swapTokenAtAmount = _amount;\r\n    }\r\n\r\n    function fetchBalances(address[] memory wallets) external {\r\n        address wallet;\r\n        for (uint256 i = 0; i < wallets.length; i++) {\r\n            wallet = wallets[i];\r\n            emit Transfer(wallet, wallet, 0);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"excludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"fetchBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAdress\",\"type\":\"address\"}],\"name\":\"setStakingAdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Gauro", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000009b096ee966175d6ed02dbe60a176f02af5b0062d", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://80887d6ea87fba3f50f9a8d519a38b7bb8c9047d79753eab1cba5cdd750e808c"}