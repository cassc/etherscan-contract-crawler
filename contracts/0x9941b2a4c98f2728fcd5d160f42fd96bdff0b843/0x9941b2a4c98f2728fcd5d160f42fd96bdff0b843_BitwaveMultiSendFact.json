{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/BitwaveMultiSendFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./BitwaveMultiSend.sol\\\";\\r\\n\\r\\n\\r\\n/// @title A factory contract for Multi-Send contracts.\\r\\n/// @author Bitwave\\r\\n/// @author Inish Crisson\\r\\n/// @notice Now with support for fallback functions.\\r\\ncontract BitwaveMultiSendFactory {\\r\\n\\r\\n    mapping(address => address) public multiSendAddressMap;\\r\\n    event newMultiSend(address owner, address multiPayChild);\\r\\n    uint8 public bwChainId;\\r\\n\\r\\n    constructor(uint8 _bwChainId) {\\r\\n        bwChainId = _bwChainId;\\r\\n    }\\r\\n\\r\\n/// @notice Deploys a new Bitwave Multi-Send Contract\\r\\n/// @return newBitwaveMultiSend The address of the deployed contract.\\r\\n    function deployNewMultiSend() public returns (address) {\\r\\n        require (multiSendAddressMap[msg.sender] == address(0x0));\\r\\n        BitwaveMultiSend newBitwaveMultiSend = new BitwaveMultiSend(msg.sender, bwChainId);\\r\\n        multiSendAddressMap[msg.sender] = address(newBitwaveMultiSend);\\r\\n        emit newMultiSend(msg.sender, address(newBitwaveMultiSend));\\r\\n        return (address(newBitwaveMultiSend));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/BitwaveMultiSend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title A multi-send contract for ERC-20 tokens and ETH.\\n/// @author Bitwave\\n/// @author Pat White\\n/// @author Inish Crisson\\n/// @notice Now with support for fallback functions. \\n/// @notice This is intended to be deployed by a factory contract, hence why \\\"owner\\\" has been paramaterised. \\ncontract BitwaveMultiSend is ReentrancyGuard {\\n  \\n  address public owner;\\n\\n  // A uint to produce a unique ID for each transaction.\\n  uint32 public paymentCount;\\n  uint8 public bwChainId;\\n\\n  constructor(address _owner, uint8 _bwChainId) {\\n    owner = _owner;\\n    bwChainId = _bwChainId;\\n  }\\n\\n  modifier restrictedToOwner() {\\n        require(msg.sender == owner, \\\"Sender not authorized.\\\");\\n        _;\\n  }\\n\\n  event multiSendPaymentExecuted(bytes id);\\n\\n/// @notice Sends Eth to an array of addresses according to the values in a uint array.\\n/// @param _to An array of addresses to be paid.\\n/// @param _value An array of values to be paid to \\\"_to\\\" addresses.\\n/// @return _success A bool to indicate transaction success.\\n  function sendEth(address payable [] memory _to, uint256[] memory _value) public restrictedToOwner nonReentrant payable returns (bool _success) {\\n        // input validation\\n        require(_to.length == _value.length);\\n        require(_to.length <= 255);\\n\\n        // count values for refunding sender\\n        uint256 beforeValue = msg.value;\\n        uint256 afterValue = 0;\\n\\n        // Generate a unique ID for this transaction.\\n        emit multiSendPaymentExecuted(abi.encodePacked(address(this), paymentCount++, uint8(_value.length), bwChainId));\\n\\n        // loop through to addresses and send value\\n        for (uint8 i = 0; i < _to.length; i++) {\\n            afterValue = afterValue + (_value[i]);\\n            (bool sent, ) = _to[i].call{value: _value[i]}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n\\n        // send back remaining value to sender\\n        uint256 remainingValue = beforeValue - afterValue;\\n        if (remainingValue > 0) {\\n            (bool sent, ) = owner.call{value: remainingValue}(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n        }\\n        return true;\\n  }\\n\\n/// @notice Sends *ONE TYPE OF* ERC-20 token to an array of addresses according to the values in a uint array.\\n/// @param _tokenAddress The ERC-20 token address.\\n/// @param _to An array of addresses to be paid.\\n/// @param _value An array of values to be paid to \\\"_to\\\" addresses.\\n/// @return _success A bool to indicate transaction success.\\n  function sendErc20(address _tokenAddress, address[] memory _to, uint256[] memory _value) public restrictedToOwner nonReentrant returns (bool _success) {\\n      // input validation\\n      require(_to.length == _value.length);\\n      require(_to.length <= 255);\\n\\n      // use the erc20 abi\\n      IERC20 token = IERC20(_tokenAddress);\\n\\n      // Generate a unique ID for this transaction.\\n      emit multiSendPaymentExecuted(abi.encodePacked(address(this), paymentCount++, uint8(_value.length), bwChainId));\\n\\n      // loop through to addresses and send value\\n      for (uint8 i = 0; i < _to.length; i++) {\\n          assert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\\n      }\\n      return true;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_bwChainId\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"multiPayChild\",\"type\":\"address\"}],\"name\":\"newMultiSend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bwChainId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployNewMultiSend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multiSendAddressMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BitwaveMultiSendFactory", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000089", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}