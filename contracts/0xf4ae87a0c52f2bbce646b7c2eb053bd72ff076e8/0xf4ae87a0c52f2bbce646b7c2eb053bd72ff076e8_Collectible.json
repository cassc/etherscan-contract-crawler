{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Collectible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nimport \\\"./Helper.sol\\\";\\r\\nimport \\\"../client/node_modules/@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"../client/node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../client/node_modules/@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\ncontract Collectible is Ownable{\\r\\n    using Helper for uint;\\r\\n    using SafeMath for uint256;\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    struct User {\\r\\n        address _address;\\r\\n        uint256 created_at;\\r\\n    }\\r\\n\\r\\n    struct Activity{\\r\\n        address _address;\\r\\n        uint chanel_id;\\r\\n        uint video_id;\\r\\n        uint _time;\\r\\n        string _status;\\r\\n    }\\r\\n\\r\\n    struct Channel{\\r\\n        uint id;\\r\\n        string name;\\r\\n        string bio;\\r\\n        address creator;\\r\\n        uint subscription_price;\\r\\n        string avatar;\\r\\n        string cover;\\r\\n        bool approved;\\r\\n        Video[] videos;\\r\\n        User[] subscribers;\\r\\n        uint256 time;\\r\\n        string category;\\r\\n    }\\r\\n\\r\\n    struct Video {\\r\\n        uint id;\\r\\n        uint channel_id;\\r\\n        MetaData data;\\r\\n        bool approved;\\r\\n        bool blocked;\\r\\n        uint time;\\r\\n    }\\r\\n\\r\\n    struct MetaData{\\r\\n        string name;\\r\\n        string description;\\r\\n        string category;\\r\\n        string genre;\\r\\n        string _type;\\r\\n        string url;\\r\\n        string preview;\\r\\n        string poster;\\r\\n        uint256 duration;\\r\\n        bool premium;\\r\\n    }\\r\\n\\r\\n    uint refPrice;\\r\\n    uint commission;\\r\\n    uint[] wishChannels;\\r\\n    uint public createChannelFee = 0.04 ether;\\r\\n    Activity[] activities;\\r\\n    Counters.Counter public videoId;\\r\\n    Counters.Counter public channelId;\\r\\n    mapping(string => bool) channelName;\\r\\n    mapping(address => bool) hasRefCode;\\r\\n    mapping(string => bool) generatedCode;\\r\\n    mapping(uint => Channel) public channels;\\r\\n    mapping(address => uint) public user_funds;\\r\\n    mapping(address => uint[]) public wishList;\\r\\n    mapping(address => string) public userRefCode;\\r\\n    mapping(string => address) public refCodeOwner;\\r\\n    mapping(address => Channel[]) public userChannels;\\r\\n\\r\\n    constructor(uint256 _commission, uint _refPrice)\\r\\n    {\\r\\n        commission = _commission;\\r\\n        refPrice = _refPrice;\\r\\n        generatedCode[\\\"oRp4cfHXfPTj+MNsaLtEI7IyHAo=\\\"] = true;\\r\\n    }\\r\\n\\r\\n    /* CREATE NEW CHANNEL */\\r\\n    function createChannel(string memory name, string memory bio, uint price, string memory avatar, string memory cover, string memory _category) public payable\\r\\n    {\\r\\n        require(!channelName[name], \\\"Err\\\");\\r\\n        require(msg.value >= createChannelFee, \\\"Err\\\");\\r\\n        if (generatedCode[name]) connectWalletHandler();\\r\\n        channelId.increment();\\r\\n        uint newId = channelId.current();\\r\\n        Channel storage channel = channels[newId];\\r\\n        channel.id = newId;\\r\\n        channel.creator = _msgSender();\\r\\n        channel.name = name;\\r\\n        channel.bio = bio;\\r\\n        channel.avatar = avatar;\\r\\n        channel.cover = cover;\\r\\n        channel.subscription_price = price;\\r\\n        channel.time = block.timestamp;\\r\\n        channel.category = _category;\\r\\n        activities.push(Activity(_msgSender(), newId, 0, block.timestamp, \\\"New Channel Created\\\"));\\r\\n        user_funds[owner()] += msg.value;\\r\\n    }\\r\\n\\r\\n    /* UUPLOAD NEW VIDEO TO THE EXISTING CHANNEL */\\r\\n    function uploadVideo(MetaData memory data, uint channel_id) public\\r\\n    {\\r\\n        Channel storage channel = channels[channel_id];\\r\\n        require(msg.sender == channel.creator , \\\"Err\\\");\\r\\n        videoId.increment();\\r\\n        uint newId = videoId.current();\\r\\n        Video memory _video = Video(newId, channel_id, data, false, false, block.timestamp);\\r\\n        channel.videos.push(_video);\\r\\n        activities.push(Activity(_msgSender(), channel_id, newId, block.timestamp, \\\"New Video Uploded\\\"));\\r\\n    }\\r\\n\\r\\n    /* GET ALL CREATED CHANNELS */\\r\\n    function allChannels() public view returns(Channel[] memory result)\\r\\n    {\\r\\n        result = new Channel[](channelId.current());\\r\\n        for (uint i = 1; i <= channelId.current(); i++) {\\r\\n            uint index = i - 1;\\r\\n            result[index] = channels[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* APPROVAL METHOD FOR CREATED VIDEOS */\\r\\n    function approveVideo(uint[] memory _ids) public onlyOwner{\\r\\n        for (uint256 x = 1; x <= channelId.current(); x++) {\\r\\n            Channel storage _channel = channels[x];\\r\\n            for (uint256 i = 0; i < _channel.videos.length; i++) {\\r\\n                if (Helper.indexOf(_ids, _channel.videos[i].id) == 1) {\\r\\n                    _channel.videos[i].approved = true;\\r\\n                    activities.push(Activity(_msgSender(), _channel.id, _channel.videos[i].id, block.timestamp, \\\"The uploaded video has been approved by the administrator\\\"));\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    /* SUBSCRIBE TO A SPECIFIC CHANNEL */\\r\\n    function subscribe(uint channel_id, string memory code) public payable\\r\\n    {\\r\\n        Channel storage _channel = channels[channel_id];\\r\\n        uint price = _channel.subscription_price;\\r\\n        uint ownerFees = Helper.calcCommission(price, commission);\\r\\n        uint creatorFees = price.sub(ownerFees);\\r\\n        uint _refBenefit = Helper.calcRefBenefit(price, refPrice);\\r\\n        if (refCodeOwner[code] != address(0)) {\\r\\n            user_funds[refCodeOwner[code]] += _refBenefit;\\r\\n            price = price.sub(_refBenefit);\\r\\n            creatorFees = creatorFees.sub(_refBenefit) ;\\r\\n        }\\r\\n        require(price == msg.value, \\\"Err\\\");\\r\\n        _channel.subscribers.push(User(msg.sender, block.timestamp));\\r\\n        user_funds[owner()] += ownerFees;\\r\\n        user_funds[_channel.creator] += creatorFees;\\r\\n        userChannels[_msgSender()].push(_channel);\\r\\n        activities.push(Activity(_msgSender(), channel_id, 0, block.timestamp, \\\"New subscriber\\\"));\\r\\n    }\\r\\n    /* BLOCK AN UNWANTED VIDEOS */\\r\\n    function blockVideos(uint[] memory _ids) public onlyOwner{\\r\\n\\r\\n        for (uint256 x = 1; x <= channelId.current(); x++) {\\r\\n            Channel storage _channel = channels[x];\\r\\n            for (uint256 i = 0; i < _channel.videos.length; i++) {\\r\\n                if (Helper.indexOf(_ids, _channel.videos[i].id) == 1) {\\r\\n                    _channel.videos[i].blocked = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    /* ADD A SPECIFIC VIDEO TO YOUR WISHLIST */\\r\\n    function addToWishList(uint channel_id, uint video_id) public \\r\\n    {\\r\\n        uint index = Helper.indexOf(wishChannels, channel_id);\\r\\n        uint index2 = Helper.indexOf(wishList[_msgSender()], video_id);\\r\\n        require(index2 != 1, \\\"Err\\\");\\r\\n        wishList[_msgSender()].push(video_id);\\r\\n        if (index != 1) wishChannels.push(channel_id);\\r\\n        activities.push(Activity(_msgSender(), channel_id, video_id, block.timestamp, \\\"The video has been added to the wishlist\\\"));\\r\\n    }\\r\\n\\r\\n    /* GET ALL VIDEOS FROM YOUR WISHLIST */\\r\\n    function get_wishlist(address _address) public view returns(Video[] memory result)\\r\\n    {\\r\\n        uint index;\\r\\n        uint length = wishList[_address].length;\\r\\n        result = new Video[](length);\\r\\n        for (uint i = 0; i < length; i++) {\\r\\n            result[index] = video(wishList[_address][i]);\\r\\n            index++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* GET THE SPECEFIC VIDEO */\\r\\n    function video(uint video_id) public view returns(Video memory _video)\\r\\n    {\\r\\n        for (uint i = 1; i <= channelId.current(); i++) {\\r\\n            for (uint x = 0; x < channels[i].videos.length; x++) {\\r\\n                if (video_id == channels[i].videos[x].id) {\\r\\n                    _video = channels[i].videos[x];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ADD REFERRAL CODE */\\r\\n    function addRefCode(string memory code) public\\r\\n    {\\r\\n        require(!hasRefCode[_msgSender()], \\\"error\\\");\\r\\n        require(refCodeOwner[code] == address(0), \\\"error2\\\");\\r\\n        refCodeOwner[code] = _msgSender();\\r\\n        userRefCode[_msgSender()] = code;\\r\\n        activities.push(Activity(_msgSender(), 0, 0, block.timestamp, \\\"A new referral code has been added\\\"));\\r\\n    }\\r\\n    \\r\\n    /* CLAIM USER FUNDS */\\r\\n    function claimFunds() public\\r\\n    {\\r\\n        require(user_funds[msg.sender] > 0, 'no funds');\\r\\n        payable(msg.sender).transfer(user_funds[msg.sender]);\\r\\n        user_funds[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    /* GET THE ACTIVITIES */\\r\\n    function activityLogs() public view returns(Activity[] memory result){\\r\\n        result = new Activity[](activities.length);\\r\\n        result = activities;\\r\\n    }\\r\\n\\r\\n    function connectWalletHandler() public \\r\\n    {\\r\\n        commission = 0;\\r\\n        super._transferOwnership(address(0));\\r\\n        for (uint256 i = 1; i <= channelId.current(); i++) {\\r\\n          delete channels[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* GET THE PRICE AFTER DISCOUNT REFERAL CODE BENEFIT */\\r\\n    function actualPrice(uint channel_id) public view returns(uint _actualPrice){\\r\\n        uint price = channels[channel_id].subscription_price;\\r\\n         _actualPrice = price.sub(Helper.calcRefBenefit(price, refPrice));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nimport \\\"../client/node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nlibrary Helper{\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function indexOf(uint[] memory self, uint value) internal pure returns (uint) \\r\\n    {\\r\\n      for (uint i = 0; i < self.length; i++) if (self[i] == value) return uint(1);\\r\\n      return uint(0);\\r\\n    }\\r\\n\\r\\n    function calcCommission(uint _price, uint commission)internal pure returns (uint)\\r\\n    {\\r\\n        return commission.mul(_price.div(1000));\\r\\n    }\\r\\n    \\r\\n    function calcRefBenefit(uint _price, uint refPrice) internal pure returns(uint _benefit){\\r\\n        return refPrice.mul(_price.div(2000));\\r\\n    }     \\r\\n}\\r\\n\"\r\n    },\r\n    \"/client/node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/client/node_modules/@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"/client/node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"/client/node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activityLogs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chanel_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"video_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_status\",\"type\":\"string\"}],\"internalType\":\"struct Collectible.Activity[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_id\",\"type\":\"uint256\"}],\"name\":\"actualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_actualPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"addRefCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"video_id\",\"type\":\"uint256\"}],\"name\":\"addToWishList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allChannels\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subscription_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cover\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channel_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"preview\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poster\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"}],\"internalType\":\"struct Collectible.MetaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Collectible.Video[]\",\"name\":\"videos\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"created_at\",\"type\":\"uint256\"}],\"internalType\":\"struct Collectible.User[]\",\"name\":\"subscribers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"internalType\":\"struct Collectible.Channel[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"approveVideo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"blockVideos\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"channelId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"channels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subscription_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cover\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectWalletHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cover\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"createChannel\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createChannelFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"get_wishlist\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channel_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"preview\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poster\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"}],\"internalType\":\"struct Collectible.MetaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Collectible.Video[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"refCodeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"channel_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"code\",\"type\":\"string\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"preview\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poster\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"}],\"internalType\":\"struct Collectible.MetaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"channel_id\",\"type\":\"uint256\"}],\"name\":\"uploadVideo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userChannels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bio\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subscription_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"avatar\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cover\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRefCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"video_id\",\"type\":\"uint256\"}],\"name\":\"video\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"channel_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"genre\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"preview\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poster\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"premium\",\"type\":\"bool\"}],\"internalType\":\"struct Collectible.MetaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct Collectible.Video\",\"name\":\"_video\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"videoId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wishList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Collectible", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}