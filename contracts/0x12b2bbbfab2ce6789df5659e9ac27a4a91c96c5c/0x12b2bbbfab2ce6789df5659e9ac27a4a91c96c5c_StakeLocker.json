{"SourceCode": "// SPDX-License-Identifier:  AGPL-3.0-or-later // hevm: flattened sources of contracts/StakeLocker.sol\r\npragma solidity =0.6.11 >=0.6.0 <0.8.0 >=0.6.2 <0.8.0;\r\n\r\n////// contracts/interfaces/IMapleGlobals.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IMapleGlobals {\r\n\r\n    function pendingGovernor() external view returns (address);\r\n\r\n    function governor() external view returns (address);\r\n\r\n    function globalAdmin() external view returns (address);\r\n\r\n    function mpl() external view returns (address);\r\n\r\n    function mapleTreasury() external view returns (address);\r\n\r\n    function isValidBalancerPool(address) external view returns (bool);\r\n\r\n    function treasuryFee() external view returns (uint256);\r\n\r\n    function investorFee() external view returns (uint256);\r\n\r\n    function defaultGracePeriod() external view returns (uint256);\r\n\r\n    function fundingPeriod() external view returns (uint256);\r\n\r\n    function swapOutRequired() external view returns (uint256);\r\n\r\n    function isValidLiquidityAsset(address) external view returns (bool);\r\n\r\n    function isValidCollateralAsset(address) external view returns (bool);\r\n\r\n    function isValidPoolDelegate(address) external view returns (bool);\r\n\r\n    function validCalcs(address) external view returns (bool);\r\n\r\n    function isValidCalc(address, uint8) external view returns (bool);\r\n\r\n    function getLpCooldownParams() external view returns (uint256, uint256);\r\n\r\n    function isValidLoanFactory(address) external view returns (bool);\r\n\r\n    function isValidSubFactory(address, address, uint8) external view returns (bool);\r\n\r\n    function isValidPoolFactory(address) external view returns (bool);\r\n    \r\n    function getLatestPrice(address) external view returns (uint256);\r\n    \r\n    function defaultUniswapPath(address, address) external view returns (address);\r\n\r\n    function minLoanEquity() external view returns (uint256);\r\n    \r\n    function maxSwapSlippage() external view returns (uint256);\r\n\r\n    function protocolPaused() external view returns (bool);\r\n\r\n    function stakerCooldownPeriod() external view returns (uint256);\r\n\r\n    function lpCooldownPeriod() external view returns (uint256);\r\n\r\n    function stakerUnstakeWindow() external view returns (uint256);\r\n\r\n    function lpWithdrawWindow() external view returns (uint256);\r\n\r\n    function oracleFor(address) external view returns (address);\r\n\r\n    function validSubFactories(address, address) external view returns (bool);\r\n\r\n    function setStakerCooldownPeriod(uint256) external;\r\n\r\n    function setLpCooldownPeriod(uint256) external;\r\n\r\n    function setStakerUnstakeWindow(uint256) external;\r\n\r\n    function setLpWithdrawWindow(uint256) external;\r\n\r\n    function setMaxSwapSlippage(uint256) external;\r\n\r\n    function setGlobalAdmin(address) external;\r\n\r\n    function setValidBalancerPool(address, bool) external;\r\n\r\n    function setProtocolPause(bool) external;\r\n\r\n    function setValidPoolFactory(address, bool) external;\r\n\r\n    function setValidLoanFactory(address, bool) external;\r\n\r\n    function setValidSubFactory(address, address, bool) external;\r\n\r\n    function setDefaultUniswapPath(address, address, address) external;\r\n\r\n    function setPoolDelegateAllowlist(address, bool) external;\r\n\r\n    function setCollateralAsset(address, bool) external;\r\n\r\n    function setLiquidityAsset(address, bool) external;\r\n\r\n    function setCalc(address, bool) external;\r\n\r\n    function setInvestorFee(uint256) external;\r\n\r\n    function setTreasuryFee(uint256) external;\r\n\r\n    function setMapleTreasury(address) external;\r\n\r\n    function setDefaultGracePeriod(uint256) external;\r\n\r\n    function setMinLoanEquity(uint256) external;\r\n\r\n    function setFundingPeriod(uint256) external;\r\n\r\n    function setSwapOutRequired(uint256) external;\r\n\r\n    function setPriceOracle(address, address) external;\r\n\r\n    function setPendingGovernor(address) external;\r\n\r\n    function acceptGovernor() external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/IBaseFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IBaseFDT {\r\n\r\n    /**\r\n        @dev    Returns the total amount of funds a given address is able to withdraw currently.\r\n        @param  owner Address of FDT holder.\r\n        @return A uint256 representing the available funds for a given account.\r\n    */\r\n    function withdrawableFundsOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n        @dev Withdraws all available funds for a FDT holder.\r\n    */\r\n    function withdrawFunds() external;\r\n\r\n    /**\r\n        @dev   This event emits when new funds are distributed.\r\n        @param by               The address of the sender that distributed funds.\r\n        @param fundsDistributed The amount of funds received for distribution.\r\n    */\r\n    event FundsDistributed(address indexed by, uint256 fundsDistributed);\r\n\r\n    /**\r\n        @dev   This event emits when distributed funds are withdrawn by a token holder.\r\n        @param by             The address of the receiver of funds.\r\n        @param fundsWithdrawn The amount of funds that were withdrawn.\r\n        @param totalWithdrawn The total amount of funds that were withdrawn.\r\n    */\r\n    event FundsWithdrawn(address indexed by, uint256 fundsWithdrawn, uint256 totalWithdrawn);\r\n\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n////// contracts/token/interfaces/IBasicFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\r\n\r\n/* import \"./IBaseFDT.sol\"; */\r\n\r\ninterface IBasicFDT is IBaseFDT, IERC20 {\r\n\r\n    event PointsPerShareUpdated(uint256);\r\n\r\n    event PointsCorrectionUpdated(address indexed, int256);\r\n\r\n    function withdrawnFundsOf(address) external view returns (uint256);\r\n\r\n    function accumulativeFundsOf(address) external view returns (uint256);\r\n\r\n    function updateFundsReceived() external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/IExtendedFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./IBasicFDT.sol\"; */\r\n\r\ninterface IExtendedFDT is IBasicFDT {\r\n\r\n    event LossesPerShareUpdated(uint256);\r\n\r\n    event LossesCorrectionUpdated(address indexed, int256);\r\n\r\n    event LossesDistributed(address indexed, uint256);\r\n\r\n    event LossesRecognized(address indexed, uint256, uint256);\r\n\r\n    function lossesPerShare() external view returns (uint256);\r\n\r\n    function recognizableLossesOf(address) external view returns (uint256);\r\n\r\n    function recognizedLossesOf(address) external view returns (uint256);\r\n\r\n    function accumulativeLossesOf(address) external view returns (uint256);\r\n\r\n    function updateLossesReceived() external;\r\n\r\n}\r\n\r\n////// contracts/token/interfaces/IPoolFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./IExtendedFDT.sol\"; */\r\n\r\ninterface IPoolFDT is IExtendedFDT {\r\n\r\n    function interestSum() external view returns (uint256);\r\n\r\n    function poolLosses() external view returns (uint256);\r\n\r\n    function interestBalance() external view returns (uint256);\r\n\r\n    function lossesBalance() external view returns (uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/IPool.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"../token/interfaces/IPoolFDT.sol\"; */\r\n\r\ninterface IPool is IPoolFDT {\r\n\r\n    function poolDelegate() external view returns (address);\r\n\r\n    function poolAdmins(address) external view returns (bool);\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function increaseCustodyAllowance(address, uint256) external;\r\n\r\n    function transferByCustodian(address, address, uint256) external;\r\n\r\n    function poolState() external view returns (uint256);\r\n\r\n    function deactivate() external;\r\n\r\n    function finalize() external;\r\n\r\n    function claim(address, address) external returns (uint256[7] memory);\r\n\r\n    function setLockupPeriod(uint256) external;\r\n    \r\n    function setStakingFee(uint256) external;\r\n\r\n    function setPoolAdmin(address, bool) external;\r\n\r\n    function fundLoan(address, address, uint256) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function superFactory() external view returns (address);\r\n\r\n    function triggerDefault(address, address) external;\r\n\r\n    function isPoolFinalized() external view returns (bool);\r\n\r\n    function setOpenToPublic(bool) external;\r\n\r\n    function setAllowList(address, bool) external;\r\n\r\n    function allowedLiquidityProviders(address) external view returns (bool);\r\n\r\n    function openToPublic() external view returns (bool);\r\n\r\n    function intendToWithdraw() external;\r\n\r\n    function DL_FACTORY() external view returns (uint8);\r\n\r\n    function liquidityAsset() external view returns (address);\r\n\r\n    function liquidityLocker() external view returns (address);\r\n\r\n    function stakeAsset() external view returns (address);\r\n\r\n    function stakeLocker() external view returns (address);\r\n\r\n    function stakingFee() external view returns (uint256);\r\n\r\n    function delegateFee() external view returns (uint256);\r\n\r\n    function principalOut() external view returns (uint256);\r\n\r\n    function liquidityCap() external view returns (uint256);\r\n\r\n    function lockupPeriod() external view returns (uint256);\r\n\r\n    function depositDate(address) external view returns (uint256);\r\n\r\n    function debtLockers(address, address) external view returns (address);\r\n\r\n    function withdrawCooldown(address) external view returns (uint256);\r\n\r\n    function setLiquidityCap(uint256) external;\r\n\r\n    function cancelWithdraw() external;\r\n\r\n    function reclaimERC20(address) external;\r\n\r\n    function BPTVal(address, address, address, address) external view returns (uint256);\r\n\r\n    function isDepositAllowed(uint256) external view returns (bool);\r\n\r\n    function getInitialStakeRequirements() external view returns (uint256, uint256, bool, uint256, uint256);\r\n\r\n}\r\n\r\n////// contracts/interfaces/IPoolFactory.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\ninterface IPoolFactory {\r\n\r\n    function LL_FACTORY() external view returns (uint8);\r\n\r\n    function SL_FACTORY() external view returns (uint8);\r\n\r\n    function poolsCreated() external view returns (uint256);\r\n\r\n    function globals() external view returns (address);\r\n\r\n    function pools(uint256) external view returns (address);\r\n\r\n    function isPool(address) external view returns (bool);\r\n\r\n    function poolFactoryAdmins(address) external view returns (bool);\r\n\r\n    function setGlobals(address) external;\r\n\r\n    function createPool(address, address, address, address, uint256, uint256, uint256) external returns (address);\r\n\r\n    function setPoolFactoryAdmin(address, bool) external;\r\n\r\n    function pause() external;\r\n\r\n    function unpause() external;\r\n\r\n}\r\n\r\n////// contracts/math/SafeMathInt.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\nlibrary SafeMathInt {\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0, \"SMI:NEG\");\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\n////// contracts/math/SafeMathUint.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256 b) {\r\n        b = int256(a);\r\n        require(b >= 0, \"SMU:OOB\");\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/math/SafeMath.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/GSN/Context.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/* import \"../../GSN/Context.sol\"; */\r\n/* import \"./IERC20.sol\"; */\r\n/* import \"../../math/SafeMath.sol\"; */\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n////// contracts/token/BasicFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/math/SafeMath.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/math/SignedSafeMath.sol\"; */\r\n/* import \"./interfaces/IBaseFDT.sol\"; */\r\n/* import \"../math/SafeMathUint.sol\"; */\r\n/* import \"../math/SafeMathInt.sol\"; */\r\n\r\n/// @title BasicFDT implements base level FDT functionality for accounting for revenues.\r\nabstract contract BasicFDT is IBaseFDT, ERC20 {\r\n    using SafeMath       for uint256;\r\n    using SafeMathUint   for uint256;\r\n    using SignedSafeMath for  int256;\r\n    using SafeMathInt    for  int256;\r\n\r\n    uint256 internal constant pointsMultiplier = 2 ** 128;\r\n    uint256 internal pointsPerShare;\r\n\r\n    mapping(address => int256)  internal pointsCorrection;\r\n    mapping(address => uint256) internal withdrawnFunds;\r\n\r\n    event   PointsPerShareUpdated(uint256 pointsPerShare);\r\n    event PointsCorrectionUpdated(address indexed account, int256 pointsCorrection);\r\n\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) public { }\r\n\r\n    /**\r\n        @dev Distributes funds to token holders.\r\n        @dev It reverts if the total supply of tokens is 0.\r\n        @dev It emits a `FundsDistributed` event if the amount of received funds is greater than 0.\r\n        @dev It emits a `PointsPerShareUpdated` event if the amount of received funds is greater than 0.\r\n             About undistributed funds:\r\n                In each distribution, there is a small amount of funds which do not get distributed,\r\n                   which is `(value  pointsMultiplier) % totalSupply()`.\r\n                With a well-chosen `pointsMultiplier`, the amount funds that are not getting distributed\r\n                   in a distribution can be less than 1 (base unit).\r\n                We can actually keep track of the undistributed funds in a distribution\r\n                   and try to distribute it in the next distribution.\r\n    */\r\n    function _distributeFunds(uint256 value) internal {\r\n        require(totalSupply() > 0, \"FDT:ZERO_SUPPLY\");\r\n\r\n        if (value == 0) return;\r\n\r\n        pointsPerShare = pointsPerShare.add(value.mul(pointsMultiplier) / totalSupply());\r\n        emit FundsDistributed(msg.sender, value);\r\n        emit PointsPerShareUpdated(pointsPerShare);\r\n    }\r\n\r\n    /**\r\n        @dev    Prepares the withdrawal of funds.\r\n        @dev    It emits a `FundsWithdrawn` event if the amount of withdrawn funds is greater than 0.\r\n        @return withdrawableDividend The amount of dividend funds that can be withdrawn.\r\n    */\r\n    function _prepareWithdraw() internal returns (uint256 withdrawableDividend) {\r\n        withdrawableDividend       = withdrawableFundsOf(msg.sender);\r\n        uint256 _withdrawnFunds    = withdrawnFunds[msg.sender].add(withdrawableDividend);\r\n        withdrawnFunds[msg.sender] = _withdrawnFunds;\r\n\r\n        emit FundsWithdrawn(msg.sender, withdrawableDividend, _withdrawnFunds);\r\n    }\r\n\r\n    /**\r\n        @dev    Returns the amount of funds that an account can withdraw.\r\n        @param  _owner The address of a token holder.\r\n        @return The amount funds that `_owner` can withdraw.\r\n    */\r\n    function withdrawableFundsOf(address _owner) public view override returns (uint256) {\r\n        return accumulativeFundsOf(_owner).sub(withdrawnFunds[_owner]);\r\n    }\r\n\r\n    /**\r\n        @dev    Returns the amount of funds that an account has withdrawn.\r\n        @param  _owner The address of a token holder.\r\n        @return The amount of funds that `_owner` has withdrawn.\r\n    */\r\n    function withdrawnFundsOf(address _owner) external view returns (uint256) {\r\n        return withdrawnFunds[_owner];\r\n    }\r\n\r\n    /**\r\n        @dev    Returns the amount of funds that an account has earned in total.\r\n        @dev    accumulativeFundsOf(_owner) = withdrawableFundsOf(_owner) + withdrawnFundsOf(_owner)\r\n                                         = (pointsPerShare * balanceOf(_owner) + pointsCorrection[_owner]) / pointsMultiplier\r\n        @param  _owner The address of a token holder.\r\n        @return The amount of funds that `_owner` has earned in total.\r\n    */\r\n    function accumulativeFundsOf(address _owner) public view returns (uint256) {\r\n        return\r\n            pointsPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256Safe()\r\n                .add(pointsCorrection[_owner])\r\n                .toUint256Safe() / pointsMultiplier;\r\n    }\r\n\r\n    /**\r\n        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\r\n        @dev   It emits two `PointsCorrectionUpdated` events, one for the sender and one for the receiver.\r\n        @param from  The address to transfer from.\r\n        @param to    The address to transfer to.\r\n        @param value The amount to be transferred.\r\n    */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual override {\r\n        super._transfer(from, to, value);\r\n\r\n        int256 _magCorrection       = pointsPerShare.mul(value).toInt256Safe();\r\n        int256 pointsCorrectionFrom = pointsCorrection[from].add(_magCorrection);\r\n        pointsCorrection[from]      = pointsCorrectionFrom;\r\n        int256 pointsCorrectionTo   = pointsCorrection[to].sub(_magCorrection);\r\n        pointsCorrection[to]        = pointsCorrectionTo;\r\n\r\n        emit PointsCorrectionUpdated(from, pointsCorrectionFrom);\r\n        emit PointsCorrectionUpdated(to,   pointsCorrectionTo);\r\n    }\r\n\r\n    /**\r\n        @dev   Mints tokens to an account. Updates pointsCorrection to keep funds unchanged.\r\n        @param account The account that will receive the created tokens.\r\n        @param value   The amount that will be created.\r\n    */\r\n    function _mint(address account, uint256 value) internal virtual override {\r\n        super._mint(account, value);\r\n\r\n        int256 _pointsCorrection = pointsCorrection[account].sub(\r\n            (pointsPerShare.mul(value)).toInt256Safe()\r\n        );\r\n\r\n        pointsCorrection[account] = _pointsCorrection;\r\n\r\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\r\n    }\r\n\r\n    /**\r\n        @dev   Burns an amount of the token of a given account. Updates pointsCorrection to keep funds unchanged.\r\n        @dev   It emits a `PointsCorrectionUpdated` event.\r\n        @param account The account whose tokens will be burnt.\r\n        @param value   The amount that will be burnt.\r\n    */\r\n    function _burn(address account, uint256 value) internal virtual override {\r\n        super._burn(account, value);\r\n\r\n        int256 _pointsCorrection = pointsCorrection[account].add(\r\n            (pointsPerShare.mul(value)).toInt256Safe()\r\n        );\r\n\r\n        pointsCorrection[account] = _pointsCorrection;\r\n\r\n        emit PointsCorrectionUpdated(account, _pointsCorrection);\r\n    }\r\n\r\n    /**\r\n        @dev Withdraws all available funds for a token holder.\r\n    */\r\n    function withdrawFunds() public virtual override {}\r\n\r\n    /**\r\n        @dev    Updates the current `fundsToken` balance and returns the difference of the new and previous `fundsToken` balance.\r\n        @return A int256 representing the difference of the new and previous `fundsToken` balance.\r\n    */\r\n    function _updateFundsTokenBalance() internal virtual returns (int256) {}\r\n\r\n    /**\r\n        @dev Registers a payment of funds in tokens. May be called directly after a deposit is made.\r\n        @dev Calls _updateFundsTokenBalance(), whereby the contract computes the delta of the new and previous\r\n             `fundsToken` balance and increments the total received funds (cumulative), by delta, by calling _distributeFunds().\r\n    */\r\n    function updateFundsReceived() public virtual {\r\n        int256 newFunds = _updateFundsTokenBalance();\r\n\r\n        if (newFunds <= 0) return;\r\n\r\n        _distributeFunds(newFunds.toUint256Safe());\r\n    }\r\n}\r\n\r\n////// contracts/token/ExtendedFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./BasicFDT.sol\"; */\r\n\r\n/// @title ExtendedFDT implements FDT functionality for accounting for losses.\r\nabstract contract ExtendedFDT is BasicFDT {\r\n    using SafeMath       for uint256;\r\n    using SafeMathUint   for uint256;\r\n    using SignedSafeMath for  int256;\r\n    using SafeMathInt    for  int256;\r\n\r\n    uint256 internal lossesPerShare;\r\n\r\n    mapping(address => int256)  internal lossesCorrection;\r\n    mapping(address => uint256) internal recognizedLosses;\r\n\r\n    event   LossesPerShareUpdated(uint256 lossesPerShare);\r\n    event LossesCorrectionUpdated(address indexed account, int256 lossesCorrection);\r\n\r\n    /**\r\n        @dev   This event emits when new losses are distributed.\r\n        @param by                The address of the account that has distributed losses.\r\n        @param lossesDistributed The amount of losses received for distribution.\r\n    */\r\n    event LossesDistributed(address indexed by, uint256 lossesDistributed);\r\n\r\n    /**\r\n        @dev   This event emits when distributed losses are recognized by a token holder.\r\n        @param by                    The address of the receiver of losses.\r\n        @param lossesRecognized      The amount of losses that were recognized.\r\n        @param totalLossesRecognized The total amount of losses that are recognized.\r\n    */\r\n    event LossesRecognized(address indexed by, uint256 lossesRecognized, uint256 totalLossesRecognized);\r\n\r\n    constructor(string memory name, string memory symbol) BasicFDT(name, symbol) public { }\r\n\r\n    /**\r\n        @dev Distributes losses to token holders.\r\n        @dev It reverts if the total supply of tokens is 0.\r\n        @dev It emits a `LossesDistributed` event if the amount of received losses is greater than 0.\r\n        @dev It emits a `LossesPerShareUpdated` event if the amount of received losses is greater than 0.\r\n             About undistributed losses:\r\n                In each distribution, there is a small amount of losses which do not get distributed,\r\n                which is `(value * pointsMultiplier) % totalSupply()`.\r\n             With a well-chosen `pointsMultiplier`, the amount losses that are not getting distributed\r\n                in a distribution can be less than 1 (base unit).\r\n             We can actually keep track of the undistributed losses in a distribution\r\n                and try to distribute it in the next distribution.\r\n    */\r\n    function _distributeLosses(uint256 value) internal {\r\n        require(totalSupply() > 0, \"FDT:ZERO_SUPPLY\");\r\n\r\n        if (value == 0) return;\r\n\r\n        uint256 _lossesPerShare = lossesPerShare.add(value.mul(pointsMultiplier) / totalSupply());\r\n        lossesPerShare          = _lossesPerShare;\r\n\r\n        emit LossesDistributed(msg.sender, value);\r\n        emit LossesPerShareUpdated(_lossesPerShare);\r\n    }\r\n\r\n    /**\r\n        @dev    Prepares losses for a withdrawal.\r\n        @dev    It emits a `LossesWithdrawn` event if the amount of withdrawn losses is greater than 0.\r\n        @return recognizableDividend The amount of dividend losses that can be recognized.\r\n    */\r\n    function _prepareLossesWithdraw() internal returns (uint256 recognizableDividend) {\r\n        recognizableDividend = recognizableLossesOf(msg.sender);\r\n\r\n        uint256 _recognizedLosses    = recognizedLosses[msg.sender].add(recognizableDividend);\r\n        recognizedLosses[msg.sender] = _recognizedLosses;\r\n\r\n        emit LossesRecognized(msg.sender, recognizableDividend, _recognizedLosses);\r\n    }\r\n\r\n    /**\r\n        @dev    Returns the amount of losses that an address can withdraw.\r\n        @param  _owner The address of a token holder.\r\n        @return The amount of losses that `_owner` can withdraw.\r\n    */\r\n    function recognizableLossesOf(address _owner) public view returns (uint256) {\r\n        return accumulativeLossesOf(_owner).sub(recognizedLosses[_owner]);\r\n    }\r\n\r\n    /**\r\n        @dev    Returns the amount of losses that an address has recognized.\r\n        @param  _owner The address of a token holder\r\n        @return The amount of losses that `_owner` has recognized\r\n    */\r\n    function recognizedLossesOf(address _owner) external view returns (uint256) {\r\n        return recognizedLosses[_owner];\r\n    }\r\n\r\n    /**\r\n        @dev    Returns the amount of losses that an address has earned in total.\r\n        @dev    accumulativeLossesOf(_owner) = recognizableLossesOf(_owner) + recognizedLossesOf(_owner)\r\n                = (lossesPerShare * balanceOf(_owner) + lossesCorrection[_owner]) / pointsMultiplier\r\n        @param  _owner The address of a token holder\r\n        @return The amount of losses that `_owner` has earned in total\r\n    */\r\n    function accumulativeLossesOf(address _owner) public view returns (uint256) {\r\n        return\r\n            lossesPerShare\r\n                .mul(balanceOf(_owner))\r\n                .toInt256Safe()\r\n                .add(lossesCorrection[_owner])\r\n                .toUint256Safe() / pointsMultiplier;\r\n    }\r\n\r\n    /**\r\n        @dev   Transfers tokens from one account to another. Updates pointsCorrection to keep funds unchanged.\r\n        @dev         It emits two `LossesCorrectionUpdated` events, one for the sender and one for the receiver.\r\n        @param from  The address to transfer from.\r\n        @param to    The address to transfer to.\r\n        @param value The amount to be transferred.\r\n    */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual override {\r\n        super._transfer(from, to, value);\r\n\r\n        int256 _lossesCorrection    = lossesPerShare.mul(value).toInt256Safe();\r\n        int256 lossesCorrectionFrom = lossesCorrection[from].add(_lossesCorrection);\r\n        lossesCorrection[from]      = lossesCorrectionFrom;\r\n        int256 lossesCorrectionTo   = lossesCorrection[to].sub(_lossesCorrection);\r\n        lossesCorrection[to]        = lossesCorrectionTo;\r\n\r\n        emit LossesCorrectionUpdated(from, lossesCorrectionFrom);\r\n        emit LossesCorrectionUpdated(to,   lossesCorrectionTo);\r\n    }\r\n\r\n    /**\r\n        @dev   Mints tokens to an account. Updates lossesCorrection to keep losses unchanged.\r\n        @dev   It emits a `LossesCorrectionUpdated` event.\r\n        @param account The account that will receive the created tokens.\r\n        @param value   The amount that will be created.\r\n    */\r\n    function _mint(address account, uint256 value) internal virtual override {\r\n        super._mint(account, value);\r\n\r\n        int256 _lossesCorrection = lossesCorrection[account].sub(\r\n            (lossesPerShare.mul(value)).toInt256Safe()\r\n        );\r\n\r\n        lossesCorrection[account] = _lossesCorrection;\r\n\r\n        emit LossesCorrectionUpdated(account, _lossesCorrection);\r\n    }\r\n\r\n    /**\r\n        @dev   Burns an amount of the token of a given account. Updates lossesCorrection to keep losses unchanged.\r\n        @dev   It emits a `LossesCorrectionUpdated` event.\r\n        @param account The account from which tokens will be burnt.\r\n        @param value   The amount that will be burnt.\r\n    */\r\n    function _burn(address account, uint256 value) internal virtual override {\r\n        super._burn(account, value);\r\n\r\n        int256 _lossesCorrection = lossesCorrection[account].add(\r\n            (lossesPerShare.mul(value)).toInt256Safe()\r\n        );\r\n\r\n        lossesCorrection[account] = _lossesCorrection;\r\n\r\n        emit LossesCorrectionUpdated(account, _lossesCorrection);\r\n    }\r\n\r\n    /**\r\n        @dev Registers a loss. May be called directly after a shortfall after BPT burning occurs.\r\n        @dev Calls _updateLossesTokenBalance(), whereby the contract computes the delta of the new and previous\r\n             losses balance and increments the total losses (cumulative), by delta, by calling _distributeLosses().\r\n    */\r\n    function updateLossesReceived() public virtual {\r\n        int256 newLosses = _updateLossesBalance();\r\n\r\n        if (newLosses <= 0) return;\r\n\r\n        _distributeLosses(newLosses.toUint256Safe());\r\n    }\r\n\r\n    /**\r\n        @dev Recognizes all recognizable losses for an account using loss accounting.\r\n    */\r\n    function _recognizeLosses() internal virtual returns (uint256 losses) { }\r\n\r\n    /**\r\n        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\r\n        @return A int256 representing the difference of the new and previous losses balance.\r\n    */\r\n    function _updateLossesBalance() internal virtual returns (int256) { }\r\n}\r\n\r\n////// contracts/token/StakeLockerFDT.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"./ExtendedFDT.sol\"; */\r\n\r\n/// @title StakeLockerFDT inherits ExtendedFDT and accounts for gains/losses for Stakers.\r\nabstract contract StakeLockerFDT is ExtendedFDT {\r\n    using SafeMath       for uint256;\r\n    using SafeMathUint   for uint256;\r\n    using SignedSafeMath for  int256;\r\n    using SafeMathInt    for  int256;\r\n\r\n    IERC20 public immutable fundsToken;\r\n\r\n    uint256 public bptLosses;          // Sum of all unrecognized losses.\r\n    uint256 public lossesBalance;      // The amount of losses present and accounted for in this contract.\r\n    uint256 public fundsTokenBalance;  // The amount of `fundsToken` (Liquidity Asset) currently present and accounted for in this contract.\r\n\r\n    constructor(string memory name, string memory symbol, address _fundsToken) ExtendedFDT(name, symbol) public {\r\n        fundsToken = IERC20(_fundsToken);\r\n    }\r\n\r\n    /**\r\n        @dev    Updates loss accounting for `msg.sender`, recognizing losses.\r\n        @return losses Amount to be subtracted from a withdraw amount.\r\n    */\r\n    function _recognizeLosses() internal override returns (uint256 losses) {\r\n        losses = _prepareLossesWithdraw();\r\n\r\n        bptLosses = bptLosses.sub(losses);\r\n\r\n        _updateLossesBalance();\r\n    }\r\n\r\n    /**\r\n        @dev    Updates the current losses balance and returns the difference of the new and previous losses balance.\r\n        @return A int256 representing the difference of the new and previous losses balance.\r\n    */\r\n    function _updateLossesBalance() internal override returns (int256) {\r\n        uint256 _prevLossesTokenBalance = lossesBalance;\r\n\r\n        lossesBalance = bptLosses;\r\n\r\n        return int256(lossesBalance).sub(int256(_prevLossesTokenBalance));\r\n    }\r\n\r\n    /**\r\n        @dev    Updates the current interest balance and returns the difference of the new and previous interest balance.\r\n        @return A int256 representing the difference of the new and previous interest balance.\r\n    */\r\n    function _updateFundsTokenBalance() internal virtual override returns (int256) {\r\n        uint256 _prevFundsTokenBalance = fundsTokenBalance;\r\n\r\n        fundsTokenBalance = fundsToken.balanceOf(address(this));\r\n\r\n        return int256(fundsTokenBalance).sub(int256(_prevFundsTokenBalance));\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/utils/Address.sol\r\n/* pragma solidity >=0.6.2 <0.8.0; */\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/* import \"./IERC20.sol\"; */\r\n/* import \"../../math/SafeMath.sol\"; */\r\n/* import \"../../utils/Address.sol\"; */\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n////// lib/openzeppelin-contracts/contracts/utils/Pausable.sol\r\n/* pragma solidity >=0.6.0 <0.8.0; */\r\n\r\n/* import \"../GSN/Context.sol\"; */\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n////// contracts/StakeLocker.sol\r\n/* pragma solidity 0.6.11; */\r\n\r\n/* import \"lib/openzeppelin-contracts/contracts/token/ERC20/SafeERC20.sol\"; */\r\n/* import \"lib/openzeppelin-contracts/contracts/utils/Pausable.sol\"; */\r\n\r\n/* import \"./interfaces/IMapleGlobals.sol\"; */\r\n/* import \"./interfaces/IPool.sol\"; */\r\n/* import \"./interfaces/IPoolFactory.sol\"; */\r\n\r\n/* import \"./token/StakeLockerFDT.sol\"; */\r\n\r\n/// @title StakeLocker holds custody of stakeAsset tokens for a given Pool and earns revenue from interest.\r\ncontract StakeLocker is StakeLockerFDT, Pausable {\r\n\r\n    using SafeMathInt    for int256;\r\n    using SignedSafeMath for int256;\r\n    using SafeERC20      for IERC20;\r\n\r\n    uint256 constant WAD = 10 ** 18;  // Scaling factor for synthetic float division.\r\n\r\n    IERC20  public immutable stakeAsset;  // The asset deposited by Stakers into this contract, for liquidation during defaults.\r\n\r\n    address public immutable liquidityAsset;  // The Liquidity Asset for the Pool as well as the dividend token for StakeLockerFDT interest.\r\n    address public immutable pool;            // The parent Pool.\r\n\r\n    uint256 public lockupPeriod;  // Number of seconds for which unstaking is not allowed.\r\n\r\n    mapping(address => uint256)                     public stakeDate;              // Map of account addresses to effective stake date.\r\n    mapping(address => uint256)                     public unstakeCooldown;        // The timestamp of when a Staker called `cooldown()`.\r\n    mapping(address => bool)                        public allowed;                // Map of addresses to allowed status.\r\n    mapping(address => mapping(address => uint256)) public custodyAllowance;       // Amount of StakeLockerFDTs that are \"locked\" at a certain address.\r\n    mapping(address => uint256)                     public totalCustodyAllowance;  // Total amount of StakeLockerFDTs that are \"locked\" for a given account, cannot be greater than balance.\r\n\r\n    bool public openToPublic;  // Boolean opening StakeLocker to public for staking BPTs\r\n\r\n    event            StakeLockerOpened();\r\n    event               BalanceUpdated(address indexed staker, address indexed token, uint256 balance);\r\n    event             AllowListUpdated(address indexed staker, bool status);\r\n    event             StakeDateUpdated(address indexed staker, uint256 stakeDate);\r\n    event          LockupPeriodUpdated(uint256 lockupPeriod);\r\n    event                     Cooldown(address indexed staker, uint256 cooldown);\r\n    event                        Stake(address indexed staker, uint256 amount);\r\n    event                      Unstake(address indexed staker, uint256 amount);\r\n    event              CustodyTransfer(address indexed custodian, address indexed from, address indexed to, uint256 amount);\r\n    event      CustodyAllowanceChanged(address indexed staker, address indexed custodian, uint256 oldAllowance, uint256 newAllowance);\r\n    event TotalCustodyAllowanceUpdated(address indexed staker, uint256 newTotalAllowance);\r\n\r\n    constructor(\r\n        address _stakeAsset,\r\n        address _liquidityAsset,\r\n        address _pool\r\n    ) StakeLockerFDT(\"Maple StakeLocker\", \"MPLSTAKE\", _liquidityAsset) public {\r\n        liquidityAsset = _liquidityAsset;\r\n        stakeAsset     = IERC20(_stakeAsset);\r\n        pool           = _pool;\r\n        lockupPeriod   = 180 days;\r\n    }\r\n\r\n    /*****************/\r\n    /*** Modifiers ***/\r\n    /*****************/\r\n\r\n    /**\r\n        @dev Checks that an account can unstake given the following conditions:\r\n                 1. The Account is not the Pool Delegate and the Pool is in Finalized state.\r\n                 2. The Pool is in Initialized or Deactivated state.\r\n    */\r\n    modifier canUnstake(address from) {\r\n        IPool _pool = IPool(pool);\r\n\r\n        // The Pool cannot be finalized, but if it is, account cannot be the Pool Delegate.\r\n        require(!_pool.isPoolFinalized() || from != _pool.poolDelegate(), \"SL:STAKE_LOCKED\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev Checks that `msg.sender` is the Governor.\r\n    */\r\n    modifier isGovernor() {\r\n        require(msg.sender == _globals().governor(), \"SL:NOT_GOV\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev Checks that `msg.sender` is the Pool.\r\n    */\r\n    modifier isPool() {\r\n        require(msg.sender == pool, \"SL:NOT_P\");\r\n        _;\r\n    }\r\n\r\n    /**********************/\r\n    /*** Pool Functions ***/\r\n    /**********************/\r\n\r\n    /**\r\n        @dev   Updates Staker status on the allowlist. Only the Pool Delegate can call this function.\r\n        @dev   It emits an `AllowListUpdated` event.\r\n        @param staker The address of the Staker to set status for.\r\n        @param status The status of the Staker on allowlist.\r\n    */\r\n    function setAllowlist(address staker, bool status) public {\r\n        _whenProtocolNotPaused();\r\n        _isValidPoolDelegate();\r\n        allowed[staker] = status;\r\n        emit AllowListUpdated(staker, status);\r\n    }\r\n\r\n    /**\r\n        @dev Sets the StakeLocker as open to the public. Only the Pool Delegate can call this function.\r\n        @dev It emits a `StakeLockerOpened` event.\r\n    */\r\n    function openStakeLockerToPublic() external {\r\n        _whenProtocolNotPaused();\r\n        _isValidPoolDelegate();\r\n        openToPublic = true;\r\n        emit StakeLockerOpened();\r\n    }\r\n\r\n    /**\r\n        @dev   Sets the lockup period. Only the Pool Delegate can call this function.\r\n        @dev   It emits a `LockupPeriodUpdated` event.\r\n        @param newLockupPeriod New lockup period used to restrict unstaking.\r\n    */\r\n    function setLockupPeriod(uint256 newLockupPeriod) external {\r\n        _whenProtocolNotPaused();\r\n        _isValidPoolDelegate();\r\n        require(newLockupPeriod <= lockupPeriod, \"SL:INVALID_VALUE\");\r\n        lockupPeriod = newLockupPeriod;\r\n        emit LockupPeriodUpdated(newLockupPeriod);\r\n    }\r\n\r\n    /**\r\n        @dev   Transfers an amount of Stake Asset to a destination account. Only the Pool can call this function.\r\n        @param dst Destination to transfer Stake Asset to.\r\n        @param amt Amount of Stake Asset to transfer.\r\n    */\r\n    function pull(address dst, uint256 amt) isPool external {\r\n        stakeAsset.safeTransfer(dst, amt);\r\n    }\r\n\r\n    /**\r\n        @dev   Updates loss accounting for StakeLockerFDTs after BPTs have been burned. Only the Pool can call this function.\r\n        @param bptsBurned Amount of BPTs that have been burned.\r\n    */\r\n    function updateLosses(uint256 bptsBurned) isPool external {\r\n        bptLosses = bptLosses.add(bptsBurned);\r\n        updateLossesReceived();\r\n    }\r\n\r\n    /************************/\r\n    /*** Staker Functions ***/\r\n    /************************/\r\n\r\n    /**\r\n        @dev   Handles a Staker's depositing of an amount of Stake Asset, minting them StakeLockerFDTs.\r\n        @dev   It emits a `StakeDateUpdated` event.\r\n        @dev   It emits a `Stake` event.\r\n        @dev   It emits a `Cooldown` event.\r\n        @dev   It emits a `BalanceUpdated` event.\r\n        @param amt Amount of Stake Asset (BPTs) to deposit.\r\n    */\r\n    function stake(uint256 amt) whenNotPaused external {\r\n        _whenProtocolNotPaused();\r\n        _isAllowed(msg.sender);\r\n\r\n        unstakeCooldown[msg.sender] = uint256(0);  // Reset account's unstake cooldown if Staker had previously intended to unstake.\r\n\r\n        _updateStakeDate(msg.sender, amt);\r\n\r\n        stakeAsset.safeTransferFrom(msg.sender, address(this), amt);\r\n        _mint(msg.sender, amt);\r\n\r\n        emit Stake(msg.sender, amt);\r\n        emit Cooldown(msg.sender, uint256(0));\r\n        emit BalanceUpdated(address(this), address(stakeAsset), stakeAsset.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n        @dev   Updates information used to calculate unstake delay.\r\n        @dev   It emits a `StakeDateUpdated` event.\r\n        @param account The Staker that deposited BPTs.\r\n        @param amt     Amount of BPTs the Staker has deposited.\r\n    */\r\n    function _updateStakeDate(address account, uint256 amt) internal {\r\n        uint256 prevDate = stakeDate[account];\r\n        uint256 balance = balanceOf(account);\r\n\r\n        // stakeDate + (now - stakeDate) * (amt / (balance + amt))\r\n        // NOTE: prevDate = 0 implies balance = 0, and equation reduces to now.\r\n        uint256 newDate = (balance + amt) > 0\r\n            ? prevDate.add(block.timestamp.sub(prevDate).mul(amt).div(balance + amt))\r\n            : prevDate;\r\n\r\n        stakeDate[account] = newDate;\r\n        emit StakeDateUpdated(account, newDate);\r\n    }\r\n\r\n    /**\r\n        @dev Activates the cooldown period to unstake. It can't be called if the account is not staking.\r\n        @dev It emits a `Cooldown` event.\r\n    **/\r\n    function intendToUnstake() external {\r\n        require(balanceOf(msg.sender) != uint256(0), \"SL:ZERO_BALANCE\");\r\n        unstakeCooldown[msg.sender] = block.timestamp;\r\n        emit Cooldown(msg.sender, block.timestamp);\r\n    }\r\n\r\n    /**\r\n        @dev Cancels an initiated unstake by resetting the calling account's unstake cooldown.\r\n        @dev It emits a `Cooldown` event.\r\n    */\r\n    function cancelUnstake() external {\r\n        require(unstakeCooldown[msg.sender] != uint256(0), \"SL:NOT_UNSTAKING\");\r\n        unstakeCooldown[msg.sender] = 0;\r\n        emit Cooldown(msg.sender, uint256(0));\r\n    }\r\n\r\n    /**\r\n        @dev   Handles a Staker's withdrawing of an amount of Stake Asset, minus any losses. It also claims interest and burns StakeLockerFDTs for the calling account.\r\n        @dev   It emits an `Unstake` event.\r\n        @dev   It emits a `BalanceUpdated` event.\r\n        @param amt Amount of Stake Asset (BPTs) to withdraw.\r\n    */\r\n    function unstake(uint256 amt) external canUnstake(msg.sender) {\r\n        _whenProtocolNotPaused();\r\n\r\n        require(balanceOf(msg.sender).sub(amt) >= totalCustodyAllowance[msg.sender], \"SL:INSUF_UNSTAKEABLE_BAL\");  // Account can only unstake tokens that aren't custodied\r\n        require(isUnstakeAllowed(msg.sender),                                        \"SL:OUTSIDE_COOLDOWN\");\r\n        require(stakeDate[msg.sender].add(lockupPeriod) <= block.timestamp,          \"SL:FUNDS_LOCKED\");\r\n\r\n        updateFundsReceived();   // Account for any funds transferred into contract since last call.\r\n        _burn(msg.sender, amt);  // Burn the corresponding StakeLockerFDTs balance.\r\n        withdrawFunds();         // Transfer the full entitled Liquidity Asset interest.\r\n\r\n        stakeAsset.safeTransfer(msg.sender, amt.sub(_recognizeLosses()));  // Unstake amount minus losses.\r\n\r\n        emit Unstake(msg.sender, amt);\r\n        emit BalanceUpdated(address(this), address(stakeAsset), stakeAsset.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n        @dev Withdraws all claimable interest earned from the StakeLocker for an account.\r\n        @dev It emits a `BalanceUpdated` event if there are withdrawable funds.\r\n    */\r\n    function withdrawFunds() public override {\r\n        _whenProtocolNotPaused();\r\n\r\n        uint256 withdrawableFunds = _prepareWithdraw();\r\n\r\n        if (withdrawableFunds == uint256(0)) return;\r\n\r\n        fundsToken.safeTransfer(msg.sender, withdrawableFunds);\r\n        emit BalanceUpdated(address(this), address(fundsToken), fundsToken.balanceOf(address(this)));\r\n\r\n        _updateFundsTokenBalance();\r\n    }\r\n\r\n    /**\r\n        @dev   Increases the custody allowance for a given Custodian corresponding to the account (`msg.sender`).\r\n        @dev   It emits a `CustodyAllowanceChanged` event.\r\n        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\r\n        @param custodian Address which will act as Custodian of a given amount for an account.\r\n        @param amount    Number of additional FDTs to be custodied by the Custodian.\r\n    */\r\n    function increaseCustodyAllowance(address custodian, uint256 amount) external {\r\n        uint256 oldAllowance      = custodyAllowance[msg.sender][custodian];\r\n        uint256 newAllowance      = oldAllowance.add(amount);\r\n        uint256 newTotalAllowance = totalCustodyAllowance[msg.sender].add(amount);\r\n\r\n        require(custodian != address(0),                    \"SL:INVALID_CUSTODIAN\");\r\n        require(amount    != uint256(0),                    \"SL:INVALID_AMT\");\r\n        require(newTotalAllowance <= balanceOf(msg.sender), \"SL:INSUF_BALANCE\");\r\n\r\n        custodyAllowance[msg.sender][custodian] = newAllowance;\r\n        totalCustodyAllowance[msg.sender]       = newTotalAllowance;\r\n        emit CustodyAllowanceChanged(msg.sender, custodian, oldAllowance, newAllowance);\r\n        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\r\n    }\r\n\r\n    /**\r\n        @dev   Transfers custodied StakeLockerFDTs back to the account.\r\n        @dev   `from` and `to` should always be equal in this implementation.\r\n        @dev   This means that the Custodian can only decrease their own allowance and unlock funds for the original owner.\r\n        @dev   It emits a `CustodyTransfer` event.\r\n        @dev   It emits a `CustodyAllowanceChanged` event.\r\n        @dev   It emits a `TotalCustodyAllowanceUpdated` event.\r\n        @param from   Address which holds the StakeLockerFDTs.\r\n        @param to     Address which will be the new owner of the amount of StakeLockerFDTs.\r\n        @param amount Amount of StakeLockerFDTs transferred.\r\n    */\r\n    function transferByCustodian(address from, address to, uint256 amount) external {\r\n        uint256 oldAllowance = custodyAllowance[from][msg.sender];\r\n        uint256 newAllowance = oldAllowance.sub(amount);\r\n\r\n        require(to == from,             \"SL:INVALID_RECEIVER\");\r\n        require(amount != uint256(0),   \"SL:INVALID_AMT\");\r\n\r\n        custodyAllowance[from][msg.sender] = newAllowance;\r\n        uint256 newTotalAllowance          = totalCustodyAllowance[from].sub(amount);\r\n        totalCustodyAllowance[from]        = newTotalAllowance;\r\n        emit CustodyTransfer(msg.sender, from, to, amount);\r\n        emit CustodyAllowanceChanged(from, msg.sender, oldAllowance, newAllowance);\r\n        emit TotalCustodyAllowanceUpdated(msg.sender, newTotalAllowance);\r\n    }\r\n\r\n    /**\r\n        @dev   Transfers StakeLockerFDTs.\r\n        @param from Address sending   StakeLockerFDTs.\r\n        @param to   Address receiving StakeLockerFDTs.\r\n        @param wad  Amount of StakeLockerFDTs to transfer.\r\n    */\r\n    function _transfer(address from, address to, uint256 wad) internal override canUnstake(from) {\r\n        _whenProtocolNotPaused();\r\n        require(stakeDate[from].add(lockupPeriod) <= block.timestamp,    \"SL:FUNDS_LOCKED\");            // Restrict withdrawal during lockup period\r\n        require(balanceOf(from).sub(wad) >= totalCustodyAllowance[from], \"SL:INSUF_TRANSFERABLE_BAL\");  // Account can only transfer tokens that aren't custodied\r\n        require(isReceiveAllowed(unstakeCooldown[to]),                   \"SL:RECIPIENT_NOT_ALLOWED\");   // Recipient must not be currently unstaking\r\n        require(recognizableLossesOf(from) == uint256(0),                \"SL:RECOG_LOSSES\");            // If a staker has unrecognized losses, they must recognize losses through unstake\r\n        _updateStakeDate(to, wad);                                                                      // Update stake date of recipient\r\n        super._transfer(from, to, wad);\r\n    }\r\n\r\n    /***********************/\r\n    /*** Admin Functions ***/\r\n    /***********************/\r\n\r\n    /**\r\n        @dev Triggers paused state. Halts functionality for certain functions. Only the Pool Delegate or a Pool Admin can call this function.\r\n    */\r\n    function pause() external {\r\n        _isValidPoolDelegateOrPoolAdmin();\r\n        super._pause();\r\n    }\r\n\r\n    /**\r\n        @dev Triggers unpaused state. Restores functionality for certain functions. Only the Pool Delegate or a Pool Admin can call this function.\r\n    */\r\n    function unpause() external {\r\n        _isValidPoolDelegateOrPoolAdmin();\r\n        super._unpause();\r\n    }\r\n\r\n    /************************/\r\n    /*** Helper Functions ***/\r\n    /************************/\r\n\r\n    /**\r\n        @dev Returns if the unstake cooldown period has passed for `msg.sender` and if they are in the unstake window.\r\n    */\r\n    function isUnstakeAllowed(address from) public view returns (bool) {\r\n        IMapleGlobals globals = _globals();\r\n        return (block.timestamp - (unstakeCooldown[from] + globals.stakerCooldownPeriod())) <= globals.stakerUnstakeWindow();\r\n    }\r\n\r\n    /**\r\n        @dev Returns if an account is allowed to receive a transfer.\r\n             This is only possible if they have zero cooldown or they are past their unstake window.\r\n    */\r\n    function isReceiveAllowed(uint256 _unstakeCooldown) public view returns (bool) {\r\n        IMapleGlobals globals = _globals();\r\n        return block.timestamp > (_unstakeCooldown + globals.stakerCooldownPeriod() + globals.stakerUnstakeWindow());\r\n    }\r\n\r\n    /**\r\n        @dev Checks that `msg.sender` is the Pool Delegate or a Pool Admin.\r\n    */\r\n    function _isValidPoolDelegateOrPoolAdmin() internal view {\r\n        require(msg.sender == IPool(pool).poolDelegate() || IPool(pool).poolAdmins(msg.sender), \"SL:NOT_DELEGATE_OR_ADMIN\");\r\n    }\r\n\r\n    /**\r\n        @dev Checks that `msg.sender` is the Pool Delegate.\r\n    */\r\n    function _isValidPoolDelegate() internal view {\r\n        require(msg.sender == IPool(pool).poolDelegate(), \"SL:NOT_DELEGATE\");\r\n    }\r\n\r\n    /**\r\n        @dev Checks that `msg.sender` is allowed to stake.\r\n    */\r\n    function _isAllowed(address account) internal view {\r\n        require(\r\n            openToPublic || allowed[account] || account == IPool(pool).poolDelegate(),\r\n            \"SL:NOT_ALLOWED\"\r\n        );\r\n    }\r\n\r\n    /**\r\n        @dev Returns the MapleGlobals instance.\r\n    */\r\n    function _globals() internal view returns (IMapleGlobals) {\r\n        return IMapleGlobals(IPoolFactory(IPool(pool).superFactory()).globals());\r\n    }\r\n\r\n    /**\r\n        @dev Checks that the protocol is not in a paused state.\r\n    */\r\n    function _whenProtocolNotPaused() internal view {\r\n        require(!_globals().protocolPaused(), \"SL:PROTO_PAUSED\");\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AllowListUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cooldown\",\"type\":\"uint256\"}],\"name\":\"Cooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAllowance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllowance\",\"type\":\"uint256\"}],\"name\":\"CustodyAllowanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CustodyTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsDistributed\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"LockupPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lossesCorrection\",\"type\":\"int256\"}],\"name\":\"LossesCorrectionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossesDistributed\",\"type\":\"uint256\"}],\"name\":\"LossesDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossesPerShare\",\"type\":\"uint256\"}],\"name\":\"LossesPerShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lossesRecognized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLossesRecognized\",\"type\":\"uint256\"}],\"name\":\"LossesRecognized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pointsCorrection\",\"type\":\"int256\"}],\"name\":\"PointsCorrectionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pointsPerShare\",\"type\":\"uint256\"}],\"name\":\"PointsPerShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeDate\",\"type\":\"uint256\"}],\"name\":\"StakeDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StakeLockerOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalAllowance\",\"type\":\"uint256\"}],\"name\":\"TotalCustodyAllowanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"accumulativeLossesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bptLosses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"custodyAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundsTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"custodian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseCustodyAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intendToUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeCooldown\",\"type\":\"uint256\"}],\"name\":\"isReceiveAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"isUnstakeAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossesBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openStakeLockerToPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openToPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"recognizableLossesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"recognizedLossesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockupPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalCustodyAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferByCustodian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unstakeCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFundsReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bptsBurned\",\"type\":\"uint256\"}],\"name\":\"updateLosses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateLossesReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawableFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"withdrawnFundsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakeLocker", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c1b10e536cd611acff7a7c32a9e29ce6a02ef6ef000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000febd6f15df3b73dc4307b1d7e65d46413e710c27", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48f517b477c459d5376e0cc0cd024aca11f8214b1affb8111823a449ec0c5e95"}