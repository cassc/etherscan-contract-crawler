{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/utils/GoatAppMulticall.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Optimistic.Etherscan.io on 2022-09-05\\n*/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IToken {\\n    function allowance(address, address) external view returns(uint256);\\n    function getEthBalance(address) external view returns (uint256);\\n    function balanceOf(address) external view returns(uint256);\\n}\\n\\ninterface IGoatStrategy {\\n    function paused() external view returns (bool);\\n}\\n\\ninterface IGoatVault {\\n    function balance() external view returns (uint256);\\n    function getPricePerFullShare() external view returns (uint256);\\n    function strategy() external view returns (IGoatStrategy);\\n}\\n\\ninterface IGoatBoost {\\n    function totalSupply() external view returns (uint256);\\n    function periodFinish() external view returns (uint256);\\n    function rewardRate() external view returns (uint256);\\n    function balanceOf(address) external view returns (uint256);\\n    function earned(address) external view returns (uint256);\\n    function isPreStake() external view returns (bool);\\n}\\n\\nstruct BoostInfo {\\n    uint256 totalSupply;\\n    uint256 rewardRate;\\n    uint256 periodFinish;\\n    bool isPreStake;\\n}\\n\\nstruct VaultInfo {\\n    uint256 balance;\\n    uint256 pricePerFullShare;\\n    address strategy;\\n    bool paused;\\n}\\n\\nstruct GovVaultInfo {\\n    uint256 totalSupply;\\n}\\n\\nstruct GovVaultBalanceInfo {\\n    uint256 balance;\\n    uint256 rewards;\\n}\\n\\nstruct BoostBalanceInfo {\\n    uint256 balance;\\n    uint256 rewards;\\n}\\n\\nstruct AllowanceInfo {\\n    uint[] allowances;\\n}\\n\\ncontract GoatAppMulticall {\\n\\n    function getVaultInfo(address[] calldata vaults) external view returns (VaultInfo[] memory) {\\n        VaultInfo[] memory results = new VaultInfo[](vaults.length);\\n\\n        for (uint i = 0; i < vaults.length; i++) {\\n            IGoatVault vault = IGoatVault(vaults[i]);\\n            IGoatStrategy strat = vault.strategy();\\n            bool paused;\\n            try strat.paused() returns (bool _paused) {\\n                paused = _paused;\\n            } catch { \\n                paused = false; \\n            }\\n            results[i] = VaultInfo(\\n                vault.balance(),\\n                vault.getPricePerFullShare(),\\n                address(strat),\\n                paused\\n            );\\n        }\\n\\n        return results;\\n    }\\n\\n    function getBoostInfo(address[] calldata boosts) external view returns (BoostInfo[] memory) {\\n        BoostInfo[] memory results = new BoostInfo[](boosts.length);\\n\\n        for (uint i = 0; i < boosts.length; i++) {\\n            IGoatBoost boost = IGoatBoost(boosts[i]);\\n            uint256 periodFinish = boost.periodFinish();\\n            bool isPreStake;\\n            try boost.isPreStake() returns (bool _isPreStake) {\\n                isPreStake = _isPreStake;\\n            } catch { \\n                isPreStake = periodFinish == 0; \\n            }\\n            results[i] = BoostInfo(\\n                boost.totalSupply(),\\n                boost.rewardRate(),\\n                periodFinish,\\n                isPreStake\\n            );\\n        }\\n\\n        return results;\\n    }\\n\\n    function getGovVaultInfo(address[] calldata govVaults) external view returns (GovVaultInfo[] memory) {\\n        GovVaultInfo[] memory results = new GovVaultInfo[](govVaults.length);\\n\\n        for (uint i = 0; i < govVaults.length; i++) {\\n            IGoatBoost govVault = IGoatBoost(govVaults[i]);\\n            results[i] = GovVaultInfo(\\n                govVault.totalSupply()\\n            );\\n        }\\n\\n        return results;\\n    }\\n\\n    function getTokenBalances(address[] calldata tokens, address owner) external view returns (uint256[] memory) {\\n        uint256[] memory results = new uint256[](tokens.length);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            IToken token = IToken(tokens[i]);\\n            results[i] = token.balanceOf(owner);\\n        }\\n        return results;\\n    }\\n\\n    function getBoostOrGovBalance(address[] calldata boosts, address owner) external view returns (BoostBalanceInfo[] memory) {\\n        BoostBalanceInfo[] memory results = new BoostBalanceInfo[](boosts.length);\\n        for (uint i = 0; i < boosts.length; i++) {\\n            IGoatBoost boost = IGoatBoost(boosts[i]);\\n            results[i] = BoostBalanceInfo(\\n                boost.balanceOf(owner),\\n                boost.earned(owner)\\n            );\\n        }\\n\\n        return results;\\n    }\\n\\n    function getGovVaultBalance(address[] calldata govVaults, address owner) external view returns (GovVaultBalanceInfo[] memory) {\\n        GovVaultBalanceInfo[] memory results = new GovVaultBalanceInfo[](govVaults.length);\\n        for (uint i = 0; i < govVaults.length; i++) {\\n            IGoatBoost govVault = IGoatBoost(govVaults[i]);\\n            results[i] = GovVaultBalanceInfo(\\n                govVault.balanceOf(owner),\\n                govVault.earned(owner)\\n            );\\n        }\\n\\n        return results;\\n    }\\n\\n    function getAllowances(address[] calldata tokens, address[][] calldata spenders, address owner) external view returns (AllowanceInfo[] memory) {\\n        AllowanceInfo[] memory results = new AllowanceInfo[](tokens.length);\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            IToken token = IToken(tokens[i]);\\n            address[] calldata tokenSpenders = spenders[i];\\n            results[i] = AllowanceInfo(\\n                new uint256[](tokenSpenders.length)\\n            );\\n            for (uint j = 0; j < tokenSpenders.length; j++) {\\n                results[i].allowances[j] = token.allowance(owner, tokenSpenders[j]);\\n            }\\n        }\\n\\n        return results;\\n    }\\n\\n    function getAllowancesFlat(address[] calldata tokens, address[][] calldata spenders, address owner) external view returns (uint256[] memory) {\\n        uint totalLength;\\n        for(uint i = 0; i < spenders.length; i++) {\\n            totalLength += spenders[i].length;\\n        }\\n        \\n        uint256[] memory results = new uint256[](totalLength);\\n\\n        uint maxAcum;\\n        for (uint i = 0; i < tokens.length; i++) {\\n            IToken token = IToken(tokens[i]);\\n            address[] calldata tokenSpenders = spenders[i];\\n            for (uint j = 0; j < tokenSpenders.length; j++) {\\n                results[maxAcum++] = token.allowance(owner, tokenSpenders[j]);\\n            }\\n        }\\n\\n        return results;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@openzeppelin-4/contracts/=lib/openzeppelin-contracts-4/contracts/\",\r\n      \"@layerzero/=lib/solidity-examples/contracts/\",\r\n      \"@xerc20/=lib/xERC20/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-4/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts-4/=lib/openzeppelin-contracts-4/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-4/contracts/\",\r\n      \"solidity-examples/=lib/solidity-examples/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"xERC20/=lib/xERC20/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"spenders\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAllowances\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"allowances\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AllowanceInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"spenders\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getAllowancesFlat\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"boosts\",\"type\":\"address[]\"}],\"name\":\"getBoostInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPreStake\",\"type\":\"bool\"}],\"internalType\":\"struct BoostInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"boosts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getBoostOrGovBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"internalType\":\"struct BoostBalanceInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"govVaults\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getGovVaultBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"internalType\":\"struct GovVaultBalanceInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"govVaults\",\"type\":\"address[]\"}],\"name\":\"getGovVaultInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct GovVaultInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getTokenBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaults\",\"type\":\"address[]\"}],\"name\":\"getVaultInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerFullShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"internalType\":\"struct VaultInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GoatAppMulticall", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}