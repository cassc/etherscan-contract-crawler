{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/governance/utils/IVotes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Constants {\\r\\n    uint256 internal constant YEAR_IN_SECONDS = 365 days;\\r\\n    uint256 internal constant BASE = 1e18;\\r\\n    uint256 internal constant MAX_FEE_PER_ANNUM = 0.05e18; // 5% max in base\\r\\n    uint256 internal constant MAX_SWAP_PROTOCOL_FEE = 0.01e18; // 1% max in base\\r\\n    uint256 internal constant MAX_TOTAL_PROTOCOL_FEE = 0.05e18; // 5% max in base\\r\\n    uint256 internal constant MAX_P2POOL_PROTOCOL_FEE = 0.05e18; // 5% max in base\\r\\n    uint256 internal constant MIN_TIME_BETWEEN_EARLIEST_REPAY_AND_EXPIRY =\\r\\n        1 days;\\r\\n    uint256 internal constant MAX_PRICE_UPDATE_TIMESTAMP_DIVERGENCE = 1 days;\\r\\n    uint256 internal constant SEQUENCER_GRACE_PERIOD = 1 hours;\\r\\n    uint256 internal constant MIN_UNSUBSCRIBE_GRACE_PERIOD = 1 days;\\r\\n    uint256 internal constant MAX_UNSUBSCRIBE_GRACE_PERIOD = 14 days;\\r\\n    uint256 internal constant MIN_CONVERSION_GRACE_PERIOD = 1 days;\\r\\n    uint256 internal constant MIN_REPAYMENT_GRACE_PERIOD = 1 days;\\r\\n    uint256 internal constant LOAN_EXECUTION_GRACE_PERIOD = 1 days;\\r\\n    uint256 internal constant MAX_CONVERSION_AND_REPAYMENT_GRACE_PERIOD =\\r\\n        30 days;\\r\\n    uint256 internal constant MIN_TIME_UNTIL_FIRST_DUE_DATE = 1 days;\\r\\n    uint256 internal constant MIN_TIME_BETWEEN_DUE_DATES = 7 days;\\r\\n    uint256 internal constant MIN_WAIT_UNTIL_EARLIEST_UNSUBSCRIBE = 60 seconds;\\r\\n    uint256 internal constant MAX_ARRANGER_FEE = 0.5e18; // 50% max in base\\r\\n    uint256 internal constant LOAN_TERMS_UPDATE_COOL_OFF_PERIOD = 15 minutes;\\r\\n    uint256 internal constant MAX_REPAYMENT_SCHEDULE_LENGTH = 20;\\r\\n    uint256 internal constant SINGLE_WRAPPER_MIN_MINT = 1000; // in wei\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Errors {\\r\\n    error UnregisteredVault();\\r\\n    error InvalidDelegatee();\\r\\n    error InvalidSender();\\r\\n    error InvalidFee();\\r\\n    error InsufficientSendAmount();\\r\\n    error NoOracle();\\r\\n    error InvalidOracleAnswer();\\r\\n    error InvalidOracleDecimals();\\r\\n    error InvalidOracleVersion();\\r\\n    error InvalidAddress();\\r\\n    error InvalidArrayLength();\\r\\n    error InvalidQuote();\\r\\n    error OutdatedQuote();\\r\\n    error InvalidOffChainSignature();\\r\\n    error InvalidOffChainMerkleProof();\\r\\n    error InvalidCollUnlock();\\r\\n    error InvalidAmount();\\r\\n    error UnknownOnChainQuote();\\r\\n    error NeitherTokenIsGOHM();\\r\\n    error NoLpTokens();\\r\\n    error ZeroReserve();\\r\\n    error IncorrectGaugeForLpToken();\\r\\n    error InvalidGaugeIndex();\\r\\n    error AlreadyStaked();\\r\\n    error InvalidWithdrawAmount();\\r\\n    error InvalidBorrower();\\r\\n    error OutsideValidRepayWindow();\\r\\n    error InvalidRepayAmount();\\r\\n    error ReclaimAmountIsZero();\\r\\n    error UnregisteredGateway();\\r\\n    error NonWhitelistedOracle();\\r\\n    error NonWhitelistedCompartment();\\r\\n    error NonWhitelistedCallback();\\r\\n    error NonWhitelistedToken();\\r\\n    error LtvHigherThanMax();\\r\\n    error InsufficientVaultFunds();\\r\\n    error InvalidInterestRateFactor();\\r\\n    error InconsistentUnlockTokenAddresses();\\r\\n    error InvalidEarliestRepay();\\r\\n    error InvalidNewMinNumOfSigners();\\r\\n    error AlreadySigner();\\r\\n    error InvalidArrayIndex();\\r\\n    error InvalidSignerRemoveInfo();\\r\\n    error InvalidSendAmount();\\r\\n    error TooSmallLoanAmount();\\r\\n    error DeadlinePassed();\\r\\n    error WithdrawEntered();\\r\\n    error DuplicateAddresses();\\r\\n    error OnChainQuoteAlreadyAdded();\\r\\n    error OffChainQuoteHasBeenInvalidated();\\r\\n    error Uninitialized();\\r\\n    error InvalidRepaymentScheduleLength();\\r\\n    error FirstDueDateTooCloseOrPassed();\\r\\n    error InvalidGracePeriod();\\r\\n    error UnregisteredLoanProposal();\\r\\n    error NotInSubscriptionPhase();\\r\\n    error NotInUnsubscriptionPhase();\\r\\n    error InsufficientBalance();\\r\\n    error InsufficientFreeSubscriptionSpace();\\r\\n    error BeforeEarliestUnsubscribe();\\r\\n    error InconsistentLastLoanTermsUpdateTime();\\r\\n    error InvalidActionForCurrentStatus();\\r\\n    error FellShortOfTotalSubscriptionTarget();\\r\\n    error InvalidRollBackRequest();\\r\\n    error UnsubscriptionAmountTooLarge();\\r\\n    error InvalidSubscriptionRange();\\r\\n    error InvalidMaxTotalSubscriptions();\\r\\n    error OutsideConversionTimeWindow();\\r\\n    error OutsideRepaymentTimeWindow();\\r\\n    error NoDefault();\\r\\n    error LoanIsFullyRepaid();\\r\\n    error RepaymentIdxTooLarge();\\r\\n    error AlreadyClaimed();\\r\\n    error AlreadyConverted();\\r\\n    error InvalidDueDates();\\r\\n    error LoanTokenDueIsZero();\\r\\n    error WaitForLoanTermsCoolOffPeriod();\\r\\n    error ZeroConversionAmount();\\r\\n    error InvalidNewOwnerProposal();\\r\\n    error CollateralMustBeCompartmentalized();\\r\\n    error InvalidCompartmentForToken();\\r\\n    error InvalidSignature();\\r\\n    error InvalidUpdate();\\r\\n    error CannotClaimOutdatedStatus();\\r\\n    error DelegateReducedBalance();\\r\\n    error FundingPoolAlreadyExists();\\r\\n    error InvalidLender();\\r\\n    error NonIncreasingTokenAddrs();\\r\\n    error NonIncreasingNonFungibleTokenIds();\\r\\n    error TransferToWrappedTokenFailed();\\r\\n    error TransferFromWrappedTokenFailed();\\r\\n    error StateAlreadySet();\\r\\n    error ReclaimableCollateralAmountZero();\\r\\n    error InvalidSwap();\\r\\n    error InvalidUpfrontFee();\\r\\n    error InvalidOracleTolerance();\\r\\n    error ReserveRatiosSkewedFromOraclePrice();\\r\\n    error SequencerDown();\\r\\n    error GracePeriodNotOver();\\r\\n    error LoanExpired();\\r\\n    error NoDsEth();\\r\\n    error TooShortTwapInterval();\\r\\n    error TooLongTwapInterval();\\r\\n    error TwapExceedsThreshold();\\r\\n    error Reentrancy();\\r\\n    error TokenNotStuck();\\r\\n    error InconsistentExpTransferFee();\\r\\n    error InconsistentExpVaultBalIncrease();\\r\\n    error DepositLockActive();\\r\\n    error DisallowedSubscriptionLockup();\\r\\n    error IncorrectLoanAmount();\\r\\n    error Disabled();\\r\\n    error CannotRemintUnlessZeroSupply();\\r\\n    error TokensStillMissingFromWrapper();\\r\\n    error OnlyMintFromSingleTokenWrapper();\\r\\n    error NonMintableTokenState();\\r\\n    error NoTokensTransferred();\\r\\n    error TokenAlreadyCountedInWrapper();\\r\\n    error TokenNotOwnedByWrapper();\\r\\n    error TokenDoesNotBelongInWrapper(address tokenAddr, uint256 tokenId);\\r\\n    error InvalidMintAmount();\\r\\n    error QuoteViolatesPolicy();\\r\\n    error AlreadyPublished();\\r\\n    error PolicyAlreadySet();\\r\\n    error NoPolicyToDelete();\\r\\n    error InvalidTenorBounds();\\r\\n    error InvalidLtvBounds();\\r\\n    error InvalidLoanPerCollBounds();\\r\\n    error InvalidMinApr();\\r\\n    error NoPolicy();\\r\\n    error InvalidMinFee();\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Helpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Helpers {\\r\\n    function splitSignature(\\r\\n        bytes memory sig\\r\\n    ) internal pure returns (bytes32 r, bytes32 vs) {\\r\\n        require(sig.length == 64, \\\"invalid signature length\\\");\\r\\n        // solhint-disable no-inline-assembly\\r\\n        assembly {\\r\\n            // first 32 bytes, after the length prefix\\r\\n            r := mload(add(sig, 32))\\r\\n            // second 32 bytes\\r\\n            vs := mload(add(sig, 64))\\r\\n        }\\r\\n        // implicitly return (r, vs)\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IMysoTokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../peer-to-peer/DataTypesPeerToPeer.sol\\\";\\r\\nimport {DataTypesPeerToPool} from \\\"../peer-to-pool/DataTypesPeerToPool.sol\\\";\\r\\n\\r\\ninterface IMysoTokenManager {\\r\\n    function processP2PBorrow(\\r\\n        uint128[2] memory currProtocolFeeParams,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.Loan calldata loan,\\r\\n        address lenderVault\\r\\n    ) external returns (uint128[2] memory applicableProtocolFeeParams);\\r\\n\\r\\n    function processP2PCreateVault(\\r\\n        uint256 numRegisteredVaults,\\r\\n        address vaultCreator,\\r\\n        address newLenderVaultAddr\\r\\n    ) external;\\r\\n\\r\\n    function processP2PCreateWrappedTokenForERC721s(\\r\\n        address tokenCreator,\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped,\\r\\n        bytes calldata mysoTokenManagerData\\r\\n    ) external;\\r\\n\\r\\n    function processP2PCreateWrappedTokenForERC20s(\\r\\n        address tokenCreator,\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata tokensToBeWrapped,\\r\\n        bytes calldata mysoTokenManagerData\\r\\n    ) external;\\r\\n\\r\\n    function processP2PoolDeposit(\\r\\n        address fundingPool,\\r\\n        address depositor,\\r\\n        uint256 depositAmount,\\r\\n        uint256 depositLockupDuration,\\r\\n        uint256 transferFee\\r\\n    ) external;\\r\\n\\r\\n    function processP2PoolSubscribe(\\r\\n        address fundingPool,\\r\\n        address subscriber,\\r\\n        address loanProposal,\\r\\n        uint256 subscriptionAmount,\\r\\n        uint256 subscriptionLockupDuration,\\r\\n        uint256 totalSubscriptions,\\r\\n        DataTypesPeerToPool.LoanTerms calldata loanTerms\\r\\n    ) external;\\r\\n\\r\\n    function processP2PoolLoanFinalization(\\r\\n        address loanProposal,\\r\\n        address fundingPool,\\r\\n        address arranger,\\r\\n        address borrower,\\r\\n        uint256 grossLoanAmount,\\r\\n        bytes calldata mysoTokenManagerData\\r\\n    ) external;\\r\\n\\r\\n    function processP2PoolCreateLoanProposal(\\r\\n        address fundingPool,\\r\\n        address proposalCreator,\\r\\n        address collToken,\\r\\n        uint256 arrangerFee,\\r\\n        uint256 numLoanProposals\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/AddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"./DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../Errors.sol\\\";\\r\\nimport {Helpers} from \\\"../Helpers.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"./interfaces/IAddressRegistry.sol\\\";\\r\\nimport {IERC721Wrapper} from \\\"./interfaces/wrappers/ERC721/IERC721Wrapper.sol\\\";\\r\\nimport {IERC20Wrapper} from \\\"./interfaces/wrappers/ERC20/IERC20Wrapper.sol\\\";\\r\\nimport {IMysoTokenManager} from \\\"../interfaces/IMysoTokenManager.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev AddressRegistry is a contract that stores addresses of other contracts and controls whitelist state\\r\\n * IMPORTANT: This contract allows for de-whitelisting as well. This is an important security feature because if\\r\\n * a contract or token is found to present a vulnerability, it can be de-whitelisted to prevent further borrowing\\r\\n * with that token (repays and withdrawals would still be allowed). In the limit of a total de-whitelisting of all\\r\\n * tokens, all borrowing in the protocol would be paused. This feature can also be utilized if a fork with the same chainId is found.\\r\\n */\\r\\ncontract AddressRegistry is Initializable, Ownable2Step, IAddressRegistry {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    address public lenderVaultFactory;\\r\\n    address public borrowerGateway;\\r\\n    address public quoteHandler;\\r\\n    address public mysoTokenManager;\\r\\n    address public erc721Wrapper;\\r\\n    address public erc20Wrapper;\\r\\n    mapping(address => bool) public isRegisteredVault;\\r\\n    mapping(bytes => bool) internal _signatureIsInvalidated;\\r\\n    mapping(address => mapping(address => uint256))\\r\\n        internal _borrowerWhitelistedUntil;\\r\\n    mapping(address => DataTypesPeerToPeer.WhitelistState)\\r\\n        public whitelistState;\\r\\n    // compartment => token => active\\r\\n    mapping(address => mapping(address => bool))\\r\\n        internal _isTokenWhitelistedForCompartment;\\r\\n    address[] internal _registeredVaults;\\r\\n\\r\\n    constructor() {\\r\\n        super._transferOwnership(msg.sender);\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _lenderVaultFactory,\\r\\n        address _borrowerGateway,\\r\\n        address _quoteHandler\\r\\n    ) external initializer {\\r\\n        _checkOwner();\\r\\n        if (\\r\\n            _lenderVaultFactory == address(0) ||\\r\\n            _borrowerGateway == address(0) ||\\r\\n            _quoteHandler == address(0)\\r\\n        ) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        if (\\r\\n            _lenderVaultFactory == _borrowerGateway ||\\r\\n            _lenderVaultFactory == _quoteHandler ||\\r\\n            _borrowerGateway == _quoteHandler\\r\\n        ) {\\r\\n            revert Errors.DuplicateAddresses();\\r\\n        }\\r\\n        lenderVaultFactory = _lenderVaultFactory;\\r\\n        borrowerGateway = _borrowerGateway;\\r\\n        quoteHandler = _quoteHandler;\\r\\n    }\\r\\n\\r\\n    function setWhitelistState(\\r\\n        address[] calldata addrs,\\r\\n        DataTypesPeerToPeer.WhitelistState state\\r\\n    ) external {\\r\\n        _checkIsInitialized();\\r\\n        _checkOwner();\\r\\n        uint256 addrsLen = addrs.length;\\r\\n        if (addrsLen < 1) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n\\r\\n        (\\r\\n            address _erc721Wrapper,\\r\\n            address _erc20Wrapper,\\r\\n            address _mysoTokenManager\\r\\n        ) = (erc721Wrapper, erc20Wrapper, mysoTokenManager);\\r\\n        // note (1/2): ERC721WRAPPER, ERC20WRAPPER and MYSO_TOKEN_MANAGER state can only be \\\"occupied\\\" by\\r\\n        // one addresses (\\\"singleton state\\\")\\r\\n        if (\\r\\n            state == DataTypesPeerToPeer.WhitelistState.ERC721WRAPPER ||\\r\\n            state == DataTypesPeerToPeer.WhitelistState.ERC20WRAPPER ||\\r\\n            state == DataTypesPeerToPeer.WhitelistState.MYSO_TOKEN_MANAGER\\r\\n        ) {\\r\\n            if (addrsLen != 1) {\\r\\n                revert Errors.InvalidArrayLength();\\r\\n            }\\r\\n            if (addrs[0] == address(0)) {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            _updateSingletonAddr(\\r\\n                addrs[0],\\r\\n                state,\\r\\n                _erc721Wrapper,\\r\\n                _erc20Wrapper,\\r\\n                _mysoTokenManager\\r\\n            );\\r\\n            whitelistState[addrs[0]] = state;\\r\\n        } else {\\r\\n            // note (2/2): all other states can be \\\"occupied\\\" by multiple addresses\\r\\n            for (uint256 i; i < addrsLen; ) {\\r\\n                if (addrs[i] == address(0)) {\\r\\n                    revert Errors.InvalidAddress();\\r\\n                }\\r\\n                if (whitelistState[addrs[i]] == state) {\\r\\n                    revert Errors.StateAlreadySet();\\r\\n                }\\r\\n                // check if addr was singleton before and delete, if needed\\r\\n                _checkAddrAndDeleteIfSingleton(\\r\\n                    addrs[i],\\r\\n                    _erc721Wrapper,\\r\\n                    _erc20Wrapper,\\r\\n                    _mysoTokenManager\\r\\n                );\\r\\n                whitelistState[addrs[i]] = state;\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        emit WhitelistStateUpdated(addrs, state);\\r\\n    }\\r\\n\\r\\n    function setAllowedTokensForCompartment(\\r\\n        address compartmentImpl,\\r\\n        address[] calldata tokens,\\r\\n        bool allowTokensForCompartment\\r\\n    ) external {\\r\\n        _checkIsInitialized();\\r\\n        _checkOwner();\\r\\n        // check that tokens can only be whitelisted for valid compartment (whereas de-whitelisting is always possible)\\r\\n        if (\\r\\n            allowTokensForCompartment &&\\r\\n            whitelistState[compartmentImpl] !=\\r\\n            DataTypesPeerToPeer.WhitelistState.COMPARTMENT\\r\\n        ) {\\r\\n            revert Errors.NonWhitelistedCompartment();\\r\\n        }\\r\\n        uint256 tokensLen = tokens.length;\\r\\n        if (tokensLen == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        for (uint256 i; i < tokensLen; ) {\\r\\n            if (allowTokensForCompartment && !isWhitelistedERC20(tokens[i])) {\\r\\n                revert Errors.NonWhitelistedToken();\\r\\n            }\\r\\n            if (\\r\\n                _isTokenWhitelistedForCompartment[compartmentImpl][tokens[i]] ==\\r\\n                allowTokensForCompartment\\r\\n            ) {\\r\\n                revert Errors.InvalidUpdate();\\r\\n            }\\r\\n            _isTokenWhitelistedForCompartment[compartmentImpl][\\r\\n                tokens[i]\\r\\n            ] = allowTokensForCompartment;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        emit AllowedTokensForCompartmentUpdated(\\r\\n            compartmentImpl,\\r\\n            tokens,\\r\\n            allowTokensForCompartment\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLenderVault(address addr) external returns (uint256) {\\r\\n        _checkIsInitialized();\\r\\n        // catches case where address registry is uninitialized (lenderVaultFactory == address(0))\\r\\n        if (msg.sender != lenderVaultFactory) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        isRegisteredVault[addr] = true;\\r\\n        _registeredVaults.push(addr);\\r\\n        return _registeredVaults.length;\\r\\n    }\\r\\n\\r\\n    function claimBorrowerWhitelistStatus(\\r\\n        address whitelistAuthority,\\r\\n        uint256 whitelistedUntil,\\r\\n        bytes calldata compactSig,\\r\\n        bytes32 salt\\r\\n    ) external {\\r\\n        if (_signatureIsInvalidated[compactSig]) {\\r\\n            revert Errors.InvalidSignature();\\r\\n        }\\r\\n        bytes32 payloadHash = keccak256(\\r\\n            abi.encode(\\r\\n                address(this),\\r\\n                msg.sender,\\r\\n                whitelistedUntil,\\r\\n                block.chainid,\\r\\n                salt\\r\\n            )\\r\\n        );\\r\\n        bytes32 messageHash = ECDSA.toEthSignedMessageHash(payloadHash);\\r\\n        (bytes32 r, bytes32 vs) = Helpers.splitSignature(compactSig);\\r\\n        address recoveredSigner = messageHash.recover(r, vs);\\r\\n        if (\\r\\n            whitelistAuthority == address(0) ||\\r\\n            recoveredSigner != whitelistAuthority\\r\\n        ) {\\r\\n            revert Errors.InvalidSignature();\\r\\n        }\\r\\n        mapping(address => uint256)\\r\\n            storage whitelistedUntilPerBorrower = _borrowerWhitelistedUntil[\\r\\n                whitelistAuthority\\r\\n            ];\\r\\n        if (\\r\\n            whitelistedUntil < block.timestamp ||\\r\\n            whitelistedUntil <= whitelistedUntilPerBorrower[msg.sender]\\r\\n        ) {\\r\\n            revert Errors.CannotClaimOutdatedStatus();\\r\\n        }\\r\\n        whitelistedUntilPerBorrower[msg.sender] = whitelistedUntil;\\r\\n        _signatureIsInvalidated[compactSig] = true;\\r\\n        emit BorrowerWhitelistStatusClaimed(\\r\\n            whitelistAuthority,\\r\\n            msg.sender,\\r\\n            whitelistedUntil\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createWrappedTokenForERC721s(\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped,\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        bytes calldata mysoTokenManagerData\\r\\n    ) external {\\r\\n        address _erc721Wrapper = erc721Wrapper;\\r\\n        if (_erc721Wrapper == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        if (mysoTokenManager != address(0)) {\\r\\n            IMysoTokenManager(mysoTokenManager)\\r\\n                .processP2PCreateWrappedTokenForERC721s(\\r\\n                    msg.sender,\\r\\n                    tokensToBeWrapped,\\r\\n                    mysoTokenManagerData\\r\\n                );\\r\\n        }\\r\\n        address newERC20Addr = IERC721Wrapper(_erc721Wrapper)\\r\\n            .createWrappedToken(msg.sender, tokensToBeWrapped, name, symbol);\\r\\n        whitelistState[newERC20Addr] = DataTypesPeerToPeer\\r\\n            .WhitelistState\\r\\n            .ERC20_TOKEN;\\r\\n        emit CreatedWrappedTokenForERC721s(\\r\\n            tokensToBeWrapped,\\r\\n            name,\\r\\n            symbol,\\r\\n            newERC20Addr\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function createWrappedTokenForERC20s(\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata tokensToBeWrapped,\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        bytes calldata mysoTokenManagerData\\r\\n    ) external {\\r\\n        address _erc20Wrapper = erc20Wrapper;\\r\\n        if (_erc20Wrapper == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        if (mysoTokenManager != address(0)) {\\r\\n            IMysoTokenManager(mysoTokenManager)\\r\\n                .processP2PCreateWrappedTokenForERC20s(\\r\\n                    msg.sender,\\r\\n                    tokensToBeWrapped,\\r\\n                    mysoTokenManagerData\\r\\n                );\\r\\n        }\\r\\n        address newERC20Addr = IERC20Wrapper(_erc20Wrapper).createWrappedToken(\\r\\n            msg.sender,\\r\\n            tokensToBeWrapped,\\r\\n            name,\\r\\n            symbol\\r\\n        );\\r\\n        whitelistState[newERC20Addr] = DataTypesPeerToPeer\\r\\n            .WhitelistState\\r\\n            .ERC20_TOKEN;\\r\\n        emit CreatedWrappedTokenForERC20s(\\r\\n            tokensToBeWrapped,\\r\\n            name,\\r\\n            symbol,\\r\\n            newERC20Addr\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateBorrowerWhitelist(\\r\\n        address[] calldata borrowers,\\r\\n        uint256 whitelistedUntil\\r\\n    ) external {\\r\\n        uint256 borrowersLen = borrowers.length;\\r\\n        if (borrowersLen == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        for (uint256 i; i < borrowersLen; ) {\\r\\n            mapping(address => uint256)\\r\\n                storage whitelistedUntilPerBorrower = _borrowerWhitelistedUntil[\\r\\n                    msg.sender\\r\\n                ];\\r\\n            if (\\r\\n                borrowers[i] == address(0) ||\\r\\n                whitelistedUntil == whitelistedUntilPerBorrower[borrowers[i]]\\r\\n            ) {\\r\\n                revert Errors.InvalidUpdate();\\r\\n            }\\r\\n            whitelistedUntilPerBorrower[borrowers[i]] = whitelistedUntil;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        emit BorrowerWhitelistUpdated(msg.sender, borrowers, whitelistedUntil);\\r\\n    }\\r\\n\\r\\n    function isWhitelistedBorrower(\\r\\n        address whitelistAuthority,\\r\\n        address borrower\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            _borrowerWhitelistedUntil[whitelistAuthority][borrower] >=\\r\\n            block.timestamp;\\r\\n    }\\r\\n\\r\\n    function isWhitelistedCompartment(\\r\\n        address compartment,\\r\\n        address token\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            whitelistState[compartment] ==\\r\\n            DataTypesPeerToPeer.WhitelistState.COMPARTMENT &&\\r\\n            _isTokenWhitelistedForCompartment[compartment][token];\\r\\n    }\\r\\n\\r\\n    function registeredVaults() external view returns (address[] memory) {\\r\\n        return _registeredVaults;\\r\\n    }\\r\\n\\r\\n    function numRegisteredVaults() external view returns (uint256) {\\r\\n        return _registeredVaults.length;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(\\r\\n        address _newOwnerProposal\\r\\n    ) public override(Ownable2Step, IAddressRegistry) {\\r\\n        _checkIsInitialized();\\r\\n        if (\\r\\n            _newOwnerProposal == address(this) ||\\r\\n            _newOwnerProposal == pendingOwner() ||\\r\\n            _newOwnerProposal == owner()\\r\\n        ) {\\r\\n            revert Errors.InvalidNewOwnerProposal();\\r\\n        }\\r\\n        // @dev: access control check via super.transferOwnership()\\r\\n        super.transferOwnership(_newOwnerProposal);\\r\\n    }\\r\\n\\r\\n    function owner()\\r\\n        public\\r\\n        view\\r\\n        override(Ownable, IAddressRegistry)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super.owner();\\r\\n    }\\r\\n\\r\\n    function pendingOwner()\\r\\n        public\\r\\n        view\\r\\n        override(Ownable2Step, IAddressRegistry)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super.pendingOwner();\\r\\n    }\\r\\n\\r\\n    function isWhitelistedERC20(address token) public view returns (bool) {\\r\\n        DataTypesPeerToPeer.WhitelistState tokenWhitelistState = whitelistState[\\r\\n            token\\r\\n        ];\\r\\n        return\\r\\n            tokenWhitelistState ==\\r\\n            DataTypesPeerToPeer.WhitelistState.ERC20_TOKEN ||\\r\\n            tokenWhitelistState ==\\r\\n            DataTypesPeerToPeer\\r\\n                .WhitelistState\\r\\n                .ERC20_TOKEN_REQUIRING_COMPARTMENT;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public pure override {\\r\\n        revert Errors.Disabled();\\r\\n    }\\r\\n\\r\\n    function _updateSingletonAddr(\\r\\n        address newAddr,\\r\\n        DataTypesPeerToPeer.WhitelistState state,\\r\\n        address _erc721Wrapper,\\r\\n        address _erc20Wrapper,\\r\\n        address _mysoTokenManager\\r\\n    ) internal {\\r\\n        // check if address already has given state set or\\r\\n        // other singleton addresses occupy target state\\r\\n        if (\\r\\n            whitelistState[newAddr] == state ||\\r\\n            whitelistState[_erc721Wrapper] == state ||\\r\\n            whitelistState[_erc20Wrapper] == state ||\\r\\n            whitelistState[_mysoTokenManager] == state\\r\\n        ) {\\r\\n            revert Errors.StateAlreadySet();\\r\\n        }\\r\\n        // check if addr was singleton before and delete, if needed\\r\\n        _checkAddrAndDeleteIfSingleton(\\r\\n            newAddr,\\r\\n            _erc721Wrapper,\\r\\n            _erc20Wrapper,\\r\\n            _mysoTokenManager\\r\\n        );\\r\\n        if (state == DataTypesPeerToPeer.WhitelistState.ERC721WRAPPER) {\\r\\n            erc721Wrapper = newAddr;\\r\\n        } else if (state == DataTypesPeerToPeer.WhitelistState.ERC20WRAPPER) {\\r\\n            erc20Wrapper = newAddr;\\r\\n        } else {\\r\\n            mysoTokenManager = newAddr;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkAddrAndDeleteIfSingleton(\\r\\n        address addr,\\r\\n        address _erc721Wrapper,\\r\\n        address _erc20Wrapper,\\r\\n        address _mysoTokenManager\\r\\n    ) internal {\\r\\n        if (addr == _erc721Wrapper) {\\r\\n            delete erc721Wrapper;\\r\\n        } else if (addr == _erc20Wrapper) {\\r\\n            delete erc20Wrapper;\\r\\n        } else if (addr == _mysoTokenManager) {\\r\\n            delete mysoTokenManager;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkIsInitialized() internal view {\\r\\n        if (_getInitializedVersion() == 0) {\\r\\n            revert Errors.Uninitialized();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/BorrowerGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {Constants} from \\\"../Constants.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"./DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../Errors.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"./interfaces/IAddressRegistry.sol\\\";\\r\\nimport {IBaseCompartment} from \\\"./interfaces/compartments/IBaseCompartment.sol\\\";\\r\\nimport {IBorrowerGateway} from \\\"./interfaces/IBorrowerGateway.sol\\\";\\r\\nimport {ILenderVaultImpl} from \\\"./interfaces/ILenderVaultImpl.sol\\\";\\r\\nimport {IMysoTokenManager} from \\\"../interfaces/IMysoTokenManager.sol\\\";\\r\\nimport {IQuoteHandler} from \\\"./interfaces/IQuoteHandler.sol\\\";\\r\\nimport {IVaultCallback} from \\\"./interfaces/IVaultCallback.sol\\\";\\r\\n\\r\\ncontract BorrowerGateway is ReentrancyGuard, IBorrowerGateway {\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    // putting fee info in borrow gateway since borrower always pays this upfront\\r\\n    address public immutable addressRegistry;\\r\\n    // index 0: base protocol fee is paid even for swap (no tenor)\\r\\n    // index 1: protocol fee slope scales protocol fee with tenor\\r\\n    uint128[2] internal protocolFeeParams;\\r\\n\\r\\n    constructor(address _addressRegistry) {\\r\\n        if (_addressRegistry == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        addressRegistry = _addressRegistry;\\r\\n    }\\r\\n\\r\\n    function borrowWithOffChainQuote(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.OffChainQuote calldata offChainQuote,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple,\\r\\n        bytes32[] calldata proof\\r\\n    ) external nonReentrant returns (DataTypesPeerToPeer.Loan memory) {\\r\\n        _checkDeadlineAndRegisteredVault(\\r\\n            borrowInstructions.deadline,\\r\\n            lenderVault\\r\\n        );\\r\\n        {\\r\\n            address quoteHandler = IAddressRegistry(addressRegistry)\\r\\n                .quoteHandler();\\r\\n            IQuoteHandler(quoteHandler).checkAndRegisterOffChainQuote(\\r\\n                msg.sender,\\r\\n                lenderVault,\\r\\n                offChainQuote,\\r\\n                quoteTuple,\\r\\n                proof\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (\\r\\n            DataTypesPeerToPeer.Loan memory loan,\\r\\n            uint256 loanId,\\r\\n            uint256 upfrontFee\\r\\n        ) = _processBorrowTransaction(\\r\\n                borrowInstructions,\\r\\n                offChainQuote.generalQuoteInfo,\\r\\n                quoteTuple,\\r\\n                lenderVault\\r\\n            );\\r\\n\\r\\n        emit Borrowed(\\r\\n            lenderVault,\\r\\n            loan.borrower,\\r\\n            loan,\\r\\n            upfrontFee,\\r\\n            loanId,\\r\\n            borrowInstructions.callbackAddr,\\r\\n            borrowInstructions.callbackData\\r\\n        );\\r\\n        return loan;\\r\\n    }\\r\\n\\r\\n    function borrowWithOnChainQuote(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote,\\r\\n        uint256 quoteTupleIdx\\r\\n    ) external nonReentrant returns (DataTypesPeerToPeer.Loan memory) {\\r\\n        // borrow gateway just forwards data to respective vault and orchestrates transfers\\r\\n        // borrow gateway is oblivious towards and specific borrow details, and only fwds info\\r\\n        // vaults needs to check details of given quote and whether it's valid\\r\\n        // all lenderVaults need to approve BorrowGateway\\r\\n\\r\\n        // 1. BorrowGateway \\\"optimistically\\\" pulls loanToken from lender vault: either transfers directly to (a) borrower or (b) callbacker for further processing\\r\\n        // 2. BorrowGateway then pulls collToken from borrower to lender vault\\r\\n        // 3. Finally, BorrowGateway updates lender vault storage state\\r\\n\\r\\n        _checkDeadlineAndRegisteredVault(\\r\\n            borrowInstructions.deadline,\\r\\n            lenderVault\\r\\n        );\\r\\n        {\\r\\n            address quoteHandler = IAddressRegistry(addressRegistry)\\r\\n                .quoteHandler();\\r\\n            IQuoteHandler(quoteHandler).checkAndRegisterOnChainQuote(\\r\\n                msg.sender,\\r\\n                lenderVault,\\r\\n                quoteTupleIdx,\\r\\n                onChainQuote\\r\\n            );\\r\\n        }\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple = onChainQuote\\r\\n            .quoteTuples[quoteTupleIdx];\\r\\n\\r\\n        (\\r\\n            DataTypesPeerToPeer.Loan memory loan,\\r\\n            uint256 loanId,\\r\\n            uint256 upfrontFee\\r\\n        ) = _processBorrowTransaction(\\r\\n                borrowInstructions,\\r\\n                onChainQuote.generalQuoteInfo,\\r\\n                quoteTuple,\\r\\n                lenderVault\\r\\n            );\\r\\n\\r\\n        emit Borrowed(\\r\\n            lenderVault,\\r\\n            loan.borrower,\\r\\n            loan,\\r\\n            upfrontFee,\\r\\n            loanId,\\r\\n            borrowInstructions.callbackAddr,\\r\\n            borrowInstructions.callbackData\\r\\n        );\\r\\n        return loan;\\r\\n    }\\r\\n\\r\\n    function repay(\\r\\n        DataTypesPeerToPeer.LoanRepayInstructions\\r\\n            calldata loanRepayInstructions,\\r\\n        address vaultAddr\\r\\n    ) external nonReentrant {\\r\\n        _checkDeadlineAndRegisteredVault(\\r\\n            loanRepayInstructions.deadline,\\r\\n            vaultAddr\\r\\n        );\\r\\n        if (\\r\\n            loanRepayInstructions.callbackAddr != address(0) &&\\r\\n            IAddressRegistry(addressRegistry).whitelistState(\\r\\n                loanRepayInstructions.callbackAddr\\r\\n            ) !=\\r\\n            DataTypesPeerToPeer.WhitelistState.CALLBACK\\r\\n        ) {\\r\\n            revert Errors.NonWhitelistedCallback();\\r\\n        }\\r\\n        ILenderVaultImpl lenderVault = ILenderVaultImpl(vaultAddr);\\r\\n        DataTypesPeerToPeer.Loan memory loan = lenderVault.loan(\\r\\n            loanRepayInstructions.targetLoanId\\r\\n        );\\r\\n        if (msg.sender != loan.borrower) {\\r\\n            revert Errors.InvalidBorrower();\\r\\n        }\\r\\n        if (\\r\\n            block.timestamp < loan.earliestRepay ||\\r\\n            block.timestamp >= loan.expiry\\r\\n        ) {\\r\\n            revert Errors.OutsideValidRepayWindow();\\r\\n        }\\r\\n        // checks repayAmount <= remaining loan balance\\r\\n        if (\\r\\n            loanRepayInstructions.targetRepayAmount == 0 ||\\r\\n            loanRepayInstructions.targetRepayAmount + loan.amountRepaidSoFar >\\r\\n            loan.initRepayAmount\\r\\n        ) {\\r\\n            revert Errors.InvalidRepayAmount();\\r\\n        }\\r\\n        bool noCompartment = loan.collTokenCompartmentAddr == address(0);\\r\\n        // @dev: amountReclaimedSoFar cannot exceed initCollAmount for non-compartmentalized assets\\r\\n        uint256 maxReclaimableCollAmount = noCompartment\\r\\n            ? loan.initCollAmount - loan.amountReclaimedSoFar\\r\\n            : IBaseCompartment(loan.collTokenCompartmentAddr)\\r\\n                .getReclaimableBalance(loan.collToken);\\r\\n\\r\\n        // @dev: amountRepaidSoFar cannot exceed initRepayAmount\\r\\n        uint128 leftRepaymentAmount = loan.initRepayAmount -\\r\\n            loan.amountRepaidSoFar;\\r\\n        uint128 reclaimCollAmount = SafeCast.toUint128(\\r\\n            (maxReclaimableCollAmount *\\r\\n                uint256(loanRepayInstructions.targetRepayAmount)) /\\r\\n                uint256(leftRepaymentAmount)\\r\\n        );\\r\\n        if (reclaimCollAmount == 0) {\\r\\n            revert Errors.ReclaimAmountIsZero();\\r\\n        }\\r\\n\\r\\n        lenderVault.updateLoanInfo(\\r\\n            loanRepayInstructions.targetRepayAmount,\\r\\n            loanRepayInstructions.targetLoanId,\\r\\n            reclaimCollAmount,\\r\\n            noCompartment,\\r\\n            loan.collToken\\r\\n        );\\r\\n\\r\\n        _processRepayTransfers(\\r\\n            vaultAddr,\\r\\n            loanRepayInstructions,\\r\\n            loan,\\r\\n            leftRepaymentAmount,\\r\\n            reclaimCollAmount,\\r\\n            noCompartment\\r\\n        );\\r\\n\\r\\n        emit Repaid(\\r\\n            vaultAddr,\\r\\n            loanRepayInstructions.targetLoanId,\\r\\n            loanRepayInstructions.targetRepayAmount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Protocol fee is allowed to be zero, so no min fee checks, only max fee checks\\r\\n     */\\r\\n    function setProtocolFeeParams(uint128[2] calldata _newFeeParams) external {\\r\\n        if (msg.sender != IAddressRegistry(addressRegistry).owner()) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        if (\\r\\n            _newFeeParams[0] > Constants.MAX_SWAP_PROTOCOL_FEE ||\\r\\n            _newFeeParams[1] > Constants.MAX_FEE_PER_ANNUM ||\\r\\n            (_newFeeParams[0] == protocolFeeParams[0] &&\\r\\n                _newFeeParams[1] == protocolFeeParams[1])\\r\\n        ) {\\r\\n            revert Errors.InvalidFee();\\r\\n        }\\r\\n        protocolFeeParams = _newFeeParams;\\r\\n        emit ProtocolFeeSet(_newFeeParams);\\r\\n    }\\r\\n\\r\\n    function getProtocolFeeParams() external view returns (uint128[2] memory) {\\r\\n        return protocolFeeParams;\\r\\n    }\\r\\n\\r\\n    function _processBorrowTransaction(\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple,\\r\\n        address lenderVault\\r\\n    ) internal returns (DataTypesPeerToPeer.Loan memory, uint256, uint256) {\\r\\n        (\\r\\n            DataTypesPeerToPeer.Loan memory loan,\\r\\n            uint256 loanId,\\r\\n            DataTypesPeerToPeer.TransferInstructions memory transferInstructions\\r\\n        ) = ILenderVaultImpl(lenderVault).processQuote(\\r\\n                msg.sender,\\r\\n                borrowInstructions,\\r\\n                generalQuoteInfo,\\r\\n                quoteTuple\\r\\n            );\\r\\n\\r\\n        _processTransfers(\\r\\n            lenderVault,\\r\\n            borrowInstructions,\\r\\n            loan,\\r\\n            transferInstructions\\r\\n        );\\r\\n        return (loan, loanId, transferInstructions.upfrontFee);\\r\\n    }\\r\\n\\r\\n    // solhint-disable code-complexity\\r\\n    function _processTransfers(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.Loan memory loan,\\r\\n        DataTypesPeerToPeer.TransferInstructions memory transferInstructions\\r\\n    ) internal {\\r\\n        if (\\r\\n            borrowInstructions.callbackAddr != address(0) &&\\r\\n            IAddressRegistry(addressRegistry).whitelistState(\\r\\n                borrowInstructions.callbackAddr\\r\\n            ) !=\\r\\n            DataTypesPeerToPeer.WhitelistState.CALLBACK\\r\\n        ) {\\r\\n            revert Errors.NonWhitelistedCallback();\\r\\n        }\\r\\n        ILenderVaultImpl(lenderVault).transferTo(\\r\\n            loan.loanToken,\\r\\n            borrowInstructions.callbackAddr == address(0)\\r\\n                ? loan.borrower\\r\\n                : borrowInstructions.callbackAddr,\\r\\n            loan.initLoanAmount\\r\\n        );\\r\\n        if (borrowInstructions.callbackAddr != address(0)) {\\r\\n            IVaultCallback(borrowInstructions.callbackAddr).borrowCallback(\\r\\n                loan,\\r\\n                borrowInstructions.callbackData\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint128[2] memory currProtocolFeeParams = protocolFeeParams;\\r\\n        uint128[2] memory applicableProtocolFeeParams = currProtocolFeeParams;\\r\\n\\r\\n        address mysoTokenManager = IAddressRegistry(addressRegistry)\\r\\n            .mysoTokenManager();\\r\\n        if (mysoTokenManager != address(0)) {\\r\\n            applicableProtocolFeeParams = IMysoTokenManager(mysoTokenManager)\\r\\n                .processP2PBorrow(\\r\\n                    applicableProtocolFeeParams,\\r\\n                    borrowInstructions,\\r\\n                    loan,\\r\\n                    lenderVault\\r\\n                );\\r\\n            for (uint256 i; i < 2; ) {\\r\\n                if (applicableProtocolFeeParams[i] > currProtocolFeeParams[i]) {\\r\\n                    revert Errors.InvalidFee();\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Note: Collateral and fees flow and breakdown is as follows:\\r\\n        //\\r\\n        // collSendAmount (\\\"collSendAmount\\\")\\r\\n        // |\\r\\n        // |-- protocolFeeAmount (\\\"protocolFeeAmount\\\")\\r\\n        // |\\r\\n        // |-- gross pledge amount\\r\\n        //     |\\r\\n        //     |-- gross upfront fee\\r\\n        //     |   |\\r\\n        //     |   |-- net upfront fee (\\\"upfrontFee\\\")\\r\\n        //     |   |\\r\\n        //     |   |-- transfer fee 1\\r\\n        //     |\\r\\n        //     |-- gross reclaimable collateral\\r\\n        //         |\\r\\n        //         |-- net reclaimable collateral (\\\"initCollAmount\\\")\\r\\n        //         |\\r\\n        //         |-- transfer fee 2 (\\\"expectedCompartmentTransferFee\\\")\\r\\n        //\\r\\n        // where expectedProtocolAndVaultTransferFee = protocolFeeAmount + transfer fee 1\\r\\n\\r\\n        uint256 protocolFeeAmount = _calculateProtocolFeeAmount(\\r\\n            applicableProtocolFeeParams,\\r\\n            borrowInstructions.collSendAmount,\\r\\n            loan.initCollAmount == 0 ? 0 : loan.expiry - block.timestamp\\r\\n        );\\r\\n\\r\\n        // check protocolFeeAmount <= expectedProtocolAndVaultTransferFee\\r\\n        if (\\r\\n            protocolFeeAmount >\\r\\n            borrowInstructions.expectedProtocolAndVaultTransferFee\\r\\n        ) {\\r\\n            revert Errors.InsufficientSendAmount();\\r\\n        }\\r\\n\\r\\n        if (protocolFeeAmount != 0) {\\r\\n            // note: if coll token has a transfer fee, then protocolFeeAmount received by the protocol will be less than\\r\\n            // protocolFeeAmount; this is by design to not tax borrowers or lenders for transfer fees on protocol fees\\r\\n            IERC20Metadata(loan.collToken).safeTransferFrom(\\r\\n                loan.borrower,\\r\\n                IAddressRegistry(addressRegistry).owner(),\\r\\n                protocolFeeAmount\\r\\n            );\\r\\n        }\\r\\n        // determine any transfer fee for sending collateral to vault\\r\\n        uint256 collTransferFeeForSendingToVault = borrowInstructions\\r\\n            .expectedProtocolAndVaultTransferFee - protocolFeeAmount;\\r\\n        // Note: initialize the coll amount that is sent to vault in case there's no compartment\\r\\n        uint256 grossCollTransferAmountToVault = loan.initCollAmount +\\r\\n            transferInstructions.upfrontFee +\\r\\n            collTransferFeeForSendingToVault;\\r\\n        // Note: initialize the vault's expected coll balance increase in case there's no compartment\\r\\n        uint256 expVaultCollBalIncrease = loan.initCollAmount +\\r\\n            transferInstructions.upfrontFee;\\r\\n        if (transferInstructions.collReceiver != lenderVault) {\\r\\n            // Note: if there's a compartment then adjust the coll amount that is sent to vault by deducting the amount\\r\\n            // that goes to the compartment, i.e., the borrower's reclaimable coll amount and any associated transfer fees\\r\\n            grossCollTransferAmountToVault -= loan.initCollAmount;\\r\\n            // Note: similarly, adjust the vault's expected coll balance diff by deducting the reclaimable coll amount that\\r\\n            // goes to the compartment\\r\\n            expVaultCollBalIncrease -= loan.initCollAmount;\\r\\n\\r\\n            uint256 collReceiverPreBal = IERC20Metadata(loan.collToken)\\r\\n                .balanceOf(transferInstructions.collReceiver);\\r\\n            IERC20Metadata(loan.collToken).safeTransferFrom(\\r\\n                loan.borrower,\\r\\n                transferInstructions.collReceiver,\\r\\n                loan.initCollAmount +\\r\\n                    borrowInstructions.expectedCompartmentTransferFee\\r\\n            );\\r\\n            // check that compartment balance increase matches the intended reclaimable collateral amount\\r\\n            if (\\r\\n                IERC20Metadata(loan.collToken).balanceOf(\\r\\n                    transferInstructions.collReceiver\\r\\n                ) != loan.initCollAmount + collReceiverPreBal\\r\\n            ) {\\r\\n                revert Errors.InvalidSendAmount();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (grossCollTransferAmountToVault > 0) {\\r\\n            // @dev: grossCollTransferAmountToVault can be zero in case no upfront fee and compartment is used\\r\\n            if (expVaultCollBalIncrease == 0) {\\r\\n                revert Errors.InconsistentExpVaultBalIncrease();\\r\\n            }\\r\\n            uint256 vaultPreBal = IERC20Metadata(loan.collToken).balanceOf(\\r\\n                lenderVault\\r\\n            );\\r\\n            IERC20Metadata(loan.collToken).safeTransferFrom(\\r\\n                loan.borrower,\\r\\n                lenderVault,\\r\\n                grossCollTransferAmountToVault\\r\\n            );\\r\\n            if (\\r\\n                IERC20Metadata(loan.collToken).balanceOf(lenderVault) !=\\r\\n                vaultPreBal + expVaultCollBalIncrease\\r\\n            ) {\\r\\n                revert Errors.InvalidSendAmount();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _processRepayTransfers(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.LoanRepayInstructions memory loanRepayInstructions,\\r\\n        DataTypesPeerToPeer.Loan memory loan,\\r\\n        uint128 leftRepaymentAmount,\\r\\n        uint128 reclaimCollAmount,\\r\\n        bool noCompartment\\r\\n    ) internal {\\r\\n        noCompartment\\r\\n            ? ILenderVaultImpl(lenderVault).transferTo(\\r\\n                loan.collToken,\\r\\n                loanRepayInstructions.callbackAddr == address(0)\\r\\n                    ? loan.borrower\\r\\n                    : loanRepayInstructions.callbackAddr,\\r\\n                reclaimCollAmount\\r\\n            )\\r\\n            : ILenderVaultImpl(lenderVault).transferCollFromCompartment(\\r\\n                loanRepayInstructions.targetRepayAmount,\\r\\n                leftRepaymentAmount,\\r\\n                reclaimCollAmount,\\r\\n                loan.borrower,\\r\\n                loan.collToken,\\r\\n                loanRepayInstructions.callbackAddr,\\r\\n                loan.collTokenCompartmentAddr\\r\\n            );\\r\\n        if (loanRepayInstructions.callbackAddr != address(0)) {\\r\\n            IVaultCallback(loanRepayInstructions.callbackAddr).repayCallback(\\r\\n                loan,\\r\\n                loanRepayInstructions.callbackData\\r\\n            );\\r\\n        }\\r\\n        uint256 loanTokenReceived = IERC20Metadata(loan.loanToken).balanceOf(\\r\\n            lenderVault\\r\\n        );\\r\\n\\r\\n        IERC20Metadata(loan.loanToken).safeTransferFrom(\\r\\n            loan.borrower,\\r\\n            lenderVault,\\r\\n            loanRepayInstructions.targetRepayAmount +\\r\\n                loanRepayInstructions.expectedTransferFee\\r\\n        );\\r\\n\\r\\n        loanTokenReceived =\\r\\n            IERC20Metadata(loan.loanToken).balanceOf(lenderVault) -\\r\\n            loanTokenReceived;\\r\\n        if (loanTokenReceived != loanRepayInstructions.targetRepayAmount) {\\r\\n            revert Errors.InvalidSendAmount();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkDeadlineAndRegisteredVault(\\r\\n        uint256 deadline,\\r\\n        address lenderVault\\r\\n    ) internal view {\\r\\n        if (block.timestamp > deadline) {\\r\\n            revert Errors.DeadlinePassed();\\r\\n        }\\r\\n        if (!IAddressRegistry(addressRegistry).isRegisteredVault(lenderVault)) {\\r\\n            revert Errors.UnregisteredVault();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _calculateProtocolFeeAmount(\\r\\n        uint128[2] memory _protocolFeeParams,\\r\\n        uint256 collSendAmount,\\r\\n        uint256 borrowDuration\\r\\n    ) internal pure returns (uint256 protocolFeeAmount) {\\r\\n        bool useMaxProtocolFee = _protocolFeeParams[0] +\\r\\n            ((_protocolFeeParams[1] * borrowDuration) /\\r\\n                Constants.YEAR_IN_SECONDS) >\\r\\n            Constants.MAX_TOTAL_PROTOCOL_FEE;\\r\\n        protocolFeeAmount = useMaxProtocolFee\\r\\n            ? (collSendAmount * Constants.MAX_TOTAL_PROTOCOL_FEE) /\\r\\n                Constants.BASE\\r\\n            : ((_protocolFeeParams[0] * collSendAmount) / Constants.BASE) +\\r\\n                ((collSendAmount * _protocolFeeParams[1] * borrowDuration) /\\r\\n                    (Constants.YEAR_IN_SECONDS * Constants.BASE));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/callbacks/BalancerV2Looping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {BalancerDataTypes} from \\\"../interfaces/callbacks/BalancerDataTypes.sol\\\";\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\nimport {VaultCallback} from \\\"./VaultCallback.sol\\\";\\nimport {IBalancerAsset} from \\\"../interfaces/callbacks/IBalancerAsset.sol\\\";\\nimport {IBalancerVault} from \\\"../interfaces/callbacks/IBalancerVault.sol\\\";\\nimport {IVaultCallback} from \\\"../interfaces/IVaultCallback.sol\\\";\\n\\ncontract BalancerV2Looping is VaultCallback {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    address private constant BALANCER_V2_VAULT =\\n        0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n\\n    constructor(address _borrowerGateway) VaultCallback(_borrowerGateway) {} // solhint-disable no-empty-blocks\\n\\n    function borrowCallback(\\n        DataTypesPeerToPeer.Loan calldata loan,\\n        bytes calldata data\\n    ) external {\\n        BalancerDataTypes.FundManagement\\n            memory fundManagement = BalancerDataTypes.FundManagement({\\n                sender: address(this), // swap payer\\n                fromInternalBalance: false, // use payer's internal balance\\n                recipient: payable(loan.borrower), // swap receiver\\n                toInternalBalance: false // user receiver's internal balance\\n            });\\n        (bytes32 poolId, uint256 minSwapReceive, uint256 deadline) = abi.decode(\\n            data,\\n            (bytes32, uint256, uint256)\\n        );\\n        // swap whole loan token balance received from borrower gateway\\n        uint256 loanTokenBalance = IERC20(loan.loanToken).balanceOf(\\n            address(this)\\n        );\\n        IERC20Metadata(loan.loanToken).safeIncreaseAllowance(\\n            BALANCER_V2_VAULT,\\n            loanTokenBalance\\n        );\\n        BalancerDataTypes.SingleSwap memory singleSwap = BalancerDataTypes\\n            .SingleSwap({\\n                poolId: poolId,\\n                kind: BalancerDataTypes.SwapKind.GIVEN_IN,\\n                assetIn: IBalancerAsset(loan.loanToken),\\n                assetOut: IBalancerAsset(loan.collToken),\\n                amount: loanTokenBalance,\\n                userData: \\\"\\\"\\n            });\\n        IBalancerVault(BALANCER_V2_VAULT).swap(\\n            singleSwap,\\n            fundManagement,\\n            minSwapReceive,\\n            deadline\\n        );\\n        IERC20Metadata(loan.loanToken).safeDecreaseAllowance(\\n            BALANCER_V2_VAULT,\\n            IERC20Metadata(loan.loanToken).allowance(\\n                address(this),\\n                BALANCER_V2_VAULT\\n            )\\n        );\\n    }\\n\\n    function _repayCallback(\\n        DataTypesPeerToPeer.Loan calldata loan,\\n        bytes calldata data\\n    ) internal override {\\n        BalancerDataTypes.FundManagement\\n            memory fundManagement = BalancerDataTypes.FundManagement({\\n                sender: address(this), // swap payer\\n                fromInternalBalance: false, // use payer's internal balance\\n                recipient: payable(loan.borrower), // swap receiver\\n                toInternalBalance: false // user receiver's internal balance\\n            });\\n        (bytes32 poolId, uint256 minSwapReceive, uint256 deadline) = abi.decode(\\n            data,\\n            (bytes32, uint256, uint256)\\n        );\\n        // swap whole coll token balance received from borrower gateway\\n        uint256 collBalance = IERC20(loan.collToken).balanceOf(address(this));\\n        BalancerDataTypes.SingleSwap memory singleSwap = BalancerDataTypes\\n            .SingleSwap({\\n                poolId: poolId,\\n                kind: BalancerDataTypes.SwapKind.GIVEN_IN,\\n                assetIn: IBalancerAsset(loan.collToken),\\n                assetOut: IBalancerAsset(loan.loanToken),\\n                amount: collBalance,\\n                userData: \\\"\\\"\\n            });\\n        IERC20Metadata(loan.collToken).safeIncreaseAllowance(\\n            BALANCER_V2_VAULT,\\n            collBalance\\n        );\\n        IBalancerVault(BALANCER_V2_VAULT).swap(\\n            singleSwap,\\n            fundManagement,\\n            minSwapReceive,\\n            deadline\\n        );\\n        IERC20Metadata(loan.collToken).safeDecreaseAllowance(\\n            BALANCER_V2_VAULT,\\n            IERC20Metadata(loan.collToken).allowance(\\n                address(this),\\n                BALANCER_V2_VAULT\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/callbacks/UniV3Looping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\r\\nimport {VaultCallback} from \\\"./VaultCallback.sol\\\";\\r\\nimport {ISwapRouter} from \\\"../interfaces/callbacks/ISwapRouter.sol\\\";\\r\\nimport {IVaultCallback} from \\\"../interfaces/IVaultCallback.sol\\\";\\r\\n\\r\\ncontract UniV3Looping is VaultCallback {\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    address private constant UNI_V3_SWAP_ROUTER =\\r\\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\\r\\n\\r\\n    constructor(address _borrowerGateway) VaultCallback(_borrowerGateway) {} // solhint-disable no-empty-blocks\\r\\n\\r\\n    function borrowCallback(\\r\\n        DataTypesPeerToPeer.Loan calldata loan,\\r\\n        bytes calldata data\\r\\n    ) external {\\r\\n        (uint256 minSwapReceive, uint256 deadline, uint24 poolFee) = abi.decode(\\r\\n            data,\\r\\n            (uint256, uint256, uint24)\\r\\n        );\\r\\n        // swap whole loan token balance received from borrower gateway\\r\\n        uint256 loanTokenBalance = IERC20(loan.loanToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        IERC20Metadata(loan.loanToken).safeIncreaseAllowance(\\r\\n            UNI_V3_SWAP_ROUTER,\\r\\n            loanTokenBalance\\r\\n        );\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n            .ExactInputSingleParams({\\r\\n                tokenIn: loan.loanToken,\\r\\n                tokenOut: loan.collToken,\\r\\n                fee: poolFee,\\r\\n                recipient: loan.borrower,\\r\\n                deadline: deadline,\\r\\n                amountIn: loanTokenBalance,\\r\\n                amountOutMinimum: minSwapReceive,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n        ISwapRouter(UNI_V3_SWAP_ROUTER).exactInputSingle(params);\\r\\n        IERC20Metadata(loan.loanToken).safeDecreaseAllowance(\\r\\n            UNI_V3_SWAP_ROUTER,\\r\\n            IERC20Metadata(loan.loanToken).allowance(\\r\\n                address(this),\\r\\n                UNI_V3_SWAP_ROUTER\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _repayCallback(\\r\\n        DataTypesPeerToPeer.Loan calldata loan,\\r\\n        bytes calldata data\\r\\n    ) internal override {\\r\\n        (uint256 minSwapReceive, uint256 deadline, uint24 poolFee) = abi.decode(\\r\\n            data,\\r\\n            (uint256, uint256, uint24)\\r\\n        );\\r\\n        // swap whole coll token balance received from borrower gateway\\r\\n        uint256 collTokenBalance = IERC20(loan.collToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        IERC20Metadata(loan.collToken).safeIncreaseAllowance(\\r\\n            UNI_V3_SWAP_ROUTER,\\r\\n            collTokenBalance\\r\\n        );\\r\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n            .ExactInputSingleParams({\\r\\n                tokenIn: loan.collToken,\\r\\n                tokenOut: loan.loanToken,\\r\\n                fee: poolFee,\\r\\n                recipient: loan.borrower,\\r\\n                deadline: deadline,\\r\\n                amountIn: collTokenBalance,\\r\\n                amountOutMinimum: minSwapReceive,\\r\\n                sqrtPriceLimitX96: 0\\r\\n            });\\r\\n\\r\\n        ISwapRouter(UNI_V3_SWAP_ROUTER).exactInputSingle(params);\\r\\n        IERC20Metadata(loan.collToken).safeDecreaseAllowance(\\r\\n            UNI_V3_SWAP_ROUTER,\\r\\n            IERC20Metadata(loan.collToken).allowance(\\r\\n                address(this),\\r\\n                UNI_V3_SWAP_ROUTER\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/callbacks/VaultCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../../Errors.sol\\\";\\r\\nimport {IVaultCallback} from \\\"../interfaces/IVaultCallback.sol\\\";\\r\\n\\r\\nabstract contract VaultCallback is IVaultCallback {\\r\\n    address public immutable borrowerGateway;\\r\\n\\r\\n    constructor(address _borrowerGateway) {\\r\\n        if (_borrowerGateway == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        borrowerGateway = _borrowerGateway;\\r\\n    }\\r\\n\\r\\n    function repayCallback(\\r\\n        DataTypesPeerToPeer.Loan calldata loan,\\r\\n        bytes calldata data\\r\\n    ) external {\\r\\n        if (msg.sender != borrowerGateway) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        _repayCallback(loan, data);\\r\\n    }\\r\\n\\r\\n    function _repayCallback(\\r\\n        DataTypesPeerToPeer.Loan calldata loan,\\r\\n        bytes calldata data\\r\\n    ) internal virtual {} // solhint-disable no-empty-blocks\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/compartments/BaseCompartment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IBaseCompartment} from \\\"../interfaces/compartments/IBaseCompartment.sol\\\";\\nimport {ILenderVaultImpl} from \\\"../interfaces/ILenderVaultImpl.sol\\\";\\nimport {Errors} from \\\"../../Errors.sol\\\";\\n\\nabstract contract BaseCompartment is Initializable, IBaseCompartment {\\n    using SafeERC20 for IERC20;\\n\\n    address public vaultAddr;\\n    uint256 public loanIdx;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address _vaultAddr,\\n        uint256 _loanIdx\\n    ) external initializer {\\n        if (_vaultAddr == address(0)) {\\n            revert Errors.InvalidAddress();\\n        }\\n        vaultAddr = _vaultAddr;\\n        loanIdx = _loanIdx;\\n    }\\n\\n    // transfer coll on repays\\n    function _transferCollFromCompartment(\\n        uint128 reclaimCollAmount,\\n        address borrowerAddr,\\n        address collTokenAddr,\\n        address callbackAddr\\n    ) internal {\\n        _withdrawCheck();\\n        if (msg.sender != vaultAddr) revert Errors.InvalidSender();\\n        address collReceiver = callbackAddr == address(0)\\n            ? borrowerAddr\\n            : callbackAddr;\\n        IERC20(collTokenAddr).safeTransfer(collReceiver, reclaimCollAmount);\\n    }\\n\\n    function _unlockCollToVault(address collTokenAddr) internal {\\n        _withdrawCheck();\\n        if (msg.sender != vaultAddr) revert Errors.InvalidSender();\\n        uint256 currentCollBalance = IERC20(collTokenAddr).balanceOf(\\n            address(this)\\n        );\\n        IERC20(collTokenAddr).safeTransfer(msg.sender, currentCollBalance);\\n    }\\n\\n    function _withdrawCheck() internal view {\\n        bool withdrawEntered = ILenderVaultImpl(vaultAddr).withdrawEntered();\\n        if (withdrawEntered) {\\n            revert Errors.WithdrawEntered();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/compartments/staking/AaveStakingCompartment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {BaseCompartment} from \\\"../BaseCompartment.sol\\\";\\r\\n\\r\\ncontract AaveStakingCompartment is BaseCompartment {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // transfer coll on repays\\r\\n    function transferCollFromCompartment(\\r\\n        uint256 /*repayAmount*/,\\r\\n        uint256 /*repayAmountLeft*/,\\r\\n        uint128 reclaimCollAmount,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr\\r\\n    ) external {\\r\\n        _transferCollFromCompartment(\\r\\n            reclaimCollAmount,\\r\\n            borrowerAddr,\\r\\n            collTokenAddr,\\r\\n            callbackAddr\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // unlockColl this would be called on defaults\\r\\n    function unlockCollToVault(address collTokenAddr) external {\\r\\n        _unlockCollToVault(collTokenAddr);\\r\\n    }\\r\\n\\r\\n    function getReclaimableBalance(\\r\\n        address collToken\\r\\n    ) external view override returns (uint256) {\\r\\n        return IERC20(collToken).balanceOf(address(this));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/compartments/staking/CurveLPStakingCompartment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {ICurveStakingHelper} from \\\"../../interfaces/compartments/staking/ICurveStakingHelper.sol\\\";\\r\\nimport {ILenderVaultImpl} from \\\"../../interfaces/ILenderVaultImpl.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../../DataTypesPeerToPeer.sol\\\";\\r\\nimport {BaseCompartment} from \\\"../BaseCompartment.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\n\\r\\ncontract CurveLPStakingCompartment is BaseCompartment {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public liqGaugeAddr;\\r\\n\\r\\n    address internal constant CRV_ADDR =\\r\\n        0xD533a949740bb3306d119CC777fa900bA034cd52;\\r\\n    address internal constant GAUGE_CONTROLLER =\\r\\n        0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB;\\r\\n    address internal constant CRV_MINTER_ADDR =\\r\\n        0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\r\\n\\r\\n    mapping(address => bool) public approvedStaker;\\r\\n\\r\\n    function stake(uint256 gaugeIndex) external {\\r\\n        DataTypesPeerToPeer.Loan memory loan = ILenderVaultImpl(vaultAddr).loan(\\r\\n            loanIdx\\r\\n        );\\r\\n        if (msg.sender != loan.borrower && !approvedStaker[msg.sender]) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        if (block.timestamp >= loan.expiry) {\\r\\n            revert Errors.LoanExpired();\\r\\n        }\\r\\n        if (liqGaugeAddr != address(0)) {\\r\\n            revert Errors.AlreadyStaked();\\r\\n        }\\r\\n\\r\\n        uint256 amount = IERC20(loan.collToken).balanceOf(address(this));\\r\\n\\r\\n        address _liqGaugeAddr = ICurveStakingHelper(GAUGE_CONTROLLER).gauges(\\r\\n            gaugeIndex\\r\\n        );\\r\\n\\r\\n        if (_liqGaugeAddr == address(0)) {\\r\\n            revert Errors.InvalidGaugeIndex();\\r\\n        }\\r\\n\\r\\n        address lpTokenAddrForGauge = ICurveStakingHelper(_liqGaugeAddr)\\r\\n            .lp_token();\\r\\n        if (lpTokenAddrForGauge != loan.collToken) {\\r\\n            revert Errors.IncorrectGaugeForLpToken();\\r\\n        }\\r\\n        liqGaugeAddr = _liqGaugeAddr;\\r\\n        IERC20(loan.collToken).safeIncreaseAllowance(_liqGaugeAddr, amount);\\r\\n        ICurveStakingHelper(_liqGaugeAddr).deposit(amount);\\r\\n        IERC20(loan.collToken).safeDecreaseAllowance(\\r\\n            _liqGaugeAddr,\\r\\n            IERC20(loan.collToken).allowance(address(this), _liqGaugeAddr)\\r\\n        );\\r\\n        emit Staked(gaugeIndex, _liqGaugeAddr, amount);\\r\\n    }\\r\\n\\r\\n    function toggleApprovedStaker(address _staker) external {\\r\\n        DataTypesPeerToPeer.Loan memory loan = ILenderVaultImpl(vaultAddr).loan(\\r\\n            loanIdx\\r\\n        );\\r\\n        if (msg.sender != loan.borrower) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        bool currStakingState = approvedStaker[_staker];\\r\\n        approvedStaker[_staker] = !currStakingState;\\r\\n        emit UpdatedApprovedStaker(_staker, !currStakingState);\\r\\n    }\\r\\n\\r\\n    // transfer coll on repays\\r\\n    function transferCollFromCompartment(\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        uint128 /*reclaimCollAmount*/,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr\\r\\n    ) external {\\r\\n        _collAccountingHelper(\\r\\n            repayAmount,\\r\\n            repayAmountLeft,\\r\\n            0,\\r\\n            borrowerAddr,\\r\\n            collTokenAddr,\\r\\n            callbackAddr,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // unlockColl this would be called on defaults\\r\\n    function unlockCollToVault(address collTokenAddr) external {\\r\\n        _collAccountingHelper(\\r\\n            1,\\r\\n            1,\\r\\n            0,\\r\\n            address(0),\\r\\n            collTokenAddr,\\r\\n            address(0),\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getReclaimableBalance(\\r\\n        address collToken\\r\\n    ) external view override returns (uint256 reclaimableCollBalance) {\\r\\n        reclaimableCollBalance = IERC20(collToken).balanceOf(address(this));\\r\\n        address _liqGaugeAddr = liqGaugeAddr;\\r\\n        if (_liqGaugeAddr != address(0)) {\\r\\n            reclaimableCollBalance += IERC20(_liqGaugeAddr).balanceOf(\\r\\n                address(this)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getRewardTokensAndWithdrawFromGauge(\\r\\n        address _liqGaugeAddr,\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft\\r\\n    ) internal returns (address[8] memory _rewardTokenAddr) {\\r\\n        uint256 currentStakedBal = IERC20(_liqGaugeAddr).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        // withdraw proportion of gauge amount\\r\\n        uint256 withdrawAmount = Math.mulDiv(\\r\\n            repayAmount,\\r\\n            currentStakedBal,\\r\\n            repayAmountLeft\\r\\n        );\\r\\n        ICurveStakingHelper(CRV_MINTER_ADDR).mint(_liqGaugeAddr);\\r\\n        try ICurveStakingHelper(_liqGaugeAddr).reward_tokens(0) returns (\\r\\n            address rewardTokenAddrZeroIndex\\r\\n        ) {\\r\\n            // versions 2, 3, 4, or 5\\r\\n            _rewardTokenAddr[0] = rewardTokenAddrZeroIndex;\\r\\n            address rewardTokenAddr;\\r\\n            for (uint256 i; i < 7; ) {\\r\\n                rewardTokenAddr = ICurveStakingHelper(_liqGaugeAddr)\\r\\n                    .reward_tokens(i + 1);\\r\\n                if (rewardTokenAddr != address(0)) {\\r\\n                    _rewardTokenAddr[i + 1] = rewardTokenAddr;\\r\\n                } else {\\r\\n                    break;\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            try\\r\\n                ICurveStakingHelper(_liqGaugeAddr).withdraw(\\r\\n                    withdrawAmount,\\r\\n                    true\\r\\n                )\\r\\n            // solhint-disable no-empty-blocks\\r\\n            {\\r\\n                // version 3, 4, or 5 gauge\\r\\n            } catch {\\r\\n                // version 2 gauge\\r\\n                if (_rewardTokenAddr[0] != address(0)) {\\r\\n                    ICurveStakingHelper(_liqGaugeAddr).claim_rewards();\\r\\n                }\\r\\n                ICurveStakingHelper(_liqGaugeAddr).withdraw(withdrawAmount);\\r\\n            }\\r\\n        } catch {\\r\\n            // version 1 gauge\\r\\n            ICurveStakingHelper(_liqGaugeAddr).withdraw(withdrawAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _collAccountingHelper(\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        uint128 /*reclaimableCollBalance*/,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr,\\r\\n        bool isUnlock\\r\\n    ) internal returns (uint128 lpTokenAmount) {\\r\\n        _withdrawCheck();\\r\\n        if (msg.sender != vaultAddr) revert Errors.InvalidSender();\\r\\n\\r\\n        address _liqGaugeAddr = liqGaugeAddr;\\r\\n\\r\\n        // if gaugeAddr has been set, withdraw from gauge and get reward token addresses\\r\\n        address[8] memory _rewardTokenAddr;\\r\\n        if (_liqGaugeAddr != address(0)) {\\r\\n            _rewardTokenAddr = _getRewardTokensAndWithdrawFromGauge(\\r\\n                _liqGaugeAddr,\\r\\n                repayAmount,\\r\\n                repayAmountLeft\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // now check lp token balance of compartment which will be portion unstaked (could have never been staked)\\r\\n        uint256 currentCompartmentBal = IERC20(collTokenAddr).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        // transfer proportion of compartment lp token balance if never staked or an unlock, else all balance if staked\\r\\n        lpTokenAmount = SafeCast.toUint128(\\r\\n            isUnlock || _liqGaugeAddr != address(0)\\r\\n                ? currentCompartmentBal\\r\\n                : Math.mulDiv(\\r\\n                    repayAmount,\\r\\n                    currentCompartmentBal,\\r\\n                    repayAmountLeft\\r\\n                )\\r\\n        );\\r\\n\\r\\n        // if unlock, send to vault (msg.sender), else if callback send directly there, else to borrower\\r\\n        address lpTokenReceiver = isUnlock\\r\\n            ? msg.sender\\r\\n            : (callbackAddr == address(0) ? borrowerAddr : callbackAddr);\\r\\n\\r\\n        IERC20(collTokenAddr).safeTransfer(lpTokenReceiver, lpTokenAmount);\\r\\n\\r\\n        if (_liqGaugeAddr != address(0)) {\\r\\n            _transferRewards(\\r\\n                isUnlock,\\r\\n                borrowerAddr,\\r\\n                repayAmount,\\r\\n                repayAmountLeft,\\r\\n                collTokenAddr,\\r\\n                _rewardTokenAddr\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferRewards(\\r\\n        bool isUnlock,\\r\\n        address borrowerAddr,\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        address collTokenAddr,\\r\\n        address[8] memory _rewardTokenAddr\\r\\n    ) internal {\\r\\n        // rest of rewards are always sent to borrower, not for callback\\r\\n        // if unlock then sent to vaultAddr (msg.sender)\\r\\n        address rewardReceiver = isUnlock ? msg.sender : borrowerAddr;\\r\\n        // check crv token balance\\r\\n        uint256 currentCrvBal = IERC20(CRV_ADDR).balanceOf(address(this));\\r\\n        // transfer proportion of crv token balance\\r\\n        uint256 tokenAmount = isUnlock\\r\\n            ? currentCrvBal\\r\\n            : Math.mulDiv(repayAmount, currentCrvBal, repayAmountLeft);\\r\\n\\r\\n        // only perform crv transfer if\\r\\n        // 1) crv token amount > 0 and coll token is not CRV else skip\\r\\n        // if unlock, still ok to skip since then all balance would have been\\r\\n        // transferred to vault earlier in this _getRewardTokensAndWithdrawFromGauge function\\r\\n        // note: this should never actually happen since crv\\r\\n        // and this compartment should not be whitelisted, but just in case\\r\\n        if (tokenAmount > 0 && CRV_ADDR != collTokenAddr) {\\r\\n            IERC20(CRV_ADDR).safeTransfer(rewardReceiver, tokenAmount);\\r\\n        }\\r\\n\\r\\n        uint256 i;\\r\\n        uint256 currentRewardTokenBal;\\r\\n        while (i < 8 && _rewardTokenAddr[i] != address(0)) {\\r\\n            // skip invalid reward tokens\\r\\n            if (_checkIfValidRewardToken(collTokenAddr, i, _rewardTokenAddr)) {\\r\\n                currentRewardTokenBal = IERC20(_rewardTokenAddr[i]).balanceOf(\\r\\n                    address(this)\\r\\n                );\\r\\n\\r\\n                tokenAmount = isUnlock\\r\\n                    ? currentRewardTokenBal\\r\\n                    : Math.mulDiv(\\r\\n                        repayAmount,\\r\\n                        currentRewardTokenBal,\\r\\n                        repayAmountLeft\\r\\n                    );\\r\\n\\r\\n                if (tokenAmount > 0) {\\r\\n                    IERC20(_rewardTokenAddr[i]).safeTransfer(\\r\\n                        rewardReceiver,\\r\\n                        tokenAmount\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkIfValidRewardToken(\\r\\n        address collTokenAddr,\\r\\n        uint256 index,\\r\\n        address[8] memory rewardTokens\\r\\n    ) internal pure returns (bool) {\\r\\n        // invalid reward if it is equal to collateral or crv token\\r\\n        if (\\r\\n            rewardTokens[index] == collTokenAddr ||\\r\\n            rewardTokens[index] == CRV_ADDR\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        // check if reward token is a duplicate in previous entries\\r\\n        if (index > 0) {\\r\\n            for (uint256 i; i < index; ) {\\r\\n                if (rewardTokens[i] == rewardTokens[index]) {\\r\\n                    return false;\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/compartments/staking/GLPStakingCompartment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IGLPStakingHelper} from \\\"../../interfaces/compartments/staking/IGLPStakingHelper.sol\\\";\\r\\nimport {BaseCompartment} from \\\"../BaseCompartment.sol\\\";\\r\\n\\r\\ncontract GLPStakingCompartment is BaseCompartment {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // arbitrum WETH address\\r\\n    address private constant WETH = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\r\\n    address private constant FEE_GLP =\\r\\n        0x4e971a87900b931fF39d1Aad67697F49835400b6;\\r\\n\\r\\n    // transfer coll on repays\\r\\n    function transferCollFromCompartment(\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        uint128 reclaimCollAmount,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr\\r\\n    ) external {\\r\\n        _transferCollFromCompartment(\\r\\n            reclaimCollAmount,\\r\\n            borrowerAddr,\\r\\n            collTokenAddr,\\r\\n            callbackAddr\\r\\n        );\\r\\n\\r\\n        _transferRewards(\\r\\n            collTokenAddr,\\r\\n            borrowerAddr,\\r\\n            repayAmount,\\r\\n            repayAmountLeft,\\r\\n            false\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // unlockColl this would be called on defaults\\r\\n    function unlockCollToVault(address collTokenAddr) external {\\r\\n        _unlockCollToVault(collTokenAddr);\\r\\n        _transferRewards(collTokenAddr, vaultAddr, 0, 0, true);\\r\\n    }\\r\\n\\r\\n    function getReclaimableBalance(\\r\\n        address collToken\\r\\n    ) external view override returns (uint256) {\\r\\n        return IERC20(collToken).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function _transferRewards(\\r\\n        address collTokenAddr,\\r\\n        address recipient,\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        bool isUnlock\\r\\n    ) internal {\\r\\n        // if collTokenAddr is weth, then return so don't double transfer on partial repay\\r\\n        // or waste gas on unlock when no rewards will be paid out\\r\\n        // note: this should never actually happen since weth\\r\\n        // and this compartment should not be whitelisted, but just in case\\r\\n        if (collTokenAddr == WETH) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // solhint-disable no-empty-blocks\\r\\n        try IGLPStakingHelper(FEE_GLP).claim(address(this)) {\\r\\n            // do nothing\\r\\n            // solhint-disable no-empty-blocks\\r\\n        } catch {\\r\\n            // do nothing\\r\\n        }\\r\\n\\r\\n        // check weth token balance\\r\\n        uint256 currentWethBal = IERC20(WETH).balanceOf(address(this));\\r\\n\\r\\n        // transfer proportion of weth token balance\\r\\n        uint256 wethTokenAmount = isUnlock\\r\\n            ? currentWethBal\\r\\n            : Math.mulDiv(repayAmount, currentWethBal, repayAmountLeft);\\r\\n        IERC20(WETH).safeTransfer(recipient, wethTokenAmount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/compartments/voting/VoteCompartment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IVotes} from \\\"@openzeppelin/contracts/governance/utils/IVotes.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"../../interfaces/IAddressRegistry.sol\\\";\\r\\nimport {ILenderVaultImpl} from \\\"../../interfaces/ILenderVaultImpl.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../../DataTypesPeerToPeer.sol\\\";\\r\\nimport {BaseCompartment} from \\\"../BaseCompartment.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\n\\r\\ncontract VoteCompartment is BaseCompartment {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    mapping(address => bool) public approvedDelegator;\\r\\n\\r\\n    function delegate(address _delegatee) external {\\r\\n        DataTypesPeerToPeer.Loan memory loan = ILenderVaultImpl(vaultAddr).loan(\\r\\n            loanIdx\\r\\n        );\\r\\n        if (msg.sender != loan.borrower && !approvedDelegator[msg.sender]) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        if (block.timestamp >= loan.expiry) {\\r\\n            revert Errors.LoanExpired();\\r\\n        }\\r\\n        if (_delegatee == address(0)) {\\r\\n            revert Errors.InvalidDelegatee();\\r\\n        }\\r\\n        uint256 preDelegateCompartmentBal = IERC20(loan.collToken).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        IVotes(loan.collToken).delegate(_delegatee);\\r\\n        if (\\r\\n            preDelegateCompartmentBal >\\r\\n            IERC20(loan.collToken).balanceOf(address(this))\\r\\n        ) {\\r\\n            revert Errors.DelegateReducedBalance();\\r\\n        }\\r\\n        emit Delegated(msg.sender, _delegatee);\\r\\n    }\\r\\n\\r\\n    function toggleApprovedDelegator(address _delegate) external {\\r\\n        DataTypesPeerToPeer.Loan memory loan = ILenderVaultImpl(vaultAddr).loan(\\r\\n            loanIdx\\r\\n        );\\r\\n        if (msg.sender != loan.borrower) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        bool currDelegateState = approvedDelegator[_delegate];\\r\\n        approvedDelegator[_delegate] = !currDelegateState;\\r\\n        emit UpdatedApprovedDelegator(_delegate, !currDelegateState);\\r\\n    }\\r\\n\\r\\n    // transfer coll on repays\\r\\n    function transferCollFromCompartment(\\r\\n        uint256 /*repayAmount*/,\\r\\n        uint256 /*repayAmountLeft*/,\\r\\n        uint128 reclaimCollAmount,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr\\r\\n    ) external {\\r\\n        _transferCollFromCompartment(\\r\\n            reclaimCollAmount,\\r\\n            borrowerAddr,\\r\\n            collTokenAddr,\\r\\n            callbackAddr\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // unlockColl this would be called on defaults\\r\\n    function unlockCollToVault(address collTokenAddr) external {\\r\\n        _unlockCollToVault(collTokenAddr);\\r\\n    }\\r\\n\\r\\n    function getReclaimableBalance(\\r\\n        address collToken\\r\\n    ) external view override returns (uint256) {\\r\\n        return IERC20(collToken).balanceOf(address(this));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/DataTypesPeerToPeer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary DataTypesPeerToPeer {\\r\\n    struct Loan {\\r\\n        // address of borrower\\r\\n        address borrower;\\r\\n        // address of coll token\\r\\n        address collToken;\\r\\n        // address of loan token\\r\\n        address loanToken;\\r\\n        // timestamp after which any portion of loan unpaid defaults\\r\\n        uint40 expiry;\\r\\n        // timestamp before which borrower cannot repay\\r\\n        uint40 earliestRepay;\\r\\n        // initial collateral amount of loan\\r\\n        uint128 initCollAmount;\\r\\n        // loan amount given\\r\\n        uint128 initLoanAmount;\\r\\n        // full repay amount at start of loan\\r\\n        uint128 initRepayAmount;\\r\\n        // amount repaid (loan token) up until current time\\r\\n        // note: partial repayments are allowed\\r\\n        uint128 amountRepaidSoFar;\\r\\n        // amount reclaimed (coll token) up until current time\\r\\n        // note: partial repayments are allowed\\r\\n        uint128 amountReclaimedSoFar;\\r\\n        // flag tracking if collateral has been unlocked by vault\\r\\n        bool collUnlocked;\\r\\n        // address of the compartment housing the collateral\\r\\n        address collTokenCompartmentAddr;\\r\\n    }\\r\\n\\r\\n    struct QuoteTuple {\\r\\n        // loan amount per one unit of collateral if no oracle\\r\\n        // LTV in terms of the constant BASE (10 ** 18) if using oracle\\r\\n        uint256 loanPerCollUnitOrLtv;\\r\\n        // interest rate percentage in BASE (can be negative but greater than -BASE)\\r\\n        // i.e. -100% < interestRatePct since repay amount of 0 is not allowed\\r\\n        // also interestRatePctInBase is not annualized\\r\\n        int256 interestRatePctInBase;\\r\\n        // fee percentage,in BASE, which will be paid in upfront in collateral\\r\\n        uint256 upfrontFeePctInBase;\\r\\n        // length of the loan in seconds\\r\\n        uint256 tenor;\\r\\n    }\\r\\n\\r\\n    struct GeneralQuoteInfo {\\r\\n        // address of collateral token\\r\\n        address collToken;\\r\\n        // address of loan token\\r\\n        address loanToken;\\r\\n        // address of oracle (optional)\\r\\n        address oracleAddr;\\r\\n        // min loan amount (in loan token) prevent griefing attacks or\\r\\n        // amounts lender feels isn't worth unlocking on default\\r\\n        uint256 minLoan;\\r\\n        // max loan amount (in loan token) if lender wants a cap\\r\\n        uint256 maxLoan;\\r\\n        // timestamp after which quote automatically invalidates\\r\\n        uint256 validUntil;\\r\\n        // time, in seconds, that loan cannot be exercised\\r\\n        uint256 earliestRepayTenor;\\r\\n        // address of compartment implementation (optional)\\r\\n        address borrowerCompartmentImplementation;\\r\\n        // will invalidate quote after one use\\r\\n        // if false, will be a standing quote\\r\\n        bool isSingleUse;\\r\\n        // whitelist address (optional)\\r\\n        address whitelistAddr;\\r\\n        // flag indicating whether whitelistAddr refers to a single whitelisted\\r\\n        // borrower or to a whitelist authority that can whitelist multiple addresses\\r\\n        bool isWhitelistAddrSingleBorrower;\\r\\n    }\\r\\n\\r\\n    struct OnChainQuote {\\r\\n        // general quote info\\r\\n        GeneralQuoteInfo generalQuoteInfo;\\r\\n        // array of quote parameters\\r\\n        QuoteTuple[] quoteTuples;\\r\\n        // provides more distinguishability of quotes to reduce\\r\\n        // likelihood of collisions w.r.t. quote creations and invalidations\\r\\n        bytes32 salt;\\r\\n    }\\r\\n\\r\\n    struct OffChainQuote {\\r\\n        // general quote info\\r\\n        GeneralQuoteInfo generalQuoteInfo;\\r\\n        // root of the merkle tree, where the merkle tree encodes all QuoteTuples the lender accepts\\r\\n        bytes32 quoteTuplesRoot;\\r\\n        // provides more distinguishability of quotes to reduce\\r\\n        // likelihood of collisions w.r.t. quote creations and invalidations\\r\\n        bytes32 salt;\\r\\n        // for invalidating multiple parallel quotes in one click\\r\\n        uint256 nonce;\\r\\n        // array of compact signatures from vault signers\\r\\n        bytes[] compactSigs;\\r\\n    }\\r\\n\\r\\n    struct LoanRepayInstructions {\\r\\n        // loan id being repaid\\r\\n        uint256 targetLoanId;\\r\\n        // repay amount after transfer fees in loan token\\r\\n        uint128 targetRepayAmount;\\r\\n        // expected transfer fees in loan token (=0 for tokens without transfer fee)\\r\\n        // note: amount that borrower sends is targetRepayAmount + expectedTransferFee\\r\\n        uint128 expectedTransferFee;\\r\\n        // deadline to prevent stale transactions\\r\\n        uint256 deadline;\\r\\n        // e.g., for using collateral to payoff debt via DEX\\r\\n        address callbackAddr;\\r\\n        // any data needed by callback\\r\\n        bytes callbackData;\\r\\n    }\\r\\n\\r\\n    struct BorrowTransferInstructions {\\r\\n        // amount of collateral sent\\r\\n        uint256 collSendAmount;\\r\\n        // sum of (i) protocol fee and (ii) transfer fees (if any) associated with sending any collateral to vault\\r\\n        uint256 expectedProtocolAndVaultTransferFee;\\r\\n        // transfer fees associated with sending any collateral to compartment (if used)\\r\\n        uint256 expectedCompartmentTransferFee;\\r\\n        // deadline to prevent stale transactions\\r\\n        uint256 deadline;\\r\\n        // slippage protection if oracle price is too loose\\r\\n        uint256 minLoanAmount;\\r\\n        // e.g., for one-click leverage\\r\\n        address callbackAddr;\\r\\n        // any data needed by callback\\r\\n        bytes callbackData;\\r\\n        // any data needed by myso token manager\\r\\n        bytes mysoTokenManagerData;\\r\\n    }\\r\\n\\r\\n    struct TransferInstructions {\\r\\n        // collateral token receiver\\r\\n        address collReceiver;\\r\\n        // effective upfront fee in collateral tokens (vault or compartment)\\r\\n        uint256 upfrontFee;\\r\\n    }\\r\\n\\r\\n    struct WrappedERC721TokenInfo {\\r\\n        // address of the ERC721_TOKEN\\r\\n        address tokenAddr;\\r\\n        // array of ERC721_TOKEN ids\\r\\n        uint256[] tokenIds;\\r\\n    }\\r\\n\\r\\n    struct WrappedERC20TokenInfo {\\r\\n        // token addresse\\r\\n        address tokenAddr;\\r\\n        // token amounts\\r\\n        uint256 tokenAmount;\\r\\n    }\\r\\n\\r\\n    struct OnChainQuoteInfo {\\r\\n        // hash of on chain quote\\r\\n        bytes32 quoteHash;\\r\\n        // valid until timestamp\\r\\n        uint256 validUntil;\\r\\n    }\\r\\n\\r\\n    enum WhitelistState {\\r\\n        // not whitelisted\\r\\n        NOT_WHITELISTED,\\r\\n        // can be used as loan or collateral token\\r\\n        ERC20_TOKEN,\\r\\n        // can be be used as oracle\\r\\n        ORACLE,\\r\\n        // can be used as compartment\\r\\n        COMPARTMENT,\\r\\n        // can be used as callback contract\\r\\n        CALLBACK,\\r\\n        // can be used as loan or collateral token, but if collateral then must\\r\\n        // be used in conjunction with a compartment (e.g., for stETH with possible\\r\\n        // negative rebase that could otherwise affect other borrowers in the vault)\\r\\n        ERC20_TOKEN_REQUIRING_COMPARTMENT,\\r\\n        // can be used in conjunction with an ERC721 wrapper\\r\\n        ERC721_TOKEN,\\r\\n        // can be used as ERC721 wrapper contract\\r\\n        ERC721WRAPPER,\\r\\n        // can be used as ERC20 wrapper contract\\r\\n        ERC20WRAPPER,\\r\\n        // can be used as MYSO token manager contract\\r\\n        MYSO_TOKEN_MANAGER,\\r\\n        // can be used as quote policy manager contract\\r\\n        QUOTE_POLICY_MANAGER\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/callbacks/BalancerDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {IBalancerAsset} from \\\"./IBalancerAsset.sol\\\";\\n\\nlibrary BalancerDataTypes {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IBalancerAsset assetIn;\\n        IBalancerAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/callbacks/IBalancerAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface IBalancerAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/callbacks/IBalancerVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport {BalancerDataTypes} from \\\"./BalancerDataTypes.sol\\\";\\n\\ninterface IBalancerVault {\\n    function swap(\\n        BalancerDataTypes.SingleSwap memory singleSwap,\\n        BalancerDataTypes.FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/callbacks/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/compartments/IBaseCompartment.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IBaseCompartment {\\r\\n    event Staked(uint256 gaugeIndex, address liqGaugeAddr, uint256 amount);\\r\\n\\r\\n    event Delegated(address delegator, address delegatee);\\r\\n\\r\\n    event UpdatedApprovedStaker(address staker, bool approvalState);\\r\\n\\r\\n    event UpdatedApprovedDelegator(address delegator, bool approvalState);\\r\\n\\r\\n    /**\\r\\n     * @notice function to initialize collateral compartment\\r\\n     * @dev factory creates clone and then initializes implementation contract\\r\\n     * @param vaultAddr address of vault\\r\\n     * @param loanId index of the loan\\r\\n     */\\r\\n    function initialize(address vaultAddr, uint256 loanId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to transfer some amount of collateral to borrower on repay\\r\\n     * @dev this function can only be called by vault and tranfers proportional amount\\r\\n     * of compartment collTokenBalance to borrower address. This needs use a proportion\\r\\n     * and not the amount to account for possible changes due to rewards accruing\\r\\n     * @param repayAmount amount of loan token to be repaid\\r\\n     * @param repayAmountLeft amount of loan token still outstanding\\r\\n     * @param reclaimCollAmount amount of collateral token to be reclaimed\\r\\n     * @param borrowerAddr address of borrower receiving transfer\\r\\n     * @param collTokenAddr address of collateral token being transferred\\r\\n     * @param callbackAddr address to send collateral to instead of borrower if using callback\\r\\n     */\\r\\n    function transferCollFromCompartment(\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        uint128 reclaimCollAmount,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to unlock all collateral left in compartment\\r\\n     * @dev this function can only be called by vault and returns all collateral to vault\\r\\n     * @param collTokenAddr pass in collToken addr to avoid callback reads gas cost\\r\\n     */\\r\\n    function unlockCollToVault(address collTokenAddr) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function returns the potentially reclaimable collateral token balance\\r\\n     * @param collTokenAddr address of collateral token for which reclaimable balance is being retrieved\\r\\n     * @dev depending on compartment implementation this could be simple balanceOf or eg staked balance call\\r\\n     */\\r\\n    function getReclaimableBalance(\\r\\n        address collTokenAddr\\r\\n    ) external view returns (uint256 reclaimableBalance);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/compartments/staking/ICurveStakingHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ICurveStakingHelper {\\n    /**\\n     * @notice Deposit `value` LP tokens, curve type take pools\\n     * @param value Number of tokens to deposit\\n     */\\n    function deposit(uint256 value) external;\\n\\n    /**\\n     * @notice Withdraw `value` LP tokens, curve type take pools\\n     * @dev This withdraw function is for gauges v1 and v2\\n     * @param value Number of tokens to withdraw\\n     */\\n    function withdraw(uint256 value) external;\\n\\n    /**\\n     * @notice Withdraw `value` LP tokens, curve type take pools\\n     * @dev This withdraw function is for gauges v3, v4 and v5\\n     * @param value Number of tokens to withdraw\\n     * @param withdrawRewards true if withdrawing rewards\\n     */\\n    function withdraw(uint256 value, bool withdrawRewards) external;\\n\\n    /**\\n     * @notice Claim all available reward tokens for msg.sender\\n     */\\n    function claim_rewards() external;\\n\\n    /**\\n     * @notice Mint allocated tokens for the caller based on a single gauge.\\n     * @param gaugeAddr address to get mintable amount from\\n     */\\n    function mint(address gaugeAddr) external;\\n\\n    /**\\n     * @notice returns lpToken address for gauge\\n     */\\n    function lp_token() external view returns (address);\\n\\n    /**\\n     * @notice returns reward token address for liquidity gauge by index\\n     * @param index index of particular token address in the reward token array\\n     */\\n    function reward_tokens(uint256 index) external view returns (address);\\n\\n    /**\\n     * @notice returns gauge address by index from gaugeController\\n     * @param index index in gauge controller array that returns liquidity gauge address\\n     */\\n    function gauges(uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/compartments/staking/IGLPStakingHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IGLPStakingHelper {\\n    /**\\n     * @notice Claim fee reward tokens\\n     * @param _receiver address which is recipient of the claim\\n     */\\n    function claim(address _receiver) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\n\\ninterface IAddressRegistry {\\n    event WhitelistStateUpdated(\\n        address[] indexed whitelistAddrs,\\n        DataTypesPeerToPeer.WhitelistState indexed whitelistState\\n    );\\n    event AllowedTokensForCompartmentUpdated(\\n        address indexed compartmentImpl,\\n        address[] tokens,\\n        bool isWhitelisted\\n    );\\n    event BorrowerWhitelistStatusClaimed(\\n        address indexed whitelistAuthority,\\n        address indexed borrower,\\n        uint256 whitelistedUntil\\n    );\\n    event BorrowerWhitelistUpdated(\\n        address indexed whitelistAuthority,\\n        address[] borrowers,\\n        uint256 whitelistedUntil\\n    );\\n    event CreatedWrappedTokenForERC721s(\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] wrappedTokensInfo,\\n        string name,\\n        string symbol,\\n        address newErc20Addr\\n    );\\n    event CreatedWrappedTokenForERC20s(\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] wrappedTokensInfo,\\n        string name,\\n        string symbol,\\n        address newERC20Addr\\n    );\\n\\n    /**\\n     * @notice initializes factory, gateway, and quote handler contracts\\n     * @param _lenderVaultFactory address of the factory for lender vaults\\n     * @param _borrowerGateway address of the gateway with which borrowers interact\\n     * @param _quoteHandler address of contract which handles quote logic\\n     */\\n    function initialize(\\n        address _lenderVaultFactory,\\n        address _borrowerGateway,\\n        address _quoteHandler\\n    ) external;\\n\\n    /**\\n     * @notice adds new lender vault to registry\\n     * @dev can only be called lender vault factory\\n     * @param addr address of new lender vault\\n     * @return numRegisteredVaults number of registered vaults\\n     */\\n    function addLenderVault(\\n        address addr\\n    ) external returns (uint256 numRegisteredVaults);\\n\\n    /**\\n     * @notice Allows user to claim whitelisted status\\n     * @param whitelistAuthority Address of whitelist authorithy\\n     * @param whitelistedUntil Timestamp until when user is whitelisted\\n     * @param compactSig Compact signature from whitelist authority\\n     * @param salt Salt to make signature unique\\n     */\\n    function claimBorrowerWhitelistStatus(\\n        address whitelistAuthority,\\n        uint256 whitelistedUntil,\\n        bytes calldata compactSig,\\n        bytes32 salt\\n    ) external;\\n\\n    /**\\n     * @notice Allows user to wrap (multiple) ERC721 into one ERC20\\n     * @param tokensToBeWrapped Array of WrappedERC721TokenInfo\\n     * @param name Name of the new wrapper token\\n     * @param symbol Symbol of the new wrapper token\\n     * @param mysoTokenManagerData Data to be passed to MysoTokenManager\\n     */\\n    function createWrappedTokenForERC721s(\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped,\\n        string calldata name,\\n        string calldata symbol,\\n        bytes calldata mysoTokenManagerData\\n    ) external;\\n\\n    /**\\n     * @notice Allows user to wrap multiple ERC20 into one ERC20\\n     * @param tokensToBeWrapped Array of WrappedERC20TokenInfo\\n     * @param name Name of the new wrapper token\\n     * @param symbol Symbol of the new wrapper token\\n     * @param mysoTokenManagerData Data to be passed to MysoTokenManager\\n     */\\n    function createWrappedTokenForERC20s(\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata tokensToBeWrapped,\\n        string calldata name,\\n        string calldata symbol,\\n        bytes calldata mysoTokenManagerData\\n    ) external;\\n\\n    /**\\n     * @notice Allows a whitelist authority to set the whitelistedUntil state for a given borrower\\n     * @dev Anyone can create their own whitelist, and lenders can decide if and which whitelist they want to use\\n     * @param borrowers Array of borrower addresses\\n     * @param whitelistedUntil Timestamp until which borrowers shall be whitelisted under given whitelist authority\\n     */\\n    function updateBorrowerWhitelist(\\n        address[] calldata borrowers,\\n        uint256 whitelistedUntil\\n    ) external;\\n\\n    /**\\n     * @notice Sets the whitelist state for a given address\\n     * @dev Can only be called by registry owner\\n     * @param addrs Addresses for which whitelist state shall be set\\n     * @param whitelistState The whitelist state to which addresses shall be set\\n     */\\n    function setWhitelistState(\\n        address[] calldata addrs,\\n        DataTypesPeerToPeer.WhitelistState whitelistState\\n    ) external;\\n\\n    /**\\n     * @notice Sets the allowed tokens for a given compartment implementation\\n     * @dev Can only be called by registry owner\\n     * @param compartmentImpl Compartment implementations for which allowed tokens shall be set\\n     * @param tokens List of tokens that shall be allowed for given compartment implementation\\n     * @param allowTokensForCompartment Boolean flag indicating whether tokens shall be allowed for compartment \\n     implementation\\n     */\\n    function setAllowedTokensForCompartment(\\n        address compartmentImpl,\\n        address[] calldata tokens,\\n        bool allowTokensForCompartment\\n    ) external;\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     * @param newOwner the proposed new owner address\\n     */\\n    function transferOwnership(address newOwner) external;\\n\\n    /**\\n     * @notice Returns boolean flag indicating whether the borrower has been whitelisted by whitelistAuthority\\n     * @param whitelistAuthority Addresses of the whitelist authority\\n     * @param borrower Addresses of the borrower\\n     * @return Boolean flag indicating whether the borrower has been whitelisted by whitelistAuthority\\n     */\\n    function isWhitelistedBorrower(\\n        address whitelistAuthority,\\n        address borrower\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns boolean flag indicating whether token is whitelisted\\n     * @param token Addresses of the given token to check\\n     * @return Boolean flag indicating whether the token is whitelisted\\n     */\\n    function isWhitelistedERC20(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the vault factory\\n     * @return Address of the vault factory contract\\n     */\\n    function lenderVaultFactory() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the borrower gateway\\n     * @return Address of the borrower gateway contract\\n     */\\n    function borrowerGateway() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the quote handler\\n     * @return Address of the quote handler contract\\n     */\\n    function quoteHandler() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the MYSO token manager\\n     * @return Address of the MYSO token manager contract\\n     */\\n    function mysoTokenManager() external view returns (address);\\n\\n    /**\\n     * @notice Returns boolean flag indicating whether given address is a registered vault\\n     * @param addr Address to check if it is a registered vault\\n     * @return Boolean flag indicating whether given address is a registered vault\\n     */\\n    function isRegisteredVault(address addr) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whitelist state for given address\\n     * @param addr Address to check whitelist state for\\n     * @return whitelistState Whitelist state for given address\\n     */\\n    function whitelistState(\\n        address addr\\n    ) external view returns (DataTypesPeerToPeer.WhitelistState whitelistState);\\n\\n    /**\\n     * @notice Returns an array of registered vault addresses\\n     * @return vaultAddrs The array of registered vault addresses\\n     */\\n    function registeredVaults()\\n        external\\n        view\\n        returns (address[] memory vaultAddrs);\\n\\n    /**\\n     * @notice Returns address of the owner\\n     * @return Address of the owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns address of the pending owner\\n     * @return Address of the pending owner\\n     */\\n    function pendingOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns boolean flag indicating whether given compartment implementation and token combination is whitelisted\\n     * @param compartmentImpl Address of compartment implementation to check if it is allowed for token\\n     * @param token Address of token to check if compartment implementation is allowed\\n     * @return isWhitelisted Boolean flag indicating whether compartment implementation is whitelisted for given token\\n     */\\n    function isWhitelistedCompartment(\\n        address compartmentImpl,\\n        address token\\n    ) external view returns (bool isWhitelisted);\\n\\n    /**\\n     * @notice Returns current number of vaults registered\\n     * @return numVaults Current number of vaults registered\\n     */\\n    function numRegisteredVaults() external view returns (uint256 numVaults);\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/IBorrowerGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface IBorrowerGateway {\\r\\n    event Borrowed(\\r\\n        address indexed vaultAddr,\\r\\n        address indexed borrower,\\r\\n        DataTypesPeerToPeer.Loan loan,\\r\\n        uint256 upfrontFee,\\r\\n        uint256 indexed loanId,\\r\\n        address callbackAddr,\\r\\n        bytes callbackData\\r\\n    );\\r\\n\\r\\n    event Repaid(\\r\\n        address indexed vaultAddr,\\r\\n        uint256 indexed loanId,\\r\\n        uint256 repayAmount\\r\\n    );\\r\\n\\r\\n    event ProtocolFeeSet(uint128[2] newFeeParams);\\r\\n\\r\\n    /**\\r\\n     * @notice function which allows a borrower to use an offChain quote to borrow\\r\\n     * @param lenderVault address of the vault whose owner(s) signed the offChain quote\\r\\n     * @param borrowInstructions data needed for borrow (see DataTypesPeerToPeer comments)\\r\\n     * @param offChainQuote quote data (see DataTypesPeerToPeer comments)\\r\\n     * @param quoteTuple quote data (see DataTypesPeerToPeer comments)\\r\\n     * @param proof array of bytes needed for merkle tree verification of quote\\r\\n     * @return loan data\\r\\n     */\\r\\n    function borrowWithOffChainQuote(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.OffChainQuote calldata offChainQuote,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple,\\r\\n        bytes32[] memory proof\\r\\n    ) external returns (DataTypesPeerToPeer.Loan memory);\\r\\n\\r\\n    /**\\r\\n     * @notice function which allows a borrower to use an onChain quote to borrow\\r\\n     * @param lenderVault address of the vault whose owner(s) enacted onChain quote\\r\\n     * @param borrowInstructions data needed for borrow (see DataTypesPeerToPeer comments)\\r\\n     * @param onChainQuote quote data (see DataTypesPeerToPeer comments)\\r\\n     * @param quoteTupleIdx index of quote tuple array\\r\\n     * @return loan data\\r\\n     */\\r\\n    function borrowWithOnChainQuote(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote,\\r\\n        uint256 quoteTupleIdx\\r\\n    ) external returns (DataTypesPeerToPeer.Loan memory);\\r\\n\\r\\n    /**\\r\\n     * @notice function which allows a borrower to repay a loan\\r\\n     * @param loanRepayInstructions data needed for loan repay (see DataTypesPeerToPeer comments)\\r\\n     * @param vaultAddr address of the vault in which loan was taken out\\r\\n     */\\r\\n    function repay(\\r\\n        DataTypesPeerToPeer.LoanRepayInstructions\\r\\n            calldata loanRepayInstructions,\\r\\n        address vaultAddr\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function which allows owner to set new protocol fee params\\r\\n     * @dev protocolFee params are in units of BASE constant (10**18) and variable portion is annualized\\r\\n     * @param _newFeeParams new base fee (constant) and fee slope (variable) in BASE\\r\\n     */\\r\\n    function setProtocolFeeParams(uint128[2] calldata _newFeeParams) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function returns address registry\\r\\n     * @return address of registry\\r\\n     */\\r\\n    function addressRegistry() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns protocol fee\\r\\n     * @return protocolFeeParams protocol fee Params in Base\\r\\n     */\\r\\n    function getProtocolFeeParams()\\r\\n        external\\r\\n        view\\r\\n        returns (uint128[2] memory protocolFeeParams);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/ILenderVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface ILenderVaultFactory {\\r\\n    event NewVaultCreated(\\r\\n        address indexed newLenderVaultAddr,\\r\\n        address vaultOwner,\\r\\n        uint256 numRegisteredVaults\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice function creates new lender vaults\\r\\n     * @param salt salt used for deterministic cloning\\r\\n     * @return newLenderVaultAddr address of created vault\\r\\n     */\\r\\n    function createVault(\\r\\n        bytes32 salt\\r\\n    ) external returns (address newLenderVaultAddr);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns address registry\\r\\n     * @return address of registry\\r\\n     */\\r\\n    function addressRegistry() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns address of lender vault implementation contract\\r\\n     * @return address of lender vault implementation\\r\\n     */\\r\\n    function lenderVaultImpl() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/ILenderVaultImpl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface ILenderVaultImpl {\\r\\n    event AddedSigners(address[] _signers);\\r\\n\\r\\n    event MinNumberOfSignersSet(uint256 minNumSigners);\\r\\n\\r\\n    event RemovedSigner(\\r\\n        address signerRemoved,\\r\\n        uint256 signerIdx,\\r\\n        address signerMovedFromEnd\\r\\n    );\\r\\n\\r\\n    event CollateralUnlocked(\\r\\n        address indexed vaultOwner,\\r\\n        address indexed collToken,\\r\\n        uint256[] loanIds,\\r\\n        uint256 amountUnlocked\\r\\n    );\\r\\n\\r\\n    event QuoteProcessed(\\r\\n        uint256 netPledgeAmount,\\r\\n        DataTypesPeerToPeer.TransferInstructions transferInstructions\\r\\n    );\\r\\n\\r\\n    event Withdrew(address indexed tokenAddr, uint256 withdrawAmount);\\r\\n\\r\\n    event CircuitBreakerUpdated(\\r\\n        address indexed newCircuitBreaker,\\r\\n        address indexed oldCircuitBreaker\\r\\n    );\\r\\n\\r\\n    event ReverseCircuitBreakerUpdated(\\r\\n        address indexed newReverseCircuitBreaker,\\r\\n        address indexed oldReverseCircuitBreaker\\r\\n    );\\r\\n\\r\\n    event OnChainQuotingDelegateUpdated(\\r\\n        address indexed newOnChainQuotingDelegate,\\r\\n        address indexed oldOnChainQuotingDelegate\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice function to initialize lender vault\\r\\n     * @dev factory creates clone and then initializes the vault\\r\\n     * @param vaultOwner address of vault owner\\r\\n     * @param addressRegistry registry address\\r\\n     */\\r\\n    function initialize(address vaultOwner, address addressRegistry) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to unlock defaulted collateral\\r\\n     * @dev only loans with same collateral token can be unlocked in one call\\r\\n     * function will revert if mismatch in coll token to a loan.collToken.\\r\\n     * @param collToken address of the collateral token\\r\\n     * @param _loanIds array of indices of the loans to unlock\\r\\n     */\\r\\n    function unlockCollateral(\\r\\n        address collToken,\\r\\n        uint256[] calldata _loanIds\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to update loan info on a reoay\\r\\n     * @dev only borrower gateway can call this function\\r\\n     * loanId is needed by vault to store updated loan info\\r\\n     * @param repayAmount amount of loan repaid\\r\\n     * @param loanId index of loan in loans array\\r\\n     * @param collAmount amount of collateral to unlock\\r\\n     * @param noCompartment boolean flag indicating whether loan has no compartment\\r\\n     * @param collToken address of the collateral token\\r\\n     */\\r\\n    function updateLoanInfo(\\r\\n        uint128 repayAmount,\\r\\n        uint256 loanId,\\r\\n        uint128 collAmount,\\r\\n        bool noCompartment,\\r\\n        address collToken\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to processQuote on a borrow\\r\\n     * @dev only borrower gateway can call this function\\r\\n     * @param borrower address of the borrower\\r\\n     * @param borrowInstructions struct containing all info for borrow (see DataTypesPeerToPeer.sol notes)\\r\\n     * @param generalQuoteInfo struct containing quote info (see Datatypes.sol notes)\\r\\n     * @param quoteTuple struct containing specific quote tuple info (see DataTypesPeerToPeer.sol notes)\\r\\n     * @return loan loan information after processing the quote\\r\\n     * @return loanId index of loans in the loans array\\r\\n     * @return transferInstructions struct containing transfer instruction info (see DataTypesPeerToPeer.sol notes)\\r\\n     */\\r\\n    function processQuote(\\r\\n        address borrower,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            DataTypesPeerToPeer.Loan calldata loan,\\r\\n            uint256 loanId,\\r\\n            DataTypesPeerToPeer.TransferInstructions memory transferInstructions\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice function to withdraw a token from a vault\\r\\n     * @dev only vault owner can withdraw\\r\\n     * @param token address of the token to withdraw\\r\\n     * @param amount amount of token to withdraw\\r\\n     */\\r\\n    function withdraw(address token, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to transfer token from vault\\r\\n     * @dev only borrow gateway can call this function\\r\\n     * @param token address of the token to transfer\\r\\n     * @param recipient address which receives the tokens\\r\\n     * @param amount amount of token to transfer\\r\\n     */\\r\\n    function transferTo(\\r\\n        address token,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to transfer token from a compartment\\r\\n     * @dev only borrow gateway can call this function, if callbackAddr, then\\r\\n     * the collateral will be transferred to the callback address\\r\\n     * @param repayAmount amount of loan token to be repaid\\r\\n     * @param repayAmountLeft amount of loan token still outstanding\\r\\n     * @param reclaimCollAmount amount of collateral to be reclaimed\\r\\n     * @param borrowerAddr address of the borrower\\r\\n     * @param collTokenAddr address of the coll token to transfer to compartment\\r\\n     * @param callbackAddr address of callback\\r\\n     * @param collTokenCompartmentAddr address of the coll token compartment\\r\\n     */\\r\\n    function transferCollFromCompartment(\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        uint128 reclaimCollAmount,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr,\\r\\n        address collTokenCompartmentAddr\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to set minimum number of signers required for an offchain quote\\r\\n     * @dev this function allows a multi-sig quorum to sign a quote offchain\\r\\n     * @param _minNumOfSigners minimum number of signatures borrower needs to provide\\r\\n     */\\r\\n    function setMinNumOfSigners(uint256 _minNumOfSigners) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to add a signer\\r\\n     * @dev this function only can be called by vault owner\\r\\n     * @param _signers array of signers to add\\r\\n     */\\r\\n    function addSigners(address[] calldata _signers) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to remove a signer\\r\\n     * @dev this function only can be called by vault owner\\r\\n     * @param signer address of signer to be removed\\r\\n     * @param signerIdx index of the signers array at which signer resides\\r\\n     */\\r\\n    function removeSigner(address signer, uint256 signerIdx) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to set a circuit breaker\\r\\n     * @dev the circuit breaker (and vault owner) can pause all loan offers;\\r\\n     * note: circuit breaker and reverse circuit breaker can be the same account\\r\\n     * @param circuitBreaker address of the circuit breaker\\r\\n     */\\r\\n    function setCircuitBreaker(address circuitBreaker) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to set a reverse circuit breaker\\r\\n     * @dev the reverse circuit breaker (and vault owner) can unpause all loan offers;\\r\\n     * note: circuit breaker and reverse circuit breaker can be the same account\\r\\n     * @param reverseCircuitBreaker address of the reverse circuit breaker\\r\\n     */\\r\\n    function setReverseCircuitBreaker(address reverseCircuitBreaker) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to set a delegate for on chain quoting\\r\\n     * @dev the quote handler (and vault owner) can add, delete and update on chain quotes\\r\\n     * @param onChainQuotingDelegate address of the delegate\\r\\n     */\\r\\n    function setOnChainQuotingDelegate(address onChainQuotingDelegate) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to pause all quotes from lendervault\\r\\n     * @dev only vault owner and circuit breaker can pause quotes\\r\\n     */\\r\\n    function pauseQuotes() external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to unpause all quotes from lendervault\\r\\n     * @dev only vault owner and reverse circuit breaker can unpause quotes again\\r\\n     */\\r\\n    function unpauseQuotes() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\r\\n     * Can only be called by the current owner.\\r\\n     * @param newOwner the proposed new owner address\\r\\n     */\\r\\n    function transferOwnership(address newOwner) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to retrieve loan from loans array in vault\\r\\n     * @dev this function reverts on invalid index\\r\\n     * @param index index of loan\\r\\n     * @return loan loan stored at that index in vault\\r\\n     */\\r\\n    function loan(\\r\\n        uint256 index\\r\\n    ) external view returns (DataTypesPeerToPeer.Loan memory loan);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return owner address\\r\\n     * @return owner address\\r\\n     */\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns address of the pending owner\\r\\n     * @return Address of the pending owner\\r\\n     */\\r\\n    function pendingOwner() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return the total number of signers\\r\\n     * @return number of signers\\r\\n     */\\r\\n    function totalNumSigners() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return unlocked token balances\\r\\n     * @param tokens array of token addresses\\r\\n     * @return balances the vault balances of the token addresses\\r\\n     * @return _lockedAmounts the vault locked amounts of the token addresses\\r\\n     */\\r\\n    function getTokenBalancesAndLockedAmounts(\\r\\n        address[] calldata tokens\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory balances, uint256[] memory _lockedAmounts);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return address of registry\\r\\n     * @return registry address\\r\\n     */\\r\\n    function addressRegistry() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return address of the circuit breaker\\r\\n     * @return circuit breaker address\\r\\n     */\\r\\n    function circuitBreaker() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return address of the reverse circuit breaker\\r\\n     * @return reverse circuit breaker address\\r\\n     */\\r\\n    function reverseCircuitBreaker() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return address of the delegate for on chain quoting\\r\\n     * @return approved delegate address\\r\\n     */\\r\\n    function onChainQuotingDelegate() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns signer at given index\\r\\n     * @param index of the signers array\\r\\n     * @return signer address\\r\\n     */\\r\\n    function signers(uint256 index) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns minimum number of signers\\r\\n     * @return minimum number of signers\\r\\n     */\\r\\n    function minNumOfSigners() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns if address is a signer\\r\\n     * @return true, if a signer, else false\\r\\n     */\\r\\n    function isSigner(address signer) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns if withdraw mutex is activated\\r\\n     * @return true, if withdraw already called, else false\\r\\n     */\\r\\n    function withdrawEntered() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns current locked amounts of given token\\r\\n     * @param token address of the token\\r\\n     * @return amount of token locked\\r\\n     */\\r\\n    function lockedAmounts(address token) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns total number of loans\\r\\n     * @return total number of loans\\r\\n     */\\r\\n    function totalNumLoans() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IOracle {\\r\\n    /**\\r\\n     * @notice function checks oracle validity and calculates collTokenPriceInLoanToken\\r\\n     * @param collToken address of coll token\\r\\n     * @param loanToken address of loan token\\r\\n     * @return collTokenPriceInLoanToken collateral price denominated in loan token\\r\\n     */\\r\\n    function getPrice(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view returns (uint256 collTokenPriceInLoanToken);\\r\\n\\r\\n    /**\\r\\n     * @notice function checks oracle validity and retrieves prices in base currency unit\\r\\n     * @param collToken address of coll token\\r\\n     * @param loanToken address of loan token\\r\\n     * @return collTokenPriceRaw and loanTokenPriceRaw denominated in base currency unit\\r\\n     */\\r\\n    function getRawPrices(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 collTokenPriceRaw, uint256 loanTokenPriceRaw);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/IQuoteHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface IQuoteHandler {\\r\\n    event OnChainQuoteAdded(\\r\\n        address indexed lenderVault,\\r\\n        DataTypesPeerToPeer.OnChainQuote onChainQuote,\\r\\n        bytes32 indexed onChainQuoteHash\\r\\n    );\\r\\n\\r\\n    event OnChainQuoteDeleted(\\r\\n        address indexed lenderVault,\\r\\n        bytes32 indexed onChainQuoteHash\\r\\n    );\\r\\n\\r\\n    event OnChainQuoteInvalidated(\\r\\n        address indexed lenderVault,\\r\\n        bytes32 indexed onChainQuoteHash\\r\\n    );\\r\\n    event OffChainQuoteNonceIncremented(\\r\\n        address indexed lenderVault,\\r\\n        uint256 newNonce\\r\\n    );\\r\\n    event OffChainQuoteInvalidated(\\r\\n        address indexed lenderVault,\\r\\n        bytes32 indexed offChainQuoteHash\\r\\n    );\\r\\n    event OnChainQuoteUsed(\\r\\n        address indexed lenderVault,\\r\\n        bytes32 indexed onChainQuoteHash,\\r\\n        uint256 indexed toBeRegisteredLoanId,\\r\\n        uint256 quoteTupleIdx\\r\\n    );\\r\\n    event OffChainQuoteUsed(\\r\\n        address indexed lenderVault,\\r\\n        bytes32 indexed offChainQuoteHash,\\r\\n        uint256 indexed toBeRegisteredLoanId,\\r\\n        DataTypesPeerToPeer.QuoteTuple quoteTuple\\r\\n    );\\r\\n    event QuotePolicyManagerUpdated(\\r\\n        address indexed lenderVault,\\r\\n        address indexed newPolicyManagerAddress\\r\\n    );\\r\\n    event OnChainQuotePublished(\\r\\n        DataTypesPeerToPeer.OnChainQuote onChainQuote,\\r\\n        bytes32 indexed onChainQuoteHash,\\r\\n        address indexed proposer\\r\\n    );\\r\\n    event OnChainQuoteCopied(\\r\\n        address indexed lenderVault,\\r\\n        bytes32 indexed onChainQuoteHash\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice function adds on chain quote\\r\\n     * @dev function can only be called by vault owner or on chain quote delegate\\r\\n     * @param lenderVault address of the vault adding quote\\r\\n     * @param onChainQuote data for the onChain quote (See notes in DataTypesPeerToPeer.sol)\\r\\n     */\\r\\n    function addOnChainQuote(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function updates on chain quote\\r\\n     * @dev function can only be called by vault owner or on chain quote delegate\\r\\n     * @param lenderVault address of the vault updating quote\\r\\n     * @param oldOnChainQuoteHash quote hash for the old onChain quote marked for deletion\\r\\n     * @param newOnChainQuote data for the new onChain quote (See notes in DataTypesPeerToPeer.sol)\\r\\n     */\\r\\n    function updateOnChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 oldOnChainQuoteHash,\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata newOnChainQuote\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function deletes on chain quote\\r\\n     * @dev function can only be called by vault owner or on chain quote delegate\\r\\n     * @param lenderVault address of the vault deleting\\r\\n     * @param onChainQuoteHash quote hash for the onChain quote marked for deletion\\r\\n     */\\r\\n    function deleteOnChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 onChainQuoteHash\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to copy a published on chain quote\\r\\n     * @dev function can only be called by vault owner or on chain quote delegate\\r\\n     * @param lenderVault address of the vault approving\\r\\n     * @param onChainQuoteHash quote hash of a published onChain quote\\r\\n     */\\r\\n    function copyPublishedOnChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 onChainQuoteHash\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to publish an on chain quote\\r\\n     * @dev function can be called by anyone and used by any vault\\r\\n     * @param onChainQuote data for the onChain quote (See notes in DataTypesPeerToPeer.sol)\\r\\n     */\\r\\n    function publishOnChainQuote(\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function increments the nonce for a vault\\r\\n     * @dev function can only be called by vault owner\\r\\n     * incrementing the nonce can bulk invalidate any\\r\\n     * off chain quotes with that nonce in one txn\\r\\n     * @param lenderVault address of the vault\\r\\n     */\\r\\n    function incrementOffChainQuoteNonce(address lenderVault) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function invalidates off chain quote\\r\\n     * @dev function can only be called by vault owner\\r\\n     * this function invalidates one specific quote\\r\\n     * @param lenderVault address of the vault\\r\\n     * @param offChainQuoteHash hash of the off chain quote to be invalidated\\r\\n     */\\r\\n    function invalidateOffChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 offChainQuoteHash\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function performs checks on quote and, if valid, updates quotehandler's state\\r\\n     * @dev function can only be called by borrowerGateway\\r\\n     * @param borrower address of borrower\\r\\n     * @param lenderVault address of the vault\\r\\n     * @param quoteTupleIdx index of the quote tuple in the vault's quote array\\r\\n     * @param onChainQuote data for the onChain quote (See notes in DataTypesPeerToPeer.sol)\\r\\n     */\\r\\n    function checkAndRegisterOnChainQuote(\\r\\n        address borrower,\\r\\n        address lenderVault,\\r\\n        uint256 quoteTupleIdx,\\r\\n        DataTypesPeerToPeer.OnChainQuote memory onChainQuote\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function performs checks on quote and, if valid, updates quotehandler's state\\r\\n     * @dev function can only be called by borrowerGateway\\r\\n     * @param borrower address of borrower\\r\\n     * @param lenderVault address of the vault\\r\\n     * @param offChainQuote data for the offChain quote (See notes in DataTypesPeerToPeer.sol)\\r\\n     * @param quoteTuple quote data (see notes in DataTypesPeerToPeer.sol)\\r\\n     * @param proof array of bytes needed to verify merkle proof\\r\\n     */\\r\\n    function checkAndRegisterOffChainQuote(\\r\\n        address borrower,\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.OffChainQuote calldata offChainQuote,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple,\\r\\n        bytes32[] memory proof\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to update the quote policy manager for a vault\\r\\n     * @param lenderVault address for which quote policy manager is being updated\\r\\n     * @param newPolicyManagerAddress address of new quote policy manager\\r\\n     * @dev function can only be called by vault owner\\r\\n     */\\r\\n    function updateQuotePolicyManagerForVault(\\r\\n        address lenderVault,\\r\\n        address newPolicyManagerAddress\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice function to return address of registry\\r\\n     * @return registry address\\r\\n     */\\r\\n    function addressRegistry() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function to return the current nonce for offchain quotes\\r\\n     * @param lender address for which nonce is being retrieved\\r\\n     * @return current value of nonce\\r\\n     */\\r\\n    function offChainQuoteNonce(address lender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns if offchain quote hash is invalidated\\r\\n     * @param lenderVault address of vault\\r\\n     * @param hashToCheck hash of the offchain quote\\r\\n     * @return true if invalidated, else false\\r\\n     */\\r\\n    function offChainQuoteIsInvalidated(\\r\\n        address lenderVault,\\r\\n        bytes32 hashToCheck\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns if hash is for an on chain quote\\r\\n     * @param lenderVault address of vault\\r\\n     * @param hashToCheck hash of the on chain quote\\r\\n     * @return true if hash belongs to a valid on-chain quote, else false\\r\\n     */\\r\\n    function isOnChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 hashToCheck\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns if hash belongs to a published on chain quote\\r\\n     * @param hashToCheck hash of the on chain quote\\r\\n     * @return true if hash belongs to a published on-chain quote, else false\\r\\n     */\\r\\n    function isPublishedOnChainQuote(\\r\\n        bytes32 hashToCheck\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns valid until timestamp of the published on-chain quote\\r\\n     * @param hashToCheck hash of the on chain quote\\r\\n     * @return valid until timestamp of the published on-chain quote\\r\\n     */\\r\\n    function publishedOnChainQuoteValidUntil(\\r\\n        bytes32 hashToCheck\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns the address of the policy manager for a vault\\r\\n     * @param lenderVault address of vault\\r\\n     * @return address of quote policy manager for vault\\r\\n     * @dev if policy manager address changes in registry, this function will still return the old address\\r\\n     * unless and until the vault owner calls updateQuotePolicyManagerForVault\\r\\n     */\\r\\n    function quotePolicyManagerForVault(\\r\\n        address lenderVault\\r\\n    ) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns element of on-chain history\\r\\n     * @param lenderVault address of vault\\r\\n     * @return element of on-chain quote history\\r\\n     */\\r\\n    function getOnChainQuoteHistory(\\r\\n        address lenderVault,\\r\\n        uint256 idx\\r\\n    ) external view returns (DataTypesPeerToPeer.OnChainQuoteInfo memory);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns array of structs containing the on-chain quote hash and validUntil timestamp\\r\\n     * @param lenderVault address of vault\\r\\n     * @param startIdx starting index from on chain quote history array\\r\\n     * @param endIdx ending index of on chain quote history array (non-inclusive)\\r\\n     * @return array of quote hash and validUntil data for on-chain quote history of a vault\\r\\n     */\\r\\n    function getOnChainQuoteHistorySlice(\\r\\n        address lenderVault,\\r\\n        uint256 startIdx,\\r\\n        uint256 endIdx\\r\\n    ) external view returns (DataTypesPeerToPeer.OnChainQuoteInfo[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice function returns the number of on-chain quotes that were added or updated\\r\\n     * @param lenderVault address of vault\\r\\n     * @return number of on-chain quotes that were added or updated\\r\\n     */\\r\\n    function getOnChainQuoteHistoryLength(\\r\\n        address lenderVault\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/IVaultCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\n\\ninterface IVaultCallback {\\n    /**\\n     * @notice function which handles borrow side callback\\n     * @param loan loan data passed to the callback\\n     * @param data any extra info needed for the callback functionality\\n     */\\n    function borrowCallback(\\n        DataTypesPeerToPeer.Loan calldata loan,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice function which handles repay side callback\\n     * @param loan loan data passed to the callback\\n     * @param data any extra info needed for the callback functionality\\n     */\\n    function repayCallback(\\n        DataTypesPeerToPeer.Loan calldata loan,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/oracles/chainlink/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/oracles/IDSETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IDSETH {\\r\\n    /**\\r\\n     * @notice gets addresses of all components\\r\\n     * @return array of token addresses\\r\\n     */\\r\\n    function getComponents() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice checks if token is a component\\r\\n     * @param _token token address\\r\\n     * @return true if token is a component\\r\\n     */\\r\\n    function isComponent(address _token) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice gets the unit of token used in price calculation\\r\\n     * @param _token token address\\r\\n     * @return unit of token\\r\\n     */\\r\\n    function getTotalComponentRealUnits(\\r\\n        address _token\\r\\n    ) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/oracles/IOlympus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IOlympus {\\n    /**\\n     * @notice index is used to convert from sOhm to gOhm\\n     */\\n    function index() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/oracles/IUniV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IUniV2 {\\n    /**\\n     * @notice returns reserves of uni v2 pool\\n     * @return token0 reserves\\n     * @return token1 reserves\\n     * @return timestamp\\n     */\\n    function getReserves() external view returns (uint112, uint112, uint32);\\n\\n    /**\\n     * @notice token0 address of pool\\n     */\\n    function token0() external view returns (address);\\n\\n    /**\\n     * @notice token1 address of pool\\n     */\\n    function token1() external view returns (address);\\n\\n    /**\\n     * @notice totalSupply of the lp token\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice decimals of the lp token\\n     */\\n    function decimals() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/oracles/uniswap/ITwapGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface ITwapGetter {\\r\\n    /**\\r\\n     * @dev returns the twap for the given uniswap v3 pool\\r\\n     * @param inToken Address of the In Token\\r\\n     * @param outToken Address of the Out Token\\r\\n     * @param twapInterval Time interval for the twap\\r\\n     * @param uniswapV3Pool Address of the Uniswap V3 Pool\\r\\n     * @return twap The twap (in out token) for the given uniswap v3 pool\\r\\n     */\\r\\n    function getTwap(\\r\\n        address inToken,\\r\\n        address outToken,\\r\\n        uint32 twapInterval,\\r\\n        address uniswapV3Pool\\r\\n    ) external view returns (uint256 twap);\\r\\n\\r\\n    /**\\r\\n     * @dev returns the sqrt twap for the given uniswap v3 pool\\r\\n     * @param uniswapV3Pool Address of the Uniswap V3 Pool\\r\\n     * @param twapInterval Time interval for the twap\\r\\n     * @return sqrtTwapPriceX96 The sqrt twap for the given uniswap v3 pool\\r\\n     */\\r\\n    function getSqrtTwapX96(\\r\\n        address uniswapV3Pool,\\r\\n        uint32 twapInterval\\r\\n    ) external view returns (uint160 sqrtTwapPriceX96);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/policyManagers/IBasicQuotePolicyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesBasicPolicies} from \\\"../../policyManagers/DataTypesBasicPolicies.sol\\\";\\r\\nimport {IQuotePolicyManager} from \\\"./IQuotePolicyManager.sol\\\";\\r\\n\\r\\ninterface IBasicQuotePolicyManager is IQuotePolicyManager {\\r\\n    /**\\r\\n     * @notice Retrieve the global quoting policy for a specific lender's vault\\r\\n     * @param lenderVault The address of the lender's vault\\r\\n     * @return The global quoting policy for the specified lender's vault\\r\\n     */\\r\\n    function globalQuotingPolicy(\\r\\n        address lenderVault\\r\\n    ) external view returns (DataTypesBasicPolicies.GlobalPolicy memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieve the quoting policy for a specific lending pair involving collateral and loan tokens\\r\\n     * @param lenderVault The address of the lender's vault\\r\\n     * @param collToken The address of the collateral token\\r\\n     * @param loanToken The address of the loan token\\r\\n     * @return The quoting policy for the specified lender's vault, collateral, and loan tokens\\r\\n     */\\r\\n    function pairQuotingPolicy(\\r\\n        address lenderVault,\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view returns (DataTypesBasicPolicies.PairPolicy memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if there is a global quoting policy for a specific lender's vault\\r\\n     * @param lenderVault The address of the lender's vault\\r\\n     * @return True if there is a global quoting policy, false otherwise\\r\\n     */\\r\\n    function hasGlobalQuotingPolicy(\\r\\n        address lenderVault\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Check if there is a quoting policy for a specific lending pair involving collateral and loan tokens\\r\\n     * @param lenderVault The address of the lender's vault\\r\\n     * @param collToken The address of the collateral token\\r\\n     * @param loanToken The address of the loan token\\r\\n     * @return True if there is a quoting policy for the specified lender's vault, collateral, and loan tokens, false otherwise\\r\\n     */\\r\\n    function hasPairQuotingPolicy(\\r\\n        address lenderVault,\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/policyManagers/IQuotePolicyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../../DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface IQuotePolicyManager {\\r\\n    event PairPolicySet(\\r\\n        address indexed lenderVault,\\r\\n        address indexed collToken,\\r\\n        address indexed loanToken,\\r\\n        bytes singlePolicyData\\r\\n    );\\r\\n    event GlobalPolicySet(address indexed lenderVault, bytes globalPolicyData);\\r\\n\\r\\n    /**\\r\\n     * @notice sets the global policy\\r\\n     * @param lenderVault Address of the lender vault\\r\\n     * @param globalPolicyData Global policy data to be set\\r\\n     */\\r\\n    function setGlobalPolicy(\\r\\n        address lenderVault,\\r\\n        bytes calldata globalPolicyData\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice sets the policy for a pair of tokens\\r\\n     * @param lenderVault Address of the lender vault\\r\\n     * @param collToken Address of the collateral token\\r\\n     * @param loanToken Address of the loan token\\r\\n     * @param pairPolicyData Pair policy data to be set\\r\\n     */\\r\\n    function setPairPolicy(\\r\\n        address lenderVault,\\r\\n        address collToken,\\r\\n        address loanToken,\\r\\n        bytes calldata pairPolicyData\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a borrow is allowed\\r\\n     * @param borrower Address of the borrower\\r\\n     * @param lenderVault Address of the lender vault\\r\\n     * @param generalQuoteInfo General quote info (see DataTypesPeerToPeer.sol)\\r\\n     * @param quoteTuple Quote tuple (see DataTypesPeerToPeer.sol)\\r\\n     * @return _isAllowed Flag to indicate if the borrow is allowed\\r\\n     * @return minNumOfSignersOverwrite Overwrite of minimum number of signers (if zero ignored in quote handler)\\r\\n     */\\r\\n    function isAllowed(\\r\\n        address borrower,\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple\\r\\n    ) external view returns (bool _isAllowed, uint256 minNumOfSignersOverwrite);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address registry\\r\\n     * @return Address of the address registry\\r\\n     */\\r\\n    function addressRegistry() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/wrappers/ERC20/IERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../../../../peer-to-peer/DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface IERC20Wrapper {\\r\\n    event ERC20WrapperCreated(\\r\\n        address indexed newErc20Addr,\\r\\n        address indexed minter,\\r\\n        uint256 numTokensCreated,\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] wrappedTokensInfo\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Allows user to wrap multiple ERC20 into one ERC20\\r\\n     * @param minter Address of the minter\\r\\n     * @param tokensToBeWrapped Array of WrappedERC20TokenInfo\\r\\n     * @param name Name of the new wrapper token\\r\\n     * @param symbol Symbol of the new wrapper token\\r\\n     */\\r\\n    function createWrappedToken(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata tokensToBeWrapped,\\r\\n        string calldata name,\\r\\n        string calldata symbol\\r\\n    ) external returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns address registry\\r\\n     * @return address registry\\r\\n     */\\r\\n    function addressRegistry() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns implementation contract address\\r\\n     * @return implementation contract address\\r\\n     */\\r\\n    function wrappedErc20Impl() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns array of tokens created\\r\\n     * @return array of tokens created\\r\\n     */\\r\\n    function allTokensCreated() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of a token created by index\\r\\n     * @param idx the index of the token\\r\\n     * @return address of the token created\\r\\n     */\\r\\n    function tokensCreated(uint256 idx) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns number of tokens created\\r\\n     * @return number of tokens created\\r\\n     */\\r\\n    function numTokensCreated() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/wrappers/ERC20/IWrappedERC20Impl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../../../DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface IWrappedERC20Impl {\\r\\n    event Redeemed(address indexed redeemer, address recipient, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the ERC20 wrapper\\r\\n     * @param minter Address of the minter\\r\\n     * @param wrappedTokens Array of WrappedERC20TokenInfo\\r\\n     * @param totalInitialSupply Total initial supply of the wrapped token basket\\r\\n     * @param name Name of the new wrapper token\\r\\n     * @param symbol Symbol of the new wrapper token\\r\\n     */\\r\\n    function initialize(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata wrappedTokens,\\r\\n        uint256 totalInitialSupply,\\r\\n        string calldata name,\\r\\n        string calldata symbol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to redeem wrapped token for underlying tokens\\r\\n     * @param account Account that is redeeming wrapped tokens\\r\\n     * @param recipient Account that is receiving underlying tokens\\r\\n     * @param amount Amount of wrapped tokens to be redeemed\\r\\n     */\\r\\n    function redeem(\\r\\n        address account,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to mint wrapped tokens for underlying token\\r\\n     * @dev This function is only callable when the wrapped token has only one underlying token\\r\\n     * @param recipient Account that is receiving the minted tokens\\r\\n     * @param amount Amount of wrapped tokens to be minted\\r\\n     * @param expectedTransferFee Expected transfer fee for the minted tokens (e.g. wrapping PAXG)\\r\\n     */\\r\\n    function mint(\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 expectedTransferFee\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns wrapped token addresses\\r\\n     * @return wrappedTokens array of wrapped token addresses\\r\\n     */\\r\\n    function getWrappedTokensInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] calldata wrappedTokens);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether wrapped token is IOU\\r\\n     * @return boolean flag indicating whether wrapped token is IOU\\r\\n     */\\r\\n    function isIOU() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/wrappers/ERC721/IERC721Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../../../DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface IERC721Wrapper {\\r\\n    event ERC721WrapperCreated(\\r\\n        address indexed newErc20Addr,\\r\\n        address indexed minter,\\r\\n        uint256 numTokensCreated,\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] wrappedTokensInfo\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Allows user to wrap (multiple) ERC721 into one ERC20\\r\\n     * @param minter Address of the minter\\r\\n     * @param tokensToBeWrapped Array of WrappedERC721TokenInfo\\r\\n     * @param name Name of the new wrapper token\\r\\n     * @param symbol Symbol of the new wrapper token\\r\\n     */\\r\\n    function createWrappedToken(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped,\\r\\n        string calldata name,\\r\\n        string calldata symbol\\r\\n    ) external returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns address registry\\r\\n     * @return address registry\\r\\n     */\\r\\n    function addressRegistry() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns implementation contract address\\r\\n     * @return implementation contract address\\r\\n     */\\r\\n    function wrappedErc721Impl() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns array of tokens created\\r\\n     * @return array of tokens created\\r\\n     */\\r\\n    function allTokensCreated() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of a token created by index\\r\\n     * @param idx the index of the token\\r\\n     * @return address of the token created\\r\\n     */\\r\\n    function tokensCreated(uint256 idx) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns number of tokens created\\r\\n     * @return number of tokens created\\r\\n     */\\r\\n    function numTokensCreated() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/interfaces/wrappers/ERC721/IWrappedERC721Impl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {DataTypesPeerToPeer} from \\\"../../../DataTypesPeerToPeer.sol\\\";\\r\\n\\r\\ninterface IWrappedERC721Impl {\\r\\n    event Redeemed(address indexed redeemer, address recipient);\\r\\n\\r\\n    event TransferFromWrappedTokenFailed(\\r\\n        address indexed tokenAddr,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n\\r\\n    event TokenSweepAttempted(address indexed tokenAddr, uint256[] tokenIds);\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the ERC20 wrapper\\r\\n     * @param minter Address of the minter\\r\\n     * @param tokensToBeWrapped Array of token info (address and ids array) for the tokens to be wrapped\\r\\n     * @param name Name of the new wrapper token\\r\\n     * @param symbol Symbol of the new wrapper token\\r\\n     */\\r\\n    function initialize(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped,\\r\\n        string calldata name,\\r\\n        string calldata symbol\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers any stuck wrapped tokens to the redeemer\\r\\n     * @param tokenAddr Address of the token to be swept\\r\\n     * @param tokenIds Array of token ids to be swept\\r\\n     */\\r\\n    function sweepTokensLeftAfterRedeem(\\r\\n        address tokenAddr,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to redeem wrapped token for underlying tokens\\r\\n     * @param account Account that is redeeming wrapped tokens\\r\\n     * @param recipient Account that is receiving underlying tokens\\r\\n     */\\r\\n    function redeem(address account, address recipient) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to remint wrapped token for underlying tokens\\r\\n     * @param _wrappedTokensForRemint Array of token info (address and ids array) for the tokens to be reminted\\r\\n     * @param recipient Account that is receiving the reminted ERC20 token\\r\\n     */\\r\\n    function remint(\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[]\\r\\n            calldata _wrappedTokensForRemint,\\r\\n        address recipient\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Function to sync the wrapper state with the underlying tokens\\r\\n     * @dev This function is callable by anyone and can sync back up accounting.\\r\\n     * e.g. in case of transfer occurring outside remint function directly to wrapped token address\\r\\n     * @param tokenAddr Address of the token to be synced\\r\\n     * @param tokenId Id of the token to be synced\\r\\n     */\\r\\n    function sync(address tokenAddr, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns wrapped token info\\r\\n     * @return wrappedTokens array of struct containing information about wrapped tokens\\r\\n     */\\r\\n    function getWrappedTokensInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata wrappedTokens\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the total and current number of tokens in the wrapper\\r\\n     * @return Array of total and current number of tokens in the wrapper, respectively\\r\\n     */\\r\\n    function getTotalAndCurrentNumOfTokensInWrapper()\\r\\n        external\\r\\n        view\\r\\n        returns (uint128[2] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the address of the last redeemer\\r\\n     * @return Address of the last redeemer\\r\\n     */\\r\\n    function lastRedeemer() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns stuck token status\\r\\n     * @param tokenAddr Address of the token to be checked\\r\\n     * @param tokenId Id of the token to be checked\\r\\n     * @return Returns true if the token is stuck, false otherwise\\r\\n     */\\r\\n    function stuckTokens(\\r\\n        address tokenAddr,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns token currently counted in wrapper status\\r\\n     * @param tokenAddr Address of the token to be checked\\r\\n     * @param tokenId Id of the token to be checked\\r\\n     * @return Returns true if the token is currently counted in the wrapper, false otherwise\\r\\n     */\\r\\n    function isTokenCountedInWrapper(\\r\\n        address tokenAddr,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether token is an underlying member of the wrapper\\r\\n     * @param tokenAddr Address of the token to be checked\\r\\n     * @param tokenId Id of the token to be checked\\r\\n     * @return Returns true if the token is an underlying member of the wrapper, false otherwise\\r\\n     */\\r\\n    function isUnderlying(\\r\\n        address tokenAddr,\\r\\n        uint256 tokenId\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/LenderVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {Errors} from \\\"../Errors.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"./interfaces/IAddressRegistry.sol\\\";\\r\\nimport {ILenderVaultFactory} from \\\"./interfaces/ILenderVaultFactory.sol\\\";\\r\\nimport {ILenderVaultImpl} from \\\"./interfaces/ILenderVaultImpl.sol\\\";\\r\\nimport {IMysoTokenManager} from \\\"../interfaces/IMysoTokenManager.sol\\\";\\r\\n\\r\\ncontract LenderVaultFactory is ReentrancyGuard, ILenderVaultFactory {\\r\\n    address public immutable addressRegistry;\\r\\n    address public immutable lenderVaultImpl;\\r\\n\\r\\n    constructor(address _addressRegistry, address _lenderVaultImpl) {\\r\\n        if (_addressRegistry == address(0) || _lenderVaultImpl == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        addressRegistry = _addressRegistry;\\r\\n        lenderVaultImpl = _lenderVaultImpl;\\r\\n    }\\r\\n\\r\\n    function createVault(\\r\\n        bytes32 salt\\r\\n    ) external nonReentrant returns (address newLenderVaultAddr) {\\r\\n        newLenderVaultAddr = Clones.cloneDeterministic(\\r\\n            lenderVaultImpl,\\r\\n            keccak256(abi.encode(msg.sender, salt))\\r\\n        );\\r\\n        ILenderVaultImpl(newLenderVaultAddr).initialize(\\r\\n            msg.sender,\\r\\n            addressRegistry\\r\\n        );\\r\\n        uint256 numRegisteredVaults = IAddressRegistry(addressRegistry)\\r\\n            .addLenderVault(newLenderVaultAddr);\\r\\n        address mysoTokenManager = IAddressRegistry(addressRegistry)\\r\\n            .mysoTokenManager();\\r\\n        if (mysoTokenManager != address(0)) {\\r\\n            IMysoTokenManager(mysoTokenManager).processP2PCreateVault(\\r\\n                numRegisteredVaults,\\r\\n                msg.sender,\\r\\n                newLenderVaultAddr\\r\\n            );\\r\\n        }\\r\\n        emit NewVaultCreated(\\r\\n            newLenderVaultAddr,\\r\\n            msg.sender,\\r\\n            numRegisteredVaults\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/LenderVaultImpl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Metadata, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\r\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {Constants} from \\\"../Constants.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"./DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../Errors.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"./interfaces/IAddressRegistry.sol\\\";\\r\\nimport {IBaseCompartment} from \\\"./interfaces/compartments/IBaseCompartment.sol\\\";\\r\\nimport {ILenderVaultImpl} from \\\"./interfaces/ILenderVaultImpl.sol\\\";\\r\\nimport {IOracle} from \\\"./interfaces/IOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title LenderVaultImpl\\r\\n * @notice This contract implements the logic for the Lender Vault.\\r\\n * IMPORTANT: Security best practices dictate that the signers should always take care to\\r\\n * keep their private keys safe. Signing only trusted and human-readable public schema data is a good practice. Additionally,\\r\\n * the Myso team recommends that the signer should use a purpose-bound address for signing to reduce the chance\\r\\n * for a compromised private key to result in loss of funds. The Myso team also recommends that even vaults owned\\r\\n * by an EOA should have multiple signers to reduce chance of forged quotes. In the event that a signer is compromised,\\r\\n * the vault owner should immediately remove the compromised signer and if possible, add a new signer.\\r\\n */\\r\\n\\r\\ncontract LenderVaultImpl is\\r\\n    Initializable,\\r\\n    Ownable2Step,\\r\\n    Pausable,\\r\\n    ILenderVaultImpl\\r\\n{\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    address public addressRegistry;\\r\\n    address[] public signers;\\r\\n    address public circuitBreaker;\\r\\n    address public reverseCircuitBreaker;\\r\\n    address public onChainQuotingDelegate;\\r\\n    uint256 public minNumOfSigners;\\r\\n    mapping(address => bool) public isSigner;\\r\\n    bool public withdrawEntered;\\r\\n\\r\\n    mapping(address => uint256) public lockedAmounts;\\r\\n    DataTypesPeerToPeer.Loan[] internal _loans;\\r\\n\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address _vaultOwner,\\r\\n        address _addressRegistry\\r\\n    ) external initializer {\\r\\n        addressRegistry = _addressRegistry;\\r\\n        minNumOfSigners = 1;\\r\\n        if (_vaultOwner == address(0) || _addressRegistry == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        super._transferOwnership(_vaultOwner);\\r\\n    }\\r\\n\\r\\n    function unlockCollateral(\\r\\n        address collToken,\\r\\n        uint256[] calldata _loanIds\\r\\n    ) external {\\r\\n        // only owner can call this function\\r\\n        _checkOwner();\\r\\n        // if empty array is passed, revert\\r\\n        uint256 loanIdsLen = _loanIds.length;\\r\\n        if (loanIdsLen == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        uint256 totalUnlockableColl;\\r\\n        for (uint256 i; i < loanIdsLen; ) {\\r\\n            DataTypesPeerToPeer.Loan storage _loan = _loans[_loanIds[i]];\\r\\n\\r\\n            if (_loan.collToken != collToken) {\\r\\n                revert Errors.InconsistentUnlockTokenAddresses();\\r\\n            }\\r\\n            if (_loan.collUnlocked || block.timestamp < _loan.expiry) {\\r\\n                revert Errors.InvalidCollUnlock();\\r\\n            }\\r\\n            if (_loan.collTokenCompartmentAddr != address(0)) {\\r\\n                IBaseCompartment(_loan.collTokenCompartmentAddr)\\r\\n                    .unlockCollToVault(collToken);\\r\\n            } else {\\r\\n                totalUnlockableColl += (_loan.initCollAmount -\\r\\n                    _loan.amountReclaimedSoFar);\\r\\n            }\\r\\n            _loan.collUnlocked = true;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        lockedAmounts[collToken] -= totalUnlockableColl;\\r\\n\\r\\n        emit CollateralUnlocked(\\r\\n            owner(),\\r\\n            collToken,\\r\\n            _loanIds,\\r\\n            totalUnlockableColl\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateLoanInfo(\\r\\n        uint128 repayAmount,\\r\\n        uint256 loanId,\\r\\n        uint128 reclaimCollAmount,\\r\\n        bool noCompartment,\\r\\n        address collToken\\r\\n    ) external {\\r\\n        _senderCheckGateway();\\r\\n\\r\\n        _loans[loanId].amountRepaidSoFar += repayAmount;\\r\\n        _loans[loanId].amountReclaimedSoFar += reclaimCollAmount;\\r\\n\\r\\n        // only update lockedAmounts when no compartment\\r\\n        if (noCompartment) {\\r\\n            lockedAmounts[collToken] -= reclaimCollAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function processQuote(\\r\\n        address borrower,\\r\\n        DataTypesPeerToPeer.BorrowTransferInstructions\\r\\n            calldata borrowInstructions,\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple\\r\\n    )\\r\\n        external\\r\\n        whenNotPaused\\r\\n        returns (\\r\\n            DataTypesPeerToPeer.Loan memory _loan,\\r\\n            uint256 loanId,\\r\\n            DataTypesPeerToPeer.TransferInstructions memory transferInstructions\\r\\n        )\\r\\n    {\\r\\n        _senderCheckGateway();\\r\\n        if (\\r\\n            borrowInstructions.collSendAmount <\\r\\n            borrowInstructions.expectedProtocolAndVaultTransferFee +\\r\\n                borrowInstructions.expectedCompartmentTransferFee\\r\\n        ) {\\r\\n            revert Errors.InsufficientSendAmount();\\r\\n        }\\r\\n        // this check early in function removes need for other checks on sum of upfront plus transfer fees underflowing coll send amount\\r\\n        if (quoteTuple.upfrontFeePctInBase > Constants.BASE) {\\r\\n            revert Errors.InvalidUpfrontFee();\\r\\n        }\\r\\n        // determine the effective net pledge amount on which loan amount and upfront fee calculation is based\\r\\n        uint256 netPledgeAmount = borrowInstructions.collSendAmount -\\r\\n            borrowInstructions.expectedProtocolAndVaultTransferFee -\\r\\n            borrowInstructions.expectedCompartmentTransferFee;\\r\\n        transferInstructions.upfrontFee =\\r\\n            (netPledgeAmount * quoteTuple.upfrontFeePctInBase) /\\r\\n            Constants.BASE;\\r\\n        (uint256 loanAmount, uint256 repayAmount) = _getLoanAndRepayAmount(\\r\\n            netPledgeAmount,\\r\\n            generalQuoteInfo,\\r\\n            quoteTuple,\\r\\n            quoteTuple.upfrontFeePctInBase\\r\\n        );\\r\\n        // checks to prevent griefing attacks (e.g. small unlocks that aren't worth it)\\r\\n        if (\\r\\n            loanAmount < generalQuoteInfo.minLoan ||\\r\\n            loanAmount > generalQuoteInfo.maxLoan\\r\\n        ) {\\r\\n            revert Errors.InvalidSendAmount();\\r\\n        }\\r\\n        if (loanAmount < borrowInstructions.minLoanAmount || loanAmount == 0) {\\r\\n            revert Errors.TooSmallLoanAmount();\\r\\n        }\\r\\n        transferInstructions.collReceiver = address(this);\\r\\n        _loan.borrower = borrower;\\r\\n        _loan.loanToken = generalQuoteInfo.loanToken;\\r\\n        _loan.collToken = generalQuoteInfo.collToken;\\r\\n        _loan.initLoanAmount = SafeCast.toUint128(loanAmount);\\r\\n        _loan.initCollAmount = SafeCast.toUint128(\\r\\n            netPledgeAmount - transferInstructions.upfrontFee\\r\\n        );\\r\\n        if (quoteTuple.upfrontFeePctInBase < Constants.BASE) {\\r\\n            // note: if upfrontFee<100% this corresponds to a loan; check that tenor and earliest repay are consistent\\r\\n            if (\\r\\n                quoteTuple.tenor <\\r\\n                SafeCast.toUint40(\\r\\n                    generalQuoteInfo.earliestRepayTenor +\\r\\n                        Constants.MIN_TIME_BETWEEN_EARLIEST_REPAY_AND_EXPIRY\\r\\n                )\\r\\n            ) {\\r\\n                revert Errors.InvalidEarliestRepay();\\r\\n            }\\r\\n            _loan.expiry = SafeCast.toUint40(\\r\\n                block.timestamp + quoteTuple.tenor\\r\\n            );\\r\\n            _loan.earliestRepay = SafeCast.toUint40(\\r\\n                block.timestamp + generalQuoteInfo.earliestRepayTenor\\r\\n            );\\r\\n            if (_loan.initCollAmount == 0) {\\r\\n                revert Errors.ReclaimableCollateralAmountZero();\\r\\n            }\\r\\n            loanId = _loans.length;\\r\\n            if (\\r\\n                generalQuoteInfo.borrowerCompartmentImplementation == address(0)\\r\\n            ) {\\r\\n                if (borrowInstructions.expectedCompartmentTransferFee > 0) {\\r\\n                    revert Errors.InconsistentExpTransferFee();\\r\\n                }\\r\\n                lockedAmounts[_loan.collToken] += _loan.initCollAmount;\\r\\n            } else {\\r\\n                transferInstructions.collReceiver = _createCollCompartment(\\r\\n                    generalQuoteInfo.borrowerCompartmentImplementation,\\r\\n                    loanId\\r\\n                );\\r\\n                _loan.collTokenCompartmentAddr = transferInstructions\\r\\n                    .collReceiver;\\r\\n            }\\r\\n            _loan.initRepayAmount = SafeCast.toUint128(repayAmount);\\r\\n            _loans.push(_loan);\\r\\n        } else {\\r\\n            // note: only case left is upfrontFee = 100% and this corresponds to an outright swap;\\r\\n            // check that tenor is zero and earliest repay is nonzero, and compartment is zero, with no compartment transfer fee\\r\\n            if (\\r\\n                _loan.initCollAmount != 0 ||\\r\\n                quoteTuple.tenor + generalQuoteInfo.earliestRepayTenor != 0 ||\\r\\n                generalQuoteInfo.borrowerCompartmentImplementation !=\\r\\n                address(0) ||\\r\\n                borrowInstructions.expectedCompartmentTransferFee != 0\\r\\n            ) {\\r\\n                revert Errors.InvalidSwap();\\r\\n            }\\r\\n        }\\r\\n        emit QuoteProcessed(netPledgeAmount, transferInstructions);\\r\\n    }\\r\\n\\r\\n    function withdraw(address token, uint256 amount) external {\\r\\n        if (withdrawEntered) {\\r\\n            revert Errors.WithdrawEntered();\\r\\n        }\\r\\n        withdrawEntered = true;\\r\\n        _checkOwner();\\r\\n        uint256 vaultBalance = IERC20Metadata(token).balanceOf(address(this));\\r\\n        if (amount == 0 || amount > vaultBalance - lockedAmounts[token]) {\\r\\n            revert Errors.InvalidWithdrawAmount();\\r\\n        }\\r\\n        IERC20Metadata(token).safeTransfer(owner(), amount);\\r\\n        withdrawEntered = false;\\r\\n        emit Withdrew(token, amount);\\r\\n    }\\r\\n\\r\\n    function transferTo(\\r\\n        address token,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external {\\r\\n        _senderCheckGateway();\\r\\n        if (\\r\\n            amount >\\r\\n            IERC20Metadata(token).balanceOf(address(this)) -\\r\\n                lockedAmounts[token]\\r\\n        ) {\\r\\n            revert Errors.InsufficientVaultFunds();\\r\\n        }\\r\\n        IERC20Metadata(token).safeTransfer(recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferCollFromCompartment(\\r\\n        uint256 repayAmount,\\r\\n        uint256 repayAmountLeft,\\r\\n        uint128 reclaimCollAmount,\\r\\n        address borrowerAddr,\\r\\n        address collTokenAddr,\\r\\n        address callbackAddr,\\r\\n        address collTokenCompartmentAddr\\r\\n    ) external {\\r\\n        _senderCheckGateway();\\r\\n        IBaseCompartment(collTokenCompartmentAddr).transferCollFromCompartment(\\r\\n            repayAmount,\\r\\n            repayAmountLeft,\\r\\n            reclaimCollAmount,\\r\\n            borrowerAddr,\\r\\n            collTokenAddr,\\r\\n            callbackAddr\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setMinNumOfSigners(uint256 _minNumOfSigners) external {\\r\\n        _checkOwner();\\r\\n        if (_minNumOfSigners == 0 || _minNumOfSigners == minNumOfSigners) {\\r\\n            revert Errors.InvalidNewMinNumOfSigners();\\r\\n        }\\r\\n        minNumOfSigners = _minNumOfSigners;\\r\\n        emit MinNumberOfSignersSet(_minNumOfSigners);\\r\\n    }\\r\\n\\r\\n    function addSigners(address[] calldata _signers) external {\\r\\n        _checkOwner();\\r\\n        uint256 signersLen = _signers.length;\\r\\n        if (signersLen == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        address vaultOwner = owner();\\r\\n        for (uint256 i; i < signersLen; ) {\\r\\n            if (_signers[i] == address(0) || _signers[i] == vaultOwner) {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            if (isSigner[_signers[i]]) {\\r\\n                revert Errors.AlreadySigner();\\r\\n            }\\r\\n            isSigner[_signers[i]] = true;\\r\\n            signers.push(_signers[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        emit AddedSigners(_signers);\\r\\n    }\\r\\n\\r\\n    function removeSigner(address signer, uint256 signerIdx) external {\\r\\n        _checkOwner();\\r\\n        uint256 signersLen = signers.length;\\r\\n        if (signerIdx >= signersLen) {\\r\\n            revert Errors.InvalidArrayIndex();\\r\\n        }\\r\\n\\r\\n        if (!isSigner[signer] || signer != signers[signerIdx]) {\\r\\n            revert Errors.InvalidSignerRemoveInfo();\\r\\n        }\\r\\n        address signerWithSwappedPosition;\\r\\n        if (signerIdx != signersLen - 1) {\\r\\n            signerWithSwappedPosition = signers[signersLen - 1];\\r\\n            signers[signerIdx] = signerWithSwappedPosition;\\r\\n        }\\r\\n        signers.pop();\\r\\n        isSigner[signer] = false;\\r\\n        emit RemovedSigner(signer, signerIdx, signerWithSwappedPosition);\\r\\n    }\\r\\n\\r\\n    function setCircuitBreaker(address newCircuitBreaker) external {\\r\\n        _checkOwner();\\r\\n        address oldCircuitBreaker = circuitBreaker;\\r\\n        _checkCircuitBreaker(newCircuitBreaker, oldCircuitBreaker);\\r\\n        circuitBreaker = newCircuitBreaker;\\r\\n        emit CircuitBreakerUpdated(newCircuitBreaker, oldCircuitBreaker);\\r\\n    }\\r\\n\\r\\n    function setReverseCircuitBreaker(\\r\\n        address newReverseCircuitBreaker\\r\\n    ) external {\\r\\n        _checkOwner();\\r\\n        address oldReverseCircuitBreaker = reverseCircuitBreaker;\\r\\n        _checkCircuitBreaker(\\r\\n            newReverseCircuitBreaker,\\r\\n            oldReverseCircuitBreaker\\r\\n        );\\r\\n        reverseCircuitBreaker = newReverseCircuitBreaker;\\r\\n        emit ReverseCircuitBreakerUpdated(\\r\\n            newReverseCircuitBreaker,\\r\\n            oldReverseCircuitBreaker\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setOnChainQuotingDelegate(\\r\\n        address newOnChainQuotingDelegate\\r\\n    ) external {\\r\\n        _checkOwner();\\r\\n        address oldOnChainQuotingDelegate = onChainQuotingDelegate;\\r\\n        // delegate is allowed to be a signer, unlike owner, circuit breaker or reverse circuit breaker\\r\\n        if (\\r\\n            newOnChainQuotingDelegate == oldOnChainQuotingDelegate ||\\r\\n            newOnChainQuotingDelegate == owner()\\r\\n        ) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        onChainQuotingDelegate = newOnChainQuotingDelegate;\\r\\n        emit OnChainQuotingDelegateUpdated(\\r\\n            newOnChainQuotingDelegate,\\r\\n            oldOnChainQuotingDelegate\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function pauseQuotes() external {\\r\\n        if (msg.sender != circuitBreaker && msg.sender != owner()) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpauseQuotes() external {\\r\\n        if (msg.sender != reverseCircuitBreaker && msg.sender != owner()) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function loan(\\r\\n        uint256 loanId\\r\\n    ) external view returns (DataTypesPeerToPeer.Loan memory _loan) {\\r\\n        uint256 loansLen = _loans.length;\\r\\n        if (loanId >= loansLen) {\\r\\n            revert Errors.InvalidArrayIndex();\\r\\n        }\\r\\n        _loan = _loans[loanId];\\r\\n    }\\r\\n\\r\\n    function totalNumLoans() external view returns (uint256) {\\r\\n        return _loans.length;\\r\\n    }\\r\\n\\r\\n    function getTokenBalancesAndLockedAmounts(\\r\\n        address[] calldata tokens\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory balances, uint256[] memory _lockedAmounts)\\r\\n    {\\r\\n        uint256 tokensLen = tokens.length;\\r\\n        if (tokensLen == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        balances = new uint256[](tokensLen);\\r\\n        _lockedAmounts = new uint256[](tokensLen);\\r\\n        for (uint256 i; i < tokensLen; ) {\\r\\n            if (tokens[i] == address(0)) {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            balances[i] = IERC20Metadata(tokens[i]).balanceOf(address(this));\\r\\n            _lockedAmounts[i] = lockedAmounts[tokens[i]];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function totalNumSigners() external view returns (uint256) {\\r\\n        return signers.length;\\r\\n    }\\r\\n\\r\\n    function transferOwnership(\\r\\n        address _newOwnerProposal\\r\\n    ) public override(Ownable2Step, ILenderVaultImpl) {\\r\\n        if (\\r\\n            _newOwnerProposal == address(this) ||\\r\\n            _newOwnerProposal == pendingOwner() ||\\r\\n            _newOwnerProposal == owner() ||\\r\\n            isSigner[_newOwnerProposal]\\r\\n        ) {\\r\\n            revert Errors.InvalidNewOwnerProposal();\\r\\n        }\\r\\n        // @dev: access control check via super.transferOwnership()\\r\\n        super.transferOwnership(_newOwnerProposal);\\r\\n    }\\r\\n\\r\\n    function owner()\\r\\n        public\\r\\n        view\\r\\n        override(Ownable, ILenderVaultImpl)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super.owner();\\r\\n    }\\r\\n\\r\\n    function pendingOwner()\\r\\n        public\\r\\n        view\\r\\n        override(Ownable2Step, ILenderVaultImpl)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super.pendingOwner();\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public pure override {\\r\\n        revert Errors.Disabled();\\r\\n    }\\r\\n\\r\\n    function _createCollCompartment(\\r\\n        address borrowerCompartmentImplementation,\\r\\n        uint256 loanId\\r\\n    ) internal returns (address collCompartment) {\\r\\n        collCompartment = Clones.clone(borrowerCompartmentImplementation);\\r\\n        IBaseCompartment(collCompartment).initialize(address(this), loanId);\\r\\n    }\\r\\n\\r\\n    function _senderCheckGateway() internal view {\\r\\n        if (msg.sender != IAddressRegistry(addressRegistry).borrowerGateway()) {\\r\\n            revert Errors.UnregisteredGateway();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getLoanAndRepayAmount(\\r\\n        uint256 netPledgeAmount,\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple,\\r\\n        uint256 upfrontFeePctInBase\\r\\n    ) internal view returns (uint256 loanAmount, uint256 repayAmount) {\\r\\n        uint256 loanPerCollUnit;\\r\\n        if (generalQuoteInfo.oracleAddr == address(0)) {\\r\\n            loanPerCollUnit = quoteTuple.loanPerCollUnitOrLtv;\\r\\n        } else {\\r\\n            // arbitrage protection if LTV > 100% and no whitelist restriction\\r\\n            if (\\r\\n                quoteTuple.loanPerCollUnitOrLtv > Constants.BASE &&\\r\\n                generalQuoteInfo.whitelistAddr == address(0)\\r\\n            ) {\\r\\n                revert Errors.LtvHigherThanMax();\\r\\n            }\\r\\n            (uint256 collTokenPriceRaw, uint256 loanTokenPriceRaw) = IOracle(\\r\\n                generalQuoteInfo.oracleAddr\\r\\n            ).getRawPrices(\\r\\n                    generalQuoteInfo.collToken,\\r\\n                    generalQuoteInfo.loanToken\\r\\n                );\\r\\n            loanPerCollUnit =\\r\\n                Math.mulDiv(\\r\\n                    quoteTuple.loanPerCollUnitOrLtv,\\r\\n                    collTokenPriceRaw *\\r\\n                        10 **\\r\\n                            IERC20Metadata(generalQuoteInfo.loanToken)\\r\\n                                .decimals(),\\r\\n                    loanTokenPriceRaw\\r\\n                ) /\\r\\n                Constants.BASE;\\r\\n        }\\r\\n        uint256 unscaledLoanAmount = loanPerCollUnit * netPledgeAmount;\\r\\n        uint256 collTokenDecimals = IERC20Metadata(generalQuoteInfo.collToken)\\r\\n            .decimals();\\r\\n\\r\\n        // calculate loan amount\\r\\n        loanAmount = unscaledLoanAmount / (10 ** collTokenDecimals);\\r\\n\\r\\n        // calculate repay amount and interest rate factor only for loans\\r\\n        if (upfrontFeePctInBase < Constants.BASE) {\\r\\n            // calculate interest rate factor\\r\\n            // @dev: custom typecasting rather than safecasting to catch when interest rate factor = 0\\r\\n            int256 _interestRateFactor = int256(Constants.BASE) +\\r\\n                quoteTuple.interestRatePctInBase;\\r\\n            if (_interestRateFactor <= 0) {\\r\\n                revert Errors.InvalidInterestRateFactor();\\r\\n            }\\r\\n            uint256 interestRateFactor = uint256(_interestRateFactor);\\r\\n\\r\\n            // calculate repay amount\\r\\n            repayAmount =\\r\\n                Math.mulDiv(\\r\\n                    unscaledLoanAmount,\\r\\n                    interestRateFactor,\\r\\n                    Constants.BASE\\r\\n                ) /\\r\\n                (10 ** collTokenDecimals);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkCircuitBreaker(\\r\\n        address newCircuitBreaker,\\r\\n        address oldCircuitBreaker\\r\\n    ) internal view {\\r\\n        if (\\r\\n            newCircuitBreaker == oldCircuitBreaker ||\\r\\n            newCircuitBreaker == owner() ||\\r\\n            isSigner[newCircuitBreaker]\\r\\n        ) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/chainlink/ChainlinkArbitrumSequencerUSD.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {AggregatorV3Interface} from \\\"../../interfaces/oracles/chainlink/AggregatorV3Interface.sol\\\";\\r\\nimport {ChainlinkBase} from \\\"./ChainlinkBase.sol\\\";\\r\\nimport {Constants} from \\\"../../../Constants.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev supports oracles which are compatible with v2v3 or v3 interfaces\\r\\n */\\r\\ncontract ChainlinkArbitrumSequencerUSD is ChainlinkBase {\\r\\n    address internal constant SEQUENCER_FEED =\\r\\n        0xFdB631F5EE196F0ed6FAa767959853A9F217697D; // arbitrum sequencer feed\\r\\n    uint256 internal constant ARB_USD_BASE_CURRENCY_UNIT = 1e8; // 8 decimals for USD based oracles\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _tokenAddrs,\\r\\n        address[] memory _oracleAddrs\\r\\n    ) ChainlinkBase(_tokenAddrs, _oracleAddrs, ARB_USD_BASE_CURRENCY_UNIT) {} // solhint-disable no-empty-blocks\\r\\n\\r\\n    function _checkAndReturnLatestRoundData(\\r\\n        address oracleAddr\\r\\n    ) internal view override returns (uint256 tokenPriceRaw) {\\r\\n        (, int256 answer, uint256 startedAt, , ) = AggregatorV3Interface(\\r\\n            SEQUENCER_FEED\\r\\n        ).latestRoundData();\\r\\n        // check if sequencer is live\\r\\n        if (answer != 0) {\\r\\n            revert Errors.SequencerDown();\\r\\n        }\\r\\n        // check if last restart was less than or equal grace period length\\r\\n        if (startedAt + Constants.SEQUENCER_GRACE_PERIOD > block.timestamp) {\\r\\n            revert Errors.GracePeriodNotOver();\\r\\n        }\\r\\n        tokenPriceRaw = super._checkAndReturnLatestRoundData(oracleAddr);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/chainlink/ChainlinkBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"../../interfaces/oracles/chainlink/AggregatorV3Interface.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {Constants} from \\\"../../../Constants.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\nimport {IOracle} from \\\"../../interfaces/IOracle.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev supports oracles which are compatible with v2v3 or v3 interfaces\\r\\n */\\r\\nabstract contract ChainlinkBase is IOracle {\\r\\n    // solhint-disable var-name-mixedcase\\r\\n    uint256 public immutable BASE_CURRENCY_UNIT;\\r\\n    mapping(address => address) public oracleAddrs;\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _tokenAddrs,\\r\\n        address[] memory _oracleAddrs,\\r\\n        uint256 baseCurrencyUnit\\r\\n    ) {\\r\\n        uint256 tokenAddrsLength = _tokenAddrs.length;\\r\\n        if (tokenAddrsLength == 0 || tokenAddrsLength != _oracleAddrs.length) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        uint8 oracleDecimals;\\r\\n        uint256 version;\\r\\n        for (uint256 i; i < tokenAddrsLength; ) {\\r\\n            if (_tokenAddrs[i] == address(0) || _oracleAddrs[i] == address(0)) {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            oracleDecimals = AggregatorV3Interface(_oracleAddrs[i]).decimals();\\r\\n            if (10 ** oracleDecimals != baseCurrencyUnit) {\\r\\n                revert Errors.InvalidOracleDecimals();\\r\\n            }\\r\\n            version = AggregatorV3Interface(_oracleAddrs[i]).version();\\r\\n            if (version != 4) {\\r\\n                revert Errors.InvalidOracleVersion();\\r\\n            }\\r\\n            oracleAddrs[_tokenAddrs[i]] = _oracleAddrs[i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        BASE_CURRENCY_UNIT = baseCurrencyUnit;\\r\\n    }\\r\\n\\r\\n    function getPrice(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view virtual returns (uint256 collTokenPriceInLoanToken) {\\r\\n        (uint256 priceOfCollToken, uint256 priceOfLoanToken) = getRawPrices(\\r\\n            collToken,\\r\\n            loanToken\\r\\n        );\\r\\n        uint256 loanTokenDecimals = IERC20Metadata(loanToken).decimals();\\r\\n        collTokenPriceInLoanToken = Math.mulDiv(\\r\\n            priceOfCollToken,\\r\\n            10 ** loanTokenDecimals,\\r\\n            priceOfLoanToken\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getRawPrices(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256 collTokenPriceRaw, uint256 loanTokenPriceRaw)\\r\\n    {\\r\\n        (collTokenPriceRaw, loanTokenPriceRaw) = (\\r\\n            _getPriceOfToken(collToken),\\r\\n            _getPriceOfToken(loanToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getPriceOfToken(\\r\\n        address token\\r\\n    ) internal view virtual returns (uint256 tokenPriceRaw) {\\r\\n        address oracleAddr = oracleAddrs[token];\\r\\n        if (oracleAddr == address(0)) {\\r\\n            revert Errors.NoOracle();\\r\\n        }\\r\\n        tokenPriceRaw = _checkAndReturnLatestRoundData(oracleAddr);\\r\\n    }\\r\\n\\r\\n    function _checkAndReturnLatestRoundData(\\r\\n        address oracleAddr\\r\\n    ) internal view virtual returns (uint256 tokenPriceRaw) {\\r\\n        (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            ,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        ) = AggregatorV3Interface(oracleAddr).latestRoundData();\\r\\n        if (\\r\\n            roundId == 0 ||\\r\\n            answeredInRound < roundId ||\\r\\n            answer < 1 ||\\r\\n            updatedAt > block.timestamp ||\\r\\n            updatedAt + Constants.MAX_PRICE_UPDATE_TIMESTAMP_DIVERGENCE <\\r\\n            block.timestamp\\r\\n        ) {\\r\\n            revert Errors.InvalidOracleAnswer();\\r\\n        }\\r\\n        tokenPriceRaw = uint256(answer);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/chainlink/ChainlinkBasic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {ChainlinkBase} from \\\"./ChainlinkBase.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev supports oracles which are compatible with v2v3 or v3 interfaces\\r\\n */\\r\\ncontract ChainlinkBasic is ChainlinkBase {\\r\\n    // solhint-disable var-name-mixedcase\\r\\n    address public immutable BASE_CURRENCY;\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _tokenAddrs,\\r\\n        address[] memory _oracleAddrs,\\r\\n        address baseCurrency,\\r\\n        uint256 baseCurrencyUnit\\r\\n    ) ChainlinkBase(_tokenAddrs, _oracleAddrs, baseCurrencyUnit) {\\r\\n        if (baseCurrency == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        BASE_CURRENCY = baseCurrency;\\r\\n    }\\r\\n\\r\\n    function _getPriceOfToken(\\r\\n        address token\\r\\n    ) internal view virtual override returns (uint256 tokenPriceRaw) {\\r\\n        tokenPriceRaw = token == BASE_CURRENCY\\r\\n            ? BASE_CURRENCY_UNIT\\r\\n            : super._getPriceOfToken(token);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/chainlink/ChainlinkBasicWithWbtc.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {ChainlinkBasic} from \\\"./ChainlinkBasic.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev supports oracles which are compatible with v2v3 or v3 interfaces\\r\\n */\\r\\ncontract ChainlinkBasicWithWbtc is ChainlinkBasic {\\r\\n    address internal constant WBTC_BTC_ORACLE =\\r\\n        0xfdFD9C85aD200c506Cf9e21F1FD8dd01932FBB23;\\r\\n    address internal constant BTC_USD_ORACLE =\\r\\n        0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c;\\r\\n    address internal constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\r\\n    uint256 internal constant WBTC_BASE_CURRENCY_UNIT = 1e8; // 8 decimals for USD based oracles\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _tokenAddrs,\\r\\n        address[] memory _oracleAddrs\\r\\n    )\\r\\n        ChainlinkBasic(_tokenAddrs, _oracleAddrs, WBTC, WBTC_BASE_CURRENCY_UNIT)\\r\\n    {} // solhint-disable no-empty-blocks\\r\\n\\r\\n    function _getPriceOfToken(\\r\\n        address token\\r\\n    ) internal view override returns (uint256 tokenPriceRaw) {\\r\\n        if (token == BASE_CURRENCY) {\\r\\n            uint256 answer1 = _checkAndReturnLatestRoundData(WBTC_BTC_ORACLE);\\r\\n            uint256 answer2 = _checkAndReturnLatestRoundData(BTC_USD_ORACLE);\\r\\n            tokenPriceRaw = (answer1 * answer2) / BASE_CURRENCY_UNIT;\\r\\n        } else {\\r\\n            tokenPriceRaw = super._getPriceOfToken(token);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/chainlink/OlympusOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {IOlympus} from \\\"../../interfaces/oracles/IOlympus.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {ChainlinkBasic} from \\\"./ChainlinkBasic.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev supports olympus gOhm oracles which are compatible with v2v3 or v3 interfaces\\r\\n * should only be utilized with eth based oracles, not usd-based oracles\\r\\n */\\r\\ncontract OlympusOracle is ChainlinkBasic {\\r\\n    address internal constant GOHM_ADDR =\\r\\n        0x0ab87046fBb341D058F17CBC4c1133F25a20a52f;\\r\\n    uint256 internal constant SOHM_DECIMALS = 9;\\r\\n    address internal constant ETH_OHM_ORACLE_ADDR =\\r\\n        0x9a72298ae3886221820B1c878d12D872087D3a23;\\r\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    uint256 internal constant GOHM_BASE_CURRENCY_UNIT = 1e18; // 18 decimals for ETH based oracles\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _tokenAddrs,\\r\\n        address[] memory _oracleAddrs\\r\\n    ) ChainlinkBasic(_tokenAddrs, _oracleAddrs, WETH, GOHM_BASE_CURRENCY_UNIT) {\\r\\n        oracleAddrs[GOHM_ADDR] = ETH_OHM_ORACLE_ADDR;\\r\\n    }\\r\\n\\r\\n    function getPrice(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view override returns (uint256 collTokenPriceInLoanToken) {\\r\\n        if (collToken != GOHM_ADDR && loanToken != GOHM_ADDR) {\\r\\n            revert Errors.NeitherTokenIsGOHM();\\r\\n        }\\r\\n        (uint256 priceOfCollToken, uint256 priceOfLoanToken) = (\\r\\n            _getPriceOfToken(collToken),\\r\\n            _getPriceOfToken(loanToken)\\r\\n        );\\r\\n        uint256 loanTokenDecimals = IERC20Metadata(loanToken).decimals();\\r\\n        uint256 index = IOlympus(GOHM_ADDR).index();\\r\\n\\r\\n        collTokenPriceInLoanToken = collToken == GOHM_ADDR\\r\\n            ? Math.mulDiv(\\r\\n                priceOfCollToken,\\r\\n                (10 ** loanTokenDecimals) * index,\\r\\n                priceOfLoanToken * (10 ** SOHM_DECIMALS)\\r\\n            )\\r\\n            : Math.mulDiv(\\r\\n                priceOfCollToken,\\r\\n                (10 ** loanTokenDecimals) * (10 ** SOHM_DECIMALS),\\r\\n                priceOfLoanToken * index\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getRawPrices(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 collTokenPriceRaw, uint256 loanTokenPriceRaw)\\r\\n    {\\r\\n        if (collToken != GOHM_ADDR && loanToken != GOHM_ADDR) {\\r\\n            revert Errors.NeitherTokenIsGOHM();\\r\\n        }\\r\\n        uint256 index = IOlympus(GOHM_ADDR).index();\\r\\n        (collTokenPriceRaw, loanTokenPriceRaw) = (\\r\\n            _getPriceOfToken(collToken),\\r\\n            _getPriceOfToken(loanToken)\\r\\n        );\\r\\n        if (collToken == GOHM_ADDR) {\\r\\n            collTokenPriceRaw = Math.mulDiv(\\r\\n                collTokenPriceRaw,\\r\\n                index,\\r\\n                10 ** SOHM_DECIMALS\\r\\n            );\\r\\n        } else {\\r\\n            loanTokenPriceRaw = Math.mulDiv(\\r\\n                loanTokenPriceRaw,\\r\\n                index,\\r\\n                10 ** SOHM_DECIMALS\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/chainlink/UniV2Chainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {IUniV2} from \\\"../../interfaces/oracles/IUniV2.sol\\\";\\r\\nimport {ChainlinkBasic} from \\\"./ChainlinkBasic.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev supports oracles which have one token which is a 50/50 LP token\\r\\n * compatible with v2v3 or v3 interfaces\\r\\n * should only be utilized with eth based oracles, not usd-based oracles\\r\\n */\\r\\ncontract UniV2Chainlink is ChainlinkBasic {\\r\\n    uint256 internal immutable _tolerance; // tolerance must be an integer less than 10000 and greater than 0\\r\\n    mapping(address => bool) public isLpToken;\\r\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    uint256 internal constant UNI_V2_BASE_CURRENCY_UNIT = 1e18; // 18 decimals for ETH based oracles\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _tokenAddrs,\\r\\n        address[] memory _oracleAddrs,\\r\\n        address[] memory _lpAddrs,\\r\\n        uint256 _toleranceAmount\\r\\n    )\\r\\n        ChainlinkBasic(\\r\\n            _tokenAddrs,\\r\\n            _oracleAddrs,\\r\\n            WETH,\\r\\n            UNI_V2_BASE_CURRENCY_UNIT\\r\\n        )\\r\\n    {\\r\\n        uint256 lpAddrsLen = _lpAddrs.length;\\r\\n        if (lpAddrsLen == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        if (_toleranceAmount >= 10000 || _toleranceAmount == 0) {\\r\\n            revert Errors.InvalidOracleTolerance();\\r\\n        }\\r\\n        _tolerance = _toleranceAmount;\\r\\n        for (uint256 i; i < lpAddrsLen; ) {\\r\\n            if (_lpAddrs[i] == address(0)) {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            isLpToken[_lpAddrs[i]] = true;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPrice(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view override returns (uint256 collTokenPriceInLoanToken) {\\r\\n        (uint256 collTokenPriceRaw, uint256 loanTokenPriceRaw) = getRawPrices(\\r\\n            collToken,\\r\\n            loanToken\\r\\n        );\\r\\n        uint256 loanTokenDecimals = IERC20Metadata(loanToken).decimals();\\r\\n        collTokenPriceInLoanToken = Math.mulDiv(\\r\\n            collTokenPriceRaw,\\r\\n            10 ** loanTokenDecimals,\\r\\n            loanTokenPriceRaw\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getRawPrices(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 collTokenPriceRaw, uint256 loanTokenPriceRaw)\\r\\n    {\\r\\n        bool isCollTokenLpToken = isLpToken[collToken];\\r\\n        bool isLoanTokenLpToken = isLpToken[loanToken];\\r\\n        if (!isCollTokenLpToken && !isLoanTokenLpToken) {\\r\\n            revert Errors.NoLpTokens();\\r\\n        }\\r\\n        collTokenPriceRaw = isCollTokenLpToken\\r\\n            ? getLpTokenPrice(collToken)\\r\\n            : _getPriceOfToken(collToken);\\r\\n        loanTokenPriceRaw = isLoanTokenLpToken\\r\\n            ? getLpTokenPrice(loanToken)\\r\\n            : _getPriceOfToken(loanToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the price of 1 \\\"whole\\\" LP token (in 1 base currency unit, e.g., 10**18) in ETH\\r\\n     * @dev Since the uniswap reserves could be skewed in any direction by flash loans,\\r\\n     * we need to calculate the \\\"fair\\\" reserve of each token in the pool using invariant K\\r\\n     * and then calculate the price of each token in ETH using the oracle prices for each token\\r\\n     * @param lpToken Address of LP token\\r\\n     * @return lpTokenPriceInEth of LP token in ETH\\r\\n     */\\r\\n    function getLpTokenPrice(\\r\\n        address lpToken\\r\\n    ) public view returns (uint256 lpTokenPriceInEth) {\\r\\n        // assign uint112 reserves to uint256 to also handle large k invariants\\r\\n        (uint256 reserve0, uint256 reserve1, ) = IUniV2(lpToken).getReserves();\\r\\n        if (reserve0 * reserve1 == 0) {\\r\\n            revert Errors.ZeroReserve();\\r\\n        }\\r\\n\\r\\n        (address token0, address token1) = (\\r\\n            IUniV2(lpToken).token0(),\\r\\n            IUniV2(lpToken).token1()\\r\\n        );\\r\\n        uint256 totalLpSupply = IUniV2(lpToken).totalSupply();\\r\\n        uint256 priceToken0 = _getPriceOfToken(token0);\\r\\n        uint256 priceToken1 = _getPriceOfToken(token1);\\r\\n        uint256 token0Decimals = IERC20Metadata(token0).decimals();\\r\\n        uint256 token1Decimals = IERC20Metadata(token1).decimals();\\r\\n\\r\\n        _reserveAndPriceCheck(\\r\\n            reserve0,\\r\\n            reserve1,\\r\\n            priceToken0,\\r\\n            priceToken1,\\r\\n            token0Decimals,\\r\\n            token1Decimals\\r\\n        );\\r\\n\\r\\n        // calculate fair LP token price based on \\\"fair reserves\\\" as described in\\r\\n        // https://blog.alphaventuredao.io/fair-lp-token-pricing/\\r\\n        // formula: p = 2 * sqrt(r0 * r1) * sqrt(p0) * sqrt(p1) / s\\r\\n        // note: price is for 1 \\\"whole\\\" LP token unit, hence need to scale up by LP token decimals;\\r\\n        // need to divide by sqrt reserve decimals to cancel out units of invariant k\\r\\n        // IMPORTANT: while formula is robust against typical flashloan skews, lenders should use this\\r\\n        // oracle with caution and take into account skew scenarios when setting their LTVs\\r\\n        lpTokenPriceInEth = Math.mulDiv(\\r\\n            2 * Math.sqrt(reserve0 * reserve1),\\r\\n            Math.sqrt(priceToken0 * priceToken1) * UNI_V2_BASE_CURRENCY_UNIT,\\r\\n            totalLpSupply *\\r\\n                Math.sqrt(10 ** token0Decimals * 10 ** token1Decimals)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice function checks that price from reserves is within tolerance of price from oracle\\r\\n     * @dev This function is needed because a one-sided donation and sync can skew the fair reserve\\r\\n     * calculation above. This function checks that the price from reserves is within a tolerance\\r\\n     * @param reserve0 Reserve of token0\\r\\n     * @param reserve1 Reserve of token1\\r\\n     * @param priceToken0 Price of token0 from oracle\\r\\n     * @param priceToken1 Price of token1 from oracle\\r\\n     * @param token0Decimals Decimals of token0\\r\\n     * @param token1Decimals Decimals of token1\\r\\n     */\\r\\n    function _reserveAndPriceCheck(\\r\\n        uint256 reserve0,\\r\\n        uint256 reserve1,\\r\\n        uint256 priceToken0,\\r\\n        uint256 priceToken1,\\r\\n        uint256 token0Decimals,\\r\\n        uint256 token1Decimals\\r\\n    ) internal view {\\r\\n        uint256 priceFromReserves = (reserve0 * 10 ** token1Decimals) /\\r\\n            reserve1;\\r\\n        uint256 priceFromOracle = (priceToken1 * 10 ** token0Decimals) /\\r\\n            priceToken0;\\r\\n\\r\\n        if (\\r\\n            priceFromReserves >\\r\\n            ((10000 + _tolerance) * priceFromOracle) / 10000 ||\\r\\n            priceFromReserves < ((10000 - _tolerance) * priceFromOracle) / 10000\\r\\n        ) {\\r\\n            revert Errors.ReserveRatiosSkewedFromOraclePrice();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/custom/DsEthOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IUniswapV3Pool} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {OracleLibrary} from \\\"../uniswap/OracleLibrary.sol\\\";\\r\\nimport {ChainlinkBase} from \\\"../chainlink/ChainlinkBase.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\nimport {TwapGetter} from \\\"../uniswap/TwapGetter.sol\\\";\\r\\nimport {IDSETH} from \\\"../../interfaces/oracles/IDSETH.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev custom oracle for ds-eth\\r\\n */\\r\\ncontract DsEthOracle is ChainlinkBase, TwapGetter {\\r\\n    // must be paired with WETH and only allow components within ds eth to use TWAP\\r\\n    mapping(address => address) public uniV3PairAddrs;\\r\\n    uint256 internal immutable _tolerance; // tolerance must be an integer less than 10000 and greater than 0\\r\\n\\r\\n    address internal constant DS_ETH =\\r\\n        0x341c05c0E9b33C0E38d64de76516b2Ce970bB3BE;\\r\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n    uint256 internal constant INDEX_COOP_BASE_CURRENCY_UNIT = 1e18; // 18 decimals for ETH based oracles\\r\\n    uint32 internal immutable _twapInterval; // in seconds (e.g. 1 hour = 3600 seconds)\\r\\n\\r\\n    constructor(\\r\\n        address[] memory _tokenAddrs,\\r\\n        address[] memory _oracleAddrs,\\r\\n        address[] memory _uniswapV3PairAddrs,\\r\\n        uint32 twapInterval,\\r\\n        uint256 tolerance\\r\\n    ) ChainlinkBase(_tokenAddrs, _oracleAddrs, INDEX_COOP_BASE_CURRENCY_UNIT) {\\r\\n        if (tolerance >= 10000 || tolerance == 0) {\\r\\n            revert Errors.InvalidOracleTolerance();\\r\\n        }\\r\\n        _tolerance = tolerance;\\r\\n        // min 30 minute twap interval\\r\\n        if (twapInterval < 30 minutes) {\\r\\n            revert Errors.TooShortTwapInterval();\\r\\n        }\\r\\n        _twapInterval = twapInterval;\\r\\n\\r\\n        // in future could be possible that all constituents are chainlink compatible\\r\\n        // so _uniswapV3PairAddrs.length == 0 is allowed, hence no length == 0 check\\r\\n        address token1;\\r\\n        for (uint256 i; i < _uniswapV3PairAddrs.length; ) {\\r\\n            if (_uniswapV3PairAddrs[i] == address(0)) {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            // try could also pass if you passed in uni v2 pair address\\r\\n            // though should later fail when trying to price in future\\r\\n            // care must be taken not to pass in uni v2 pair address\\r\\n            try IUniswapV3Pool(_uniswapV3PairAddrs[i]).token0() returns (\\r\\n                address token0\\r\\n            ) {\\r\\n                token1 = IUniswapV3Pool(_uniswapV3PairAddrs[i]).token1();\\r\\n                // must have one token weth and other token component in ds eth\\r\\n                if (\\r\\n                    !(token0 == WETH && IDSETH(DS_ETH).isComponent(token1)) &&\\r\\n                    !(token1 == WETH && IDSETH(DS_ETH).isComponent(token0))\\r\\n                ) {\\r\\n                    revert Errors.InvalidAddress();\\r\\n                }\\r\\n                // store non weth token address as key with uni v3 pair address as value\\r\\n                uniV3PairAddrs[\\r\\n                    token0 == WETH ? token1 : token0\\r\\n                ] = _uniswapV3PairAddrs[i];\\r\\n            } catch {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPrice(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view override returns (uint256 collTokenPriceInLoanToken) {\\r\\n        // must have at least one token is DS_ETH to use this oracle\\r\\n        (uint256 priceOfCollToken, uint256 priceOfLoanToken) = getRawPrices(\\r\\n            collToken,\\r\\n            loanToken\\r\\n        );\\r\\n        uint256 loanTokenDecimals = (loanToken == WETH || loanToken == DS_ETH)\\r\\n            ? 18\\r\\n            : IERC20Metadata(loanToken).decimals();\\r\\n        collTokenPriceInLoanToken =\\r\\n            (priceOfCollToken * 10 ** loanTokenDecimals) /\\r\\n            priceOfLoanToken;\\r\\n    }\\r\\n\\r\\n    function getRawPrices(\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 collTokenPriceRaw, uint256 loanTokenPriceRaw)\\r\\n    {\\r\\n        // must have at least one token is DS_ETH to use this oracle\\r\\n        if (collToken != DS_ETH && loanToken != DS_ETH) {\\r\\n            revert Errors.NoDsEth();\\r\\n        }\\r\\n        (collTokenPriceRaw, loanTokenPriceRaw) = (\\r\\n            _getPriceOfToken(collToken),\\r\\n            _getPriceOfToken(loanToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getPriceOfToken(\\r\\n        address token\\r\\n    ) internal view virtual override returns (uint256 tokenPriceRaw) {\\r\\n        // note: if token is not WETH or DS_ETH, then will revert if not a chainlink oracle\\r\\n        // this is by design, even if that address has a TWAP, it will not be used\\r\\n        // except only when calculating ds eth price to minimize risk\\r\\n        // i.e. if stakewise eth has uni v3 address but no chainlink address, and lender\\r\\n        // tries to use stakewise eth as loan and ds eth as collateral, then revert\\r\\n\\r\\n        // @dev: no use of nested ternary operator for npx hardhat compatibility reasons\\r\\n        if (token == WETH) {\\r\\n            tokenPriceRaw = BASE_CURRENCY_UNIT;\\r\\n        } else {\\r\\n            tokenPriceRaw = token == DS_ETH\\r\\n                ? _getDsEthPrice()\\r\\n                : super._getPriceOfToken(token);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getDsEthPrice() internal view returns (uint256 dsEthPriceRaw) {\\r\\n        address[] memory components = IDSETH(DS_ETH).getComponents();\\r\\n        address currComponent;\\r\\n        uint256 currComponentPrice;\\r\\n        uint256 totalPriceUniCumSum;\\r\\n        for (uint256 i; i < components.length; ) {\\r\\n            currComponent = components[i];\\r\\n            if (\\r\\n                oracleAddrs[currComponent] == address(0) &&\\r\\n                uniV3PairAddrs[currComponent] == address(0)\\r\\n            ) {\\r\\n                // if component has no oracle and no uni v3 pair, then revert\\r\\n                revert Errors.NoOracle();\\r\\n            }\\r\\n            // always try to use chainlink oracle if available even if also had uni v3 pair passed in by mistake too\\r\\n            currComponentPrice = oracleAddrs[currComponent] == address(0)\\r\\n                ? _getTwapPrice(uniV3PairAddrs[currComponent])\\r\\n                : _getPriceOfToken(currComponent);\\r\\n            totalPriceUniCumSum += (currComponentPrice *\\r\\n                IDSETH(DS_ETH).getTotalComponentRealUnits(currComponent));\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        dsEthPriceRaw = totalPriceUniCumSum / INDEX_COOP_BASE_CURRENCY_UNIT;\\r\\n    }\\r\\n\\r\\n    function _getTwapPrice(\\r\\n        address uniV3PairAddr\\r\\n    ) internal view returns (uint256 twapPriceRaw) {\\r\\n        (address token0, address token1) = (\\r\\n            IUniswapV3Pool(uniV3PairAddr).token0(),\\r\\n            IUniswapV3Pool(uniV3PairAddr).token1()\\r\\n        );\\r\\n        (address inToken, address outToken) = (\\r\\n            token0 == WETH ? token1 : token0,\\r\\n            token1 == WETH ? token1 : token0\\r\\n        );\\r\\n        twapPriceRaw = getTwap(inToken, outToken, _twapInterval, uniV3PairAddr);\\r\\n        (, int24 tick, , , , , ) = IUniswapV3Pool(uniV3PairAddr).slot0();\\r\\n\\r\\n        uint256 spotPrice = OracleLibrary.getQuoteAtTick(\\r\\n            tick,\\r\\n            SafeCast.toUint128(10 ** IERC20Metadata(inToken).decimals()),\\r\\n            inToken,\\r\\n            outToken\\r\\n        );\\r\\n\\r\\n        // if twap price exceeds threshold from spot proxy price, then revert\\r\\n        if (\\r\\n            twapPriceRaw > ((10000 + _tolerance) * spotPrice) / 10000 ||\\r\\n            twapPriceRaw < ((10000 - _tolerance) * spotPrice) / 10000\\r\\n        ) {\\r\\n            revert Errors.TwapExceedsThreshold();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/uniswap/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* solhint-disable */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n    function mulDiv(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = a * b\\r\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n            // then use the Chinese Remainder Theorem to reconstruct\\r\\n            // the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2**256 + prod0\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(a, b, not(0))\\r\\n                prod0 := mul(a, b)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division\\r\\n            if (prod1 == 0) {\\r\\n                require(denominator > 0);\\r\\n                assembly {\\r\\n                    result := div(prod0, denominator)\\r\\n                }\\r\\n                return result;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2**256.\\r\\n            // Also prevents denominator == 0\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n            // Compute remainder using mulmod\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                remainder := mulmod(a, b, denominator)\\r\\n            }\\r\\n            // Subtract 256 bit number from 512 bit number\\r\\n            assembly {\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator\\r\\n            // Compute largest power of two divisor of denominator.\\r\\n            // Always >= 1.\\r\\n            uint256 twos = (0 - denominator) & denominator;\\r\\n            // Divide denominator by power of two\\r\\n            assembly {\\r\\n                denominator := div(denominator, twos)\\r\\n            }\\r\\n\\r\\n            // Divide [prod1 prod0] by the factors of two\\r\\n            assembly {\\r\\n                prod0 := div(prod0, twos)\\r\\n            }\\r\\n            // Shift in bits from prod1 into prod0. For this we need\\r\\n            // to flip `twos` such that it is 2**256 / twos.\\r\\n            // If twos is zero, then it becomes one\\r\\n            assembly {\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2**256\\r\\n            // Now that denominator is an odd number, it has an inverse\\r\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n            // Compute the inverse by starting with a seed that is correct\\r\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n            uint256 inv = (3 * denominator) ^ 2;\\r\\n            // Now use Newton-Raphson iteration to improve the precision.\\r\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n            // arithmetic, doubling the correct bits in each step.\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying\\r\\n            // with the modular inverse of denominator. This will give us the\\r\\n            // correct result modulo 2**256. Since the precoditions guarantee\\r\\n            // that the outcome is less than 2**256, this is the final result.\\r\\n            // We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inv;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/uniswap/OracleLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n/* solhint-disable */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport {FullMath} from \\\"./FullMath.sol\\\"; // cannot import from @uniswap due to incompatible versions\\r\\nimport {TickMath} from \\\"./TickMath.sol\\\"; // cannot import from @uniswap due to incompatible versions\\r\\n\\r\\n/// @title Oracle library\\r\\n/// @notice Provides functions to integrate with V3 pool oracle\\r\\nlibrary OracleLibrary {\\r\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\r\\n    /// @param tick Tick value used to calculate the quote\\r\\n    /// @param baseAmount Amount of token to be converted\\r\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\r\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\r\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\r\\n    function getQuoteAtTick(\\r\\n        int24 tick,\\r\\n        uint128 baseAmount,\\r\\n        address baseToken,\\r\\n        address quoteToken\\r\\n    ) internal pure returns (uint256 quoteAmount) {\\r\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\r\\n\\r\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\r\\n        if (sqrtRatioX96 <= type(uint128).max) {\\r\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\r\\n            quoteAmount = baseToken < quoteToken\\r\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\r\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\r\\n        } else {\\r\\n            uint256 ratioX128 = FullMath.mulDiv(\\r\\n                sqrtRatioX96,\\r\\n                sqrtRatioX96,\\r\\n                1 << 64\\r\\n            );\\r\\n            quoteAmount = baseToken < quoteToken\\r\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\r\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/uniswap/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\n/* solhint-disable */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\nlibrary TickMath {\\r\\n    error T();\\r\\n    error R();\\r\\n\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO =\\r\\n        1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(\\r\\n        int24 tick\\r\\n    ) internal pure returns (uint160 sqrtPriceX96) {\\r\\n        unchecked {\\r\\n            uint256 absTick = tick < 0\\r\\n                ? uint256(-int256(tick))\\r\\n                : uint256(int256(tick));\\r\\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\\r\\n\\r\\n            uint256 ratio = absTick & 0x1 != 0\\r\\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\\r\\n                : 0x100000000000000000000000000000000;\\r\\n            if (absTick & 0x2 != 0)\\r\\n                ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n            if (absTick & 0x4 != 0)\\r\\n                ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n            if (absTick & 0x8 != 0)\\r\\n                ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n            if (absTick & 0x10 != 0)\\r\\n                ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n            if (absTick & 0x20 != 0)\\r\\n                ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n            if (absTick & 0x40 != 0)\\r\\n                ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n            if (absTick & 0x80 != 0)\\r\\n                ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n            if (absTick & 0x100 != 0)\\r\\n                ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n            if (absTick & 0x200 != 0)\\r\\n                ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n            if (absTick & 0x400 != 0)\\r\\n                ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n            if (absTick & 0x800 != 0)\\r\\n                ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n            if (absTick & 0x1000 != 0)\\r\\n                ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n            if (absTick & 0x2000 != 0)\\r\\n                ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n            if (absTick & 0x4000 != 0)\\r\\n                ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n            if (absTick & 0x8000 != 0)\\r\\n                ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n            if (absTick & 0x10000 != 0)\\r\\n                ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n            if (absTick & 0x20000 != 0)\\r\\n                ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n            if (absTick & 0x40000 != 0)\\r\\n                ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n            if (absTick & 0x80000 != 0)\\r\\n                ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n            if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n            sqrtPriceX96 = uint160(\\r\\n                (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/oracles/uniswap/TwapGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {FixedPoint96} from \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\r\\nimport {IUniswapV3Factory} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\r\\nimport {IUniswapV3Pool} from \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\r\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {FullMath} from \\\"./FullMath.sol\\\"; // cannot import from @uniswap due to incompatible versions\\r\\nimport {TickMath} from \\\"./TickMath.sol\\\"; // cannot import from @uniswap due to incompatible versions\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\nimport {ITwapGetter} from \\\"../../interfaces/oracles/uniswap/ITwapGetter.sol\\\";\\r\\n\\r\\nabstract contract TwapGetter is ITwapGetter {\\r\\n    // inToken: `1 unit of inToken`\\r\\n    // outToken: resulting units of outToken (in \\\"base unit\\\" of outTokens, e.g. if 427518869723400 and outToken is eth, then this corresponds to 427518869723400/10^18)\\r\\n    function getTwap(\\r\\n        address inToken,\\r\\n        address outToken,\\r\\n        uint32 twapInterval,\\r\\n        address uniswapV3Pool\\r\\n    ) public view returns (uint256 twap) {\\r\\n        (address token0, address token1) = inToken < outToken\\r\\n            ? (inToken, outToken)\\r\\n            : (outToken, inToken);\\r\\n\\r\\n        // note: this returns the sqrt price\\r\\n        uint160 sqrtPriceX96 = getSqrtTwapX96(uniswapV3Pool, twapInterval);\\r\\n\\r\\n        // note: this returns the price in base 2**96 and denominated in token1\\r\\n        // i.e., `1 unit of token0` corresponds to `sqrtPriceX96 units (divided by 2**96) of token1`\\r\\n        uint256 priceX96 = FullMath.mulDiv(\\r\\n            sqrtPriceX96,\\r\\n            sqrtPriceX96,\\r\\n            FixedPoint96.Q96\\r\\n        );\\r\\n\\r\\n        twap = inToken == token0\\r\\n            ? FullMath.mulDiv(\\r\\n                priceX96,\\r\\n                10 ** IERC20Metadata(token0).decimals(),\\r\\n                FixedPoint96.Q96\\r\\n            )\\r\\n            : FullMath.mulDiv(\\r\\n                FixedPoint96.Q96,\\r\\n                10 ** IERC20Metadata(token1).decimals(),\\r\\n                priceX96\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getSqrtTwapX96(\\r\\n        address uniswapV3Pool,\\r\\n        uint32 twapInterval\\r\\n    ) public view returns (uint160 sqrtPriceX96) {\\r\\n        if (twapInterval == 0) {\\r\\n            (sqrtPriceX96, , , , , , ) = IUniswapV3Pool(uniswapV3Pool).slot0();\\r\\n        } else {\\r\\n            uint32[] memory secondsAgo = new uint32[](2);\\r\\n\\r\\n            // @dev: revert if twapInterval doesn't fit into smaller int32\\r\\n            if (twapInterval > uint32(type(int32).max)) {\\r\\n                revert Errors.TooLongTwapInterval();\\r\\n            }\\r\\n\\r\\n            secondsAgo[0] = twapInterval;\\r\\n            secondsAgo[1] = 0;\\r\\n            (int56[] memory tickCumulatives, ) = IUniswapV3Pool(uniswapV3Pool)\\r\\n                .observe(secondsAgo);\\r\\n\\r\\n            int56 tickCumulativesDelta = tickCumulatives[1] -\\r\\n                tickCumulatives[0];\\r\\n            int24 averageTick = SafeCast.toInt24(\\r\\n                tickCumulativesDelta / int32(twapInterval)\\r\\n            );\\r\\n\\r\\n            sqrtPriceX96 = TickMath.getSqrtRatioAtTick(averageTick);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/policyManagers/BasicQuotePolicyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../DataTypesPeerToPeer.sol\\\";\\r\\nimport {DataTypesBasicPolicies} from \\\"./DataTypesBasicPolicies.sol\\\";\\r\\nimport {Constants} from \\\"../../Constants.sol\\\";\\r\\nimport {Errors} from \\\"../../Errors.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"../interfaces/IAddressRegistry.sol\\\";\\r\\nimport {ILenderVaultImpl} from \\\"../interfaces/ILenderVaultImpl.sol\\\";\\r\\nimport {IQuotePolicyManager} from \\\"../interfaces/policyManagers/IQuotePolicyManager.sol\\\";\\r\\n\\r\\ncontract BasicQuotePolicyManager is IQuotePolicyManager {\\r\\n    mapping(address => DataTypesBasicPolicies.GlobalPolicy)\\r\\n        internal _globalQuotingPolicies;\\r\\n    mapping(address => mapping(address => mapping(address => DataTypesBasicPolicies.PairPolicy)))\\r\\n        internal _pairQuotingPolicies;\\r\\n    mapping(address => bool) internal _hasGlobalQuotingPolicy;\\r\\n    mapping(address => mapping(address => mapping(address => bool)))\\r\\n        internal _hasPairQuotingPolicy;\\r\\n    address public immutable addressRegistry;\\r\\n\\r\\n    constructor(address _addressRegistry) {\\r\\n        addressRegistry = _addressRegistry;\\r\\n    }\\r\\n\\r\\n    // @dev: When no global policy is set (default case), all pairs are automatically blocked except\\r\\n    // for those where a pair policy is explicitly set. In the case where a global policy is set,\\r\\n    // all pairs are assumed to be allowed (no blocking).\\r\\n    function setGlobalPolicy(\\r\\n        address lenderVault,\\r\\n        bytes calldata globalPolicyData\\r\\n    ) external {\\r\\n        // @dev: global policy applies across all pairs;\\r\\n        // note: pair policies (if defined) take precedence over global policy\\r\\n        _checkIsVaultAndSenderIsOwner(lenderVault);\\r\\n        if (globalPolicyData.length > 0) {\\r\\n            DataTypesBasicPolicies.GlobalPolicy memory globalPolicy = abi\\r\\n                .decode(\\r\\n                    globalPolicyData,\\r\\n                    (DataTypesBasicPolicies.GlobalPolicy)\\r\\n                );\\r\\n            DataTypesBasicPolicies.GlobalPolicy\\r\\n                memory currGlobalPolicy = _globalQuotingPolicies[lenderVault];\\r\\n            if (\\r\\n                globalPolicy.requiresOracle ==\\r\\n                currGlobalPolicy.requiresOracle &&\\r\\n                _equalQuoteBounds(\\r\\n                    globalPolicy.quoteBounds,\\r\\n                    currGlobalPolicy.quoteBounds\\r\\n                )\\r\\n            ) {\\r\\n                revert Errors.PolicyAlreadySet();\\r\\n            }\\r\\n            _checkNewQuoteBounds(globalPolicy.quoteBounds);\\r\\n            if (!_hasGlobalQuotingPolicy[lenderVault]) {\\r\\n                _hasGlobalQuotingPolicy[lenderVault] = true;\\r\\n            }\\r\\n            _globalQuotingPolicies[lenderVault] = globalPolicy;\\r\\n        } else {\\r\\n            if (!_hasGlobalQuotingPolicy[lenderVault]) {\\r\\n                revert Errors.NoPolicyToDelete();\\r\\n            }\\r\\n            delete _hasGlobalQuotingPolicy[lenderVault];\\r\\n            delete _globalQuotingPolicies[lenderVault];\\r\\n        }\\r\\n        emit GlobalPolicySet(lenderVault, globalPolicyData);\\r\\n    }\\r\\n\\r\\n    // @dev: If no global policy is set, then setting a pair policy allows one to explicitly unblock a specific pair;\\r\\n    // in the other case where a global policy is set, setting a pair policy allows overwriting global policy\\r\\n    // parameters as well as overwriting minimum signer threshold requirements.\\r\\n    function setPairPolicy(\\r\\n        address lenderVault,\\r\\n        address collToken,\\r\\n        address loanToken,\\r\\n        bytes calldata pairPolicyData\\r\\n    ) external {\\r\\n        // @dev: pair policies (if defined) take precedence over global policy\\r\\n        _checkIsVaultAndSenderIsOwner(lenderVault);\\r\\n        if (collToken == address(0) || loanToken == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        mapping(address => bool)\\r\\n            storage _hasSingleQuotingPolicy = _hasPairQuotingPolicy[\\r\\n                lenderVault\\r\\n            ][collToken];\\r\\n        if (pairPolicyData.length > 0) {\\r\\n            DataTypesBasicPolicies.PairPolicy memory singlePolicy = abi.decode(\\r\\n                pairPolicyData,\\r\\n                (DataTypesBasicPolicies.PairPolicy)\\r\\n            );\\r\\n            DataTypesBasicPolicies.PairPolicy\\r\\n                memory currSinglePolicy = _pairQuotingPolicies[lenderVault][\\r\\n                    collToken\\r\\n                ][loanToken];\\r\\n            if (\\r\\n                singlePolicy.requiresOracle ==\\r\\n                currSinglePolicy.requiresOracle &&\\r\\n                singlePolicy.minNumOfSignersOverwrite ==\\r\\n                currSinglePolicy.minNumOfSignersOverwrite &&\\r\\n                singlePolicy.minLoanPerCollUnit ==\\r\\n                currSinglePolicy.minLoanPerCollUnit &&\\r\\n                singlePolicy.maxLoanPerCollUnit ==\\r\\n                currSinglePolicy.maxLoanPerCollUnit &&\\r\\n                _equalQuoteBounds(\\r\\n                    singlePolicy.quoteBounds,\\r\\n                    currSinglePolicy.quoteBounds\\r\\n                )\\r\\n            ) {\\r\\n                revert Errors.PolicyAlreadySet();\\r\\n            }\\r\\n            _checkNewQuoteBounds(singlePolicy.quoteBounds);\\r\\n            if (\\r\\n                singlePolicy.minLoanPerCollUnit == 0 ||\\r\\n                singlePolicy.minLoanPerCollUnit >\\r\\n                singlePolicy.maxLoanPerCollUnit\\r\\n            ) {\\r\\n                revert Errors.InvalidLoanPerCollBounds();\\r\\n            }\\r\\n            if (!_hasSingleQuotingPolicy[loanToken]) {\\r\\n                _hasSingleQuotingPolicy[loanToken] = true;\\r\\n            }\\r\\n            _pairQuotingPolicies[lenderVault][collToken][\\r\\n                loanToken\\r\\n            ] = singlePolicy;\\r\\n        } else {\\r\\n            if (!_hasSingleQuotingPolicy[loanToken]) {\\r\\n                revert Errors.NoPolicyToDelete();\\r\\n            }\\r\\n            delete _hasSingleQuotingPolicy[loanToken];\\r\\n            delete _pairQuotingPolicies[lenderVault][collToken][loanToken];\\r\\n        }\\r\\n        emit PairPolicySet(lenderVault, collToken, loanToken, pairPolicyData);\\r\\n    }\\r\\n\\r\\n    function isAllowed(\\r\\n        address /*borrower*/,\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (bool _isAllowed, uint256 minNumOfSignersOverwrite)\\r\\n    {\\r\\n        DataTypesBasicPolicies.GlobalPolicy\\r\\n            memory globalPolicy = _globalQuotingPolicies[lenderVault];\\r\\n        bool hasPairPolicy = _hasPairQuotingPolicy[lenderVault][\\r\\n            generalQuoteInfo.collToken\\r\\n        ][generalQuoteInfo.loanToken];\\r\\n        if (!_hasGlobalQuotingPolicy[lenderVault] && !hasPairPolicy) {\\r\\n            return (false, 0);\\r\\n        }\\r\\n\\r\\n        // @dev: pair policy (if defined) takes precedence over global policy\\r\\n        bool hasOracle = generalQuoteInfo.oracleAddr != address(0);\\r\\n        bool checkLoanPerColl;\\r\\n        bool requiresOracle;\\r\\n        uint256[2] memory minMaxLoanPerCollUnit;\\r\\n        DataTypesBasicPolicies.QuoteBounds memory quoteBounds;\\r\\n        if (hasPairPolicy) {\\r\\n            DataTypesBasicPolicies.PairPolicy\\r\\n                memory singlePolicy = _pairQuotingPolicies[lenderVault][\\r\\n                    generalQuoteInfo.collToken\\r\\n                ][generalQuoteInfo.loanToken];\\r\\n            quoteBounds = singlePolicy.quoteBounds;\\r\\n            minMaxLoanPerCollUnit[0] = singlePolicy.minLoanPerCollUnit;\\r\\n            minMaxLoanPerCollUnit[1] = singlePolicy.maxLoanPerCollUnit;\\r\\n            requiresOracle = singlePolicy.requiresOracle;\\r\\n            minNumOfSignersOverwrite = singlePolicy.minNumOfSignersOverwrite;\\r\\n            checkLoanPerColl = !hasOracle;\\r\\n        } else {\\r\\n            quoteBounds = globalPolicy.quoteBounds;\\r\\n            requiresOracle = globalPolicy.requiresOracle;\\r\\n        }\\r\\n\\r\\n        if (requiresOracle && !hasOracle) {\\r\\n            return (false, 0);\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            _isAllowedWithBounds(\\r\\n                quoteBounds,\\r\\n                minMaxLoanPerCollUnit,\\r\\n                quoteTuple,\\r\\n                generalQuoteInfo.earliestRepayTenor,\\r\\n                hasOracle,\\r\\n                checkLoanPerColl\\r\\n            ),\\r\\n            minNumOfSignersOverwrite\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function globalQuotingPolicy(\\r\\n        address lenderVault\\r\\n    ) external view returns (DataTypesBasicPolicies.GlobalPolicy memory) {\\r\\n        if (!_hasGlobalQuotingPolicy[lenderVault]) {\\r\\n            revert Errors.NoPolicy();\\r\\n        }\\r\\n        return _globalQuotingPolicies[lenderVault];\\r\\n    }\\r\\n\\r\\n    function pairQuotingPolicy(\\r\\n        address lenderVault,\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view returns (DataTypesBasicPolicies.PairPolicy memory) {\\r\\n        if (!_hasPairQuotingPolicy[lenderVault][collToken][loanToken]) {\\r\\n            revert Errors.NoPolicy();\\r\\n        }\\r\\n        return _pairQuotingPolicies[lenderVault][collToken][loanToken];\\r\\n    }\\r\\n\\r\\n    function hasGlobalQuotingPolicy(\\r\\n        address lenderVault\\r\\n    ) external view returns (bool) {\\r\\n        return _hasGlobalQuotingPolicy[lenderVault];\\r\\n    }\\r\\n\\r\\n    function hasPairQuotingPolicy(\\r\\n        address lenderVault,\\r\\n        address collToken,\\r\\n        address loanToken\\r\\n    ) external view returns (bool) {\\r\\n        return _hasPairQuotingPolicy[lenderVault][collToken][loanToken];\\r\\n    }\\r\\n\\r\\n    function _checkIsVaultAndSenderIsOwner(address lenderVault) internal view {\\r\\n        if (!IAddressRegistry(addressRegistry).isRegisteredVault(lenderVault)) {\\r\\n            revert Errors.UnregisteredVault();\\r\\n        }\\r\\n        if (ILenderVaultImpl(lenderVault).owner() != msg.sender) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _equalQuoteBounds(\\r\\n        DataTypesBasicPolicies.QuoteBounds memory quoteBounds1,\\r\\n        DataTypesBasicPolicies.QuoteBounds memory quoteBounds2\\r\\n    ) internal pure returns (bool isEqual) {\\r\\n        if (\\r\\n            quoteBounds1.minTenor == quoteBounds2.minTenor &&\\r\\n            quoteBounds1.maxTenor == quoteBounds2.maxTenor &&\\r\\n            quoteBounds1.minFee == quoteBounds2.minFee &&\\r\\n            quoteBounds1.minApr == quoteBounds2.minApr &&\\r\\n            quoteBounds1.minLtv == quoteBounds2.minLtv &&\\r\\n            quoteBounds1.maxLtv == quoteBounds2.maxLtv\\r\\n        ) {\\r\\n            isEqual = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkNewQuoteBounds(\\r\\n        DataTypesBasicPolicies.QuoteBounds memory quoteBounds\\r\\n    ) internal pure {\\r\\n        // @dev: allow minTenor == 0 to enable swaps\\r\\n        if (quoteBounds.minTenor > quoteBounds.maxTenor) {\\r\\n            revert Errors.InvalidTenorBounds();\\r\\n        }\\r\\n        if (\\r\\n            quoteBounds.minLtv == 0 || quoteBounds.minLtv > quoteBounds.maxLtv\\r\\n        ) {\\r\\n            revert Errors.InvalidLtvBounds();\\r\\n        }\\r\\n        if (quoteBounds.minApr + int(Constants.BASE) <= 0) {\\r\\n            revert Errors.InvalidMinApr();\\r\\n        }\\r\\n        // @dev: if minFee = BASE, then only swaps will be allowed\\r\\n        if (quoteBounds.minFee > Constants.BASE) {\\r\\n            revert Errors.InvalidMinFee();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isAllowedWithBounds(\\r\\n        DataTypesBasicPolicies.QuoteBounds memory quoteBounds,\\r\\n        uint256[2] memory minMaxLoanPerCollUnit,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple,\\r\\n        uint256 earliestRepayTenor,\\r\\n        bool checkLtv,\\r\\n        bool checkLoanPerColl\\r\\n    ) internal pure returns (bool) {\\r\\n        if (\\r\\n            quoteTuple.tenor < quoteBounds.minTenor ||\\r\\n            quoteTuple.tenor > quoteBounds.maxTenor\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        if (checkLtv) {\\r\\n            // @dev: check either against LTV bounds\\r\\n            if (\\r\\n                quoteTuple.loanPerCollUnitOrLtv < quoteBounds.minLtv ||\\r\\n                quoteTuple.loanPerCollUnitOrLtv > quoteBounds.maxLtv\\r\\n            ) {\\r\\n                return false;\\r\\n            }\\r\\n        } else if (\\r\\n            // @dev: only check against absolute loan-per-coll bounds on pair policy and if no oracle\\r\\n            checkLoanPerColl &&\\r\\n            (quoteTuple.loanPerCollUnitOrLtv < minMaxLoanPerCollUnit[0] ||\\r\\n                quoteTuple.loanPerCollUnitOrLtv > minMaxLoanPerCollUnit[1])\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // @dev: if tenor is zero then tx is swap and no need to check apr\\r\\n        if (quoteTuple.tenor > 0) {\\r\\n            int256 apr = (quoteTuple.interestRatePctInBase *\\r\\n                SafeCast.toInt256(Constants.YEAR_IN_SECONDS)) /\\r\\n                SafeCast.toInt256(quoteTuple.tenor);\\r\\n            if (apr < quoteBounds.minApr) {\\r\\n                return false;\\r\\n            }\\r\\n            // @dev: disallow if negative apr and earliest repay is below bound\\r\\n            if (\\r\\n                apr < 0 &&\\r\\n                earliestRepayTenor < quoteBounds.minEarliestRepayTenor\\r\\n            ) {\\r\\n                return false;\\r\\n            }\\r\\n\\r\\n            // @dev: only check upfront fee for loans (can skip for swaps where tenor=0)\\r\\n            if (quoteTuple.upfrontFeePctInBase < quoteBounds.minFee) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/policyManagers/DataTypesBasicPolicies.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary DataTypesBasicPolicies {\\r\\n    struct QuoteBounds {\\r\\n        // Allowed minimum tenor for the quote (in seconds)\\r\\n        uint32 minTenor;\\r\\n        // Allowed maximum tenor for the quote (in seconds)\\r\\n        uint32 maxTenor;\\r\\n        // Allowed minimum fee for the quote (in BASE)\\r\\n        uint80 minFee;\\r\\n        // Allowed minimum APR for the quote (in BASE)\\r\\n        int80 minApr;\\r\\n        // Allowed minimum earliest repay tenor\\r\\n        uint32 minEarliestRepayTenor;\\r\\n        // Allowed minimum LTV for the quote\\r\\n        uint128 minLtv;\\r\\n        // Allowed maximum LTV for the quote\\r\\n        uint128 maxLtv;\\r\\n    }\\r\\n\\r\\n    struct GlobalPolicy {\\r\\n        // Applicable general bounds\\r\\n        QuoteBounds quoteBounds;\\r\\n        // Flag indicating if an oracle is required for the pair\\r\\n        bool requiresOracle;\\r\\n    }\\r\\n\\r\\n    struct PairPolicy {\\r\\n        // Applicable general bounds\\r\\n        QuoteBounds quoteBounds;\\r\\n        // Allowed minimum loan per collateral unit or LTV for the quote\\r\\n        uint128 minLoanPerCollUnit;\\r\\n        // Allowed maximum loan per collateral unit or LTV for the quote\\r\\n        uint128 maxLoanPerCollUnit;\\r\\n        // Flag indicating if an oracle is required for the pair\\r\\n        bool requiresOracle;\\r\\n        // Minimum number of signers required for the pair (if zero ignored, otherwise overwrites vault min signers)\\r\\n        // @dev: can overwrite signer threshold to be lower or higher than vault min signers\\r\\n        uint8 minNumOfSignersOverwrite;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/QuoteHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport {Constants} from \\\"../Constants.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"./DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../Errors.sol\\\";\\r\\nimport {Helpers} from \\\"../Helpers.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"./interfaces/IAddressRegistry.sol\\\";\\r\\nimport {ILenderVaultImpl} from \\\"./interfaces/ILenderVaultImpl.sol\\\";\\r\\nimport {IQuoteHandler} from \\\"./interfaces/IQuoteHandler.sol\\\";\\r\\nimport {IQuotePolicyManager} from \\\"./interfaces/policyManagers/IQuotePolicyManager.sol\\\";\\r\\n\\r\\ncontract QuoteHandler is IQuoteHandler {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    address public immutable addressRegistry;\\r\\n    mapping(address => uint256) public offChainQuoteNonce;\\r\\n    mapping(address => mapping(bytes32 => bool))\\r\\n        public offChainQuoteIsInvalidated;\\r\\n    mapping(address => mapping(bytes32 => bool)) public isOnChainQuote;\\r\\n    mapping(bytes32 => bool) public isPublishedOnChainQuote;\\r\\n    mapping(bytes32 => uint256) public publishedOnChainQuoteValidUntil;\\r\\n    mapping(address => address) public quotePolicyManagerForVault;\\r\\n    mapping(address => DataTypesPeerToPeer.OnChainQuoteInfo[])\\r\\n        internal _onChainQuoteHistory;\\r\\n\\r\\n    constructor(address _addressRegistry) {\\r\\n        if (_addressRegistry == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        addressRegistry = _addressRegistry;\\r\\n    }\\r\\n\\r\\n    function addOnChainQuote(\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote\\r\\n    ) external {\\r\\n        _checkIsVaultAndSenderIsApproved(lenderVault, false);\\r\\n        if (!_isValidOnChainQuote(onChainQuote)) {\\r\\n            revert Errors.InvalidQuote();\\r\\n        }\\r\\n        mapping(bytes32 => bool)\\r\\n            storage isOnChainQuoteFromVault = isOnChainQuote[lenderVault];\\r\\n        bytes32 onChainQuoteHash = _hashOnChainQuote(onChainQuote);\\r\\n        if (isOnChainQuoteFromVault[onChainQuoteHash]) {\\r\\n            revert Errors.OnChainQuoteAlreadyAdded();\\r\\n        }\\r\\n        // @dev: on-chain quote history is append only\\r\\n        _onChainQuoteHistory[lenderVault].push(\\r\\n            DataTypesPeerToPeer.OnChainQuoteInfo({\\r\\n                quoteHash: onChainQuoteHash,\\r\\n                validUntil: onChainQuote.generalQuoteInfo.validUntil\\r\\n            })\\r\\n        );\\r\\n        isOnChainQuoteFromVault[onChainQuoteHash] = true;\\r\\n        emit OnChainQuoteAdded(lenderVault, onChainQuote, onChainQuoteHash);\\r\\n    }\\r\\n\\r\\n    function updateOnChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 oldOnChainQuoteHash,\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata newOnChainQuote\\r\\n    ) external {\\r\\n        _checkIsVaultAndSenderIsApproved(lenderVault, false);\\r\\n        if (!_isValidOnChainQuote(newOnChainQuote)) {\\r\\n            revert Errors.InvalidQuote();\\r\\n        }\\r\\n        mapping(bytes32 => bool)\\r\\n            storage isOnChainQuoteFromVault = isOnChainQuote[lenderVault];\\r\\n        bytes32 newOnChainQuoteHash = _hashOnChainQuote(newOnChainQuote);\\r\\n        // this check will catch the case where the old quote is the same as the new quote\\r\\n        if (isOnChainQuoteFromVault[newOnChainQuoteHash]) {\\r\\n            revert Errors.OnChainQuoteAlreadyAdded();\\r\\n        }\\r\\n        if (!isOnChainQuoteFromVault[oldOnChainQuoteHash]) {\\r\\n            revert Errors.UnknownOnChainQuote();\\r\\n        }\\r\\n        // @dev: on-chain quote history is append only\\r\\n        _onChainQuoteHistory[lenderVault].push(\\r\\n            DataTypesPeerToPeer.OnChainQuoteInfo({\\r\\n                quoteHash: newOnChainQuoteHash,\\r\\n                validUntil: newOnChainQuote.generalQuoteInfo.validUntil\\r\\n            })\\r\\n        );\\r\\n        isOnChainQuoteFromVault[oldOnChainQuoteHash] = false;\\r\\n        emit OnChainQuoteDeleted(lenderVault, oldOnChainQuoteHash);\\r\\n\\r\\n        isOnChainQuoteFromVault[newOnChainQuoteHash] = true;\\r\\n        emit OnChainQuoteAdded(\\r\\n            lenderVault,\\r\\n            newOnChainQuote,\\r\\n            newOnChainQuoteHash\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deleteOnChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 onChainQuoteHash\\r\\n    ) external {\\r\\n        _checkIsVaultAndSenderIsApproved(lenderVault, false);\\r\\n        mapping(bytes32 => bool)\\r\\n            storage isOnChainQuoteFromVault = isOnChainQuote[lenderVault];\\r\\n        if (!isOnChainQuoteFromVault[onChainQuoteHash]) {\\r\\n            revert Errors.UnknownOnChainQuote();\\r\\n        }\\r\\n        isOnChainQuoteFromVault[onChainQuoteHash] = false;\\r\\n        emit OnChainQuoteDeleted(lenderVault, onChainQuoteHash);\\r\\n    }\\r\\n\\r\\n    function copyPublishedOnChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 onChainQuoteHash\\r\\n    ) external {\\r\\n        _checkIsVaultAndSenderIsApproved(lenderVault, false);\\r\\n        mapping(bytes32 => bool)\\r\\n            storage isOnChainQuoteFromVault = isOnChainQuote[lenderVault];\\r\\n        uint256 validUntil = publishedOnChainQuoteValidUntil[onChainQuoteHash];\\r\\n        if (\\r\\n            !isPublishedOnChainQuote[onChainQuoteHash] ||\\r\\n            isOnChainQuoteFromVault[onChainQuoteHash] ||\\r\\n            validUntil < block.timestamp\\r\\n        ) {\\r\\n            revert Errors.InvalidQuote();\\r\\n        }\\r\\n        // @dev: on-chain quote history is append only\\r\\n        _onChainQuoteHistory[lenderVault].push(\\r\\n            DataTypesPeerToPeer.OnChainQuoteInfo({\\r\\n                quoteHash: onChainQuoteHash,\\r\\n                validUntil: validUntil\\r\\n            })\\r\\n        );\\r\\n        isOnChainQuoteFromVault[onChainQuoteHash] = true;\\r\\n        emit OnChainQuoteCopied(lenderVault, onChainQuoteHash);\\r\\n    }\\r\\n\\r\\n    function publishOnChainQuote(\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote\\r\\n    ) external {\\r\\n        if (!_isValidOnChainQuote(onChainQuote)) {\\r\\n            revert Errors.InvalidQuote();\\r\\n        }\\r\\n        bytes32 onChainQuoteHash = _hashOnChainQuote(onChainQuote);\\r\\n        if (isPublishedOnChainQuote[onChainQuoteHash]) {\\r\\n            revert Errors.AlreadyPublished();\\r\\n        }\\r\\n        isPublishedOnChainQuote[onChainQuoteHash] = true;\\r\\n        publishedOnChainQuoteValidUntil[onChainQuoteHash] = onChainQuote\\r\\n            .generalQuoteInfo\\r\\n            .validUntil;\\r\\n        emit OnChainQuotePublished(onChainQuote, onChainQuoteHash, msg.sender);\\r\\n    }\\r\\n\\r\\n    function incrementOffChainQuoteNonce(address lenderVault) external {\\r\\n        _checkIsVaultAndSenderIsApproved(lenderVault, true);\\r\\n        uint256 newNonce = offChainQuoteNonce[lenderVault] + 1;\\r\\n        offChainQuoteNonce[lenderVault] = newNonce;\\r\\n        emit OffChainQuoteNonceIncremented(lenderVault, newNonce);\\r\\n    }\\r\\n\\r\\n    function invalidateOffChainQuote(\\r\\n        address lenderVault,\\r\\n        bytes32 offChainQuoteHash\\r\\n    ) external {\\r\\n        _checkIsVaultAndSenderIsApproved(lenderVault, true);\\r\\n        offChainQuoteIsInvalidated[lenderVault][offChainQuoteHash] = true;\\r\\n        emit OffChainQuoteInvalidated(lenderVault, offChainQuoteHash);\\r\\n    }\\r\\n\\r\\n    function checkAndRegisterOnChainQuote(\\r\\n        address borrower,\\r\\n        address lenderVault,\\r\\n        uint256 quoteTupleIdx,\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote\\r\\n    ) external {\\r\\n        if (quoteTupleIdx >= onChainQuote.quoteTuples.length) {\\r\\n            revert Errors.InvalidArrayIndex();\\r\\n        }\\r\\n        // @dev: ignore returned minNumOfSignersOverwrite for on-chain quotes\\r\\n        _checkSenderAndPolicyAndQuoteInfo(\\r\\n            borrower,\\r\\n            lenderVault,\\r\\n            onChainQuote.generalQuoteInfo,\\r\\n            onChainQuote.quoteTuples[quoteTupleIdx]\\r\\n        );\\r\\n        mapping(bytes32 => bool)\\r\\n            storage isOnChainQuoteFromVault = isOnChainQuote[lenderVault];\\r\\n        bytes32 onChainQuoteHash = _hashOnChainQuote(onChainQuote);\\r\\n        if (!isOnChainQuoteFromVault[onChainQuoteHash]) {\\r\\n            revert Errors.UnknownOnChainQuote();\\r\\n        }\\r\\n        if (onChainQuote.generalQuoteInfo.isSingleUse) {\\r\\n            isOnChainQuoteFromVault[onChainQuoteHash] = false;\\r\\n            emit OnChainQuoteInvalidated(lenderVault, onChainQuoteHash);\\r\\n        }\\r\\n        uint256 nextLoanIdx = ILenderVaultImpl(lenderVault).totalNumLoans();\\r\\n        emit OnChainQuoteUsed(\\r\\n            lenderVault,\\r\\n            onChainQuoteHash,\\r\\n            nextLoanIdx,\\r\\n            quoteTupleIdx\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function checkAndRegisterOffChainQuote(\\r\\n        address borrower,\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.OffChainQuote calldata offChainQuote,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple,\\r\\n        bytes32[] calldata proof\\r\\n    ) external {\\r\\n        uint256 minNumOfSignersOverwrite = _checkSenderAndPolicyAndQuoteInfo(\\r\\n            borrower,\\r\\n            lenderVault,\\r\\n            offChainQuote.generalQuoteInfo,\\r\\n            quoteTuple\\r\\n        );\\r\\n        if (offChainQuote.nonce < offChainQuoteNonce[lenderVault]) {\\r\\n            revert Errors.InvalidQuote();\\r\\n        }\\r\\n        mapping(bytes32 => bool)\\r\\n            storage offChainQuoteFromVaultIsInvalidated = offChainQuoteIsInvalidated[\\r\\n                lenderVault\\r\\n            ];\\r\\n        bytes32 offChainQuoteHash = _hashOffChainQuote(\\r\\n            offChainQuote,\\r\\n            lenderVault\\r\\n        );\\r\\n        if (offChainQuoteFromVaultIsInvalidated[offChainQuoteHash]) {\\r\\n            revert Errors.OffChainQuoteHasBeenInvalidated();\\r\\n        }\\r\\n        if (\\r\\n            !_areValidSignatures(\\r\\n                lenderVault,\\r\\n                offChainQuoteHash,\\r\\n                minNumOfSignersOverwrite,\\r\\n                offChainQuote.compactSigs\\r\\n            )\\r\\n        ) {\\r\\n            revert Errors.InvalidOffChainSignature();\\r\\n        }\\r\\n\\r\\n        bytes32 leaf = keccak256(\\r\\n            bytes.concat(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        quoteTuple.loanPerCollUnitOrLtv,\\r\\n                        quoteTuple.interestRatePctInBase,\\r\\n                        quoteTuple.upfrontFeePctInBase,\\r\\n                        quoteTuple.tenor\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n        if (!MerkleProof.verify(proof, offChainQuote.quoteTuplesRoot, leaf)) {\\r\\n            revert Errors.InvalidOffChainMerkleProof();\\r\\n        }\\r\\n        if (offChainQuote.generalQuoteInfo.isSingleUse) {\\r\\n            offChainQuoteFromVaultIsInvalidated[offChainQuoteHash] = true;\\r\\n            emit OffChainQuoteInvalidated(lenderVault, offChainQuoteHash);\\r\\n        }\\r\\n        uint256 toBeRegisteredLoanId = ILenderVaultImpl(lenderVault)\\r\\n            .totalNumLoans();\\r\\n        emit OffChainQuoteUsed(\\r\\n            lenderVault,\\r\\n            offChainQuoteHash,\\r\\n            toBeRegisteredLoanId,\\r\\n            quoteTuple\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateQuotePolicyManagerForVault(\\r\\n        address lenderVault,\\r\\n        address newPolicyManagerAddress\\r\\n    ) external {\\r\\n        _checkIsVaultAndSenderIsApproved(lenderVault, true);\\r\\n        if (newPolicyManagerAddress == address(0)) {\\r\\n            delete quotePolicyManagerForVault[lenderVault];\\r\\n        } else {\\r\\n            if (\\r\\n                IAddressRegistry(addressRegistry).whitelistState(\\r\\n                    newPolicyManagerAddress\\r\\n                ) !=\\r\\n                DataTypesPeerToPeer.WhitelistState.QUOTE_POLICY_MANAGER ||\\r\\n                newPolicyManagerAddress ==\\r\\n                quotePolicyManagerForVault[lenderVault]\\r\\n            ) {\\r\\n                revert Errors.InvalidAddress();\\r\\n            }\\r\\n            // note: this will overwrite any existing policy manager to a new valid quote policy manager\\r\\n            quotePolicyManagerForVault[lenderVault] = newPolicyManagerAddress;\\r\\n        }\\r\\n        emit QuotePolicyManagerUpdated(lenderVault, newPolicyManagerAddress);\\r\\n    }\\r\\n\\r\\n    function getOnChainQuoteHistory(\\r\\n        address lenderVault,\\r\\n        uint256 idx\\r\\n    ) external view returns (DataTypesPeerToPeer.OnChainQuoteInfo memory) {\\r\\n        if (idx < _onChainQuoteHistory[lenderVault].length) {\\r\\n            return _onChainQuoteHistory[lenderVault][idx];\\r\\n        } else {\\r\\n            revert Errors.InvalidArrayIndex();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getOnChainQuoteHistorySlice(\\r\\n        address lenderVault,\\r\\n        uint256 startIdx,\\r\\n        uint256 endIdx\\r\\n    ) external view returns (DataTypesPeerToPeer.OnChainQuoteInfo[] memory) {\\r\\n        uint256 onChainQuoteHistoryLen = _onChainQuoteHistory[lenderVault]\\r\\n            .length;\\r\\n        if (startIdx > endIdx || startIdx >= onChainQuoteHistoryLen) {\\r\\n            revert Errors.InvalidArrayIndex();\\r\\n        }\\r\\n        endIdx = endIdx < onChainQuoteHistoryLen\\r\\n            ? endIdx\\r\\n            : onChainQuoteHistoryLen;\\r\\n        if (startIdx == 0 && endIdx == onChainQuoteHistoryLen) {\\r\\n            return _onChainQuoteHistory[lenderVault];\\r\\n        }\\r\\n        DataTypesPeerToPeer.OnChainQuoteInfo[]\\r\\n            memory onChainQuoteHistoryRequested = new DataTypesPeerToPeer.OnChainQuoteInfo[](\\r\\n                endIdx - startIdx\\r\\n            );\\r\\n        for (uint256 i = startIdx; i < endIdx; ) {\\r\\n            onChainQuoteHistoryRequested[i - startIdx] = _onChainQuoteHistory[\\r\\n                lenderVault\\r\\n            ][i];\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return onChainQuoteHistoryRequested;\\r\\n    }\\r\\n\\r\\n    function getOnChainQuoteHistoryLength(\\r\\n        address lenderVault\\r\\n    ) external view returns (uint256) {\\r\\n        return _onChainQuoteHistory[lenderVault].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The passed signatures must be sorted such that recovered addresses are increasing.\\r\\n     */\\r\\n    function _areValidSignatures(\\r\\n        address lenderVault,\\r\\n        bytes32 offChainQuoteHash,\\r\\n        uint256 minNumOfSignersOverwrite,\\r\\n        bytes[] calldata compactSigs\\r\\n    ) internal view returns (bool) {\\r\\n        uint256 compactSigsLength = compactSigs.length;\\r\\n        // @dev: if defined in policy, allow overwriting of min number of signers (except zero)\\r\\n        uint256 minNumOfSigners = minNumOfSignersOverwrite == 0\\r\\n            ? ILenderVaultImpl(lenderVault).minNumOfSigners()\\r\\n            : minNumOfSignersOverwrite;\\r\\n        if (compactSigsLength < minNumOfSigners) {\\r\\n            return false;\\r\\n        }\\r\\n        bytes32 messageHash = ECDSA.toEthSignedMessageHash(offChainQuoteHash);\\r\\n        address recoveredSigner;\\r\\n        address prevSigner;\\r\\n        for (uint256 i; i < compactSigsLength; ) {\\r\\n            (bytes32 r, bytes32 vs) = Helpers.splitSignature(compactSigs[i]);\\r\\n            recoveredSigner = messageHash.recover(r, vs);\\r\\n            if (!ILenderVaultImpl(lenderVault).isSigner(recoveredSigner)) {\\r\\n                return false;\\r\\n            }\\r\\n            if (recoveredSigner <= prevSigner) {\\r\\n                return false;\\r\\n            }\\r\\n            prevSigner = recoveredSigner;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _hashOffChainQuote(\\r\\n        DataTypesPeerToPeer.OffChainQuote memory offChainQuote,\\r\\n        address lenderVault\\r\\n    ) internal view returns (bytes32 quoteHash) {\\r\\n        quoteHash = keccak256(\\r\\n            abi.encode(\\r\\n                offChainQuote.generalQuoteInfo,\\r\\n                offChainQuote.quoteTuplesRoot,\\r\\n                offChainQuote.salt,\\r\\n                offChainQuote.nonce,\\r\\n                lenderVault,\\r\\n                block.chainid\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _checkSenderAndPolicyAndQuoteInfo(\\r\\n        address borrower,\\r\\n        address lenderVault,\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple\\r\\n    ) internal view returns (uint256 minNumOfSignersOverwrite) {\\r\\n        if (msg.sender != IAddressRegistry(addressRegistry).borrowerGateway()) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        address quotePolicyManager = quotePolicyManagerForVault[lenderVault];\\r\\n        if (quotePolicyManager != address(0)) {\\r\\n            bool isAllowed;\\r\\n            (isAllowed, minNumOfSignersOverwrite) = IQuotePolicyManager(\\r\\n                quotePolicyManager\\r\\n            ).isAllowed(borrower, lenderVault, generalQuoteInfo, quoteTuple);\\r\\n            if (!isAllowed) {\\r\\n                revert Errors.QuoteViolatesPolicy();\\r\\n            }\\r\\n        }\\r\\n        _checkWhitelist(\\r\\n            generalQuoteInfo.collToken,\\r\\n            generalQuoteInfo.loanToken,\\r\\n            generalQuoteInfo.borrowerCompartmentImplementation,\\r\\n            generalQuoteInfo.oracleAddr,\\r\\n            _isSwap(generalQuoteInfo, quoteTuple)\\r\\n        );\\r\\n        if (generalQuoteInfo.validUntil < block.timestamp) {\\r\\n            revert Errors.OutdatedQuote();\\r\\n        }\\r\\n        if (\\r\\n            generalQuoteInfo.collToken == generalQuoteInfo.loanToken ||\\r\\n            generalQuoteInfo.maxLoan == 0 ||\\r\\n            generalQuoteInfo.minLoan == 0 ||\\r\\n            generalQuoteInfo.minLoan > generalQuoteInfo.maxLoan\\r\\n        ) {\\r\\n            revert Errors.InvalidQuote();\\r\\n        }\\r\\n        if (\\r\\n            generalQuoteInfo.whitelistAddr != address(0) &&\\r\\n            ((generalQuoteInfo.isWhitelistAddrSingleBorrower &&\\r\\n                generalQuoteInfo.whitelistAddr != borrower) ||\\r\\n                (!generalQuoteInfo.isWhitelistAddrSingleBorrower &&\\r\\n                    !IAddressRegistry(addressRegistry).isWhitelistedBorrower(\\r\\n                        generalQuoteInfo.whitelistAddr,\\r\\n                        borrower\\r\\n                    )))\\r\\n        ) {\\r\\n            revert Errors.InvalidBorrower();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isValidOnChainQuote(\\r\\n        DataTypesPeerToPeer.OnChainQuote calldata onChainQuote\\r\\n    ) internal view returns (bool) {\\r\\n        if (\\r\\n            onChainQuote.generalQuoteInfo.collToken ==\\r\\n            onChainQuote.generalQuoteInfo.loanToken\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        if (onChainQuote.generalQuoteInfo.validUntil < block.timestamp) {\\r\\n            return false;\\r\\n        }\\r\\n        if (\\r\\n            onChainQuote.generalQuoteInfo.maxLoan == 0 ||\\r\\n            onChainQuote.generalQuoteInfo.minLoan == 0 ||\\r\\n            onChainQuote.generalQuoteInfo.minLoan >\\r\\n            onChainQuote.generalQuoteInfo.maxLoan\\r\\n        ) {\\r\\n            return false;\\r\\n        }\\r\\n        uint256 quoteTuplesLen = onChainQuote.quoteTuples.length;\\r\\n        if (quoteTuplesLen == 0) {\\r\\n            return false;\\r\\n        }\\r\\n        bool isSwap;\\r\\n        for (uint256 k; k < quoteTuplesLen; ) {\\r\\n            (bool isValid, bool isSwapCurr) = _isValidOnChainQuoteTuple(\\r\\n                onChainQuote.generalQuoteInfo,\\r\\n                onChainQuote.quoteTuples[k]\\r\\n            );\\r\\n            if (!isValid) {\\r\\n                return false;\\r\\n            }\\r\\n            if (isSwapCurr && quoteTuplesLen > 1) {\\r\\n                return false;\\r\\n            }\\r\\n            isSwap = isSwapCurr;\\r\\n            unchecked {\\r\\n                ++k;\\r\\n            }\\r\\n        }\\r\\n        _checkWhitelist(\\r\\n            onChainQuote.generalQuoteInfo.collToken,\\r\\n            onChainQuote.generalQuoteInfo.loanToken,\\r\\n            onChainQuote.generalQuoteInfo.borrowerCompartmentImplementation,\\r\\n            onChainQuote.generalQuoteInfo.oracleAddr,\\r\\n            isSwap\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _checkWhitelist(\\r\\n        address collToken,\\r\\n        address loanToken,\\r\\n        address compartmentImpl,\\r\\n        address oracleAddr,\\r\\n        bool isSwap\\r\\n    ) internal view {\\r\\n        if (\\r\\n            !IAddressRegistry(addressRegistry).isWhitelistedERC20(loanToken) ||\\r\\n            !IAddressRegistry(addressRegistry).isWhitelistedERC20(collToken)\\r\\n        ) {\\r\\n            revert Errors.NonWhitelistedToken();\\r\\n        }\\r\\n\\r\\n        if (isSwap) {\\r\\n            if (compartmentImpl != address(0)) {\\r\\n                revert Errors.InvalidSwap();\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n        if (compartmentImpl == address(0)) {\\r\\n            DataTypesPeerToPeer.WhitelistState collTokenWhitelistState = IAddressRegistry(\\r\\n                    addressRegistry\\r\\n                ).whitelistState(collToken);\\r\\n            if (\\r\\n                collTokenWhitelistState ==\\r\\n                DataTypesPeerToPeer\\r\\n                    .WhitelistState\\r\\n                    .ERC20_TOKEN_REQUIRING_COMPARTMENT\\r\\n            ) {\\r\\n                revert Errors.CollateralMustBeCompartmentalized();\\r\\n            }\\r\\n        } else {\\r\\n            if (\\r\\n                !IAddressRegistry(addressRegistry).isWhitelistedCompartment(\\r\\n                    compartmentImpl,\\r\\n                    collToken\\r\\n                )\\r\\n            ) {\\r\\n                revert Errors.InvalidCompartmentForToken();\\r\\n            }\\r\\n        }\\r\\n        if (\\r\\n            oracleAddr != address(0) &&\\r\\n            IAddressRegistry(addressRegistry).whitelistState(oracleAddr) !=\\r\\n            DataTypesPeerToPeer.WhitelistState.ORACLE\\r\\n        ) {\\r\\n            revert Errors.NonWhitelistedOracle();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkIsVaultAndSenderIsApproved(\\r\\n        address lenderVault,\\r\\n        bool onlyOwner\\r\\n    ) internal view {\\r\\n        if (!IAddressRegistry(addressRegistry).isRegisteredVault(lenderVault)) {\\r\\n            revert Errors.UnregisteredVault();\\r\\n        }\\r\\n        if (\\r\\n            ILenderVaultImpl(lenderVault).owner() != msg.sender &&\\r\\n            (onlyOwner ||\\r\\n                ILenderVaultImpl(lenderVault).onChainQuotingDelegate() !=\\r\\n                msg.sender)\\r\\n        ) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _hashOnChainQuote(\\r\\n        DataTypesPeerToPeer.OnChainQuote memory onChainQuote\\r\\n    ) internal pure returns (bytes32 quoteHash) {\\r\\n        quoteHash = keccak256(abi.encode(onChainQuote));\\r\\n    }\\r\\n\\r\\n    function _isValidOnChainQuoteTuple(\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple\\r\\n    ) internal pure returns (bool, bool) {\\r\\n        bool isSwap = _isSwap(generalQuoteInfo, quoteTuple);\\r\\n        if (quoteTuple.upfrontFeePctInBase < Constants.BASE) {\\r\\n            // note: if upfrontFee<100% this corresponds to a loan; check that tenor and earliest repay are consistent\\r\\n            if (\\r\\n                quoteTuple.tenor <\\r\\n                generalQuoteInfo.earliestRepayTenor +\\r\\n                    Constants.MIN_TIME_BETWEEN_EARLIEST_REPAY_AND_EXPIRY\\r\\n            ) {\\r\\n                return (false, isSwap);\\r\\n            }\\r\\n        } else if (quoteTuple.upfrontFeePctInBase == Constants.BASE) {\\r\\n            // note: if upfrontFee=100% this corresponds to an outright swap; check other fields are consistent\\r\\n            if (!isSwap) {\\r\\n                return (false, isSwap);\\r\\n            }\\r\\n        } else {\\r\\n            // note: if upfrontFee>100% this is invalid\\r\\n            return (false, isSwap);\\r\\n        }\\r\\n\\r\\n        if (quoteTuple.loanPerCollUnitOrLtv == 0) {\\r\\n            return (false, isSwap);\\r\\n        }\\r\\n        // If the oracle address is set and there is not specified whitelistAddr\\r\\n        // then LTV must be set to a value <= 100% (overcollateralized).\\r\\n        // note: Loans with whitelisted borrowers CAN be undercollateralized with oracles (LTV > 100%).\\r\\n        // oracle address is set\\r\\n        // ---> whitelistAddr is not set\\r\\n        // ---> ---> LTV must be overcollateralized\\r\\n        // ---> whitelistAddr is set\\r\\n        // ---> ---> LTV can be any\\r\\n        // oracle address is not set\\r\\n        // ---> loanPerCollUnit can be any with or without whitelistAddr\\r\\n        if (\\r\\n            generalQuoteInfo.oracleAddr != address(0) &&\\r\\n            quoteTuple.loanPerCollUnitOrLtv > Constants.BASE &&\\r\\n            generalQuoteInfo.whitelistAddr == address(0)\\r\\n        ) {\\r\\n            return (false, isSwap);\\r\\n        }\\r\\n        if (quoteTuple.interestRatePctInBase + int(Constants.BASE) <= 0) {\\r\\n            return (false, isSwap);\\r\\n        }\\r\\n        return (true, isSwap);\\r\\n    }\\r\\n\\r\\n    function _isSwap(\\r\\n        DataTypesPeerToPeer.GeneralQuoteInfo calldata generalQuoteInfo,\\r\\n        DataTypesPeerToPeer.QuoteTuple calldata quoteTuple\\r\\n    ) internal pure returns (bool) {\\r\\n        return\\r\\n            quoteTuple.upfrontFeePctInBase == Constants.BASE &&\\r\\n            quoteTuple.tenor + generalQuoteInfo.earliestRepayTenor == 0 &&\\r\\n            quoteTuple.interestRatePctInBase == 0 &&\\r\\n            generalQuoteInfo.borrowerCompartmentImplementation == address(0);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/wrappers/ERC20/ERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"../../interfaces/IAddressRegistry.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../../../peer-to-peer/DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\nimport {IERC20Wrapper} from \\\"../../interfaces/wrappers/ERC20/IERC20Wrapper.sol\\\";\\r\\nimport {IWrappedERC20Impl} from \\\"../../interfaces/wrappers/ERC20/IWrappedERC20Impl.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC20Wrapper is a contract that wraps tokens from possibly multiple ERC20 contracts\\r\\n * IMPORTANT: This contract allows for wrapping tokens that are whitelisted with the address registry.\\r\\n */\\r\\ncontract ERC20Wrapper is ReentrancyGuard, IERC20Wrapper {\\r\\n    using SafeERC20 for IERC20;\\r\\n    address public immutable addressRegistry;\\r\\n    address public immutable wrappedErc20Impl;\\r\\n    address[] public tokensCreated;\\r\\n\\r\\n    constructor(address _addressRegistry, address _wrappedErc20Impl) {\\r\\n        if (_addressRegistry == address(0) || _wrappedErc20Impl == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        addressRegistry = _addressRegistry;\\r\\n        wrappedErc20Impl = _wrappedErc20Impl;\\r\\n    }\\r\\n\\r\\n    // token addresses must be unique and passed in increasing order.\\r\\n    // token amounts must be non-zero.\\r\\n    // minter must approve this contract to transfer all tokens to be wrapped.\\r\\n    function createWrappedToken(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata tokensToBeWrapped,\\r\\n        string calldata name,\\r\\n        string calldata symbol\\r\\n    ) external nonReentrant returns (address newErc20Addr) {\\r\\n        if (msg.sender != addressRegistry) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        if (minter == address(0) || minter == address(this)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        // @dev: allow multiple wrappers with same underlyings to exist\\r\\n        // note: in case a griefer wanted to lock-up a wrapper token one could easily create another one\\r\\n        newErc20Addr = Clones.clone(wrappedErc20Impl);\\r\\n        tokensCreated.push(newErc20Addr);\\r\\n\\r\\n        // @dev: external call happens before state update due to minTokenAmount determination\\r\\n        (\\r\\n            uint256 numTokensToBeWrapped,\\r\\n            uint256 minTokenAmount\\r\\n        ) = _transferTokens(minter, tokensToBeWrapped, newErc20Addr);\\r\\n        // @dev: case where numTokensToBeWrapped == 0 represents an IOU token\\r\\n        IWrappedERC20Impl(newErc20Addr).initialize(\\r\\n            minter,\\r\\n            tokensToBeWrapped,\\r\\n            numTokensToBeWrapped == 0 ? 10 ** 18 : minTokenAmount,\\r\\n            name,\\r\\n            symbol\\r\\n        );\\r\\n        emit ERC20WrapperCreated(\\r\\n            newErc20Addr,\\r\\n            minter,\\r\\n            tokensCreated.length,\\r\\n            tokensToBeWrapped\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function allTokensCreated() external view returns (address[] memory) {\\r\\n        return tokensCreated;\\r\\n    }\\r\\n\\r\\n    function numTokensCreated() external view returns (uint256) {\\r\\n        return tokensCreated.length;\\r\\n    }\\r\\n\\r\\n    function _transferTokens(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata tokensToBeWrapped,\\r\\n        address newErc20Addr\\r\\n    ) internal returns (uint256 numTokensToBeWrapped, uint256 minTokenAmount) {\\r\\n        minTokenAmount = type(uint256).max;\\r\\n        address prevTokenAddress;\\r\\n        address currAddress;\\r\\n        numTokensToBeWrapped = tokensToBeWrapped.length;\\r\\n        for (uint256 i; i < numTokensToBeWrapped; ) {\\r\\n            if (\\r\\n                !IAddressRegistry(addressRegistry).isWhitelistedERC20(\\r\\n                    tokensToBeWrapped[i].tokenAddr\\r\\n                )\\r\\n            ) {\\r\\n                revert Errors.NonWhitelistedToken();\\r\\n            }\\r\\n            currAddress = tokensToBeWrapped[i].tokenAddr;\\r\\n            if (currAddress <= prevTokenAddress) {\\r\\n                revert Errors.NonIncreasingTokenAddrs();\\r\\n            }\\r\\n            if (tokensToBeWrapped[i].tokenAmount == 0) {\\r\\n                revert Errors.InvalidSendAmount();\\r\\n            }\\r\\n            minTokenAmount = minTokenAmount > tokensToBeWrapped[i].tokenAmount\\r\\n                ? tokensToBeWrapped[i].tokenAmount\\r\\n                : minTokenAmount;\\r\\n            IERC20(tokensToBeWrapped[i].tokenAddr).safeTransferFrom(\\r\\n                minter,\\r\\n                newErc20Addr,\\r\\n                tokensToBeWrapped[i].tokenAmount\\r\\n            );\\r\\n            prevTokenAddress = currAddress;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/wrappers/ERC20/WrappedERC20Impl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {Constants} from \\\"../../../Constants.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../../DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"../../interfaces/IAddressRegistry.sol\\\";\\r\\nimport {IWrappedERC20Impl} from \\\"../../interfaces/wrappers/ERC20/IWrappedERC20Impl.sol\\\";\\r\\n\\r\\ncontract WrappedERC20Impl is\\r\\n    ERC20,\\r\\n    Initializable,\\r\\n    ReentrancyGuard,\\r\\n    IWrappedERC20Impl\\r\\n{\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    string internal _tokenName;\\r\\n    string internal _tokenSymbol;\\r\\n    uint8 internal _tokenDecimals;\\r\\n    address[] internal _wrappedTokens;\\r\\n\\r\\n    constructor() ERC20(\\\"Wrapped ERC20 Impl\\\", \\\"Wrapped ERC20 Impl\\\") {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC20TokenInfo[] calldata wrappedTokens,\\r\\n        uint256 totalInitialSupply,\\r\\n        string calldata _name,\\r\\n        string calldata _symbol\\r\\n    ) external initializer {\\r\\n        uint256 wrappedTokensLen = wrappedTokens.length;\\r\\n        if (wrappedTokensLen == 1) {\\r\\n            // check for minimum mint amount\\r\\n            if (totalInitialSupply <= Constants.SINGLE_WRAPPER_MIN_MINT) {\\r\\n                revert Errors.InvalidMintAmount();\\r\\n            }\\r\\n            _tokenDecimals = IERC20Metadata(wrappedTokens[0].tokenAddr)\\r\\n                .decimals();\\r\\n            _wrappedTokens.push(wrappedTokens[0].tokenAddr);\\r\\n\\r\\n            // @dev: mint small dust amount to this address, which will be locked in contract\\r\\n            // @note: given this initial mint amount the wrapper cannot easily be locked up for future mints\\r\\n            _mint(address(this), Constants.SINGLE_WRAPPER_MIN_MINT);\\r\\n            _mint(\\r\\n                minter,\\r\\n                totalInitialSupply - Constants.SINGLE_WRAPPER_MIN_MINT\\r\\n            );\\r\\n        } else {\\r\\n            _tokenDecimals = 18;\\r\\n            for (uint256 i; i < wrappedTokensLen; ) {\\r\\n                _wrappedTokens.push(wrappedTokens[i].tokenAddr);\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n            _mint(\\r\\n                minter,\\r\\n                totalInitialSupply < 10 ** 18 ? totalInitialSupply : 10 ** 18\\r\\n            );\\r\\n        }\\r\\n        _tokenName = _name;\\r\\n        _tokenSymbol = _symbol;\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n        address account,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external nonReentrant {\\r\\n        if (amount == 0) {\\r\\n            revert Errors.InvalidAmount();\\r\\n        }\\r\\n        if (recipient == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        uint256 currTotalSupply = totalSupply();\\r\\n        if (msg.sender != account) {\\r\\n            _spendAllowance(account, msg.sender, amount);\\r\\n        }\\r\\n        _burn(account, amount);\\r\\n\\r\\n        // @dev: if isIOU then _wrappedTokens.length == 0 and this loop is skipped automatically\\r\\n        uint256 wrappedTokensLen = _wrappedTokens.length;\\r\\n        for (uint256 i; i < wrappedTokensLen; ) {\\r\\n            address tokenAddr = _wrappedTokens[i];\\r\\n            // @note: The underlying token transfers are all-or-nothing. In other words, if one token transfer fails,\\r\\n            // the entire redemption process will fail as well. Users should only use wrappers if they deem this risk\\r\\n            // to be acceptable or non-existent (for example, in cases where the underlying tokens can never have any\\r\\n            // transfer restrictions).\\r\\n            uint256 redemptionAmount = Math.mulDiv(\\r\\n                IERC20Metadata(tokenAddr).balanceOf(address(this)),\\r\\n                amount,\\r\\n                currTotalSupply\\r\\n            );\\r\\n            IERC20Metadata(tokenAddr).safeTransfer(recipient, redemptionAmount);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        emit Redeemed(account, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 expectedTransferFee\\r\\n    ) external nonReentrant {\\r\\n        if (_wrappedTokens.length != 1) {\\r\\n            // @dev: only on single token wrappers do we allow minting\\r\\n            // @note: IOU has no underlying tokens, so they are also disabled from minting\\r\\n            revert Errors.OnlyMintFromSingleTokenWrapper();\\r\\n        }\\r\\n        if (amount == 0) {\\r\\n            revert Errors.InvalidAmount();\\r\\n        }\\r\\n        if (recipient == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        uint256 currTotalSupply = totalSupply();\\r\\n        address tokenAddr = _wrappedTokens[0];\\r\\n        uint256 tokenPreBal = IERC20Metadata(tokenAddr).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        if (tokenPreBal == 0) {\\r\\n            // @dev: this would be an unintended state, for instance a negative rebase down to 0 balance with still outstanding supply\\r\\n            // in which case to not allow possibly diluted or unfair proportions for new minters, will revert\\r\\n            // @note: the state token balance > 0, but total supply == 0 is allowed (e.g. donations to address before mint)\\r\\n            revert Errors.NonMintableTokenState();\\r\\n        }\\r\\n        uint256 mintAmount = Math.mulDiv(amount, currTotalSupply, tokenPreBal);\\r\\n        // @dev: revert in case mint amount is truncated to zero. This may also happen in case the mint transaction is front-run\\r\\n        // with donations. Note that griefing with donations will be costly due to redemption fee.\\r\\n        if (mintAmount == 0) {\\r\\n            revert Errors.InvalidMintAmount();\\r\\n        }\\r\\n        _mint(recipient, mintAmount);\\r\\n        IERC20Metadata(tokenAddr).safeTransferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            amount + expectedTransferFee\\r\\n        );\\r\\n        uint256 tokenPostBal = IERC20Metadata(tokenAddr).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        if (tokenPostBal != tokenPreBal + amount) {\\r\\n            revert Errors.InvalidSendAmount();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isIOU() external view returns (bool) {\\r\\n        return _wrappedTokens.length == 0;\\r\\n    }\\r\\n\\r\\n    function getWrappedTokensInfo() external view returns (address[] memory) {\\r\\n        return _wrappedTokens;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _tokenName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _tokenSymbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _tokenDecimals;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/wrappers/ERC721/ERC721Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IAddressRegistry} from \\\"../../interfaces/IAddressRegistry.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../../DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\nimport {IERC721Wrapper} from \\\"../../interfaces/wrappers/ERC721/IERC721Wrapper.sol\\\";\\r\\nimport {IWrappedERC721Impl} from \\\"../../interfaces/wrappers/ERC721/IWrappedERC721Impl.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC721Wrapper is a contract that wraps tokens from possibly multiple contracts and ids\\r\\n * IMPORTANT: This contract allows for whitelisting registered token addresses IF an address registry is provided.\\r\\n * This is to prevent the creation of wrapped tokens for non-registered tokens if that is a functionality that\\r\\n * is desired. If not, then the address registry can be set to the zero address.\\r\\n */\\r\\ncontract ERC721Wrapper is ReentrancyGuard, IERC721Wrapper {\\r\\n    address public immutable addressRegistry;\\r\\n    address public immutable wrappedErc721Impl;\\r\\n    address[] public tokensCreated;\\r\\n\\r\\n    constructor(address _addressRegistry, address _wrappedErc721Impl) {\\r\\n        if (\\r\\n            _addressRegistry == address(0) || _wrappedErc721Impl == address(0)\\r\\n        ) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        addressRegistry = _addressRegistry;\\r\\n        wrappedErc721Impl = _wrappedErc721Impl;\\r\\n    }\\r\\n\\r\\n    // token ids must be unique and passed in increasing order for each token address.\\r\\n    // minter must approve this contract to transfer all tokens to be wrapped.\\r\\n    function createWrappedToken(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped,\\r\\n        string calldata name,\\r\\n        string calldata symbol\\r\\n    ) external nonReentrant returns (address newErc20Addr) {\\r\\n        if (msg.sender != addressRegistry) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        if (minter == address(0) || minter == address(this)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        uint256 numTokensToBeWrapped = tokensToBeWrapped.length;\\r\\n        if (numTokensToBeWrapped == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        // note: this will revert if the wrapped token already exists\\r\\n        // this is to prevent the creation of duplicate wrapped tokens\\r\\n        // will need to use the remint on the already existing token address\\r\\n        // also unique ordering of token addresses and ids enforces uniqueness of wrapped token address\\r\\n        // e.g. you can't mint a wrapped token for token address A with token ids 1, 2, 3 and then\\r\\n        // mint a wrapped token for token address A with token ids 3, 2, 1\\r\\n        newErc20Addr = Clones.cloneDeterministic(\\r\\n            wrappedErc721Impl,\\r\\n            keccak256(abi.encode(tokensToBeWrapped))\\r\\n        );\\r\\n        tokensCreated.push(newErc20Addr);\\r\\n\\r\\n        IWrappedERC721Impl(newErc20Addr).initialize(\\r\\n            minter,\\r\\n            tokensToBeWrapped,\\r\\n            name,\\r\\n            symbol\\r\\n        );\\r\\n\\r\\n        _transferTokens(\\r\\n            minter,\\r\\n            numTokensToBeWrapped,\\r\\n            tokensToBeWrapped,\\r\\n            newErc20Addr\\r\\n        );\\r\\n        emit ERC721WrapperCreated(\\r\\n            newErc20Addr,\\r\\n            minter,\\r\\n            tokensCreated.length,\\r\\n            tokensToBeWrapped\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function allTokensCreated() external view returns (address[] memory) {\\r\\n        return tokensCreated;\\r\\n    }\\r\\n\\r\\n    function numTokensCreated() external view returns (uint256) {\\r\\n        return tokensCreated.length;\\r\\n    }\\r\\n\\r\\n    function _transferTokens(\\r\\n        address minter,\\r\\n        uint256 numTokensToBeWrapped,\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped,\\r\\n        address newErc20Addr\\r\\n    ) internal {\\r\\n        address prevNftAddress;\\r\\n        address currNftAddress;\\r\\n        uint256 checkedId;\\r\\n        for (uint256 i; i < numTokensToBeWrapped; ) {\\r\\n            uint256 numTokenIds = tokensToBeWrapped[i].tokenIds.length;\\r\\n            if (numTokenIds == 0) {\\r\\n                revert Errors.InvalidArrayLength();\\r\\n            }\\r\\n            if (\\r\\n                IAddressRegistry(addressRegistry).whitelistState(\\r\\n                    tokensToBeWrapped[i].tokenAddr\\r\\n                ) != DataTypesPeerToPeer.WhitelistState.ERC721_TOKEN\\r\\n            ) {\\r\\n                revert Errors.NonWhitelistedToken();\\r\\n            }\\r\\n            currNftAddress = tokensToBeWrapped[i].tokenAddr;\\r\\n            if (currNftAddress <= prevNftAddress) {\\r\\n                revert Errors.NonIncreasingTokenAddrs();\\r\\n            }\\r\\n            for (uint256 j; j < numTokenIds; ) {\\r\\n                if (tokensToBeWrapped[i].tokenIds[j] <= checkedId && j != 0) {\\r\\n                    revert Errors.NonIncreasingNonFungibleTokenIds();\\r\\n                }\\r\\n                checkedId = tokensToBeWrapped[i].tokenIds[j];\\r\\n                try\\r\\n                    IERC721(tokensToBeWrapped[i].tokenAddr).transferFrom(\\r\\n                        minter,\\r\\n                        newErc20Addr,\\r\\n                        checkedId\\r\\n                    )\\r\\n                {\\r\\n                    unchecked {\\r\\n                        ++j;\\r\\n                    }\\r\\n                } catch {\\r\\n                    revert Errors.TransferToWrappedTokenFailed();\\r\\n                }\\r\\n            }\\r\\n            prevNftAddress = currNftAddress;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-peer/wrappers/ERC721/WrappedERC721Impl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {DataTypesPeerToPeer} from \\\"../../DataTypesPeerToPeer.sol\\\";\\r\\nimport {Errors} from \\\"../../../Errors.sol\\\";\\r\\nimport {IWrappedERC721Impl} from \\\"../../interfaces/wrappers/ERC721/IWrappedERC721Impl.sol\\\";\\r\\n\\r\\ncontract WrappedERC721Impl is\\r\\n    ERC20,\\r\\n    Initializable,\\r\\n    ReentrancyGuard,\\r\\n    IWrappedERC721Impl\\r\\n{\\r\\n    string internal _tokenName;\\r\\n    string internal _tokenSymbol;\\r\\n    DataTypesPeerToPeer.WrappedERC721TokenInfo[] internal _wrappedTokens;\\r\\n    address public lastRedeemer;\\r\\n    mapping(address => mapping(uint256 => bool)) public stuckTokens;\\r\\n    mapping(address => mapping(uint256 => bool)) public isTokenCountedInWrapper;\\r\\n    mapping(address => mapping(uint256 => bool)) public isUnderlying;\\r\\n    uint128[2] internal totalAndCurrentNumOfTokensInWrapper;\\r\\n\\r\\n    constructor() ERC20(\\\"Wrapped ERC721 Impl\\\", \\\"Wrapped ERC721 Impl\\\") {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function initialize(\\r\\n        address minter,\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata wrappedTokens,\\r\\n        string calldata _name,\\r\\n        string calldata _symbol\\r\\n    ) external initializer {\\r\\n        uint128 numTokens;\\r\\n        for (uint256 i; i < wrappedTokens.length; ) {\\r\\n            _wrappedTokens.push(wrappedTokens[i]);\\r\\n            for (uint256 j; j < wrappedTokens[i].tokenIds.length; ) {\\r\\n                mapping(uint256 => bool) storage isTokenAddr = isUnderlying[\\r\\n                    wrappedTokens[i].tokenAddr\\r\\n                ];\\r\\n                mapping(uint256 => bool)\\r\\n                    storage isTokenIdInWrapper = isTokenCountedInWrapper[\\r\\n                        wrappedTokens[i].tokenAddr\\r\\n                    ];\\r\\n                isTokenAddr[wrappedTokens[i].tokenIds[j]] = true;\\r\\n                isTokenIdInWrapper[wrappedTokens[i].tokenIds[j]] = true;\\r\\n                unchecked {\\r\\n                    ++numTokens;\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        _tokenName = _name;\\r\\n        _tokenSymbol = _symbol;\\r\\n        // @dev: packed storage layout to track total number of tokens and current number of tokens in wrapper\\r\\n        // this is to prevent having to loop through all the tokens to get the total supply on remints with stuck tokens\\r\\n        totalAndCurrentNumOfTokensInWrapper = [numTokens, numTokens];\\r\\n        _mint(minter, 1);\\r\\n    }\\r\\n\\r\\n    function redeem(address account, address recipient) external nonReentrant {\\r\\n        if (recipient == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        if (msg.sender != account) {\\r\\n            _spendAllowance(account, msg.sender, 1);\\r\\n        }\\r\\n        _burn(account, 1);\\r\\n        lastRedeemer = account;\\r\\n        address tokenAddr;\\r\\n        uint256 tokenId;\\r\\n        uint128 tokensRemoved;\\r\\n        for (uint256 i; i < _wrappedTokens.length; ) {\\r\\n            tokenAddr = _wrappedTokens[i].tokenAddr;\\r\\n            for (uint256 j; j < _wrappedTokens[i].tokenIds.length; ) {\\r\\n                tokenId = _wrappedTokens[i].tokenIds[j];\\r\\n                try\\r\\n                    IERC721(tokenAddr).safeTransferFrom(\\r\\n                        address(this),\\r\\n                        recipient,\\r\\n                        tokenId\\r\\n                    )\\r\\n                {\\r\\n                    ++tokensRemoved;\\r\\n                    isTokenCountedInWrapper[tokenAddr][tokenId] = false;\\r\\n                } catch {\\r\\n                    stuckTokens[tokenAddr][tokenId] = true;\\r\\n                    emit TransferFromWrappedTokenFailed(tokenAddr, tokenId);\\r\\n                }\\r\\n                unchecked {\\r\\n                    ++j;\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        if (tokensRemoved == 0) {\\r\\n            revert Errors.NoTokensTransferred();\\r\\n        }\\r\\n        unchecked {\\r\\n            totalAndCurrentNumOfTokensInWrapper[1] -= tokensRemoved;\\r\\n        }\\r\\n        emit Redeemed(account, recipient);\\r\\n    }\\r\\n\\r\\n    function sweepTokensLeftAfterRedeem(\\r\\n        address tokenAddr,\\r\\n        uint256[] calldata tokenIds\\r\\n    ) external nonReentrant {\\r\\n        if (msg.sender != lastRedeemer) {\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        if (tokenIds.length == 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        mapping(uint256 => bool) storage stuckTokenAddr = stuckTokens[\\r\\n            tokenAddr\\r\\n        ];\\r\\n        mapping(uint256 => bool)\\r\\n            storage isTokenIdInWrapper = isTokenCountedInWrapper[tokenAddr];\\r\\n        uint128 tokensRemoved;\\r\\n        for (uint256 i; i < tokenIds.length; ) {\\r\\n            if (!stuckTokenAddr[tokenIds[i]]) {\\r\\n                revert Errors.TokenNotStuck();\\r\\n            }\\r\\n            try\\r\\n                IERC721(tokenAddr).safeTransferFrom(\\r\\n                    address(this),\\r\\n                    msg.sender,\\r\\n                    tokenIds[i]\\r\\n                )\\r\\n            {\\r\\n                delete stuckTokenAddr[tokenIds[i]];\\r\\n                delete isTokenIdInWrapper[tokenIds[i]];\\r\\n                ++tokensRemoved;\\r\\n            } catch {\\r\\n                emit TransferFromWrappedTokenFailed(tokenAddr, tokenIds[i]);\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        if (tokensRemoved == 0) {\\r\\n            revert Errors.NoTokensTransferred();\\r\\n        }\\r\\n        unchecked {\\r\\n            totalAndCurrentNumOfTokensInWrapper[1] -= tokensRemoved;\\r\\n        }\\r\\n        emit TokenSweepAttempted(tokenAddr, tokenIds);\\r\\n    }\\r\\n\\r\\n    function remint(\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[]\\r\\n            calldata _wrappedTokensForRemint,\\r\\n        address recipient\\r\\n    ) external nonReentrant {\\r\\n        if (recipient == address(0)) {\\r\\n            revert Errors.InvalidAddress();\\r\\n        }\\r\\n        if (totalSupply() != 0) {\\r\\n            // @note: totalSupply can be zero yet there are still tokens in the wrapper due to being stuck\\r\\n            revert Errors.CannotRemintUnlessZeroSupply();\\r\\n        }\\r\\n        // whoever remints must be able to transfer all the tokens to be reminted (all non-stuck tokens) back\\r\\n        // to this contract. If even one transfer fails, then the remint fails.\\r\\n        uint128 tokensNeeded = totalAndCurrentNumOfTokensInWrapper[0] -\\r\\n            totalAndCurrentNumOfTokensInWrapper[1];\\r\\n        totalAndCurrentNumOfTokensInWrapper[\\r\\n            1\\r\\n        ] = totalAndCurrentNumOfTokensInWrapper[0];\\r\\n        if (tokensNeeded == 0 && msg.sender != lastRedeemer) {\\r\\n            // @note: tokensNeeded = 0 is case where the wrapper through sync function has all tokens accounted for\\r\\n            // in this special case, since no transfer is made, we allow only the lastRedeemer to remint to\\r\\n            // avoid race conditions for anyone being able to remint. In cases where the wrapper has tokens\\r\\n            // being transferred, then sender with that permission to transfer those tokens (owner or approved) can remint\\r\\n            revert Errors.InvalidSender();\\r\\n        }\\r\\n        if (_wrappedTokensForRemint.length == 0 && tokensNeeded != 0) {\\r\\n            revert Errors.InvalidArrayLength();\\r\\n        }\\r\\n        _mint(recipient, 1);\\r\\n        uint128 tokensAdded = _wrappedTokensForRemint.length == 0\\r\\n            ? 0\\r\\n            : _transferTokens(_wrappedTokensForRemint);\\r\\n        if (tokensAdded != tokensNeeded) {\\r\\n            revert Errors.TokensStillMissingFromWrapper();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sync(address tokenAddr, uint256 tokenId) external nonReentrant {\\r\\n        mapping(uint256 => bool)\\r\\n            storage isTokenIdInWrapper = isTokenCountedInWrapper[tokenAddr];\\r\\n        if (isTokenIdInWrapper[tokenId]) {\\r\\n            revert Errors.TokenAlreadyCountedInWrapper();\\r\\n        }\\r\\n        if (!isUnderlying[tokenAddr][tokenId]) {\\r\\n            revert Errors.TokenDoesNotBelongInWrapper(tokenAddr, tokenId);\\r\\n        }\\r\\n        isTokenIdInWrapper[tokenId] = true;\\r\\n        unchecked {\\r\\n            ++totalAndCurrentNumOfTokensInWrapper[1];\\r\\n        }\\r\\n        if (IERC721(tokenAddr).ownerOf(tokenId) != address(this)) {\\r\\n            revert Errors.TokenNotOwnedByWrapper();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getWrappedTokensInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (DataTypesPeerToPeer.WrappedERC721TokenInfo[] memory)\\r\\n    {\\r\\n        return _wrappedTokens;\\r\\n    }\\r\\n\\r\\n    function getTotalAndCurrentNumOfTokensInWrapper()\\r\\n        external\\r\\n        view\\r\\n        returns (uint128[2] memory)\\r\\n    {\\r\\n        return totalAndCurrentNumOfTokensInWrapper;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _tokenName;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _tokenSymbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    // @dev: no need for ordering check here\\r\\n    function _transferTokens(\\r\\n        DataTypesPeerToPeer.WrappedERC721TokenInfo[] calldata tokensToBeWrapped\\r\\n    ) internal returns (uint128 numTokensAdded) {\\r\\n        uint256 checkedId;\\r\\n        address currNftAddress;\\r\\n        for (uint256 i; i < tokensToBeWrapped.length; ) {\\r\\n            if (tokensToBeWrapped[i].tokenIds.length == 0) {\\r\\n                revert Errors.InvalidArrayLength();\\r\\n            }\\r\\n            currNftAddress = tokensToBeWrapped[i].tokenAddr;\\r\\n            for (uint256 j; j < tokensToBeWrapped[i].tokenIds.length; ) {\\r\\n                checkedId = tokensToBeWrapped[i].tokenIds[j];\\r\\n                if (!isUnderlying[currNftAddress][checkedId]) {\\r\\n                    revert Errors.TokenDoesNotBelongInWrapper(\\r\\n                        currNftAddress,\\r\\n                        checkedId\\r\\n                    );\\r\\n                }\\r\\n                try\\r\\n                    IERC721(currNftAddress).transferFrom(\\r\\n                        msg.sender,\\r\\n                        address(this),\\r\\n                        checkedId\\r\\n                    )\\r\\n                {\\r\\n                    isTokenCountedInWrapper[currNftAddress][checkedId] = true;\\r\\n                    unchecked {\\r\\n                        ++numTokensAdded;\\r\\n                        ++j;\\r\\n                    }\\r\\n                } catch {\\r\\n                    revert Errors.TransferToWrappedTokenFailed();\\r\\n                }\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/peer-to-pool/DataTypesPeerToPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary DataTypesPeerToPool {\\n    struct Repayment {\\n        // The loan token amount due for given period; initially, expressed in relative terms (100%=BASE), once\\n        // finalized in absolute terms (in loanToken)\\n        uint128 loanTokenDue;\\n        // The coll token amount that can be converted for given period; initially, expressed in relative terms w.r.t.\\n        // loanTokenDue (e.g., convert every 1 loanToken for 8 collToken), once finalized in absolute terms (in collToken)\\n        uint128 collTokenDueIfConverted;\\n        // Timestamp when repayment is due\\n        uint40 dueTimestamp;\\n    }\\n\\n    struct LoanTerms {\\n        // Min subscription amount (in loan token) that the borrower deems acceptable\\n        uint128 minTotalSubscriptions;\\n        // Max subscription amount (in loan token) that the borrower deems acceptable\\n        uint128 maxTotalSubscriptions;\\n        // The number of collateral tokens the borrower pledges per loan token borrowed as collateral for default case\\n        uint128 collPerLoanToken;\\n        // Borrower who can finalize given loan proposal\\n        address borrower;\\n        // Array of scheduled repayments\\n        Repayment[] repaymentSchedule;\\n    }\\n\\n    struct StaticLoanProposalData {\\n        // Factory address from which the loan proposal is created\\n        address factory;\\n        // Funding pool address that is associated with given loan proposal and from which loan liquidity can be\\n        // sourced\\n        address fundingPool;\\n        // Address of collateral token to be used for given loan proposal\\n        address collToken;\\n        // Address of arranger who can manage the loan proposal contract\\n        address arranger;\\n        // Address of whitelist authority who can manage the lender whitelist (optional)\\n        address whitelistAuthority;\\n        // Unsubscribe grace period (in seconds), i.e., after acceptance by borrower lenders can unsubscribe and\\n        // remove liquidity for this duration before being locked-in\\n        uint256 unsubscribeGracePeriod;\\n        // Conversion grace period (in seconds), i.e., lenders can exercise their conversion right between\\n        // [dueTimeStamp, dueTimeStamp+conversionGracePeriod]\\n        uint256 conversionGracePeriod;\\n        // Repayment grace period (in seconds), i.e., borrowers can repay between\\n        // [dueTimeStamp+conversionGracePeriod, dueTimeStamp+conversionGracePeriod+repaymentGracePeriod]\\n        uint256 repaymentGracePeriod;\\n    }\\n\\n    struct DynamicLoanProposalData {\\n        // Arranger fee charged on final loan amount, initially in relative terms (100%=BASE), and after finalization\\n        // in absolute terms (in loan token)\\n        uint256 arrangerFee;\\n        // The gross loan amount; initially this is zero and gets set once loan proposal gets accepted and finalized;\\n        // note that the borrower receives the gross loan amount minus any arranger and protocol fees\\n        uint256 grossLoanAmount;\\n        // Final collateral amount reserved for defaults; initially this is zero and gets set once loan proposal got\\n        // accepted and finalized\\n        uint256 finalCollAmountReservedForDefault;\\n        // Final collateral amount reserved for conversions; initially this is zero and gets set once loan proposal got\\n        // accepted and finalized\\n        uint256 finalCollAmountReservedForConversions;\\n        // Timestamp when the loan terms get accepted by borrower and after which they cannot be changed anymore\\n        uint256 loanTermsLockedTime;\\n        // Current repayment index, mapping to currently relevant repayment schedule element; note the\\n        // currentRepaymentIdx (initially 0) only ever gets incremented on repay\\n        uint256 currentRepaymentIdx;\\n        // Status of current loan proposal\\n        DataTypesPeerToPool.LoanStatus status;\\n        // Protocol fee, initially in relative terms (100%=BASE), and after finalization in absolute terms (in loan token);\\n        // note that the relative protocol fee is locked in at the time when the loan proposal is created\\n        uint256 protocolFee;\\n    }\\n\\n    enum LoanStatus {\\n        WITHOUT_LOAN_TERMS,\\n        IN_NEGOTIATION,\\n        LOAN_TERMS_LOCKED,\\n        READY_TO_EXECUTE,\\n        ROLLBACK,\\n        LOAN_DEPLOYED,\\n        DEFAULTED\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadySigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Disabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentExpTransferFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentUnlockTokenAddresses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSendAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientVaultFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCollUnlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEarliestRepay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInterestRateFactor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNewMinNumOfSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNewOwnerProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSendAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignerRemoveInfo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpfrontFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LtvHigherThanMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReclaimableCollateralAmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallLoanAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnregisteredGateway\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawEntered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"name\":\"AddedSigners\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCircuitBreaker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldCircuitBreaker\",\"type\":\"address\"}],\"name\":\"CircuitBreakerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"loanIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnlocked\",\"type\":\"uint256\"}],\"name\":\"CollateralUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minNumSigners\",\"type\":\"uint256\"}],\"name\":\"MinNumberOfSignersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOnChainQuotingDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOnChainQuotingDelegate\",\"type\":\"address\"}],\"name\":\"OnChainQuotingDelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netPledgeAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upfrontFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct DataTypesPeerToPeer.TransferInstructions\",\"name\":\"transferInstructions\",\"type\":\"tuple\"}],\"name\":\"QuoteProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerRemoved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signerIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signerMovedFromEnd\",\"type\":\"address\"}],\"name\":\"RemovedSigner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newReverseCircuitBreaker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldReverseCircuitBreaker\",\"type\":\"address\"}],\"name\":\"ReverseCircuitBreakerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"name\":\"addSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circuitBreaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenBalancesAndLockedAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_lockedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"loan\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expiry\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"earliestRepay\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"initCollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"initLoanAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"initRepayAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountRepaidSoFar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountReclaimedSoFar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"collUnlocked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"collTokenCompartmentAddr\",\"type\":\"address\"}],\"internalType\":\"struct DataTypesPeerToPeer.Loan\",\"name\":\"_loan\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNumOfSigners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onChainQuotingDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseQuotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collSendAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedProtocolAndVaultTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCompartmentTransferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLoanAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mysoTokenManagerData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypesPeerToPeer.BorrowTransferInstructions\",\"name\":\"borrowInstructions\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earliestRepayTenor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrowerCompartmentImplementation\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSingleUse\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"whitelistAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhitelistAddrSingleBorrower\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypesPeerToPeer.GeneralQuoteInfo\",\"name\":\"generalQuoteInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanPerCollUnitOrLtv\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"interestRatePctInBase\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"upfrontFeePctInBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tenor\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypesPeerToPeer.QuoteTuple\",\"name\":\"quoteTuple\",\"type\":\"tuple\"}],\"name\":\"processQuote\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expiry\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"earliestRepay\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"initCollAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"initLoanAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"initRepayAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountRepaidSoFar\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountReclaimedSoFar\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"collUnlocked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"collTokenCompartmentAddr\",\"type\":\"address\"}],\"internalType\":\"struct DataTypesPeerToPeer.Loan\",\"name\":\"_loan\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"upfrontFee\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypesPeerToPeer.TransferInstructions\",\"name\":\"transferInstructions\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signerIdx\",\"type\":\"uint256\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverseCircuitBreaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCircuitBreaker\",\"type\":\"address\"}],\"name\":\"setCircuitBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minNumOfSigners\",\"type\":\"uint256\"}],\"name\":\"setMinNumOfSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOnChainQuotingDelegate\",\"type\":\"address\"}],\"name\":\"setOnChainQuotingDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReverseCircuitBreaker\",\"type\":\"address\"}],\"name\":\"setReverseCircuitBreaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumLoans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumSigners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmountLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"reclaimCollAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"borrowerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collTokenCompartmentAddr\",\"type\":\"address\"}],\"name\":\"transferCollFromCompartment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnerProposal\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_loanIds\",\"type\":\"uint256[]\"}],\"name\":\"unlockCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseQuotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"repayAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"reclaimCollAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"noCompartment\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"}],\"name\":\"updateLoanInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LenderVaultImpl", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3747c2d584430efdf02e1adfdf24a66125d200b3c420dc8fdb8f5b55cd4c1433"}