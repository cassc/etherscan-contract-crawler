{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/GodMinting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// solhint-disable-next-line\\npragma solidity 0.8.12;\\n\\nimport \\\"./interface/IAssetsInteraction.sol\\\";\\nimport \\\"./reduced_interfaces/BAPApesInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Bulls and Apes Project - God Minting Contract\\n/// @author BAP Dev Team\\n/// @notice Handle the minting of God Apes through the BAP gamification\\ncontract GodMinting is Ownable {\\n  /// @notice Counter of Gods minted\\n  uint256 public godCounter;\\n\\n  /// @notice Apes Contract instance\\n  BAPApesInterface public bapApes;\\n  /// @notice Assets Interactions contract instance\\n  IAssetsInteraction public assetsInteractionContract;\\n\\n  /// @notice Address of the wallet that signs messages\\n  address public secret;\\n\\n  /// @notice Boolean to prevent using the same signature twice\\n  mapping(bytes => bool) public usedSignatures;\\n\\n  /// @notice God Minted event\\n  /// @param element: Element of the God Bull minted, 12 Elements in total (0-11)\\n  /// @param compass: God is Good (0) or Evil (1)\\n  event GodBullMinted(\\n    address user,\\n    uint256 godId,\\n    uint256 element,\\n    uint256 compass\\n  );\\n\\n  /// @notice Deploys the contract and sets the instances addresses\\n  /// @param apesAddress: Address of the Apes Contract\\n  /// @param assetsInteractionAddress: Address of the Teen Bulls contract\\n  constructor(address apesAddress, address assetsInteractionAddress) {\\n    bapApes = BAPApesInterface(apesAddress);\\n    assetsInteractionContract = IAssetsInteraction(assetsInteractionAddress);\\n  }\\n\\n  /// @notice Mint a God Bull\\n  /// @param recipient: Address of the recipient\\n  /// @param apeId: ID of the Ape to use\\n  /// @param element: Element of the God Bull minted, 12 Elements in total (0-11)\\n  /// @param compass: God is Good (0) or Evil (1)\\n  /// @param signature: Signature to confirm above parameters\\n  function mintGodApes(\\n    address recipient,\\n    uint256 apeId,\\n    uint256 element,\\n    uint256 compass,\\n    bytes memory signature\\n  ) external {\\n    require(godCounter < 1000, \\\"mintGodApes: All Gods minted\\\");\\n    require(!usedSignatures[signature], \\\"mintGodApes: Signature already used\\\");\\n    require(\\n      _verifyHashSignature(\\n        keccak256(abi.encode(recipient, apeId, element, compass, \\\"God Mint\\\")),\\n        signature\\n      ),\\n      \\\"mintGodApes: Invalid signature\\\"\\n    );\\n\\n    usedSignatures[signature] = true;\\n    godCounter++;\\n\\n    assetsInteractionContract.resurrectApe(apeId, recipient); // Send the Ape to the user\\n    bapApes.confirmChange(apeId); // burn-mint Ape to transform it into a God Ape\\n\\n    emit GodBullMinted(recipient, apeId + 10000, element, compass);\\n  }\\n\\n  /// @notice Internal function to set a new signer\\n  /// @param newSigner: Address of the new signer\\n  /// @dev Only the owner can set a new signer\\n  function setSigner(address newSigner) external onlyOwner {\\n    require(newSigner != address(0), \\\"Invalid address\\\");\\n    secret = newSigner;\\n  }\\n\\n  /// @notice Transfer ownership from external contracts owned by this contract\\n  /// @param _contract Address of the external contract\\n  /// @param _newOwner New owner\\n  /// @dev Only contract owner can call this function\\n  function transferOwnershipExternalContract(\\n    address _contract,\\n    address _newOwner\\n  ) external onlyOwner {\\n    Ownable(_contract).transferOwnership(_newOwner);\\n  }\\n\\n  /// @notice Set new contracts addresses\\n  /// @param apesAddress: Address of the Apes Contract\\n  /// @param assetsInteractionAddress: Address of the Teen Bulls contract\\n  /// @dev Only contract owner can call this function\\n  function setContractsAddresses(\\n    address apesAddress,\\n    address assetsInteractionAddress\\n  ) external onlyOwner {\\n    bapApes = BAPApesInterface(apesAddress);\\n    assetsInteractionContract = IAssetsInteraction(assetsInteractionAddress);\\n  }\\n\\n  /// @notice Internal function to check if a signature is valid\\n  /// @param freshHash: Hash to check\\n  /// @param signature: Signature to check\\n  function _verifyHashSignature(\\n    bytes32 freshHash,\\n    bytes memory signature\\n  ) internal view returns (bool) {\\n    bytes32 hash = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\n    );\\n\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n\\n    if (signature.length != 65) {\\n      return false;\\n    }\\n    assembly {\\n      r := mload(add(signature, 32))\\n      s := mload(add(signature, 64))\\n      v := byte(0, mload(add(signature, 96)))\\n    }\\n\\n    if (v < 27) {\\n      v += 27;\\n    }\\n\\n    address signer = address(0);\\n    if (v == 27 || v == 28) {\\n      // solium-disable-next-line arg-overflow\\n      signer = ecrecover(hash, v, r, s);\\n    }\\n    return secret == signer;\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/reduced_interfaces/BAPApesInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface BAPApesInterface {\\r\\n    function ownerOf(uint256) external view returns (address);\\r\\n\\r\\n   function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    function confirmChange(uint256 tokenId) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interface/IAssetsInteraction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n// solhint-disable-next-line\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IAssetsInteraction {\\r\\n    function resurrectApe(uint256 tokenId, address recipient) external;\\r\\n}\\r\\n\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetsInteractionAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"godId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"element\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compass\",\"type\":\"uint256\"}],\"name\":\"GodBullMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetsInteractionContract\",\"outputs\":[{\"internalType\":\"contract IAssetsInteraction\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bapApes\",\"outputs\":[{\"internalType\":\"contract BAPApesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"godCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"element\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compass\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintGodApes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"apesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetsInteractionAddress\",\"type\":\"address\"}],\"name\":\"setContractsAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipExternalContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GodMinting", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f29b85834d6a2ba4bb1c64325686c6057b1b3c5000000000000000000000000ecc094e20561001cabbe63fe9e6c2d3081dea271", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}