{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\ninterface IDebtMarket {\\n  /*//////////////////////////////////////////////////////////////\\n                          EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev Emitted on initialization to share location of dependent notes\\n   * @param pool The address of the associated lend pool\\n   */\\n  event Initialized(address indexed pool);\\n\\n  /**\\n   * @dev Emitted when a debt listing  is created with a fixed price\\n   * @param debtId The debt listing identifier\\n   * @param debtor The owner of the debt listing\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param tokenId The token id of the underlying NFT used as collateral\\n   * @param sellType The type of sell ( Fixed price or Auction )\\n   * @param state The state of the actual debt offer ( New,Active,Sold,Canceled )\\n   * @param sellPrice The price for to sell the debt\\n   * @param reserveAsset The asset from the reserve\\n   * @param debtAmount The total debt value\\n   */\\n  event DebtListingCreated(\\n    uint256 debtId,\\n    address debtor,\\n    address indexed nftAsset,\\n    uint256 indexed tokenId,\\n    DataTypes.DebtMarketType indexed sellType,\\n    DataTypes.DebtMarketState state,\\n    uint256 sellPrice,\\n    address reserveAsset,\\n    uint256 debtAmount,\\n    uint256 auctionEndTimestamp,\\n    uint256 startBiddingPrice\\n  );\\n\\n  /**\\n   * @dev Emitted when a debt with auction listing  is created\\n   * @param debtId The debt listing identifier\\n   * @param debtor The owner of the debt listing\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param tokenId The token id of the underlying NFT used as collateral\\n   * @param sellType The type of sell ( Fixed price or Auction )\\n   * @param state The state of the actual debt offer ( New,Active,Sold,Canceled )\\n   * @param sellPrice The price for to sell the debt\\n   * @param reserveAsset The asset from the reserve\\n   * @param debtAmount The total debt value\\n   */\\n  event DebtAuctionCreated(\\n    uint256 debtId,\\n    address debtor,\\n    address indexed nftAsset,\\n    uint256 indexed tokenId,\\n    DataTypes.DebtMarketType indexed sellType,\\n    DataTypes.DebtMarketState state,\\n    uint256 sellPrice,\\n    address reserveAsset,\\n    uint256 debtAmount\\n  );\\n\\n  /**\\n   * @dev Emitted when a debt listing  is canceled\\n   * @param onBehalfOf Address of the user who will receive\\n   * @param debtId The debt listing identifier\\n   * @param marketListing The object of the debt\\n   * @param totalByCollection Total debts listings by collection from the actual debtId collection\\n   * @param totalByUserAndCollection Total debts listings by user from the actual debtId user\\n   */\\n  event DebtListingCanceled(\\n    address indexed onBehalfOf,\\n    uint256 indexed debtId,\\n    DataTypes.DebtMarketListing marketListing,\\n    uint256 totalByCollection,\\n    uint256 totalByUserAndCollection\\n  );\\n\\n  /**\\n   * @dev Emitted when a bid is placed on a debt listing with auction\\n   * @param bidderAddress Address of the last bidder\\n   * @param reserveAsset The asset from the reserve\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param tokenId The token id of the underlying NFT used as collateral\\n   * @param debtId The debt listing identifier\\n   * @param bidPrice Amount that bidder spend on the bid\\n   */\\n  event BidPlaced(\\n    address bidderAddress,\\n    address reserveAsset,\\n    address indexed nftAsset,\\n    uint256 indexed tokenId,\\n    uint256 debtId,\\n    uint256 bidPrice\\n  );\\n\\n  /**\\n   * @dev Emitted when a debt is bought\\n   * @param from Address of owner of the debt\\n   * @param to Buyer address\\n   * @param debtId The debt listing identifier\\n   */\\n  event DebtSold(address indexed from, address indexed to, uint256 indexed debtId);\\n\\n  /**\\n   * @dev Emitted when a debt is claimed\\n   * @param from Address of owner of the debt\\n   * @param to Claimer address\\n   * @param debtId The debt listing identifier\\n   */\\n  event DebtClaimed(address indexed from, address indexed to, uint256 indexed debtId);\\n\\n  /**\\n   * @dev Emited when a new address is authorized to cancel debt listings\\n   * @param authorizedAddress Address to authorize\\n   */\\n  event AuthorizedAddressChanged(address indexed authorizedAddress, bool isAuthorized);\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        MAIN LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n  function createDebtListing(\\n    address nftAsset,\\n    uint256 tokenId,\\n    uint256 sellPrice,\\n    address onBehalfOf,\\n    uint256 startBiddingPrice,\\n    uint256 auctionEndTimestamp\\n  ) external;\\n\\n  function cancelDebtListing(address nftAsset, uint256 tokenId) external;\\n\\n  function buy(address nftAsset, uint256 tokenId, address onBehalfOf, uint256 amount) external;\\n\\n  function bid(address nftAsset, uint256 tokenId, uint256 bidPrice, address onBehalfOf) external;\\n\\n  function claim(address nftAsset, uint256 tokenId, address onBehalfOf) external;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                         GETTERS & SETTERS\\n  //////////////////////////////////////////////////////////////*/\\n  function getDebtId(address nftAsset, uint256 tokenId) external view returns (uint256);\\n\\n  function getDebt(uint256 debtId) external view returns (DataTypes.DebtMarketListing memory sellDebt);\\n\\n  function getDebtIdTracker() external view returns (CountersUpgradeable.Counter memory);\\n\\n  function setDeltaBidPercent(uint256 value) external;\\n\\n  function setAuthorizedAddress(address newAuthorizedAddress, bool val) external;\\n\\n  function paused() external view returns (bool);\\n\\n  function setPause(bool val) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IIncentivesController {\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {ILendPoolAddressesProvider} from \\\"./ILendPoolAddressesProvider.sol\\\";\\nimport {IUToken} from \\\"./IUToken.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendPool {\\n  /*//////////////////////////////////////////////////////////////\\n                          EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev Emitted when _rescuer is modified in the LendPool\\n   * @param newRescuer The address of the new rescuer\\n   **/\\n  event RescuerChanged(address indexed newRescuer);\\n\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param user The address initiating the deposit\\n   * @param amount The amount deposited\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the uTokens\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address user,\\n    address indexed reserve,\\n    uint256 amount,\\n    address indexed onBehalfOf,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param user The address initiating the withdrawal, owner of uTokens\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param amount The amount to be withdrawn\\n   * @param to Address that will receive the underlying\\n   **/\\n  event Withdraw(address indexed user, address indexed reserve, uint256 amount, address indexed to);\\n\\n  /**\\n   * @dev Emitted on borrow() when loan needs to be opened\\n   * @param user The address of the user initiating the borrow(), receiving the funds\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param amount The amount borrowed out\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param onBehalfOf The address that will be getting the loan\\n   * @param referral The referral code used\\n   * @param nftConfigFee an estimated gas cost fee for configuring the NFT\\n   **/\\n  event Borrow(\\n    address user,\\n    address indexed reserve,\\n    uint256 amount,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address indexed onBehalfOf,\\n    uint256 borrowRate,\\n    uint256 loanId,\\n    uint16 indexed referral,\\n    uint256 nftConfigFee\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param user The address of the user initiating the repay(), providing the funds\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param amount The amount repaid\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param borrower The beneficiary of the repayment, getting his debt reduced\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Repay(\\n    address user,\\n    address indexed reserve,\\n    uint256 amount,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower's loan is auctioned.\\n   * @param user The address of the user initiating the auction\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param bidPrice The price of the underlying reserve given by the bidder\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param onBehalfOf The address that will be getting the NFT\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Auction(\\n    address user,\\n    address indexed reserve,\\n    uint256 bidPrice,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted on redeem()\\n   * @param user The address of the user initiating the redeem(), providing the funds\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param borrowAmount The borrow amount repaid\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Redeem(\\n    address user,\\n    address indexed reserve,\\n    uint256 borrowAmount,\\n    uint256 fineAmount,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower's loan is liquidated.\\n   * @param user The address of the user initiating the auction\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param repayAmount The amount of reserve repaid by the liquidator\\n   * @param remainAmount The amount of reserve received by the borrower\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Liquidate(\\n    address user,\\n    address indexed reserve,\\n    uint256 repayAmount,\\n    uint256 remainAmount,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address indexed borrower,\\n    uint256 loanId\\n  );\\n\\n  /**\\n   * @dev Emitted when an NFT is purchased via Buyout.\\n   * @param user The address of the user initiating the Buyout\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param buyoutAmount The amount of reserve paid by the buyer\\n   * @param borrowAmount The loan borrowed amount\\n   * @param nftAsset The amount of reserve received by the borrower\\n   * @param nftTokenId The token id of the underlying NFT used as collateral\\n   * @param borrower The loan borrower address\\n   * @param onBehalfOf The receiver of the underlying NFT\\n   * @param loanId The loan ID of the NFT loans\\n   **/\\n  event Buyout(\\n    address user,\\n    address indexed reserve,\\n    uint256 buyoutAmount,\\n    uint256 borrowAmount,\\n    address indexed nftAsset,\\n    uint256 nftTokenId,\\n    address borrower,\\n    address onBehalfOf,\\n    uint256 indexed loanId\\n  );\\n\\n  /**\\n   * @dev Emitted when an NFT configuration is triggered.\\n   * @param user The NFT holder\\n   * @param nftAsset The NFT collection address\\n   * @param nftTokenId The NFT token Id\\n   **/\\n  event ValuationApproved(address indexed user, address indexed nftAsset, uint256 indexed nftTokenId);\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when the pause time is updated.\\n   */\\n  event PausedTimeUpdated(uint256 startTime, uint256 durationTime);\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendPool contract. The event is therefore replicated here so it\\n   * gets added to the LendPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n  @dev Emitted after the address of the interest rate strategy contract has been updated\\n  */\\n  event ReserveInterestRateAddressChanged(address indexed asset, address indexed rateAddress);\\n\\n  /**\\n  @dev Emitted after setting the configuration bitmap of the reserve as a whole\\n  */\\n  event ReserveConfigurationChanged(address indexed asset, uint256 configuration);\\n\\n  /**\\n  @dev Emitted after setting the configuration bitmap of the NFT collection as a whole\\n  */\\n  event NftConfigurationChanged(address indexed asset, uint256 configuration);\\n\\n  /**\\n  @dev Emitted after setting the configuration bitmap of the NFT as a whole\\n  */\\n  event NftConfigurationByIdChanged(address indexed asset, uint256 indexed nftTokenId, uint256 configuration);\\n\\n  /**\\n  @dev Emitted after setting the new safe health factor value for redeems\\n  */\\n  event SafeHealthFactorUpdated(uint256 indexed newSafeHealthFactor);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          RESCUERS\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @notice Returns current rescuer\\n   * @return Rescuer's address\\n   */\\n  function rescuer() external view returns (address);\\n\\n  /**\\n   * @notice Assigns the rescuer role to a given address.\\n   * @param newRescuer New rescuer's address\\n   */\\n  function updateRescuer(address newRescuer) external;\\n\\n  /**\\n   * @notice Rescue tokens or ETH locked up in this contract.\\n   * @param tokenContract ERC20 token contract address\\n   * @param to        Recipient address\\n   * @param amount    Amount to withdraw\\n   * @param rescueETH bool to know if we want to rescue ETH or other token\\n   */\\n  function rescue(IERC20 tokenContract, address to, uint256 amount, bool rescueETH) external;\\n\\n  /**\\n   * @notice Rescue NFTs locked up in this contract.\\n   * @param nftAsset ERC721 asset contract address\\n   * @param tokenId ERC721 token id\\n   * @param to Recipient address\\n   */\\n  function rescueNFT(IERC721Upgradeable nftAsset, uint256 tokenId, address to) external;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        MAIN LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying uTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 uusdc\\n   * @param reserve The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the uTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of uTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(address reserve, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent uTokens owned\\n   * E.g. User has 100 uusdc, calls withdraw() and receives 100 USDC, burning the 100 uusdc\\n   * @param reserve The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole uToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(address reserve, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral\\n   * - E.g. User borrows 100 USDC, receiving the 100 USDC in his wallet\\n   *   and lock collateral asset in contract\\n   * @param reserveAsset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param onBehalfOf Address of the user who will receive the loan. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function borrow(\\n    address reserveAsset,\\n    uint256 amount,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent loan owned\\n   * - E.g. User repays 100 USDC, burning loan and receives collateral asset\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param amount The amount to repay\\n   * @return The final amount repaid, loan is burned or not\\n   **/\\n  function repay(address nftAsset, uint256 nftTokenId, uint256 amount) external returns (uint256, bool);\\n\\n  /**\\n   * @dev Function to auction a non-healthy position collateral-wise\\n   * - The caller (liquidator) want to buy collateral asset of the user getting liquidated\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param bidPrice The bid price of the liquidator want to buy the underlying NFT\\n   * @param onBehalfOf Address of the user who will get the underlying NFT, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of NFT\\n   *   is a different wallet\\n   **/\\n  function auction(address nftAsset, uint256 nftTokenId, uint256 bidPrice, address onBehalfOf) external;\\n\\n  /**\\n   * @dev Function to buyout a non-healthy position collateral-wise\\n   * - The bidder want to buy collateral asset of the user getting liquidated\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param onBehalfOf Address of the user who will get the underlying NFT, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of NFT\\n   *   is a different wallet\\n   **/\\n  function buyout(address nftAsset, uint256 nftTokenId, address onBehalfOf) external;\\n\\n  /**\\n   * @notice Redeem a NFT loan which state is in Auction\\n   * - E.g. User repays 100 USDC, burning loan and receives collateral asset\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param amount The amount to repay the debt\\n   * @param bidFine The amount of bid fine\\n   **/\\n  function redeem(address nftAsset, uint256 nftTokenId, uint256 amount, uint256 bidFine) external returns (uint256);\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise\\n   * - The caller (liquidator) buy collateral asset of the user getting liquidated, and receives\\n   *   the collateral asset\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   **/\\n  function liquidate(address nftAsset, uint256 nftTokenId, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Approves valuation of an NFT for a user\\n   * @dev Just the NFT holder can trigger the configuration\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   **/\\n  function approveValuation(address nftAsset, uint256 nftTokenId) external payable;\\n\\n  /**\\n   * @dev Validates and finalizes an uToken transfer\\n   * - Only callable by the overlying uToken of the `asset`\\n   * @param asset The address of the underlying asset of the uToken\\n   * @param from The user from which the uTokens are transferred\\n   * @param to The user receiving the uTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The uToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The uToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external view;\\n\\n  /**\\n   * @dev Initializes a reserve, activating it, assigning an uToken and nft loan and an\\n   * interest rate strategy\\n   * - Only callable by the LendPoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param uTokenAddress The address of the uToken that will be assigned to the reserve\\n   * @param debtTokenAddress The address of the debtToken that will be assigned to the reserve\\n   * @param interestRateAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address uTokenAddress,\\n    address debtTokenAddress,\\n    address interestRateAddress\\n  ) external;\\n\\n  /**\\n   * @dev Initializes a nft, activating it, assigning nft loan and an\\n   * interest rate strategy\\n   * - Only callable by the LendPoolConfigurator contract\\n   * @param asset The address of the underlying asset of the nft\\n   **/\\n  function initNft(address asset, address uNftAddress) external;\\n\\n  /**\\n   * @dev Transfer the last bid amount to the bidder\\n   * @param reserveAsset address of the reserver asset (WETH)\\n   * @param bidder the bidder address\\n   * @param bidAmount  the bid amount\\n   */\\n  function transferBidAmount(address reserveAsset, address bidder, uint256 bidAmount) external;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        GETTERS & SETTERS\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev Returns the cached LendPoolAddressesProvider connected to this contract\\n   **/\\n\\n  function getAddressesProvider() external view returns (ILendPoolAddressesProvider);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @dev Returns the list of the initialized reserves\\n   * @return the list of initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the state and configuration of the nft\\n   * @param asset The address of the underlying asset of the nft\\n   * @return The status of the nft\\n   **/\\n  function getNftData(address asset) external view returns (DataTypes.NftData memory);\\n\\n  /**\\n   * @dev Returns the configuration of the nft asset\\n   * @param asset The address of the underlying asset of the nft\\n   * @param tokenId NFT asset ID\\n   * @return The configuration of the nft asset\\n   **/\\n  function getNftAssetConfig(\\n    address asset,\\n    uint256 tokenId\\n  ) external view returns (DataTypes.NftConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the loan data of the NFT\\n   * @param nftAsset The address of the NFT\\n   * @param reserveAsset The address of the Reserve\\n   * @return totalCollateralInETH the total collateral in ETH of the NFT\\n   * @return totalCollateralInReserve the total collateral in Reserve of the NFT\\n   * @return availableBorrowsInETH the borrowing power in ETH of the NFT\\n   * @return availableBorrowsInReserve the borrowing power in Reserve of the NFT\\n   * @return ltv the loan to value of the user\\n   * @return liquidationThreshold the liquidation threshold of the NFT\\n   * @return liquidationBonus the liquidation bonus of the NFT\\n   **/\\n  function getNftCollateralData(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralInETH,\\n      uint256 totalCollateralInReserve,\\n      uint256 availableBorrowsInETH,\\n      uint256 availableBorrowsInReserve,\\n      uint256 ltv,\\n      uint256 liquidationThreshold,\\n      uint256 liquidationBonus\\n    );\\n\\n  /**\\n   * @dev Returns the debt data of the NFT\\n   * @param nftAsset The address of the NFT\\n   * @param nftTokenId The token id of the NFT\\n   * @return loanId the loan id of the NFT\\n   * @return reserveAsset the address of the Reserve\\n   * @return totalCollateral the total power of the NFT\\n   * @return totalDebt the total debt of the NFT\\n   * @return availableBorrows the borrowing power left of the NFT\\n   * @return healthFactor the current health factor of the NFT\\n   **/\\n  function getNftDebtData(\\n    address nftAsset,\\n    uint256 nftTokenId\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 loanId,\\n      address reserveAsset,\\n      uint256 totalCollateral,\\n      uint256 totalDebt,\\n      uint256 availableBorrows,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @dev Returns the auction data of the NFT\\n   * @param nftAsset The address of the NFT\\n   * @param nftTokenId The token id of the NFT\\n   * @return loanId the loan id of the NFT\\n   * @return bidderAddress the highest bidder address of the loan\\n   * @return bidPrice the highest bid price in Reserve of the loan\\n   * @return bidBorrowAmount the borrow amount in Reserve of the loan\\n   * @return bidFine the penalty fine of the loan\\n   **/\\n  function getNftAuctionData(\\n    address nftAsset,\\n    uint256 nftTokenId\\n  )\\n    external\\n    view\\n    returns (uint256 loanId, address bidderAddress, uint256 bidPrice, uint256 bidBorrowAmount, uint256 bidFine);\\n\\n  /**\\n   * @dev Returns the list of nft addresses in the protocol\\n   **/\\n  function getNftsList() external view returns (address[] memory);\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getReserveConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Sets the configuration bitmap of the reserve as a whole\\n   * - Only callable by the LendPoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setReserveConfiguration(address asset, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the NFT\\n   * @param asset The address of the asset of the NFT\\n   * @return The configuration of the NFT\\n   **/\\n  function getNftConfiguration(address asset) external view returns (DataTypes.NftConfigurationMap memory);\\n\\n  /**\\n   * @dev Sets the configuration bitmap of the NFT as a whole\\n   * - Only callable by the LendPoolConfigurator contract\\n   * @param asset The address of the asset of the NFT\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setNftConfiguration(address asset, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the NFT\\n   * @param asset The address of the asset of the NFT\\n   * @param tokenId the Token Id of the NFT\\n   * @return The configuration of the NFT\\n   **/\\n  function getNftConfigByTokenId(\\n    address asset,\\n    uint256 tokenId\\n  ) external view returns (DataTypes.NftConfigurationMap memory);\\n\\n  /**\\n   * @dev Sets the configuration bitmap of the NFT as a whole\\n   * - Only callable by the LendPoolConfigurator contract\\n   * @param asset The address of the asset of the NFT\\n   * @param nftTokenId the NFT tokenId\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setNftConfigByTokenId(address asset, uint256 nftTokenId, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns if the LendPool is paused\\n   */\\n  function paused() external view returns (bool);\\n\\n  /**\\n   * @dev Set the _pause state of a reserve\\n   * - Only callable by the LendPool contract\\n   * @param val `true` to pause the reserve, `false` to un-pause it\\n   */\\n  function setPause(bool val) external;\\n\\n  /**\\n   * @dev Returns the _pause time of a reserve\\n   */\\n  function getPausedTime() external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Set the _pause state of the auctions\\n   * @param startTime when it will start to pause\\n   * @param durationTime how long it will pause\\n   */\\n  function setPausedTime(uint256 startTime, uint256 durationTime) external;\\n\\n  /**\\n   * @dev Returns the bidDelta percentage - debt compounded + fees.\\n   **/\\n  function getBidDelta() external view returns (uint256);\\n\\n  /**\\n   * @dev sets the bidDelta percentage - debt compounded + fees.\\n   * @param bidDelta the amount to charge to the user\\n   **/\\n  function setBidDelta(uint256 bidDelta) external;\\n\\n  /**\\n   * @dev Returns the max timeframe between NFT config triggers and borrows\\n   **/\\n  function getTimeframe() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the max timeframe between NFT config triggers and borrows\\n   * @param timeframe the number of seconds for the timeframe\\n   **/\\n  function setTimeframe(uint256 timeframe) external;\\n\\n  /**\\n   * @dev Returns the configFee amount\\n   **/\\n  function getConfigFee() external view returns (uint256);\\n\\n  /**\\n   * @dev sets the fee for configuringNFTAsCollateral\\n   * @param configFee the amount to charge to the user\\n   **/\\n  function setConfigFee(uint256 configFee) external;\\n\\n  /**\\n   * @dev Returns the auctionDurationConfigFee amount\\n   **/\\n  function getAuctionDurationConfigFee() external view returns (uint256);\\n\\n  /**\\n   * @dev sets the fee to be charged on first bid on nft\\n   * @param auctionDurationConfigFee the amount to charge to the user\\n   **/\\n  function setAuctionDurationConfigFee(uint256 auctionDurationConfigFee) external;\\n\\n  /**\\n   * @dev Returns the maximum number of reserves supported to be listed in this LendPool\\n   */\\n  function getMaxNumberOfReserves() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the max number of reserves in the protocol\\n   * @param val the value to set the max number of reserves\\n   **/\\n  function setMaxNumberOfReserves(uint256 val) external;\\n\\n  /**\\n   * @notice Returns current safe health factor\\n   * @return The safe health factor value\\n   */\\n  function getSafeHealthFactor() external view returns (uint256);\\n\\n  /**\\n   * @notice Update the safe health factor value for redeems\\n   * @param newSafeHealthFactor New safe health factor value\\n   */\\n  function updateSafeHealthFactor(uint256 newSafeHealthFactor) external;\\n\\n  /**\\n   * @dev Returns the maximum number of nfts supported to be listed in this LendPool\\n   */\\n  function getMaxNumberOfNfts() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the max number of NFTs in the protocol\\n   * @param val the value to set the max number of NFTs\\n   **/\\n  function setMaxNumberOfNfts(uint256 val) external;\\n\\n  /**\\n   * @dev Returns the fee percentage for liquidations\\n   **/\\n  function getLiquidateFeePercentage() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets the fee percentage for liquidations\\n   * @param percentage the fee percentage to be set\\n   **/\\n  function setLiquidateFeePercentage(uint256 percentage) external;\\n\\n  /**\\n   * @dev Updates the address of the interest rate strategy contract\\n   * - Only callable by the LendPoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateAddress(address asset, address rateAddress) external;\\n\\n  /**\\n   * @dev Sets the max supply and token ID for a given asset\\n   * @param asset The address to set the data\\n   * @param maxSupply The max supply value\\n   * @param maxTokenId The max token ID value\\n   **/\\n  function setNftMaxSupplyAndTokenId(address asset, uint256 maxSupply, uint256 maxTokenId) external;\\n\\n  /**\\n   * @dev Updates the liquidity cumulative index and the variable borrow index.\\n   * @param reserve the reserve object\\n   **/\\n  function updateReserveState(address reserve) external;\\n\\n  /**\\n   * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\n   * @param reserve The address of the reserve to be updated\\n   **/\\n  function updateReserveInterestRates(address reserve) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title LendPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Unlockd Governance\\n * @author BendDao; Forked and edited by Unlockd\\n **/\\ninterface ILendPoolAddressesProvider {\\n  event MarketIdSet(string newMarketId);\\n  event LendPoolUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendPoolConfiguratorUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ReserveOracleUpdated(address indexed newAddress);\\n  event NftOracleUpdated(address indexed newAddress);\\n  event LendPoolLoanUpdated(address indexed newAddress, bytes encodedCallData);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy, bytes encodedCallData);\\n  event UNFTRegistryUpdated(address indexed newAddress);\\n  event IncentivesControllerUpdated(address indexed newAddress);\\n  event UIDataProviderUpdated(address indexed newAddress);\\n  event UnlockdDataProviderUpdated(address indexed newAddress);\\n  event WalletBalanceProviderUpdated(address indexed newAddress);\\n  event LendPoolLiquidatorUpdated(address indexed newAddress);\\n  event LtvManagerUpdated(address indexed newAddress);\\n\\n  /**\\n   * @dev Returns the id of the Unlockd market to which this contracts points to\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @dev Allows to set the market which this LendPoolAddressesProvider represents\\n   * @param marketId The market id\\n   */\\n  function setMarketId(string calldata marketId) external;\\n\\n  /**\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\n   * IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @dev General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `implementationAddress`\\n   * IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param impl The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address impl, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev Returns an address by id\\n   * @return The address\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the LendPool proxy\\n   * @return The LendPool proxy address\\n   **/\\n  function getLendPool() external view returns (address);\\n\\n  /**\\n   * @dev Updates the implementation of the LendPool, or creates the proxy\\n   * setting the new `pool` implementation on the first time calling it\\n   * @param pool The new LendPool implementation\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolImpl(address pool, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev Returns the address of the LendPoolConfigurator proxy\\n   * @return The LendPoolConfigurator proxy address\\n   **/\\n  function getLendPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @dev Updates the implementation of the LendPoolConfigurator, or creates the proxy\\n   * setting the new `configurator` implementation on the first time calling it\\n   * @param configurator The new LendPoolConfigurator implementation\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolConfiguratorImpl(address configurator, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev returns the address of the LendPool admin\\n   * @return the LendPoolAdmin address\\n   **/\\n  function getPoolAdmin() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the LendPool admin\\n   * @param admin the LendPoolAdmin address\\n   **/\\n  function setPoolAdmin(address admin) external;\\n\\n  /**\\n   * @dev returns the address of the emergency admin\\n   * @return the EmergencyAdmin address\\n   **/\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the emergency admin\\n   * @param admin the EmergencyAdmin address\\n   **/\\n  function setEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @dev returns the address of the reserve oracle\\n   * @return the ReserveOracle address\\n   **/\\n  function getReserveOracle() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the reserve oracle\\n   * @param reserveOracle the ReserveOracle address\\n   **/\\n  function setReserveOracle(address reserveOracle) external;\\n\\n  /**\\n   * @dev returns the address of the NFT oracle\\n   * @return the NFTOracle address\\n   **/\\n  function getNFTOracle() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the NFT oracle\\n   * @param nftOracle the NFTOracle address\\n   **/\\n  function setNFTOracle(address nftOracle) external;\\n\\n  /**\\n   * @dev returns the address of the lendpool loan\\n   * @return the LendPoolLoan address\\n   **/\\n  function getLendPoolLoan() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the lendpool loan\\n   * @param loan the LendPoolLoan address\\n   * @param encodedCallData calldata to execute\\n   **/\\n  function setLendPoolLoanImpl(address loan, bytes memory encodedCallData) external;\\n\\n  /**\\n   * @dev returns the address of the UNFT Registry\\n   * @return the UNFTRegistry address\\n   **/\\n  function getUNFTRegistry() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the UNFT registry\\n   * @param factory the UNFTRegistry address\\n   **/\\n  function setUNFTRegistry(address factory) external;\\n\\n  /**\\n   * @dev returns the address of the incentives controller\\n   * @return the IncentivesController address\\n   **/\\n  function getIncentivesController() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the incentives controller\\n   * @param controller the IncentivesController address\\n   **/\\n  function setIncentivesController(address controller) external;\\n\\n  /**\\n   * @dev returns the address of the UI data provider\\n   * @return the UIDataProvider address\\n   **/\\n  function getUIDataProvider() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the UI data provider\\n   * @param provider the UIDataProvider address\\n   **/\\n  function setUIDataProvider(address provider) external;\\n\\n  /**\\n   * @dev returns the address of the Unlockd data provider\\n   * @return the UnlockdDataProvider address\\n   **/\\n  function getUnlockdDataProvider() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the Unlockd data provider\\n   * @param provider the UnlockdDataProvider address\\n   **/\\n  function setUnlockdDataProvider(address provider) external;\\n\\n  /**\\n   * @dev returns the address of the wallet balance provider\\n   * @return the WalletBalanceProvider address\\n   **/\\n  function getWalletBalanceProvider() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the wallet balance provider\\n   * @param provider the WalletBalanceProvider address\\n   **/\\n  function setWalletBalanceProvider(address provider) external;\\n\\n  /**\\n   * @dev returns the address of the LendPool liquidator contract\\n   **/\\n  function getLendPoolLiquidator() external view returns (address);\\n\\n  /**\\n   * @dev sets the address of the LendPool liquidator contract\\n   * @param liquidator the LendPool liquidator address\\n   **/\\n  function setLendPoolLiquidator(address liquidator) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\ninterface ILendPoolLoan {\\n  /**\\n   * @dev Emitted on initialization to share location of dependent notes\\n   * @param pool The address of the associated lend pool\\n   */\\n  event Initialized(address indexed pool);\\n\\n  /**\\n   * @dev Emitted when a loan is created\\n   * @param user The address initiating the action\\n   */\\n  event LoanCreated(\\n    address indexed user,\\n    address indexed onBehalfOf,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is updated\\n   * @param user The address initiating the action\\n   */\\n  event LoanUpdated(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amountAdded,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is repaid by the borrower\\n   * @param user The address initiating the action\\n   */\\n  event LoanRepaid(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is auction by the liquidator\\n   * @param user The address initiating the action\\n   */\\n  event LoanAuctioned(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount,\\n    uint256 borrowIndex,\\n    address bidder,\\n    uint256 price,\\n    address previousBidder,\\n    uint256 previousPrice\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is bought out\\n   * @param loanId The loanId that was bought out\\n   */\\n  event LoanBoughtOut(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 bidBorrowAmount,\\n    uint256 borrowIndex,\\n    uint256 buyoutAmount\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is redeemed\\n   * @param user The address initiating the action\\n   */\\n  event LoanRedeemed(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is liquidate by the liquidator\\n   * @param user The address initiating the action\\n   */\\n  event LoanLiquidated(\\n    address indexed user,\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when a loan is liquidated in an external market\\n   */\\n  event LoanLiquidatedMarket(\\n    uint256 indexed loanId,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  );\\n\\n  function initNft(address nftAsset, address uNftAddress) external;\\n\\n  /**\\n   * @dev Create store a loan object with some params\\n   * @param initiator The address of the user initiating the borrow\\n   * @param onBehalfOf The address receiving the loan\\n   * @param nftAsset The address of the underlying NFT asset\\n   * @param nftTokenId The token Id of the underlying NFT asset\\n   * @param uNftAddress The address of the uNFT token\\n   * @param reserveAsset The address of the underlying reserve asset\\n   * @param amount The loan amount\\n   * @param borrowIndex The index to get the scaled loan amount\\n   */\\n  function createLoan(\\n    address initiator,\\n    address onBehalfOf,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address uNftAddress,\\n    address reserveAsset,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Update the given loan with some params\\n   *\\n   * Requirements:\\n   *  - The caller must be a holder of the loan\\n   *  - The loan must be in state Active\\n   * @param initiator The address of the user updating the loan\\n   * @param loanId The loan ID\\n   * @param amountAdded The amount added to the loan\\n   * @param amountTaken The amount taken from the loan\\n   * @param borrowIndex The index to get the scaled loan amount\\n   */\\n  function updateLoan(\\n    address initiator,\\n    uint256 loanId,\\n    uint256 amountAdded,\\n    uint256 amountTaken,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Repay the given loan\\n   *\\n   * Requirements:\\n   *  - The caller must be a holder of the loan\\n   *  - The caller must send in principal + interest\\n   *  - The loan must be in state Active\\n   *\\n   * @param initiator The address of the user initiating the repay\\n   * @param loanId The loan getting burned\\n   * @param uNftAddress The address of uNFT\\n   * @param amount The amount repaid\\n   * @param borrowIndex The index to get the scaled loan amount\\n   */\\n  function repayLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address uNftAddress,\\n    uint256 amount,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Auction the given loan\\n   *\\n   * Requirements:\\n   *  - The price must be greater than current highest price\\n   *  - The loan must be in state Active or Auction\\n   *\\n   * @param initiator The address of the user initiating the auction\\n   * @param loanId The loan getting auctioned\\n   * @param bidPrice The bid price of this auction\\n   */\\n  function auctionLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address onBehalfOf,\\n    uint256 bidPrice,\\n    uint256 borrowAmount,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Buyout the given loan\\n   *\\n   * Requirements:\\n   *  - The price has to be the valuation price of the nft\\n   *  - The loan must be in state Active or Auction\\n   */\\n  function buyoutLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address uNftAddress,\\n    uint256 borrowAmount,\\n    uint256 borrowIndex,\\n    uint256 buyoutAmount\\n  ) external;\\n\\n  /**\\n   * @dev Redeem the given loan with some params\\n   *\\n   * Requirements:\\n   *  - The caller must be a holder of the loan\\n   *  - The loan must be in state Auction\\n   * @param initiator The address of the user initiating the borrow\\n   * @param loanId The loan getting redeemed\\n   * @param amountTaken The taken amount\\n   * @param borrowIndex The index to get the scaled loan amount\\n   */\\n  function redeemLoan(address initiator, uint256 loanId, uint256 amountTaken, uint256 borrowIndex) external;\\n\\n  /**\\n   * @dev Liquidate the given loan\\n   *\\n   * Requirements:\\n   *  - The caller must send in principal + interest\\n   *  - The loan must be in state Active\\n   *\\n   * @param initiator The address of the user initiating the auction\\n   * @param loanId The loan getting burned\\n   * @param uNftAddress The address of uNFT\\n   * @param borrowAmount The borrow amount\\n   * @param borrowIndex The index to get the scaled loan amount\\n   */\\n  function liquidateLoan(\\n    address initiator,\\n    uint256 loanId,\\n    address uNftAddress,\\n    uint256 borrowAmount,\\n    uint256 borrowIndex\\n  ) external;\\n\\n  /**\\n   * @dev Liquidate the given loan on an external market\\n   * @param loanId The loan getting burned\\n   * @param uNftAddress The address of the underlying uNft\\n   * @param borrowAmount Amount borrowed in the loan\\n   * @param borrowIndex The reserve index\\n   */\\n  function liquidateLoanMarket(uint256 loanId, address uNftAddress, uint256 borrowAmount, uint256 borrowIndex) external;\\n\\n  /**\\n   * @dev Updates the `_marketAdapters` mapping, setting the params to\\n   * valid/unvalid adapters through the `flag` parameter\\n   * @param adapters The adapters addresses to be updated\\n   * @param flag `true` to set addresses as valid adapters, `false` otherwise\\n   */\\n  function updateMarketAdapters(address[] calldata adapters, bool flag) external;\\n\\n  /**\\n   *  @dev returns the borrower of a specific loan\\n   * param loanId the loan to get the borrower from\\n   */\\n  function borrowerOf(uint256 loanId) external view returns (address);\\n\\n  /**\\n   *  @dev returns the loan corresponding to a specific NFT\\n   * param nftAsset the underlying NFT asset\\n   * param tokenId the underlying token ID for the NFT\\n   */\\n  function getCollateralLoanId(address nftAsset, uint256 nftTokenId) external view returns (uint256);\\n\\n  /**\\n   *  @dev returns the loan corresponding to a specific loan Id\\n   * param loanId the loan Id\\n   */\\n  function getLoan(uint256 loanId) external view returns (DataTypes.LoanData memory loanData);\\n\\n  /**\\n   *  @dev returns the collateral and reserve corresponding to a specific loan\\n   * param loanId the loan Id\\n   */\\n  function getLoanCollateralAndReserve(\\n    uint256 loanId\\n  ) external view returns (address nftAsset, uint256 nftTokenId, address reserveAsset, uint256 scaledAmount);\\n\\n  /**\\n   *  @dev returns the reserve and borrow __scaled__ amount corresponding to a specific loan\\n   * param loanId the loan Id\\n   */\\n  function getLoanReserveBorrowScaledAmount(uint256 loanId) external view returns (address, uint256);\\n\\n  /**\\n   *  @dev returns the reserve and borrow  amount corresponding to a specific loan\\n   * param loanId the loan Id\\n   */\\n  function getLoanReserveBorrowAmount(uint256 loanId) external view returns (address, uint256);\\n\\n  function getLoanHighestBid(uint256 loanId) external view returns (address, uint256);\\n\\n  /**\\n   *  @dev returns the collateral amount for a given NFT\\n   * param nftAsset the underlying NFT asset\\n   */\\n  function getNftCollateralAmount(address nftAsset) external view returns (uint256);\\n\\n  /**\\n   *  @dev returns the collateral amount for a given NFT and a specific user\\n   * param user the user\\n   * param nftAsset the underlying NFT asset\\n   */\\n  function getUserNftCollateralAmount(address user, address nftAsset) external view returns (uint256);\\n\\n  /**\\n   *  @dev returns the counter tracker for all the loan ID's in the protocol\\n   */\\n  function getLoanIdTracker() external view returns (CountersUpgradeable.Counter memory);\\n\\n  function reMintUNFT(address nftAsset, uint256 tokenId, address oldOnBehalfOf, address newOnBehalfOf) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPunks.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @dev Interface for a permittable ERC721 contract\\n * See https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC72 allowance (see {IERC721-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC721-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IPunks {\\n  /**\\n   * @dev returns the balance of an account\\n   * @param account the given account\\n   **/\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev returns the address of a punk given its index\\n   * @param punkIndex the index\\n   **/\\n  function punkIndexToAddress(uint256 punkIndex) external view returns (address owner);\\n\\n  /**\\n   * @dev buys a punk\\n   * @param punkIndex the index of the punk to buy\\n   **/\\n  function buyPunk(uint256 punkIndex) external;\\n\\n  /**\\n   * @dev transfers a punk\\n   * @param to the recipient address\\n   * @param punkIndex the index of the punk to transfer\\n   **/\\n  function transferPunk(address to, uint256 punkIndex) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {ILendPoolAddressesProvider} from \\\"./ILendPoolAddressesProvider.sol\\\";\\nimport {IIncentivesController} from \\\"./IIncentivesController.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\ninterface IUToken is IScaledBalanceToken, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n  /**\\n   * @dev Emitted when an uToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated lending pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this uToken\\n   **/\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController\\n  );\\n\\n  /**\\n   * @dev Initializes the bToken\\n   * @param addressProvider The address of the address provider where this bToken will be used\\n   * @param treasury The address of the Unlockd treasury, receiving the fees on this bToken\\n   * @param underlyingAsset The address of the underlying asset of this bToken\\n   * @param uTokenDecimals The amount of token decimals\\n   * @param uTokenName The name of the token\\n   * @param uTokenSymbol The token symbol\\n   */\\n  function initialize(\\n    ILendPoolAddressesProvider addressProvider,\\n    address treasury,\\n    address underlyingAsset,\\n    uint8 uTokenDecimals,\\n    string calldata uTokenName,\\n    string calldata uTokenSymbol\\n  ) external;\\n\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param from The address performing the mint\\n   * @param value The amount being\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Mint(address indexed from, uint256 value, uint256 index);\\n  /**\\n   * @dev Emitted after setting of addresses as managers\\n   * @param managers the managers to be updated\\n   * @param flag `true` to set addresses as managers, `false` otherwise\\n   **/\\n  event UTokenManagersUpdated(address[] indexed managers, bool flag);\\n\\n  /**\\n   * @dev Mints `amount` uTokens to `user`\\n   * @param user The address receiving the minted tokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n  /**\\n   * @dev Emitted after uTokens are burned\\n   * @param from The owner of the uTokens, getting them burned\\n   * @param target The address that will receive the underlying\\n   * @param value The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The amount being transferred\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @dev Emitted when treasury address is updated in utoken\\n   * @param _newTreasuryAddress The new treasury address\\n   **/\\n  event TreasuryAddressUpdated(address indexed _newTreasuryAddress);\\n\\n  /**\\n    @dev Emitted after sweeping liquidity from the uToken to deposit it to external lending protocol\\n  * @param uToken The uToken swept\\n  * @param underlyingAsset The underlying asset from the uToken\\n  * @param amount The amount deposited to the lending protocol\\n  */\\n  event UTokenSwept(address indexed uToken, address indexed underlyingAsset, uint256 indexed amount);\\n\\n  /**\\n   * @dev Takes reserve liquidity from uToken and deposits it to external lening protocol\\n   **/\\n  function sweepUToken() external;\\n\\n  /**\\n   * @dev Burns uTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @param user The owner of the uTokens, getting them burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The new liquidity index of the reserve\\n   **/\\n  function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Mints uTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The new liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @dev Deposits `amount` to the lending protocol currently active\\n   * @param amount The amount of tokens to deposit\\n   */\\n  function depositReserves(uint256 amount) external;\\n\\n  /**\\n   * @dev Withdraws `amount` from the lending protocol currently active\\n   * @param amount The amount of tokens to withdraw\\n   */\\n  function withdrawReserves(uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Transfers the underlying asset to `target`. Used by the LendPool to transfer\\n   * assets in borrow() and withdraw()\\n   * @param user The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   * @return The amount transferred\\n   **/\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @return The available liquidity in reserve\\n   **/\\n  function getAvailableLiquidity() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the address of the incentives controller contract\\n   **/\\n  function getIncentivesController() external view returns (IIncentivesController);\\n\\n  /**\\n   * @dev Returns the address of the underlying asset of this uToken\\n   **/\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @dev Returns the address of the treasury set to this uToken\\n   **/\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @dev Sets the address of the treasury to this uToken\\n   **/\\n  function setTreasuryAddress(address treasury) external;\\n\\n  /**\\n   * @dev Updates the uToken manager addresses\\n   **/\\n  function updateUTokenManagers(address[] calldata managers, bool flag) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function balanceOf(address guy) external returns (uint256);\\n\\n  function allowance(address owner, address spender) external returns (uint256);\\n\\n  function transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IWETHGateway {\\n  /**\\n   * @dev deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (uTokens)\\n   * is minted.\\n   * @param onBehalfOf address of the user who will receive the uTokens representing the deposit\\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards.\\n   **/\\n  function depositETH(address onBehalfOf, uint16 referralCode) external payable;\\n\\n  /**\\n   * @dev withdraws the WETH _reserves of msg.sender.\\n   * @param amount amount of uWETH to withdraw and receive native ETH\\n   * @param to address of the user who will receive native ETH\\n   */\\n  function withdrawETH(uint256 amount, address to) external;\\n\\n  /**\\n   * @dev borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `LendPool.borrow`.\\n   * @param amount the amount of ETH to borrow\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param onBehalfOf Address of the user who will receive the loan. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   * @param referralCode integrators are assigned a referral code and can potentially receive rewards\\n   */\\n  function borrowETH(\\n    uint256 amount,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param amount the amount to repay, or uint256(-1) if the user wants to repay everything\\n   */\\n  function repayETH(address nftAsset, uint256 nftTokenId, uint256 amount) external payable returns (uint256, bool);\\n\\n  /**\\n   * @dev auction a borrow on the WETH reserve\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param onBehalfOf Address of the user who will receive the underlying NFT used as collateral.\\n   * Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral.\\n   */\\n  function auctionETH(address nftAsset, uint256 nftTokenId, address onBehalfOf) external payable;\\n\\n  /**\\n   * @dev redeems a borrow on the WETH reserve\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param amount The amount to repay the debt\\n   * @param bidFine The amount of bid fine\\n   */\\n  function redeemETH(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount,\\n    uint256 bidFine\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @dev liquidates a borrow on the WETH reserve\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   */\\n  function liquidateETH(address nftAsset, uint256 nftTokenId) external payable returns (uint256);\\n\\n  /**\\n    @dev Executes the buyout for an NFT with a non-healthy position collateral-wise\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n    * @param onBehalfOf The address that will receive the NFT, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of the NFT\\n   *   is a different wallet\\n   **/\\n  function buyoutETH(address nftAsset, uint256 nftTokenId, address onBehalfOf) external payable;\\n\\n  /**\\n   * @dev buy a debt on the WETH reserve\\n   * @param nftAsset The address of the debt NFT used as collateral\\n   * @param nftTokenId The token ID of the debt NFT used as collateral\\n   */\\n  function buyDebtETH(address nftAsset, uint256 nftTokenId, address onBehalfOf) external payable;\\n\\n  /**\\n   * @dev bids a debt on the WETH reserve\\n   * @param nftAsset The address of the debt NFT used as collateral\\n   * @param nftTokenId The token ID of the debt NFT used as collateral\\n   */\\n  function bidDebtETH(address nftAsset, uint256 nftTokenId, address onBehalfOf) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Errors library\\n * @author BendDao; Forked and edited by Unlockd\\n * @notice Defines the error messages emitted by the different contracts of the Unlockd protocol\\n */\\nlibrary Errors {\\n  enum ReturnCode {\\n    SUCCESS,\\n    FAILED\\n  }\\n\\n  string public constant SUCCESS = \\\"0\\\";\\n\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = \\\"100\\\"; // 'The caller must be the pool admin'\\n  string public constant CALLER_NOT_ADDRESS_PROVIDER = \\\"101\\\";\\n  string public constant INVALID_FROM_BALANCE_AFTER_TRANSFER = \\\"102\\\";\\n  string public constant INVALID_TO_BALANCE_AFTER_TRANSFER = \\\"103\\\";\\n  string public constant CALLER_NOT_ONBEHALFOF_OR_IN_WHITELIST = \\\"104\\\";\\n  string public constant CALLER_NOT_POOL_LIQUIDATOR = \\\"105\\\";\\n  string public constant INVALID_ZERO_ADDRESS = \\\"106\\\";\\n  string public constant CALLER_NOT_LTV_MANAGER = \\\"107\\\";\\n  string public constant CALLER_NOT_PRICE_MANAGER = \\\"108\\\";\\n  string public constant CALLER_NOT_UTOKEN_MANAGER = \\\"109\\\";\\n\\n  //math library errors\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"200\\\";\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"201\\\";\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"202\\\";\\n\\n  //validation & check errors\\n  string public constant VL_INVALID_AMOUNT = \\\"301\\\"; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = \\\"302\\\"; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = \\\"303\\\"; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"304\\\"; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_BORROWING_NOT_ENABLED = \\\"305\\\"; // 'Borrowing is not enabled'\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"306\\\"; // 'The collateral balance is 0'\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"307\\\"; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"308\\\"; // 'There is not enough collateral to cover a new borrow'\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"309\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NO_ACTIVE_NFT = \\\"310\\\";\\n  string public constant VL_NFT_FROZEN = \\\"311\\\";\\n  string public constant VL_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"312\\\"; // 'User did not borrow the specified currency'\\n  string public constant VL_INVALID_HEALTH_FACTOR = \\\"313\\\";\\n  string public constant VL_INVALID_ONBEHALFOF_ADDRESS = \\\"314\\\";\\n  string public constant VL_INVALID_TARGET_ADDRESS = \\\"315\\\";\\n  string public constant VL_INVALID_RESERVE_ADDRESS = \\\"316\\\";\\n  string public constant VL_SPECIFIED_LOAN_NOT_BORROWED_BY_USER = \\\"317\\\";\\n  string public constant VL_SPECIFIED_RESERVE_NOT_BORROWED_BY_USER = \\\"318\\\";\\n  string public constant VL_HEALTH_FACTOR_HIGHER_THAN_LIQUIDATION_THRESHOLD = \\\"319\\\";\\n  string public constant VL_TIMEFRAME_EXCEEDED = \\\"320\\\";\\n  string public constant VL_VALUE_EXCEED_TREASURY_BALANCE = \\\"321\\\";\\n\\n  //lend pool errors\\n  string public constant LP_CALLER_NOT_LEND_POOL_CONFIGURATOR = \\\"400\\\"; // 'The caller of the function is not the lending pool configurator'\\n  string public constant LP_IS_PAUSED = \\\"401\\\"; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"402\\\";\\n  string public constant LP_NOT_CONTRACT = \\\"403\\\";\\n  string public constant LP_BORROW_NOT_EXCEED_LIQUIDATION_THRESHOLD = \\\"404\\\";\\n  string public constant LP_BORROW_IS_EXCEED_LIQUIDATION_PRICE = \\\"405\\\";\\n  string public constant LP_NO_MORE_NFTS_ALLOWED = \\\"406\\\";\\n  string public constant LP_INVALID_USER_NFT_AMOUNT = \\\"407\\\";\\n  string public constant LP_INCONSISTENT_PARAMS = \\\"408\\\";\\n  string public constant LP_NFT_IS_NOT_USED_AS_COLLATERAL = \\\"409\\\";\\n  string public constant LP_CALLER_MUST_BE_AN_UTOKEN = \\\"410\\\";\\n  string public constant LP_INVALID_NFT_AMOUNT = \\\"411\\\";\\n  string public constant LP_NFT_HAS_USED_AS_COLLATERAL = \\\"412\\\";\\n  string public constant LP_DELEGATE_CALL_FAILED = \\\"413\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_EXTRA_DEBT = \\\"414\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_REDEEM_THRESHOLD = \\\"415\\\";\\n  string public constant LP_AMOUNT_GREATER_THAN_MAX_REPAY = \\\"416\\\";\\n  string public constant LP_NFT_TOKEN_ID_EXCEED_MAX_LIMIT = \\\"417\\\";\\n  string public constant LP_NFT_SUPPLY_NUM_EXCEED_MAX_LIMIT = \\\"418\\\";\\n  string public constant LP_CALLER_NOT_LEND_POOL_LIQUIDATOR_NOR_GATEWAY = \\\"419\\\";\\n  string public constant LP_CONSECUTIVE_BIDS_NOT_ALLOWED = \\\"420\\\";\\n  string public constant LP_INVALID_OVERFLOW_VALUE = \\\"421\\\";\\n  string public constant LP_CALLER_NOT_NFT_HOLDER = \\\"422\\\";\\n  string public constant LP_NFT_NOT_ALLOWED_TO_SELL = \\\"423\\\";\\n  string public constant LP_RESERVES_WITHOUT_ENOUGH_LIQUIDITY = \\\"424\\\";\\n  string public constant LP_COLLECTION_NOT_SUPPORTED = \\\"425\\\";\\n  string public constant LP_MSG_VALUE_DIFFERENT_FROM_CONFIG_FEE = \\\"426\\\";\\n  string public constant LP_INVALID_SAFE_HEALTH_FACTOR = \\\"427\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_DEBT = \\\"428\\\";\\n  string public constant LP_AMOUNT_DIFFERENT_FROM_REQUIRED_BUYOUT_PRICE = \\\"429\\\";\\n  string public constant LP_CALLER_NOT_DEBT_TOKEN_MANAGER = \\\"430\\\";\\n  string public constant LP_CALLER_NOT_RESERVOIR_OR_DEBT_MARKET = \\\"431\\\";\\n  string public constant LP_AMOUNT_LESS_THAN_BUYOUT_PRICE = \\\"432\\\";\\n\\n  //lend pool loan errors\\n  string public constant LPL_CLAIM_HASNT_STARTED_YET = \\\"479\\\";\\n  string public constant LPL_INVALID_LOAN_STATE = \\\"480\\\";\\n  string public constant LPL_INVALID_LOAN_AMOUNT = \\\"481\\\";\\n  string public constant LPL_INVALID_TAKEN_AMOUNT = \\\"482\\\";\\n  string public constant LPL_AMOUNT_OVERFLOW = \\\"483\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_DEBT_PRICE = \\\"484\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_HIGHEST_PRICE = \\\"485\\\";\\n  string public constant LPL_BID_REDEEM_DURATION_HAS_END = \\\"486\\\";\\n  string public constant LPL_BID_USER_NOT_SAME = \\\"487\\\";\\n  string public constant LPL_BID_REPAY_AMOUNT_NOT_ENOUGH = \\\"488\\\";\\n  string public constant LPL_BID_AUCTION_DURATION_HAS_END = \\\"489\\\";\\n  string public constant LPL_BID_AUCTION_DURATION_NOT_END = \\\"490\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_BORROW = \\\"491\\\";\\n  string public constant LPL_INVALID_BIDDER_ADDRESS = \\\"492\\\";\\n  string public constant LPL_AMOUNT_LESS_THAN_BID_FINE = \\\"493\\\";\\n  string public constant LPL_INVALID_BID_FINE = \\\"494\\\";\\n  string public constant LPL_BID_PRICE_LESS_THAN_MIN_BID_REQUIRED = \\\"495\\\";\\n  string public constant LPL_BID_NOT_BUYOUT_PRICE = \\\"496\\\";\\n  string public constant LPL_BUYOUT_DURATION_HAS_END = \\\"497\\\";\\n  string public constant LPL_BUYOUT_PRICE_LESS_THAN_BORROW = \\\"498\\\";\\n  string public constant LPL_CALLER_MUST_BE_MARKET_ADAPTER = \\\"499\\\";\\n\\n  //common token errors\\n  string public constant CT_CALLER_MUST_BE_LEND_POOL = \\\"500\\\"; // 'The caller of this function must be a lending pool'\\n  string public constant CT_INVALID_MINT_AMOUNT = \\\"501\\\"; //invalid amount to mint\\n  string public constant CT_INVALID_BURN_AMOUNT = \\\"502\\\"; //invalid amount to burn\\n  string public constant CT_BORROW_ALLOWANCE_NOT_ENOUGH = \\\"503\\\";\\n  string public constant CT_CALLER_MUST_BE_DEBT_MARKET = \\\"504\\\"; // 'The caller of this function must be a debt market'\\n\\n  //reserve logic errors\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"601\\\"; // 'Reserve has already been initialized'\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"602\\\"; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"603\\\"; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"604\\\"; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"605\\\"; //  Variable borrow rate overflows uint128\\n\\n  //configure errors\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"700\\\"; // 'The liquidity of the reserve needs to be 0'\\n  string public constant LPC_INVALID_CONFIGURATION = \\\"701\\\"; // 'Invalid risk parameters for the reserve'\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"702\\\"; // 'The caller must be the emergency admin'\\n  string public constant LPC_INVALID_UNFT_ADDRESS = \\\"703\\\";\\n  string public constant LPC_INVALIED_LOAN_ADDRESS = \\\"704\\\";\\n  string public constant LPC_NFT_LIQUIDITY_NOT_0 = \\\"705\\\";\\n  string public constant LPC_PARAMS_MISMATCH = \\\"706\\\"; // NFT assets & token ids mismatch\\n  string public constant LPC_FEE_PERCENTAGE_TOO_HIGH = \\\"707\\\";\\n  string public constant LPC_INVALID_LTVMANAGER_ADDRESS = \\\"708\\\";\\n  string public constant LPC_INCONSISTENT_PARAMS = \\\"709\\\";\\n  string public constant LPC_INVALID_SAFE_HEALTH_FACTOR = \\\"710\\\";\\n  //reserve config errors\\n  string public constant RC_INVALID_LTV = \\\"730\\\";\\n  string public constant RC_INVALID_LIQ_THRESHOLD = \\\"731\\\";\\n  string public constant RC_INVALID_LIQ_BONUS = \\\"732\\\";\\n  string public constant RC_INVALID_DECIMALS = \\\"733\\\";\\n  string public constant RC_INVALID_RESERVE_FACTOR = \\\"734\\\";\\n  string public constant RC_INVALID_REDEEM_DURATION = \\\"735\\\";\\n  string public constant RC_INVALID_AUCTION_DURATION = \\\"736\\\";\\n  string public constant RC_INVALID_REDEEM_FINE = \\\"737\\\";\\n  string public constant RC_INVALID_REDEEM_THRESHOLD = \\\"738\\\";\\n  string public constant RC_INVALID_MIN_BID_FINE = \\\"739\\\";\\n  string public constant RC_INVALID_MAX_BID_FINE = \\\"740\\\";\\n  string public constant RC_INVALID_MAX_CONFIG_TIMESTAMP = \\\"741\\\";\\n\\n  //address provider erros\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"760\\\"; // 'Provider is not registered'\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"761\\\";\\n\\n  //NFTOracleErrors\\n  string public constant NFTO_INVALID_PRICEM_ADDRESS = \\\"900\\\";\\n\\n  //Debt Market\\n  string public constant DM_CALLER_NOT_THE_OWNER = \\\"1000\\\";\\n  string public constant DM_DEBT_SHOULD_EXIST = \\\"1001\\\";\\n  string public constant DM_INVALID_AMOUNT = \\\"1002\\\";\\n  string public constant DM_FAIL_ON_SEND_ETH = \\\"1003\\\";\\n  string public constant DM_DEBT_SHOULD_NOT_BE_SOLD = \\\"1004\\\";\\n  string public constant DM_DEBT_ALREADY_EXIST = \\\"1005\\\";\\n  string public constant DM_LOAN_SHOULD_EXIST = \\\"1006\\\";\\n  string public constant DM_AUCTION_ALREADY_ENDED = \\\"1007\\\";\\n  string public constant DM_BID_PRICE_HIGHER_THAN_SELL_PRICE = \\\"1008\\\";\\n  string public constant DM_BID_PRICE_LESS_THAN_PREVIOUS_BID = \\\"1009\\\";\\n  string public constant DM_INVALID_SELL_TYPE = \\\"1010\\\";\\n  string public constant DM_AUCTION_NOT_ALREADY_ENDED = \\\"1011\\\";\\n  string public constant DM_INVALID_CLAIM_RECEIVER = \\\"1012\\\";\\n  string public constant DM_AMOUNT_DIFFERENT_FROM_SELL_PRICE = \\\"1013\\\";\\n  string public constant DM_BID_PRICE_LESS_THAN_MIN_BID_PRICE = \\\"1014\\\";\\n  string public constant DM_BORROWED_AMOUNT_DIVERGED = \\\"1015\\\";\\n  string public constant DM_INVALID_AUTHORIZED_ADDRESS = \\\"1016\\\";\\n  string public constant DM_CALLER_NOT_THE_OWNER_OR_AUTHORIZED = \\\"1017\\\";\\n  string public constant DM_INVALID_DELTA_BID_PERCENT = \\\"1018\\\";\\n  string public constant DM_IS_PAUSED = \\\"1019\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    //tokens addresses\\n    address uTokenAddress;\\n    address debtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateAddress;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint8 id;\\n  }\\n\\n  struct NftData {\\n    //stores the nft configuration\\n    NftConfigurationMap configuration;\\n    //address of the uNFT contract\\n    address uNftAddress;\\n    //the id of the nft. Represents the position in the list of the active nfts\\n    uint8 id;\\n    uint256 maxSupply;\\n    uint256 maxTokenId;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: Reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60-63: reserved\\n    //bit 64-79: reserve factor\\n    uint256 data;\\n  }\\n\\n  struct NftConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 56: NFT is active\\n    //bit 57: NFT is frozen\\n    //bit 64-71: Redeem duration\\n    //bit 72-79: Auction duration\\n    //bit 80-95: Redeem fine\\n    //bit 96-111: Redeem threshold\\n    //bit 112-127: Min bid fine\\n    //bit 128-159: Timestamp Config\\n    uint256 data;\\n  }\\n\\n  /**\\n   * @dev Enum describing the current state of a loan\\n   * State change flow:\\n   *  Created -> Active -> Repaid\\n   *                    -> Auction -> Defaulted\\n   */\\n  enum LoanState {\\n    // We need a default that is not 'Created' - this is the zero value\\n    None,\\n    // The loan data is stored, but not initiated yet.\\n    Created,\\n    // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n    Active,\\n    // The loan is in auction, higest price liquidator will got chance to claim it.\\n    Auction,\\n    // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n    Repaid,\\n    // The loan was delinquent and collateral claimed by the liquidator. This is a terminal state.\\n    Defaulted\\n  }\\n\\n  struct LoanData {\\n    //the id of the nft loan\\n    uint256 loanId;\\n    //the current state of the loan\\n    LoanState state;\\n    //address of borrower\\n    address borrower;\\n    //address of nft asset token\\n    address nftAsset;\\n    //the id of nft token\\n    uint256 nftTokenId;\\n    //address of reserve asset token\\n    address reserveAsset;\\n    //scaled borrow amount. Expressed in ray\\n    uint256 scaledAmount;\\n    //start time of first bid time\\n    uint256 bidStartTimestamp;\\n    //bidder address of higest bid\\n    address bidderAddress;\\n    //price of higest bid\\n    uint256 bidPrice;\\n    //borrow amount of loan\\n    uint256 bidBorrowAmount;\\n    //bidder address of first bid\\n    address firstBidderAddress;\\n  }\\n\\n  struct ExecuteDepositParams {\\n    address initiator;\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address initiator;\\n    address asset;\\n    uint256 amount;\\n    address to;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address initiator;\\n    address asset;\\n    uint256 amount;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 amount;\\n  }\\n\\n  struct ExecuteAuctionParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 bidPrice;\\n    address onBehalfOf;\\n    uint256 auctionDurationConfigFee;\\n    uint256 bidDelta;\\n  }\\n\\n  struct ExecuteRedeemParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 amount;\\n    uint256 bidFine;\\n    uint256 safeHealthFactor;\\n  }\\n\\n  struct ExecuteLiquidateParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 amount;\\n  }\\n\\n  struct ExecuteBuyoutParams {\\n    address initiator;\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    address onBehalfOf;\\n  }\\n\\n  struct ExecuteLiquidateMarketsParams {\\n    address nftAsset;\\n    uint256 nftTokenId;\\n    uint256 liquidateFeePercentage;\\n    uint256 amountOutMin;\\n  }\\n\\n  struct ExecuteLendPoolStates {\\n    uint256 pauseStartTime;\\n    uint256 pauseDurationTime;\\n  }\\n\\n  struct ExecuteYearnParams {\\n    address underlyingAsset;\\n    uint256 amount;\\n  }\\n\\n  enum DebtMarketType {\\n    FixedPrice, //0\\n    Auction, //1\\n    Mixed //2\\n  }\\n\\n  enum DebtMarketState {\\n    //No bids\\n    New,\\n    //Exist bids\\n    Active,\\n    //Is sold\\n    Sold,\\n    Canceled\\n  }\\n\\n  struct DebtMarketListing {\\n    uint256 debtId;\\n    address debtor;\\n    address nftAsset;\\n    uint256 tokenId;\\n    DebtMarketType sellType;\\n    DebtMarketState state;\\n    uint256 sellPrice;\\n    address reserveAsset;\\n    uint256 scaledAmount;\\n    address bidderAddress;\\n    uint256 bidPrice;\\n    uint256 auctionEndTimestamp;\\n    uint256 startBiddingPrice;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/EmergencyTokenRecoveryUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport {IPunks} from \\\"../interfaces/IPunks.sol\\\";\\n\\n/**\\n * @title EmergencyTokenRecovery\\n * @notice Add Emergency Recovery Logic to contract implementation\\n   ; Forked and edited by Unlockd\\n **/\\nabstract contract EmergencyTokenRecoveryUpgradeable is OwnableUpgradeable {\\n  /*//////////////////////////////////////////////////////////////\\n                          EVENTS\\n  //////////////////////////////////////////////////////////////*/\\n  event EmergencyEtherTransfer(address indexed to, uint256 amount);\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          INITIALIZERS\\n  //////////////////////////////////////////////////////////////*/\\n  function __EmergencyTokenRecovery_init() internal onlyInitializing {\\n    __Ownable_init();\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          MAIN LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due\\n   * direct transfers to the contract address.\\n   * @param token token to transfer\\n   * @param to recipient of the transfer\\n   * @param amount amount to send\\n   */\\n  function emergencyERC20Transfer(address token, address to, uint256 amount) external onlyOwner {\\n    IERC20Upgradeable(token).transfer(to, amount);\\n  }\\n\\n  /**\\n   * @dev transfer ERC721 from the utility contract, for ERC721 recovery in case of stuck tokens due\\n   * direct transfers to the contract address.\\n   * @param token token to transfer\\n   * @param to recipient of the transfer\\n   * @param id token id to send\\n   */\\n  function emergencyERC721Transfer(address token, address to, uint256 id) external onlyOwner {\\n    IERC721Upgradeable(token).safeTransferFrom(address(this), to, id);\\n  }\\n\\n  /**\\n   * @dev transfer CryptoPunks from the utility contract, for punks recovery in case of stuck punks\\n   * due direct transfers to the contract address.\\n   * @param to recipient of the transfer\\n   * @param index punk index to send\\n   */\\n  function emergencyPunksTransfer(address punks, address to, uint256 index) external onlyOwner {\\n    IPunks(punks).transferPunk(to, index);\\n  }\\n\\n  /**\\n   * @dev transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether\\n   * due selfdestructs or transfer ether to pre-computated contract address before deployment.\\n   * @param to recipient of the transfer\\n   * @param amount amount to send\\n   */\\n  function emergencyEtherTransfer(address to, uint256 amount) external onlyOwner {\\n    (bool success, ) = to.call{value: amount}(new bytes(0));\\n    require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    emit EmergencyEtherTransfer(to, amount);\\n  }\\n\\n  uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/WETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {ERC721HolderUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport {IDebtMarket} from \\\"../interfaces/IDebtMarket.sol\\\";\\nimport {IWETHGateway} from \\\"../interfaces/IWETHGateway.sol\\\";\\nimport {ILendPoolAddressesProvider} from \\\"../interfaces/ILendPoolAddressesProvider.sol\\\";\\nimport {ILendPool} from \\\"../interfaces/ILendPool.sol\\\";\\nimport {ILendPoolLoan} from \\\"../interfaces/ILendPoolLoan.sol\\\";\\nimport {IUToken} from \\\"../interfaces/IUToken.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\n\\nimport {EmergencyTokenRecoveryUpgradeable} from \\\"./EmergencyTokenRecoveryUpgradeable.sol\\\";\\n\\ncontract WETHGateway is IWETHGateway, ERC721HolderUpgradeable, EmergencyTokenRecoveryUpgradeable {\\n  /*//////////////////////////////////////////////////////////////\\n                          Structs\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @notice Struct containing local variables for the Guard modifier.\\n   * @param cachedPoolLoan The cached instance of the lend pool loan contract.\\n   * @param loanId The ID of the loan.\\n   * @param loan The loan data.\\n   */\\n  struct GuardVars {\\n    ILendPoolLoan cachedPoolLoan;\\n    uint256 loanId;\\n    DataTypes.LoanData loan;\\n  }\\n  /*//////////////////////////////////////////////////////////////\\n                        GENERAL VARIABLES\\n  //////////////////////////////////////////////////////////////*/\\n  ILendPoolAddressesProvider internal _addressProvider;\\n\\n  IWETH internal WETH;\\n\\n  mapping(address => bool) internal _callerWhitelists;\\n\\n  uint256 private constant _NOT_ENTERED = 0;\\n  uint256 private constant _ENTERED = 1;\\n  uint256 private _status;\\n  /*//////////////////////////////////////////////////////////////\\n                          MODIFIERS\\n  //////////////////////////////////////////////////////////////*/\\n  modifier loanReserveShouldBeWETH(address nftAsset, uint256 tokenId) {\\n    GuardVars memory vars;\\n    vars.cachedPoolLoan = _getLendPoolLoan();\\n\\n    vars.loanId = vars.cachedPoolLoan.getCollateralLoanId(nftAsset, tokenId);\\n    require(vars.loanId > 0, \\\"collateral loan id not exist\\\");\\n\\n    vars.loan = vars.cachedPoolLoan.getLoan(vars.loanId);\\n    require(vars.loan.reserveAsset == address(WETH), \\\"loan reserve not WETH\\\");\\n\\n    _;\\n  }\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          INITIALIZERS\\n  //////////////////////////////////////////////////////////////*/\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() initializer {}\\n\\n  /**\\n   * @dev Sets the WETH address and the LendPoolAddressesProvider address. Infinite approves lend pool.\\n   * @param weth Address of the Wrapped Ether contract\\n   **/\\n  function initialize(address addressProvider, address weth) public initializer {\\n    __ERC721Holder_init();\\n    __EmergencyTokenRecovery_init();\\n\\n    _addressProvider = ILendPoolAddressesProvider(addressProvider);\\n\\n    WETH = IWETH(weth);\\n\\n    WETH.approve(address(_getLendPool()), type(uint256).max);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                    Fallback and Receive Functions\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\\n   */\\n  receive() external payable {\\n    require(msg.sender == address(WETH), \\\"Receive not allowed\\\");\\n  }\\n\\n  /**\\n   * @dev Revert fallback calls\\n   */\\n  fallback() external payable {\\n    revert(\\\"Fallback not allowed\\\");\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          MAIN LOGIC\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev approves the lendpool for the given NFT assets\\n   * @param nftAssets the array of nft assets\\n   */\\n  function authorizeLendPoolNFT(address[] calldata nftAssets) external nonReentrant onlyOwner {\\n    uint256 nftAssetsLength = nftAssets.length;\\n    for (uint256 i; i < nftAssetsLength; ) {\\n      IERC721Upgradeable(nftAssets[i]).setApprovalForAll(address(_getLendPool()), true);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev authorizes/unauthorizes a list of callers for the whitelist\\n   * @param callers the array of callers to be authorized\\n   * @param flag the flag to authorize/unauthorize\\n   */\\n  function authorizeCallerWhitelist(address[] calldata callers, bool flag) external nonReentrant onlyOwner {\\n    uint256 callerLength = callers.length;\\n    for (uint256 i; i < callerLength; ) {\\n      _callerWhitelists[callers[i]] = flag;\\n\\n      unchecked {\\n        i = i + 1;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IWETHGateway\\n   */\\n  function depositETH(address onBehalfOf, uint16 referralCode) external payable override nonReentrant {\\n    _checkValidCallerAndOnBehalfOf(onBehalfOf);\\n\\n    ILendPool cachedPool = _getLendPool();\\n\\n    WETH.deposit{value: msg.value}();\\n    cachedPool.deposit(address(WETH), msg.value, onBehalfOf, referralCode);\\n  }\\n\\n  /**\\n   * @inheritdoc IWETHGateway\\n   */\\n  function withdrawETH(uint256 amount, address to) external override nonReentrant {\\n    _checkValidCallerAndOnBehalfOf(to);\\n\\n    ILendPool cachedPool = _getLendPool();\\n    IUToken uWETH = IUToken(cachedPool.getReserveData(address(WETH)).uTokenAddress);\\n\\n    uint256 userBalance = uWETH.balanceOf(msg.sender);\\n    uint256 amountToWithdraw = amount;\\n\\n    // if amount is equal to uint(-1), the user wants to redeem everything\\n    if (amount == type(uint256).max) {\\n      amountToWithdraw = userBalance;\\n    }\\n\\n    uWETH.transferFrom(msg.sender, address(this), amountToWithdraw);\\n    cachedPool.withdraw(address(WETH), amountToWithdraw, address(this));\\n    WETH.withdraw(amountToWithdraw);\\n    _safeTransferETH(to, amountToWithdraw);\\n  }\\n\\n  /**\\n   * @inheritdoc IWETHGateway\\n   */\\n  function borrowETH(\\n    uint256 amount,\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external override nonReentrant {\\n    _checkValidCallerAndOnBehalfOf(onBehalfOf);\\n\\n    ILendPool cachedPool = _getLendPool();\\n    ILendPoolLoan cachedPoolLoan = _getLendPoolLoan();\\n\\n    uint256 loanId = cachedPoolLoan.getCollateralLoanId(nftAsset, nftTokenId);\\n    if (loanId == 0) {\\n      IERC721Upgradeable(nftAsset).safeTransferFrom(msg.sender, address(this), nftTokenId);\\n    }\\n    cachedPool.borrow(address(WETH), amount, nftAsset, nftTokenId, onBehalfOf, referralCode);\\n    WETH.withdraw(amount);\\n    _safeTransferETH(onBehalfOf, amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IWETHGateway\\n   */\\n  function repayETH(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount\\n  ) external payable override nonReentrant returns (uint256, bool) {\\n    (uint256 repayAmount, bool repayAll) = _repayETH(nftAsset, nftTokenId, amount, 0);\\n\\n    // refund remaining dust eth\\n    if (msg.value > repayAmount) {\\n      _safeTransferETH(msg.sender, msg.value - repayAmount);\\n    }\\n\\n    return (repayAmount, repayAll);\\n  }\\n\\n  function auctionETH(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf\\n  ) external payable override nonReentrant loanReserveShouldBeWETH(nftAsset, nftTokenId) {\\n    _checkValidCallerAndOnBehalfOf(onBehalfOf);\\n\\n    ILendPool cachedPool = _getLendPool();\\n\\n    WETH.deposit{value: msg.value}();\\n    cachedPool.auction(nftAsset, nftTokenId, msg.value, onBehalfOf);\\n  }\\n\\n  function redeemETH(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount,\\n    uint256 bidFine\\n  ) external payable override nonReentrant loanReserveShouldBeWETH(nftAsset, nftTokenId) returns (uint256) {\\n    ILendPool cachedPool = _getLendPool();\\n\\n    require(msg.value >= (amount + bidFine), \\\"msg.value is less than redeem amount\\\");\\n\\n    WETH.deposit{value: msg.value}();\\n\\n    uint256 paybackAmount = cachedPool.redeem(nftAsset, nftTokenId, amount, bidFine);\\n\\n    // refund remaining dust eth\\n    if (msg.value > paybackAmount) {\\n      WETH.withdraw(msg.value - paybackAmount);\\n      _safeTransferETH(msg.sender, msg.value - paybackAmount);\\n    }\\n\\n    return paybackAmount;\\n  }\\n\\n  function liquidateETH(\\n    address nftAsset,\\n    uint256 nftTokenId\\n  ) external payable override nonReentrant loanReserveShouldBeWETH(nftAsset, nftTokenId) returns (uint256) {\\n    ILendPool cachedPool = _getLendPool();\\n\\n    if (msg.value > 0) {\\n      WETH.deposit{value: msg.value}();\\n    }\\n\\n    uint256 extraAmount = cachedPool.liquidate(nftAsset, nftTokenId, msg.value);\\n\\n    if (msg.value > extraAmount) {\\n      WETH.withdraw(msg.value - extraAmount);\\n      _safeTransferETH(msg.sender, msg.value - extraAmount);\\n    }\\n\\n    return (extraAmount);\\n  }\\n\\n  function bidDebtETH(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf\\n  ) external payable override nonReentrant loanReserveShouldBeWETH(nftAsset, nftTokenId) {\\n    bytes32 DEBT_MARKET = keccak256(\\\"DEBT_MARKET\\\");\\n\\n    IDebtMarket debtMarketAddress = IDebtMarket(_addressProvider.getAddress(DEBT_MARKET));\\n\\n    if (msg.value > 0) {\\n      WETH.deposit{value: msg.value}();\\n    }\\n\\n    if (WETH.allowance(address(this), address(debtMarketAddress)) == 0) {\\n      WETH.approve(address(debtMarketAddress), type(uint256).max);\\n    }\\n    debtMarketAddress.bid(nftAsset, nftTokenId, msg.value, onBehalfOf);\\n  }\\n\\n  function buyDebtETH(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    address onBehalfOf\\n  ) external payable override nonReentrant loanReserveShouldBeWETH(nftAsset, nftTokenId) {\\n    bytes32 DEBT_MARKET = keccak256(\\\"DEBT_MARKET\\\");\\n\\n    IDebtMarket debtMarketAddress = IDebtMarket(_addressProvider.getAddress(DEBT_MARKET));\\n\\n    if (msg.value > 0) {\\n      WETH.deposit{value: msg.value}();\\n    }\\n\\n    if (WETH.allowance(address(this), address(debtMarketAddress)) == 0) {\\n      WETH.approve(address(debtMarketAddress), type(uint256).max);\\n    }\\n\\n    debtMarketAddress.buy(nftAsset, nftTokenId, onBehalfOf, msg.value);\\n  }\\n\\n  /**\\n    @dev Executes the buyout for an NFT with a non-healthy position collateral-wise\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n    * @param onBehalfOf The address that will receive the NFT, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of the NFT\\n   *   is a different wallet\\n   **/\\n  function buyoutETH(address nftAsset, uint256 nftTokenId, address onBehalfOf) external payable override nonReentrant {\\n    _checkValidCallerAndOnBehalfOf(onBehalfOf);\\n\\n    ILendPool cachedPool = _getLendPool();\\n    ILendPoolLoan cachedPoolLoan = _getLendPoolLoan();\\n\\n    uint256 loanId = cachedPoolLoan.getCollateralLoanId(nftAsset, nftTokenId);\\n    require(loanId > 0, \\\"collateral loan id not exist\\\");\\n\\n    DataTypes.LoanData memory loan = cachedPoolLoan.getLoan(loanId);\\n    require(loan.reserveAsset == address(WETH), \\\"loan reserve not WETH\\\");\\n\\n    if (msg.value > 0) {\\n      WETH.deposit{value: msg.value}();\\n    }\\n\\n    cachedPool.buyout(nftAsset, nftTokenId, onBehalfOf);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                          INTERNALS\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\\n   * @param nftAsset The address of the underlying NFT used as collateral\\n   * @param nftTokenId The token ID of the underlying NFT used as collateral\\n   * @param amount the amount to repay, or uint256(-1) if the user wants to repay everything\\n   * @param accAmount the accumulated amount\\n   */\\n  function _repayETH(\\n    address nftAsset,\\n    uint256 nftTokenId,\\n    uint256 amount,\\n    uint256 accAmount\\n  ) internal loanReserveShouldBeWETH(nftAsset, nftTokenId) returns (uint256, bool) {\\n    ILendPoolLoan cachedPoolLoan = _getLendPoolLoan();\\n    uint256 loanId = cachedPoolLoan.getCollateralLoanId(nftAsset, nftTokenId);\\n    (, uint256 repayDebtAmount) = cachedPoolLoan.getLoanReserveBorrowAmount(loanId);\\n\\n    if (amount < repayDebtAmount) {\\n      repayDebtAmount = amount;\\n    }\\n\\n    require(msg.value >= (accAmount + repayDebtAmount), \\\"msg.value is less than repay amount\\\");\\n\\n    WETH.deposit{value: repayDebtAmount}();\\n    (uint256 paybackAmount, bool burn) = _getLendPool().repay(nftAsset, nftTokenId, amount);\\n\\n    return (paybackAmount, burn);\\n  }\\n\\n  /**\\n   * @dev transfer ETH to an address, revert if it fails.\\n   * @param to recipient of the transfer\\n   * @param value the amount to send\\n   */\\n  function _safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n  }\\n\\n  /**\\n   * @notice returns the LendPool address\\n   */\\n  function _getLendPool() internal view returns (ILendPool) {\\n    return ILendPool(_addressProvider.getLendPool());\\n  }\\n\\n  /**\\n   * @notice returns the LendPoolLoan address\\n   */\\n  function _getLendPoolLoan() internal view returns (ILendPoolLoan) {\\n    return ILendPoolLoan(_addressProvider.getLendPoolLoan());\\n  }\\n\\n  /**\\n   * @dev checks if caller's approved address is valid\\n   * @param onBehalfOf the address to check approval of the caller\\n   */\\n  function _checkValidCallerAndOnBehalfOf(address onBehalfOf) internal view {\\n    require(\\n      (onBehalfOf == _msgSender()) || (_callerWhitelists[_msgSender()] == true),\\n      Errors.CALLER_NOT_ONBEHALFOF_OR_IN_WHITELIST\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                        GETTERS & SETTERS\\n  //////////////////////////////////////////////////////////////*/\\n  /**\\n   * @dev checks if caller is whitelisted\\n   * @param caller the caller to check\\n   */\\n  function isCallerInWhitelist(address caller) external view returns (bool) {\\n    return _callerWhitelists[caller];\\n  }\\n\\n  /**\\n   * @dev Get WETH address used by WETHGateway\\n   */\\n  function getWETHAddress() external view returns (address) {\\n    return address(WETH);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyEtherTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"auctionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"callers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"authorizeCallerWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"nftAssets\",\"type\":\"address[]\"}],\"name\":\"authorizeLendPoolNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"bidDebtETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"buyDebtETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"buyoutETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyERC20Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emergencyERC721Transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEtherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"punks\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"emergencyPunksTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isCallerInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"}],\"name\":\"liquidateETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidFine\",\"type\":\"uint256\"}],\"name\":\"redeemETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WETHGateway", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}