{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PresaleCSC.sol\": {\r\n      \"content\": \"/*\\n   _____                  _        _____                  _____      _\\n  / ____|                | |      / ____|                / ____|    (_)\\n | |     _ __ _   _ _ __ | |_ ___| (___   ___ __ _ _ __ | |     ___  _ _ __\\n | |    | '__| | | | '_ \\\\| __/ _ \\\\\\\\___ \\\\ / __/ _` | '_ \\\\| |    / _ \\\\| | '_ \\\\\\n | |____| |  | |_| | |_) | || (_) |___) | (_| (_| | | | | |___| (_) | | | | |\\n  \\\\_____|_|   \\\\__, | .__/ \\\\__\\\\___/_____/ \\\\___\\\\__,_|_| |_|\\\\_____\\\\___/|_|_| |_|\\n  _____        __/ | |      _\\n |  __ \\\\      |___/|_|     | |\\n | |__) | __ ___  ___  __ _| | ___\\n |  ___/ '__/ _ \\\\/ __|/ _` | |/ _ \\\\\\n | |   | | |  __/\\\\__ \\\\ (_| | |  __/\\n |_|   |_|  \\\\___||___/\\\\__,_|_|\\\\___|\\n\\n*/\\n\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"./ICryptoScanCoin.sol\\\";\\nimport \\\"./IPresaleCSC.sol\\\";\\nimport \\\"./IPriceFeed.sol\\\";\\n\\nuint256 constant _1_WEEK = 7 days;\\nuint256 constant _2_WEEKS = 2 * _1_WEEK;\\nuint256 constant _3_WEEKS = 3 * _1_WEEK;\\nuint256 constant _1_MONTH = 30 days;\\nuint256 constant _2_MONTHS = 2 * _1_MONTH;\\nuint256 constant _3_MONTHS = 3 * _1_MONTH;\\nuint256 constant _4_MONTHS = 4 * _1_MONTH;\\n\\nuint256 constant UNLOCK_PERCENT_BEFORE_1_MONTH = 10;\\nuint256 constant UNLOCK_PERCENT_BEFORE_2_MONTHS = 25;\\nuint256 constant UNLOCK_PERCENT_BEFORE_3_MONTHS = 45;\\nuint256 constant UNLOCK_PERCENT_BEFORE_4_MONTHS = 70;\\n\\ncontract PresaleCSC is IPresaleCSC, ReentrancyGuard, Ownable {\\n\\n    uint256 public constant DEFAULT_PHASE_INTERVAL = _3_WEEKS;\\n\\n    // SAFETY_GO_PUBLIC_OFFSET should be less than SAFETY_VESTING_START_TIME_OFFSET\\n    uint256 public constant SAFETY_GO_PUBLIC_OFFSET = _1_WEEK;\\n    uint256 public constant SAFETY_VESTING_START_TIME_OFFSET = _2_WEEKS;\\n\\n    uint256 public constant MOST_COMMON_DECIMALS = 18;\\n\\n    uint256 public constant CSC_TOKEN_DECIMALS = 18;\\n    uint256 public constant PRICE_FEED_USD_DECIMALS = 8;\\n    uint256 public constant USD_DECIMALS = MOST_COMMON_DECIMALS;\\n    uint256 public constant USDT_TOKEN_DECIMALS = 6;\\n    uint256 public constant ETH_TOKEN_DECIMALS = 18;\\n\\n    uint256 public constant CSC = 10 ** CSC_TOKEN_DECIMALS;\\n    uint256 public constant TENTH_OF_A_CENT = 10 ** (USD_DECIMALS - 3);\\n    uint256 public constant USD = 1000 * TENTH_OF_A_CENT;\\n    uint256 public constant USDT = 10 ** USDT_TOKEN_DECIMALS;\\n    uint256 public constant ETH = 10 ** ETH_TOKEN_DECIMALS;\\n\\n    uint256 public constant NUMBER_OF_CSC_TOKENS_FOR_EXCHANGE = 75_000_000;\\n\\n    uint256 public constant INITIAL_MAX_TOKENS_TO_BUY = 3_000_000;\\n    uint256 public constant INITIAL_MIN_TOKENS_TO_BUY = 300;\\n\\n    uint256 public constant NUMBER_OF_PHASES = 4;\\n\\n    uint256 public constant LISTING_PRICE_IN_USD = 100 * TENTH_OF_A_CENT;\\n\\n    uint256 public constant MINIMUM_DEX_PERCENTAGE = 50;\\n    uint256 public constant MAXIMUM_DEX_PERCENTAGE = 80;\\n\\n    uint256[NUMBER_OF_PHASES] public TOKENS_TO_SELL_PER_PHASE = [\\n        12_500_000,\\n        25_000_000,\\n        37_500_000,\\n        50_000_000\\n    ];\\n\\n    // WITHOUT decimals!\\n    uint256[NUMBER_OF_PHASES] public TOTAL_TOKENS_PER_PHASE = [\\n        TOKENS_TO_SELL_PER_PHASE[0],\\n        TOKENS_TO_SELL_PER_PHASE[0] + TOKENS_TO_SELL_PER_PHASE[1],\\n        TOKENS_TO_SELL_PER_PHASE[0] + TOKENS_TO_SELL_PER_PHASE[1] + TOKENS_TO_SELL_PER_PHASE[2],\\n        TOKENS_TO_SELL_PER_PHASE[0] + TOKENS_TO_SELL_PER_PHASE[1] + TOKENS_TO_SELL_PER_PHASE[2] + TOKENS_TO_SELL_PER_PHASE[3]\\n    ];\\n\\n    // WITH decimals!\\n    uint256[NUMBER_OF_PHASES] public PRICES_PER_PHASE = [\\n        33 * TENTH_OF_A_CENT,\\n        40 * TENTH_OF_A_CENT,\\n        51 * TENTH_OF_A_CENT,\\n        72 * TENTH_OF_A_CENT\\n    ];\\n\\n    address private immutable _treasuryWallet;\\n\\n    uint256 private _totalTokensSold;\\n    uint256 private _startTime;\\n\\n    uint256 private _maxTokensToBuy;\\n    uint256 private _minTokensToBuy;\\n    uint256 private _currentPhase;\\n\\n    uint256[] private _phaseEndTimes;\\n    uint256[] private _soldTokensInPhase;\\n\\n    uint256 private _checkPoint;\\n    uint256 private _usdRaised;\\n\\n    uint256 private _ethReceived;\\n    uint256 private _usdtReceived;\\n\\n    uint256 private _dexPercentage;\\n\\n    IERC20 private immutable _usdtContract;\\n\\n    IPriceFeed private immutable _priceFeedEthAggregator;\\n    IPriceFeed private immutable _priceFeedUsdtAggregator;\\n\\n    mapping(address => uint256) private _cscAmountPurchased;\\n\\n    uint256 private _vestingStartTime;\\n\\n    ICryptoScanCoin private immutable _cscContract;\\n    IUniswapV2Router02 private immutable _uniswapV2Router;\\n\\n    bool private _started;\\n    uint256 private immutable _deployTime;\\n\\n    IUniswapV2Pair private _lpContract;\\n    uint256 private _lpTokensUnlockDate;\\n\\n    event TokensBought(address indexed user, uint256 indexed tokensBought, address indexed purchaseToken, uint256 amountPaid, uint256 usdEq, uint256 timestamp);\\n    event MaxTokensUpdated(uint256 prevValue, uint256 newValue, uint256 timestamp);\\n    event MinTokensUpdated(uint256 prevValue, uint256 newValue, uint256 timestamp);\\n\\n    constructor\\n    (\\n        address cscContractAddress,\\n        address treasuryWallet,\\n        address usdtAddress,\\n        address priceFeedEthAggregatorAddress,\\n        address priceFeedUsdtAggregatorAddress,\\n        address uniswapV2RouterAddress\\n    )\\n    Ownable(_msgSender())\\n    {\\n        require(cscContractAddress != address(0), \\\"CSC contract cannot be null address\\\");\\n        require(treasuryWallet != address(0), \\\"Treasury wallet cannot be null address\\\");\\n        require(usdtAddress != address(0), \\\"Tether (USDT) contract cannot be null address\\\");\\n        require(priceFeedEthAggregatorAddress != address(0), \\\"Chainlink ETH/USD price feed aggregator contract cannot be null address\\\");\\n        require(priceFeedUsdtAggregatorAddress != address(0), \\\"Chainlink USDT/USD price feed aggregator contract cannot be null address\\\");\\n        require(uniswapV2RouterAddress != address(0), \\\"Uniswap V2 router contract cannot be null address\\\");\\n\\n        _cscContract = ICryptoScanCoin(cscContractAddress);\\n\\n        _treasuryWallet = treasuryWallet;\\n\\n        _started = false;\\n        _deployTime = block.timestamp;\\n\\n        _totalTokensSold = 0;\\n\\n        _startTime = type(uint256).max;\\n        _vestingStartTime = type(uint256).max;\\n\\n        _maxTokensToBuy = INITIAL_MAX_TOKENS_TO_BUY;    // without decimals!\\n        _minTokensToBuy = INITIAL_MIN_TOKENS_TO_BUY;    // without decimals!\\n\\n        _currentPhase = 0;\\n\\n        for (uint i = 0; i < NUMBER_OF_PHASES; i++) {\\n            //_phaseEndTimes will be added at presale start\\n            _soldTokensInPhase.push(0);    // Number of CSC sold per phase\\n        }\\n\\n        _checkPoint = 0;\\n        _usdRaised = 0 * USD;\\n\\n        _ethReceived = 0 * ETH;\\n        _usdtReceived = 0 * USDT;\\n\\n        _dexPercentage = MINIMUM_DEX_PERCENTAGE;\\n\\n        _usdtContract = IERC20(usdtAddress);\\n        _priceFeedEthAggregator = IPriceFeed(priceFeedEthAggregatorAddress);\\n        _priceFeedUsdtAggregator = IPriceFeed(priceFeedUsdtAggregatorAddress);\\n        _uniswapV2Router = IUniswapV2Router02(uniswapV2RouterAddress);\\n\\n        _lpContract = IUniswapV2Pair(address(0));\\n        _lpTokensUnlockDate = 0;\\n    }\\n\\n    receive() external payable { }\\n\\n    modifier checkSaleState(uint256 amount) {\\n        require(_started, \\\"Sale not started yet\\\");\\n        require(block.timestamp >= _startTime && block.timestamp <= getEndTime(), \\\"Invalid time for buying\\\");\\n        require(amount > 0, \\\"Invalid sale amount\\\");\\n        _;\\n    }\\n\\n    function vestingStartTime() public view override returns (uint256) {\\n        return _vestingStartTime;\\n    }\\n\\n    function isStarted() public view returns (bool) {\\n        return _started;\\n    }\\n\\n    function isFinished() public view returns (bool) {\\n        bool endTimeGone = (block.timestamp > getEndTime());\\n        bool tokensGone = (_totalTokensSold == TOTAL_TOKENS_PER_PHASE[NUMBER_OF_PHASES - 1]);\\n        bool checkPointGone = (_checkPoint == TOTAL_TOKENS_PER_PHASE[NUMBER_OF_PHASES - 1]);\\n        return endTimeGone || tokensGone || checkPointGone;\\n    }\\n\\n    function getDeployTime() public view returns (uint256) {\\n        return _deployTime;\\n    }\\n\\n    function getLpTokenAddress() public view returns (address) {\\n        return address(_lpContract);\\n    }\\n\\n    function getLpTokensUnlockDate() public view returns (uint256) {\\n        return _lpTokensUnlockDate;\\n    }\\n\\n    function getEthReceived() public view returns (uint256) {\\n        return _ethReceived;\\n    }\\n\\n    function getUsdtReceived() public view returns (uint256) {\\n        return _usdtReceived;\\n    }\\n\\n    function getDexPercentage() public view returns (uint256) {\\n        return _dexPercentage;\\n    }\\n\\n    function getSoldTokensInPhase(uint256 phase) public view returns (uint256) {\\n        return _soldTokensInPhase[phase];\\n    }\\n\\n    function getSuccessRatePercent(uint256 phase) public view returns (uint256) {\\n        require(phase < _currentPhase || isFinished(), \\\"Phase not finished yet\\\");\\n        uint256 tokensSold = _soldTokensInPhase[phase];\\n        return (tokensSold * 100) / TOKENS_TO_SELL_PER_PHASE[phase];\\n    }\\n\\n    function getMaxTokensToBuy() public view returns (uint256) {\\n        return _maxTokensToBuy;\\n    }\\n\\n    function getMinTokensToBuy() public view returns (uint256) {\\n        return _minTokensToBuy;\\n    }\\n\\n    function getCurrentPhase() public view returns (uint256) {\\n        return _currentPhase;\\n    }\\n\\n    function getCheckPoint() public view returns (uint256) {\\n        return _checkPoint;\\n    }\\n\\n    function getUsdRaised() public view returns (uint256) {\\n        return _usdRaised;\\n    }\\n\\n    function getTotalTokensSold() public view returns (uint256) {\\n        return _totalTokensSold;\\n    }\\n\\n    function getStartTime() public view returns (uint256) {\\n        return _startTime;\\n    }\\n\\n    function getPhaseEndTime(uint256 phase) public view returns (uint256) {\\n        return _phaseEndTimes[phase];\\n    }\\n\\n    function getEndTime() public view returns (uint256) {\\n        if (!_started) {\\n            return type(uint256).max;\\n        }\\n        return _phaseEndTimes[_currentPhase] + (NUMBER_OF_PHASES - _currentPhase - 1) * DEFAULT_PHASE_INTERVAL;\\n    }\\n\\n    function getCscContractAddress() public view returns (address) {\\n        return address(_cscContract);\\n    }\\n\\n    function getUsdtContractAddress() public view returns (address) {\\n        return address(_usdtContract);\\n    }\\n\\n    function getUniswapV2RouterAddress() public view returns (address) {\\n        return address(_uniswapV2Router);\\n    }\\n\\n    /**\\n     * @dev To get latest ETH price in 10 ** USD_DECIMALS format\\n     */\\n    function getLatestEtherPriceInUsd() public view returns (uint256) {\\n        (, int256 price, , , ) = _priceFeedEthAggregator.latestRoundData();\\n        return uint256(price) * (10 ** (USD_DECIMALS - PRICE_FEED_USD_DECIMALS));\\n    }\\n\\n    /**\\n     * @dev To get latest USDT price in 10 ** USD_DECIMALS format\\n     */\\n    function getLatestTetherPriceInUsd() public view returns (uint256) {\\n        (, int256 price, , , ) = _priceFeedUsdtAggregator.latestRoundData();\\n        return uint256(price) * (10 ** (USD_DECIMALS - PRICE_FEED_USD_DECIMALS));\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get ETH price for given amount\\n     * @param amount No of tokens to buy\\n     */\\n    function ethBuyHelper(uint256 amount) public view returns (uint256 ethAmount) {\\n        uint256 usdPrice;\\n        (usdPrice,) = calculatePrice(amount);\\n        ethAmount = (usdPrice * ETH) / getLatestEtherPriceInUsd();\\n    }\\n\\n    /**\\n     * @dev Helper funtion to get USDT price for given amount\\n     * @param amount No of tokens to buy\\n     */\\n    function usdtBuyHelper(uint256 amount) public view returns (uint256 usdtAmount) {\\n        uint256 usdPrice;\\n        (usdPrice,) = calculatePrice(amount);\\n        usdtAmount = (usdPrice * USDT) / getLatestTetherPriceInUsd();\\n    }\\n\\n    function getLockedAmount(address buyer) public view override returns (uint256) {\\n        if (block.timestamp < _vestingStartTime) {\\n            return _cscAmountPurchased[buyer];\\n        }\\n\\n        if (block.timestamp < (_vestingStartTime + _1_MONTH)) {\\n            return (_cscAmountPurchased[buyer] * (100 - UNLOCK_PERCENT_BEFORE_1_MONTH)) / 100;\\n        }\\n\\n        if (block.timestamp < (_vestingStartTime + _2_MONTHS)) {\\n            return (_cscAmountPurchased[buyer] * (100 - UNLOCK_PERCENT_BEFORE_2_MONTHS)) / 100;\\n        }\\n\\n        if (block.timestamp < (_vestingStartTime + _3_MONTHS)) {\\n            return (_cscAmountPurchased[buyer] * (100 - UNLOCK_PERCENT_BEFORE_3_MONTHS)) / 100;\\n        }\\n\\n        if (block.timestamp < (_vestingStartTime + _4_MONTHS)) {\\n            return (_cscAmountPurchased[buyer] * (100 - UNLOCK_PERCENT_BEFORE_4_MONTHS)) / 100;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getInfo() public view returns\\n    (\\n        uint256 currentPhase,\\n        uint256 actPrice,\\n        uint256 nextPrice,\\n        uint256 actEndTime,\\n        uint256 totalUsdRaised,\\n        uint256 usdRaisedInThisPhase,\\n        uint256 usdToRaiseInThisPhase,\\n        uint256 usdToRaiseInNextPhase,\\n        uint256 etherPrice,\\n        uint256 tetherPrice,\\n        bool finished\\n    )\\n    {\\n        currentPhase = _currentPhase;\\n        actPrice = PRICES_PER_PHASE[_currentPhase];\\n        nextPrice = (_currentPhase == NUMBER_OF_PHASES - 1) ? actPrice : PRICES_PER_PHASE[_currentPhase + 1];\\n        actEndTime = _phaseEndTimes[_currentPhase];\\n\\n        totalUsdRaised = _usdRaised;\\n        usdRaisedInThisPhase = _soldTokensInPhase[_currentPhase] * PRICES_PER_PHASE[_currentPhase];\\n        usdToRaiseInThisPhase = TOKENS_TO_SELL_PER_PHASE[_currentPhase] * PRICES_PER_PHASE[_currentPhase];\\n\\n        usdToRaiseInNextPhase =\\n            (_currentPhase == NUMBER_OF_PHASES - 1)\\n            ?\\n            usdToRaiseInThisPhase\\n            :\\n            TOKENS_TO_SELL_PER_PHASE[_currentPhase + 1] * PRICES_PER_PHASE[_currentPhase + 1];\\n\\n        etherPrice = getLatestEtherPriceInUsd();\\n        tetherPrice = getLatestTetherPriceInUsd();\\n\\n        finished = isFinished();\\n    }\\n\\n    /**\\n     * @dev To calculate the price in USD for given amount of tokens.\\n     * @param numberOfCsc No of tokens (pieces!)\\n     */\\n    function calculatePrice(uint256 numberOfCsc) public view returns (uint256, uint256) {\\n        uint256 USDAmount;\\n        uint256 amountSoldInCurrentPhase;\\n\\n        uint256 total = _checkPoint == 0 ? _totalTokensSold : _checkPoint;\\n\\n        require(\\n            _cscAmountPurchased[_msgSender()] + (numberOfCsc * CSC) <= (_maxTokensToBuy * CSC),\\n            \\\"Amount exceeds max tokens to buy per wallet\\\"\\n        );\\n\\n        require(numberOfCsc >= _minTokensToBuy, \\\"Amount less than min tokens to buy\\\");\\n\\n        if (numberOfCsc + total > TOTAL_TOKENS_PER_PHASE[_currentPhase] || block.timestamp >= _phaseEndTimes[_currentPhase]) {\\n            require(_currentPhase < (NUMBER_OF_PHASES - 1), \\\"No more CSC can be bought\\\");\\n\\n            if (block.timestamp >= _phaseEndTimes[_currentPhase]) {\\n                // There must not be two phase jumps in one transaction\\n                require(TOTAL_TOKENS_PER_PHASE[_currentPhase] + numberOfCsc < TOTAL_TOKENS_PER_PHASE[_currentPhase + 1], \\\"Cant purchase more in individual tx\\\");\\n                USDAmount = numberOfCsc * PRICES_PER_PHASE[_currentPhase + 1];\\n                amountSoldInCurrentPhase = 0;\\n            } else {\\n                uint256 tokenAmountForCurrentPrice = TOTAL_TOKENS_PER_PHASE[_currentPhase] - total;\\n\\n                USDAmount =\\n                    tokenAmountForCurrentPrice * PRICES_PER_PHASE[_currentPhase]\\n                    +\\n                    (numberOfCsc - tokenAmountForCurrentPrice) * PRICES_PER_PHASE[_currentPhase + 1];\\n\\n                amountSoldInCurrentPhase = tokenAmountForCurrentPrice;\\n            }\\n\\n        } else {\\n            USDAmount = numberOfCsc * PRICES_PER_PHASE[_currentPhase];\\n            amountSoldInCurrentPhase = numberOfCsc;\\n        }\\n\\n        return (USDAmount, amountSoldInCurrentPhase);\\n    }\\n\\n    function startSale() external onlyOwner {\\n        require(!_started, \\\"Sale already started\\\");\\n\\n        uint256 numberOfCscNeeded = NUMBER_OF_CSC_TOKENS_FOR_EXCHANGE;\\n        for (uint i = 0; i < NUMBER_OF_PHASES; i++) {\\n            numberOfCscNeeded += TOKENS_TO_SELL_PER_PHASE[i];\\n        }\\n\\n        require(\\n            _cscContract.balanceOf(address(this)) >= numberOfCscNeeded * CSC,\\n            \\\"No CSC tokens available for the presale contract\\\"\\n        );\\n\\n        _startTime = block.timestamp;\\n        // Phase 0 (starting phase)\\n        _phaseEndTimes.push(_startTime + DEFAULT_PHASE_INTERVAL);\\n\\n        _started = true;\\n\\n        _vestingStartTime = getEndTime() + SAFETY_VESTING_START_TIME_OFFSET;\\n    }\\n\\n    /**\\n     * @dev To buy into a presale using USDT\\n     * @param numberOfCsc Number of tokens to buy\\n     */\\n    function buyWithUSDT(uint256 numberOfCsc) external checkSaleState(numberOfCsc) returns (bool) {\\n        uint256 usdPrice;\\n        uint256 amountSoldInCurrentPhase;\\n\\n        (usdPrice, amountSoldInCurrentPhase) = calculatePrice(numberOfCsc);\\n\\n        uint256 usdtAmount = (usdPrice * USDT) / getLatestTetherPriceInUsd();\\n\\n        _handleSellDynamics(numberOfCsc, amountSoldInCurrentPhase);\\n\\n        _usdRaised += usdPrice;\\n\\n        uint256 ourAllowance = _usdtContract.allowance(_msgSender(), address(this));\\n        require(usdtAmount <= ourAllowance, \\\"Make sure to add enough USDT allowance\\\");\\n\\n        _usdtReceived += usdtAmount;\\n\\n        (bool success, ) = address(_usdtContract).call(abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _msgSender(), address(this), usdtAmount));\\n        require(success, \\\"Token payment failed\\\");\\n\\n        bool cscSuccess = _cscContract.transfer(_msgSender(), numberOfCsc * CSC);\\n        require(cscSuccess, \\\"Token transfer failed\\\");\\n\\n        emit TokensBought(_msgSender(), numberOfCsc, address(_usdtContract), usdtAmount, usdPrice, block.timestamp);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev To buy into a presale using ETH\\n     * @param numberOfCsc Number of tokens to buy\\n     */\\n    function buyWithEth(uint256 numberOfCsc) external payable checkSaleState(numberOfCsc) nonReentrant returns (bool) {\\n        uint256 usdPrice;\\n        uint256 amountSoldInCurrentPhase;\\n\\n        (usdPrice, amountSoldInCurrentPhase) = calculatePrice(numberOfCsc);\\n\\n        uint256 ethAmount = (usdPrice * ETH) / getLatestEtherPriceInUsd();\\n        require(msg.value >= ethAmount, \\\"Less payment\\\");\\n        uint256 excess = msg.value - ethAmount;\\n\\n        _handleSellDynamics(numberOfCsc, amountSoldInCurrentPhase);\\n\\n        _usdRaised += usdPrice;\\n        _ethReceived += ethAmount;\\n\\n        bool success = _cscContract.transfer(_msgSender(), numberOfCsc * CSC);\\n        require(success, \\\"Token transfer failed\\\");\\n\\n        if (excess > 0) _sendValue(payable(_msgSender()), excess);\\n        emit TokensBought(_msgSender(), numberOfCsc, address(0), ethAmount, usdPrice, block.timestamp);\\n        return true;\\n    }\\n\\n    function goPublic() external {\\n        require(address(_lpContract) == address(0), \\\"Liquidity pool already exists\\\");\\n        require(block.timestamp > _startTime, \\\"Presale has not started yet\\\");\\n        require(_totalTokensSold > 0, \\\"No CSC tokens sold during presale\\\");\\n        require(_usdRaised > 0, \\\"No USD raised during presale\\\");\\n\\n        require(isFinished(), \\\"Presale is still in progress\\\");\\n\\n        uint256 cscBalance = _cscContract.balanceOf(address(this));\\n        require(cscBalance >= NUMBER_OF_CSC_TOKENS_FOR_EXCHANGE * CSC, \\\"No CSC tokens available for the presale contract\\\");\\n\\n        uint256 ethBalance = address(this).balance;\\n        require(ethBalance > 0, \\\"No ETH tokens available for the presale contract\\\");\\n\\n        uint256 usdtToSwap = (_usdtReceived * _dexPercentage) / 100;\\n        _swapUsdtForEth(usdtToSwap);\\n\\n        uint256 ethToPool = (_ethReceived * _dexPercentage) / 100;\\n        // Add ETH from USDT swap also to pool\\n        ethToPool += (address(this).balance - ethBalance);\\n\\n        uint256 ethToPoolInUsd = (ethToPool * getLatestEtherPriceInUsd()) / ETH;\\n        uint256 cscToPool = (ethToPoolInUsd * CSC) / LISTING_PRICE_IN_USD;\\n\\n        uint256 maxCscToPool = (cscBalance * _dexPercentage) / MAXIMUM_DEX_PERCENTAGE;\\n        if (cscToPool > maxCscToPool) {\\n            // Going higher than listing price\\n            cscToPool = maxCscToPool;\\n        }\\n\\n        _createLiquidityPool(cscToPool, ethToPool);\\n\\n        uint256 ethExcess = address(this).balance;\\n        uint256 cscExcess = _cscContract.balanceOf(address(this));\\n        uint256 usdtExcess = _usdtContract.balanceOf(address(this));\\n\\n        if (block.timestamp < _phaseEndTimes[NUMBER_OF_PHASES - 1]) {\\n            _phaseEndTimes[NUMBER_OF_PHASES - 1] = block.timestamp;\\n        }\\n\\n        _cscContract.sendOutSuccessTokens(NUMBER_OF_PHASES - 1, NUMBER_OF_PHASES, getSuccessRatePercent(NUMBER_OF_PHASES - 1));\\n\\n        _vestingStartTime = block.timestamp;\\n\\n        if (cscExcess > 0) {\\n            bool success = _cscContract.transfer(_treasuryWallet, cscExcess);\\n            require(success, \\\"CSC transfer failed\\\");\\n        }\\n\\n        if (usdtExcess > 0) {\\n            (bool success, ) = address(_usdtContract).call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _treasuryWallet, usdtExcess));\\n            require(success, \\\"USDT transfer failed\\\");\\n        }\\n\\n        if (ethExcess > 0) {\\n            _sendValue(payable(_treasuryWallet), ethExcess);\\n        }\\n    }\\n\\n    function safetyGoPublic(bool eth, bool usdt, bool csc, bool successTokens) external onlyOwner {\\n        // This guarantees that no one can withdraw liquidity before going public\\n        // Because end time CANNOT be set to the past and owner MUST wait more days to call this function\\n        // Until that day anyone can call goPublic() function to start the liquidity pool according to the plans\\n        require(block.timestamp > getEndTime() + SAFETY_GO_PUBLIC_OFFSET, \\\"Presale and safety delay has not finished yet\\\");\\n\\n        if (successTokens) {\\n            _cscContract.sendOutSuccessTokens(NUMBER_OF_PHASES - 1, NUMBER_OF_PHASES, getSuccessRatePercent(NUMBER_OF_PHASES - 1));\\n        }\\n\\n        if (usdt) {\\n            uint256 usdtBalance = _usdtContract.balanceOf(address(this));\\n            address(_usdtContract).call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _treasuryWallet, usdtBalance));\\n        }\\n\\n        if (csc) {\\n            uint256 cscBalance = _cscContract.balanceOf(address(this));\\n            _cscContract.transfer(_treasuryWallet, cscBalance);\\n        }\\n\\n        if (eth) {\\n            uint256 ethBalance = address(this).balance;\\n            _sendValue(payable(_treasuryWallet), ethBalance);\\n        }\\n    }\\n\\n    function transferFunds(uint256 ethAmount, uint256 usdtAmount) external onlyOwner {\\n        if (usdtAmount > 0) {\\n            require(\\n                _usdtContract.balanceOf(address(this)) >= ((_usdtReceived * _dexPercentage) / 100) + usdtAmount,\\n                \\\"Not enough USDT to transfer\\\"\\n            );\\n\\n            address(_usdtContract).call(abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", _treasuryWallet, usdtAmount));\\n        }\\n\\n        if (ethAmount > 0) {\\n            require(\\n                address(this).balance >= ((_ethReceived * _dexPercentage) / 100) + ethAmount,\\n                \\\"Not enough ETH to transfer\\\"\\n            );\\n\\n            _sendValue(payable(_treasuryWallet), ethAmount);\\n        }\\n    }\\n\\n    function transferLpTokens(uint256 amount) external onlyOwner {\\n        require(address(_lpContract) != address(0), \\\"No LP contract set\\\");\\n        require(block.timestamp >= _lpTokensUnlockDate, \\\"LP tokens locked\\\");\\n        _lpContract.transfer(owner(), amount);\\n    }\\n\\n    function lockLpTokens(uint256 futureDate) external onlyOwner {\\n        require(futureDate >= block.timestamp, \\\"Lock date must be in the future\\\");\\n        require(futureDate >= _lpTokensUnlockDate, \\\"New lock date must be later than the current one\\\");\\n        _lpTokensUnlockDate = futureDate;\\n    }\\n\\n    function setMaxTokensToBuy(uint256 maxTokensToBuy) external onlyOwner {\\n        require(!isFinished(), \\\"Sale is already finished\\\");\\n        require(maxTokensToBuy > 0, \\\"Zero max tokens to buy value\\\");\\n        uint256 prevValue = _maxTokensToBuy;\\n        _maxTokensToBuy = maxTokensToBuy;\\n        emit MaxTokensUpdated(prevValue, maxTokensToBuy, block.timestamp);\\n    }\\n\\n    function setMinTokensToBuy(uint256 minTokensToBuy) external onlyOwner {\\n        require(!isFinished(), \\\"Sale is already finished\\\");\\n        uint256 prevValue = _minTokensToBuy;\\n        _minTokensToBuy = minTokensToBuy;\\n        emit MinTokensUpdated(prevValue, minTokensToBuy, block.timestamp);\\n    }\\n\\n    function setCurrentPhaseEnd(uint256 newEnd) external onlyOwner {\\n        require(!isFinished(), \\\"Sale is already finished\\\");\\n        require(newEnd >= block.timestamp, \\\"New phase endtime in past\\\");\\n        _phaseEndTimes[_currentPhase] = newEnd;\\n        _vestingStartTime = getEndTime() + SAFETY_VESTING_START_TIME_OFFSET;\\n    }\\n\\n    function setDexPercentage(uint256 dexPercentage) external onlyOwner {\\n        require(!isFinished(), \\\"Sale is already finished\\\");\\n        require(\\n            dexPercentage >= MINIMUM_DEX_PERCENTAGE && dexPercentage <= MAXIMUM_DEX_PERCENTAGE,\\n            \\\"Invalid DEX percentage\\\"\\n        );\\n\\n        require(\\n            _usdtContract.balanceOf(address(this)) >= (_usdtReceived * dexPercentage) / 100,\\n            \\\"Not enough USDT balance to change DEX percentage\\\"\\n        );\\n\\n        require(\\n            address(this).balance >= (_ethReceived * dexPercentage) / 100,\\n            \\\"Not enough ETH balance to change DEX percentage\\\"\\n        );\\n\\n        _dexPercentage = dexPercentage;\\n    }\\n\\n    function _handleSellDynamics(uint256 pcs, uint256 pcsInCurrentPhase) internal {\\n        _totalTokensSold += pcs;\\n        _soldTokensInPhase[_currentPhase] += pcsInCurrentPhase;\\n\\n        if (_checkPoint != 0) _checkPoint += pcs;\\n\\n        uint256 total = _totalTokensSold > _checkPoint ? _totalTokensSold : _checkPoint;\\n\\n        if (total >= TOTAL_TOKENS_PER_PHASE[_currentPhase] || block.timestamp >= _phaseEndTimes[_currentPhase]) {\\n            if (block.timestamp >= _phaseEndTimes[_currentPhase]) {\\n                require(pcsInCurrentPhase == 0, \\\"Wrong amount to be sold in next phase\\\");\\n                _checkPoint = TOTAL_TOKENS_PER_PHASE[_currentPhase] + pcs;\\n                // Phase is already ended according the the block time\\n                // Do not change _phaseEndTimes[_currentPhase]\\n            } else {\\n                // Phase is incremented due to buying more tokens than available (or equal) in current phase\\n                // End phase now\\n                _phaseEndTimes[_currentPhase] = block.timestamp;\\n                _vestingStartTime = getEndTime() + SAFETY_VESTING_START_TIME_OFFSET;\\n                require(pcs >= pcsInCurrentPhase, \\\"Wrong amount to be sold in next phase\\\");\\n            }\\n\\n            if (_currentPhase < NUMBER_OF_PHASES - 1) {\\n                uint256 prevPhaseEndTime = _phaseEndTimes[_currentPhase];\\n                _currentPhase += 1;\\n                _phaseEndTimes.push(prevPhaseEndTime + DEFAULT_PHASE_INTERVAL);\\n\\n                // Next \\\"current\\\" phase\\n                _soldTokensInPhase[_currentPhase] += pcs - pcsInCurrentPhase;\\n\\n                _cscContract.sendOutSuccessTokens(_currentPhase - 1, NUMBER_OF_PHASES, getSuccessRatePercent(_currentPhase - 1));\\n            } else {\\n                _cscContract.sendOutSuccessTokens(NUMBER_OF_PHASES - 1, NUMBER_OF_PHASES, getSuccessRatePercent(NUMBER_OF_PHASES - 1));\\n            }\\n        }\\n        _cscAmountPurchased[_msgSender()] += (pcs * CSC);\\n    }\\n\\n    function _sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Low balance\\\");\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH payment failed\\\");\\n    }\\n\\n    function _swapUsdtForEth(uint256 usdtAmount) internal {\\n        if (usdtAmount > 0) {\\n            (bool success, ) = address(_usdtContract).call(abi.encodeWithSignature(\\\"approve(address,uint256)\\\", address(_uniswapV2Router), usdtAmount));\\n            require(success, \\\"USDT approve failed\\\");\\n\\n            address[] memory path = new address[](2);\\n            path[0] = address(_usdtContract);\\n            path[1] = _uniswapV2Router.WETH();\\n\\n            _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                usdtAmount,\\n                0,    // slippage can happen\\n                path,\\n                address(this),\\n                block.timestamp + 600\\n            );\\n        }\\n    }\\n\\n    function _createLiquidityPool(uint256 cscAmount, uint256 ethAmount) internal {\\n        bool success = _cscContract.approve(address(_uniswapV2Router), cscAmount);\\n        require(success, \\\"CSC approve failed\\\");\\n\\n        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\\n            address(_cscContract),\\n            cscAmount,\\n            0,    // slippage can happen\\n            0,    // slippage can happen\\n            address(this),\\n            block.timestamp + 600\\n        );\\n\\n        _lpContract = IUniswapV2Pair(\\n            IUniswapV2Factory(_uniswapV2Router.factory())\\n                .getPair(address(_cscContract), _uniswapV2Router.WETH())\\n        );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/contracts/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IPriceFeed {\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"/contracts/IPresaleCSC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\ninterface IPresaleCSC {\\n    function getLockedAmount(address buyer) external view returns(uint256);\\n    function vestingStartTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/ICryptoScanCoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.20;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ICryptoScanCoin is IERC20 {\\n    function startSale(address saleContract) external;\\n    function sendOutSuccessTokens(uint256 phase, uint256 numberOfPresalePhases, uint256 successRate) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cscContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedEthAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedUsdtAggregatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV2RouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MaxTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"MinTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdEq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CSC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CSC_TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_PHASE_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_MAX_TOKENS_TO_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_MIN_TOKENS_TO_BUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LISTING_PRICE_IN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_DEX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DEX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MOST_COMMON_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_OF_CSC_TOKENS_FOR_EXCHANGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_OF_PHASES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRICES_PER_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_FEED_USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFETY_GO_PUBLIC_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFETY_VESTING_START_TIME_OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TENTH_OF_A_CENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TOKENS_TO_SELL_PER_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TOTAL_TOKENS_PER_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_TOKEN_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfCsc\",\"type\":\"uint256\"}],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfCsc\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfCsc\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCheckPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCscContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDexPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsdRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdRaisedInThisPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdToRaiseInThisPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdToRaiseInNextPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"etherPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tetherPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestEtherPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTetherPriceInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokensUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTokensToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTokensToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"getPhaseEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"getSoldTokensInPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"getSuccessRatePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2RouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"futureDate\",\"type\":\"uint256\"}],\"name\":\"lockLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"eth\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usdt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"csc\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"successTokens\",\"type\":\"bool\"}],\"name\":\"safetyGoPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEnd\",\"type\":\"uint256\"}],\"name\":\"setCurrentPhaseEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dexPercentage\",\"type\":\"uint256\"}],\"name\":\"setDexPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTokensToBuy\",\"type\":\"uint256\"}],\"name\":\"setMaxTokensToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToBuy\",\"type\":\"uint256\"}],\"name\":\"setMinTokensToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PresaleCSC", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae38d900dbd93e9574ec797e05f978b8bafa978a000000000000000000000000e1e325f30b85310f6d2ed09b38563fe96d20b586000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}