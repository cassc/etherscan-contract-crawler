{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-03\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract IDOContract {\r\n    address public owner;\r\n    uint256 public maxAddress;\r\n    uint256 public tokensPerExchange;\r\n    uint256 public ethPerExchange;\r\n\r\n    IERC20 public IDOToken;\r\n    bool public isIDOActive = false;\r\n    mapping(address => uint256) public exchangeCount;\r\n    mapping(address => bool) public hasParticipated; // New mapping to track whether an address has participated\r\n\r\n    event Exchange(address indexed user, uint256 ethAmount, uint256 aaaAmount);\r\n    event TokenContractUpdated(address indexed newTokenContract);\r\n    event ParametersUpdated(uint256 newmaxAddress, uint256 newTokensPerExchange, uint256 newEthPerExchange);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _IDOToken) {\r\n        owner = msg.sender;\r\n        IDOToken = IERC20(_IDOToken);\r\n        maxAddress = 250;\r\n        tokensPerExchange = 4400000 * 10 ** 18;\r\n        ethPerExchange = 0.2 ether;\r\n    }\r\n\r\n    function start() external onlyOwner {\r\n        require(!isIDOActive, \"IDO is already active\");\r\n        isIDOActive = true;\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        require(isIDOActive, \"IDO is not active\");\r\n        isIDOActive = false;\r\n    }\r\n\r\n    function IDO() external payable {\r\n        require(isIDOActive, \"IDO is not active\");\r\n        require(exchangeCount[msg.sender] < maxAddress, \"Exceeded maximum allowed exchanges\");\r\n        require(!hasParticipated[msg.sender], \"Address has already participated\"); // Check if the address has already participated\r\n        require(msg.value == ethPerExchange, \"Incorrect ETH amount\");\r\n\r\n        exchangeCount[msg.sender]++;\r\n        hasParticipated[msg.sender] = true; // Mark the address as participated\r\n        uint256 aaaAmount = tokensPerExchange;\r\n        require(IDOToken.balanceOf(address(this)) >= aaaAmount, \"Insufficient $AAA balance in the contract\");\r\n\r\n        IDOToken.transfer(msg.sender, aaaAmount);\r\n        emit Exchange(msg.sender, msg.value, aaaAmount);\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No ETH to withdraw\");\r\n        payable(owner).transfer(balance);\r\n    }\r\n\r\n    function withdrawERC20(address tokenAddress) external onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance > 0, \"No ERC-20 tokens to withdraw\");\r\n        token.transfer(owner, balance);\r\n    }\r\n\r\n    // Owner can update the token contract address\r\n    function updateTokenContract(address newTokenContract) external onlyOwner {\r\n        IDOToken = IERC20(newTokenContract);\r\n        emit TokenContractUpdated(newTokenContract);\r\n    }\r\n\r\n    // Owner can update the parameters\r\n    function updateParameters(uint256 _maxAddress, uint256 _tokensPerExchange, uint256 _ethPerExchange) external onlyOwner {\r\n        maxAddress = _maxAddress;\r\n        tokensPerExchange = _tokensPerExchange;\r\n        ethPerExchange = _ethPerExchange;\r\n        emit ParametersUpdated(_maxAddress, _tokensPerExchange, _ethPerExchange);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_IDOToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aaaAmount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newmaxAddress\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTokensPerExchange\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEthPerExchange\",\"type\":\"uint256\"}],\"name\":\"ParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenContract\",\"type\":\"address\"}],\"name\":\"TokenContractUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IDO\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IDOToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPerExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasParticipated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIDOActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxAddress\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerExchange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethPerExchange\",\"type\":\"uint256\"}],\"name\":\"updateParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenContract\",\"type\":\"address\"}],\"name\":\"updateTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IDOContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d3d9d6a9e7f68b459a64ecc0657a00dcdbcc9aa5", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a6afd98032e302a0060a145b9b4f6cc274c513cf3e14ad93474e85d4ab5a04da"}