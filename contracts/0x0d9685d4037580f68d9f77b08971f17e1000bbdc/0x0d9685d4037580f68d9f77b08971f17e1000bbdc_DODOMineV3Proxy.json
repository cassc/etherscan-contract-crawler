{"SourceCode": "// File: contracts/lib/InitializableOwnable.sol\r\n\r\n/*\r\n\r\n    Copyright 2020 DODO ZOO.\r\n    SPDX-License-Identifier: Apache-2.0\r\n\r\n*/\r\n\r\npragma solidity 0.6.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract InitializableOwnable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n    bool internal _INITIALIZED_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier notInitialized() {\r\n        require(!_INITIALIZED_, \"DODO_INITIALIZED\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function initOwner(address newOwner) public notInitialized {\r\n        _INITIALIZED_ = true;\r\n        _OWNER_ = newOwner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() public {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IDODOApprove.sol\r\n\r\ninterface IDODOApprove {\r\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\r\n    function getDODOProxy() external view returns (address);\r\n}\r\n\r\n// File: contracts/SmartRoute/DODOApproveProxy.sol\r\n\r\n\r\ninterface IDODOApproveProxy {\r\n    function isAllowedProxy(address _proxy) external view returns (bool);\r\n    function claimTokens(address token,address who,address dest,uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title DODOApproveProxy\r\n * @author DODO Breeder\r\n *\r\n * @notice Allow different version dodoproxy to claim from DODOApprove\r\n */\r\ncontract DODOApproveProxy is InitializableOwnable {\r\n    \r\n    // ============ Storage ============\r\n    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\r\n    mapping (address => bool) public _IS_ALLOWED_PROXY_;\r\n    uint256 public _TIMELOCK_;\r\n    address public _PENDING_ADD_DODO_PROXY_;\r\n    address public immutable _DODO_APPROVE_;\r\n\r\n    // ============ Modifiers ============\r\n    modifier notLocked() {\r\n        require(\r\n            _TIMELOCK_ <= block.timestamp,\r\n            \"SetProxy is timelocked\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address dodoApporve) public {\r\n        _DODO_APPROVE_ = dodoApporve;\r\n    }\r\n\r\n    function init(address owner, address[] memory proxies) external {\r\n        initOwner(owner);\r\n        for(uint i = 0; i < proxies.length; i++) \r\n            _IS_ALLOWED_PROXY_[proxies[i]] = true;\r\n    }\r\n\r\n    function unlockAddProxy(address newDodoProxy) public onlyOwner {\r\n        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\r\n        _PENDING_ADD_DODO_PROXY_ = newDodoProxy;\r\n    }\r\n\r\n    function lockAddProxy() public onlyOwner {\r\n       _PENDING_ADD_DODO_PROXY_ = address(0);\r\n       _TIMELOCK_ = 0;\r\n    }\r\n\r\n\r\n    function addDODOProxy() external onlyOwner notLocked() {\r\n        _IS_ALLOWED_PROXY_[_PENDING_ADD_DODO_PROXY_] = true;\r\n        lockAddProxy();\r\n    }\r\n\r\n    function removeDODOProxy (address oldDodoProxy) public onlyOwner {\r\n        _IS_ALLOWED_PROXY_[oldDodoProxy] = false;\r\n    }\r\n    \r\n    function claimTokens(\r\n        address token,\r\n        address who,\r\n        address dest,\r\n        uint256 amount\r\n    ) external {\r\n        require(_IS_ALLOWED_PROXY_[msg.sender], \"DODOApproveProxy:Access restricted\");\r\n        IDODOApprove(_DODO_APPROVE_).claimTokens(\r\n            token,\r\n            who,\r\n            dest,\r\n            amount\r\n        );\r\n    }\r\n\r\n    function isAllowedProxy(address _proxy) external view returns (bool) {\r\n        return _IS_ALLOWED_PROXY_[_proxy];\r\n    }\r\n}\r\n\r\n// File: contracts/lib/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @author DODO Breeder\r\n *\r\n * @notice Ownership related functions\r\n */\r\ncontract Ownable {\r\n    address public _OWNER_;\r\n    address public _NEW_OWNER_;\r\n\r\n    // ============ Events ============\r\n\r\n    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // ============ Modifiers ============\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _OWNER_, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    constructor() internal {\r\n        _OWNER_ = msg.sender;\r\n        emit OwnershipTransferred(address(0), _OWNER_);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        emit OwnershipTransferPrepared(_OWNER_, newOwner);\r\n        _NEW_OWNER_ = newOwner;\r\n    }\r\n\r\n    function claimOwnership() external {\r\n        require(msg.sender == _NEW_OWNER_, \"INVALID_CLAIM\");\r\n        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\r\n        _OWNER_ = _NEW_OWNER_;\r\n        _NEW_OWNER_ = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/intf/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @author DODO Breeder\r\n *\r\n * @notice Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"MUL_ERROR\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"DIVIDING_ERROR\");\r\n        return a / b;\r\n    }\r\n\r\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 quotient = div(a, b);\r\n        uint256 remainder = a - quotient * b;\r\n        if (remainder > 0) {\r\n            return quotient + 1;\r\n        } else {\r\n            return quotient;\r\n        }\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SUB_ERROR\");\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ADD_ERROR\");\r\n        return c;\r\n    }\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = x / 2 + 1;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/lib/SafeERC20.sol\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/DODOToken/DODOMineV3/RewardVault.sol\r\n\r\n\r\ninterface IRewardVault {\r\n    function reward(address to, uint256 amount) external;\r\n    function withdrawLeftOver(address to, uint256 amount) external; \r\n    function syncValue() external;\r\n    function _TOTAL_REWARD_() external view returns(uint256);\r\n}\r\n\r\ncontract RewardVault is Ownable {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public _REWARD_RESERVE_;\r\n    uint256 public _TOTAL_REWARD_;\r\n    address public _REWARD_TOKEN_;\r\n\r\n    // ============ Event =============\r\n    event DepositReward(uint256 totalReward, uint256 inputReward, uint256 rewardReserve);\r\n\r\n    constructor(address _rewardToken) public {\r\n        _REWARD_TOKEN_ = _rewardToken;\r\n    }\r\n\r\n    function reward(address to, uint256 amount) external onlyOwner {\r\n        require(_REWARD_RESERVE_ >= amount, \"VAULT_NOT_ENOUGH\");\r\n        _REWARD_RESERVE_ = _REWARD_RESERVE_.sub(amount);\r\n        IERC20(_REWARD_TOKEN_).safeTransfer(to, amount);\r\n    }\r\n\r\n    function withdrawLeftOver(address to,uint256 amount) external onlyOwner {\r\n        require(_REWARD_RESERVE_ >= amount, \"VAULT_NOT_ENOUGH\");\r\n        _REWARD_RESERVE_ = _REWARD_RESERVE_.sub(amount);\r\n        IERC20(_REWARD_TOKEN_).safeTransfer(to, amount);\r\n    }\r\n\r\n    function syncValue() external {\r\n        uint256 rewardBalance = IERC20(_REWARD_TOKEN_).balanceOf(address(this));\r\n        uint256 rewardInput = rewardBalance.sub(_REWARD_RESERVE_);\r\n\r\n        _TOTAL_REWARD_ = _TOTAL_REWARD_.add(rewardInput);\r\n        _REWARD_RESERVE_ = rewardBalance;\r\n\r\n        emit DepositReward(_TOTAL_REWARD_, rewardInput, _REWARD_RESERVE_);\r\n    }\r\n}\r\n\r\n// File: contracts/Factory/Registries/DODOMineV3Registry.sol\r\n\r\n\r\ninterface IDODOMineV3Registry {\r\n    function addMineV3(\r\n        address mine,\r\n        bool isLpToken,\r\n        address stakeToken\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title DODOMineV3 Registry\r\n * @author DODO Breeder\r\n *\r\n * @notice Register DODOMineV3 Pools \r\n */\r\ncontract DODOMineV3Registry is InitializableOwnable, IDODOMineV3Registry {\r\n\r\n    mapping (address => bool) public isAdminListed;\r\n    \r\n    // ============ Registry ============\r\n    // minePool -> stakeToken\r\n    mapping(address => address) public _MINE_REGISTRY_;\r\n    // lpToken -> minePool\r\n    mapping(address => address[]) public _LP_REGISTRY_;\r\n    // singleToken -> minePool\r\n    mapping(address => address[]) public _SINGLE_REGISTRY_;\r\n\r\n\r\n    // ============ Events ============\r\n    event NewMineV3(address mine, address stakeToken, bool isLpToken);\r\n    event RemoveMineV3(address mine, address stakeToken);\r\n    event addAdmin(address admin);\r\n    event removeAdmin(address admin);\r\n\r\n\r\n    function addMineV3(\r\n        address mine,\r\n        bool isLpToken,\r\n        address stakeToken\r\n    ) override external {\r\n        require(isAdminListed[msg.sender], \"ACCESS_DENIED\");\r\n        _MINE_REGISTRY_[mine] = stakeToken;\r\n        if(isLpToken) {\r\n            _LP_REGISTRY_[stakeToken].push(mine);\r\n        }else {\r\n            _SINGLE_REGISTRY_[stakeToken].push(mine);\r\n        }\r\n\r\n        emit NewMineV3(mine, stakeToken, isLpToken);\r\n    }\r\n\r\n    // ============ Admin Operation Functions ============\r\n\r\n    function removeMineV3(\r\n        address mine,\r\n        bool isLpToken,\r\n        address stakeToken\r\n    ) external onlyOwner {\r\n        _MINE_REGISTRY_[mine] = address(0);\r\n        if(isLpToken) {\r\n            uint256 len = _LP_REGISTRY_[stakeToken].length;\r\n            for (uint256 i = 0; i < len; i++) {\r\n                if (mine == _LP_REGISTRY_[stakeToken][i]) {\r\n                    if(i != len - 1) {\r\n                        _LP_REGISTRY_[stakeToken][i] = _LP_REGISTRY_[stakeToken][len - 1];\r\n                    }\r\n                    _LP_REGISTRY_[stakeToken].pop();\r\n                    break;\r\n                }\r\n            }\r\n        }else {\r\n            uint256 len = _SINGLE_REGISTRY_[stakeToken].length;\r\n            for (uint256 i = 0; i < len; i++) {\r\n                if (mine == _SINGLE_REGISTRY_[stakeToken][i]) {\r\n                    if(i != len - 1) {\r\n                        _SINGLE_REGISTRY_[stakeToken][i] = _SINGLE_REGISTRY_[stakeToken][len - 1];\r\n                    }\r\n                    _SINGLE_REGISTRY_[stakeToken].pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit RemoveMineV3(mine, stakeToken);\r\n    }\r\n\r\n    function addAdminList (address contractAddr) external onlyOwner {\r\n        isAdminListed[contractAddr] = true;\r\n        emit addAdmin(contractAddr);\r\n    }\r\n\r\n    function removeAdminList (address contractAddr) external onlyOwner {\r\n        isAdminListed[contractAddr] = false;\r\n        emit removeAdmin(contractAddr);\r\n    }\r\n}\r\n\r\n// File: contracts/lib/CloneFactory.sol\r\n\r\ninterface ICloneFactory {\r\n    function clone(address prototype) external returns (address proxy);\r\n}\r\n\r\n// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\r\n// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\r\n\r\ncontract CloneFactory is ICloneFactory {\r\n    function clone(address prototype) external override returns (address proxy) {\r\n        bytes20 targetBytes = bytes20(prototype);\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), targetBytes)\r\n            mstore(\r\n                add(clone, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            proxy := create(0, clone, 0x37)\r\n        }\r\n        return proxy;\r\n    }\r\n}\r\n\r\n// File: contracts/SmartRoute/proxies/DODOMineV3Proxy.sol\r\n\r\ninterface IMineV3 {\r\n    function init(address owner, address token) external;\r\n\r\n    function addRewardToken(\r\n        address rewardToken,\r\n        uint256 rewardPerBlock,\r\n        uint256 startBlock,\r\n        uint256 endBlock\r\n    ) external;\r\n\r\n    function directTransferOwnership(address newOwner) external;\r\n\r\n    function getVaultByRewardToken(address rewardToken) external view returns(address);\r\n}\r\n\r\n/**\r\n * @title DODOMineV3 Proxy\r\n * @author DODO Breeder\r\n *\r\n * @notice Create And Register DODOMineV3 Contracts \r\n */\r\ncontract DODOMineV3Proxy is InitializableOwnable {\r\n    using SafeMath for uint256;\r\n    // ============ Templates ============\r\n\r\n    address public immutable _CLONE_FACTORY_;\r\n    address public immutable _DODO_APPROVE_PROXY_;\r\n    address public immutable _DODO_MINEV3_REGISTRY_;\r\n    address public _MINEV3_TEMPLATE_;\r\n\r\n\r\n    // ============ Events ============\r\n    event DepositRewardToVault(address mine, address rewardToken, uint256 amount);\r\n    event DepositRewardToMine(address mine, address rewardToken, uint256 amount);\r\n    event CreateMineV3(address account, address mineV3);\r\n    event ChangeMineV3Template(address mineV3);\r\n\r\n    constructor(\r\n        address cloneFactory,\r\n        address mineTemplate,\r\n        address dodoApproveProxy,\r\n        address dodoMineV3Registry\r\n    ) public {\r\n        _CLONE_FACTORY_ = cloneFactory;\r\n        _MINEV3_TEMPLATE_ = mineTemplate;\r\n        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\r\n        _DODO_MINEV3_REGISTRY_ = dodoMineV3Registry;\r\n    }\r\n\r\n    // ============ Functions ============\r\n\r\n    function createDODOMineV3(\r\n        address stakeToken,\r\n        bool isLpToken,\r\n        address[] memory rewardTokens,\r\n        uint256[] memory rewardPerBlock,\r\n        uint256[] memory startBlock,\r\n        uint256[] memory endBlock\r\n    ) external returns (address newMineV3) {\r\n        require(rewardTokens.length > 0, \"REWARD_EMPTY\");\r\n        require(rewardTokens.length == rewardPerBlock.length, \"REWARD_PARAM_NOT_MATCH\");\r\n        require(startBlock.length == rewardPerBlock.length, \"REWARD_PARAM_NOT_MATCH\");\r\n        require(endBlock.length == rewardPerBlock.length, \"REWARD_PARAM_NOT_MATCH\");\r\n\r\n        newMineV3 = ICloneFactory(_CLONE_FACTORY_).clone(_MINEV3_TEMPLATE_);\r\n\r\n        IMineV3(newMineV3).init(address(this), stakeToken);\r\n\r\n        for(uint i = 0; i<rewardTokens.length; i++) {\r\n            uint256 rewardAmount = rewardPerBlock[i].mul(endBlock[i].sub(startBlock[i]));\r\n            IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(rewardTokens[i], msg.sender, newMineV3, rewardAmount);\r\n            IMineV3(newMineV3).addRewardToken(\r\n                rewardTokens[i],\r\n                rewardPerBlock[i],\r\n                startBlock[i],\r\n                endBlock[i]\r\n            );\r\n        }\r\n\r\n        IMineV3(newMineV3).directTransferOwnership(msg.sender);\r\n\r\n        IDODOMineV3Registry(_DODO_MINEV3_REGISTRY_).addMineV3(newMineV3, isLpToken, stakeToken);\r\n\r\n        emit CreateMineV3(msg.sender, newMineV3);\r\n    }\r\n\r\n    function depositRewardToVault(\r\n        address mineV3,\r\n        address rewardToken,\r\n        uint256 amount\r\n    ) external {    \r\n        address rewardVault = IMineV3(mineV3).getVaultByRewardToken(rewardToken);\r\n        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(rewardToken, msg.sender, rewardVault, amount);\r\n        IRewardVault(rewardVault).syncValue();\r\n\r\n        emit DepositRewardToVault(mineV3,rewardToken,amount);\r\n    }\r\n\r\n    function depositRewardToMine(\r\n        address mineV3,\r\n        address rewardToken,\r\n        uint256 amount\r\n    ) external {\r\n        require(mineV3 != address(0), \"MINE_EMPTY\");\r\n        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(rewardToken, msg.sender, mineV3, amount);\r\n\r\n        emit DepositRewardToMine(mineV3,rewardToken,amount);\r\n    }\r\n\r\n    // ============ Admin Operation Functions ============\r\n    \r\n    function updateMineV3Template(address _newMineV3Template) external onlyOwner {\r\n        _MINEV3_TEMPLATE_ = _newMineV3Template;\r\n        emit ChangeMineV3Template(_newMineV3Template);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cloneFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mineTemplate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoApproveProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dodoMineV3Registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mineV3\",\"type\":\"address\"}],\"name\":\"ChangeMineV3Template\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mineV3\",\"type\":\"address\"}],\"name\":\"CreateMineV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRewardToMine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositRewardToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_CLONE_FACTORY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_APPROVE_PROXY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DODO_MINEV3_REGISTRY_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MINEV3_TEMPLATE_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NEW_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_OWNER_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLpToken\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardPerBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startBlock\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"endBlock\",\"type\":\"uint256[]\"}],\"name\":\"createDODOMineV3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newMineV3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineV3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardToMine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mineV3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMineV3Template\",\"type\":\"address\"}],\"name\":\"updateMineV3Template\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DODOMineV3Proxy", "CompilerVersion": "v0.6.9+commit.3e3065ac", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005e5a7b76462e4bdf83aa98795644281bdba80b88000000000000000000000000760e32c881962213281fd3ffd1e27b25385fb1e7000000000000000000000000335ac99bb3e51bdbf22025f092ebc1cf2c5cc619000000000000000000000000f8ab09b3d2d5efa603f4646e5a8a12588e852195", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e22673f89a38d54745cd870c901c66c83c3359e1982e70e716ae51dd6872ae20"}