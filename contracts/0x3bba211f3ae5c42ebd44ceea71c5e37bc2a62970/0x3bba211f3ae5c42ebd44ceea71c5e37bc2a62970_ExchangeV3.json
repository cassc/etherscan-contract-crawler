{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771ContextUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@sbinft/contracts/upgradeable/access/AdminUpgradeable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @notice deprecated use AdminUpgradeableV2\\n * @title AdminUpgradeable Contract to manage access\\n *\\n * @author SBINFT Co., Ltd.\\n */\\nabstract contract AdminUpgradeable is ContextUpgradeable {\\n  event AdminAdded(address);\\n  event AdminRemoved(address);\\n\\n  /**\\n   * @dev \u7ba1\u7406\u8005\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3002\u7ba1\u7406\u8005\u3067\u306a\u3044\u306a\u3089\u3070false\u3092\u8fd4\u3059\u3002\\n   */\\n  mapping(address => bool) private _admin;\\n\\n  function __Admin_init() internal onlyInitializing {\\n    __Context_init();\\n    // \u521d\u671f\u5316\u6642\u306b\u30c7\u30d7\u30ed\u30a4\u8005\u3092\u7ba1\u7406\u8005\u306b\u8ffd\u52a0\u3059\u308b\u3002\\n    _addAdmin(_msgSender());\\n  }\\n\\n  /**\\n   * @dev \u7ba1\u7406\u8005\u3092\u8907\u6570\u8ffd\u52a0\\n   */\\n  function addAdmin(address[] calldata newAdmin) public virtual onlyAdmin {\\n    for (uint256 idx = 0; idx < newAdmin.length; idx++) {\\n      _addAdmin(newAdmin[idx]);\\n    }\\n  }\\n\\n  /**\\n   * @dev \u7ba1\u7406\u8005\u3092\u4e00\u4eba\u8ffd\u52a0\\n   */\\n  function addAdmin(address newAdmin) public virtual onlyAdmin {\\n    _addAdmin(newAdmin);\\n  }\\n\\n  /**\\n   * @dev \u7ba1\u7406\u8005\u3092\u4e00\u4eba\u8ffd\u52a0\\n   * \u7121\u5236\u9650 Internal function\\n   */\\n  function _addAdmin(address newAdmin) internal virtual {\\n    require(\\n      newAdmin != address(0),\\n      \\\"Admin:addAdmin newAdmin is the zero address\\\"\\n    );\\n\\n    _admin[newAdmin] = true;\\n    emit AdminAdded(newAdmin);\\n  }\\n\\n  /**\\n   * @dev \u7ba1\u7406\u8005\u3092\u4e00\u4eba\u524a\u9664\\n   */\\n  function removeAdmin(address admin) public virtual onlyAdmin {\\n    require(\\n      _admin[admin],\\n      \\\"Admin:removeAdmin trying to remove non existing Admin\\\"\\n    );\\n\\n    _removeAdmin(admin);\\n  }\\n\\n  /**\\n   * @dev \u7ba1\u7406\u8005\u3092\u4e00\u4eba\u524a\u9664\\n   * \u7121\u5236\u9650 Internal function\\n   */\\n  function _removeAdmin(address admin) internal virtual {\\n    delete _admin[admin];\\n    emit AdminRemoved(admin);\\n  }\\n\\n  /**\\n   * @dev\\n   * Admin\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\\n   */\\n  function isAdmin(address checkAdmin) public view virtual returns (bool) {\\n    return _admin[checkAdmin];\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than Admin.\\n   */\\n  modifier onlyAdmin() {\\n    require(_admin[_msgSender()], \\\"Admin:onlyAdmin caller is not an Admin\\\");\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/sbinft/market/v1/interface/IPlatformRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SBINFT Platform Registry\\n */\\ninterface IPlatformRegistry is IERC165Upgradeable {\\n  /**\\n   * @dev Update to new PlatformFeeRateLowerLimit\\n   *\\n   * @param _new new PlatformFeeRateLowerLimit\\n   */\\n  function updatePlatformFeeLowerLimit(uint16 _new) external;\\n\\n  /**\\n   * @dev Update to new PlatformFeeReceiver\\n   *\\n   * @param _new new PlatformFeeReceiver\\n   */\\n  function updatePlatformFeeReceiver(address payable _new) external;\\n\\n  /**\\n   * @dev Update to new PartnerFeeReceiver for partner's collection\\n   *\\n   * @param collection partner's collection\\n   * @param partnerFeeReceiver new partner's FeeReceiver\\n   * @param sign bytes calldata signature of platform signer\\n   */\\n  function updatePartnerFeeReceiver(\\n    address collection,\\n    address payable partnerFeeReceiver,\\n    bytes calldata sign\\n  ) external;\\n\\n  /**\\n   * @dev Checks if partner fee receiver\\n   *\\n   * @param _collection address of token\\n   * @param _partnerFeeReceiver address of partner FeeReceiver\\n   *\\n   * Requirements:\\n   * - _collection must be a non zero address\\n   * - _partnerFeeReceiver must be a non zero address\\n   */\\n  function isPartnerFeeReceiver(\\n    address _collection,\\n    address _partnerFeeReceiver\\n  ) external view returns (bool);\\n\\n  /**\\n   * @dev Checks state of a Whitelisted token\\n   *\\n   * @param _token address of token\\n   */\\n  function isWhitelistedERC20(address _token) external view returns (bool);\\n\\n  /**\\n   * @dev Adds list of token to Whitelisted, if zero address then will be ignored\\n   *\\n   * @param _addTokenList array of address of token to add\\n   */\\n  function addToERC20Whitelist(address[] calldata _addTokenList) external;\\n\\n  /**\\n   * @dev Removes list of token from Whitelisted\\n   *\\n   * @param _tokenList array of address of token to remove\\n   */\\n  function removeFromERC20Whitelist(address[] calldata _tokenList) external;\\n\\n  /**\\n   * @dev Checks state of a Whitelisted token\\n   *\\n   * @param _signer address of token\\n   */\\n  function isPlatformSigner(address _signer) external view returns (bool);\\n\\n  /**\\n   * @dev Adds list of token to Whitelisted, if zero address then will be ignored\\n   *\\n   * @param _platformSignerList array of platfomr signer address  to add\\n   */\\n  function addPlatformSigner(address[] calldata _platformSignerList) external;\\n\\n  /**\\n   * @dev Removes list of platform signers address\\n   *\\n   * @param _list array of platfomr signer address to remove\\n   */\\n  function removePlatformSigner(address[] calldata _list) external;\\n\\n  /**\\n   * @dev Returns PlatformFeeReceiver\\n   */\\n  function getPlatformFeeReceiver() external returns (address payable);\\n\\n  /**\\n   * @dev Returns PartnerFeeReceiver\\n   *\\n   * @param _token address of partner token\\n   */\\n  function getPartnerFeeReceiver(\\n    address _token\\n  ) external returns (address payable);\\n\\n  /**\\n   * @dev Returns PlatformFeeReceiver\\n   *\\n   */\\n  function getPlatformFeeRateLowerLimit() external returns (uint16);\\n\\n  /**\\n   * @dev Update to new PartnerPfFeeReceiver for partner's platformSigner\\n   *\\n   * @param _externalPlatformToken address of external Platform Token\\n   * @param _partnerPfFeeReceiver address new partner's platformer FeeReceiver\\n   *\\n   * Requirements:\\n   * - _platformSigner must be a non zero address\\n   * - _partnerPfFeeReceiver must be a non zero address\\n   *\\n   * Emits a {ExternalPfFeeReceiverUpdated} event\\n   */\\n  function updateExternalPlatformFeeReceiver(\\n    address _externalPlatformToken,\\n    address payable _partnerPfFeeReceiver\\n  ) external;\\n\\n  /**\\n   * @dev Returns ExternalPlatformFeeReceiver\\n   *\\n   * @param _token address of external platform token\\n   */\\n  function getExternalPlatformFeeReceiver(\\n    address _token\\n  ) external returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/sbinft/market/v1/interface/IRoyaltyRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IRoyaltyRegistry is IERC2981Upgradeable {\\n  /**\\n   * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n   * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n   */\\n  function royaltyInfo(\\n    address _token,\\n    uint256 _tokenId,\\n    uint256 _salePrice,\\n    uint8 _isSecondarySale\\n  )\\n    external\\n    returns (\\n      address[] memory receivers,\\n      uint256[] memory royaltyFees,\\n      uint8 royaltyType\\n    );\\n\\n  /**\\n   * @dev Returns the division factor for calculating precentage\\n   */\\n  function feeDenominator() external returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/sbinft/market/v1/interface/ITransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title  SBINFT market non-native asset transfer protocol\\n */\\ninterface ITransferProxy is IERC165Upgradeable {\\n  /**\\n   * @notice Safe transfer ERC20 token\\n   * @dev only registered operators could call this function(i.e. Exchange)\\n   *\\n   * @param _token IERC20 token address\\n   * @param _from address from\\n   * @param _to address to\\n   * @param _value uint256 value\\n   */\\n  function erc20safeTransferFrom(\\n    IERC20 _token,\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) external;\\n\\n  /**\\n   * @notice Safe transfer ERC721 token\\n   * @dev only registered operators could call this function(i.e. Exchange)\\n   *\\n   * @param _token IERC721 token address\\n   * @param _from address current owner address\\n   * @param _to address new to be owner address\\n   * @param _tokenId uint256 token id to transfer\\n   */\\n  function erc721safeTransferFrom(\\n    IERC721 _token,\\n    address _from,\\n    address _to,\\n    uint256 _tokenId\\n  ) external;\\n\\n  /**\\n   * @notice Safe transfer ERC1155 token\\n   * @dev only registered operators could call this function(i.e. Exchange)\\n   *\\n   * @param _token IERC1155 token address\\n   * @param _from address current owner address\\n   * @param _to address new to be owner address\\n   * @param _tokenId uint256 token id to transfer\\n   * @param _value uint256 count of token to transfer\\n   * @param _data bytes extra data if needed\\n   */\\n  function erc1155safeTransferFrom(\\n    IERC1155 _token,\\n    address _from,\\n    address _to,\\n    uint256 _tokenId,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/sbinft/market/v3/exchange/ExchangeV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"@sbinft/contracts/upgradeable/access/AdminUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/metatx/ERC2771ContextUpgradeable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"contracts/sbinft/market/v1/interface/IPlatformRegistry.sol\\\";\\nimport \\\"contracts/sbinft/market/v1/interface/ITransferProxy.sol\\\";\\nimport \\\"contracts/sbinft/market/v1/interface/IRoyaltyRegistry.sol\\\";\\nimport \\\"contracts/sbinft/market/v3/interface/IExchangeV3.sol\\\";\\n\\n/**\\n * @dev SBINFT Exchange 2.0\\n * @author SBINFT Co., Ltd.\\n */\\ncontract ExchangeV3 is\\n  Initializable,\\n  IExchangeV3,\\n  EIP712Upgradeable,\\n  ERC2771ContextUpgradeable,\\n  AdminUpgradeable,\\n  ERC165Upgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable,\\n  UUPSUpgradeable\\n{\\n  using ECDSAUpgradeable for bytes32;\\n\\n  // Fired when PlatformRegistry is changed\\n  event PlatformRegistryUpdated(IPlatformRegistry indexed platformRegistry);\\n  // PlatformRegistry holds platform related info\\n  IPlatformRegistry public platformRegistry;\\n\\n  // Fired when TransferProxy is changed\\n  event TransferProxyUpdated(ITransferProxy indexed transferProxy);\\n  // Holds access rights for on-chain asset transfer.\\n  // Must be pre approved for the respective asset\\n  ITransferProxy public transferProxy;\\n\\n  // Fired when RoyaltyRegistry is changed\\n  event RoyaltyRegistryUpdated(IRoyaltyRegistry indexed royaltyRegistry);\\n  // RoyaltyRegistry holds Royalty info\\n  IRoyaltyRegistry public royaltyRegistry;\\n\\n  // Map of SaleOrderHash => soldCount\\n  // Instead of soldCount being uint256 it can be bool but using uint256 inorder to support ERC1155 later\\n  mapping(bytes32 => uint256) internal _saleProgress;\\n\\n  // Tip related\\n  struct ERC20Tip {\\n    address tipper;\\n    uint256 amount;\\n  }\\n  mapping(address => ERC20Tip[]) internal _erc20TipDeposite;\\n\\n  // Just a temp variable to be used as local function variable\\n  // as mapping declaration is not supported inside function\\n  mapping(address => uint256) internal _tempPayoutAmount;\\n  address[] internal _tempPayoutAddress;\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor(\\n    address trustedForwarder\\n  ) ERC2771ContextUpgradeable(trustedForwarder) {\\n    _disableInitializers();\\n  }\\n\\n  /**\\n   * @dev See {UUPSUpgradeable._authorizeUpgrade()}\\n   *\\n   * Requirements:\\n   * - onlyAdmin can call\\n   */\\n  function _authorizeUpgrade(\\n    address _newImplementation\\n  ) internal virtual override onlyAdmin {}\\n\\n  /**\\n   * @dev See {IERC165Upgradeable-supportsInterface}.\\n   *\\n   * @param _interfaceId bytes4\\n   */\\n  function supportsInterface(\\n    bytes4 _interfaceId\\n  )\\n    public\\n    view\\n    virtual\\n    override(ERC165Upgradeable, IERC165Upgradeable)\\n    returns (bool)\\n  {\\n    return\\n      _interfaceId == type(IExchangeV3).interfaceId ||\\n      super.supportsInterface(_interfaceId);\\n  }\\n\\n  /**\\n   * See {ERC2771ContextUpgradeable._msgSender()}\\n   */\\n  function _msgSender()\\n    internal\\n    view\\n    virtual\\n    override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n    returns (address sender)\\n  {\\n    return ERC2771ContextUpgradeable._msgSender();\\n  }\\n\\n  /**\\n   * See {ERC2771ContextUpgradeable._msgData()}\\n   */\\n  function _msgData()\\n    internal\\n    view\\n    virtual\\n    override(ContextUpgradeable, ERC2771ContextUpgradeable)\\n    returns (bytes calldata)\\n  {\\n    return ERC2771ContextUpgradeable._msgData();\\n  }\\n\\n  /**\\n   * @dev See {PausableUpgradeable._pause()}\\n   *\\n   * Requirements:\\n   * - onlyAdmin can call\\n   */\\n  function pause() external virtual onlyAdmin {\\n    PausableUpgradeable._pause();\\n  }\\n\\n  /**\\n   * @dev See {PausableUpgradeable._unpause()}\\n   *\\n   * Requirements:\\n   * - onlyAdmin can call\\n   */\\n  function unpause() external virtual onlyAdmin {\\n    PausableUpgradeable._unpause();\\n  }\\n\\n  /**\\n   * @dev Update to new PlatformRegistry\\n   *\\n   * @param _newPlatformRegistry new PlatformRegistry\\n   *\\n   * Requirements:\\n   * - _newPlatformRegistry must be a contract and must support IPlatformRegistry\\n   *\\n   * Emits a {PlatformRegistryUpdated} event\\n   */\\n  function updatePlatformRegistry(\\n    IPlatformRegistry _newPlatformRegistry\\n  ) public virtual onlyAdmin {\\n    // EM: IPlatformRegistry interface not supported\\n    require(\\n      IPlatformRegistry(_newPlatformRegistry).supportsInterface(\\n        type(IPlatformRegistry).interfaceId\\n      ),\\n      \\\"E_INS\\\"\\n    );\\n\\n    platformRegistry = _newPlatformRegistry;\\n\\n    emit PlatformRegistryUpdated(_newPlatformRegistry);\\n  }\\n\\n  /**\\n   * @dev Update to new TransferProxy\\n   *\\n   * @param _newTransferProxy new TransferProxy\\n   *\\n   * Requirements:\\n   * - _newTransferProxy must be a contract and must support ITransferProxy\\n   *\\n   * Emits a {TransferProxyUpdated} event\\n   */\\n  function updateTransferProxy(\\n    ITransferProxy _newTransferProxy\\n  ) public virtual onlyAdmin {\\n    // EM: ITransferProxy interface not supported\\n    require(\\n      ITransferProxy(_newTransferProxy).supportsInterface(\\n        type(ITransferProxy).interfaceId\\n      ),\\n      \\\"E_INS\\\"\\n    );\\n\\n    transferProxy = _newTransferProxy;\\n\\n    emit TransferProxyUpdated(_newTransferProxy);\\n  }\\n\\n  /**\\n   * @dev Update to new RoyaltyRegistry\\n   *\\n   * @param _newRoyaltyRegistry new RoyaltyRegistry\\n   *\\n   * Requirements:\\n   * - _newRoyaltyRegistry must be a contract and must support IRoyaltyRegistry\\n   *\\n   * Emits a {RoyaltyManagerUpdated} event\\n   */\\n  function updateRoyaltyRegistry(\\n    IRoyaltyRegistry _newRoyaltyRegistry\\n  ) public virtual onlyAdmin {\\n    // EM: IRoyaltyRegistry interface not supported\\n    require(\\n      IRoyaltyRegistry(_newRoyaltyRegistry).supportsInterface(\\n        type(IRoyaltyRegistry).interfaceId\\n      ),\\n      \\\"E_INS\\\"\\n    );\\n\\n    royaltyRegistry = _newRoyaltyRegistry;\\n\\n    emit RoyaltyRegistryUpdated(_newRoyaltyRegistry);\\n  }\\n\\n  /**\\n   * @dev Gets sold count of an order\\n   *\\n   * @param _saleKey Sale key\\n   * @return sold count of an order\\n   */\\n  function getSoldCountByKey(\\n    bytes32 _saleKey\\n  ) public view virtual returns (uint256) {\\n    return _saleProgress[_saleKey];\\n  }\\n\\n  /**\\n   * @dev Gets sold count of an order\\n   *\\n   * @param _nonce Sale nonce\\n   * @param _token token address\\n   * @param _tokenId token ID\\n   * @return sold count of an order\\n   */\\n  function getSoldCountByNonce(\\n    uint256 _nonce,\\n    address _token,\\n    uint256 _tokenId\\n  ) public view virtual returns (uint256) {\\n    return _saleProgress[keccak256(abi.encode(_nonce, _token, _tokenId))];\\n  }\\n\\n  /**\\n   * @dev Updates order state as sold\\n   *\\n   * @param _saleKey Sale Key\\n   * @param _soldValueCount sold value count\\n   */\\n  function _setSoldByKey(\\n    bytes32 _saleKey,\\n    uint256 _soldValueCount\\n  ) internal virtual {\\n    _saleProgress[_saleKey] += _soldValueCount;\\n  }\\n\\n  /**\\n   * @dev Updates order state as sold\\n   *\\n   * @param _nonce Sale nonce\\n   * @param _token token address\\n   * @param _tokenId token ID\\n   * @param _soldValueCount sold value count\\n   */\\n  function _setSoldByNonce(\\n    uint256 _nonce,\\n    address _token,\\n    uint256 _tokenId,\\n    uint256 _soldValueCount\\n  ) internal virtual {\\n    _saleProgress[\\n      keccak256(abi.encode(_nonce, _token, _tokenId))\\n    ] += _soldValueCount;\\n  }\\n\\n  /**\\n   * @dev Validates royalty parameters\\n   *\\n   * @param _royaltyReceivers address[]\\n   * @param _royaltyDistributionRate uint16[]\\n   * @param _secondaryOnwardsRoyaltyPercentage uint16\\n   */\\n  function _validateRoyaltyInfo(\\n    address[] memory _royaltyReceivers,\\n    uint16[] memory _royaltyDistributionRate,\\n    uint16 _secondaryOnwardsRoyaltyPercentage\\n  ) private pure {\\n    // EM: Invalid royalty data\\n    require(\\n      _royaltyReceivers.length == _royaltyDistributionRate.length,\\n      \\\"E_VRI_IRD\\\"\\n    );\\n\\n    uint16 totalPercentage = 0;\\n    for (uint256 idx = 0; idx < _royaltyReceivers.length; idx++) {\\n      totalPercentage += _royaltyDistributionRate[idx];\\n      // EM: zero address must not be included in receivers\\n      require(_royaltyReceivers[idx] != address(0), \\\"E_VRI_IRA\\\");\\n    }\\n\\n    // EM: receiversPercentage total in not 100%\\n    require(totalPercentage == OrderDomainV3.FEE_DENOMINATOR, \\\"E_VRI_RPN100\\\");\\n\\n    // EM: secondaryOnwardsRoyaltyPercentage greater than 100%\\n    require(\\n      _secondaryOnwardsRoyaltyPercentage <= OrderDomainV3.FEE_DENOMINATOR,\\n      \\\"E_VRI_SOPG100\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Check validity of arguments and Verify signatures for calling exchange\\n   *\\n   * @param _saleOrder OrderDomainV3.SaleOrder\\n   * @param _salerSign saler signature\\n   * @param _buyOrder OrderDomainV3.BuyOrder\\n   * @param _platformSign platform signature\\n   * @param _hashMsgSaleOrder Hash of Sale Order\\n   */\\n  function _checkParameterAndVerifySignaturesForExchange(\\n    OrderDomainV3.SaleOrder calldata _saleOrder,\\n    bytes calldata _salerSign,\\n    OrderDomainV3.BuyOrder calldata _buyOrder,\\n    bytes calldata _platformSign,\\n    bytes32 _hashMsgSaleOrder\\n  ) internal virtual {\\n    uint8 ver = _saleOrder.version;\\n    // Part 1: Check parameters\\n    {\\n      // Make sure SaleOrder and BuyOrder version is same\\n      // EM: Version mismatch\\n      require(ver == _buyOrder.version, \\\"E_CPFE_VMM\\\");\\n\\n      // EM: Sale Order Asset length is not valid\\n      require(_saleOrder.assetList.length == 1, \\\"E_CPFE_ISOAL\\\");\\n\\n      OrderDomainV3.Asset memory asset = _saleOrder.assetList[0];\\n\\n      // EM: SaleOrder asset invalid token\\n      require(asset.token != address(0), \\\"E_CPFE_SAIT\\\");\\n\\n      // EM: SaleOrder asset invalid tokenId\\n      require(asset.tokenId != 0, \\\"E_CPFE_SAITI\\\");\\n\\n      // Make sure asset is not already sold out\\n      if (_buyOrder.firstAssetBuyValue == 0) {\\n        // EM: not enough asset remaining for sale\\n        // when _buyOrder.firstAssetBuyValue == 0, it means bundle sale\\n        require(getSoldCountByKey(_hashMsgSaleOrder) != 1, \\\"E_CPFE_SOLD\\\");\\n      } else {\\n        // Make sure asset is not already sold out\\n        // EM: not enough asset remaining for sale\\n        uint256 soldCount = getSoldCountByNonce(\\n          _saleOrder.nonce,\\n          asset.token,\\n          asset.tokenId\\n        );\\n        require(\\n          _buyOrder.firstAssetBuyValue <= (asset.value - soldCount),\\n          \\\"E_CPFE_SOLD\\\"\\n        );\\n      }\\n\\n      // Make sure order is not expired\\n      // EM: Expired Order\\n      require(_buyOrder.validUntil >= block.timestamp, \\\"E_CPFE_EO\\\");\\n\\n      // Platform fee rate should be greater than PlatformFeeRateLowerLimit\\n      // EM: SaleOrder pfSaleFeeRate Lower than low limit\\n      require(\\n        _saleOrder.pfSaleFeeRate >=\\n          platformRegistry.getPlatformFeeRateLowerLimit(),\\n        \\\"E_CPFE_SPFLTLL\\\"\\n      );\\n      if (ver >= 1) {\\n        require(\\n          _saleOrder.pfSaleFeeRateSecondary >=\\n            platformRegistry.getPlatformFeeRateLowerLimit(),\\n          \\\"E_CPFE_SPFLTLL\\\"\\n        );\\n      }\\n\\n      if (\\n        _buyOrder.paymentDetails.paymentMode == OrderDomainV3.ERC20_PAYMENT_MODE\\n      ) {\\n        // Whitelist check\\n        // EM: BuyOrder paymentToken not whitelisted\\n        require(\\n          platformRegistry.isWhitelistedERC20(\\n            _buyOrder.paymentDetails.paymentToken\\n          ),\\n          \\\"E_CPFE_BPTNW\\\"\\n        );\\n      }\\n\\n      // OrderDomainV3.SaleOrder\\n\\n      // OrderDomainV3.Asset\\n      // EM: SaleOrder asset invalid originKind\\n      require(\\n        OrderDomainV3._isValidOriginKind(asset.originKind),\\n        \\\"E_CPFE_SAIO\\\"\\n      );\\n\\n      // Make sure using newer signature for new version\\n      // EM: Version not correct\\n      if (asset.value > 0) {\\n        require(ver >= 1, \\\"E_CPFE_VNC\\\");\\n      }\\n\\n      // Validate RoyaltyInfo\\n      if (asset.royaltyReceivers.length > 0) {\\n        _validateRoyaltyInfo(\\n          asset.royaltyReceivers,\\n          asset.royaltyDistributionRate,\\n          asset.secondaryOnwardsRoyaltyPercentage\\n        );\\n      }\\n\\n      // EM: SaleOrder invalid currentOwner\\n      require(_saleOrder.currentOwner != address(0), \\\"E_CPFE_SICO\\\");\\n\\n      // EM: SaleOrder invalid paymentReceiver\\n      require(_saleOrder.paymentReceiver != address(0), \\\"E_CPFE_SIPR\\\");\\n\\n      // EM: SaleOrder invalid start\\n      require(\\n        _saleOrder.start > 0 && _saleOrder.start <= block.timestamp,\\n        \\\"E_CPFE_SIS\\\"\\n      );\\n\\n      // EM: SaleOrder invalid end\\n      require(\\n        _saleOrder.end == 0 || _saleOrder.end > block.timestamp,\\n        \\\"E_CPFE_SIE\\\"\\n      );\\n\\n      // EM: SaleOrder invalid nonce\\n      require(_saleOrder.nonce != 0, \\\"E_CPFE_SIN\\\");\\n\\n      // OrderDomainV3.BuyOrder\\n      // EM: SaleOrder and BuyOrder nonce does't match\\n      require(_saleOrder.nonce == _buyOrder.saleNonce, \\\"E_CPFE_SBN\\\");\\n\\n      // EM: BuyOrder invalid buyer\\n      require(_buyOrder.buyer != address(0), \\\"E_CPFE_BIB\\\");\\n\\n      // EM: BuyOrder invalid payer\\n      require(_buyOrder.payer != address(0), \\\"E_CPFE_BIP\\\");\\n\\n      // EM: BuyOrder invalid paymentMode\\n      require(\\n        OrderDomainV3._isValidPaymentMode(_buyOrder.paymentDetails.paymentMode),\\n        \\\"E_CPFE_BIPM\\\"\\n      );\\n\\n      // EM: BuyOrder invalid price\\n      require(_buyOrder.paymentDetails.price != 0, \\\"E_CPFE_BOIP\\\");\\n\\n      // Mixed cases\\n      // EM: currentOwner and buyer can't be same\\n      require(_saleOrder.currentOwner != _buyOrder.buyer, \\\"E_CPFE_CAABS\\\");\\n\\n      // Check for matching payment mode for Sale and Buy\\n      bool matchFound = false;\\n      for (\\n        uint256 idx = 0;\\n        idx < _saleOrder.acceptedPaymentMode.length;\\n        idx++\\n      ) {\\n        // EM: SaleOrder acceptedPaymentMode invalid paymentMode\\n        require(\\n          OrderDomainV3._isValidPaymentMode(\\n            _saleOrder.acceptedPaymentMode[idx].paymentMode\\n          ),\\n          \\\"E_CPFE_SAPMPM\\\"\\n        );\\n\\n        // EM: SaleOrder acceptedPaymentMode invalid price\\n        require(\\n          _saleOrder.acceptedPaymentMode[idx].price != 0,\\n          \\\"E_CPFE_SAPMIP\\\"\\n        );\\n\\n        if (\\n          _saleOrder.acceptedPaymentMode[idx].paymentMode ==\\n          _buyOrder.paymentDetails.paymentMode\\n        ) {\\n          matchFound = true;\\n          break;\\n        }\\n      }\\n      // EM: payment mode did't match\\n      require(matchFound, \\\"E_CPFE_PMNM\\\");\\n    }\\n\\n    // Part 2: Verify signatures\\n    {\\n      // Prepares ERC712 message hash of Saler signature\\n      address recoverdAddress = _domainSeparatorV4()\\n        .toTypedDataHash(_hashMsgSaleOrder)\\n        .recover(_salerSign);\\n      // EM: invalid saler signer\\n      require(recoverdAddress == _saleOrder.currentOwner, \\\"E_CPFE_ISS\\\");\\n\\n      // Prepares ERC712 message hash of platform signature\\n      bytes32 hashMsgBuyOrder = OrderDomainV3._hashBuyOrder(_buyOrder);\\n      recoverdAddress = _domainSeparatorV4()\\n        .toTypedDataHash(hashMsgBuyOrder)\\n        .recover(_platformSign);\\n      // EM: invalid platform signer\\n      require(platformRegistry.isPlatformSigner(recoverdAddress), \\\"E_CPFE_IPS\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Simulate the PartnerFeeTransfer(Not actual transfer)\\n   *\\n   * @param _asset OrderDomainV3.Asset\\n   * @param _pricePerAsset uint256 price of the asset\\n   */\\n  function _simulateRoyaltyTransfer(\\n    OrderDomainV3.Asset memory _asset,\\n    uint256 _pricePerAsset,\\n    uint8 _version\\n  ) internal virtual returns (uint256) {\\n    uint256 totalRoyaltyToSend = 0;\\n\\n    address[] memory royaltyReceivers;\\n    uint256[] memory royaltyReceiversCut;\\n    uint8 royaltyType;\\n    (royaltyReceivers, royaltyReceiversCut, royaltyType) = royaltyRegistry\\n      .royaltyInfo(\\n        _asset.token,\\n        _asset.tokenId,\\n        _pricePerAsset,\\n        _asset.isSecondarySale\\n      );\\n\\n    if (\\n      _version >= 2 &&\\n      royaltyReceivers.length == 0 &&\\n      _asset.royaltyReceivers.length > 0\\n    ) {\\n      // No RoyaltyRegistry info is set, use Royalty from parameter\\n      royaltyReceivers = _asset.royaltyReceivers;\\n\\n      // Find the amount that needs to be split for royalty\\n      uint256 splitTotalPrice = _pricePerAsset;\\n      if (_asset.isSecondarySale == 1) {\\n        // Secondary Sale onwards royalty is distributed based on royaltyPercentage\\n        splitTotalPrice =\\n          (_pricePerAsset * _asset.secondaryOnwardsRoyaltyPercentage) /\\n          OrderDomainV3.FEE_DENOMINATOR;\\n      }\\n\\n      // Find/Calculate royaltyReceiversCut\\n      royaltyReceiversCut = new uint256[](royaltyReceivers.length);\\n      for (uint256 idx = 0; idx < royaltyReceivers.length; idx++) {\\n        royaltyReceiversCut[idx] =\\n          (splitTotalPrice * _asset.royaltyDistributionRate[idx]) /\\n          OrderDomainV3.FEE_DENOMINATOR;\\n      }\\n    }\\n\\n    for (uint256 idx = 0; idx < royaltyReceivers.length; idx++) {\\n      uint256 royaltyReceiverCut = royaltyReceiversCut[idx];\\n\\n      _registerPayout(royaltyReceivers[idx], royaltyReceiverCut);\\n\\n      totalRoyaltyToSend += royaltyReceiverCut;\\n    }\\n\\n    return totalRoyaltyToSend;\\n  }\\n\\n  /**\\n   * @dev Transfer NFT\\n   *\\n   * @param _currentOwner address\\n   * @param _asset OrderDomainV3.Asset memory\\n   * @param _buyOrder OrderDomainV3.BuyOrder\\n   */\\n  function _transferNFT(\\n    // OrderDomainV3.SaleOrder calldata _saleOrder,\\n    address _currentOwner,\\n    OrderDomainV3.Asset memory _asset,\\n    OrderDomainV3.BuyOrder calldata _buyOrder\\n  ) internal virtual {\\n    // OrderDomainV3.Asset memory asset = _saleOrder.assetList[0];\\n    if (IERC721(_asset.token).supportsInterface(type(IERC721).interfaceId)) {\\n      // ERC721\u306e\u5834\u5408\\n      transferProxy.erc721safeTransferFrom(\\n        IERC721(_asset.token),\\n        _currentOwner,\\n        _buyOrder.buyer,\\n        _asset.tokenId\\n      );\\n    } else if (\\n      IERC1155(_asset.token).supportsInterface(type(IERC1155).interfaceId)\\n    ) {\\n      uint256 value = _asset.value;\\n      if (_buyOrder.firstAssetBuyValue > 0) {\\n        // For Single ERC1155\\n        value = _buyOrder.firstAssetBuyValue;\\n      }\\n\\n      // ERC1155\u306e\u5834\u5408\\n      transferProxy.erc1155safeTransferFrom(\\n        IERC1155(_asset.token),\\n        _currentOwner,\\n        _buyOrder.buyer,\\n        _asset.tokenId,\\n        value,\\n        bytes(\\\"0x\\\")\\n      );\\n    } else {\\n      // EM: Unsupported asset type\\n      revert(\\\"E_UAT\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Payout to all receivers using _tempPayoutAddress and _tempPayoutAmount\\n   * when execting exchange\\n   *\\n   * @param _paymentMode bytes4 Payment.paymentMode\\n   * @param _paymentToken address\\n   * @param _payer address\\n   */\\n  function _payout(\\n    bytes4 _paymentMode,\\n    address _paymentToken,\\n    address _payer\\n  ) internal virtual {\\n    for (uint256 idx = 0; idx < _tempPayoutAddress.length; idx++) {\\n      address payable reciever = payable(_tempPayoutAddress[idx]);\\n      uint256 amount = _tempPayoutAmount[reciever];\\n\\n      if (_paymentMode == OrderDomainV3.NATIVE_PAYMENT_MODE) {\\n        // Sending ETH\\n        reciever.transfer(amount);\\n      } else if (_paymentMode == OrderDomainV3.ERC20_PAYMENT_MODE) {\\n        // Sending ERC20\\n        transferProxy.erc20safeTransferFrom(\\n          IERC20(_paymentToken),\\n          _payer,\\n          reciever,\\n          amount\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Register payment locally, to be used in _payout\\n   *\\n   * @param _reciever address\\n   * @param _amount uint256\\n   */\\n  function _registerPayout(\\n    address _reciever,\\n    uint256 _amount\\n  ) internal virtual {\\n    if (_amount > 0) {\\n      if (_tempPayoutAmount[_reciever] == 0) {\\n        _tempPayoutAddress.push(_reciever);\\n      }\\n      _tempPayoutAmount[_reciever] += _amount;\\n    }\\n  }\\n\\n  /**\\n   * @dev Clears previous payout data\\n   * It is used for collective payment to pay one address only once\\n   */\\n  function _resetPayoutTemp() internal virtual {\\n    for (uint256 idx = 0; idx < _tempPayoutAddress.length; idx++) {\\n      delete _tempPayoutAmount[_tempPayoutAddress[idx]];\\n    }\\n    delete _tempPayoutAddress;\\n  }\\n\\n  /**\\n   * @dev See {IExchange.exchange()}\\n   *\\n   * @param _saleOrder OrderDomainV3.SaleOrder\\n   * @param _salerSign saler signature\\n   * @param _buyOrder OrderDomainV3.BuyOrder\\n   * @param _platformSign platform signature\\n   *\\n   * Requirements:\\n   * - whenNotPaused\\n   * - nonReentrant\\n   *\\n   * Emits a {Sale} event\\n   */\\n  function exchange(\\n    OrderDomainV3.SaleOrder calldata _saleOrder,\\n    bytes calldata _salerSign,\\n    OrderDomainV3.BuyOrder calldata _buyOrder,\\n    bytes calldata _platformSign\\n  ) external payable virtual override whenNotPaused nonReentrant {\\n    uint8 ver = _saleOrder.version;\\n    // Step1 : Parameters and signatures checks\\n    bytes32 hashMsgSaleOrder = OrderDomainV3._hashSaleOrder(_saleOrder);\\n    _checkParameterAndVerifySignaturesForExchange(\\n      _saleOrder,\\n      _salerSign,\\n      _buyOrder,\\n      _platformSign,\\n      hashMsgSaleOrder\\n    );\\n    OrderDomainV3.Asset memory asset = _saleOrder.assetList[0];\\n\\n    // Step2 : Payout (if OnchainPaymentMode) : Platform Fee + Partner Fee(If partner) + Royalty + Saler(Secondary onwards)\\n    // OnchainPaymentMode == NATIVE_PAYMENT_MODE || ERC20_PAYMENT_MODE\\n    if (\\n      OrderDomainV3._isOnchainPaymentMode(_buyOrder.paymentDetails.paymentMode)\\n    ) {\\n      // Payout map is used for collective payment by sending only once for an address\\n      // So reset it before using it\\n      _resetPayoutTemp();\\n\\n      // Sale Price = Platform Fee + Partner Fee(If partner) + Royalty + Saler(Secondary onwards)\\n      // Find the total sale price by matching payment mode of SaleOrder and BuyOrder\\n      uint256 totalSalePrice = OrderDomainV3._findTotalSalePrice(\\n        _saleOrder,\\n        _buyOrder\\n      );\\n\\n      if (_buyOrder.firstAssetBuyValue > 0) {\\n        // Single Sale for ERC1155\\n        totalSalePrice =\\n          (totalSalePrice * _buyOrder.firstAssetBuyValue) /\\n          _saleOrder.assetList[0].value;\\n      }\\n\\n      // Make sure Native Token/ERC20 recieved is enough for sale\\n      // NOTE: if got more Native Token/ERC20 then needed, it will be stored in this contract(considered as TIP)\\n      if (\\n        _buyOrder.paymentDetails.paymentMode ==\\n        OrderDomainV3.NATIVE_PAYMENT_MODE\\n      ) {\\n        // Native Token case\\n        // EM: not enough Native Token received for sale\\n        require(msg.value >= totalSalePrice, \\\"E_E_NENT\\\");\\n        // NOTE: TIP will be added to the balance of this contract\\n      } else if (\\n        _buyOrder.paymentDetails.paymentMode == OrderDomainV3.ERC20_PAYMENT_MODE\\n      ) {\\n        // ERC20 case\\n        // NOTE: Make sure appropriate amount of ERC20 is approved to TransferProxy\\n        address paymentToken = _buyOrder.paymentDetails.paymentToken;\\n        // EM: not enough ERC20 approved for sale\\n        uint256 allowanceCount = IERC20(paymentToken).allowance(\\n          _buyOrder.payer,\\n          address(transferProxy)\\n        );\\n        require(allowanceCount >= totalSalePrice, \\\"E_E_NEERC20\\\");\\n\\n        // Register TIP\\n        uint256 tip = allowanceCount - totalSalePrice;\\n        if (tip > 0) {\\n          ERC20Tip memory erc20Tip = ERC20Tip(_buyOrder.payer, tip);\\n          _erc20TipDeposite[paymentToken].push(erc20Tip);\\n        }\\n      }\\n\\n      address paymentReceiver = _saleOrder.paymentReceiver;\\n\\n      // [Platform Fee for Asset]\\n      uint16 pfSaleFeeRate = _saleOrder.pfSaleFeeRate;\\n      // NOTE: from version 1 onward, need to set Secondary Sale fee rate at [SaleOrder.pfSaleFeeRateSecondary]\\n      if (ver >= 1 && OrderDomainV3._isSecondarySale(asset.isSecondarySale)) {\\n        // Secondary onwards sale case\\n        pfSaleFeeRate = _saleOrder.pfSaleFeeRateSecondary;\\n      }\\n      // Simulate sending platform fee\\n      uint256 pfFeeForAsset = (totalSalePrice * pfSaleFeeRate) /\\n        OrderDomainV3.FEE_DENOMINATOR;\\n      _registerPayout(platformRegistry.getPlatformFeeReceiver(), pfFeeForAsset);\\n\\n      // [Partner Fee for Asset]\\n      uint256 partnerFeeForAsset = 0;\\n      if (\\n        OrderDomainV3._isPartnerOrigin(asset.originKind) &&\\n        asset.partnerFeeRate > 0\\n      ) {\\n        address payable partnerFeeReceiver = asset.partnerFeeReceiver;\\n        if (partnerFeeReceiver == address(0)) {\\n          // If _asset.partnerFeeReceiver is not set, try to get from platformRegistry\\n          partnerFeeReceiver = platformRegistry.getPartnerFeeReceiver(\\n            asset.token\\n          );\\n        }\\n\\n        // Make sure partner fee recever is set\\n        // EM: partner fee recever is not set\\n        require(partnerFeeReceiver != address(0), \\\"E_E_PFRNS\\\");\\n\\n        partnerFeeForAsset =\\n          (totalSalePrice * asset.partnerFeeRate) /\\n          OrderDomainV3.FEE_DENOMINATOR;\\n        _registerPayout(partnerFeeReceiver, partnerFeeForAsset);\\n      }\\n\\n      // [Royalties for Asset]\\n      uint256 royaltySplitPriceForAsset = 0;\\n      if (OrderDomainV3._isSecondarySale(asset.isSecondarySale)) {\\n        // Secondary onwards sale case\\n        royaltySplitPriceForAsset = totalSalePrice;\\n      } else {\\n        // Primary sale case\\n        royaltySplitPriceForAsset =\\n          totalSalePrice -\\n          pfFeeForAsset -\\n          partnerFeeForAsset;\\n      }\\n      // Simulate sending royalty cut\\n      uint256 royaltyFeeForAsset = _simulateRoyaltyTransfer(\\n        asset,\\n        royaltySplitPriceForAsset,\\n        ver\\n      );\\n\\n      // [Saler Cut for Asset]\\n      _registerPayout(\\n        paymentReceiver,\\n        totalSalePrice - pfFeeForAsset - partnerFeeForAsset - royaltyFeeForAsset\\n      );\\n\\n      // Payout\\n      _payout(\\n        _buyOrder.paymentDetails.paymentMode,\\n        _buyOrder.paymentDetails.paymentToken,\\n        _buyOrder.payer\\n      );\\n      _resetPayoutTemp();\\n    }\\n\\n    // Step3 : Transfer NFT\\n    _transferNFT(_saleOrder.currentOwner, asset, _buyOrder);\\n\\n    // Step4 : Update sale order state and emit event\\n    if (_buyOrder.firstAssetBuyValue > 0) {\\n      _setSoldByNonce(\\n        _saleOrder.nonce,\\n        asset.token,\\n        asset.tokenId,\\n        _buyOrder.firstAssetBuyValue\\n      );\\n\\n      emit SaleSingle(\\n        _saleOrder.nonce,\\n        asset.token,\\n        asset.tokenId,\\n        _buyOrder.firstAssetBuyValue\\n      );\\n    } else {\\n      // Mark whole order as sold, when bundle sale\\n      _setSoldByKey(hashMsgSaleOrder, 1);\\n\\n      emit SaleSingle(\\n        _saleOrder.nonce,\\n        asset.token,\\n        asset.tokenId,\\n        asset.value\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @dev Withdraw Tip\\n   *\\n   * @param _receiver address payable\\n   * @param _erc20Token address. When Native, address is zero.\\n   */\\n  function withdrawTip(\\n    address payable _receiver,\\n    address _erc20Token\\n  ) public virtual onlyAdmin {\\n    // EM: Invalid withdraw address\\n    require(_receiver != address(0), \\\"E_WT_IRA\\\");\\n\\n    if (_erc20Token == address(0)) {\\n      // Native tip withdraw\\n      _receiver.transfer(address(this).balance);\\n    } else {\\n      // ERC20 tip withdrawal\\n      ERC20Tip[] storage erc20TipList = _erc20TipDeposite[_erc20Token];\\n\\n      for (uint256 idx = 0; idx < erc20TipList.length; idx++) {\\n        ERC20Tip storage erc20Tip = erc20TipList[idx];\\n        // Sending ERC20\\n        transferProxy.erc20safeTransferFrom(\\n          IERC20(_erc20Token),\\n          erc20Tip.tipper,\\n          _receiver,\\n          erc20Tip.amount\\n        );\\n      }\\n\\n      // Clear tip info after transfer\\n      delete _erc20TipDeposite[_erc20Token];\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the version of this contract\\n   */\\n  function version() public pure virtual override returns (uint8) {\\n    return 2;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/sbinft/market/v3/interface/IExchangeV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\\\";\\n\\nimport \\\"contracts/sbinft/market/v3/library/OrderDomainV3.sol\\\";\\n\\n/**\\n * @title SBINFT Exchange protocol interface\\n * @author SBINFT Co., Ltd.\\n */\\ninterface IExchangeV3 is IERC165Upgradeable {\\n  // Emits whenever there is a exchange/sale\\n  event SaleSingle(\\n    uint256 indexed nonce,\\n    address indexed token,\\n    uint256 indexed tokenId,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @dev Try to exchange bundle asset in process of Sale\\n   *\\n   * @param _saleOrder OrderDomainV3.SaleOrder\\n   * @param _salerSign saler signature\\n   * @param _buyOrder OrderDomainV3.BuyOrder\\n   * @param _platformSign platform signature\\n   */\\n  function exchange(\\n    OrderDomainV3.SaleOrder calldata _saleOrder,\\n    bytes calldata _salerSign,\\n    OrderDomainV3.BuyOrder calldata _buyOrder,\\n    bytes calldata _platformSign\\n  ) external payable;\\n\\n  /**\\n   * @dev Returns the version of this contract\\n   */\\n  function version() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/sbinft/market/v3/library/OrderDomainV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Model data related with Order\\n * @author SBINFT Co., Ltd.\\n */\\nlibrary OrderDomainV3 {\\n  // ORIGIN_KIND\\n  bytes4 private constant NANAKUSA_ORIGIN_KIND = bytes4(keccak256(\\\"NANAKUSA\\\"));\\n  bytes4 private constant PARTNER_ORIGIN_KIND = bytes4(keccak256(\\\"PARTNER\\\"));\\n\\n  // PAYMENT_MODE\\n  bytes4 public constant NATIVE_PAYMENT_MODE = bytes4(keccak256(\\\"NATIVE\\\"));\\n  bytes4 public constant ERC20_PAYMENT_MODE = bytes4(keccak256(\\\"ERC20\\\"));\\n  bytes4 private constant CREDIT_CARD_PAYMENT_MODE =\\n    bytes4(keccak256(\\\"CREDIT_CARD\\\"));\\n  bytes4 private constant OTHER_BLOCKCHAIN_PAYMENT_MODE =\\n    bytes4(keccak256(\\\"OTHER_BLOCKCHAIN\\\"));\\n\\n  /**\\n   * @dev Sale Asset Info\\n   */\\n  struct Asset {\\n    bytes4 originKind;\\n    address token;\\n    uint256 tokenId;\\n    uint256 value; // [v2] Only For ERC1155, For ERC721 always 0\\n    uint16 partnerFeeRate; // only set when originKind = PARTNER_ORIGIN_KIND\\n    address payable partnerFeeReceiver; //[v2] only set when originKind = PARTNER_ORIGIN_KIND or can be set into PlatformRegistry\\n    uint8 isSecondarySale; // 1 = true, 0 = false\\n    address[] royaltyReceivers; // [v3]\\n    uint16[] royaltyDistributionRate; // [v3]\\n    uint16 secondaryOnwardsRoyaltyPercentage; // [v3]\\n  }\\n\\n  struct Payment {\\n    bytes4 paymentMode; // Like NATIVE_PAYMENT_MODE || ERC20_PAYMENT_MODE || ...\\n    address paymentToken; // Token contract address\\n    uint256 price;\\n  }\\n\\n  struct SaleOrder {\\n    Asset[] assetList; // Array but only zero [0] index will be used(as bundle listing is depreciated)\\n    address currentOwner;\\n    address paymentReceiver; // Onchain payment receiver, can be same as currentOwner\\n    Payment[] acceptedPaymentMode;\\n    uint16 pfSaleFeeRate;\\n    uint16 pfSaleFeeRateSecondary; // [v2]\\n    uint256 start; // Always non zero\\n    uint256 end; // Can be zero when there is no end time\\n    uint256 nonce;\\n    uint8 version; // [v2] 0 = version1, 1 = version2, 2 = version3 ...\\n  }\\n\\n  struct BuyOrder {\\n    uint256 saleNonce;\\n    address payable buyer;\\n    address payable payer; // If no payer means buyer is the payer\\n    uint256 firstAssetBuyValue; // [v2] For bundle sale and ERC721 always 0, Only for single ERC1155 sale need some value\\n    Payment paymentDetails;\\n    uint256 validUntil; // UNIX timestamp to determine the of validity of buyOrder\\n    uint8 version; // [v2] 0 = version1, 1 = version2 ...\\n  }\\n\\n  // ---- EIP712 ----\\n  // [v1]\\n  bytes32 private constant ASSET_TYPEHASH =\\n    keccak256(\\n      \\\"Asset(bytes4 originKind,address token,uint256 tokenId,uint16 partnerFeeRate,uint8 isSecondarySale)\\\"\\n    );\\n\\n  bytes32 private constant PAYMENT_TYPEHASH =\\n    keccak256(\\\"Payment(bytes4 paymentMode,address paymentToken,uint256 price)\\\");\\n\\n  bytes32 private constant SALE_ORDER_TYPEHASH =\\n    keccak256(\\n      \\\"SaleOrder(Asset[] assetList,address currentOwner,address paymentReceiver,Payment[] acceptedPaymentMode,uint16 pfSaleFeeRate,uint256 start,uint256 end,uint256 nonce)Asset(bytes4 originKind,address token,uint256 tokenId,uint16 partnerFeeRate,uint8 isSecondarySale)Payment(bytes4 paymentMode,address paymentToken,uint256 price)\\\"\\n    );\\n\\n  bytes32 private constant BUY_ORDER_TYPEHASH =\\n    keccak256(\\n      \\\"BuyOrder(uint256 saleNonce,address buyer,address payer,Payment paymentDetails,uint256 validUntil)Payment(bytes4 paymentMode,address paymentToken,uint256 price)\\\"\\n    );\\n\\n  // [v2]\\n  bytes32 private constant ASSET_TYPEHASH_V2 =\\n    keccak256(\\n      \\\"Asset(bytes4 originKind,address token,uint256 tokenId,uint256 value,uint16 partnerFeeRate,address partnerFeeReceiver,uint8 isSecondarySale)\\\"\\n    );\\n\\n  bytes32 private constant SALE_ORDER_TYPEHASH_V2 =\\n    keccak256(\\n      \\\"SaleOrder(Asset[] assetList,address currentOwner,address paymentReceiver,Payment[] acceptedPaymentMode,uint16 pfSaleFeeRate,uint16 pfSaleFeeRateSecondary,uint256 start,uint256 end,uint256 nonce,uint8 version)Asset(bytes4 originKind,address token,uint256 tokenId,uint256 value,uint16 partnerFeeRate,address partnerFeeReceiver,uint8 isSecondarySale)Payment(bytes4 paymentMode,address paymentToken,uint256 price)\\\"\\n    );\\n\\n  bytes32 private constant BUY_ORDER_TYPEHASH_V2 =\\n    keccak256(\\n      \\\"BuyOrder(uint256 saleNonce,address buyer,address payer,uint256 firstAssetBuyValue,Payment paymentDetails,uint256 validUntil,uint8 version)Payment(bytes4 paymentMode,address paymentToken,uint256 price)\\\"\\n    );\\n\\n  // [v3]\\n  /**\\n   * @dev Defaults to 10000 so fees are expressed in basis points, but may be customized by an override.\\n   * 10000 = 100%\\n   */\\n  uint16 internal constant FEE_DENOMINATOR = 10000;\\n\\n  bytes32 private constant ASSET_TYPEHASH_V3 =\\n    keccak256(\\n      \\\"Asset(bytes4 originKind,address token,uint256 tokenId,uint256 value,uint16 partnerFeeRate,address partnerFeeReceiver,uint8 isSecondarySale,address[] royaltyReceivers,uint16[] royaltyDistributionRate,uint16 secondaryOnwardsRoyaltyPercentage)\\\"\\n    );\\n\\n  bytes32 private constant SALE_ORDER_TYPEHASH_V3 =\\n    keccak256(\\n      \\\"SaleOrder(Asset[] assetList,address currentOwner,address paymentReceiver,Payment[] acceptedPaymentMode,uint16 pfSaleFeeRate,uint16 pfSaleFeeRateSecondary,uint256 start,uint256 end,uint256 nonce,uint8 version)Asset(bytes4 originKind,address token,uint256 tokenId,uint256 value,uint16 partnerFeeRate,address partnerFeeReceiver,uint8 isSecondarySale,address[] royaltyReceivers,uint16[] royaltyDistributionRate,uint16 secondaryOnwardsRoyaltyPercentage)Payment(bytes4 paymentMode,address paymentToken,uint256 price)\\\"\\n    );\\n\\n  /**\\n   * @dev Prepares keccak256 hash for Asset\\n   *\\n   * @param _asset OrderDomain.Asset\\n   * @param _version uint8\\n   */\\n  function _hashAsset(\\n    Asset calldata _asset,\\n    uint8 _version\\n  ) internal pure returns (bytes32) {\\n    if (_version == 0) {\\n      // [v1]\\n      return\\n        keccak256(\\n          abi.encode(\\n            ASSET_TYPEHASH,\\n            _asset.originKind,\\n            _asset.token,\\n            _asset.tokenId,\\n            _asset.partnerFeeRate,\\n            _asset.isSecondarySale\\n          )\\n        );\\n    } else if (_version == 1) {\\n      // [v2]\\n      return\\n        keccak256(\\n          abi.encode(\\n            ASSET_TYPEHASH_V2,\\n            _asset.originKind,\\n            _asset.token,\\n            _asset.tokenId,\\n            _asset.value,\\n            _asset.partnerFeeRate,\\n            _asset.partnerFeeReceiver,\\n            _asset.isSecondarySale\\n          )\\n        );\\n    } else if (_version == 2) {\\n      // [v3]\\n      return\\n        keccak256(\\n          abi.encode(\\n            ASSET_TYPEHASH_V3,\\n            _asset.originKind,\\n            _asset.token,\\n            _asset.tokenId,\\n            _asset.value,\\n            _asset.partnerFeeRate,\\n            _asset.partnerFeeReceiver,\\n            _asset.isSecondarySale,\\n            keccak256(abi.encodePacked(_asset.royaltyReceivers)),\\n            keccak256(abi.encodePacked(_asset.royaltyDistributionRate)),\\n            _asset.secondaryOnwardsRoyaltyPercentage\\n          )\\n        );\\n    } else {\\n      revert(\\\"E_OD3_IV\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Prepares keccak256 hash for Asset list\\n   *\\n   * @param _assetList OrderDomain.Asset[]\\n   * @param _version uint8\\n   */\\n  function _hashAsset(\\n    Asset[] calldata _assetList,\\n    uint8 _version\\n  ) internal pure returns (bytes32) {\\n    bytes32[] memory keccakData = new bytes32[](_assetList.length);\\n\\n    for (uint256 idx = 0; idx < _assetList.length; idx++) {\\n      keccakData[idx] = _hashAsset(_assetList[idx], _version);\\n    }\\n\\n    return keccak256(abi.encodePacked(keccakData));\\n  }\\n\\n  /**\\n   * @dev Prepares keccak256 hash for Payment\\n   *\\n   * @param _payment OrderDomain.Payment\\n   */\\n  function _hashPayment(\\n    Payment calldata _payment\\n  ) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          PAYMENT_TYPEHASH,\\n          _payment.paymentMode,\\n          _payment.paymentToken,\\n          _payment.price\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @dev Prepares keccak256 hash for Payment list\\n   *\\n   * @param _paymentList OrderDomain.Payment[]\\n   */\\n  function _hashPayment(\\n    Payment[] calldata _paymentList\\n  ) internal pure returns (bytes32) {\\n    bytes32[] memory keccakData = new bytes32[](_paymentList.length);\\n\\n    for (uint256 idx = 0; idx < _paymentList.length; idx++) {\\n      keccakData[idx] = _hashPayment(_paymentList[idx]);\\n    }\\n\\n    return keccak256(abi.encodePacked(keccakData));\\n  }\\n\\n  /**\\n   * @dev Prepares keccak256 hash for SaleOrder\\n   *\\n   * @param _saleOrder OrderDomain.SaleOrder\\n   */\\n  function _hashSaleOrder(\\n    SaleOrder calldata _saleOrder\\n  ) internal pure returns (bytes32) {\\n    if (_saleOrder.version == 0) {\\n      // [v1]\\n      return\\n        keccak256(\\n          abi.encode(\\n            SALE_ORDER_TYPEHASH,\\n            _hashAsset(_saleOrder.assetList, _saleOrder.version),\\n            _saleOrder.currentOwner,\\n            _saleOrder.paymentReceiver,\\n            _hashPayment(_saleOrder.acceptedPaymentMode),\\n            _saleOrder.pfSaleFeeRate,\\n            _saleOrder.start,\\n            _saleOrder.end,\\n            _saleOrder.nonce\\n          )\\n        );\\n    } else if (_saleOrder.version == 1) {\\n      // [v2]\\n      return\\n        keccak256(\\n          abi.encode(\\n            SALE_ORDER_TYPEHASH_V2,\\n            _hashAsset(_saleOrder.assetList, _saleOrder.version),\\n            _saleOrder.currentOwner,\\n            _saleOrder.paymentReceiver,\\n            _hashPayment(_saleOrder.acceptedPaymentMode),\\n            _saleOrder.pfSaleFeeRate,\\n            _saleOrder.pfSaleFeeRateSecondary,\\n            _saleOrder.start,\\n            _saleOrder.end,\\n            _saleOrder.nonce,\\n            _saleOrder.version\\n          )\\n        );\\n    } else if (_saleOrder.version == 2) {\\n      // [v3]\\n      return\\n        keccak256(\\n          abi.encode(\\n            SALE_ORDER_TYPEHASH_V3,\\n            _hashAsset(_saleOrder.assetList, _saleOrder.version),\\n            _saleOrder.currentOwner,\\n            _saleOrder.paymentReceiver,\\n            _hashPayment(_saleOrder.acceptedPaymentMode),\\n            _saleOrder.pfSaleFeeRate,\\n            _saleOrder.pfSaleFeeRateSecondary,\\n            _saleOrder.start,\\n            _saleOrder.end,\\n            _saleOrder.nonce,\\n            _saleOrder.version\\n          )\\n        );\\n    } else {\\n      revert(\\\"E_OD3_IV\\\");\\n    }\\n  }\\n\\n  /**\\n   * @dev Prepares keccak256 hash for BuyOrder\\n   *\\n   * @param _buyOrder OrderDomain.BuyOrder\\n   */\\n  function _hashBuyOrder(\\n    BuyOrder calldata _buyOrder\\n  ) internal pure returns (bytes32) {\\n    if (_buyOrder.version == 0) {\\n      // [v1]\\n      return\\n        keccak256(\\n          abi.encode(\\n            BUY_ORDER_TYPEHASH,\\n            _buyOrder.saleNonce,\\n            _buyOrder.buyer,\\n            _buyOrder.payer,\\n            _hashPayment(_buyOrder.paymentDetails),\\n            _buyOrder.validUntil\\n          )\\n        );\\n    } else if (_buyOrder.version == 1 || _buyOrder.version == 2) {\\n      // [v2] or [v3]\\n      return\\n        keccak256(\\n          abi.encode(\\n            BUY_ORDER_TYPEHASH_V2,\\n            _buyOrder.saleNonce,\\n            _buyOrder.buyer,\\n            _buyOrder.payer,\\n            _buyOrder.firstAssetBuyValue,\\n            _hashPayment(_buyOrder.paymentDetails),\\n            _buyOrder.validUntil,\\n            _buyOrder.version\\n          )\\n        );\\n    } else {\\n      revert(\\\"E_OD3_IV\\\");\\n    }\\n  }\\n\\n  // ---- EIP712 ----\\n\\n  /**\\n   * @dev Checks if it's a Secondary Sale\\n   *\\n   * @param _secondarySale uint8\\n   */\\n  function _isSecondarySale(uint8 _secondarySale) internal pure returns (bool) {\\n    return (_secondarySale == 1);\\n  }\\n\\n  /**\\n   * @dev Checks if it's a valid origin kind\\n   *\\n   * @param _originKind bytes4\\n   */\\n  function _isValidOriginKind(bytes4 _originKind) internal pure returns (bool) {\\n    return (_originKind == NANAKUSA_ORIGIN_KIND ||\\n      _originKind == PARTNER_ORIGIN_KIND);\\n  }\\n\\n  /**\\n   * @dev Checks if it's a valid payment mode\\n   *\\n   * @param _paymentMode bytes4\\n   */\\n  function _isValidPaymentMode(\\n    bytes4 _paymentMode\\n  ) internal pure returns (bool) {\\n    return (_paymentMode == NATIVE_PAYMENT_MODE ||\\n      _paymentMode == ERC20_PAYMENT_MODE ||\\n      _paymentMode == CREDIT_CARD_PAYMENT_MODE ||\\n      _paymentMode == OTHER_BLOCKCHAIN_PAYMENT_MODE);\\n  }\\n\\n  /**\\n   * @dev Checks if payment mode is onchain\\n   *\\n   * @param _paymentMode bytes4\\n   */\\n  function _isOnchainPaymentMode(\\n    bytes4 _paymentMode\\n  ) internal pure returns (bool) {\\n    return (_paymentMode == NATIVE_PAYMENT_MODE ||\\n      _paymentMode == ERC20_PAYMENT_MODE);\\n  }\\n\\n  /**\\n   * @dev Checks if origin kind is partner\\n   *\\n   * @param _originKind bytes4\\n   */\\n  function _isPartnerOrigin(bytes4 _originKind) internal pure returns (bool) {\\n    return (_originKind == PARTNER_ORIGIN_KIND);\\n  }\\n\\n  /**\\n   * @dev Find the total sale price by matching payment mode of SaleOrder and BuyOrder\\n   *\\n   * @param _saleOrder SaleOrder\\n   * @param _buyOrder BuyOrder\\n   */\\n  function _findTotalSalePrice(\\n    SaleOrder calldata _saleOrder,\\n    BuyOrder calldata _buyOrder\\n  ) internal pure returns (uint256) {\\n    uint256 totalSalePrice = 0;\\n\\n    // Find total sale price\\n    for (uint256 idx = 0; idx < _saleOrder.acceptedPaymentMode.length; idx++) {\\n      if (\\n        _saleOrder.acceptedPaymentMode[idx].paymentMode ==\\n        _buyOrder.paymentDetails.paymentMode\\n      ) {\\n        totalSalePrice = _saleOrder.acceptedPaymentMode[idx].price;\\n        break;\\n      }\\n    }\\n\\n    return totalSalePrice;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IPlatformRegistry\",\"name\":\"platformRegistry\",\"type\":\"address\"}],\"name\":\"PlatformRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IRoyaltyRegistry\",\"name\":\"royaltyRegistry\",\"type\":\"address\"}],\"name\":\"RoyaltyRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SaleSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITransferProxy\",\"name\":\"transferProxy\",\"type\":\"address\"}],\"name\":\"TransferProxyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newAdmin\",\"type\":\"address[]\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"originKind\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"partnerFeeRate\",\"type\":\"uint16\"},{\"internalType\":\"address payable\",\"name\":\"partnerFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"isSecondarySale\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"royaltyReceivers\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"royaltyDistributionRate\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"secondaryOnwardsRoyaltyPercentage\",\"type\":\"uint16\"}],\"internalType\":\"struct OrderDomainV3.Asset[]\",\"name\":\"assetList\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"paymentMode\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderDomainV3.Payment[]\",\"name\":\"acceptedPaymentMode\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"pfSaleFeeRate\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pfSaleFeeRateSecondary\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderDomainV3.SaleOrder\",\"name\":\"_saleOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_salerSign\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleNonce\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"firstAssetBuyValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"paymentMode\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderDomainV3.Payment\",\"name\":\"paymentDetails\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"internalType\":\"struct OrderDomainV3.BuyOrder\",\"name\":\"_buyOrder\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_platformSign\",\"type\":\"bytes\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_saleKey\",\"type\":\"bytes32\"}],\"name\":\"getSoldCountByKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSoldCountByNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"checkAdmin\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformRegistry\",\"outputs\":[{\"internalType\":\"contract IPlatformRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferProxy\",\"outputs\":[{\"internalType\":\"contract ITransferProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPlatformRegistry\",\"name\":\"_newPlatformRegistry\",\"type\":\"address\"}],\"name\":\"updatePlatformRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltyRegistry\",\"name\":\"_newRoyaltyRegistry\",\"type\":\"address\"}],\"name\":\"updateRoyaltyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITransferProxy\",\"name\":\"_newTransferProxy\",\"type\":\"address\"}],\"name\":\"updateTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"withdrawTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExchangeV3", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ccb6a41b93a6c326a91652ca816be6a9faeac1b9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}