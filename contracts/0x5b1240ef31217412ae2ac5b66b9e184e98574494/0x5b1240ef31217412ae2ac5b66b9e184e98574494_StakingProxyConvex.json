{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/StakingProxyConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"./interfaces/ICurveConvex.sol\\\";\\r\\nimport \\\"./interfaces/IConvexWrapperV2.sol\\\";\\r\\nimport \\\"./StakingProxyBase.sol\\\";\\r\\nimport \\\"./interfaces/IFraxFarmERC20_V2.sol\\\";\\r\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\r\\n\\r\\n\\r\\n\\r\\ncontract StakingProxyConvex is StakingProxyBase, ReentrancyGuard{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public constant poolRegistry = address(0x7413bFC877B5573E29f964d572f421554d8EDF86);\\r\\n    address public constant convexCurveBooster = address(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\r\\n    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\\r\\n    address public constant cvx = address(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\\r\\n\\r\\n    address public curveLpToken;\\r\\n    address public convexDepositToken;\\r\\n\\r\\n    constructor() {\\r\\n    }\\r\\n\\r\\n    function vaultType() external pure override returns(VaultType){\\r\\n        return VaultType.Convex;\\r\\n    }\\r\\n\\r\\n    function vaultVersion() external pure override returns(uint256){\\r\\n        return 6;\\r\\n    }\\r\\n\\r\\n    //initialize vault\\r\\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external override{\\r\\n        require(owner == address(0),\\\"already init\\\");\\r\\n\\r\\n        //set variables\\r\\n        owner = _owner;\\r\\n        stakingAddress = _stakingAddress;\\r\\n        stakingToken = _stakingToken;\\r\\n        rewards = _rewardsAddress;\\r\\n\\r\\n        //get tokens from pool info\\r\\n        (address _lptoken, address _token,,, , ) = ICurveConvex(convexCurveBooster).poolInfo(IConvexWrapperV2(_stakingToken).convexPoolId());\\r\\n    \\r\\n        curveLpToken = _lptoken;\\r\\n        convexDepositToken = _token;\\r\\n\\r\\n        //set infinite approvals\\r\\n        IERC20(_stakingToken).approve(_stakingAddress, type(uint256).max);\\r\\n        IERC20(_lptoken).approve(_stakingToken, type(uint256).max);\\r\\n        IERC20(_token).approve(_stakingToken, type(uint256).max);\\r\\n    }\\r\\n\\r\\n\\r\\n    //create a new locked state of _secs timelength with a Curve LP token\\r\\n    function stakeLockedCurveLp(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\\r\\n        if(_liquidity > 0){\\r\\n            //pull tokens from user\\r\\n            IERC20(curveLpToken).safeTransferFrom(msg.sender, address(this), _liquidity);\\r\\n\\r\\n            //deposit into wrapper\\r\\n            IConvexWrapperV2(stakingToken).deposit(_liquidity, address(this));\\r\\n\\r\\n            //stake\\r\\n            kek_id = IFraxFarmERC20_V2(stakingAddress).stakeLocked(_liquidity, _secs);\\r\\n        }\\r\\n        \\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //create a new locked state of _secs timelength with a Convex deposit token\\r\\n    function stakeLockedConvexToken(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\\r\\n        if(_liquidity > 0){\\r\\n            //pull tokens from user\\r\\n            IERC20(convexDepositToken).safeTransferFrom(msg.sender, address(this), _liquidity);\\r\\n\\r\\n            //stake into wrapper\\r\\n            IConvexWrapperV2(stakingToken).stake(_liquidity, address(this));\\r\\n\\r\\n            //stake into frax\\r\\n            kek_id = IFraxFarmERC20_V2(stakingAddress).stakeLocked(_liquidity, _secs);\\r\\n        }\\r\\n        \\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //create a new locked state of _secs timelength\\r\\n    function stakeLocked(uint256 _liquidity, uint256 _secs) external onlyOwner nonReentrant returns (bytes32 kek_id){\\r\\n        if(_liquidity > 0){\\r\\n            //pull tokens from user\\r\\n            IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _liquidity);\\r\\n\\r\\n            //stake\\r\\n            kek_id = IFraxFarmERC20_V2(stakingAddress).stakeLocked(_liquidity, _secs);\\r\\n        }\\r\\n        \\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //add to a current lock\\r\\n    function lockAdditional(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\\r\\n        if(_addl_liq > 0){\\r\\n            //pull tokens from user\\r\\n            IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\\r\\n\\r\\n            //add stake\\r\\n            IFraxFarmERC20_V2(stakingAddress).lockAdditional(_kek_id, _addl_liq);\\r\\n        }\\r\\n        \\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //add to a current lock\\r\\n    function lockAdditionalCurveLp(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\\r\\n        if(_addl_liq > 0){\\r\\n            //pull tokens from user\\r\\n            IERC20(curveLpToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\\r\\n\\r\\n            //deposit into wrapper\\r\\n            IConvexWrapperV2(stakingToken).deposit(_addl_liq, address(this));\\r\\n\\r\\n            //add stake\\r\\n            IFraxFarmERC20_V2(stakingAddress).lockAdditional(_kek_id, _addl_liq);\\r\\n        }\\r\\n        \\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //add to a current lock\\r\\n    function lockAdditionalConvexToken(bytes32 _kek_id, uint256 _addl_liq) external onlyOwner nonReentrant{\\r\\n        if(_addl_liq > 0){\\r\\n            //pull tokens from user\\r\\n            IERC20(convexDepositToken).safeTransferFrom(msg.sender, address(this), _addl_liq);\\r\\n\\r\\n            //stake into wrapper\\r\\n            IConvexWrapperV2(stakingToken).stake(_addl_liq, address(this));\\r\\n\\r\\n            //add stake\\r\\n            IFraxFarmERC20_V2(stakingAddress).lockAdditional(_kek_id, _addl_liq);\\r\\n        }\\r\\n        \\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    // Extends the lock of an existing stake\\r\\n    function lockLonger(bytes32 _kek_id, uint256 new_ending_ts) external onlyOwner nonReentrant{\\r\\n        //update time\\r\\n        IFraxFarmERC20_V2(stakingAddress).lockLonger(_kek_id, new_ending_ts);\\r\\n\\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //withdraw a staked position\\r\\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\\r\\n    function withdrawLocked(bytes32 _kek_id) external onlyOwner nonReentrant{        \\r\\n        //withdraw directly to owner(msg.sender)\\r\\n        IFraxFarmERC20_V2(stakingAddress).withdrawLocked(_kek_id, msg.sender, false);\\r\\n\\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //withdraw a staked position\\r\\n    //frax farm transfers first before updating farm state so will checkpoint during transfer\\r\\n    function withdrawLockedAndUnwrap(bytes32 _kek_id) external onlyOwner nonReentrant{\\r\\n        //withdraw\\r\\n        IFraxFarmERC20_V2(stakingAddress).withdrawLocked(_kek_id, address(this), false);\\r\\n\\r\\n        //unwrap\\r\\n        IConvexWrapperV2(stakingToken).withdrawAndUnwrap(IERC20(stakingToken).balanceOf(address(this)));\\r\\n        IERC20(curveLpToken).transfer(owner,IERC20(curveLpToken).balanceOf(address(this)));\\r\\n\\r\\n        //checkpoint rewards\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //helper function to combine earned tokens on staking contract and any tokens that are on this vault\\r\\n    function earned() external override returns (address[] memory token_addresses, uint256[] memory total_earned) {\\r\\n        //get list of reward tokens\\r\\n        address[] memory rewardTokens = IFraxFarmERC20_V2(stakingAddress).getAllRewardTokens();\\r\\n        uint256[] memory stakedearned = IFraxFarmERC20_V2(stakingAddress).earned(address(this));\\r\\n        IConvexWrapperV2.EarnedData[] memory convexrewards = IConvexWrapperV2(stakingToken).earned(address(this));\\r\\n        uint256 convexExtraRewards = convexrewards.length - 2; //ignore crv and cvx which are guaranteed to be slots 0 and 1\\r\\n\\r\\n        uint256 extraRewardsLength = IRewards(rewards).rewardTokenLength();\\r\\n        token_addresses = new address[](rewardTokens.length + extraRewardsLength + convexExtraRewards);\\r\\n        total_earned = new uint256[](rewardTokens.length + extraRewardsLength + convexExtraRewards);\\r\\n\\r\\n        //add any tokens that happen to be already claimed but sitting on the vault\\r\\n        //(ex. withdraw claiming rewards)\\r\\n        for(uint256 i = 0; i < rewardTokens.length; i++){\\r\\n            token_addresses[i] = rewardTokens[i];\\r\\n            total_earned[i] = stakedearned[i] + IERC20(rewardTokens[i]).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        IRewards.EarnedData[] memory extraRewards = IRewards(rewards).claimableRewards(address(this));\\r\\n        for(uint256 i = 0; i < extraRewards.length; i++){\\r\\n            token_addresses[i+rewardTokens.length] = extraRewards[i].token;\\r\\n            total_earned[i+rewardTokens.length] = extraRewards[i].amount;\\r\\n        }\\r\\n\\r\\n        //add convex farm earned tokens (new farms get crv/cvx distributed through the farm so start from index 2)\\r\\n        for(uint256 i = 0; i < convexExtraRewards; i++){\\r\\n            token_addresses[i+rewardTokens.length+extraRewardsLength] = convexrewards[i+2].token; //offset to skip crv/cvx\\r\\n            total_earned[i+rewardTokens.length+extraRewardsLength] = convexrewards[i+2].amount; //offset to skip crv/cvx\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    claim flow:\\r\\n        claim rewards directly to the vault\\r\\n        calculate fees to send to fee deposit\\r\\n        send fxs to a holder contract for fees\\r\\n        get reward list of tokens that were received\\r\\n        send all remaining tokens to owner\\r\\n\\r\\n    A slightly less gas intensive approach could be to send rewards directly to a holder contract and have it sort everything out.\\r\\n    However that makes the logic a bit more complex as well as runs a few future proofing risks\\r\\n    */\\r\\n    function getReward() external override{\\r\\n        getReward(true);\\r\\n    }\\r\\n\\r\\n    //get reward with claim option.\\r\\n    //_claim bool is for the off chance that rewardCollectionPause is true so getReward() fails but\\r\\n    //there are tokens on this vault for cases such as withdraw() also calling claim.\\r\\n    //can also be used to rescue tokens on the vault\\r\\n    function getReward(bool _claim) public override{\\r\\n\\r\\n        //claim\\r\\n        if(_claim){\\r\\n            //claim frax farm\\r\\n            IFraxFarmERC20_V2(stakingAddress).getReward(address(this));\\r\\n            //claim convex farm and forward to owner\\r\\n            IConvexWrapperV2(stakingToken).getReward(address(this),owner);\\r\\n\\r\\n            //double check there have been no crv/cvx claims directly to this address\\r\\n            uint256 b = IERC20(crv).balanceOf(address(this));\\r\\n            if(b > 0){\\r\\n                IERC20(crv).safeTransfer(owner, b);\\r\\n            }\\r\\n            b = IERC20(cvx).balanceOf(address(this));\\r\\n            if(b > 0){\\r\\n                IERC20(cvx).safeTransfer(owner, b);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        //process fxs fees\\r\\n        _processFxs();\\r\\n\\r\\n        //get list of reward tokens\\r\\n        address[] memory rewardTokens = IFraxFarmERC20_V2(stakingAddress).getAllRewardTokens();\\r\\n\\r\\n        //transfer\\r\\n        _transferTokens(rewardTokens);\\r\\n\\r\\n        //extra rewards\\r\\n        _processExtraRewards();\\r\\n    }\\r\\n\\r\\n    //auxiliary function to supply token list(save a bit of gas + dont have to claim everything)\\r\\n    //_claim bool is for the off chance that rewardCollectionPause is true so getReward() fails but\\r\\n    //there are tokens on this vault for cases such as withdraw() also calling claim.\\r\\n    //can also be used to rescue tokens on the vault\\r\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external override{\\r\\n\\r\\n        //claim\\r\\n        if(_claim){\\r\\n            //claim frax farm\\r\\n            IFraxFarmERC20_V2(stakingAddress).getReward(address(this));\\r\\n            //claim convex farm and forward to owner\\r\\n            IConvexWrapperV2(stakingToken).getReward(address(this),owner);\\r\\n        }\\r\\n\\r\\n        //process fxs fees\\r\\n        _processFxs();\\r\\n\\r\\n        //transfer\\r\\n        _transferTokens(_rewardTokenList);\\r\\n\\r\\n        //extra rewards\\r\\n        _processExtraRewards();\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IRewards{\\r\\n    struct EarnedData {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n    \\r\\n    function initialize(uint256 _pid, bool _startActive) external;\\r\\n    function addReward(address _rewardsToken, address _distributor) external;\\r\\n    function approveRewardDistributor(\\r\\n        address _rewardsToken,\\r\\n        address _distributor,\\r\\n        bool _approved\\r\\n    ) external;\\r\\n    function deposit(address _owner, uint256 _amount) external;\\r\\n    function withdraw(address _owner, uint256 _amount) external;\\r\\n    function getReward(address _forward) external;\\r\\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external;\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards);\\r\\n    function rewardTokens(uint256 _rid) external view returns (address);\\r\\n    function rewardTokenLength() external view returns(uint256);\\r\\n    function active() external view returns(bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IProxyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IProxyVault {\\r\\n\\r\\n    enum VaultType{\\r\\n        Erc20Basic,\\r\\n        UniV3,\\r\\n        Convex,\\r\\n        Erc20Joint\\r\\n    }\\r\\n\\r\\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external;\\r\\n    function usingProxy() external returns(address);\\r\\n    function owner() external returns(address);\\r\\n    function stakingAddress() external returns(address);\\r\\n    function rewards() external returns(address);\\r\\n    function getReward() external;\\r\\n    function getReward(bool _claim) external;\\r\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external;\\r\\n    function earned() external returns (address[] memory token_addresses, uint256[] memory total_earned);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFraxFarmERC20_V2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IFraxFarmERC20_V2 {\\r\\n    \\r\\n    struct LockedStake {\\r\\n        bytes32 kek_id;\\r\\n        uint256 start_timestamp;\\r\\n        uint256 liquidity;\\r\\n        uint256 ending_timestamp;\\r\\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\\r\\n    }\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n    function stakingToken() external view returns (address);\\r\\n    function fraxPerLPToken() external view returns (uint256);\\r\\n    function calcCurCombinedWeight(address account) external view\\r\\n        returns (\\r\\n            uint256 old_combined_weight,\\r\\n            uint256 new_vefxs_multiplier,\\r\\n            uint256 new_combined_weight\\r\\n        );\\r\\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory);\\r\\n    function lockedStakesOfLength(address account) external view returns (uint256);\\r\\n    function lockAdditional(bytes32 kek_id, uint256 addl_liq) external;\\r\\n    function lockLonger(bytes32 kek_id, uint256 new_ending_ts) external;\\r\\n    function stakeLocked(uint256 liquidity, uint256 secs) external returns (bytes32);\\r\\n    function withdrawLocked(bytes32 kek_id, address destination_address, bool _claim) external returns (uint256);\\r\\n\\r\\n\\r\\n\\r\\n    function periodFinish() external view returns (uint256);\\r\\n    function lastUpdateTime() external view returns (uint256);\\r\\n    function rewardsDuration() external view returns (uint256);\\r\\n    function rewardsPerToken() external view returns (uint256[] memory newRewardsPerTokenStored);\\r\\n    function getAllRewardTokens() external view returns (address[] memory);\\r\\n    function earned(address account) external view returns (uint256[] memory new_earned);\\r\\n    function totalLiquidityLocked() external view returns (uint256);\\r\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\r\\n    function totalCombinedWeight() external view returns (uint256);\\r\\n    function combinedWeightOf(address account) external view returns (uint256);\\r\\n    function lockMultiplier(uint256 secs) external view returns (uint256);\\r\\n    function rewardRates(uint256 token_idx) external view returns (uint256 rwd_rate);\\r\\n\\r\\n    function userStakedFrax(address account) external view returns (uint256);\\r\\n    function proxyStakedFrax(address proxy_address) external view returns (uint256);\\r\\n    function maxLPForMaxBoost(address account) external view returns (uint256);\\r\\n    function minVeFXSForMaxBoost(address account) external view returns (uint256);\\r\\n    function minVeFXSForMaxBoostProxy(address proxy_address) external view returns (uint256);\\r\\n    function veFXSMultiplier(address account) external view returns (uint256 vefxs_multiplier);\\r\\n\\r\\n    function toggleValidVeFXSProxy(address proxy_address) external;\\r\\n    function proxyToggleStaker(address staker_address) external;\\r\\n    function stakerSetVeFXSProxy(address proxy_address) external;\\r\\n    function getReward(address destination_address) external returns (uint256[] memory);\\r\\n    function vefxs_max_multiplier() external view returns(uint256);\\r\\n    function vefxs_boost_scale_factor() external view returns(uint256);\\r\\n    function vefxs_per_frax_for_max_boost() external view returns(uint256);\\r\\n    function getProxyFor(address addr) external view returns (address);\\r\\n\\r\\n    function sync() external;\\r\\n    function setRewardVars(address reward_token_address, uint256 _new_rate, address _gauge_controller_address, address _rewards_distributor_address) external;\\r\\n    function changeTokenManager(address reward_token_address, address new_manager_address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFraxFarmBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IFraxFarmBase{\\r\\n\\r\\n    function totalLiquidityLocked() external view returns (uint256);\\r\\n    function lockedLiquidityOf(address account) external view returns (uint256);\\r\\n\\r\\n    function toggleValidVeFXSProxy(address proxy_address) external;\\r\\n    function proxyToggleStaker(address staker_address) external;\\r\\n    function stakerSetVeFXSProxy(address proxy_address) external;\\r\\n    function getReward(address destination_address) external returns (uint256[] memory);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IFeeRegistry{\\r\\n    function cvxfxsIncentive() external view returns(uint256);\\r\\n    function cvxIncentive() external view returns(uint256);\\r\\n    function platformIncentive() external view returns(uint256);\\r\\n    function totalFees() external view returns(uint256);\\r\\n    function maxFees() external view returns(uint256);\\r\\n    function feeDeposit() external view returns(address);\\r\\n    function getFeeDepositor(address _from) external view returns(address);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/ICurveConvex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface ICurveConvex {\\r\\n   function earmarkRewards(uint256 _pid) external returns(bool);\\r\\n   function earmarkFees() external returns(bool);\\r\\n   function poolInfo(uint256 _pid) external returns(address _lptoken, address _token, address _gauge, address _crvRewards, address _stash, bool _shutdown);\\r\\n   function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\r\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IConvexWrapperV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\ninterface IConvexWrapperV2{\\r\\n\\r\\n   struct EarnedData {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n   struct RewardType {\\r\\n        address reward_token;\\r\\n        address reward_pool;\\r\\n        uint128 reward_integral;\\r\\n        uint128 reward_remaining;\\r\\n    }\\r\\n\\r\\n  function distroContract() external view returns(address distro);\\r\\n  function collateralVault() external view returns(address vault);\\r\\n  function convexPoolId() external view returns(uint256 _poolId);\\r\\n  function curveToken() external view returns(address);\\r\\n  function convexToken() external view returns(address);\\r\\n  function rewardRedirect(address _account) external view returns(address);\\r\\n  function balanceOf(address _account) external view returns(uint256);\\r\\n  function totalBalanceOf(address _account) external view returns(uint256);\\r\\n  function deposit(uint256 _amount, address _to) external;\\r\\n  function stake(uint256 _amount, address _to) external;\\r\\n  function withdraw(uint256 _amount) external;\\r\\n  function withdrawAndUnwrap(uint256 _amount) external;\\r\\n  function getReward(address _account) external;\\r\\n  function getReward(address _account, address _forwardTo) external;\\r\\n  function rewardLength() external view returns(uint256);\\r\\n  function rewards(uint256 _index) external view returns(RewardType memory rewardInfo);\\r\\n  function earned(address _account) external returns(EarnedData[] memory claimable);\\r\\n  function earnedView(address _account) external view returns(EarnedData[] memory claimable);\\r\\n  function setVault(address _vault) external;\\r\\n  function user_checkpoint(address _account) external returns(bool);\\r\\n  function setDistributor(address _vault, address _distro) external;\\r\\n  function sealDistributor() external;\\r\\n}\"\r\n    },\r\n    \"/contracts/StakingProxyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.10;\\r\\n\\r\\nimport \\\"./interfaces/IProxyVault.sol\\\";\\r\\nimport \\\"./interfaces/IFeeRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IFraxFarmBase.sol\\\";\\r\\nimport \\\"./interfaces/IRewards.sol\\\";\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\r\\n\\r\\n\\r\\ncontract StakingProxyBase is IProxyVault{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public constant fxs = address(0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0);\\r\\n    address public constant vefxsProxy = address(0x59CFCD384746ec3035299D90782Be065e466800B);\\r\\n    address public constant feeRegistry = address(0xC9aCB83ADa68413a6Aa57007BC720EE2E2b3C46D); //fee registry\\r\\n\\r\\n    address public owner; //owner of the vault\\r\\n    address public stakingAddress; //farming contract\\r\\n    address public stakingToken; //farming token\\r\\n    address public rewards; //extra rewards on convex\\r\\n    address public usingProxy; //address of proxy being used\\r\\n\\r\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\r\\n\\r\\n    constructor() {\\r\\n    }\\r\\n\\r\\n    function vaultType() external virtual pure returns(VaultType){\\r\\n        return VaultType.Erc20Basic;\\r\\n    }\\r\\n\\r\\n    function vaultVersion() external virtual pure returns(uint256){\\r\\n        return 1;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"!auth\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(vefxsProxy == msg.sender, \\\"!auth_admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //initialize vault\\r\\n    function initialize(address _owner, address _stakingAddress, address _stakingToken, address _rewardsAddress) external virtual{\\r\\n\\r\\n    }\\r\\n\\r\\n    function changeRewards(address _rewardsAddress) external onlyAdmin{\\r\\n        \\r\\n        //remove from old rewards and claim\\r\\n        if(IRewards(rewards).active()){\\r\\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\\r\\n            if(bal > 0){\\r\\n                IRewards(rewards).withdraw(owner, bal);\\r\\n            }\\r\\n            IRewards(rewards).getReward(owner);\\r\\n        }\\r\\n\\r\\n        //set to new rewards\\r\\n        rewards = _rewardsAddress;\\r\\n\\r\\n        //update balance\\r\\n        _checkpointRewards();\\r\\n    }\\r\\n\\r\\n    //checkpoint weight on farm by calling getReward as its the lowest cost thing to do.\\r\\n    function checkpointRewards() external onlyAdmin{\\r\\n        //checkpoint the frax farm\\r\\n        _checkpointFarm();\\r\\n    }\\r\\n\\r\\n    function _checkpointFarm() internal{\\r\\n        //claim rewards to local vault as a means to checkpoint\\r\\n        IFraxFarmBase(stakingAddress).getReward(address(this));\\r\\n    }\\r\\n\\r\\n    function setVeFXSProxy(address _proxy) external virtual onlyAdmin{\\r\\n        //set the vefxs proxy\\r\\n        _setVeFXSProxy(_proxy);\\r\\n    }\\r\\n\\r\\n    function _setVeFXSProxy(address _proxyAddress) internal{\\r\\n        //set proxy address on staking contract\\r\\n        IFraxFarmBase(stakingAddress).stakerSetVeFXSProxy(_proxyAddress);\\r\\n        usingProxy = _proxyAddress;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getReward() external virtual{}\\r\\n    function getReward(bool _claim) external virtual{}\\r\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external virtual{}\\r\\n    function earned() external virtual returns (address[] memory token_addresses, uint256[] memory total_earned){}\\r\\n\\r\\n\\r\\n    //checkpoint and add/remove weight to convex rewards contract\\r\\n    function _checkpointRewards() internal{\\r\\n        //if rewards are active, checkpoint\\r\\n        if(IRewards(rewards).active()){\\r\\n            //using liquidity shares from staking contract will handle rebasing tokens correctly\\r\\n            uint256 userLiq = IFraxFarmBase(stakingAddress).lockedLiquidityOf(address(this));\\r\\n            //get current balance of reward contract\\r\\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\\r\\n            if(userLiq >= bal){\\r\\n                //add the difference to reward contract\\r\\n                IRewards(rewards).deposit(owner, userLiq - bal);\\r\\n            }else{\\r\\n                //remove the difference from the reward contract\\r\\n                IRewards(rewards).withdraw(owner, bal - userLiq);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //apply fees to fxs and send remaining to owner\\r\\n    function _processFxs() internal{\\r\\n\\r\\n        //get fee rate from fee registry\\r\\n        uint256 totalFees = IFeeRegistry(feeRegistry).totalFees();\\r\\n\\r\\n        //send fxs fees to fee deposit\\r\\n        uint256 fxsBalance = IERC20(fxs).balanceOf(address(this));\\r\\n        uint256 sendAmount = fxsBalance * totalFees / FEE_DENOMINATOR;\\r\\n        if(sendAmount > 0){\\r\\n            IERC20(fxs).transfer(IFeeRegistry(feeRegistry).getFeeDepositor(usingProxy), sendAmount);\\r\\n        }\\r\\n\\r\\n        //transfer remaining fxs to owner\\r\\n        sendAmount = IERC20(fxs).balanceOf(address(this));\\r\\n        if(sendAmount > 0){\\r\\n            IERC20(fxs).transfer(owner, sendAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //get extra rewards\\r\\n    function _processExtraRewards() internal{\\r\\n        if(IRewards(rewards).active()){\\r\\n            //check if there is a balance because the reward contract could have be activated later\\r\\n            //dont use _checkpointRewards since difference of 0 will still call deposit() and cost gas\\r\\n            uint256 bal = IRewards(rewards).balanceOf(address(this));\\r\\n            uint256 userLiq = IFraxFarmBase(stakingAddress).lockedLiquidityOf(address(this));\\r\\n            if(bal == 0 && userLiq > 0){\\r\\n                //bal == 0 and liq > 0 can only happen if rewards were turned on after staking\\r\\n                IRewards(rewards).deposit(owner,userLiq);\\r\\n            }\\r\\n            IRewards(rewards).getReward(owner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //transfer other reward tokens besides fxs(which needs to have fees applied)\\r\\n    function _transferTokens(address[] memory _tokens) internal{\\r\\n        //transfer all tokens\\r\\n        for(uint256 i = 0; i < _tokens.length; i++){\\r\\n            if(_tokens[i] != fxs){\\r\\n                uint256 bal = IERC20(_tokens[i]).balanceOf(address(this));\\r\\n                if(bal > 0){\\r\\n                    IERC20(_tokens[i]).safeTransfer(owner, bal);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"changeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexCurveBooster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexDepositToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"token_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"total_earned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenList\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditional\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditionalConvexToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_addl_liq\",\"type\":\"uint256\"}],\"name\":\"lockAdditionalCurveLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"new_ending_ts\",\"type\":\"uint256\"}],\"name\":\"lockLonger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setVeFXSProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLockedConvexToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secs\",\"type\":\"uint256\"}],\"name\":\"stakeLockedCurveLp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultType\",\"outputs\":[{\"internalType\":\"enum IProxyVault.VaultType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxsProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLockedAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingProxyConvex", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}