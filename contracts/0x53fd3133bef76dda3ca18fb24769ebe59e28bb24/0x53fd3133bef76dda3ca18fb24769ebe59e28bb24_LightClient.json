{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/LightClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport {IFunctionGateway} from \\\"succinctx/interfaces/IFunctionGateway.sol\\\";\\nimport {OutputReader} from \\\"./OutputReader.sol\\\";\\n\\ncontract LightClient {\\n    bytes32 public immutable GENESIS_VALIDATORS_ROOT;\\n    uint256 public immutable GENESIS_TIME;\\n    uint256 public immutable SECONDS_PER_SLOT;\\n    uint256 public immutable SLOTS_PER_PERIOD;\\n    uint32 public immutable SOURCE_CHAIN_ID;\\n    uint16 public immutable FINALITY_THRESHOLD;\\n    bytes32 public immutable STEP_FUNCTION_ID;\\n    bytes32 public immutable ROTATE_FUNCTION_ID;\\n    address public immutable FUNCTION_GATEWAY_ADDRESS;\\n\\n    uint256 internal constant MIN_SYNC_COMMITTEE_PARTICIPANTS = 10;\\n    uint256 internal constant SYNC_COMMITTEE_SIZE = 512;\\n    uint256 internal constant FINALIZED_ROOT_INDEX = 105;\\n    uint256 internal constant NEXT_SYNC_COMMITTEE_INDEX = 55;\\n    uint256 internal constant EXECUTION_STATE_ROOT_INDEX = 402;\\n\\n    /// @notice The latest slot the light client has a finalized header for.\\n    uint256 public head = 0;\\n\\n    /// @notice Maps from a slot to a beacon block header root.\\n    mapping(uint256 => bytes32) public headers;\\n\\n    /// @notice Maps from a slot to the timestamp of when the headers mapping was updated with slot as a key\\n    mapping(uint256 => uint256) public timestamps;\\n\\n    /// @notice Maps from a slot to the current finalized ethereum1 execution state root.\\n    mapping(uint256 => bytes32) public executionStateRoots;\\n\\n    /// @notice Maps from a period to the poseidon commitment for the sync committee.\\n    mapping(uint256 => bytes32) public syncCommitteePoseidons;\\n\\n    event HeadUpdate(uint256 indexed slot, bytes32 indexed root);\\n    event SyncCommitteeUpdate(uint256 indexed period, bytes32 indexed root);\\n\\n    error SyncCommitteeNotSet(uint256 period);\\n    error HeaderRootNotSet(uint256 slot);\\n    error SlotBehindHead(uint64 slot);\\n    error NotEnoughParticipation(uint16 participation);\\n    error SyncCommitteeAlreadySet(uint256 period);\\n    error HeaderRootAlreadySet(uint256 slot);\\n    error StateRootAlreadySet(uint256 slot);\\n\\n    constructor(\\n        bytes32 genesisValidatorsRoot,\\n        uint256 genesisTime,\\n        uint256 secondsPerSlot,\\n        uint256 slotsPerPeriod,\\n        uint256 syncCommitteePeriod,\\n        bytes32 syncCommitteePoseidon,\\n        uint32 sourceChainId,\\n        uint16 finalityThreshold,\\n        bytes32 stepFunctionId,\\n        bytes32 rotateFunctionId,\\n        address gatewayAddress\\n    ) {\\n        GENESIS_VALIDATORS_ROOT = genesisValidatorsRoot;\\n        GENESIS_TIME = genesisTime;\\n        SECONDS_PER_SLOT = secondsPerSlot;\\n        SLOTS_PER_PERIOD = slotsPerPeriod;\\n        SOURCE_CHAIN_ID = sourceChainId;\\n        FINALITY_THRESHOLD = finalityThreshold;\\n        STEP_FUNCTION_ID = stepFunctionId;\\n        ROTATE_FUNCTION_ID = rotateFunctionId;\\n        FUNCTION_GATEWAY_ADDRESS = gatewayAddress;\\n\\n        setSyncCommitteePoseidon(syncCommitteePeriod, syncCommitteePoseidon);\\n    }\\n\\n    /// @notice Through the FunctionGateway, request for a step proof to be generated with the given attested slot number as the input.\\n    function requestStep(uint256 attestedSlot) external payable {\\n        IFunctionGateway(FUNCTION_GATEWAY_ADDRESS).requestCall{value: msg.value}(\\n            STEP_FUNCTION_ID,\\n            abi.encodePacked(\\n                syncCommitteePoseidons[getSyncCommitteePeriod(attestedSlot)], uint64(attestedSlot)\\n            ),\\n            address(this),\\n            abi.encodeWithSelector(this.step.selector, attestedSlot),\\n            1000000\\n        );\\n    }\\n\\n    /// @notice Through the FunctionGateway, request for a rotate proof to be generated with the given finalized slot number as the input.\\n    function requestRotate(uint256 finalizedSlot) external payable {\\n        IFunctionGateway(FUNCTION_GATEWAY_ADDRESS).requestCall{value: msg.value}(\\n            ROTATE_FUNCTION_ID,\\n            abi.encodePacked(headers[finalizedSlot]),\\n            address(this),\\n            abi.encodeWithSelector(this.rotate.selector, finalizedSlot),\\n            1000000\\n        );\\n    }\\n\\n    /// @notice Process a step proof that has been verified in the FunctionGateway, then move the head forward and store the new roots.\\n    function step(uint256 attestedSlot) external {\\n        uint256 period = getSyncCommitteePeriod(attestedSlot);\\n        bytes32 syncCommitteePoseidon = syncCommitteePoseidons[period];\\n        if (syncCommitteePoseidon == bytes32(0)) {\\n            revert SyncCommitteeNotSet(period);\\n        }\\n\\n        // Input: [uint256 syncCommitteePoseidon, uint64 attestedSlot]\\n        // Output: [bytes32 finalizedHeaderRoot, bytes32 executionStateRoot, uint64 finalizedSlot, uint16 participation]\\n        bytes memory output = IFunctionGateway(FUNCTION_GATEWAY_ADDRESS).verifiedCall(\\n            STEP_FUNCTION_ID, abi.encodePacked(syncCommitteePoseidon, uint64(attestedSlot))\\n        );\\n        bytes32 finalizedHeaderRoot = bytes32(OutputReader.readUint256(output, 0));\\n        bytes32 executionStateRoot = bytes32(OutputReader.readUint256(output, 32));\\n        uint64 finalizedSlot = OutputReader.readUint64(output, 64);\\n        uint16 participation = OutputReader.readUint16(output, 72);\\n\\n        if (participation < FINALITY_THRESHOLD) {\\n            revert NotEnoughParticipation(participation);\\n        }\\n\\n        if (finalizedSlot <= head) {\\n            revert SlotBehindHead(finalizedSlot);\\n        }\\n\\n        setSlotRoots(uint256(finalizedSlot), finalizedHeaderRoot, executionStateRoot);\\n    }\\n\\n    /// @notice Process a rotate proof that has been verified in the FunctionGateway, then store the next sync committee poseidon.\\n    function rotate(uint256 finalizedSlot) external {\\n        bytes32 finalizedHeaderRoot = headers[finalizedSlot];\\n        if (finalizedHeaderRoot == bytes32(0)) {\\n            revert HeaderRootNotSet(finalizedSlot);\\n        }\\n\\n        // Input: [bytes32 finalizedHeaderRoot]\\n        // Output: [bytes32 syncCommitteePoseidon]\\n        bytes memory output = IFunctionGateway(FUNCTION_GATEWAY_ADDRESS).verifiedCall(\\n            ROTATE_FUNCTION_ID, abi.encodePacked(finalizedHeaderRoot)\\n        );\\n        bytes32 syncCommitteePoseidon = bytes32(OutputReader.readUint256(output, 0));\\n\\n        uint256 period = getSyncCommitteePeriod(finalizedSlot);\\n        uint256 nextPeriod = period + 1;\\n        setSyncCommitteePoseidon(nextPeriod, syncCommitteePoseidon);\\n    }\\n\\n    /// @notice Gets the sync committee period from a slot.\\n    function getSyncCommitteePeriod(uint256 slot) internal view returns (uint256) {\\n        return slot / SLOTS_PER_PERIOD;\\n    }\\n\\n    /// @notice Gets the current slot for the chain the light client is reflecting.\\n    function getCurrentSlot() internal view returns (uint256) {\\n        return (block.timestamp - GENESIS_TIME) / SECONDS_PER_SLOT;\\n    }\\n\\n    /// @notice Sets the current slot for the chain the light client is reflecting.\\n    /// @dev Checks if roots exists for the slot already. If there is, check for a conflict between\\n    ///      the given roots and the existing roots. If there is an existing header but no\\n    ///      conflict, do nothing. This avoids timestamp renewal DoS attacks.\\n    function setSlotRoots(uint256 slot, bytes32 finalizedHeaderRoot, bytes32 executionStateRoot)\\n        internal\\n    {\\n        if (headers[slot] != bytes32(0)) {\\n            revert HeaderRootAlreadySet(slot);\\n        }\\n        if (executionStateRoots[slot] != bytes32(0)) {\\n            revert StateRootAlreadySet(slot);\\n        }\\n        head = slot;\\n        headers[slot] = finalizedHeaderRoot;\\n        executionStateRoots[slot] = executionStateRoot;\\n        timestamps[slot] = block.timestamp;\\n        emit HeadUpdate(slot, finalizedHeaderRoot);\\n    }\\n\\n    /// @notice Sets the sync committee poseidon for a given period.\\n    function setSyncCommitteePoseidon(uint256 period, bytes32 poseidon) internal {\\n        if (syncCommitteePoseidons[period] != bytes32(0)) {\\n            revert SyncCommitteeAlreadySet(period);\\n        }\\n        syncCommitteePoseidons[period] = poseidon;\\n        emit SyncCommitteeUpdate(period, poseidon);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/succinctx/contracts/src/interfaces/IFunctionGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFunctionGatewayEvents {\\n    event RequestCallback(\\n        uint32 indexed nonce,\\n        bytes32 indexed functionId,\\n        bytes input,\\n        bytes context,\\n        address callbackAddress,\\n        bytes4 callbackSelector,\\n        uint32 callbackGasLimit,\\n        uint256 feeAmount\\n    );\\n    event RequestCall(\\n        bytes32 indexed functionId,\\n        bytes input,\\n        address entryAddress,\\n        bytes entryCalldata,\\n        uint32 entryGasLimit,\\n        address sender,\\n        uint256 feeAmount\\n    );\\n    event RequestFulfilled(\\n        uint32 indexed nonce, bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash\\n    );\\n    event Call(bytes32 indexed functionId, bytes32 inputHash, bytes32 outputHash);\\n}\\n\\ninterface IFunctionGatewayErrors {\\n    error InvalidRequest(uint32 nonce, bytes32 expectedRequestHash, bytes32 requestHash);\\n    error CallbackFailed(bytes4 callbackSelector, bytes output, bytes context);\\n    error InvalidCall(bytes32 functionId, bytes input);\\n    error CallFailed(address callbackAddress, bytes callbackData);\\n    error InvalidProof(address verifier, bytes32 inputHash, bytes32 outputHash, bytes proof);\\n}\\n\\ninterface IFunctionGateway is IFunctionGatewayEvents, IFunctionGatewayErrors {\\n    function requestCallback(\\n        bytes32 _functionId,\\n        bytes memory _input,\\n        bytes memory _context,\\n        bytes4 _callbackSelector,\\n        uint32 _callbackGasLimit\\n    ) external payable returns (bytes32);\\n\\n    function requestCall(\\n        bytes32 _functionId,\\n        bytes memory _input,\\n        address _entryAddress,\\n        bytes memory _entryData,\\n        uint32 _entryGasLimit\\n    ) external payable;\\n\\n    function verifiedCall(bytes32 _functionId, bytes memory _input)\\n        external\\n        view\\n        returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/OutputReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nlibrary OutputReader {\\n    function readUint256(bytes memory _output, uint256 _offset) internal pure returns (uint256) {\\n        uint256 value;\\n        assembly {\\n            value := mload(add(add(_output, 0x20), _offset))\\n        }\\n        return value;\\n    }\\n\\n    function readUint128(bytes memory _output, uint256 _offset) internal pure returns (uint128) {\\n        uint128 value;\\n        assembly {\\n            value := mload(add(add(_output, 0x10), _offset))\\n        }\\n        return value;\\n    }\\n\\n    function readUint64(bytes memory _output, uint256 _offset) internal pure returns (uint64) {\\n        uint64 value;\\n        assembly {\\n            value := mload(add(add(_output, 0x08), _offset))\\n        }\\n        return value;\\n    }\\n\\n    function readUint32(bytes memory _output, uint256 _offset) internal pure returns (uint32) {\\n        uint32 value;\\n        assembly {\\n            value := mload(add(add(_output, 0x04), _offset))\\n        }\\n        return value;\\n    }\\n\\n    function readUint16(bytes memory _output, uint256 _offset) internal pure returns (uint16) {\\n        uint16 value;\\n        assembly {\\n            value := mload(add(add(_output, 0x02), _offset))\\n        }\\n        return value;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/succinctx/contracts/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/succinctx/contracts/lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/succinctx/contracts/lib/openzeppelin-contracts/\",\r\n      \"safe-contracts/=lib/succinctx/contracts/lib/safe-contracts/\",\r\n      \"succinctx/=lib/succinctx/contracts/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"genesisValidatorsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"genesisTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsPerSlot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slotsPerPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"syncCommitteePeriod\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteePoseidon\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"sourceChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"finalityThreshold\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"stepFunctionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rotateFunctionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"gatewayAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"HeaderRootAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"HeaderRootNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participation\",\"type\":\"uint16\"}],\"name\":\"NotEnoughParticipation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"name\":\"SlotBehindHead\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"StateRootAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"SyncCommitteeAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"SyncCommitteeNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"HeadUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"SyncCommitteeUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FINALITY_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_GATEWAY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENESIS_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GENESIS_VALIDATORS_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROTATE_FUNCTION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_SLOT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOTS_PER_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOURCE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STEP_FUNCTION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"executionStateRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"head\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"headers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"finalizedSlot\",\"type\":\"uint256\"}],\"name\":\"requestRotate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"attestedSlot\",\"type\":\"uint256\"}],\"name\":\"requestStep\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"finalizedSlot\",\"type\":\"uint256\"}],\"name\":\"rotate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"attestedSlot\",\"type\":\"uint256\"}],\"name\":\"step\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"syncCommitteePoseidons\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LightClient", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "4b363db94e286120d76eb905340fdd4e54bfe9f06bf33ff6cf5ad27f511bfe95000000000000000000000000000000000000000000000000000000005fc63057000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003a30ab2afdc05c8b6ae1f2ab20874fb4159e25d5c1d4faa41aee232d6ab331332df00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000156af44af6890508b3b7f6910d4a4570a0d524769a23ce340b2c7400e140ad168ab9aed23f9e6e8f8b98751cf508069b5b7f015d4d510b6a4820d41ba1ce88190d90000000000000000000000006e4f1e9ea315ebfd69d18c2db974eef6105fb803", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}