{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/pickle-swap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\n\\nimport \\\"./lib/erc20.sol\\\";\\n\\nimport \\\"./interfaces/uniswapv2.sol\\\";\\n\\ncontract PickleSwap {\\n    using SafeERC20 for IERC20;\\n\\n    UniswapRouterV2 router = UniswapRouterV2(\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n    );\\n\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    function convertWETHPair(\\n        address fromLP,\\n        address toLP,\\n        uint256 value\\n    ) public {\\n        IUniswapV2Pair fromPair = IUniswapV2Pair(fromLP);\\n        IUniswapV2Pair toPair = IUniswapV2Pair(toLP);\\n\\n        // Only for WETH/<TOKEN> pairs\\n        if (!(fromPair.token0() == weth || fromPair.token1() == weth)) {\\n            revert(\\\"!eth-from\\\");\\n        }\\n        if (!(toPair.token0() == weth || toPair.token1() == weth)) {\\n            revert(\\\"!eth-to\\\");\\n        }\\n\\n        // Get non-eth token from pairs\\n        address _from = fromPair.token0() != weth\\n            ? fromPair.token0()\\n            : fromPair.token1();\\n\\n        address _to = toPair.token0() != weth\\n            ? toPair.token0()\\n            : toPair.token1();\\n\\n        // Transfer\\n        IERC20(fromLP).safeTransferFrom(msg.sender, address(this), value);\\n\\n        // Remove liquidity\\n        IERC20(fromLP).safeApprove(address(router), 0);\\n        IERC20(fromLP).safeApprove(address(router), value);\\n        router.removeLiquidity(\\n            fromPair.token0(),\\n            fromPair.token1(),\\n            value,\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n\\n        // Convert to target token\\n        address[] memory path = new address[](3);\\n        path[0] = _from;\\n        path[1] = weth;\\n        path[2] = _to;\\n\\n        IERC20(_from).safeApprove(address(router), 0);\\n        IERC20(_from).safeApprove(address(router), uint256(-1));\\n        router.swapExactTokensForTokens(\\n            IERC20(_from).balanceOf(address(this)),\\n            0,\\n            path,\\n            address(this),\\n            now + 60\\n        );\\n\\n        // Supply liquidity\\n        IERC20(weth).safeApprove(address(router), 0);\\n        IERC20(weth).safeApprove(address(router), uint256(-1));\\n\\n        IERC20(_to).safeApprove(address(router), 0);\\n        IERC20(_to).safeApprove(address(router), uint256(-1));\\n        router.addLiquidity(\\n            weth,\\n            _to,\\n            IERC20(weth).balanceOf(address(this)),\\n            IERC20(_to).balanceOf(address(this)),\\n            0,\\n            0,\\n            msg.sender,\\n            now + 60\\n        );\\n\\n        // Refund sender any remaining tokens\\n        IERC20(weth).safeTransfer(\\n            msg.sender,\\n            IERC20(weth).balanceOf(address(this))\\n        );\\n        IERC20(_to).safeTransfer(msg.sender, IERC20(_to).balanceOf(address(this)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/exponential.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./careful-math.sol\\\";\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\ncontract Exponential is CarefulMath {\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint mantissa;\\n    }\\n\\n    struct Double {\\n        uint mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\\n    }\\n\\n    /**\\n     * @dev Adds two exponentials, returning a new exponential.\\n     */\\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Subtracts two exponentials, returning a new exponential.\\n     */\\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\\n\\n        return (error, Exp({mantissa: result}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(product));\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return addUInt(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, truncate(fraction));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials, returning a new exponential.\\n     */\\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n\\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, Exp({mantissa: 0}));\\n        }\\n\\n        // We add half the scale before dividing so that we get rounding instead of truncation.\\n        //  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717\\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\\n        if (err1 != MathError.NO_ERROR) {\\n            return (err1, Exp({mantissa: 0}));\\n        }\\n\\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\\n        assert(err2 == MathError.NO_ERROR);\\n\\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\\n    }\\n\\n    /**\\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\\n     */\\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\\n    }\\n\\n    /**\\n     * @dev Multiplies three exponentials, returning a new exponential.\\n     */\\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\\n        (MathError err, Exp memory ab) = mulExp(a, b);\\n        if (err != MathError.NO_ERROR) {\\n            return (err, ab);\\n        }\\n        return mulExp(ab, c);\\n    }\\n\\n    /**\\n     * @dev Divides two exponentials, returning a new exponential.\\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\\n     */\\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\\n        return getExp(a.mantissa, b.mantissa);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa < right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa <= right.mantissa;\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\\n        return left.mantissa > right.mantissa;\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\\n        return value.mantissa == 0;\\n    }\\n\\n    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return add_(a, b, \\\"addition overflow\\\");\\n    }\\n\\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return sub_(a, b, \\\"subtraction underflow\\\");\\n    }\\n\\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\\n    }\\n\\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / expScale;\\n    }\\n\\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\\n    }\\n\\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: mul_(a.mantissa, b)});\\n    }\\n\\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\\n        return mul_(a, b.mantissa) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return mul_(a, b, \\\"multiplication overflow\\\");\\n    }\\n\\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n        return c;\\n    }\\n\\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\\n    }\\n\\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\\n        return Exp({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), b.mantissa);\\n    }\\n\\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\\n    }\\n\\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(a.mantissa, b)});\\n    }\\n\\n    function div_(uint a, Double memory b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), b.mantissa);\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return div_(a, b, \\\"divide by zero\\\");\\n    }\\n\\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double memory) {\\n        return Double({mantissa: div_(mul_(a, doubleScale), b)});\\n    }\\n}\"\r\n    },\r\n    \"src/lib/context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/enumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/owned.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\n// https://docs.synthetix.io/contracts/Owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(\\n            msg.sender == nominatedOwner,\\n            \\\"You must be nominated before you can accept ownership\\\"\\n        );\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    function _onlyOwner() private view {\\n        require(\\n            msg.sender == owner,\\n            \\\"Only the contract owner may perform this action\\\"\\n        );\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\\n\"\r\n    },\r\n    \"src/lib/ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/erc20.sol\": {\r\n      \"content\": \"\\n// File: contracts/GSN/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./safe-math.sol\\\";\\nimport \\\"./context.sol\\\";\\n\\n// File: contracts/token/ERC20/IERC20.sol\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: contracts/utils/Address.sol\\n\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"src/lib/pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\n// Inheritance\\nimport \\\"./owned.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/Pausable\\nabstract contract Pausable is Owned {\\n    uint256 public lastPauseTime;\\n    bool public paused;\\n\\n    constructor() internal {\\n        // This contract is abstract, and thus cannot be instantiated directly\\n        require(owner != address(0), \\\"Owner must be set\\\");\\n        // Paused will be false, and lastPauseTime will be 0 upon initialisation\\n    }\\n\\n    /**\\n     * @notice Change the paused state of the contract\\n     * @dev Only the contract owner may call this.\\n     */\\n    function setPaused(bool _paused) external onlyOwner {\\n        // Ensure we're actually changing the state before we do anything\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        // Set our paused state.\\n        paused = _paused;\\n\\n        // If applicable, set the last pause time.\\n        if (paused) {\\n            lastPauseTime = now;\\n        }\\n\\n        // Let everyone know that our pause state has changed.\\n        emit PauseChanged(paused);\\n    }\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        require(\\n            !paused,\\n            \\\"This action cannot be performed while the contract is paused\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/lib/careful-math.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\"\r\n    },\r\n    \"src/lib/safe-math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"src/lib/reentrancy-guard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"src/interfaces/usdt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// https://forum.openzeppelin.com/t/can-not-call-the-function-approve-of-the-usdt-contract/2130/2\\n// USDT is gay and should be ashamed\\n\\npragma solidity ^0.6.0;\\n\\ninterface USDT {\\n    function approve(address guy, uint256 wad) external;\\n\\n    function transfer(address _to, uint256 _value) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/jar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../lib/erc20.sol\\\";\\n\\ninterface IJar is IERC20 {\\n    function token() external view returns (address);\\n\\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\\n\\n    function getRatio() external view returns (uint256);\\n\\n    function deposit(uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function earn() external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/converter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface Converter {\\n    function convert(address) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/compound.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface ICToken {\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrows() external returns (uint256);\\n\\n    function borrowIndex() external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n}\\n\\ninterface ICEther {\\n    function mint() external payable;\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @dev Reverts upon any failure\\n     */\\n    function repayBorrow() external payable;\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @dev Reverts upon any failure\\n     * @param borrower the account with the debt being payed off\\n     */\\n    function repayBorrowBehalf(address borrower) external payable;\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @dev Reverts upon any failure\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     */\\n    function liquidateBorrow(address borrower, address cTokenCollateral)\\n        external\\n        payable;\\n}\\n\\ninterface IComptroller {\\n    function compAccrued(address) external view returns (uint256);\\n\\n    function compSupplierIndex(address, address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function compBorrowerIndex(address, address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function compSpeeds(address) external view returns (uint256);\\n\\n    function compBorrowState(address) external view returns (uint224, uint32);\\n\\n    function compSupplyState(address) external view returns (uint224, uint32);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens)\\n        external\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    // Claim all the COMP accrued by holder in all markets\\n    function claimComp(address holder) external;\\n\\n    // Claim all the COMP accrued by holder in specific markets\\n    function claimComp(address holder, address[] calldata cTokens) external;\\n\\n    // Claim all the COMP accrued by specific holders in specific markets for their supplies and/or borrows\\n    function claimComp(\\n        address[] calldata holders,\\n        address[] calldata cTokens,\\n        bool borrowers,\\n        bool suppliers\\n    ) external;\\n\\n    function markets(address cTokenAddress)\\n        external\\n        view\\n        returns (bool, uint256);\\n}\\n\\ninterface ICompoundLens {\\n    function getCompBalanceMetadataExt(\\n        address comp,\\n        address comptroller,\\n        address account\\n    )\\n        external\\n        returns (\\n            uint256 balance,\\n            uint256 votes,\\n            address delegate,\\n            uint256 allocated\\n        );\\n}\\n\"\r\n    },\r\n    \"src/interfaces/proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\n\\ninterface Proxy {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function increaseAmount(uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/curve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\ninterface ICurveFi_2 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(int128) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_3 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(uint256) external view returns (uint256);\\n}\\n\\ninterface ICurveFi_4 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\\n        external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function balances(int128) external view returns (uint256);\\n}\\n\\ninterface ICurveZap_4 {\\n    function add_liquidity(\\n        uint256[4] calldata uamounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata min_uamounts)\\n        external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata uamounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount,\\n        bool donate_dust\\n    ) external;\\n\\n    function withdraw_donated_dust() external;\\n\\n    function coins(int128 arg0) external returns (address);\\n\\n    function underlying_coins(int128 arg0) external returns (address);\\n\\n    function curve() external returns (address);\\n\\n    function token() external returns (address);\\n}\\n\\ninterface ICurveZap {\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount\\n    ) external;\\n}\\n\\ninterface ICurveGauge {\\n    function deposit(uint256 _value) external;\\n\\n    function deposit(uint256 _value, address addr) external;\\n\\n    function balanceOf(address arg0) external view returns (uint256);\\n\\n    function withdraw(uint256 _value) external;\\n\\n    function withdraw(uint256 _value, bool claim_rewards) external;\\n\\n    function claim_rewards() external;\\n\\n    function claim_rewards(address addr) external;\\n\\n    function claimable_tokens(address addr) external returns (uint256);\\n\\n    function claimable_reward(address addr) external view returns (uint256);\\n\\n    function integrate_fraction(address arg0) external view returns (uint256);\\n}\\n\\ninterface ICurveMintr {\\n    function mint(address) external;\\n\\n    function minted(address arg0, address arg1) external view returns (uint256);\\n}\\n\\ninterface ICurveVotingEscrow {\\n    function locked(address arg0)\\n        external\\n        view\\n        returns (int128 amount, uint256 end);\\n\\n    function locked__end(address _addr) external view returns (uint256);\\n\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external returns (address);\\n}\\n\\ninterface ICurveSmartContractChecker {\\n    function wallets(address) external returns (bool);\\n\\n    function approveWallet(address _wallet) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/uniswapv2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface UniswapRouterV2 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/jar-converter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IJarConverter {\\n    function convert(\\n        address _refundExcess, // address to send the excess amount when adding liquidity\\n        uint256 _amount, // UNI LP Amount\\n        bytes calldata _data\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/controller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IController {\\n    function jars(address) external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function devfund() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(address, uint256) external;\\n\\n    function earn(address, uint256) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/masterchef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\ninterface IMasterchef {\\n    function BONUS_MULTIPLIER() external view returns (uint256);\\n\\n    function add(\\n        uint256 _allocPoint,\\n        address _lpToken,\\n        bool _withUpdate\\n    ) external;\\n\\n    function bonusEndBlock() external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function dev(address _devaddr) external;\\n\\n    function devFundDivRate() external view returns (uint256);\\n\\n    function devaddr() external view returns (address);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function massUpdatePools() external;\\n\\n    function owner() external view returns (address);\\n\\n    function pendingPickle(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function pickle() external view returns (address);\\n\\n    function picklePerBlock() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            uint256 allocPoint,\\n            uint256 lastRewardBlock,\\n            uint256 accPicklePerShare\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function renounceOwnership() external;\\n\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external;\\n\\n    function setBonusEndBlock(uint256 _bonusEndBlock) external;\\n\\n    function setDevFundDivRate(uint256 _devFundDivRate) external;\\n\\n    function setPicklePerBlock(uint256 _picklePerBlock) external;\\n\\n    function startBlock() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256 amount, uint256 rewardDebt);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/staking-rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IStakingRewards {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function exit() external;\\n\\n    function getReward() external;\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function rewards(address) external view returns (uint256);\\n\\n    function rewardsDistribution() external view returns (address);\\n\\n    function rewardsDuration() external view returns (uint256);\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stake(uint256 amount) external;\\n\\n    function stakeWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface IStakingRewardsFactory {\\n    function deploy(address stakingToken, uint256 rewardAmount) external;\\n\\n    function isOwner() external view returns (bool);\\n\\n    function notifyRewardAmount(address stakingToken) external;\\n\\n    function notifyRewardAmounts() external;\\n\\n    function owner() external view returns (address);\\n\\n    function renounceOwnership() external;\\n\\n    function rewardsToken() external view returns (address);\\n\\n    function stakingRewardsGenesis() external view returns (uint256);\\n\\n    function stakingRewardsInfoByStakingToken(address)\\n        external\\n        view\\n        returns (address stakingRewards, uint256 rewardAmount);\\n\\n    function stakingTokens(uint256) external view returns (address);\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/weth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface WETH {\\n    function name() external view returns (string memory);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/strategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IStrategy {\\n    function rewards() external view returns (address);\\n\\n    function gauge() external view returns (address);\\n\\n    function want() external view returns (address);\\n\\n    function timelock() external view returns (address);\\n\\n    function deposit() external;\\n\\n    function withdrawForSwap(uint256) external returns (uint256);\\n\\n    function withdraw(address) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function skim() external;\\n\\n    function withdrawAll() external returns (uint256);\\n\\n    function balanceOf() external view returns (uint256);\\n\\n    function harvest() external;\\n\\n    function setTimelock(address) external;\\n\\n    function setController(address _controller) external;\\n\\n    function execute(address _target, bytes calldata _data)\\n        external\\n        payable\\n        returns (bytes memory response);\\n\\n    function execute(bytes calldata _data)\\n        external\\n        payable\\n        returns (bytes memory response);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/onesplit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface OneSplitAudit {\\n    function getExpectedReturn(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 featureFlags\\n    )\\n        external\\n        view\\n        returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 featureFlags\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/controller-v4.sol\": {\r\n      \"content\": \"// https://github.com/iearn-finance/jars/blob/master/contracts/controllers/StrategyControllerV1.sol\\n\\npragma solidity ^0.6.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/controller.sol\\\";\\n\\nimport \\\"./lib/erc20.sol\\\";\\nimport \\\"./lib/safe-math.sol\\\";\\n\\nimport \\\"./interfaces/jar.sol\\\";\\nimport \\\"./interfaces/jar-converter.sol\\\";\\nimport \\\"./interfaces/onesplit.sol\\\";\\nimport \\\"./interfaces/strategy.sol\\\";\\nimport \\\"./interfaces/converter.sol\\\";\\n\\ncontract ControllerV4 {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public constant burn = 0x000000000000000000000000000000000000dEaD;\\n    address public onesplit = 0xC586BeF4a0992C495Cf22e1aeEE4E446CECDee0E;\\n\\n    address public governance;\\n    address public strategist;\\n    address public devfund;\\n    address public treasury;\\n    address public timelock;\\n\\n    // Convenience fee 0.1%\\n    uint256 public convenienceFee = 100;\\n    uint256 public constant convenienceFeeMax = 100000;\\n\\n    mapping(address => address) public jars;\\n    mapping(address => address) public strategies;\\n    mapping(address => mapping(address => address)) public converters;\\n    mapping(address => mapping(address => bool)) public approvedStrategies;\\n    mapping(address => bool) public approvedJarConverters;\\n\\n    uint256 public split = 500;\\n    uint256 public constant max = 10000;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _timelock,\\n        address _devfund,\\n        address _treasury\\n    ) public {\\n        governance = _governance;\\n        strategist = _strategist;\\n        timelock = _timelock;\\n        devfund = _devfund;\\n        treasury = _treasury;\\n    }\\n\\n    function setDevFund(address _devfund) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        devfund = _devfund;\\n    }\\n\\n    function setTreasury(address _treasury) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        treasury = _treasury;\\n    }\\n\\n    function setStrategist(address _strategist) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setSplit(uint256 _split) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        split = _split;\\n    }\\n\\n    function setOneSplit(address _onesplit) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        onesplit = _onesplit;\\n    }\\n\\n    function setGovernance(address _governance) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setJar(address _token, address _jar) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!strategist\\\"\\n        );\\n        require(jars[_token] == address(0), \\\"jar\\\");\\n        jars[_token] = _jar;\\n    }\\n\\n    function approveJarConverter(address _converter) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        approvedJarConverters[_converter] = true;\\n    }\\n\\n    function revokeJarConverter(address _converter) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        approvedJarConverters[_converter] = false;\\n    }\\n\\n    function approveStrategy(address _token, address _strategy) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        approvedStrategies[_token][_strategy] = true;\\n    }\\n\\n    function revokeStrategy(address _token, address _strategy) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        approvedStrategies[_token][_strategy] = false;\\n    }\\n\\n    function setConvenienceFee(uint256 _convenienceFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        convenienceFee = _convenienceFee;\\n    }\\n\\n    function setStrategy(address _token, address _strategy) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!strategist\\\"\\n        );\\n        require(approvedStrategies[_token][_strategy] == true, \\\"!approved\\\");\\n\\n        address _current = strategies[_token];\\n        if (_current != address(0)) {\\n            IStrategy(_current).withdrawAll();\\n        }\\n        strategies[_token] = _strategy;\\n    }\\n\\n    function earn(address _token, uint256 _amount) public {\\n        address _strategy = strategies[_token];\\n        address _want = IStrategy(_strategy).want();\\n        if (_want != _token) {\\n            address converter = converters[_token][_want];\\n            IERC20(_token).safeTransfer(converter, _amount);\\n            _amount = Converter(converter).convert(_strategy);\\n            IERC20(_want).safeTransfer(_strategy, _amount);\\n        } else {\\n            IERC20(_token).safeTransfer(_strategy, _amount);\\n        }\\n        IStrategy(_strategy).deposit();\\n    }\\n\\n    function balanceOf(address _token) external view returns (uint256) {\\n        return IStrategy(strategies[_token]).balanceOf();\\n    }\\n\\n    function withdrawAll(address _token) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!strategist\\\"\\n        );\\n        IStrategy(strategies[_token]).withdrawAll();\\n    }\\n\\n    function inCaseTokensGetStuck(address _token, uint256 _amount) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!governance\\\"\\n        );\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function inCaseStrategyTokenGetStuck(address _strategy, address _token)\\n        public\\n    {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!governance\\\"\\n        );\\n        IStrategy(_strategy).withdraw(_token);\\n    }\\n\\n    function getExpectedReturn(\\n        address _strategy,\\n        address _token,\\n        uint256 parts\\n    ) public view returns (uint256 expected) {\\n        uint256 _balance = IERC20(_token).balanceOf(_strategy);\\n        address _want = IStrategy(_strategy).want();\\n        (expected, ) = OneSplitAudit(onesplit).getExpectedReturn(\\n            _token,\\n            _want,\\n            _balance,\\n            parts,\\n            0\\n        );\\n    }\\n\\n    // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield\\n    function yearn(\\n        address _strategy,\\n        address _token,\\n        uint256 parts\\n    ) public {\\n        require(\\n            msg.sender == strategist || msg.sender == governance,\\n            \\\"!governance\\\"\\n        );\\n        // This contract should never have value in it, but just incase since this is a public call\\n        uint256 _before = IERC20(_token).balanceOf(address(this));\\n        IStrategy(_strategy).withdraw(_token);\\n        uint256 _after = IERC20(_token).balanceOf(address(this));\\n        if (_after > _before) {\\n            uint256 _amount = _after.sub(_before);\\n            address _want = IStrategy(_strategy).want();\\n            uint256[] memory _distribution;\\n            uint256 _expected;\\n            _before = IERC20(_want).balanceOf(address(this));\\n            IERC20(_token).safeApprove(onesplit, 0);\\n            IERC20(_token).safeApprove(onesplit, _amount);\\n            (_expected, _distribution) = OneSplitAudit(onesplit)\\n                .getExpectedReturn(_token, _want, _amount, parts, 0);\\n            OneSplitAudit(onesplit).swap(\\n                _token,\\n                _want,\\n                _amount,\\n                _expected,\\n                _distribution,\\n                0\\n            );\\n            _after = IERC20(_want).balanceOf(address(this));\\n            if (_after > _before) {\\n                _amount = _after.sub(_before);\\n                uint256 _treasury = _amount.mul(split).div(max);\\n                earn(_want, _amount.sub(_treasury));\\n                IERC20(_want).safeTransfer(treasury, _treasury);\\n            }\\n        }\\n    }\\n\\n    function withdraw(address _token, uint256 _amount) public {\\n        require(msg.sender == jars[_token], \\\"!jar\\\");\\n        IStrategy(strategies[_token]).withdraw(_amount);\\n    }\\n\\n    // Function to swap between jars\\n    function swapExactJarForJar(\\n        address _fromJar, // From which Jar\\n        address _toJar, // To which Jar\\n        uint256 _fromJarAmount, // How much jar tokens to swap\\n        uint256 _toJarMinAmount, // How much jar tokens you'd like at a minimum\\n        address payable[] calldata _targets,\\n        bytes[] calldata _data\\n    ) external returns (uint256) {\\n        require(_targets.length == _data.length, \\\"!length\\\");\\n\\n        // Only return last response\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            require(_targets[i] != address(0), \\\"!converter\\\");\\n            require(approvedJarConverters[_targets[i]], \\\"!converter\\\");\\n        }\\n\\n        address _fromJarToken = IJar(_fromJar).token();\\n        address _toJarToken = IJar(_toJar).token();\\n\\n        // Get pTokens from msg.sender\\n        IERC20(_fromJar).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _fromJarAmount\\n        );\\n\\n        // Calculate how much underlying\\n        // is the amount of pTokens worth\\n        uint256 _fromJarUnderlyingAmount = _fromJarAmount\\n            .mul(IJar(_fromJar).getRatio())\\n            .div(10**uint256(IJar(_fromJar).decimals()));\\n\\n        // Call 'withdrawForSwap' on Jar's current strategy if Jar\\n        // doesn't have enough initial capital.\\n        // This has moves the funds from the strategy to the Jar's\\n        // 'earnable' amount. Enabling 'free' withdrawals\\n        uint256 _fromJarAvailUnderlying = IERC20(_fromJarToken).balanceOf(\\n            _fromJar\\n        );\\n        if (_fromJarAvailUnderlying < _fromJarUnderlyingAmount) {\\n            IStrategy(strategies[_fromJarToken]).withdrawForSwap(\\n                _fromJarUnderlyingAmount.sub(_fromJarAvailUnderlying)\\n            );\\n        }\\n\\n        // Withdraw from Jar\\n        // Note: this is free since its still within the \\\"earnable\\\" amount\\n        //       as we transferred the access\\n        IERC20(_fromJar).safeApprove(_fromJar, 0);\\n        IERC20(_fromJar).safeApprove(_fromJar, _fromJarAmount);\\n        IJar(_fromJar).withdraw(_fromJarAmount);\\n\\n        // Calculate fee\\n        uint256 _fromUnderlyingBalance = IERC20(_fromJarToken).balanceOf(\\n            address(this)\\n        );\\n        uint256 _convenienceFee = _fromUnderlyingBalance.mul(convenienceFee).div(\\n            convenienceFeeMax\\n        );\\n\\n        if (_convenienceFee > 1) {\\n            IERC20(_fromJarToken).safeTransfer(devfund, _convenienceFee.div(2));\\n            IERC20(_fromJarToken).safeTransfer(treasury, _convenienceFee.div(2));\\n        }\\n\\n        // Executes sequence of logic\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            _execute(_targets[i], _data[i]);\\n        }\\n\\n        // Deposit into new Jar\\n        uint256 _toBal = IERC20(_toJarToken).balanceOf(address(this));\\n        IERC20(_toJarToken).safeApprove(_toJar, 0);\\n        IERC20(_toJarToken).safeApprove(_toJar, _toBal);\\n        IJar(_toJar).deposit(_toBal);\\n\\n        // Send Jar Tokens to user\\n        uint256 _toJarBal = IJar(_toJar).balanceOf(address(this));\\n        if (_toJarBal < _toJarMinAmount) {\\n            revert(\\\"!min-jar-amount\\\");\\n        }\\n\\n        IJar(_toJar).transfer(msg.sender, _toJarBal);\\n\\n        return _toJarBal;\\n    }\\n\\n    function _execute(address _target, bytes memory _data)\\n        internal\\n        returns (bytes memory response)\\n    {\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    revert(add(response, 0x20), size)\\n                }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/voting/PicklesInTheCitadel.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface MasterChef {\\n    function userInfo(uint256, address)\\n        external\\n        view\\n        returns (uint256, uint256);\\n}\\n\\ncontract PickleVoteProxy {\\n    // ETH/PICKLE token\\n    IERC20 public constant votes = IERC20(\\n        0xdc98556Ce24f007A5eF6dC1CE96322d65832A819\\n    );\\n\\n    // Pickle's masterchef contract\\n    MasterChef public constant chef = MasterChef(\\n        0xbD17B1ce622d73bD438b9E658acA5996dc394b0d\\n    );\\n\\n    // Pool 0 is the ETH/PICKLE pool\\n    uint256 public constant pool = uint256(0);\\n\\n    // Using 9 decimals as we're square rooting the votes\\n    function decimals() external pure returns (uint8) {\\n        return uint8(9);\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"PICKLEs In The Citadel\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"PICKLE C\\\";\\n    }\\n\\n    function totalSupply() external view returns (uint256) {\\n        return sqrt(votes.totalSupply());\\n    }\\n\\n    function balanceOf(address _voter) external view returns (uint256) {\\n        (uint256 _votes, ) = chef.userInfo(pool, _voter);\\n        return sqrt(_votes);\\n    }\\n\\n    function sqrt(uint256 x) public pure returns (uint256 y) {\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    constructor() public {}\\n}\\n\"\r\n    },\r\n    \"src/proxy-logic/curve.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\nimport \\\"../lib/safe-math.sol\\\";\\nimport \\\"../lib/erc20.sol\\\";\\n\\nimport \\\"../interfaces/uniswapv2.sol\\\";\\nimport \\\"../interfaces/curve.sol\\\";\\n\\n// Converts Curve LP Tokens to UNI LP Tokens\\ncontract CurveProxyLogic {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    function remove_liquidity_one_coin(\\n        address curve,\\n        address curveLp,\\n        int128 index\\n    ) public {\\n        uint256 lpAmount = IERC20(curveLp).balanceOf(address(this));\\n\\n        IERC20(curveLp).safeApprove(curve, 0);\\n        IERC20(curveLp).safeApprove(curve, lpAmount);\\n\\n        ICurveZap(curve).remove_liquidity_one_coin(lpAmount, index, 0);\\n    }\\n\\n    function add_liquidity(\\n        address curve,\\n        bytes4 curveFunctionSig,\\n        uint256 curvePoolSize,\\n        uint256 curveUnderlyingIndex,\\n        address underlying\\n    ) public {\\n        uint256 underlyingAmount = IERC20(underlying).balanceOf(address(this));\\n\\n        // curveFunctionSig should be the abi.encodedFormat of\\n        // add_liquidity(uint256[N_COINS],uint256)\\n        // The reason why its here is because different curve pools\\n        // have a different function signature\\n\\n        uint256[] memory liquidity = new uint256[](curvePoolSize);\\n        liquidity[curveUnderlyingIndex] = underlyingAmount;\\n\\n        bytes memory callData = abi.encodePacked(\\n            curveFunctionSig,\\n            liquidity,\\n            uint256(0)\\n        );\\n\\n        IERC20(underlying).safeApprove(curve, 0);\\n        IERC20(underlying).safeApprove(curve, underlyingAmount);\\n        (bool success, ) = curve.call(callData);\\n        require(success, \\\"!success\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"src/proxy-logic/uniswapv2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/safe-math.sol\\\";\\nimport \\\"../lib/erc20.sol\\\";\\n\\nimport \\\"../interfaces/uniswapv2.sol\\\";\\nimport \\\"../interfaces/curve.sol\\\";\\n\\n// Converts Curve LP Tokens to UNI LP Tokens\\ncontract UniswapV2ProxyLogic {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IUniswapV2Factory public constant factory = IUniswapV2Factory(\\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\\n    );\\n    UniswapRouterV2 public constant router = UniswapRouterV2(\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n    );\\n\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function getSwapAmt(uint256 amtA, uint256 resA)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            sqrt(amtA.mul(resA.mul(3988000).add(amtA.mul(3988009))))\\n                .sub(amtA.mul(1997))\\n                .div(1994);\\n    }\\n\\n    // https://blog.alphafinance.io/onesideduniswap/\\n    // https://github.com/AlphaFinanceLab/alphahomora/blob/88a8dfe4d4fa62b13b40f7983ee2c646f83e63b5/contracts/StrategyAddETHOnly.sol#L39\\n    // AlphaFinance is gripbook licensed\\n    function optimalOneSideSupply(\\n        IUniswapV2Pair pair,\\n        address from,\\n        address to\\n    ) public {\\n        address[] memory path = new address[](2);\\n\\n        // 1. Compute optimal amount of WETH to be converted\\n        (uint256 r0, uint256 r1, ) = pair.getReserves();\\n        uint256 rIn = pair.token0() == from ? r0 : r1;\\n        uint256 aIn = getSwapAmt(rIn, IERC20(from).balanceOf(address(this)));\\n\\n        // 2. Convert that from -> to\\n        path[0] = from;\\n        path[1] = to;\\n\\n        IERC20(from).safeApprove(address(router), 0);\\n        IERC20(from).safeApprove(address(router), aIn);\\n\\n        router.swapExactTokensForTokens(aIn, 0, path, address(this), now + 60);\\n    }\\n\\n    function swapUniswap(address from, address to) public {\\n        require(to != address(0));\\n\\n        address[] memory path;\\n\\n        if (from == weth || to == weth) {\\n            path = new address[](2);\\n            path[0] = from;\\n            path[1] = to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = from;\\n            path[1] = weth;\\n            path[2] = to;\\n        }\\n\\n        uint256 amount = IERC20(from).balanceOf(address(this));\\n\\n        IERC20(from).safeApprove(address(router), 0);\\n        IERC20(from).safeApprove(address(router), amount);\\n        router.swapExactTokensForTokens(\\n            amount,\\n            0,\\n            path,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    function removeLiquidity(IUniswapV2Pair pair) public {\\n        uint256 _balance = pair.balanceOf(address(this));\\n        pair.approve(address(router), _balance);\\n\\n        router.removeLiquidity(\\n            pair.token0(),\\n            pair.token1(),\\n            _balance,\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    function supplyLiquidity(\\n        address token0,\\n        address token1\\n    ) public returns (uint256) {\\n        // Add liquidity to uniswap\\n        IERC20(token0).safeApprove(address(router), 0);\\n        IERC20(token0).safeApprove(\\n            address(router),\\n            IERC20(token0).balanceOf(address(this))\\n        );\\n\\n        IERC20(token1).safeApprove(address(router), 0);\\n        IERC20(token1).safeApprove(\\n            address(router),\\n            IERC20(token1).balanceOf(address(this))\\n        );\\n\\n        (, , uint256 _to) = router.addLiquidity(\\n            token0,\\n            token1,\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n\\n        return _to;\\n    }\\n\\n    function refundDust(IUniswapV2Pair pair, address recipient) public {\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n\\n        IERC20(token0).safeTransfer(\\n            recipient,\\n            IERC20(token0).balanceOf(address(this))\\n        );\\n        IERC20(token1).safeTransfer(\\n            recipient,\\n            IERC20(token1).balanceOf(address(this))\\n        );\\n    }\\n\\n    function lpTokensToPrimitive(\\n        IUniswapV2Pair from,\\n        address to\\n    ) public {\\n        if (from.token0() != weth && from.token1() != weth) {\\n            revert(\\\"!from-weth-pair\\\");\\n        }\\n\\n        address fromOther = from.token0() == weth ? from.token1() : from.token0();\\n\\n        // Removes liquidity\\n        removeLiquidity(from);\\n\\n        // Swap from WETH to other\\n        swapUniswap(weth, to);\\n\\n        // If from is not to, we swap them too\\n        if (fromOther != to) {\\n            swapUniswap(fromOther, to);\\n        }\\n    }\\n\\n    function primitiveToLpTokens(\\n        address from,\\n        IUniswapV2Pair to,\\n        address dustRecipient\\n    ) public {\\n        if (to.token0() != weth && to.token1() != weth) {\\n            revert(\\\"!to-weth-pair\\\");\\n        }\\n\\n        address toOther = to.token0() == weth ? to.token1() : to.token0();\\n\\n        // Swap to WETH\\n        swapUniswap(from, weth);\\n\\n        // Optimal supply from WETH to\\n        optimalOneSideSupply(to, weth, toOther);\\n\\n        // Supply tokens\\n        supplyLiquidity(weth, toOther);\\n\\n        // Dust\\n        refundDust(to, dustRecipient);\\n    }\\n\\n    function swapUniLPTokens(\\n        IUniswapV2Pair from,\\n        IUniswapV2Pair to,\\n        address dustRecipient\\n    ) public {\\n        if (from.token0() != weth && from.token1() != weth) {\\n            revert(\\\"!from-weth-pair\\\");\\n        }\\n\\n        if (to.token0() != weth && to.token1() != weth) {\\n            revert(\\\"!to-weth-pair\\\");\\n        }\\n\\n        address fromOther = from.token0() == weth\\n            ? from.token1()\\n            : from.token0();\\n\\n        address toOther = to.token0() == weth ? to.token1() : to.token0();\\n\\n        // Remove weth-<token> pair\\n        removeLiquidity(from);\\n\\n        // Swap <token> to WETH\\n        swapUniswap(fromOther, weth);\\n\\n        // Optimal supply from WETH to <other-token>\\n        optimalOneSideSupply(to, weth, toOther);\\n\\n        // Supply weth-<other-token> pair\\n        supplyLiquidity(weth, toOther);\\n\\n        // Refund dust\\n        refundDust(to, dustRecipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/lib/hevm.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\ninterface Hevm {\\n    function warp(uint256) external;\\n    function roll(uint x) external;\\n    function store(address c, bytes32 loc, bytes32 val) external;\\n}\"\r\n    },\r\n    \"src/tests/lib/test-defi-base.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\nimport \\\"../../lib/safe-math.sol\\\";\\nimport \\\"../../lib/erc20.sol\\\";\\n\\nimport \\\"./hevm.sol\\\";\\nimport \\\"./user.sol\\\";\\nimport \\\"./test-approx.sol\\\";\\n\\nimport \\\"../../interfaces/usdt.sol\\\";\\nimport \\\"../../interfaces/weth.sol\\\";\\nimport \\\"../../interfaces/strategy.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\n\\ncontract DSTestDefiBase is DSTestApprox {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address pickle = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;\\n    address burn = 0x000000000000000000000000000000000000dEaD;\\n\\n    address susdv2_deposit = 0xFCBa3E75865d2d561BE8D220616520c171F12851;\\n\\n    address susdv2_pool = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\\n    address three_pool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n    address ren_pool = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\\n\\n    address scrv = 0xC25a3A3b969415c80451098fa907EC722572917F;\\n    address three_crv = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n    address ren_crv = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\\n\\n    address eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    address snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    address dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n    address uni = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\\n\\n    address wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\\n\\n    Hevm hevm = Hevm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\\n\\n    UniswapRouterV2 univ2 = UniswapRouterV2(\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n    );\\n\\n    IUniswapV2Factory univ2Factory = IUniswapV2Factory(\\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\\n    );\\n\\n    ICurveFi_4 curveSusdV2 = ICurveFi_4(\\n        0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\\n    );\\n\\n    uint256 startTime = block.timestamp;\\n\\n    receive() external payable {}\\n    fallback () external payable {}\\n\\n    function _swap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        address[] memory path;\\n\\n        if (_from == eth || _from == weth) {\\n            path = new address[](2);\\n            path[0] = weth;\\n            path[1] = _to;\\n\\n            univ2.swapExactETHForTokens{value: _amount}(\\n                0,\\n                path,\\n                address(this),\\n                now + 60\\n            );\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n\\n            IERC20(_from).safeApprove(address(univ2), 0);\\n            IERC20(_from).safeApprove(address(univ2), _amount);\\n\\n            univ2.swapExactTokensForTokens(\\n                _amount,\\n                0,\\n                path,\\n                address(this),\\n                now + 60\\n            );\\n        }\\n    }\\n\\n    function _getERC20(address token, uint256 _amount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = weth;\\n        path[1] = token;\\n\\n        uint256[] memory ins = univ2.getAmountsIn(_amount, path);\\n        uint256 ethAmount = ins[0];\\n\\n        univ2.swapETHForExactTokens{value: ethAmount}(\\n            _amount,\\n            path,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    function _getERC20WithETH(address token, uint256 _ethAmount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = weth;\\n        path[1] = token;\\n\\n        univ2.swapExactETHForTokens{value: _ethAmount}(\\n            0,\\n            path,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    function _getUniV2LPToken(address lpToken, uint256 _ethAmount) internal {\\n        address token0 = IUniswapV2Pair(lpToken).token0();\\n        address token1 = IUniswapV2Pair(lpToken).token1();\\n\\n        if (token0 != weth) {\\n            _getERC20WithETH(token0, _ethAmount.div(2));\\n        } else {\\n            WETH(weth).deposit{value: _ethAmount.div(2)}();\\n        }\\n\\n        if (token1 != weth) {\\n            _getERC20WithETH(token1, _ethAmount.div(2));\\n        } else {\\n            WETH(weth).deposit{value: _ethAmount.div(2)}();\\n        }\\n\\n        IERC20(token0).safeApprove(address(univ2), uint256(0));\\n        IERC20(token0).safeApprove(address(univ2), uint256(-1));\\n\\n        IERC20(token1).safeApprove(address(univ2), uint256(0));\\n        IERC20(token1).safeApprove(address(univ2), uint256(-1));\\n        univ2.addLiquidity(\\n            token0,\\n            token1,\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    function _getUniV2LPToken(\\n        address token0,\\n        address token1,\\n        uint256 _ethAmount\\n    ) internal {\\n        _getUniV2LPToken(univ2Factory.getPair(token0, token1), _ethAmount);\\n    }\\n\\n    function _getFunctionSig(string memory sig) internal pure returns (bytes4) {\\n        return bytes4(keccak256(bytes(sig)));\\n    }\\n\\n    function _getDynamicArray(address payable one)\\n        internal\\n        pure\\n        returns (address payable[] memory)\\n    {\\n        address payable[] memory targets = new address payable[](1);\\n        targets[0] = one;\\n\\n        return targets;\\n    }\\n\\n    function _getDynamicArray(bytes memory one)\\n        internal\\n        pure\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory data = new bytes[](1);\\n        data[0] = one;\\n\\n        return data;\\n    }\\n\\n    function _getDynamicArray(address payable one, address payable two)\\n        internal\\n        pure\\n        returns (address payable[] memory)\\n    {\\n        address payable[] memory targets = new address payable[](2);\\n        targets[0] = one;\\n        targets[1] = two;\\n\\n        return targets;\\n    }\\n\\n    function _getDynamicArray(bytes memory one, bytes memory two)\\n        internal\\n        pure\\n        returns (bytes[] memory)\\n    {\\n        bytes[] memory data = new bytes[](2);\\n        data[0] = one;\\n        data[1] = two;\\n\\n        return data;\\n    }\\n\\n    function _getDynamicArray(\\n        address payable one,\\n        address payable two,\\n        address payable three\\n    ) internal pure returns (address payable[] memory) {\\n        address payable[] memory targets = new address payable[](3);\\n        targets[0] = one;\\n        targets[1] = two;\\n        targets[2] = three;\\n\\n        return targets;\\n    }\\n\\n    function _getDynamicArray(\\n        bytes memory one,\\n        bytes memory two,\\n        bytes memory three\\n    ) internal pure returns (bytes[] memory) {\\n        bytes[] memory data = new bytes[](3);\\n        data[0] = one;\\n        data[1] = two;\\n        data[2] = three;\\n\\n        return data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/lib/test-strategy-curve-farm-base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"../lib/hevm.sol\\\";\\nimport \\\"../lib/user.sol\\\";\\nimport \\\"../lib/test-approx.sol\\\";\\nimport \\\"../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../interfaces/strategy.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../pickle-jar.sol\\\";\\nimport \\\"../../controller-v4.sol\\\";\\n\\ncontract StrategyCurveFarmTestBase is DSTestDefiBase {\\n    address governance;\\n    address strategist;\\n    address timelock;\\n\\n    address devfund;\\n    address treasury;\\n\\n    address want;\\n\\n    PickleJar pickleJar;\\n    ControllerV4 controller;\\n    IStrategy strategy;\\n\\n    // **** Tests ****\\n\\n    function _test_withdraw() internal {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n\\n        // Deposits to strategy\\n        pickleJar.earn();\\n\\n        // Fast forwards\\n        hevm.warp(block.timestamp + 1 weeks);\\n\\n        strategy.harvest();\\n\\n        // Withdraws back to pickleJar\\n        uint256 _before = IERC20(want).balanceOf(address(pickleJar));\\n        controller.withdrawAll(want);\\n        uint256 _after = IERC20(want).balanceOf(address(pickleJar));\\n\\n        assertTrue(_after > _before);\\n\\n        _before = IERC20(want).balanceOf(address(this));\\n        pickleJar.withdrawAll();\\n        _after = IERC20(want).balanceOf(address(this));\\n\\n        assertTrue(_after > _before);\\n\\n        // Gained some interest\\n        assertTrue(_after > _want);\\n    }\\n\\n    function _test_get_earn_harvest_rewards() internal {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n\\n        // Fast forward one week\\n        hevm.warp(block.timestamp + 1 weeks);\\n\\n        // Call the harvest function\\n        uint256 _before = pickleJar.balance();\\n        uint256 _treasuryBefore = IERC20(want).balanceOf(treasury);\\n        strategy.harvest();\\n        uint256 _after = pickleJar.balance();\\n        uint256 _treasuryAfter = IERC20(want).balanceOf(treasury);\\n\\n        uint256 earned = _after.sub(_before).mul(1000).div(955);\\n        uint256 earnedRewards = earned.mul(45).div(1000); // 4.5%\\n        uint256 actualRewardsEarned = _treasuryAfter.sub(_treasuryBefore);\\n\\n        // 4.5% performance fee is given\\n        assertEqApprox(earnedRewards, actualRewardsEarned);\\n\\n        // Withdraw\\n        uint256 _devBefore = IERC20(want).balanceOf(devfund);\\n        _treasuryBefore = IERC20(want).balanceOf(treasury);\\n        uint256 _stratBal = strategy.balanceOf();\\n        pickleJar.withdrawAll();\\n        uint256 _devAfter = IERC20(want).balanceOf(devfund);\\n        _treasuryAfter = IERC20(want).balanceOf(treasury);\\n\\n        // 0.175% goes to dev\\n        uint256 _devFund = _devAfter.sub(_devBefore);\\n        assertEq(_devFund, _stratBal.mul(175).div(100000));\\n\\n        // 0.325% goes to treasury\\n        uint256 _treasuryFund = _treasuryAfter.sub(_treasuryBefore);\\n        assertEq(_treasuryFund, _stratBal.mul(325).div(100000));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/lib/user.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n// Contract account to simulate another user\\ncontract User {\\n    function execute(\\n        address target,\\n        uint256 value,\\n        string memory signature,\\n        bytes memory data\\n    ) public payable returns (bytes memory) {\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(\\n                bytes4(keccak256(bytes(signature))),\\n                data\\n            );\\n        }\\n\\n        (bool success, bytes memory returnData) = target.call{value: value}(\\n            callData\\n        );\\n        require(success, \\\"!user-execute\\\");\\n\\n        return returnData;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/lib/test-approx.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\nimport \\\"./test.sol\\\";\\n\\ncontract DSTestApprox is DSTest {\\n    function assertEqApprox(uint256 a, uint256 b) internal {\\n        if (a == 0 && b == 0) {\\n            return;\\n        }\\n\\n        // +/- 5%\\n        uint256 bMax = (b * 105) / 100;\\n        uint256 bMin = (b * 95) / 100;\\n\\n        if (!(a > bMin && a < bMax)) {\\n            emit log_bytes32(\\\"Error: Wrong `a-uint` value!\\\");\\n            emit log_named_uint(\\\"  Expected\\\", b);\\n            emit log_named_uint(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n\\n    function assertEqVerbose(bool a, bytes memory b) internal {\\n        if (!a) {\\n            emit log_bytes32(\\\"Error: assertion error!\\\");\\n            emit logs(b);\\n            fail();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/lib/test-strategy-uni-farm-base.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\nimport \\\"../lib/hevm.sol\\\";\\nimport \\\"../lib/user.sol\\\";\\nimport \\\"../lib/test-approx.sol\\\";\\nimport \\\"../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../interfaces/strategy.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../pickle-jar.sol\\\";\\nimport \\\"../../controller-v4.sol\\\";\\n\\ncontract StrategyUniFarmTestBase is DSTestDefiBase {\\n    address want;\\n    address token1;\\n\\n    address governance;\\n    address strategist;\\n    address timelock;\\n\\n    address devfund;\\n    address treasury;\\n\\n    PickleJar pickleJar;\\n    ControllerV4 controller;\\n    IStrategy strategy;\\n\\n    function _getWant(uint256 ethAmount, uint256 amount) internal {\\n        _getERC20(token1, amount);\\n\\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\\n\\n        IERC20(token1).safeApprove(address(univ2), 0);\\n        IERC20(token1).safeApprove(address(univ2), _token1);\\n\\n        univ2.addLiquidityETH{value: ethAmount}(\\n            token1,\\n            _token1,\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    // **** Tests ****\\n\\n    function _test_timelock() internal {\\n        assertTrue(strategy.timelock() == timelock);\\n        strategy.setTimelock(address(1));\\n        assertTrue(strategy.timelock() == address(1));\\n    }\\n\\n    function _test_withdraw_release() internal {\\n        uint256 decimals = ERC20(token1).decimals();\\n        _getWant(10 ether, 4000 * (10**decimals));\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).safeApprove(address(pickleJar), 0);\\n        IERC20(want).safeApprove(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n        hevm.warp(block.timestamp + 1 weeks);\\n        strategy.harvest();\\n\\n        // Checking withdraw\\n        uint256 _before = IERC20(want).balanceOf(address(pickleJar));\\n        controller.withdrawAll(want);\\n        uint256 _after = IERC20(want).balanceOf(address(pickleJar));\\n        assertTrue(_after > _before);\\n        _before = IERC20(want).balanceOf(address(this));\\n        pickleJar.withdrawAll();\\n        _after = IERC20(want).balanceOf(address(this));\\n        assertTrue(_after > _before);\\n\\n        // Check if we gained interest\\n        assertTrue(_after > _want);\\n    }\\n\\n    function _test_get_earn_harvest_rewards() internal {\\n        uint256 decimals = ERC20(token1).decimals();\\n        _getWant(10 ether, 4000 * (10**decimals));\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).safeApprove(address(pickleJar), 0);\\n        IERC20(want).safeApprove(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n        hevm.warp(block.timestamp + 1 weeks);\\n\\n        // Call the harvest function\\n        uint256 _before = pickleJar.balance();\\n        uint256 _treasuryBefore = IERC20(want).balanceOf(treasury);\\n        strategy.harvest();\\n        uint256 _after = pickleJar.balance();\\n        uint256 _treasuryAfter = IERC20(want).balanceOf(treasury);\\n\\n        uint256 earned = _after.sub(_before).mul(1000).div(955);\\n        uint256 earnedRewards = earned.mul(45).div(1000); // 4.5%\\n        uint256 actualRewardsEarned = _treasuryAfter.sub(_treasuryBefore);\\n\\n        // 4.5% performance fee is given\\n        assertEqApprox(earnedRewards, actualRewardsEarned);\\n\\n        // Withdraw\\n        uint256 _devBefore = IERC20(want).balanceOf(devfund);\\n        _treasuryBefore = IERC20(want).balanceOf(treasury);\\n        uint256 _stratBal = strategy.balanceOf();\\n        pickleJar.withdrawAll();\\n        uint256 _devAfter = IERC20(want).balanceOf(devfund);\\n        _treasuryAfter = IERC20(want).balanceOf(treasury);\\n\\n        // 0.175% goes to dev\\n        uint256 _devFund = _devAfter.sub(_devBefore);\\n        assertEq(_devFund, _stratBal.mul(175).div(100000));\\n\\n        // 0.325% goes to treasury\\n        uint256 _treasuryFund = _treasuryAfter.sub(_treasuryBefore);\\n        assertEq(_treasuryFund, _stratBal.mul(325).div(100000));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/lib/test.sol\": {\r\n      \"content\": \"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\ncontract DSTest {\\n    event eventListener          (address target, bool exact);\\n    event logs                   (bytes);\\n    event log_bytes32            (bytes32);\\n    event log_named_address      (bytes32 key, address val);\\n    event log_named_bytes32      (bytes32 key, bytes32 val);\\n    event log_named_decimal_int  (bytes32 key, int val, uint decimals);\\n    event log_named_decimal_uint (bytes32 key, uint val, uint decimals);\\n    event log_named_int          (bytes32 key, int val);\\n    event log_named_uint         (bytes32 key, uint val);\\n    event log_named_string       (bytes32 key, string val);\\n\\n    bool public IS_TEST;\\n    bool public failed;\\n\\n    constructor() internal {\\n        IS_TEST = true;\\n    }\\n\\n    function fail() internal {\\n        failed = true;\\n    }\\n\\n    function expectEventsExact(address target) internal {\\n        emit eventListener(target, true);\\n    }\\n\\n    modifier logs_gas() {\\n        uint startGas = gasleft();\\n        _;\\n        uint endGas = gasleft();\\n        emit log_named_uint(\\\"gas\\\", startGas - endGas);\\n    }\\n\\n    function assertTrue(bool condition) internal {\\n        if (!condition) {\\n            emit log_bytes32(\\\"Assertion failed\\\");\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(address a, address b) internal {\\n        if (a != b) {\\n            emit log_bytes32(\\\"Error: Wrong `address' value\\\");\\n            emit log_named_address(\\\"  Expected\\\", b);\\n            emit log_named_address(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq32(bytes32 a, bytes32 b) internal {\\n        assertEq(a, b);\\n    }\\n\\n    function assertEq(bytes32 a, bytes32 b) internal {\\n        if (a != b) {\\n            emit log_bytes32(\\\"Error: Wrong `bytes32' value\\\");\\n            emit log_named_bytes32(\\\"  Expected\\\", b);\\n            emit log_named_bytes32(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n\\n    function assertEqDecimal(int a, int b, uint decimals) internal {\\n        if (a != b) {\\n            emit log_bytes32(\\\"Error: Wrong fixed-point decimal\\\");\\n            emit log_named_decimal_int(\\\"  Expected\\\", b, decimals);\\n            emit log_named_decimal_int(\\\"    Actual\\\", a, decimals);\\n            fail();\\n        }\\n    }\\n\\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\\n        if (a != b) {\\n            emit log_bytes32(\\\"Error: Wrong fixed-point decimal\\\");\\n            emit log_named_decimal_uint(\\\"  Expected\\\", b, decimals);\\n            emit log_named_decimal_uint(\\\"    Actual\\\", a, decimals);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(int a, int b) internal {\\n        if (a != b) {\\n            emit log_bytes32(\\\"Error: Wrong `int' value\\\");\\n            emit log_named_int(\\\"  Expected\\\", b);\\n            emit log_named_int(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(uint a, uint b) internal {\\n        if (a != b) {\\n            emit log_bytes32(\\\"Error: Wrong `uint' value\\\");\\n            emit log_named_uint(\\\"  Expected\\\", b);\\n            emit log_named_uint(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq(string memory a, string memory b) internal {\\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\\n            emit log_bytes32(\\\"Error: Wrong `string' value\\\");\\n            emit log_named_string(\\\"  Expected\\\", b);\\n            emit log_named_string(\\\"    Actual\\\", a);\\n            fail();\\n        }\\n    }\\n\\n    function assertEq0(bytes memory a, bytes memory b) internal {\\n        bool ok = true;\\n\\n        if (a.length == b.length) {\\n            for (uint i = 0; i < a.length; i++) {\\n                if (a[i] != b[i]) {\\n                    ok = false;\\n                }\\n            }\\n        } else {\\n            ok = false;\\n        }\\n\\n        if (!ok) {\\n            emit log_bytes32(\\\"Error: Wrong `bytes' value\\\");\\n            emit log_named_bytes32(\\\"  Expected\\\", \\\"[cannot show `bytes' value]\\\");\\n            emit log_named_bytes32(\\\"  Actual\\\", \\\"[cannot show `bytes' value]\\\");\\n            fail();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/lib/mock-erc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\n\\ncontract MockERC20 is ERC20 {\\n    constructor(string memory name, string memory symbol)\\n        public\\n        ERC20(name, symbol)\\n    {}\\n\\n    function mint(address recipient, uint256 amount) public {\\n        _mint(recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/pickle-swap.test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\n\\nimport \\\"./lib/test-defi-base.sol\\\";\\nimport \\\"../lib/safe-math.sol\\\";\\n\\nimport \\\"../pickle-swap.sol\\\";\\n\\ncontract PickleSwapTest is DSTestDefiBase {\\n    PickleSwap pickleSwap;\\n\\n    function setUp() public {\\n        pickleSwap = new PickleSwap();\\n    }\\n\\n    function _test_uni_lp_swap(address lp1, address lp2) internal {\\n        _getUniV2LPToken(lp1, 20 ether);\\n        uint256 _balance = IERC20(lp1).balanceOf(address(this));\\n\\n        uint256 _before = IERC20(lp2).balanceOf(address(this));\\n        IERC20(lp1).safeIncreaseAllowance(address(pickleSwap), _balance);\\n        pickleSwap.convertWETHPair(lp1, lp2, _balance);\\n        uint256 _after = IERC20(lp2).balanceOf(address(this));\\n\\n        assertTrue(_after > _before);\\n        assertTrue(_after > 0);\\n    }\\n\\n    function test_pickleswap_dai_usdc() public {\\n        _test_uni_lp_swap(\\n            univ2Factory.getPair(weth, dai),\\n            univ2Factory.getPair(weth, usdc)\\n        );\\n    }\\n\\n    function test_pickleswap_dai_usdt() public {\\n        _test_uni_lp_swap(\\n            univ2Factory.getPair(weth, dai),\\n            univ2Factory.getPair(weth, usdt)\\n        );\\n    }\\n\\n    function test_pickleswap_usdt_susd() public {\\n        _test_uni_lp_swap(\\n            univ2Factory.getPair(weth, usdt),\\n            univ2Factory.getPair(weth, susd)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/uni-curve-converter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\n\\nimport \\\"./lib/test-defi-base.sol\\\";\\nimport \\\"../lib/safe-math.sol\\\";\\n\\nimport \\\"../uni-curve-converter.sol\\\";\\n\\ncontract UniCurveConverterTest is DSTestDefiBase {\\n    UniCurveConverter uniCurveConverter;\\n\\n    function setUp() public {\\n        uniCurveConverter = new UniCurveConverter();\\n    }\\n\\n    function _test_uni_curve_converter(address token0, address token1)\\n        internal\\n    {\\n        address lp = univ2Factory.getPair(token0, token1);\\n        _getUniV2LPToken(lp, 100 ether);\\n\\n        uint256 _balance = IERC20(lp).balanceOf(address(this));\\n\\n        IERC20(lp).safeApprove(address(uniCurveConverter), 0);\\n        IERC20(lp).safeApprove(address(uniCurveConverter), uint256(-1));\\n\\n        uint256 _before = IERC20(scrv).balanceOf(address(this));\\n        uniCurveConverter.convert(lp, _balance);\\n        uint256 _after = IERC20(scrv).balanceOf(address(this));\\n\\n        // Gets scrv\\n        assertTrue(_after > _before);\\n        assertTrue(_after > 0);\\n\\n        // No token left behind in router\\n        assertEq(IERC20(token0).balanceOf(address(uniCurveConverter)), 0);\\n        assertEq(IERC20(token1).balanceOf(address(uniCurveConverter)), 0);\\n        assertEq(IERC20(weth).balanceOf(address(uniCurveConverter)), 0);\\n\\n        assertEq(IERC20(dai).balanceOf(address(uniCurveConverter)), 0);\\n        assertEq(IERC20(usdc).balanceOf(address(uniCurveConverter)), 0);\\n        assertEq(IERC20(usdt).balanceOf(address(uniCurveConverter)), 0);\\n        assertEq(IERC20(susd).balanceOf(address(uniCurveConverter)), 0);\\n    }\\n\\n    function test_uni_curve_convert_dai_weth() public {\\n        _test_uni_curve_converter(dai, weth);\\n    }\\n\\n    function test_uni_curve_convert_usdt_weth() public {\\n        _test_uni_curve_converter(usdt, weth);\\n    }\\n\\n    function test_uni_curve_convert_wbtc_weth() public {\\n        _test_uni_curve_converter(wbtc, weth);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/curve/strategy-curve-scrv-v4_1.test.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/hevm.sol\\\";\\nimport \\\"../../lib/user.sol\\\";\\nimport \\\"../../lib/test-approx.sol\\\";\\nimport \\\"../../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\n\\nimport \\\"../../../strategies/curve/strategy-curve-scrv-v4_1.sol\\\";\\nimport \\\"../../../strategies/curve/scrv-voter.sol\\\";\\nimport \\\"../../../strategies/curve/crv-locker.sol\\\";\\n\\ncontract StrategyCurveSCRVv4Test is DSTestDefiBase {\\n    address escrow = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;\\n    address curveSmartContractChecker = 0xca719728Ef172d0961768581fdF35CB116e0B7a4;\\n\\n    address governance;\\n    address strategist;\\n    address timelock;\\n    address devfund;\\n    address treasury;\\n\\n    PickleJar pickleJar;\\n    ControllerV4 controller;\\n    StrategyCurveSCRVv4_1 strategy;\\n    SCRVVoter scrvVoter;\\n    CRVLocker crvLocker;\\n\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(new User());\\n        timelock = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        crvLocker = new CRVLocker(governance);\\n\\n        scrvVoter = new SCRVVoter(governance, address(crvLocker));\\n\\n        strategy = new StrategyCurveSCRVv4_1(\\n            address(scrvVoter),\\n            address(crvLocker),\\n            governance,\\n            strategist,\\n            address(controller),\\n            timelock\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        scrvVoter.approveStrategy(address(strategy));\\n        scrvVoter.approveStrategy(governance);\\n        crvLocker.addVoter(address(scrvVoter));\\n\\n        hevm.warp(startTime);\\n\\n        // Approve our strategy on smartContractWhitelist\\n        // Modify storage value so we are approved by the smart-wallet-white-list\\n        // storage in solidity - https://ethereum.stackexchange.com/a/41304\\n        bytes32 key = bytes32(uint256(address(crvLocker)));\\n        bytes32 pos = bytes32(0); // pos 0 as its the first state variable\\n        bytes32 loc = keccak256(abi.encodePacked(key, pos));\\n        hevm.store(curveSmartContractChecker, loc, bytes32(uint256(1)));\\n\\n        // Make sure our crvLocker is whitelisted\\n        assertTrue(\\n            ICurveSmartContractChecker(curveSmartContractChecker).wallets(\\n                address(crvLocker)\\n            )\\n        );\\n    }\\n\\n    function _getSCRV(uint256 daiAmount) internal {\\n        _getERC20(dai, daiAmount);\\n        uint256[4] memory liquidity;\\n        liquidity[0] = IERC20(dai).balanceOf(address(this));\\n        IERC20(dai).approve(susdv2_pool, liquidity[0]);\\n        ICurveFi_4(susdv2_pool).add_liquidity(liquidity, 0);\\n    }\\n\\n    // **** Tests ****\\n\\n    function test_scrv_v4_1_withdraw() public {\\n        _getSCRV(10000000 ether); // 1 million DAI\\n        uint256 _scrv = IERC20(scrv).balanceOf(address(this));\\n        IERC20(scrv).approve(address(pickleJar), _scrv);\\n        pickleJar.deposit(_scrv);\\n\\n        // Deposits to strategy\\n        pickleJar.earn();\\n\\n        // Fast forwards\\n        hevm.warp(block.timestamp + 1 weeks);\\n\\n        strategy.harvest();\\n\\n        // Withdraws back to pickleJar\\n        uint256 _before = IERC20(scrv).balanceOf(address(pickleJar));\\n        controller.withdrawAll(scrv);\\n        uint256 _after = IERC20(scrv).balanceOf(address(pickleJar));\\n\\n        assertTrue(_after > _before);\\n\\n        _before = IERC20(scrv).balanceOf(address(this));\\n        pickleJar.withdrawAll();\\n        _after = IERC20(scrv).balanceOf(address(this));\\n\\n        assertTrue(_after > _before);\\n\\n        // Gained some interest\\n        assertTrue(_after > _scrv);\\n    }\\n\\n    function test_scrv_v4_1_get_earn_harvest_rewards() public {\\n        address dev = controller.devfund();\\n\\n        // Deposit sCRV, and earn\\n        _getSCRV(10000000 ether); // 1 million DAI\\n        uint256 _scrv = IERC20(scrv).balanceOf(address(this));\\n        IERC20(scrv).approve(address(pickleJar), _scrv);\\n        pickleJar.deposit(_scrv);\\n        pickleJar.earn();\\n\\n        // Fast forward one week\\n        hevm.warp(block.timestamp + 1 weeks);\\n\\n        // Call the harvest function\\n        uint256 _before = pickleJar.balance();\\n        uint256 _rewardsBefore = IERC20(scrv).balanceOf(treasury);\\n        User(strategist).execute(address(strategy), 0, \\\"harvest()\\\", \\\"\\\");\\n        uint256 _after = pickleJar.balance();\\n        uint256 _rewardsAfter = IERC20(scrv).balanceOf(treasury);\\n\\n        uint256 earned = _after.sub(_before).mul(1000).div(955);\\n        uint256 earnedRewards = earned.mul(45).div(1000); // 4.5%\\n        uint256 actualRewardsEarned = _rewardsAfter.sub(_rewardsBefore);\\n\\n        // 4.5% performance fee is given\\n        assertEqApprox(earnedRewards, actualRewardsEarned);\\n\\n        // Withdraw\\n        uint256 _devBefore = IERC20(scrv).balanceOf(dev);\\n        uint256 _stratBal = strategy.balanceOf();\\n        pickleJar.withdrawAll();\\n        uint256 _devAfter = IERC20(scrv).balanceOf(dev);\\n\\n        // 0.175% goes to dev\\n        uint256 _devFund = _devAfter.sub(_devBefore);\\n        assertEq(_devFund, _stratBal.mul(175).div(100000));\\n    }\\n\\n    function test_scrv_v4_1_lock() public {\\n        // Deposit sCRV, and earn\\n        _getSCRV(10000000 ether); // 1 million DAI\\n        uint256 _scrv = IERC20(scrv).balanceOf(address(this));\\n        IERC20(scrv).approve(address(pickleJar), _scrv);\\n        pickleJar.deposit(_scrv);\\n        pickleJar.earn();\\n\\n        // Fast forward one week\\n        hevm.warp(block.timestamp + 1 weeks);\\n\\n        uint256 _before = IERC20(crv).balanceOf(address(crvLocker));\\n        // Call the harvest function\\n        strategy.harvest();\\n        // Make sure we can open lock\\n        uint256 _after = IERC20(crv).balanceOf(address(crvLocker));\\n        assertTrue(_after > _before);\\n\\n        // Create a lock\\n        crvLocker.createLock(_after, block.timestamp + 5 weeks);\\n\\n        // Harvest etc\\n        hevm.warp(block.timestamp + 1 weeks);\\n        strategy.harvest();\\n\\n        // Increase amount\\n        crvLocker.increaseAmount(IERC20(crv).balanceOf(address(crvLocker)));\\n\\n        // Increase unlockTime\\n        crvLocker.increaseUnlockTime(block.timestamp + 5 weeks);\\n\\n        // Fast forward\\n        hevm.warp(block.timestamp + 5 weeks + 1 hours);\\n\\n        // Withdraw\\n        _before = IERC20(crv).balanceOf(address(crvLocker));\\n        crvLocker.release();\\n        _after = IERC20(crv).balanceOf(address(crvLocker));\\n        assertTrue(_after > _before);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/curve/strategy-curve-scrv-v3_2.test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/hevm.sol\\\";\\nimport \\\"../../lib/user.sol\\\";\\nimport \\\"../../lib/test-approx.sol\\\";\\nimport \\\"../../lib/test-defi-base.sol\\\";\\nimport \\\"../../lib/test-strategy-curve-farm-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\n\\nimport \\\"../../../strategies/curve/strategy-curve-scrv-v3_2.sol\\\";\\n\\ncontract StrategyCurveSCRVv3_2Test is StrategyCurveFarmTestBase {\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        want = scrv;\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = IStrategy(\\n            address(\\n                new StrategyCurveSCRVv3_2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        hevm.warp(startTime);\\n\\n        _getWant(10000000 ether);\\n    }\\n\\n    function _getWant(uint256 daiAmount) internal {\\n        _getERC20(dai, daiAmount);\\n        uint256[4] memory liquidity;\\n        liquidity[0] = IERC20(dai).balanceOf(address(this));\\n        IERC20(dai).approve(susdv2_pool, liquidity[0]);\\n        ICurveFi_4(susdv2_pool).add_liquidity(liquidity, 0);\\n    }\\n\\n    // **** Tests **** //\\n\\n    function test_scrv_v3_1_withdraw() public {\\n        _test_withdraw();\\n    }\\n\\n    function test_scrv_v3_1_earn_harvest_rewards() public {\\n        _test_get_earn_harvest_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/curve/strategy-curve-3crv-v2.test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/hevm.sol\\\";\\nimport \\\"../../lib/user.sol\\\";\\nimport \\\"../../lib/test-approx.sol\\\";\\nimport \\\"../../lib/test-defi-base.sol\\\";\\nimport \\\"../../lib/test-strategy-curve-farm-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\n\\nimport \\\"../../../strategies/curve/strategy-curve-3crv-v2.sol\\\";\\n\\ncontract StrategyCurve3CRVv2Test is StrategyCurveFarmTestBase {\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        want = three_crv;\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = IStrategy(\\n            address(\\n                new StrategyCurve3CRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        hevm.warp(startTime);\\n\\n        _getWant(10000000 ether);\\n    }\\n\\n    function _getWant(uint256 daiAmount) internal {\\n        _getERC20(dai, daiAmount);\\n        uint256[3] memory liquidity;\\n        liquidity[0] = IERC20(dai).balanceOf(address(this));\\n        IERC20(dai).approve(three_pool, liquidity[0]);\\n        ICurveFi_3(three_pool).add_liquidity(liquidity, 0);\\n    }\\n\\n    // **** Tests **** //\\n\\n    function test_3crv_v1_withdraw() public {\\n        _test_withdraw();\\n    }\\n\\n    function test_3crv_v1_earn_harvest_rewards() public {\\n        _test_get_earn_harvest_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/curve/strategy-curve-rencrv-v2.test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/hevm.sol\\\";\\nimport \\\"../../lib/user.sol\\\";\\nimport \\\"../../lib/test-approx.sol\\\";\\nimport \\\"../../lib/test-defi-base.sol\\\";\\nimport \\\"../../lib/test-strategy-curve-farm-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\n\\nimport \\\"../../../strategies/curve/strategy-curve-rencrv-v2.sol\\\";\\n\\ncontract StrategyCurveRenCRVv2Test is StrategyCurveFarmTestBase {\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        want = ren_crv;\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = IStrategy(\\n            address(\\n                new StrategyCurveRenCRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        hevm.warp(startTime);\\n\\n        _getWant(10e8); // 10 wbtc\\n    }\\n\\n    function _getWant(uint256 btcAmount) internal {\\n        _getERC20(wbtc, btcAmount);\\n        uint256[2] memory liquidity;\\n        liquidity[1] = IERC20(wbtc).balanceOf(address(this));\\n        IERC20(wbtc).approve(ren_pool, liquidity[1]);\\n        ICurveFi_2(ren_pool).add_liquidity(liquidity, 0);\\n    }\\n\\n    // **** Tests **** //\\n\\n    function test_rencrv_v1_withdraw() public {\\n        _test_withdraw();\\n    }\\n\\n    function test_rencrv_v1_earn_harvest_rewards() public {\\n        _test_get_earn_harvest_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/compound/strategy-cmpnd-dai-v2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\n\\nimport \\\"../../lib/hevm.sol\\\";\\nimport \\\"../../lib/user.sol\\\";\\nimport \\\"../../lib/test-approx.sol\\\";\\nimport \\\"../../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../../interfaces/compound.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\n\\nimport \\\"../../../strategies/compound/strategy-cmpd-dai-v2.sol\\\";\\n\\ncontract StrategyCmpndDaiV1 is DSTestDefiBase {\\n    StrategyCmpdDaiV2 strategy;\\n    ControllerV4 controller;\\n    PickleJar pickleJar;\\n\\n    address governance;\\n    address strategist;\\n    address timelock;\\n    address devfund;\\n    address treasury;\\n\\n    address want;\\n\\n    function setUp() public {\\n        want = dai;\\n\\n        governance = address(this);\\n        strategist = address(new User());\\n        timelock = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = new StrategyCmpdDaiV2(\\n            governance,\\n            strategist,\\n            address(controller),\\n            timelock\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n    }\\n\\n    function testFail_cmpnd_dai_v1_onlyKeeper_leverage() public {\\n        _getERC20(want, 100e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n\\n        User randomUser = new User();\\n        randomUser.execute(address(strategy), 0, \\\"leverageToMax()\\\", \\\"\\\");\\n    }\\n\\n    function testFail_cmpnd_dai_v1_onlyKeeper_deleverage() public {\\n        _getERC20(want, 100e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        strategy.leverageToMax();\\n\\n        User randomUser = new User();\\n        randomUser.execute(address(strategy), 0, \\\"deleverageToMin()\\\", \\\"\\\");\\n    }\\n\\n    function test_cmpnd_dai_v1_comp_accrued() public {\\n        _getERC20(want, 1000000e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n\\n        strategy.leverageToMax();\\n\\n        uint256 compAccrued = strategy.getCompAccrued();\\n\\n        assertEq(compAccrued, 0);\\n\\n        hevm.warp(block.timestamp + 1 days);\\n        hevm.roll(block.number + 6171); // Roughly number of blocks per day\\n\\n        compAccrued = strategy.getCompAccrued();\\n        assertTrue(compAccrued > 0);\\n    }\\n\\n    function test_cmpnd_dai_v1_comp_sync() public {\\n        _getERC20(want, 1000000e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n\\n        // Sets colFactor Buffer to be 3% (safeSync is 5%)\\n        strategy.setColFactorLeverageBuffer(30);\\n        strategy.leverageToMax();\\n        // Back to 10%\\n        strategy.setColFactorLeverageBuffer(100);\\n\\n        uint256 colFactor = strategy.getColFactor();\\n        uint256 safeColFactor = strategy.getSafeLeverageColFactor();\\n        assertTrue(colFactor > safeColFactor);\\n\\n        // Sync automatically fixes the colFactor for us\\n        bool shouldSync = strategy.sync();\\n        assertTrue(shouldSync);\\n\\n        colFactor = strategy.getColFactor();\\n        assertEqApprox(colFactor, safeColFactor);\\n\\n        shouldSync = strategy.sync();\\n        assertTrue(!shouldSync);\\n    }\\n\\n    function test_cmpnd_dai_v1_leverage() public {\\n        _getERC20(want, 100e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n\\n        uint256 _stratInitialBal = strategy.balanceOf();\\n\\n        uint256 _beforeCR = strategy.getColFactor();\\n        uint256 _beforeLev = strategy.getCurrentLeverage();\\n        strategy.leverageToMax();\\n        uint256 _afterCR = strategy.getColFactor();\\n        uint256 _afterLev = strategy.getCurrentLeverage();\\n        uint256 _safeLeverageColFactor = strategy.getSafeLeverageColFactor();\\n\\n        assertTrue(_afterCR > _beforeCR);\\n        assertTrue(_afterLev > _beforeLev);\\n        assertEqApprox(_safeLeverageColFactor, _afterCR);\\n\\n        uint256 _maxLeverage = strategy.getMaxLeverage();\\n        assertTrue(_maxLeverage > 2e18); // Should be ~2.6, depending on colFactorLeverageBuffer\\n\\n        uint256 leverageTarget = strategy.getLeveragedSupplyTarget(\\n            _stratInitialBal\\n        );\\n        uint256 leverageSupplied = strategy.getSupplied();\\n        assertEqApprox(\\n            leverageSupplied,\\n            _stratInitialBal.mul(_maxLeverage).div(1e18)\\n        );\\n        assertEqApprox(leverageSupplied, leverageTarget);\\n\\n        uint256 unleveragedSupplied = strategy.getSuppliedUnleveraged();\\n        assertEqApprox(unleveragedSupplied, _stratInitialBal);\\n    }\\n\\n    function test_cmpnd_dai_v1_deleverage() public {\\n        _getERC20(want, 100e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n        strategy.leverageToMax();\\n\\n        uint256 _beforeCR = strategy.getColFactor();\\n        uint256 _beforeLev = strategy.getCurrentLeverage();\\n        strategy.deleverageToMin();\\n        uint256 _afterCR = strategy.getColFactor();\\n        uint256 _afterLev = strategy.getCurrentLeverage();\\n\\n        assertTrue(_afterCR < _beforeCR);\\n        assertTrue(_afterLev < _beforeLev);\\n        assertEq(0, _afterCR); // 0 since we're not borrowing anything\\n\\n        uint256 unleveragedSupplied = strategy.getSuppliedUnleveraged();\\n        uint256 supplied = strategy.getSupplied();\\n        assertEqApprox(unleveragedSupplied, supplied);\\n    }\\n\\n    function test_cmpnd_dai_v1_withdrawSome() public {\\n        _getERC20(want, 100e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n        strategy.leverageToMax();\\n\\n        uint256 _before = IERC20(want).balanceOf(address(this));\\n        pickleJar.withdraw(25e18);\\n        uint256 _after = IERC20(want).balanceOf(address(this));\\n\\n        assertTrue(_after > _before);\\n        assertEqApprox(_after.sub(_before), 25e18);\\n\\n        _before = IERC20(want).balanceOf(address(this));\\n        pickleJar.withdraw(10e18);\\n        _after = IERC20(want).balanceOf(address(this));\\n\\n        assertTrue(_after > _before);\\n        assertEqApprox(_after.sub(_before), 10e18);\\n\\n        _before = IERC20(want).balanceOf(address(this));\\n        pickleJar.withdraw(30e18);\\n        _after = IERC20(want).balanceOf(address(this));\\n\\n        assertTrue(_after > _before);\\n        assertEqApprox(_after.sub(_before), 30e18);\\n\\n        // Make sure we're still leveraging\\n        uint256 _leverage = strategy.getCurrentLeverage();\\n        assertTrue(_leverage > 1e18);\\n    }\\n\\n    function test_cmpnd_dai_v1_withdrawAll() public {\\n        _getERC20(want, 100e18);\\n\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n\\n        strategy.leverageToMax();\\n\\n        hevm.warp(block.timestamp + 1 days);\\n        hevm.roll(block.number + 6171); // Roughly number of blocks per day\\n\\n        strategy.harvest();\\n\\n        // Withdraws back to pickleJar\\n        uint256 _before = IERC20(want).balanceOf(address(pickleJar));\\n        controller.withdrawAll(want);\\n        uint256 _after = IERC20(want).balanceOf(address(pickleJar));\\n\\n        assertTrue(_after > _before);\\n\\n        _before = IERC20(want).balanceOf(address(this));\\n        pickleJar.withdrawAll();\\n        _after = IERC20(want).balanceOf(address(this));\\n\\n        assertTrue(_after > _before);\\n\\n        // Gained some interest\\n        assertTrue(_after > _want);\\n    }\\n\\n    function test_cmpnd_dai_v1_earn_harvest_rewards() public {\\n        _getERC20(want, 100e18);\\n\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n\\n        // Fast forward one week\\n        hevm.warp(block.timestamp + 1 days);\\n        hevm.roll(block.number + 6171); // Roughly number of blocks per day\\n\\n        // Call the harvest function\\n        uint256 _before = strategy.getSupplied();\\n        uint256 _treasuryBefore = IERC20(want).balanceOf(treasury);\\n        strategy.harvest();\\n        uint256 _after = strategy.getSupplied();\\n        uint256 _treasuryAfter = IERC20(want).balanceOf(treasury);\\n\\n        uint256 earned = _after.sub(_before).mul(1000).div(955);\\n        uint256 earnedRewards = earned.mul(45).div(1000); // 4.5%\\n        uint256 actualRewardsEarned = _treasuryAfter.sub(_treasuryBefore);\\n\\n        // 4.5% performance fee is given\\n        assertEqApprox(earnedRewards, actualRewardsEarned);\\n\\n        // Withdraw\\n        uint256 _devBefore = IERC20(want).balanceOf(devfund);\\n        _treasuryBefore = IERC20(want).balanceOf(treasury);\\n        uint256 _stratBal = strategy.balanceOf();\\n        pickleJar.withdrawAll();\\n        uint256 _devAfter = IERC20(want).balanceOf(devfund);\\n        _treasuryAfter = IERC20(want).balanceOf(treasury);\\n\\n        // 0.175% goes to dev\\n        uint256 _devFund = _devAfter.sub(_devBefore);\\n        assertEq(_devFund, _stratBal.mul(175).div(100000));\\n\\n        // 0.325% goes to treasury\\n        uint256 _treasuryFund = _treasuryAfter.sub(_treasuryBefore);\\n        assertEq(_treasuryFund, _stratBal.mul(325).div(100000));\\n    }\\n\\n    function test_cmpnd_dai_v1_functions() public {\\n        _getERC20(want, 100e18);\\n\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n\\n        uint256 initialSupplied = strategy.getSupplied();\\n        uint256 initialBorrowed = strategy.getBorrowed();\\n        uint256 initialBorrowable = strategy.getBorrowable();\\n        uint256 marketColFactor = strategy.getMarketColFactor();\\n        uint256 maxLeverage = strategy.getMaxLeverage();\\n\\n        // Earn deposits 95% into strategy\\n        assertEqApprox(initialSupplied, 95e18);\\n        assertEqApprox(\\n            initialBorrowable,\\n            initialSupplied.mul(marketColFactor).div(1e18)\\n        );\\n        assertEqApprox(initialBorrowed, 0);\\n\\n        // Leverage to Max\\n        strategy.leverageToMax();\\n\\n        uint256 supplied = strategy.getSupplied();\\n        uint256 borrowed = strategy.getBorrowed();\\n        uint256 borrowable = strategy.getBorrowable();\\n        uint256 currentColFactor = strategy.getColFactor();\\n        uint256 safeLeverageColFactor = strategy.getSafeLeverageColFactor();\\n\\n        assertEqApprox(supplied, initialSupplied.mul(maxLeverage).div(1e18));\\n        assertEqApprox(borrowed, supplied.mul(safeLeverageColFactor).div(1e18));\\n        assertEqApprox(\\n            borrowable,\\n            supplied.mul(marketColFactor.sub(currentColFactor)).div(1e18)\\n        );\\n        assertEqApprox(currentColFactor, safeLeverageColFactor);\\n        assertTrue(marketColFactor > currentColFactor);\\n        assertTrue(marketColFactor > safeLeverageColFactor);\\n\\n        // Deleverage\\n        strategy.deleverageToMin();\\n\\n        uint256 deleverageSupplied = strategy.getSupplied();\\n        uint256 deleverageBorrowed = strategy.getBorrowed();\\n        uint256 deleverageBorrowable = strategy.getBorrowable();\\n\\n        assertEqApprox(deleverageSupplied, initialSupplied);\\n        assertEqApprox(deleverageBorrowed, initialBorrowed);\\n        assertEqApprox(deleverageBorrowable, initialBorrowable);\\n    }\\n\\n    function test_cmpnd_dai_v1_deleverage_stepping() public {\\n        _getERC20(want, 100e18);\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        IERC20(want).approve(address(pickleJar), _want);\\n        pickleJar.deposit(_want);\\n        pickleJar.earn();\\n        strategy.leverageToMax();\\n\\n        strategy.deleverageUntil(200e18);\\n        uint256 supplied = strategy.getSupplied();\\n        assertEqApprox(supplied, 200e18);\\n\\n        strategy.deleverageUntil(180e18);\\n        supplied = strategy.getSupplied();\\n        assertEqApprox(supplied, 180e18);\\n\\n        strategy.deleverageUntil(120e18);\\n        supplied = strategy.getSupplied();\\n        assertEqApprox(supplied, 120e18);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/uniswapv2/strategy-uni-eth-usdc-lp-v4.test.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/test-strategy-uni-farm-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\nimport \\\"../../../strategies/uniswapv2/strategy-uni-eth-usdc-lp-v4.sol\\\";\\n\\ncontract StrategyUniEthUsdcLpV4Test is StrategyUniFarmTestBase {\\n    function setUp() public {\\n        want = 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc;\\n        token1 = usdc;\\n\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = IStrategy(\\n            address(\\n                new StrategyUniEthUsdcLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        // Set time\\n        hevm.warp(startTime);\\n    }\\n\\n    // **** Tests ****\\n\\n    function test_ethusdcv3_1_timelock() public {\\n        _test_timelock();\\n    }\\n\\n    function test_ethusdcv3_1_withdraw_release() public {\\n        _test_withdraw_release();\\n    }\\n\\n    function test_ethusdcv3_1_get_earn_harvest_rewards() public {\\n        _test_get_earn_harvest_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/uniswapv2/strategy-uni-eth-dai-lp-v4.test.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/test-strategy-uni-farm-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\nimport \\\"../../../strategies/uniswapv2/strategy-uni-eth-dai-lp-v4.sol\\\";\\n\\ncontract StrategyUniEthDaiLpV4Test is StrategyUniFarmTestBase {\\n    function setUp() public {\\n        want = 0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11;\\n        token1 = dai;\\n\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = IStrategy(\\n            address(\\n                new StrategyUniEthDaiLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        // Set time\\n        hevm.warp(startTime);\\n    }\\n\\n    // **** Tests ****\\n\\n    function test_ethdaiv3_1_timelock() public {\\n        _test_timelock();\\n    }\\n\\n    function test_ethdaiv3_1_withdraw_release() public {\\n        _test_withdraw_release();\\n    }\\n\\n    function test_ethdaiv3_1_get_earn_harvest_rewards() public {\\n        _test_get_earn_harvest_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/uniswapv2/strategy-uni-eth-usdt-lp-v4.test.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/test-strategy-uni-farm-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\nimport \\\"../../../strategies/uniswapv2/strategy-uni-eth-usdt-lp-v4.sol\\\";\\n\\ncontract StrategyUniEthUsdtLpV4Test is StrategyUniFarmTestBase {\\n    function setUp() public {\\n        want = 0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852;\\n        token1 = usdt;\\n\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = IStrategy(\\n            address(\\n                new StrategyUniEthUsdtLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        // Set time\\n        hevm.warp(startTime);\\n    }\\n\\n    // **** Tests ****\\n\\n    function test_ethusdtv3_1_timelock() public {\\n        _test_timelock();\\n    }\\n\\n    function test_ethusdtv3_1_withdraw_release() public {\\n        _test_withdraw_release();\\n    }\\n\\n    function test_ethusdtv3_1_get_earn_harvest_rewards() public {\\n        _test_get_earn_harvest_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/strategies/uniswapv2/strategy-uni-eth-wbtc-lp-v2.test.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\n\\n\\nimport \\\"../../lib/test-strategy-uni-farm-base.sol\\\";\\n\\nimport \\\"../../../interfaces/strategy.sol\\\";\\nimport \\\"../../../interfaces/curve.sol\\\";\\nimport \\\"../../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../../pickle-jar.sol\\\";\\nimport \\\"../../../controller-v4.sol\\\";\\nimport \\\"../../../strategies/uniswapv2/strategy-uni-eth-wbtc-lp-v2.sol\\\";\\n\\ncontract StrategyUniEthWBtcLpV2Test is StrategyUniFarmTestBase {\\n    function setUp() public {\\n        want = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940;\\n        token1 = wbtc;\\n\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        strategy = IStrategy(\\n            address(\\n                new StrategyUniEthWBtcLpV2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        pickleJar = new PickleJar(\\n            strategy.want(),\\n            governance,\\n            timelock,\\n            address(controller)\\n        );\\n\\n        controller.setJar(strategy.want(), address(pickleJar));\\n        controller.approveStrategy(strategy.want(), address(strategy));\\n        controller.setStrategy(strategy.want(), address(strategy));\\n\\n        // Set time\\n        hevm.warp(startTime);\\n    }\\n\\n    // **** Tests ****\\n\\n    function test_ethwbtcv1_timelock() public {\\n        _test_timelock();\\n    }\\n\\n    function test_ethwbtcv1_withdraw_release() public {\\n        _test_withdraw_release();\\n    }\\n\\n    function test_ethwbtcv1_get_earn_harvest_rewards() public {\\n        _test_get_earn_harvest_rewards();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/staking-rewards.test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\n\\nimport \\\"../lib/safe-math.sol\\\";\\n\\nimport \\\"../staking-rewards.sol\\\";\\n\\nimport \\\"./lib/test.sol\\\";\\nimport \\\"./lib/mock-erc20.sol\\\";\\nimport \\\"./lib/hevm.sol\\\";\\n\\ncontract StakngRewardsTest is DSTest {\\n    using SafeMath for uint256;\\n\\n    MockERC20 stakingToken;\\n    MockERC20 rewardsToken;\\n\\n    StakingRewards stakingRewards;\\n\\n    address owner;\\n\\n    Hevm hevm = Hevm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\\n\\n    function setUp() public {\\n        owner = address(this);\\n\\n        stakingToken = new MockERC20(\\\"staking\\\", \\\"STAKE\\\");\\n        rewardsToken = new MockERC20(\\\"rewards\\\", \\\"RWD\\\");\\n\\n        stakingRewards = new StakingRewards(\\n            owner,\\n            address(rewardsToken),\\n            address(stakingToken)\\n        );\\n    }\\n\\n    function test_staking() public {\\n        uint256 stakeAmount = 100 ether;\\n        uint256 rewardAmount = 100 ether;\\n\\n        stakingToken.mint(owner, stakeAmount);\\n        rewardsToken.mint(owner, rewardAmount);\\n\\n        stakingToken.approve(address(stakingRewards), stakeAmount);\\n        stakingRewards.stake(stakeAmount);\\n\\n        // // Make sure nothing is earned\\n        uint256 _before = stakingRewards.earned(owner);\\n        assertEq(_before, 0);\\n\\n        // Fast forward\\n        hevm.warp(block.timestamp + 1 days);\\n\\n        // No funds until we actually supply funds\\n        uint256 _after = stakingRewards.earned(owner);\\n        assertEq(_after, _before);\\n\\n        // Give rewards\\n        rewardsToken.transfer(address(stakingRewards), rewardAmount);\\n        stakingRewards.notifyRewardAmount(rewardAmount);\\n\\n        uint256 _rateBefore = stakingRewards.getRewardForDuration();\\n        assertTrue(_rateBefore > 0);\\n\\n        // Fast forward\\n        _before = stakingRewards.earned(owner);\\n        hevm.warp(block.timestamp + 1 days);\\n        _after = stakingRewards.earned(owner);\\n        assertTrue(_after > _before);\\n        assertTrue(_after > 0);\\n\\n        // Add more rewards, rate should increase\\n        rewardsToken.mint(owner, rewardAmount);\\n        rewardsToken.transfer(address(stakingRewards), rewardAmount);\\n        stakingRewards.notifyRewardAmount(rewardAmount);\\n\\n        uint256 _rateAfter = stakingRewards.getRewardForDuration();\\n        assertTrue(_rateAfter > _rateBefore);\\n\\n        // Warp to period finish\\n        hevm.warp(stakingRewards.periodFinish() + 1 days);\\n\\n        // Retrieve tokens\\n        stakingRewards.getReward();\\n\\n        _before = stakingRewards.earned(owner);\\n        hevm.warp(block.timestamp + 1 days);\\n        _after = stakingRewards.earned(owner);\\n\\n        // Earn 0 after period finished\\n        assertEq(_before, 0);\\n        assertEq(_after, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/jar-converters/curve-uni.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/hevm.sol\\\";\\nimport \\\"../lib/user.sol\\\";\\nimport \\\"../lib/test-approx.sol\\\";\\nimport \\\"../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../interfaces/strategy.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../pickle-jar.sol\\\";\\nimport \\\"../../controller-v4.sol\\\";\\n\\nimport \\\"../../proxy-logic/curve.sol\\\";\\nimport \\\"../../proxy-logic/uniswapv2.sol\\\";\\n\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-dai-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-usdt-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-usdc-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-wbtc-lp-v2.sol\\\";\\n\\nimport \\\"../../strategies/curve/strategy-curve-scrv-v3_2.sol\\\";\\nimport \\\"../../strategies/curve/strategy-curve-rencrv-v2.sol\\\";\\nimport \\\"../../strategies/curve/strategy-curve-3crv-v2.sol\\\";\\n\\ncontract StrategyCurveUniJarSwapTest is DSTestDefiBase {\\n    address governance;\\n    address strategist;\\n    address devfund;\\n    address treasury;\\n    address timelock;\\n\\n    IStrategy[] curveStrategies;\\n    IStrategy[] uniStrategies;\\n\\n    PickleJar[] curvePickleJars;\\n    PickleJar[] uniPickleJars;\\n\\n    ControllerV4 controller;\\n\\n    CurveProxyLogic curveProxyLogic;\\n    UniswapV2ProxyLogic uniswapV2ProxyLogic;\\n\\n    address[] curvePools;\\n    address[] curveLps;\\n\\n    address[] uniUnderlying;\\n\\n    // Contract wide variable to avoid stack too deep errors\\n    uint256 temp;\\n\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        // Curve Strategies\\n        curveStrategies = new IStrategy[](3);\\n        curvePickleJars = new PickleJar[](curveStrategies.length);\\n        curveLps = new address[](curveStrategies.length);\\n        curvePools = new address[](curveStrategies.length);\\n\\n        curveLps[0] = three_crv;\\n        curvePools[0] = three_pool;\\n        curveStrategies[0] = IStrategy(\\n            address(\\n                new StrategyCurve3CRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        curveLps[1] = scrv;\\n        curvePools[1] = susdv2_pool;\\n        curveStrategies[1] = IStrategy(\\n            address(\\n                new StrategyCurveSCRVv3_2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        curveLps[2] = ren_crv;\\n        curvePools[2] = ren_pool;\\n        curveStrategies[2] = IStrategy(\\n            address(\\n                new StrategyCurveRenCRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        // Create PICKLE Jars\\n        for (uint256 i = 0; i < curvePickleJars.length; i++) {\\n            curvePickleJars[i] = new PickleJar(\\n                curveStrategies[i].want(),\\n                governance,\\n                timelock,\\n                address(controller)\\n            );\\n\\n            controller.setJar(\\n                curveStrategies[i].want(),\\n                address(curvePickleJars[i])\\n            );\\n            controller.approveStrategy(\\n                curveStrategies[i].want(),\\n                address(curveStrategies[i])\\n            );\\n            controller.setStrategy(\\n                curveStrategies[i].want(),\\n                address(curveStrategies[i])\\n            );\\n        }\\n\\n        // Uni strategies\\n        uniStrategies = new IStrategy[](4);\\n        uniUnderlying = new address[](uniStrategies.length);\\n        uniPickleJars = new PickleJar[](uniStrategies.length);\\n\\n        uniUnderlying[0] = dai;\\n        uniStrategies[0] = IStrategy(\\n            address(\\n                new StrategyUniEthDaiLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[1] = usdc;\\n        uniStrategies[1] = IStrategy(\\n            address(\\n                new StrategyUniEthUsdcLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[2] = usdt;\\n        uniStrategies[2] = IStrategy(\\n            address(\\n                new StrategyUniEthUsdtLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[3] = wbtc;\\n        uniStrategies[3] = IStrategy(\\n            address(\\n                new StrategyUniEthWBtcLpV2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        for (uint256 i = 0; i < uniStrategies.length; i++) {\\n            uniPickleJars[i] = new PickleJar(\\n                uniStrategies[i].want(),\\n                governance,\\n                timelock,\\n                address(controller)\\n            );\\n\\n            controller.setJar(\\n                uniStrategies[i].want(),\\n                address(uniPickleJars[i])\\n            );\\n            controller.approveStrategy(\\n                uniStrategies[i].want(),\\n                address(uniStrategies[i])\\n            );\\n            controller.setStrategy(\\n                uniStrategies[i].want(),\\n                address(uniStrategies[i])\\n            );\\n        }\\n\\n        curveProxyLogic = new CurveProxyLogic();\\n        uniswapV2ProxyLogic = new UniswapV2ProxyLogic();\\n\\n        controller.approveJarConverter(address(curveProxyLogic));\\n        controller.approveJarConverter(address(uniswapV2ProxyLogic));\\n\\n        hevm.warp(startTime);\\n    }\\n\\n    function _getCurveLP(address curve, uint256 amount) internal {\\n        if (curve == ren_pool) {\\n            _getERC20(wbtc, amount);\\n            uint256 _wbtc = IERC20(wbtc).balanceOf(address(this));\\n            IERC20(wbtc).approve(curve, _wbtc);\\n\\n            uint256[2] memory liquidity;\\n            liquidity[1] = _wbtc;\\n            ICurveFi_2(curve).add_liquidity(liquidity, 0);\\n        } else {\\n            _getERC20(dai, amount);\\n            uint256 _dai = IERC20(dai).balanceOf(address(this));\\n            IERC20(dai).approve(curve, _dai);\\n\\n            if (curve == three_pool) {\\n                uint256[3] memory liquidity;\\n                liquidity[0] = _dai;\\n                ICurveFi_3(curve).add_liquidity(liquidity, 0);\\n            } else {\\n                uint256[4] memory liquidity;\\n                liquidity[0] = _dai;\\n                ICurveFi_4(curve).add_liquidity(liquidity, 0);\\n            }\\n        }\\n    }\\n\\n    function _get_primitive_to_lp_data(\\n        address from,\\n        address to,\\n        address dustRecipient\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"primitiveToLpTokens(address,address,address)\\\",\\n                from,\\n                to,\\n                dustRecipient\\n            );\\n    }\\n\\n    function _get_curve_remove_liquidity_data(\\n        address curve,\\n        address curveLP,\\n        int128 index\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"remove_liquidity_one_coin(address,address,int128)\\\",\\n                curve,\\n                curveLP,\\n                index\\n            );\\n    }\\n\\n    // Some post swap checks\\n    // Checks if there's any leftover funds in the converter contract\\n    function _post_swap_check(uint256 fromIndex, uint256 toIndex) internal {\\n        IERC20 token0 = curvePickleJars[fromIndex].token();\\n        IUniswapV2Pair token1 = IUniswapV2Pair(\\n            address(uniPickleJars[toIndex].token())\\n        );\\n\\n        uint256 MAX_DUST = 1000;\\n\\n        // No funds left behind\\n        assertEq(curvePickleJars[fromIndex].balanceOf(address(controller)), 0);\\n        assertEq(uniPickleJars[toIndex].balanceOf(address(controller)), 0);\\n        assertTrue(token0.balanceOf(address(controller)) < MAX_DUST);\\n        assertTrue(token1.balanceOf(address(controller)) < MAX_DUST);\\n\\n        // Curve -> UNI LP should be optimal supply\\n        // Note: We refund the access, which is why its checking this balance\\n        assertTrue(IERC20(token1.token0()).balanceOf(address(this)) < MAX_DUST);\\n        assertTrue(IERC20(token1.token1()).balanceOf(address(this)) < MAX_DUST);\\n\\n        // Make sure only controller can call 'withdrawForSwap'\\n        try curveStrategies[fromIndex].withdrawForSwap(0)  {\\n            revert(\\\"!withdraw-for-swap-only-controller\\\");\\n        } catch {}\\n    }\\n\\n    function _test_check_treasury_fee(uint256 _amount, uint256 earned)\\n        internal\\n    {\\n        assertEqApprox(\\n            _amount.mul(controller.convenienceFee()).div(\\n                controller.convenienceFeeMax()\\n            ),\\n            earned.mul(2)\\n        );\\n    }\\n\\n    function _test_swap_and_check_balances(\\n        address fromPickleJar,\\n        address toPickleJar,\\n        address fromPickleJarUnderlying,\\n        uint256 fromPickleJarUnderlyingAmount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) internal {\\n        uint256 _beforeTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _beforeFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _beforeDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _beforeTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 _ret = controller.swapExactJarForJar(\\n            fromPickleJar,\\n            toPickleJar,\\n            fromPickleJarUnderlyingAmount,\\n            0, // Min receive amount\\n            targets,\\n            data\\n        );\\n\\n        uint256 _afterTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _afterFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _afterDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _afterTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 treasuryEarned = _afterTreasury.sub(_beforeTreasury);\\n\\n        assertEq(treasuryEarned, _afterDev.sub(_beforeDev));\\n        assertTrue(treasuryEarned > 0);\\n        _test_check_treasury_fee(fromPickleJarUnderlyingAmount, treasuryEarned);\\n        assertTrue(_afterFrom < _beforeFrom);\\n        assertTrue(_afterTo > _beforeTo);\\n        assertTrue(_afterTo.sub(_beforeTo) > 0);\\n        assertEq(_afterTo.sub(_beforeTo), _ret);\\n        assertEq(_afterFrom, 0);\\n    }\\n\\n    function _test_curve_uni_swap(\\n        uint256 fromIndex,\\n        uint256 toIndex,\\n        uint256 amount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) internal {\\n        // Deposit into PickleJars\\n        address from = address(curvePickleJars[fromIndex].token());\\n\\n        _getCurveLP(curvePools[fromIndex], amount);\\n\\n        uint256 _from = IERC20(from).balanceOf(address(this));\\n        IERC20(from).approve(address(curvePickleJars[fromIndex]), _from);\\n        curvePickleJars[fromIndex].deposit(_from);\\n        curvePickleJars[fromIndex].earn();\\n\\n        // Swap!\\n        uint256 _fromPickleJar = IERC20(address(curvePickleJars[fromIndex]))\\n            .balanceOf(address(this));\\n        IERC20(address(curvePickleJars[fromIndex])).approve(\\n            address(controller),\\n            _fromPickleJar\\n        );\\n\\n        // Check minimum amount\\n        try\\n            controller.swapExactJarForJar(\\n                address(curvePickleJars[fromIndex]),\\n                address(uniPickleJars[toIndex]),\\n                _fromPickleJar,\\n                uint256(-1), // Min receive amount\\n                targets,\\n                data\\n            )\\n         {\\n            revert(\\\"min-amount-should-fail\\\");\\n        } catch {}\\n\\n        _test_swap_and_check_balances(\\n            address(curvePickleJars[fromIndex]),\\n            address(uniPickleJars[toIndex]),\\n            from,\\n            _fromPickleJar,\\n            targets,\\n            data\\n        );\\n\\n        _post_swap_check(fromIndex, toIndex);\\n    }\\n\\n    // **** Tests **** //\\n\\n    function test_jar_converter_curve_uni_0_0() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 0;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = dai;\\n        int128 fromUnderlyingIndex = 0;\\n\\n        address curvePool = curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_0_1() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 1;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = usdc;\\n        int128 fromUnderlyingIndex = 1;\\n\\n        address curvePool = curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_0_2() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 2;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = usdt;\\n        int128 fromUnderlyingIndex = 2;\\n\\n        address curvePool = curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_0_3() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 3;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = usdt;\\n        int128 fromUnderlyingIndex = 2;\\n\\n        address curvePool = curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_1_0() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 0;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = usdt;\\n        int128 fromUnderlyingIndex = 2;\\n\\n        address curvePool = susdv2_deposit; // curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_1_1() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 1;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = dai;\\n        int128 fromUnderlyingIndex = 0;\\n\\n        address curvePool = susdv2_deposit; // curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_1_2() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 2;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = dai;\\n        int128 fromUnderlyingIndex = 0;\\n\\n        address curvePool = susdv2_deposit; // curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_1_3() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 3;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = dai;\\n        int128 fromUnderlyingIndex = 0;\\n\\n        address curvePool = susdv2_deposit; // curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_uni_2_3() public {\\n        uint256 fromIndex = 2;\\n        uint256 toIndex = 3;\\n        uint256 amount = 4e6;\\n\\n        address fromUnderlying = wbtc;\\n        int128 fromUnderlyingIndex = 1;\\n\\n        address curvePool = curvePools[fromIndex];\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address toWant = univ2Factory.getPair(weth, toUnderlying);\\n\\n        bytes memory data0 = _get_curve_remove_liquidity_data(\\n            curvePool,\\n            curveLps[fromIndex],\\n            fromUnderlyingIndex\\n        );\\n\\n        bytes memory data1 = _get_primitive_to_lp_data(\\n            fromUnderlying,\\n            toWant,\\n            treasury\\n        );\\n\\n        _test_curve_uni_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/jar-converters/curve-curve.test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/hevm.sol\\\";\\nimport \\\"../lib/user.sol\\\";\\nimport \\\"../lib/test-approx.sol\\\";\\nimport \\\"../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../interfaces/strategy.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../pickle-jar.sol\\\";\\nimport \\\"../../controller-v4.sol\\\";\\n\\nimport \\\"../../proxy-logic/curve.sol\\\";\\nimport \\\"../../proxy-logic/uniswapv2.sol\\\";\\n\\nimport \\\"../../strategies/curve/strategy-curve-scrv-v3_2.sol\\\";\\nimport \\\"../../strategies/curve/strategy-curve-rencrv-v2.sol\\\";\\nimport \\\"../../strategies/curve/strategy-curve-3crv-v2.sol\\\";\\n\\ncontract StrategyCurveCurveJarSwapTest is DSTestDefiBase {\\n    address governance;\\n    address strategist;\\n    address devfund;\\n    address treasury;\\n    address timelock;\\n\\n    IStrategy[] curveStrategies;\\n\\n    PickleJar[] curvePickleJars;\\n\\n    ControllerV4 controller;\\n\\n    CurveProxyLogic curveProxyLogic;\\n    UniswapV2ProxyLogic uniswapV2ProxyLogic;\\n\\n    address[] curvePools;\\n    address[] curveLps;\\n\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        // Curve Strategies\\n        curveStrategies = new IStrategy[](3);\\n        curvePickleJars = new PickleJar[](curveStrategies.length);\\n        curveLps = new address[](curveStrategies.length);\\n        curvePools = new address[](curveStrategies.length);\\n\\n        curveLps[0] = three_crv;\\n        curvePools[0] = three_pool;\\n        curveStrategies[0] = IStrategy(\\n            address(\\n                new StrategyCurve3CRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n        curveLps[1] = scrv;\\n        curvePools[1] = susdv2_pool;\\n        curveStrategies[1] = IStrategy(\\n            address(\\n                new StrategyCurveSCRVv3_2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n        curveLps[2] = ren_crv;\\n        curvePools[2] = ren_pool;\\n        curveStrategies[2] = IStrategy(\\n            address(\\n                new StrategyCurveRenCRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        // Create PICKLE Jars\\n        for (uint256 i = 0; i < curvePickleJars.length; i++) {\\n            curvePickleJars[i] = new PickleJar(\\n                curveStrategies[i].want(),\\n                governance,\\n                timelock,\\n                address(controller)\\n            );\\n\\n            controller.setJar(\\n                curveStrategies[i].want(),\\n                address(curvePickleJars[i])\\n            );\\n            controller.approveStrategy(\\n                curveStrategies[i].want(),\\n                address(curveStrategies[i])\\n            );\\n            controller.setStrategy(\\n                curveStrategies[i].want(),\\n                address(curveStrategies[i])\\n            );\\n        }\\n\\n        curveProxyLogic = new CurveProxyLogic();\\n        uniswapV2ProxyLogic = new UniswapV2ProxyLogic();\\n\\n        controller.approveJarConverter(address(curveProxyLogic));\\n        controller.approveJarConverter(address(uniswapV2ProxyLogic));\\n\\n        hevm.warp(startTime);\\n    }\\n\\n    function _getCurveLP(address curve, uint256 amount) internal {\\n        if (curve == ren_pool) {\\n            _getERC20(wbtc, amount);\\n            uint256 _wbtc = IERC20(wbtc).balanceOf(address(this));\\n            IERC20(wbtc).approve(curve, _wbtc);\\n\\n            uint256[2] memory liquidity;\\n            liquidity[1] = _wbtc;\\n            ICurveFi_2(curve).add_liquidity(liquidity, 0);\\n        } else {\\n            _getERC20(dai, amount);\\n            uint256 _dai = IERC20(dai).balanceOf(address(this));\\n            IERC20(dai).approve(curve, _dai);\\n\\n            if (curve == three_pool) {\\n                uint256[3] memory liquidity;\\n                liquidity[0] = _dai;\\n                ICurveFi_3(curve).add_liquidity(liquidity, 0);\\n            } else {\\n                uint256[4] memory liquidity;\\n                liquidity[0] = _dai;\\n                ICurveFi_4(curve).add_liquidity(liquidity, 0);\\n            }\\n        }\\n    }\\n\\n    // **** Internal functions **** //\\n    // Theres so many internal functions due to stack blowing up\\n\\n    // Some post swap checks\\n    // Checks if there's any leftover funds in the converter contract\\n    function _post_swap_check(uint256 fromIndex, uint256 toIndex) internal {\\n        IERC20 token0 = curvePickleJars[fromIndex].token();\\n        IERC20 token1 = curvePickleJars[toIndex].token();\\n\\n        uint256 MAX_DUST = 10;\\n\\n        // No funds left behind\\n        assertEq(curvePickleJars[fromIndex].balanceOf(address(controller)), 0);\\n        assertEq(curvePickleJars[toIndex].balanceOf(address(controller)), 0);\\n        assertTrue(token0.balanceOf(address(controller)) < MAX_DUST);\\n        assertTrue(token1.balanceOf(address(controller)) < MAX_DUST);\\n\\n        // Make sure only controller can call 'withdrawForSwap'\\n        try curveStrategies[fromIndex].withdrawForSwap(0)  {\\n            revert(\\\"!withdraw-for-swap-only-controller\\\");\\n        } catch {}\\n    }\\n\\n    function _test_check_treasury_fee(uint256 _amount, uint256 earned)\\n        internal\\n    {\\n        assertEqApprox(\\n            _amount.mul(controller.convenienceFee()).div(\\n                controller.convenienceFeeMax()\\n            ),\\n            earned.mul(2)\\n        );\\n    }\\n\\n    function _test_swap_and_check_balances(\\n        address fromPickleJar,\\n        address toPickleJar,\\n        address fromPickleJarUnderlying,\\n        uint256 fromPickleJarUnderlyingAmount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) internal {\\n        uint256 _beforeTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _beforeFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _beforeDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _beforeTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 _ret = controller.swapExactJarForJar(\\n            fromPickleJar,\\n            toPickleJar,\\n            fromPickleJarUnderlyingAmount,\\n            0, // Min receive amount\\n            targets,\\n            data\\n        );\\n\\n        uint256 _afterTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _afterFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _afterDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _afterTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 treasuryEarned = _afterTreasury.sub(_beforeTreasury);\\n\\n        assertEq(treasuryEarned, _afterDev.sub(_beforeDev));\\n        assertTrue(treasuryEarned > 0);\\n        _test_check_treasury_fee(fromPickleJarUnderlyingAmount, treasuryEarned);\\n        assertTrue(_afterFrom < _beforeFrom);\\n        assertTrue(_afterTo > _beforeTo);\\n        assertTrue(_afterTo.sub(_beforeTo) > 0);\\n        assertEq(_afterTo.sub(_beforeTo), _ret);\\n        assertEq(_afterFrom, 0);\\n    }\\n\\n    function _get_uniswap_pl_swap_data(address from, address to)\\n        internal pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodeWithSignature(\\\"swapUniswap(address,address)\\\", from, to);\\n    }\\n\\n    function _test_curve_curve(\\n        uint256 fromIndex,\\n        uint256 toIndex,\\n        uint256 amount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) public {\\n        // Get LP\\n        _getCurveLP(curvePools[fromIndex], amount);\\n\\n        // Deposit into pickle jars\\n        address from = address(curvePickleJars[fromIndex].token());\\n        uint256 _from = IERC20(from).balanceOf(address(this));\\n        IERC20(from).approve(address(curvePickleJars[fromIndex]), _from);\\n        curvePickleJars[fromIndex].deposit(_from);\\n        curvePickleJars[fromIndex].earn();\\n\\n        // Approve controller\\n        uint256 _fromPickleJar = IERC20(address(curvePickleJars[fromIndex]))\\n            .balanceOf(address(this));\\n        IERC20(address(curvePickleJars[fromIndex])).approve(\\n            address(controller),\\n            _fromPickleJar\\n        );\\n\\n        // Swap\\n        try\\n            controller.swapExactJarForJar(\\n                address(curvePickleJars[fromIndex]),\\n                address(curvePickleJars[toIndex]),\\n                _fromPickleJar,\\n                uint256(-1), // Min receive amount\\n                targets,\\n                data\\n            )\\n         {\\n            revert(\\\"min-receive-amount\\\");\\n        } catch {}\\n\\n        _test_swap_and_check_balances(\\n            address(curvePickleJars[fromIndex]),\\n            address(curvePickleJars[toIndex]),\\n            from,\\n            _fromPickleJar,\\n            targets,\\n            data\\n        );\\n\\n        _post_swap_check(fromIndex, toIndex);\\n    }\\n\\n    // **** Tests ****\\n\\n    function test_jar_converter_curve_curve_0() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 1;\\n        uint256 amount = 400e18;\\n\\n        int128 fromCurveUnderlyingIndex = 0;\\n\\n        bytes4 toCurveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[4],uint256)\\\"\\n        );\\n        uint256 toCurvePoolSize = 4;\\n        uint256 toCurveUnderlyingIndex = 0;\\n        address toCurveUnderlying = dai;\\n\\n        // Remove liquidity\\n        address fromCurve = curvePools[fromIndex];\\n        address fromCurveLp = curveLps[fromIndex];\\n\\n        address payable target0 = payable(address(curveProxyLogic));\\n        bytes memory data0 = abi.encodeWithSignature(\\n            \\\"remove_liquidity_one_coin(address,address,int128)\\\",\\n            fromCurve,\\n            fromCurveLp,\\n            fromCurveUnderlyingIndex\\n        );\\n\\n        // Add liquidity\\n        address toCurve = curvePools[toIndex];\\n\\n        address payable target1 = payable(address(curveProxyLogic));\\n        bytes memory data1 = abi.encodeWithSignature(\\n            \\\"add_liquidity(address,bytes4,uint256,uint256,address)\\\",\\n            toCurve,\\n            toCurveFunctionSig,\\n            toCurvePoolSize,\\n            toCurveUnderlyingIndex,\\n            toCurveUnderlying\\n        );\\n\\n        // Swap\\n        _test_curve_curve(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(target0, target1),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_curve_1() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 2;\\n        uint256 amount = 400e18;\\n\\n        int128 fromCurveUnderlyingIndex = 0;\\n\\n        bytes4 toCurveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[2],uint256)\\\"\\n        );\\n        uint256 toCurvePoolSize = 2;\\n        uint256 toCurveUnderlyingIndex = 1;\\n        address toCurveUnderlying = wbtc;\\n\\n        // Remove liquidity\\n        address fromCurve = curvePools[fromIndex];\\n        address fromCurveLp = curveLps[fromIndex];\\n\\n        bytes memory data0 = abi.encodeWithSignature(\\n            \\\"remove_liquidity_one_coin(address,address,int128)\\\",\\n            fromCurve,\\n            fromCurveLp,\\n            fromCurveUnderlyingIndex\\n        );\\n\\n        // Swap\\n        bytes memory data1 = _get_uniswap_pl_swap_data(dai, toCurveUnderlying);\\n\\n        // Add liquidity\\n        address toCurve = curvePools[toIndex];\\n\\n        bytes memory data2 = abi.encodeWithSignature(\\n            \\\"add_liquidity(address,bytes4,uint256,uint256,address)\\\",\\n            toCurve,\\n            toCurveFunctionSig,\\n            toCurvePoolSize,\\n            toCurveUnderlyingIndex,\\n            toCurveUnderlying\\n        );\\n\\n        _test_curve_curve(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1, data2)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_curve_2() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 0;\\n        uint256 amount = 400e18;\\n\\n        int128 fromCurveUnderlyingIndex = 1;\\n\\n        bytes4 toCurveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[3],uint256)\\\"\\n        );\\n        uint256 toCurvePoolSize = 3;\\n        uint256 toCurveUnderlyingIndex = 2;\\n        address toCurveUnderlying = usdt;\\n\\n        // Remove liquidity\\n        address fromCurve = susdv2_deposit; // curvePools[fromIndex];\\n        address fromCurveLp = curveLps[fromIndex];\\n\\n        bytes memory data0 = abi.encodeWithSignature(\\n            \\\"remove_liquidity_one_coin(address,address,int128)\\\",\\n            fromCurve,\\n            fromCurveLp,\\n            fromCurveUnderlyingIndex\\n        );\\n\\n        // Swap\\n        bytes memory data1 = _get_uniswap_pl_swap_data(usdc, usdt);\\n\\n        // Add liquidity\\n        address toCurve = curvePools[toIndex];\\n\\n        bytes memory data2 = abi.encodeWithSignature(\\n            \\\"add_liquidity(address,bytes4,uint256,uint256,address)\\\",\\n            toCurve,\\n            toCurveFunctionSig,\\n            toCurvePoolSize,\\n            toCurveUnderlyingIndex,\\n            toCurveUnderlying\\n        );\\n\\n        _test_curve_curve(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1, data2)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_curve_3() public {\\n        uint256 fromIndex = 2;\\n        uint256 toIndex = 0;\\n        uint256 amount = 4e6;\\n\\n        int128 fromCurveUnderlyingIndex = 1;\\n\\n        bytes4 toCurveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[3],uint256)\\\"\\n        );\\n        uint256 toCurvePoolSize = 3;\\n        uint256 toCurveUnderlyingIndex = 1;\\n        address toCurveUnderlying = usdc;\\n\\n        // Remove liquidity\\n        address fromCurve = curvePools[fromIndex];\\n        address fromCurveLp = curveLps[fromIndex];\\n\\n        bytes memory data0 = abi.encodeWithSignature(\\n            \\\"remove_liquidity_one_coin(address,address,int128)\\\",\\n            fromCurve,\\n            fromCurveLp,\\n            fromCurveUnderlyingIndex\\n        );\\n\\n        // Swap\\n        bytes memory data1 = _get_uniswap_pl_swap_data(wbtc, usdc);\\n\\n        // Add liquidity\\n        address toCurve = curvePools[toIndex];\\n\\n        bytes memory data2 = abi.encodeWithSignature(\\n            \\\"add_liquidity(address,bytes4,uint256,uint256,address)\\\",\\n            toCurve,\\n            toCurveFunctionSig,\\n            toCurvePoolSize,\\n            toCurveUnderlyingIndex,\\n            toCurveUnderlying\\n        );\\n\\n        _test_curve_curve(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1, data2)\\n        );\\n    }\\n\\n    function test_jar_converter_curve_curve_4() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 0;\\n        uint256 amount = 400e18;\\n\\n        int128 fromCurveUnderlyingIndex = 2;\\n\\n        bytes4 toCurveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[3],uint256)\\\"\\n        );\\n        uint256 toCurvePoolSize = 3;\\n        uint256 toCurveUnderlyingIndex = 1;\\n        address toCurveUnderlying = usdc;\\n\\n        // Remove liquidity\\n        address fromCurve = susdv2_deposit;\\n        address fromCurveLp = curveLps[fromIndex];\\n\\n        bytes memory data0 = abi.encodeWithSignature(\\n            \\\"remove_liquidity_one_coin(address,address,int128)\\\",\\n            fromCurve,\\n            fromCurveLp,\\n            fromCurveUnderlyingIndex\\n        );\\n\\n        // Swap\\n        bytes memory data1 = _get_uniswap_pl_swap_data(usdt, usdc);\\n\\n        // Add liquidity\\n        address toCurve = curvePools[toIndex];\\n\\n        bytes memory data2 = abi.encodeWithSignature(\\n            \\\"add_liquidity(address,bytes4,uint256,uint256,address)\\\",\\n            toCurve,\\n            toCurveFunctionSig,\\n            toCurvePoolSize,\\n            toCurveUnderlyingIndex,\\n            toCurveUnderlying\\n        );\\n\\n        _test_curve_curve(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(curveProxyLogic)),\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1, data2)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/jar-converters/uni-uni.test.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/hevm.sol\\\";\\nimport \\\"../lib/user.sol\\\";\\nimport \\\"../lib/test-approx.sol\\\";\\nimport \\\"../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../interfaces/strategy.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../pickle-jar.sol\\\";\\nimport \\\"../../controller-v4.sol\\\";\\n\\nimport \\\"../../proxy-logic/curve.sol\\\";\\nimport \\\"../../proxy-logic/uniswapv2.sol\\\";\\n\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-dai-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-usdt-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-usdc-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-wbtc-lp-v2.sol\\\";\\n\\ncontract StrategyUniUniJarSwapTest is DSTestDefiBase {\\n    address governance;\\n    address strategist;\\n    address devfund;\\n    address treasury;\\n    address timelock;\\n\\n    IStrategy[] uniStrategies;\\n    PickleJar[] uniPickleJars;\\n\\n    ControllerV4 controller;\\n\\n    CurveProxyLogic curveProxyLogic;\\n    UniswapV2ProxyLogic uniswapV2ProxyLogic;\\n\\n    address[] uniUnderlying;\\n\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        // Uni strategies\\n        uniStrategies = new IStrategy[](4);\\n        uniUnderlying = new address[](uniStrategies.length);\\n        uniPickleJars = new PickleJar[](uniStrategies.length);\\n\\n        uniUnderlying[0] = dai;\\n        uniStrategies[0] = IStrategy(\\n            address(\\n                new StrategyUniEthDaiLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[1] = usdc;\\n        uniStrategies[1] = IStrategy(\\n            address(\\n                new StrategyUniEthUsdcLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[2] = usdt;\\n        uniStrategies[2] = IStrategy(\\n            address(\\n                new StrategyUniEthUsdtLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[3] = wbtc;\\n        uniStrategies[3] = IStrategy(\\n            address(\\n                new StrategyUniEthWBtcLpV2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        for (uint256 i = 0; i < uniStrategies.length; i++) {\\n            uniPickleJars[i] = new PickleJar(\\n                uniStrategies[i].want(),\\n                governance,\\n                timelock,\\n                address(controller)\\n            );\\n\\n            controller.setJar(\\n                uniStrategies[i].want(),\\n                address(uniPickleJars[i])\\n            );\\n            controller.approveStrategy(\\n                uniStrategies[i].want(),\\n                address(uniStrategies[i])\\n            );\\n            controller.setStrategy(\\n                uniStrategies[i].want(),\\n                address(uniStrategies[i])\\n            );\\n        }\\n\\n        curveProxyLogic = new CurveProxyLogic();\\n        uniswapV2ProxyLogic = new UniswapV2ProxyLogic();\\n\\n        controller.approveJarConverter(address(curveProxyLogic));\\n        controller.approveJarConverter(address(uniswapV2ProxyLogic));\\n\\n        hevm.warp(startTime);\\n    }\\n\\n    function _getUniLP(\\n        address lp,\\n        uint256 ethAmount,\\n        uint256 otherAmount\\n    ) internal {\\n        IUniswapV2Pair fromPair = IUniswapV2Pair(lp);\\n\\n        address other = fromPair.token0() != weth\\n            ? fromPair.token0()\\n            : fromPair.token1();\\n\\n        _getERC20(other, otherAmount);\\n\\n        uint256 _other = IERC20(other).balanceOf(address(this));\\n\\n        IERC20(other).safeApprove(address(univ2), 0);\\n        IERC20(other).safeApprove(address(univ2), _other);\\n\\n        univ2.addLiquidityETH{value: ethAmount}(\\n            other,\\n            _other,\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    function _get_swap_lp_data(\\n        address from,\\n        address to,\\n        address dustRecipient\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"swapUniLPTokens(address,address,address)\\\",\\n                from,\\n                to,\\n                dustRecipient\\n            );\\n    }\\n\\n    function _post_swap_check(uint256 fromIndex, uint256 toIndex) internal {\\n        IERC20 token0 = uniPickleJars[fromIndex].token();\\n        IERC20 token1 = uniPickleJars[toIndex].token();\\n\\n        uint256 MAX_DUST = 10;\\n\\n        // No funds left behind\\n        assertEq(uniPickleJars[fromIndex].balanceOf(address(controller)), 0);\\n        assertEq(uniPickleJars[toIndex].balanceOf(address(controller)), 0);\\n        assertTrue(token0.balanceOf(address(controller)) < MAX_DUST);\\n        assertTrue(token1.balanceOf(address(controller)) < MAX_DUST);\\n\\n        // Make sure only controller can call 'withdrawForSwap'\\n        try uniStrategies[fromIndex].withdrawForSwap(0)  {\\n            revert(\\\"!withdraw-for-swap-only-controller\\\");\\n        } catch {}\\n    }\\n\\n    function _test_check_treasury_fee(uint256 _amount, uint256 earned)\\n        internal\\n    {\\n        assertEqApprox(\\n            _amount.mul(controller.convenienceFee()).div(\\n                controller.convenienceFeeMax()\\n            ),\\n            earned.mul(2)\\n        );\\n    }\\n\\n    function _test_swap_and_check_balances(\\n        address fromPickleJar,\\n        address toPickleJar,\\n        address fromPickleJarUnderlying,\\n        uint256 fromPickleJarUnderlyingAmount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) internal {\\n        uint256 _beforeTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _beforeFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _beforeDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _beforeTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 _ret = controller.swapExactJarForJar(\\n            fromPickleJar,\\n            toPickleJar,\\n            fromPickleJarUnderlyingAmount,\\n            0, // Min receive amount\\n            targets,\\n            data\\n        );\\n\\n        uint256 _afterTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _afterFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _afterDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _afterTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 treasuryEarned = _afterTreasury.sub(_beforeTreasury);\\n\\n        assertEq(treasuryEarned, _afterDev.sub(_beforeDev));\\n        assertTrue(treasuryEarned > 0);\\n        _test_check_treasury_fee(fromPickleJarUnderlyingAmount, treasuryEarned);\\n        assertTrue(_afterFrom < _beforeFrom);\\n        assertTrue(_afterTo > _beforeTo);\\n        assertTrue(_afterTo.sub(_beforeTo) > 0);\\n        assertEq(_afterTo.sub(_beforeTo), _ret);\\n        assertEq(_afterFrom, 0);\\n    }\\n\\n    function _test_uni_uni(\\n        uint256 fromIndex,\\n        uint256 toIndex,\\n        uint256 amount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) internal {\\n        address from = address(uniPickleJars[fromIndex].token());\\n\\n        _getUniLP(from, 1e18, amount);\\n\\n        uint256 _from = IERC20(from).balanceOf(address(this));\\n        IERC20(from).approve(address(uniPickleJars[fromIndex]), _from);\\n        uniPickleJars[fromIndex].deposit(_from);\\n        uniPickleJars[fromIndex].earn();\\n\\n        // Swap!\\n        uint256 _fromPickleJar = IERC20(address(uniPickleJars[fromIndex]))\\n            .balanceOf(address(this));\\n        IERC20(address(uniPickleJars[fromIndex])).approve(\\n            address(controller),\\n            _fromPickleJar\\n        );\\n\\n        // Check minimum amount\\n        try\\n            controller.swapExactJarForJar(\\n                address(uniPickleJars[fromIndex]),\\n                address(uniPickleJars[toIndex]),\\n                _fromPickleJar,\\n                uint256(-1), // Min receive amount\\n                targets,\\n                data\\n            )\\n         {\\n            revert(\\\"min-amount-should-fail\\\");\\n        } catch {}\\n\\n        _test_swap_and_check_balances(\\n            address(uniPickleJars[fromIndex]),\\n            address(uniPickleJars[toIndex]),\\n            from,\\n            _fromPickleJar,\\n            targets,\\n            data\\n        );\\n\\n        _post_swap_check(fromIndex, toIndex);\\n    }\\n\\n    // **** Tests ****\\n\\n    function test_jar_converter_uni_uni_0() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 1;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n        address from = univ2Factory.getPair(weth, fromUnderlying);\\n\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address to = univ2Factory.getPair(weth, toUnderlying);\\n\\n        _test_uni_uni(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(payable(address(uniswapV2ProxyLogic))),\\n            _getDynamicArray(_get_swap_lp_data(from, to, treasury))\\n        );\\n    }\\n\\n    function test_jar_converter_uni_uni_1() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 2;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n        address from = univ2Factory.getPair(weth, fromUnderlying);\\n\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address to = univ2Factory.getPair(weth, toUnderlying);\\n\\n        _test_uni_uni(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(payable(address(uniswapV2ProxyLogic))),\\n            _getDynamicArray(_get_swap_lp_data(from, to, treasury))\\n        );\\n    }\\n\\n    function test_jar_converter_uni_uni_2() public {\\n        uint256 fromIndex = 2;\\n        uint256 toIndex = 3;\\n        uint256 amount = 400e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n        address from = univ2Factory.getPair(weth, fromUnderlying);\\n\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address to = univ2Factory.getPair(weth, toUnderlying);\\n\\n        _test_uni_uni(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(payable(address(uniswapV2ProxyLogic))),\\n            _getDynamicArray(_get_swap_lp_data(from, to, treasury))\\n        );\\n    }\\n\\n    function test_jar_converter_uni_uni_3() public {\\n        uint256 fromIndex = 3;\\n        uint256 toIndex = 2;\\n        uint256 amount = 4e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n        address from = univ2Factory.getPair(weth, fromUnderlying);\\n\\n        address toUnderlying = uniUnderlying[toIndex];\\n        address to = univ2Factory.getPair(weth, toUnderlying);\\n\\n        _test_uni_uni(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(payable(address(uniswapV2ProxyLogic))),\\n            _getDynamicArray(_get_swap_lp_data(from, to, treasury))\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tests/jar-converters/uni-curve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../lib/hevm.sol\\\";\\nimport \\\"../lib/user.sol\\\";\\nimport \\\"../lib/test-approx.sol\\\";\\nimport \\\"../lib/test-defi-base.sol\\\";\\n\\nimport \\\"../../interfaces/strategy.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\n\\nimport \\\"../../pickle-jar.sol\\\";\\nimport \\\"../../controller-v4.sol\\\";\\n\\nimport \\\"../../proxy-logic/curve.sol\\\";\\nimport \\\"../../proxy-logic/uniswapv2.sol\\\";\\n\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-dai-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-usdt-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-usdc-lp-v4.sol\\\";\\nimport \\\"../../strategies/uniswapv2/strategy-uni-eth-wbtc-lp-v2.sol\\\";\\n\\nimport \\\"../../strategies/curve/strategy-curve-scrv-v3_2.sol\\\";\\nimport \\\"../../strategies/curve/strategy-curve-rencrv-v2.sol\\\";\\nimport \\\"../../strategies/curve/strategy-curve-3crv-v2.sol\\\";\\n\\ncontract StrategyUniCurveJarSwapTest is DSTestDefiBase {\\n    address governance;\\n    address strategist;\\n    address devfund;\\n    address treasury;\\n    address timelock;\\n\\n    IStrategy[] curveStrategies;\\n    IStrategy[] uniStrategies;\\n\\n    PickleJar[] curvePickleJars;\\n    PickleJar[] uniPickleJars;\\n\\n    ControllerV4 controller;\\n\\n    CurveProxyLogic curveProxyLogic;\\n    UniswapV2ProxyLogic uniswapV2ProxyLogic;\\n\\n    address[] curvePools;\\n    address[] curveLps;\\n\\n    address[] uniUnderlying;\\n\\n    // Contract wide variable to avoid stack too deep errors\\n    uint256 temp;\\n\\n    function setUp() public {\\n        governance = address(this);\\n        strategist = address(this);\\n        devfund = address(new User());\\n        treasury = address(new User());\\n        timelock = address(this);\\n\\n        controller = new ControllerV4(\\n            governance,\\n            strategist,\\n            timelock,\\n            devfund,\\n            treasury\\n        );\\n\\n        // Curve Strategies\\n        curveStrategies = new IStrategy[](3);\\n        curvePickleJars = new PickleJar[](curveStrategies.length);\\n        curveLps = new address[](curveStrategies.length);\\n        curvePools = new address[](curveStrategies.length);\\n\\n        curveLps[0] = three_crv;\\n        curvePools[0] = three_pool;\\n        curveStrategies[0] = IStrategy(\\n            address(\\n                new StrategyCurve3CRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        curveLps[1] = scrv;\\n        curvePools[1] = susdv2_pool;\\n        curveStrategies[1] = IStrategy(\\n            address(\\n                new StrategyCurveSCRVv3_2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        curveLps[2] = ren_crv;\\n        curvePools[2] = ren_pool;\\n        curveStrategies[2] = IStrategy(\\n            address(\\n                new StrategyCurveRenCRVv2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        // Create PICKLE Jars\\n        for (uint256 i = 0; i < curvePickleJars.length; i++) {\\n            curvePickleJars[i] = new PickleJar(\\n                curveStrategies[i].want(),\\n                governance,\\n                timelock,\\n                address(controller)\\n            );\\n\\n            controller.setJar(\\n                curveStrategies[i].want(),\\n                address(curvePickleJars[i])\\n            );\\n            controller.approveStrategy(\\n                curveStrategies[i].want(),\\n                address(curveStrategies[i])\\n            );\\n            controller.setStrategy(\\n                curveStrategies[i].want(),\\n                address(curveStrategies[i])\\n            );\\n        }\\n\\n        // Uni strategies\\n        uniStrategies = new IStrategy[](4);\\n        uniUnderlying = new address[](uniStrategies.length);\\n        uniPickleJars = new PickleJar[](uniStrategies.length);\\n\\n        uniUnderlying[0] = dai;\\n        uniStrategies[0] = IStrategy(\\n            address(\\n                new StrategyUniEthDaiLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[1] = usdc;\\n        uniStrategies[1] = IStrategy(\\n            address(\\n                new StrategyUniEthUsdcLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[2] = usdt;\\n        uniStrategies[2] = IStrategy(\\n            address(\\n                new StrategyUniEthUsdtLpV4(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        uniUnderlying[3] = wbtc;\\n        uniStrategies[3] = IStrategy(\\n            address(\\n                new StrategyUniEthWBtcLpV2(\\n                    governance,\\n                    strategist,\\n                    address(controller),\\n                    timelock\\n                )\\n            )\\n        );\\n\\n        for (uint256 i = 0; i < uniStrategies.length; i++) {\\n            uniPickleJars[i] = new PickleJar(\\n                uniStrategies[i].want(),\\n                governance,\\n                timelock,\\n                address(controller)\\n            );\\n\\n            controller.setJar(\\n                uniStrategies[i].want(),\\n                address(uniPickleJars[i])\\n            );\\n            controller.approveStrategy(\\n                uniStrategies[i].want(),\\n                address(uniStrategies[i])\\n            );\\n            controller.setStrategy(\\n                uniStrategies[i].want(),\\n                address(uniStrategies[i])\\n            );\\n        }\\n\\n        curveProxyLogic = new CurveProxyLogic();\\n        uniswapV2ProxyLogic = new UniswapV2ProxyLogic();\\n\\n        controller.approveJarConverter(address(curveProxyLogic));\\n        controller.approveJarConverter(address(uniswapV2ProxyLogic));\\n\\n        hevm.warp(startTime);\\n    }\\n\\n    function _getUniLP(\\n        address lp,\\n        uint256 ethAmount,\\n        uint256 otherAmount\\n    ) internal {\\n        IUniswapV2Pair fromPair = IUniswapV2Pair(lp);\\n\\n        address other = fromPair.token0() != weth\\n            ? fromPair.token0()\\n            : fromPair.token1();\\n\\n        _getERC20(other, otherAmount);\\n\\n        uint256 _other = IERC20(other).balanceOf(address(this));\\n\\n        IERC20(other).safeApprove(address(univ2), 0);\\n        IERC20(other).safeApprove(address(univ2), _other);\\n\\n        univ2.addLiquidityETH{value: ethAmount}(\\n            other,\\n            _other,\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n    }\\n\\n    function _get_uniswap_remove_liquidity_data(address pair)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSignature(\\\"removeLiquidity(address)\\\", pair);\\n    }\\n\\n    function _get_uniswap_lp_tokens_to_primitive(address from, address to)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"lpTokensToPrimitive(address,address)\\\",\\n                from,\\n                to\\n            );\\n    }\\n\\n    function _get_curve_add_liquidity_data(\\n        address curve,\\n        bytes4 curveFunctionSig,\\n        uint256 curvePoolSize,\\n        uint256 curveUnderlyingIndex,\\n        address underlying\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"add_liquidity(address,bytes4,uint256,uint256,address)\\\",\\n                curve,\\n                curveFunctionSig,\\n                curvePoolSize,\\n                curveUnderlyingIndex,\\n                underlying\\n            );\\n    }\\n\\n    // Some post swap checks\\n    // Checks if there's any leftover funds in the converter contract\\n    function _post_swap_check(uint256 fromIndex, uint256 toIndex) internal {\\n        IERC20 token0 = uniPickleJars[fromIndex].token();\\n        IERC20 token1 = curvePickleJars[toIndex].token();\\n\\n        // No funds left behind\\n        assertEq(uniPickleJars[fromIndex].balanceOf(address(controller)), 0);\\n        assertEq(curvePickleJars[toIndex].balanceOf(address(controller)), 0);\\n        assertEq(token0.balanceOf(address(controller)), 0);\\n        assertEq(token1.balanceOf(address(controller)), 0);\\n        assertEq(IERC20(wbtc).balanceOf(address(controller)), 0);\\n        // assertEq(IERC20(usdt).balanceOf(address(controller)), 0);\\n        // assertEq(IERC20(usdc).balanceOf(address(controller)), 0);\\n        // assertEq(IERC20(susd).balanceOf(address(controller)), 0);\\n        // assertEq(IERC20(dai).balanceOf(address(controller)), 0);\\n\\n        // No balance left behind!\\n        assertEq(token1.balanceOf(address(this)), 0);\\n\\n        // Make sure only controller can call 'withdrawForSwap'\\n        try uniStrategies[fromIndex].withdrawForSwap(0)  {\\n            revert(\\\"!withdraw-for-swap-only-controller\\\");\\n        } catch {}\\n    }\\n\\n    function _test_check_treasury_fee(uint256 _amount, uint256 earned)\\n        internal\\n    {\\n        assertEqApprox(\\n            _amount.mul(controller.convenienceFee()).div(\\n                controller.convenienceFeeMax()\\n            ),\\n            earned.mul(2)\\n        );\\n    }\\n\\n    function _test_swap_and_check_balances(\\n        address fromPickleJar,\\n        address toPickleJar,\\n        address fromPickleJarUnderlying,\\n        uint256 fromPickleJarUnderlyingAmount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) internal {\\n        uint256 _beforeTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _beforeFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _beforeDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _beforeTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 _ret = controller.swapExactJarForJar(\\n            fromPickleJar,\\n            toPickleJar,\\n            fromPickleJarUnderlyingAmount,\\n            0, // Min receive amount\\n            targets,\\n            data\\n        );\\n\\n        uint256 _afterTo = IERC20(toPickleJar).balanceOf(address(this));\\n        uint256 _afterFrom = IERC20(fromPickleJar).balanceOf(address(this));\\n\\n        uint256 _afterDev = IERC20(fromPickleJarUnderlying).balanceOf(devfund);\\n        uint256 _afterTreasury = IERC20(fromPickleJarUnderlying).balanceOf(\\n            treasury\\n        );\\n\\n        uint256 treasuryEarned = _afterTreasury.sub(_beforeTreasury);\\n\\n        assertEq(treasuryEarned, _afterDev.sub(_beforeDev));\\n        assertTrue(treasuryEarned > 0);\\n        _test_check_treasury_fee(fromPickleJarUnderlyingAmount, treasuryEarned);\\n        assertTrue(_afterFrom < _beforeFrom);\\n        assertTrue(_afterTo > _beforeTo);\\n        assertTrue(_afterTo.sub(_beforeTo) > 0);\\n        assertEq(_afterTo.sub(_beforeTo), _ret);\\n        assertEq(_afterFrom, 0);\\n    }\\n\\n    function _test_uni_curve_swap(\\n        uint256 fromIndex,\\n        uint256 toIndex,\\n        uint256 amount,\\n        address payable[] memory targets,\\n        bytes[] memory data\\n    ) internal {\\n        // Deposit into PickleJars\\n        address from = address(uniPickleJars[fromIndex].token());\\n\\n        _getUniLP(from, 1e18, amount);\\n\\n        uint256 _from = IERC20(from).balanceOf(address(this));\\n        IERC20(from).approve(address(uniPickleJars[fromIndex]), _from);\\n        uniPickleJars[fromIndex].deposit(_from);\\n        uniPickleJars[fromIndex].earn();\\n\\n        // Swap!\\n        uint256 _fromPickleJar = IERC20(address(uniPickleJars[fromIndex]))\\n            .balanceOf(address(this));\\n        IERC20(address(uniPickleJars[fromIndex])).approve(\\n            address(controller),\\n            _fromPickleJar\\n        );\\n\\n        // Check minimum amount\\n        try\\n            controller.swapExactJarForJar(\\n                address(uniPickleJars[fromIndex]),\\n                address(curvePickleJars[toIndex]),\\n                _fromPickleJar,\\n                uint256(-1), // Min receive amount\\n                targets,\\n                data\\n            )\\n         {\\n            revert(\\\"min-amount-should-fail\\\");\\n        } catch {}\\n\\n        _test_swap_and_check_balances(\\n            address(uniPickleJars[fromIndex]),\\n            address(curvePickleJars[toIndex]),\\n            from,\\n            _fromPickleJar,\\n            targets,\\n            data\\n        );\\n\\n        _post_swap_check(fromIndex, toIndex);\\n    }\\n\\n    // **** Tests **** //\\n\\n    function test_jar_converter_uni_curve_0_0() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 0;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 3;\\n        address curveUnderlying = dai;\\n        uint256 curveUnderlyingIndex = 0;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[3],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_1_0() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 0;\\n        uint256 amount = 400e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 3;\\n        address curveUnderlying = dai;\\n        uint256 curveUnderlyingIndex = 0;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[3],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_2_0() public {\\n        uint256 fromIndex = 2;\\n        uint256 toIndex = 0;\\n        uint256 amount = 400e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 3;\\n        address curveUnderlying = dai;\\n        uint256 curveUnderlyingIndex = 0;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[3],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_3_0() public {\\n        uint256 fromIndex = 3;\\n        uint256 toIndex = 0;\\n        uint256 amount = 4e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 3;\\n        address curveUnderlying = dai;\\n        uint256 curveUnderlyingIndex = 0;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[3],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_0_1() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 1;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 4;\\n        address curveUnderlying = usdt;\\n        uint256 curveUnderlyingIndex = 2;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[4],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_1_1() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 1;\\n        uint256 amount = 400e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 4;\\n        address curveUnderlying = usdt;\\n        uint256 curveUnderlyingIndex = 2;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[4],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_2_1() public {\\n        uint256 fromIndex = 2;\\n        uint256 toIndex = 1;\\n        uint256 amount = 400e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 4;\\n        address curveUnderlying = usdt;\\n        uint256 curveUnderlyingIndex = 2;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[4],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_3_1() public {\\n        uint256 fromIndex = 3;\\n        uint256 toIndex = 1;\\n        uint256 amount = 4e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 4;\\n        address curveUnderlying = usdt;\\n        uint256 curveUnderlyingIndex = 2;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[4],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_4_1() public {\\n        uint256 fromIndex = 3;\\n        uint256 toIndex = 1;\\n        uint256 amount = 4e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 4;\\n        address curveUnderlying = usdt;\\n        uint256 curveUnderlyingIndex = 2;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[4],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_0_2() public {\\n        uint256 fromIndex = 0;\\n        uint256 toIndex = 2;\\n        uint256 amount = 400e18;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 2;\\n        address curveUnderlying = wbtc;\\n        uint256 curveUnderlyingIndex = 1;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[2],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_1_2() public {\\n        uint256 fromIndex = 1;\\n        uint256 toIndex = 2;\\n        uint256 amount = 400e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 2;\\n        address curveUnderlying = wbtc;\\n        uint256 curveUnderlyingIndex = 1;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[2],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_2_2() public {\\n        uint256 fromIndex = 2;\\n        uint256 toIndex = 2;\\n        uint256 amount = 400e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 2;\\n        address curveUnderlying = wbtc;\\n        uint256 curveUnderlyingIndex = 1;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[2],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n    function test_jar_converter_uni_curve_3_2() public {\\n        uint256 fromIndex = 3;\\n        uint256 toIndex = 2;\\n        uint256 amount = 4e6;\\n\\n        address fromUnderlying = uniUnderlying[fromIndex];\\n\\n        address curvePool = curvePools[toIndex];\\n        uint256 curvePoolSize = 2;\\n        address curveUnderlying = wbtc;\\n        uint256 curveUnderlyingIndex = 1;\\n        bytes4 curveFunctionSig = _getFunctionSig(\\n            \\\"add_liquidity(uint256[2],uint256)\\\"\\n        );\\n\\n        bytes memory data0 = _get_uniswap_lp_tokens_to_primitive(\\n            univ2Factory.getPair(weth, fromUnderlying),\\n            curveUnderlying\\n        );\\n\\n        bytes memory data1 = _get_curve_add_liquidity_data(\\n            curvePool,\\n            curveFunctionSig,\\n            curvePoolSize,\\n            curveUnderlyingIndex,\\n            curveUnderlying\\n        );\\n\\n        _test_uni_curve_swap(\\n            fromIndex,\\n            toIndex,\\n            amount,\\n            _getDynamicArray(\\n                payable(address(uniswapV2ProxyLogic)),\\n                payable(address(curveProxyLogic))\\n            ),\\n            _getDynamicArray(data0, data1)\\n        );\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/uni-curve-converter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\n\\nimport \\\"./lib/safe-math.sol\\\";\\nimport \\\"./lib/erc20.sol\\\";\\n\\nimport \\\"./interfaces/uniswapv2.sol\\\";\\nimport \\\"./interfaces/curve.sol\\\";\\n\\n// Converts UNI LP Tokens to Curve LP Tokens\\n// Mainly for treasury\\ncontract UniCurveConverter {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    UniswapRouterV2 public router = UniswapRouterV2(\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\\n    );\\n\\n    // Stablecoins\\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public constant usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public constant susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\n    // Wrapped stablecoins\\n    address public constant scrv = 0xC25a3A3b969415c80451098fa907EC722572917F;\\n\\n    // Weth\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    // susd v2 pool\\n    ICurveFi_4 public curve = ICurveFi_4(\\n        0xA5407eAE9Ba41422680e2e00537571bcC53efBfD\\n    );\\n\\n    // UNI LP -> Curve LP\\n    // Assume th\\n    function convert(address _lp, uint256 _amount) public {\\n        // Get LP Tokens\\n        IERC20(_lp).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Get Uniswap pair\\n        IUniswapV2Pair fromPair = IUniswapV2Pair(_lp);\\n\\n        // Only for WETH/<TOKEN> pairs\\n        if (!(fromPair.token0() == weth || fromPair.token1() == weth)) {\\n            revert(\\\"!eth-from\\\");\\n        }\\n\\n        // Remove liquidity\\n        IERC20(_lp).safeApprove(address(router), 0);\\n        IERC20(_lp).safeApprove(address(router), _amount);\\n        router.removeLiquidity(\\n            fromPair.token0(),\\n            fromPair.token1(),\\n            _amount,\\n            0,\\n            0,\\n            address(this),\\n            now + 60\\n        );\\n\\n        // Most premium stablecoin\\n        (address premiumStablecoin, ) = getMostPremium();\\n\\n        // Convert weth -> most premium stablecoin\\n        address[] memory path = new address[](2);\\n        path[0] = weth;\\n        path[1] = premiumStablecoin;\\n\\n        IERC20(weth).safeApprove(address(router), 0);\\n        IERC20(weth).safeApprove(address(router), uint256(-1));\\n        router.swapExactTokensForTokens(\\n            IERC20(weth).balanceOf(address(this)),\\n            0,\\n            path,\\n            address(this),\\n            now + 60\\n        );\\n\\n        // Convert the other asset into stablecoin if its not a stablecoin\\n        address _from = fromPair.token0() != weth\\n            ? fromPair.token0()\\n            : fromPair.token1();\\n\\n        if (_from != dai && _from != usdc && _from != usdt && _from != susd) {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = premiumStablecoin;\\n\\n            IERC20(_from).safeApprove(address(router), 0);\\n            IERC20(_from).safeApprove(address(router), uint256(-1));\\n            router.swapExactTokensForTokens(\\n                IERC20(_from).balanceOf(address(this)),\\n                0,\\n                path,\\n                address(this),\\n                now + 60\\n            );\\n        }\\n\\n        // Add liquidity to curve\\n        IERC20(dai).safeApprove(address(curve), 0);\\n        IERC20(dai).safeApprove(address(curve), uint256(-1));\\n\\n        IERC20(usdc).safeApprove(address(curve), 0);\\n        IERC20(usdc).safeApprove(address(curve), uint256(-1));\\n\\n        IERC20(usdt).safeApprove(address(curve), 0);\\n        IERC20(usdt).safeApprove(address(curve), uint256(-1));\\n\\n        IERC20(susd).safeApprove(address(curve), 0);\\n        IERC20(susd).safeApprove(address(curve), uint256(-1));\\n\\n        curve.add_liquidity(\\n            [\\n                IERC20(dai).balanceOf(address(this)),\\n                IERC20(usdc).balanceOf(address(this)),\\n                IERC20(usdt).balanceOf(address(this)),\\n                IERC20(susd).balanceOf(address(this))\\n            ],\\n            0\\n        );\\n\\n        // Sends token back to user\\n        IERC20(scrv).transfer(\\n            msg.sender,\\n            IERC20(scrv).balanceOf(address(this))\\n        );\\n    }\\n\\n    function getMostPremium() public view returns (address, uint256) {\\n        uint256[] memory balances = new uint256[](4);\\n        balances[0] = ICurveFi_4(curve).balances(0); // DAI\\n        balances[1] = ICurveFi_4(curve).balances(1).mul(10**12); // USDC\\n        balances[2] = ICurveFi_4(curve).balances(2).mul(10**12); // USDT\\n        balances[3] = ICurveFi_4(curve).balances(3); // sUSD\\n\\n        // DAI\\n        if (\\n            balances[0] < balances[1] &&\\n            balances[0] < balances[2] &&\\n            balances[0] < balances[3]\\n        ) {\\n            return (dai, 0);\\n        }\\n\\n        // USDC\\n        if (\\n            balances[1] < balances[0] &&\\n            balances[1] < balances[2] &&\\n            balances[1] < balances[3]\\n        ) {\\n            return (usdc, 1);\\n        }\\n\\n        // USDT\\n        if (\\n            balances[2] < balances[0] &&\\n            balances[2] < balances[1] &&\\n            balances[2] < balances[3]\\n        ) {\\n            return (usdt, 2);\\n        }\\n\\n        // SUSD\\n        if (\\n            balances[3] < balances[0] &&\\n            balances[3] < balances[1] &&\\n            balances[3] < balances[2]\\n        ) {\\n            return (susd, 3);\\n        }\\n\\n        // If they're somehow equal, we just want DAI\\n        return (dai, 0);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/curve/crv-locker.sol\": {\r\n      \"content\": \"// CurveYCRVVoter: https://etherscan.io/address/0xF147b8125d2ef93FB6965Db97D6746952a133934#code\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\n\\nimport \\\"../../interfaces/curve.sol\\\";\\n\\ncontract CRVLocker {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public constant mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    address public constant escrow = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;\\n\\n    address public governance;\\n    mapping(address => bool) public voters;\\n\\n    constructor(address _governance) public {\\n        governance = _governance;\\n    }\\n\\n    function getName() external pure returns (string memory) {\\n        return \\\"CRVLocker\\\";\\n    }\\n\\n    function addVoter(address _voter) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        voters[_voter] = true;\\n    }\\n\\n    function removeVoter(address _voter) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        voters[_voter] = false;\\n    }\\n\\n    function withdraw(address _asset) external returns (uint256 balance) {\\n        require(voters[msg.sender], \\\"!voter\\\");\\n        balance = IERC20(_asset).balanceOf(address(this));\\n        IERC20(_asset).safeTransfer(msg.sender, balance);\\n    }\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external {\\n        require(voters[msg.sender] || msg.sender == governance, \\\"!authorized\\\");\\n        IERC20(crv).safeApprove(escrow, 0);\\n        IERC20(crv).safeApprove(escrow, _value);\\n        ICurveVotingEscrow(escrow).create_lock(_value, _unlockTime);\\n    }\\n\\n    function increaseAmount(uint256 _value) external {\\n        require(voters[msg.sender] || msg.sender == governance, \\\"!authorized\\\");\\n        IERC20(crv).safeApprove(escrow, 0);\\n        IERC20(crv).safeApprove(escrow, _value);\\n        ICurveVotingEscrow(escrow).increase_amount(_value);\\n    }\\n\\n    function increaseUnlockTime(uint256 _unlockTime) external {\\n        require(voters[msg.sender] || msg.sender == governance, \\\"!authorized\\\");\\n        ICurveVotingEscrow(escrow).increase_unlock_time(_unlockTime);\\n    }\\n\\n    function release() external {\\n        require(voters[msg.sender] || msg.sender == governance, \\\"!authorized\\\");\\n        ICurveVotingEscrow(escrow).withdraw();\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory) {\\n        require(voters[msg.sender] || msg.sender == governance, \\\"!governance\\\");\\n\\n        (bool success, bytes memory result) = to.call{value: value}(data);\\n        require(success, \\\"!execute-success\\\");\\n\\n        return (success, result);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/curve/strategy-curve-rencrv-v2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\n\\nimport \\\"../../interfaces/jar.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../interfaces/controller.sol\\\";\\n\\nimport \\\"../strategy-curve-base.sol\\\";\\n\\ncontract StrategyCurveRenCRVv2 is StrategyCurveBase {\\n    // https://www.curve.fi/ren\\n    // Curve stuff\\n    address public ren_pool = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\\n    address public ren_gauge = 0xB1F2cdeC61db658F091671F5f199635aEF202CAC;\\n    address public ren_crv = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyCurveBase(\\n            ren_pool,\\n            ren_gauge,\\n            ren_crv,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getMostPremium() public override view returns (address, uint256) {\\n        // Both 8 decimals, so doesn't matter\\n        uint256[] memory balances = new uint256[](3);\\n        balances[0] = ICurveFi_2(curve).balances(0); // RENBTC\\n        balances[1] = ICurveFi_2(curve).balances(1); // WBTC\\n\\n        // renbtc\\n        if (balances[0] < balances[1]) {\\n            return (renbtc, 0);\\n        }\\n\\n        // WBTC\\n        if (balances[1] < balances[0]) {\\n            return (wbtc, 1);\\n        }\\n\\n        // If they're somehow equal, we just want RENBTC\\n        return (renbtc, 0);\\n    }\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyCurveRenCRVv2\\\";\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        // Collects crv tokens\\n        // Don't bother voting in v1\\n        ICurveMintr(mintr).mint(gauge);\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n        if (_crv > 0) {\\n            // x% is sent back to the rewards holder\\n            // to be used to lock up in as veCRV in a future date\\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\\n            if (_keepCRV > 0) {\\n                IERC20(crv).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepCRV\\n                );\\n            }\\n            _crv = _crv.sub(_keepCRV);\\n            _swapUniswap(crv, to, _crv);\\n        }\\n\\n        // Adds liquidity to curve.fi's pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[2] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            ICurveFi_2(curve).add_liquidity(liquidity, 0);\\n        }\\n\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/curve/strategy-curve-3crv-v2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\n\\nimport \\\"../../interfaces/jar.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../interfaces/controller.sol\\\";\\n\\nimport \\\"../strategy-curve-base.sol\\\";\\n\\ncontract StrategyCurve3CRVv2 is StrategyCurveBase {\\n    // Curve stuff\\n    address public three_pool = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n    address public three_gauge = 0xbFcF63294aD7105dEa65aA58F8AE5BE2D9d0952A;\\n    address public three_crv = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyCurveBase(\\n            three_pool,\\n            three_gauge,\\n            three_crv,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getMostPremium()\\n        public\\n        override\\n        view\\n        returns (address, uint256)\\n    {\\n        uint256[] memory balances = new uint256[](3);\\n        balances[0] = ICurveFi_3(curve).balances(0); // DAI\\n        balances[1] = ICurveFi_3(curve).balances(1).mul(10**12); // USDC\\n        balances[2] = ICurveFi_3(curve).balances(2).mul(10**12); // USDT\\n\\n        // DAI\\n        if (\\n            balances[0] < balances[1] &&\\n            balances[0] < balances[2]\\n        ) {\\n            return (dai, 0);\\n        }\\n\\n        // USDC\\n        if (\\n            balances[1] < balances[0] &&\\n            balances[1] < balances[2]\\n        ) {\\n            return (usdc, 1);\\n        }\\n\\n        // USDT\\n        if (\\n            balances[2] < balances[0] &&\\n            balances[2] < balances[1]\\n        ) {\\n            return (usdt, 2);\\n        }\\n\\n        // If they're somehow equal, we just want DAI\\n        return (dai, 0);\\n    }\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyCurve3CRVv2\\\";\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public onlyBenevolent override {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        // Collects crv tokens\\n        // Don't bother voting in v1\\n        ICurveMintr(mintr).mint(gauge);\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n        if (_crv > 0) {\\n            // x% is sent back to the rewards holder\\n            // to be used to lock up in as veCRV in a future date\\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\\n            if (_keepCRV > 0) {\\n                IERC20(crv).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepCRV\\n                );\\n            }\\n            _crv = _crv.sub(_keepCRV);\\n            _swapUniswap(crv, to, _crv);\\n        }\\n\\n        // Adds liquidity to curve.fi's pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[3] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            ICurveFi_3(curve).add_liquidity(liquidity, 0);\\n        }\\n\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/curve/strategy-curve-scrv-v3_2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\n\\nimport \\\"./scrv-voter.sol\\\";\\nimport \\\"./crv-locker.sol\\\";\\n\\nimport \\\"../../interfaces/jar.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../interfaces/controller.sol\\\";\\n\\nimport \\\"../strategy-curve-base.sol\\\";\\n\\ncontract StrategyCurveSCRVv3_2 is StrategyCurveBase {\\n    // Curve stuff\\n    address public susdv2_pool = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\\n    address public susdv2_gauge = 0xA90996896660DEcC6E997655E065b23788857849;\\n    address public scrv = 0xC25a3A3b969415c80451098fa907EC722572917F;\\n\\n    // Harvesting\\n    address public snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyCurveBase(\\n            susdv2_pool,\\n            susdv2_gauge,\\n            scrv,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getMostPremium()\\n        public\\n        override\\n        view\\n        returns (address, uint256)\\n    {\\n        uint256[] memory balances = new uint256[](4);\\n        balances[0] = ICurveFi_4(curve).balances(0); // DAI\\n        balances[1] = ICurveFi_4(curve).balances(1).mul(10**12); // USDC\\n        balances[2] = ICurveFi_4(curve).balances(2).mul(10**12); // USDT\\n        balances[3] = ICurveFi_4(curve).balances(3); // sUSD\\n\\n        // DAI\\n        if (\\n            balances[0] < balances[1] &&\\n            balances[0] < balances[2] &&\\n            balances[0] < balances[3]\\n        ) {\\n            return (dai, 0);\\n        }\\n\\n        // USDC\\n        if (\\n            balances[1] < balances[0] &&\\n            balances[1] < balances[2] &&\\n            balances[1] < balances[3]\\n        ) {\\n            return (usdc, 1);\\n        }\\n\\n        // USDT\\n        if (\\n            balances[2] < balances[0] &&\\n            balances[2] < balances[1] &&\\n            balances[2] < balances[3]\\n        ) {\\n            return (usdt, 2);\\n        }\\n\\n        // SUSD\\n        if (\\n            balances[3] < balances[0] &&\\n            balances[3] < balances[1] &&\\n            balances[3] < balances[2]\\n        ) {\\n            return (susd, 3);\\n        }\\n\\n        // If they're somehow equal, we just want DAI\\n        return (dai, 0);\\n    }\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyCurveSCRVv3_2\\\";\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public onlyBenevolent override {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        // Collects crv tokens\\n        // Don't bother voting in v1\\n        ICurveMintr(mintr).mint(gauge);\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n        if (_crv > 0) {\\n            // x% is sent back to the rewards holder\\n            // to be used to lock up in as veCRV in a future date\\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\\n            if (_keepCRV > 0) {\\n                IERC20(crv).safeTransfer(\\n                    IController(controller).treasury(),\\n                    _keepCRV\\n                );\\n            }\\n            _crv = _crv.sub(_keepCRV);\\n            _swapUniswap(crv, to, _crv);\\n        }\\n\\n        // Collects SNX tokens\\n        ICurveGauge(gauge).claim_rewards(address(this));\\n        uint256 _snx = IERC20(snx).balanceOf(address(this));\\n        if (_snx > 0) {\\n            _swapUniswap(snx, to, _snx);\\n        }\\n\\n        // Adds liquidity to curve.fi's susd pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[4] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            ICurveFi_4(curve).add_liquidity(liquidity, 0);\\n        }\\n\\n        // We want to get back sCRV\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/curve/scrv-voter.sol\": {\r\n      \"content\": \"// StrategyProxy: https://etherscan.io/address/0x5886e475e163f78cf63d6683abc7fe8516d12081#code\\npragma solidity ^0.6.7;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\n\\nimport \\\"./crv-locker.sol\\\";\\n\\nimport \\\"../../interfaces/curve.sol\\\";\\n\\ncontract SCRVVoter {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    CRVLocker public crvLocker;\\n\\n    address public constant want = 0xC25a3A3b969415c80451098fa907EC722572917F;\\n    address public constant mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    address public constant snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    address\\n        public constant gaugeController = 0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB;\\n    address\\n        public constant scrvGauge = 0xA90996896660DEcC6E997655E065b23788857849;\\n\\n    mapping(address => bool) public strategies;\\n    address public governance;\\n\\n    constructor(address _governance, address _crvLocker) public {\\n        governance = _governance;\\n        crvLocker = CRVLocker(_crvLocker);\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function approveStrategy(address _strategy) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategies[_strategy] = true;\\n    }\\n\\n    function revokeStrategy(address _strategy) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategies[_strategy] = false;\\n    }\\n\\n    function lock() external {\\n        crvLocker.increaseAmount(IERC20(crv).balanceOf(address(crvLocker)));\\n    }\\n\\n    function vote(address _gauge, uint256 _amount) public {\\n        require(strategies[msg.sender], \\\"!strategy\\\");\\n        crvLocker.execute(\\n            gaugeController,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"vote_for_gauge_weights(address,uint256)\\\",\\n                _gauge,\\n                _amount\\n            )\\n        );\\n    }\\n\\n    function max() external {\\n        require(strategies[msg.sender], \\\"!strategy\\\");\\n        vote(scrvGauge, 10000);\\n    }\\n\\n    function withdraw(\\n        address _gauge,\\n        address _token,\\n        uint256 _amount\\n    ) public returns (uint256) {\\n        require(strategies[msg.sender], \\\"!strategy\\\");\\n        uint256 _before = IERC20(_token).balanceOf(address(crvLocker));\\n        crvLocker.execute(\\n            _gauge,\\n            0,\\n            abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _amount)\\n        );\\n        uint256 _after = IERC20(_token).balanceOf(address(crvLocker));\\n        uint256 _net = _after.sub(_before);\\n        crvLocker.execute(\\n            _token,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                msg.sender,\\n                _net\\n            )\\n        );\\n        return _net;\\n    }\\n\\n    function balanceOf(address _gauge) public view returns (uint256) {\\n        return IERC20(_gauge).balanceOf(address(crvLocker));\\n    }\\n\\n    function withdrawAll(address _gauge, address _token)\\n        external\\n        returns (uint256)\\n    {\\n        require(strategies[msg.sender], \\\"!strategy\\\");\\n        return withdraw(_gauge, _token, balanceOf(_gauge));\\n    }\\n\\n    function deposit(address _gauge, address _token) external {\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(address(crvLocker), _balance);\\n\\n        _balance = IERC20(_token).balanceOf(address(crvLocker));\\n        crvLocker.execute(\\n            _token,\\n            0,\\n            abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _gauge, 0)\\n        );\\n        crvLocker.execute(\\n            _token,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"approve(address,uint256)\\\",\\n                _gauge,\\n                _balance\\n            )\\n        );\\n        crvLocker.execute(\\n            _gauge,\\n            0,\\n            abi.encodeWithSignature(\\\"deposit(uint256)\\\", _balance)\\n        );\\n    }\\n\\n    function harvest(address _gauge) external {\\n        require(strategies[msg.sender], \\\"!strategy\\\");\\n        uint256 _before = IERC20(crv).balanceOf(address(crvLocker));\\n        crvLocker.execute(\\n            mintr,\\n            0,\\n            abi.encodeWithSignature(\\\"mint(address)\\\", _gauge)\\n        );\\n        uint256 _after = IERC20(crv).balanceOf(address(crvLocker));\\n        uint256 _balance = _after.sub(_before);\\n        crvLocker.execute(\\n            crv,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                msg.sender,\\n                _balance\\n            )\\n        );\\n    }\\n\\n    function claimRewards() external {\\n        require(strategies[msg.sender], \\\"!strategy\\\");\\n\\n        uint256 _before = IERC20(snx).balanceOf(address(crvLocker));\\n        crvLocker.execute(scrvGauge, 0, abi.encodeWithSignature(\\\"claim_rewards()\\\"));\\n        uint256 _after = IERC20(snx).balanceOf(address(crvLocker));\\n        uint256 _balance = _after.sub(_before);\\n\\n        crvLocker.execute(\\n            snx,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"transfer(address,uint256)\\\",\\n                msg.sender,\\n                _balance\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/curve/strategy-curve-scrv-v4_1.sol\": {\r\n      \"content\": \"// https://etherscan.io/address/0x594a198048501a304267e63b3bad0f0638da7628#code\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\n\\nimport \\\"./scrv-voter.sol\\\";\\nimport \\\"./crv-locker.sol\\\";\\n\\nimport \\\"../../interfaces/jar.sol\\\";\\nimport \\\"../../interfaces/curve.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../interfaces/controller.sol\\\";\\n\\nimport \\\"../strategy-base.sol\\\";\\n\\ncontract StrategyCurveSCRVv4_1 is StrategyBase {\\n    // Curve\\n    address public scrv = 0xC25a3A3b969415c80451098fa907EC722572917F;\\n    address public susdv2_gauge = 0xA90996896660DEcC6E997655E065b23788857849;\\n    address public susdv2_pool = 0xA5407eAE9Ba41422680e2e00537571bcC53efBfD;\\n    address public escrow = 0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2;\\n\\n    // curve dao\\n    address public gauge;\\n    address public curve;\\n    address public mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    // tokens we're farming\\n    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    address public constant snx = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n\\n    // stablecoins\\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\n    // How much CRV tokens to keep\\n    uint256 public keepCRV = 500;\\n    uint256 public keepCRVMax = 10000;\\n\\n    // crv-locker and voter\\n    address public scrvVoter;\\n    address public crvLocker;\\n\\n    constructor(\\n        address _scrvVoter,\\n        address _crvLocker,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyBase(scrv, _governance, _strategist, _controller, _timelock)\\n    {\\n        curve = susdv2_pool;\\n        gauge = susdv2_gauge;\\n\\n        scrvVoter = _scrvVoter;\\n        crvLocker = _crvLocker;\\n    }\\n\\n    // **** Getters ****\\n\\n    function balanceOfPool() public override view returns (uint256) {\\n        return SCRVVoter(scrvVoter).balanceOf(gauge);\\n    }\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyCurveSCRVv4_1\\\";\\n    }\\n\\n    function getHarvestable() external returns (uint256) {\\n        return ICurveGauge(gauge).claimable_tokens(crvLocker);\\n    }\\n\\n    function getMostPremium() public view returns (address, uint8) {\\n        uint256[] memory balances = new uint256[](4);\\n        balances[0] = ICurveFi_4(curve).balances(0); // DAI\\n        balances[1] = ICurveFi_4(curve).balances(1).mul(10**12); // USDC\\n        balances[2] = ICurveFi_4(curve).balances(2).mul(10**12); // USDT\\n        balances[3] = ICurveFi_4(curve).balances(3); // sUSD\\n\\n        // DAI\\n        if (\\n            balances[0] < balances[1] &&\\n            balances[0] < balances[2] &&\\n            balances[0] < balances[3]\\n        ) {\\n            return (dai, 0);\\n        }\\n\\n        // USDC\\n        if (\\n            balances[1] < balances[0] &&\\n            balances[1] < balances[2] &&\\n            balances[1] < balances[3]\\n        ) {\\n            return (usdc, 1);\\n        }\\n\\n        // USDT\\n        if (\\n            balances[2] < balances[0] &&\\n            balances[2] < balances[1] &&\\n            balances[2] < balances[3]\\n        ) {\\n            return (usdt, 2);\\n        }\\n\\n        // SUSD\\n        if (\\n            balances[3] < balances[0] &&\\n            balances[3] < balances[1] &&\\n            balances[3] < balances[2]\\n        ) {\\n            return (susd, 3);\\n        }\\n\\n        // If they're somehow equal, we just want DAI\\n        return (dai, 0);\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepCRV(uint256 _keepCRV) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepCRV = _keepCRV;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeTransfer(scrvVoter, _want);\\n            SCRVVoter(scrvVoter).deposit(gauge, want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        return SCRVVoter(scrvVoter).withdraw(gauge, want, _amount);\\n    }\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun / sandwiched\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned/sandwiched?\\n        //      if so, a new strategy will be deployed.\\n\\n        // stablecoin we want to convert to\\n        (address to, uint256 toIndex) = getMostPremium();\\n\\n        // Collects crv tokens\\n        // Don't bother voting in v1\\n        SCRVVoter(scrvVoter).harvest(gauge);\\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\\n        if (_crv > 0) {\\n            // How much CRV to keep to restake?\\n            uint256 _keepCRV = _crv.mul(keepCRV).div(keepCRVMax);\\n            IERC20(crv).safeTransfer(address(crvLocker), _keepCRV);\\n\\n            // How much CRV to swap?\\n            _crv = _crv.sub(_keepCRV);\\n            _swapUniswap(crv, to, _crv);\\n        }\\n\\n        // Collects SNX tokens\\n        SCRVVoter(scrvVoter).claimRewards();\\n        uint256 _snx = IERC20(snx).balanceOf(address(this));\\n        if (_snx > 0) {\\n            _swapUniswap(snx, to, _snx);\\n        }\\n\\n        // Adds liquidity to curve.fi's susd pool\\n        // to get back want (scrv)\\n        uint256 _to = IERC20(to).balanceOf(address(this));\\n        if (_to > 0) {\\n            IERC20(to).safeApprove(curve, 0);\\n            IERC20(to).safeApprove(curve, _to);\\n            uint256[4] memory liquidity;\\n            liquidity[toIndex] = _to;\\n            ICurveFi_4(curve).add_liquidity(liquidity, 0);\\n        }\\n\\n        // We want to get back sCRV\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/strategy-curve-base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"./strategy-base.sol\\\";\\n\\nimport \\\"../interfaces/curve.sol\\\";\\n\\n// Base contract for Curve based staking contract interfaces\\n\\nabstract contract StrategyCurveBase is StrategyBase {\\n    // curve dao\\n    address public gauge;\\n    address public curve;\\n    address public mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\\n\\n    // stablecoins\\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address public susd = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\n    // bitcoins\\n    address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address public renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\\n\\n    // rewards\\n    address public crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n    // How much CRV tokens to keep\\n    uint256 public keepCRV = 0;\\n    uint256 public keepCRVMax = 10000;\\n\\n    constructor(\\n        address _curve,\\n        address _gauge,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\\n    {\\n        curve = _curve;\\n        gauge = _gauge;\\n    }\\n\\n    // **** Getters ****\\n\\n    function balanceOfPool() public override view returns (uint256) {\\n        return ICurveGauge(gauge).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external returns (uint256) {\\n        return ICurveGauge(gauge).claimable_tokens(address(this));\\n    }\\n\\n    function getMostPremium() public virtual view returns (address, uint256);\\n\\n    // **** Setters ****\\n\\n    function setKeepCRV(uint256 _keepCRV) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        keepCRV = _keepCRV;\\n    }\\n\\n    // **** State Mutation functions ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(gauge, 0);\\n            IERC20(want).safeApprove(gauge, _want);\\n            ICurveGauge(gauge).deposit(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        ICurveGauge(gauge).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/compound/strategy-cmpd-dai-v2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../../lib/erc20.sol\\\";\\nimport \\\"../../lib/safe-math.sol\\\";\\nimport \\\"../../lib/exponential.sol\\\";\\n\\nimport \\\"../strategy-base.sol\\\";\\n\\nimport \\\"../../interfaces/jar.sol\\\";\\nimport \\\"../../interfaces/uniswapv2.sol\\\";\\nimport \\\"../../interfaces/controller.sol\\\";\\nimport \\\"../../interfaces/compound.sol\\\";\\n\\ncontract StrategyCmpdDaiV2 is StrategyBase, Exponential {\\n    address\\n        public constant comptroller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n    address public constant lens = 0xd513d22422a3062Bd342Ae374b4b9c20E0a9a074;\\n    address public constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address public constant comp = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n    address public constant cdai = 0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643;\\n    address public constant cether = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n\\n    // Require a 0.1 buffer between\\n    // market collateral factor and strategy's collateral factor\\n    // when leveraging\\n    uint256 colFactorLeverageBuffer = 100;\\n    uint256 colFactorLeverageBufferMax = 1000;\\n\\n    // Allow a 0.05 buffer\\n    // between market collateral factor and strategy's collateral factor\\n    // until we have to deleverage\\n    // This is so we can hit max leverage and keep accruing interest\\n    uint256 colFactorSyncBuffer = 50;\\n    uint256 colFactorSyncBufferMax = 1000;\\n\\n    // Keeper bots\\n    // Maintain leverage within buffer\\n    mapping(address => bool) keepers;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyBase(dai, _governance, _strategist, _controller, _timelock)\\n    {\\n        // Enter cDAI Market\\n        address[] memory ctokens = new address[](1);\\n        ctokens[0] = cdai;\\n        IComptroller(comptroller).enterMarkets(ctokens);\\n    }\\n\\n    // **** Modifiers **** //\\n\\n    modifier onlyKeepers {\\n        require(\\n            keepers[msg.sender] ||\\n                msg.sender == address(this) ||\\n                msg.sender == strategist ||\\n                msg.sender == governance,\\n            \\\"!keepers\\\"\\n        );\\n        _;\\n    }\\n\\n    // **** Views **** //\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyCmpdDaiV2\\\";\\n    }\\n\\n    function getSuppliedView() public view returns (uint256) {\\n        (, uint256 cTokenBal, , uint256 exchangeRate) = ICToken(cdai)\\n            .getAccountSnapshot(address(this));\\n\\n        (, uint256 bal) = mulScalarTruncate(\\n            Exp({mantissa: exchangeRate}),\\n            cTokenBal\\n        );\\n\\n        return bal;\\n    }\\n\\n    function getBorrowedView() public view returns (uint256) {\\n        return ICToken(cdai).borrowBalanceStored(address(this));\\n    }\\n\\n    function balanceOfPool() public override view returns (uint256) {\\n        uint256 supplied = getSuppliedView();\\n        uint256 borrowed = getBorrowedView();\\n        return supplied.sub(borrowed);\\n    }\\n\\n    // Given an unleveraged supply balance, return the target\\n    // leveraged supply balance which is still within the safety buffer\\n    function getLeveragedSupplyTarget(uint256 supplyBalance)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 leverage = getMaxLeverage();\\n        return supplyBalance.mul(leverage).div(1e18);\\n    }\\n\\n    function getSafeLeverageColFactor() public view returns (uint256) {\\n        uint256 colFactor = getMarketColFactor();\\n\\n        // Collateral factor within the buffer\\n        uint256 safeColFactor = colFactor.sub(\\n            colFactorLeverageBuffer.mul(1e18).div(colFactorLeverageBufferMax)\\n        );\\n\\n        return safeColFactor;\\n    }\\n\\n    function getSafeSyncColFactor() public view returns (uint256) {\\n        uint256 colFactor = getMarketColFactor();\\n\\n        // Collateral factor within the buffer\\n        uint256 safeColFactor = colFactor.sub(\\n            colFactorSyncBuffer.mul(1e18).div(colFactorSyncBufferMax)\\n        );\\n\\n        return safeColFactor;\\n    }\\n\\n    function getMarketColFactor() public view returns (uint256) {\\n        (, uint256 colFactor) = IComptroller(comptroller).markets(cdai);\\n\\n        return colFactor;\\n    }\\n\\n    // Max leverage we can go up to, w.r.t safe buffer\\n    function getMaxLeverage() public view returns (uint256) {\\n        uint256 safeLeverageColFactor = getSafeLeverageColFactor();\\n\\n        // Infinite geometric series\\n        uint256 leverage = uint256(1e36).div(1e18 - safeLeverageColFactor);\\n        return leverage;\\n    }\\n\\n    // **** Pseudo-view functions (use `callStatic` on these) **** //\\n    /* The reason why these exists is because of the nature of the\\n       interest accruing supply + borrow balance. The \\\"view\\\" methods\\n       are technically snapshots and don't represent the real value.\\n       As such there are pseudo view methods where you can retrieve the\\n       results by calling `callStatic`.\\n    */\\n\\n    function getCompAccrued() public returns (uint256) {\\n        (, , , uint256 accrued) = ICompoundLens(lens).getCompBalanceMetadataExt(\\n            comp,\\n            comptroller,\\n            address(this)\\n        );\\n\\n        return accrued;\\n    }\\n\\n    function getColFactor() public returns (uint256) {\\n        uint256 supplied = getSupplied();\\n        uint256 borrowed = getBorrowed();\\n\\n        return borrowed.mul(1e18).div(supplied);\\n    }\\n\\n    function getSuppliedUnleveraged() public returns (uint256) {\\n        uint256 supplied = getSupplied();\\n        uint256 borrowed = getBorrowed();\\n\\n        return supplied.sub(borrowed);\\n    }\\n\\n    function getSupplied() public returns (uint256) {\\n        return ICToken(cdai).balanceOfUnderlying(address(this));\\n    }\\n\\n    function getBorrowed() public returns (uint256) {\\n        return ICToken(cdai).borrowBalanceCurrent(address(this));\\n    }\\n\\n    function getBorrowable() public returns (uint256) {\\n        uint256 supplied = getSupplied();\\n        uint256 borrowed = getBorrowed();\\n\\n        (, uint256 colFactor) = IComptroller(comptroller).markets(cdai);\\n\\n        // 99.99% just in case some dust accumulates\\n        return\\n            supplied.mul(colFactor).div(1e18).sub(borrowed).mul(9999).div(\\n                10000\\n            );\\n    }\\n\\n    function getCurrentLeverage() public returns (uint256) {\\n        uint256 supplied = getSupplied();\\n        uint256 borrowed = getBorrowed();\\n\\n        return supplied.mul(1e18).div(supplied.sub(borrowed));\\n    }\\n\\n    // **** Setters **** //\\n\\n    function addKeeper(address _keeper) public {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"!governance\\\"\\n        );\\n        keepers[_keeper] = true;\\n    }\\n\\n    function removeKeeper(address _keeper) public {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"!governance\\\"\\n        );\\n        keepers[_keeper] = false;\\n    }\\n\\n    function setColFactorLeverageBuffer(uint256 _colFactorLeverageBuffer)\\n        public\\n    {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"!governance\\\"\\n        );\\n        colFactorLeverageBuffer = _colFactorLeverageBuffer;\\n    }\\n\\n    function setColFactorSyncBuffer(uint256 _colFactorSyncBuffer) public {\\n        require(\\n            msg.sender == governance || msg.sender == strategist,\\n            \\\"!governance\\\"\\n        );\\n        colFactorSyncBuffer = _colFactorSyncBuffer;\\n    }\\n\\n    // **** State mutations **** //\\n\\n    // Do a `callStatic` on this.\\n    // If it returns true then run it for realz. (i.e. eth_signedTx, not eth_call)\\n    function sync() public returns (bool) {\\n        uint256 colFactor = getColFactor();\\n        uint256 safeSyncColFactor = getSafeSyncColFactor();\\n\\n        // If we're not safe\\n        if (colFactor > safeSyncColFactor) {\\n            uint256 unleveragedSupply = getSuppliedUnleveraged();\\n            uint256 idealSupply = getLeveragedSupplyTarget(unleveragedSupply);\\n\\n            deleverageUntil(idealSupply);\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function leverageToMax() public {\\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\\n        uint256 idealSupply = getLeveragedSupplyTarget(unleveragedSupply);\\n        leverageUntil(idealSupply);\\n    }\\n\\n    // Leverages until we're supplying <x> amount\\n    // 1. Redeem <x> DAI\\n    // 2. Repay <x> DAI\\n    function leverageUntil(uint256 _supplyAmount) public onlyKeepers {\\n        // 1. Borrow out <X> DAI\\n        // 2. Supply <X> DAI\\n\\n        uint256 leverage = getMaxLeverage();\\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\\n        require(\\n            _supplyAmount >= unleveragedSupply &&\\n                _supplyAmount <= unleveragedSupply.mul(leverage).div(1e18),\\n            \\\"!leverage\\\"\\n        );\\n\\n        // Since we're only leveraging one asset\\n        // Supplied = borrowed\\n        uint256 _borrowAndSupply;\\n        uint256 supplied = getSupplied();\\n        while (supplied < _supplyAmount) {\\n            _borrowAndSupply = getBorrowable();\\n\\n            if (supplied.add(_borrowAndSupply) > _supplyAmount) {\\n                _borrowAndSupply = _supplyAmount.sub(supplied);\\n            }\\n\\n            ICToken(cdai).borrow(_borrowAndSupply);\\n            deposit();\\n\\n            supplied = supplied.add(_borrowAndSupply);\\n        }\\n    }\\n\\n    function deleverageToMin() public {\\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\\n        deleverageUntil(unleveragedSupply);\\n    }\\n\\n    // Deleverages until we're supplying <x> amount\\n    // 1. Redeem <x> DAI\\n    // 2. Repay <x> DAI\\n    function deleverageUntil(uint256 _supplyAmount) public onlyKeepers {\\n        uint256 unleveragedSupply = getSuppliedUnleveraged();\\n        uint256 supplied = getSupplied();\\n        require(\\n            _supplyAmount >= unleveragedSupply && _supplyAmount <= supplied,\\n            \\\"!deleverage\\\"\\n        );\\n\\n        // Since we're only leveraging on 1 asset\\n        // redeemable = borrowable\\n        uint256 _redeemAndRepay = getBorrowable();\\n        do {\\n            if (supplied.sub(_redeemAndRepay) < _supplyAmount) {\\n                _redeemAndRepay = supplied.sub(_supplyAmount);\\n            }\\n\\n            require(\\n                ICToken(cdai).redeemUnderlying(_redeemAndRepay) == 0,\\n                \\\"!redeem\\\"\\n            );\\n            IERC20(dai).safeApprove(cdai, 0);\\n            IERC20(dai).safeApprove(cdai, _redeemAndRepay);\\n            require(ICToken(cdai).repayBorrow(_redeemAndRepay) == 0, \\\"!repay\\\");\\n\\n            supplied = supplied.sub(_redeemAndRepay);\\n        } while (supplied > _supplyAmount);\\n    }\\n\\n    function harvest() public override onlyBenevolent {\\n        address[] memory ctokens = new address[](1);\\n        ctokens[0] = cdai;\\n\\n        IComptroller(comptroller).claimComp(address(this), ctokens);\\n        uint256 _comp = IERC20(comp).balanceOf(address(this));\\n        if (_comp > 0) {\\n            _swapUniswap(comp, want, _comp);\\n        }\\n\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(cdai, 0);\\n            IERC20(want).safeApprove(cdai, _want);\\n            require(ICToken(cdai).mint(_want) == 0, \\\"!deposit\\\");\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        uint256 _want = balanceOfWant();\\n        if (_want < _amount) {\\n            uint256 _redeem = _amount.sub(_want);\\n\\n            // Make sure market can cover liquidity\\n            require(ICToken(cdai).getCash() >= _redeem, \\\"!cash-liquidity\\\");\\n\\n            // How much borrowed amount do we need to free?\\n            uint256 borrowed = getBorrowed();\\n            uint256 supplied = getSupplied();\\n            uint256 curLeverage = getCurrentLeverage();\\n            uint256 borrowedToBeFree = _redeem.mul(curLeverage).div(1e18);\\n\\n            // If the amount we need to free is > borrowed\\n            // Just free up all the borrowed amount\\n            if (borrowedToBeFree > borrowed) {\\n                this.deleverageToMin();\\n            } else {\\n                // Otherwise just keep freeing up borrowed amounts until\\n                // we hit a safe number to redeem our underlying\\n                this.deleverageUntil(supplied.sub(borrowedToBeFree));\\n            }\\n\\n            // Redeems underlying\\n            require(ICToken(cdai).redeemUnderlying(_redeem) == 0, \\\"!redeem\\\");\\n        }\\n\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/uniswapv2/strategy-uni-eth-wbtc-lp-v2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../strategy-uni-farm-base.sol\\\";\\n\\ncontract StrategyUniEthWBtcLpV2 is StrategyUniFarmBase {\\n    // Token addresses\\n    address public uni_rewards = 0xCA35e32e7926b96A9988f61d510E038108d8068e;\\n    address public uni_eth_wbtc_lp = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940;\\n    address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyUniFarmBase(\\n            wbtc,\\n            uni_rewards,\\n            uni_eth_wbtc_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyUniEthWBtcLpV2\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/uniswapv2/strategy-uni-eth-usdt-lp-v4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../strategy-uni-farm-base.sol\\\";\\n\\ncontract StrategyUniEthUsdtLpV4 is StrategyUniFarmBase {\\n    // Token addresses\\n    address public uni_rewards = 0x6C3e4cb2E96B01F4b866965A91ed4437839A121a;\\n    address public uni_eth_usdt_lp = 0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852;\\n    address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyUniFarmBase(\\n            usdt,\\n            uni_rewards,\\n            uni_eth_usdt_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyUniEthUsdtLpV4\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/uniswapv2/strategy-uni-eth-usdc-lp-v4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\nimport \\\"../strategy-uni-farm-base.sol\\\";\\n\\ncontract StrategyUniEthUsdcLpV4 is StrategyUniFarmBase {\\n    // Token addresses\\n    address public uni_rewards = 0x7FBa4B8Dc5E7616e59622806932DBea72537A56b;\\n    address public uni_eth_usdc_lp = 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc;\\n    address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyUniFarmBase(\\n            usdc,\\n            uni_rewards,\\n            uni_eth_usdc_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyUniEthUsdcLpV4\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/uniswapv2/strategy-uni-eth-dai-lp-v4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"../strategy-uni-farm-base.sol\\\";\\n\\ncontract StrategyUniEthDaiLpV4 is StrategyUniFarmBase {\\n    // Token addresses\\n    address public uni_rewards = 0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711;\\n    address public uni_eth_dai_lp = 0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11;\\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyUniFarmBase(\\n            dai,\\n            uni_rewards,\\n            uni_eth_dai_lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {}\\n\\n    // **** Views ****\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyUniEthDaiLpV4\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/strategy-base.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\nimport \\\"../lib/erc20.sol\\\";\\nimport \\\"../lib/safe-math.sol\\\";\\n\\nimport \\\"../interfaces/jar.sol\\\";\\nimport \\\"../interfaces/staking-rewards.sol\\\";\\nimport \\\"../interfaces/uniswapv2.sol\\\";\\nimport \\\"../interfaces/controller.sol\\\";\\n\\n// Strategy Contract Basics\\n\\nabstract contract StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    // Perfomance fees - start with 4.5%\\n    uint256 public performanceTreasuryFee = 450;\\n    uint256 public constant performanceTreasuryMax = 10000;\\n\\n    uint256 public performanceDevFee = 0;\\n    uint256 public constant performanceDevMax = 10000;\\n\\n    // Withdrawal fee 0.5%\\n    // - 0.325% to treasury\\n    // - 0.175% to dev fund\\n    uint256 public withdrawalTreasuryFee = 325;\\n    uint256 public constant withdrawalTreasuryMax = 100000;\\n\\n    uint256 public withdrawalDevFundFee = 175;\\n    uint256 public constant withdrawalDevFundMax = 100000;\\n\\n    // Tokens\\n    address public want;\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    // User accounts\\n    address public governance;\\n    address public controller;\\n    address public strategist;\\n    address public timelock;\\n\\n    // Dex\\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    constructor(\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    ) public {\\n        require(_want != address(0));\\n        require(_governance != address(0));\\n        require(_strategist != address(0));\\n        require(_controller != address(0));\\n        require(_timelock != address(0));\\n\\n        want = _want;\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        timelock = _timelock;\\n    }\\n\\n    // **** Modifiers **** //\\n\\n    modifier onlyBenevolent {\\n        require(\\n            msg.sender == tx.origin ||\\n                msg.sender == governance ||\\n                msg.sender == strategist\\n        );\\n        _;\\n    }\\n\\n    // **** Views **** //\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function balanceOfPool() public virtual view returns (uint256);\\n\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function getName() external virtual pure returns (string memory);\\n\\n    // **** Setters **** //\\n\\n    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalDevFundFee = _withdrawalDevFundFee;\\n    }\\n\\n    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalTreasuryFee = _withdrawalTreasuryFee;\\n    }\\n\\n    function setPerformanceDevFee(uint256 _performanceDevFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceDevFee = _performanceDevFee;\\n    }\\n\\n    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\\n        external\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceTreasuryFee = _performanceTreasuryFee;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    // **** State mutations **** //\\n    function deposit() public virtual;\\n\\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(want != address(_asset), \\\"want\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n\\n    // Withdraw partial funds, normally used with a jar withdrawal\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\\n            withdrawalDevFundMax\\n        );\\n        IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\\n\\n        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\\n            withdrawalTreasuryMax\\n        );\\n        IERC20(want).safeTransfer(\\n            IController(controller).treasury(),\\n            _feeTreasury\\n        );\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\"); // additional protection so we don't burn the funds\\n\\n        IERC20(want).safeTransfer(_jar, _amount.sub(_feeDev).sub(_feeTreasury));\\n    }\\n\\n    // Withdraw funds, used to swap between strategies\\n    function withdrawForSwap(uint256 _amount)\\n        external\\n        returns (uint256 balance)\\n    {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(_amount);\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\");\\n        IERC20(want).safeTransfer(_jar, balance);\\n    }\\n\\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawAll();\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _jar = IController(controller).jars(address(want));\\n        require(_jar != address(0), \\\"!jar\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_jar, balance);\\n    }\\n\\n    function _withdrawAll() internal {\\n        _withdrawSome(balanceOfPool());\\n    }\\n\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    function harvest() public virtual;\\n\\n    // **** Emergency functions ****\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        returns (bytes memory response)\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    revert(add(response, 0x20), size)\\n                }\\n        }\\n    }\\n\\n    // **** Internal functions ****\\n    function _swapUniswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        // Swap with uniswap\\n        IERC20(_from).safeApprove(univ2Router2, 0);\\n        IERC20(_from).safeApprove(univ2Router2, _amount);\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _distributePerformanceFeesAndDeposit() internal {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n\\n        if (_want > 0) {\\n            // Treasury fees\\n            IERC20(want).safeTransfer(\\n                IController(controller).treasury(),\\n                _want.mul(performanceTreasuryFee).div(performanceTreasuryMax)\\n            );\\n\\n            // Performance fee\\n            IERC20(want).safeTransfer(\\n                IController(controller).devfund(),\\n                _want.mul(performanceDevFee).div(performanceDevMax)\\n            );\\n\\n            deposit();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/strategy-uni-farm-base.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"./strategy-staking-rewards-base.sol\\\";\\n\\nabstract contract StrategyUniFarmBase is StrategyStakingRewardsBase {\\n    // Token addresses\\n    address public uni = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;\\n\\n    // WETH/<token1> pair\\n    address public token1;\\n\\n    // How much UNI tokens to keep?\\n    uint256 public keepUNI = 0;\\n    uint256 public constant keepUNIMax = 10000;\\n\\n    constructor(\\n        address _token1,\\n        address _rewards,\\n        address _lp,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyStakingRewardsBase(\\n            _rewards,\\n            _lp,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock\\n        )\\n    {\\n        token1 = _token1;\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepUNI(uint256 _keepUNI) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        keepUNI = _keepUNI;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        // Anyone can harvest it at any given time.\\n        // I understand the possibility of being frontrun\\n        // But ETH is a dark forest, and I wanna see how this plays out\\n        // i.e. will be be heavily frontrunned?\\n        //      if so, a new strategy will be deployed.\\n\\n        // Collects UNI tokens\\n        IStakingRewards(rewards).getReward();\\n        uint256 _uni = IERC20(uni).balanceOf(address(this));\\n        if (_uni > 0) {\\n            // 10% is locked up for future gov\\n            uint256 _keepUNI = _uni.mul(keepUNI).div(keepUNIMax);\\n            IERC20(uni).safeTransfer(\\n                IController(controller).treasury(),\\n                _keepUNI\\n            );\\n            _swapUniswap(uni, weth, _uni.sub(_keepUNI));\\n        }\\n\\n        // Swap half WETH for DAI\\n        uint256 _weth = IERC20(weth).balanceOf(address(this));\\n        if (_weth > 0) {\\n            _swapUniswap(weth, token1, _weth.div(2));\\n        }\\n\\n        // Adds in liquidity for ETH/DAI\\n        _weth = IERC20(weth).balanceOf(address(this));\\n        uint256 _token1 = IERC20(token1).balanceOf(address(this));\\n        if (_weth > 0 && _token1 > 0) {\\n            IERC20(weth).safeApprove(univ2Router2, 0);\\n            IERC20(weth).safeApprove(univ2Router2, _weth);\\n\\n            IERC20(token1).safeApprove(univ2Router2, 0);\\n            IERC20(token1).safeApprove(univ2Router2, _token1);\\n\\n            UniswapRouterV2(univ2Router2).addLiquidity(\\n                weth,\\n                token1,\\n                _weth,\\n                _token1,\\n                0,\\n                0,\\n                address(this),\\n                now + 60\\n            );\\n\\n            // Donates DUST\\n            IERC20(weth).transfer(\\n                IController(controller).treasury(),\\n                IERC20(weth).balanceOf(address(this))\\n            );\\n            IERC20(token1).safeTransfer(\\n                IController(controller).treasury(),\\n                IERC20(token1).balanceOf(address(this))\\n            );\\n        }\\n\\n        // We want to get back UNI LP tokens\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/strategies/strategy-staking-rewards-base.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.7;\\n\\nimport \\\"./strategy-base.sol\\\";\\n\\n// Base contract for SNX Staking rewards contract interfaces\\n\\nabstract contract StrategyStakingRewardsBase is StrategyBase {\\n    address public rewards;\\n\\n    // **** Getters ****\\n    constructor(\\n        address _rewards,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock\\n    )\\n        public\\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\\n    {\\n        rewards = _rewards;\\n    }\\n\\n    function balanceOfPool() public override view returns (uint256) {\\n        return IStakingRewards(rewards).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external view returns (uint256) {\\n        return IStakingRewards(rewards).earned(address(this));\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(rewards, 0);\\n            IERC20(want).safeApprove(rewards, _want);\\n            IStakingRewards(rewards).stake(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IStakingRewards(rewards).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/yield-farming/masterchef.sol\": {\r\n      \"content\": \"pragma solidity 0.6.7;\\n\\nimport \\\"../lib/enumerableSet.sol\\\";\\nimport \\\"../lib/safe-math.sol\\\";\\nimport \\\"../lib/erc20.sol\\\";\\nimport \\\"../lib/ownable.sol\\\";\\nimport \\\"./pickle-token.sol\\\";\\n\\n// MasterChef was the master of pickle. He now governs over PICKLES. He can make Pickles and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once PICKLES is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract MasterChef is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of PICKLEs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accPicklePerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accPicklePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. PICKLEs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that PICKLEs distribution occurs.\\n        uint256 accPicklePerShare; // Accumulated PICKLEs per share, times 1e12. See below.\\n    }\\n\\n    // The PICKLE TOKEN!\\n    PickleToken public pickle;\\n    // Dev fund (2%, initially)\\n    uint256 public devFundDivRate = 50;\\n    // Dev address.\\n    address public devaddr;\\n    // Block number when bonus PICKLE period ends.\\n    uint256 public bonusEndBlock;\\n    // PICKLE tokens created per block.\\n    uint256 public picklePerBlock;\\n    // Bonus muliplier for early pickle makers.\\n    uint256 public constant BONUS_MULTIPLIER = 10;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when PICKLE mining starts.\\n    uint256 public startBlock;\\n\\n    // Events\\n    event Recovered(address token, uint256 amount);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        PickleToken _pickle,\\n        address _devaddr,\\n        uint256 _picklePerBlock,\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) public {\\n        pickle = _pickle;\\n        devaddr = _devaddr;\\n        picklePerBlock = _picklePerBlock;\\n        bonusEndBlock = _bonusEndBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock\\n            ? block.number\\n            : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accPicklePerShare: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's PICKLE allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n            _allocPoint\\n        );\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= bonusEndBlock) {\\n            return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n        } else if (_from >= bonusEndBlock) {\\n            return _to.sub(_from);\\n        } else {\\n            return\\n                bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\\n                    _to.sub(bonusEndBlock)\\n                );\\n        }\\n    }\\n\\n    // View function to see pending PICKLEs on frontend.\\n    function pendingPickle(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accPicklePerShare = pool.accPicklePerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 pickleReward = multiplier\\n                .mul(picklePerBlock)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint);\\n            accPicklePerShare = accPicklePerShare.add(\\n                pickleReward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        return\\n            user.amount.mul(accPicklePerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 pickleReward = multiplier\\n            .mul(picklePerBlock)\\n            .mul(pool.allocPoint)\\n            .div(totalAllocPoint);\\n        pickle.mint(devaddr, pickleReward.div(devFundDivRate));\\n        pickle.mint(address(this), pickleReward);\\n        pool.accPicklePerShare = pool.accPicklePerShare.add(\\n            pickleReward.mul(1e12).div(lpSupply)\\n        );\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for PICKLE allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(pool.accPicklePerShare)\\n                .div(1e12)\\n                .sub(user.rewardDebt);\\n            safePickleTransfer(msg.sender, pending);\\n        }\\n        pool.lpToken.safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n        user.amount = user.amount.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accPicklePerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accPicklePerShare).div(1e12).sub(\\n            user.rewardDebt\\n        );\\n        safePickleTransfer(msg.sender, pending);\\n        user.amount = user.amount.sub(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accPicklePerShare).div(1e12);\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe pickle transfer function, just in case if rounding error causes pool to not have enough PICKLEs.\\n    function safePickleTransfer(address _to, uint256 _amount) internal {\\n        uint256 pickleBal = pickle.balanceOf(address(this));\\n        if (_amount > pickleBal) {\\n            pickle.transfer(_to, pickleBal);\\n        } else {\\n            pickle.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update dev address by the previous dev.\\n    function dev(address _devaddr) public {\\n        require(msg.sender == devaddr, \\\"dev: wut?\\\");\\n        devaddr = _devaddr;\\n    }\\n\\n    // **** Additional functions separate from the original masterchef contract ****\\n\\n    function setPicklePerBlock(uint256 _picklePerBlock) public onlyOwner {\\n        require(_picklePerBlock > 0, \\\"!picklePerBlock-0\\\");\\n\\n        picklePerBlock = _picklePerBlock;\\n    }\\n\\n    function setBonusEndBlock(uint256 _bonusEndBlock) public onlyOwner {\\n        bonusEndBlock = _bonusEndBlock;\\n    }\\n\\n    function setDevFundDivRate(uint256 _devFundDivRate) public onlyOwner {\\n        require(_devFundDivRate > 0, \\\"!devFundDivRate-0\\\");\\n        devFundDivRate = _devFundDivRate;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/yield-farming/pickle-token.sol\": {\r\n      \"content\": \"pragma solidity 0.6.7;\\n\\nimport \\\"../lib/erc20.sol\\\";\\nimport \\\"../lib/ownable.sol\\\";\\n\\n// PickleToken with Governance.\\ncontract PickleToken is ERC20(\\\"PickleToken\\\", \\\"PICKLE\\\"), Ownable {\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/staking-rewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.7;\\n\\nimport \\\"./lib/reentrancy-guard.sol\\\";\\nimport \\\"./lib/pausable.sol\\\";\\nimport \\\"./lib/erc20.sol\\\";\\nimport \\\"./lib/safe-math.sol\\\";\\n\\ncontract StakingRewards is ReentrancyGuard, Pausable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 7 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _owner,\\n        address _rewardsToken,\\n        address _stakingToken\\n    ) public Owned(_owner) {\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function min(uint256 a, uint256 b) public pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        notPaused\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        // Cannot recover the staking token or the rewards token\\n        require(\\n            tokenAddress != address(stakingToken) &&\\n                tokenAddress != address(rewardsToken),\\n            \\\"Cannot withdraw the staking or rewards tokens\\\"\\n        );\\n        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n}\\n\"\r\n    },\r\n    \"src/pickle-jar.sol\": {\r\n      \"content\": \"// https://github.com/iearn-finance/vaults/blob/master/contracts/vaults/yVault.sol\\n\\npragma solidity ^0.6.7;\\n\\nimport \\\"./interfaces/controller.sol\\\";\\n\\nimport \\\"./lib/erc20.sol\\\";\\nimport \\\"./lib/safe-math.sol\\\";\\n\\ncontract PickleJar is ERC20 {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    IERC20 public token;\\n\\n    uint256 public min = 9500;\\n    uint256 public constant max = 10000;\\n\\n    address public governance;\\n    address public timelock;\\n    address public controller;\\n\\n    constructor(address _token, address _governance, address _timelock, address _controller)\\n        public\\n        ERC20(\\n            string(abi.encodePacked(\\\"pickling \\\", ERC20(_token).name())),\\n            string(abi.encodePacked(\\\"p\\\", ERC20(_token).symbol()))\\n        )\\n    {\\n        _setupDecimals(ERC20(_token).decimals());\\n        token = IERC20(_token);\\n        governance = _governance;\\n        timelock = _timelock;\\n        controller = _controller;\\n    }\\n\\n    function balance() public view returns (uint256) {\\n        return\\n            token.balanceOf(address(this)).add(\\n                IController(controller).balanceOf(address(token))\\n            );\\n    }\\n\\n    function setMin(uint256 _min) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        min = _min;\\n    }\\n\\n    function setGovernance(address _governance) public {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) public {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    // Custom logic in here for how much the jars allows to be borrowed\\n    // Sets minimum required on-hand to keep small withdrawals cheap\\n    function available() public view returns (uint256) {\\n        return token.balanceOf(address(this)).mul(min).div(max);\\n    }\\n\\n    function earn() public {\\n        uint256 _bal = available();\\n        token.safeTransfer(controller, _bal);\\n        IController(controller).earn(address(token), _bal);\\n    }\\n\\n    function depositAll() external {\\n        deposit(token.balanceOf(msg.sender));\\n    }\\n\\n    function deposit(uint256 _amount) public {\\n        uint256 _pool = balance();\\n        uint256 _before = token.balanceOf(address(this));\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        uint256 _after = token.balanceOf(address(this));\\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\\n        uint256 shares = 0;\\n        if (totalSupply() == 0) {\\n            shares = _amount;\\n        } else {\\n            shares = (_amount.mul(totalSupply())).div(_pool);\\n        }\\n        _mint(msg.sender, shares);\\n    }\\n\\n    function withdrawAll() external {\\n        withdraw(balanceOf(msg.sender));\\n    }\\n\\n    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\\n    function harvest(address reserve, uint256 amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(reserve != address(token), \\\"token\\\");\\n        IERC20(reserve).safeTransfer(controller, amount);\\n    }\\n\\n    // No rebalance implementation for lower fees and faster swaps\\n    function withdraw(uint256 _shares) public {\\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\\n        _burn(msg.sender, _shares);\\n\\n        // Check balance\\n        uint256 b = token.balanceOf(address(this));\\n        if (b < r) {\\n            uint256 _withdraw = r.sub(b);\\n            IController(controller).withdraw(address(token), _withdraw);\\n            uint256 _after = token.balanceOf(address(this));\\n            uint256 _diff = _after.sub(b);\\n            if (_diff < _withdraw) {\\n                r = b.add(_diff);\\n            }\\n        }\\n\\n        token.safeTransfer(msg.sender, r);\\n    }\\n\\n    function getRatio() public view returns (uint256) {\\n        return balance().mul(1e18).div(totalSupply());\\n    }\\n}\\n\"\r\n    },\r\n    \"src/governance/timelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.7;\\n\\nimport \\\"../lib/safe-math.sol\\\";\\n\\ncontract Timelock {\\n    using SafeMath for uint;\\n\\n    event NewAdmin(address indexed newAdmin);\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\n    event NewDelay(uint indexed newDelay);\\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\\n\\n    uint public constant GRACE_PERIOD = 14 days;\\n    uint public constant MINIMUM_DELAY = 2 days;\\n    uint public constant MAXIMUM_DELAY = 30 days;\\n\\n    address public admin;\\n    address public pendingAdmin;\\n    uint public delay;\\n    bool public admin_initialized;\\n\\n    mapping (bytes32 => bool) public queuedTransactions;\\n\\n\\n    constructor(address admin_, uint delay_) public {\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::constructor: Delay must exceed minimum delay.\\\");\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::constructor: Delay must not exceed maximum delay.\\\");\\n\\n        admin = admin_;\\n        delay = delay_;\\n        admin_initialized = false;\\n    }\\n\\n    // XXX: function() external payable { }\\n    receive() external payable { }\\n\\n    function setDelay(uint delay_) public {\\n        require(msg.sender == address(this), \\\"Timelock::setDelay: Call must come from Timelock.\\\");\\n        require(delay_ >= MINIMUM_DELAY, \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\");\\n        require(delay_ <= MAXIMUM_DELAY, \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\");\\n        delay = delay_;\\n\\n        emit NewDelay(delay);\\n    }\\n\\n    function acceptAdmin() public {\\n        require(msg.sender == pendingAdmin, \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\");\\n        admin = msg.sender;\\n        pendingAdmin = address(0);\\n\\n        emit NewAdmin(admin);\\n    }\\n\\n    function setPendingAdmin(address pendingAdmin_) public {\\n        // allows one time setting of admin for deployment purposes\\n        if (admin_initialized) {\\n            require(msg.sender == address(this), \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\");\\n        } else {\\n            require(msg.sender == admin, \\\"Timelock::setPendingAdmin: First call must come from admin.\\\");\\n            admin_initialized = true;\\n        }\\n        pendingAdmin = pendingAdmin_;\\n\\n        emit NewPendingAdmin(pendingAdmin);\\n    }\\n\\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\\n        require(msg.sender == admin, \\\"Timelock::queueTransaction: Call must come from admin.\\\");\\n        require(eta >= getBlockTimestamp().add(delay), \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = true;\\n\\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\\n        require(msg.sender == admin, \\\"Timelock::cancelTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        queuedTransactions[txHash] = false;\\n\\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\\n    }\\n\\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\\n        require(msg.sender == admin, \\\"Timelock::executeTransaction: Call must come from admin.\\\");\\n\\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\n        require(queuedTransactions[txHash], \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\");\\n        require(getBlockTimestamp() >= eta, \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \\\"Timelock::executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call.value(value)(callData);\\n        require(success, \\\"Timelock::executeTransaction: Transaction execution reverted.\\\");\\n\\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\n\\n        return returnData;\\n    }\\n\\n    function getBlockTimestamp() internal view returns (uint) {\\n        // solium-disable-next-line security/no-block-members\\n        return block.timestamp;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMostPremium\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepCRVMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepCRV\",\"type\":\"uint256\"}],\"name\":\"setKeepCRV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceDevFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalDevFundFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susdv2_gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"susdv2_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StrategyCurveSCRVv3_2", "CompilerVersion": "v0.6.7+commit.b8d736ae", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009d074e37d408542fd38be78848e8814afb38db17000000000000000000000000907d9b32654b8d43e8737e0291ad9bfcce01dad60000000000000000000000006847259b2b3a4c17e7c43c54409810af48ba5210000000000000000000000000d92c7faa0ca0e6ae4918f3a83d9832d9caeaa0d3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}