{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/claim/lib/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nenum ClaimType {\\n    WalletRewards,\\n    CommunityPresale,\\n    PrivatePresale,\\n    Ecosystem,\\n    Contributors\\n}\\n\\nstruct ClaimData {\\n    uint128 totalClaimable;\\n    uint128 claimed;\\n}\\n\\nstruct NFTClaimData {\\n    uint128 airdropTotalClaimable;\\n    uint128 rewardsTotalClaimable;\\n    uint128 airdropClaimed;\\n    uint128 rewardsClaimed;\\n}\\n\\nstruct ClaimSchedule {\\n    uint256 startCycle;\\n    uint256[] lockUpBPs;\\n}\\n\\nstruct NFTClaimable {\\n    uint256 collectionId;\\n    uint256 tokenId;\\n    uint128 airdropTotalClaimable;\\n    uint128 rewardsTotalClaimable;\\n}\\n\\nstruct NFTCollectionInfo {\\n    uint256 collectionId;\\n    uint256[] tokenIds;\\n}\\n\\nstruct NFTCollectionClaimRequest {\\n    uint256 collectionId;\\n    uint256[] tokenIds;\\n    bool[] withNFTAirdropList;\\n    bool[] withNFTRewardsList;\\n}\\n\\nstruct CollectionClaimData {\\n    uint256 collectionId;\\n    uint256 tokenId;\\n    uint128 airdropClaimable;\\n    uint256 airdropClaimableExpiry;\\n    uint128 airdropTotalClaimable;\\n    uint128 airdropClaimed;\\n    uint128 rewardsClaimable;\\n    uint256 rewardsClaimableExpiry;\\n    uint128 rewardsTotalClaimable;\\n    uint128 rewardsClaimed;\\n}\\n\\nstruct UnclaimedNFTRewards {\\n    uint128 lastTokenId;\\n    uint128 totalUnclaimed;\\n}\\n\"\r\n    },\r\n    \"contracts/claim/MemecoinMultiClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IDelegationRegistry} from \\\"contracts/delegation_registry/IDelegationRegistry.sol\\\";\\nimport {IDelegateRegistry} from \\\"contracts/delegation_registry/IDelegateRegistry.sol\\\";\\nimport {ClaimType, NFTCollectionClaimRequest} from \\\"./lib/Structs.sol\\\";\\n\\nerror InvalidDelegate();\\n\\ninterface IMemecoinClaim {\\n    function claimFromMulti(address _requester, ClaimType[] calldata _claimTypes) external;\\n    function claimInNFTsFromMulti(\\n        address _requester,\\n        NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests,\\n        bool _withWalletRewards\\n    ) external;\\n}\\n\\ncontract MemecoinMultiClaim is Context {\\n    IMemecoinClaim public immutable presaleClaim;\\n    IMemecoinClaim public immutable airdropClaim;\\n    IDelegationRegistry public immutable dc;\\n    IDelegateRegistry public immutable dcV2;\\n\\n    constructor(address _presaleClaim, address _airdropClaim) {\\n        presaleClaim = IMemecoinClaim(_presaleClaim);\\n        airdropClaim = IMemecoinClaim(_airdropClaim);\\n        dc = IDelegationRegistry(0x00000000000076A84feF008CDAbe6409d2FE638B);\\n        dcV2 = IDelegateRegistry(0x00000000000000447e69651d841bD8D104Bed493);\\n    }\\n\\n    /// @dev Cross contract claim on Presale, OPTIONALLY ON NFTAirdrop/NFTRewards/WalletRewards\\n    /// @param _vault Vault address of delegate.xyz; pass address(0) if not using delegate wallet\\n    /// @param _claimTypes Array of ClaimType to claim\\n    /// @param _nftCollectionClaimRequests Array of NFTCollectionClaimRequest that consists collection ID of the NFT, token ID(s) the owner owns, array of booleans to indicate NFTAirdrop/NFTRewards claim for each token ID\\n    /// @param _withWalletRewards Boolean to dictate if claimer will claim WalletRewards as well\\n    function multiClaim(\\n        address _vault,\\n        ClaimType[] calldata _claimTypes,\\n        NFTCollectionClaimRequest[] calldata _nftCollectionClaimRequests,\\n        bool _withWalletRewards\\n    ) external {\\n        address requester = _getRequester(_vault);\\n        presaleClaim.claimFromMulti(requester, _claimTypes);\\n        airdropClaim.claimInNFTsFromMulti(requester, _nftCollectionClaimRequests, _withWalletRewards);\\n    }\\n\\n    /// @notice Support both v1 and v2 delegate wallet during the v1 to v2 migration\\n    /// @dev Given _vault (cold wallet) address, verify whether _msgSender() is a permitted delegate to operate on behalf of it\\n    /// @param _vault Address to verify against _msgSender\\n    function _getRequester(address _vault) private view returns (address) {\\n        if (_vault == address(0)) return _msgSender();\\n        bool isDelegateValid = dcV2.checkDelegateForAll(_msgSender(), _vault, \\\"\\\");\\n        if (isDelegateValid) return _vault;\\n        isDelegateValid = dc.checkDelegateForAll(_msgSender(), _vault);\\n        if (!isDelegateValid) revert InvalidDelegate();\\n        return _vault;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/delegation_registry/IDelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.13;\\n\\n/**\\n * @title IDelegateRegistry\\n * @custom:version 2.0\\n * @custom:author foobar (0xfoobar)\\n * @notice A standalone immutable registry storing delegated permissions from one address to another\\n */\\ninterface IDelegateRegistry {\\n    /// @notice Delegation type, NONE is used when a delegation does not exist or is revoked\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        ERC721,\\n        ERC20,\\n        ERC1155\\n    }\\n\\n    /// @notice Struct for returning delegations\\n    struct Delegation {\\n        DelegationType type_;\\n        address to;\\n        address from;\\n        bytes32 rights;\\n        address contract_;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Emitted when an address delegates or revokes rights for their entire wallet\\n    event DelegateAll(address indexed from, address indexed to, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for a contract address\\n    event DelegateContract(\\n        address indexed from, address indexed to, address indexed contract_, bytes32 rights, bool enable\\n    );\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an ERC721 tokenId\\n    event DelegateERC721(\\n        address indexed from,\\n        address indexed to,\\n        address indexed contract_,\\n        uint256 tokenId,\\n        bytes32 rights,\\n        bool enable\\n    );\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of ERC20 tokens\\n    event DelegateERC20(\\n        address indexed from, address indexed to, address indexed contract_, bytes32 rights, uint256 amount\\n    );\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of an ERC1155 tokenId\\n    event DelegateERC1155(\\n        address indexed from,\\n        address indexed to,\\n        address indexed contract_,\\n        uint256 tokenId,\\n        bytes32 rights,\\n        uint256 amount\\n    );\\n\\n    /// @notice Thrown if multicall calldata is malformed\\n    error MulticallFailed();\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n     * @param data The encoded function data for each of the calls to make to this contract\\n     * @return results The results from each of the calls passed in via data\\n     */\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for all contracts\\n     * @param to The address to act as delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateAll(address to, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific contract\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateContract(address to, address contract_, bytes32 rights, bool enable)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific ERC721 token\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC721(address to, address contract_, uint256 tokenId, bytes32 rights, bool enable)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC20 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address for the fungible token contract\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC20(address to, address contract_, bytes32 rights, uint256 amount)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC1155 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address of the contract that holds the token\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount of that token id to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC1155(address to, address contract_, uint256 tokenId, bytes32 rights, uint256 amount)\\n        external\\n        payable\\n        returns (bytes32 delegationHash);\\n\\n    /**\\n     * ----------- CHECKS -----------\\n     */\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the entire wallet\\n     * @param to The potential delegate address\\n     * @param from The potential address who delegated rights\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on the from's behalf\\n     */\\n    function checkDelegateForAll(address to, address from, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specified `contract_` or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet or that specific contract\\n     */\\n    function checkDelegateForContract(address to, address from, address contract_, bytes32 rights)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specific `contract` and `tokenId`, the entire `contract_`, or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param tokenId The token id for the token to delegating\\n     * @param from The wallet that issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet, that contract, or that specific tokenId\\n     */\\n    function checkDelegateForERC721(address to, address from, address contract_, uint256 tokenId, bytes32 rights)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns the amount of ERC20 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC20(address to, address from, address contract_, bytes32 rights)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of a ERC1155 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param tokenId The token id to check the delegated amount of\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC1155(address to, address from, address contract_, uint256 tokenId, bytes32 rights)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * ----------- ENUMERATIONS -----------\\n     */\\n\\n    /**\\n     * @notice Returns all enabled delegations a given delegate has received\\n     * @param to The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getIncomingDelegations(address to) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all enabled delegations an address has given out\\n     * @param from The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getOutgoingDelegations(address from) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has received\\n     * @param to The address to retrieve incoming delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getIncomingDelegationHashes(address to) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has given out\\n     * @param from The address to retrieve outgoing delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getOutgoingDelegationHashes(address from) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns the delegations for a given array of delegation hashes\\n     * @param delegationHashes is an array of hashes that correspond to delegations\\n     * @return delegations Array of Delegation structs, return empty structs for nonexistent or revoked delegations\\n     */\\n    function getDelegationsFromHashes(bytes32[] calldata delegationHashes)\\n        external\\n        view\\n        returns (Delegation[] memory delegations);\\n\\n    /**\\n     * ----------- STORAGE ACCESS -----------\\n     */\\n\\n    /**\\n     * @notice Allows external contracts to read arbitrary storage slots\\n     */\\n    function readSlot(bytes32 location) external view returns (bytes32);\\n\\n    /**\\n     * @notice Allows external contracts to read an arbitrary array of storage slots\\n     */\\n    function readSlots(bytes32[] calldata locations) external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/delegation_registry/IDelegationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title An immutable registry contract to be deployed as a standalone primitive\\n * @dev See EIP-5639, new project launches can read previous cold wallet -> hot wallet delegations\\n * from here and integrate those permissions into their flow\\n */\\ninterface IDelegationRegistry {\\n    /// @notice Delegation type\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        TOKEN\\n    }\\n\\n    /// @notice Info about a single delegation, used for onchain enumeration\\n    struct DelegationInfo {\\n        DelegationType type_;\\n        address vault;\\n        address delegate;\\n        address contract_;\\n        uint256 tokenId;\\n    }\\n\\n    /// @notice Info about a single contract-level delegation\\n    struct ContractDelegation {\\n        address contract_;\\n        address delegate;\\n    }\\n\\n    /// @notice Info about a single token-level delegation\\n    struct TokenDelegation {\\n        address contract_;\\n        uint256 tokenId;\\n        address delegate;\\n    }\\n\\n    /// @notice Emitted when a user delegates their entire wallet\\n    event DelegateForAll(address vault, address delegate, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific contract\\n    event DelegateForContract(address vault, address delegate, address contract_, bool value);\\n\\n    /// @notice Emitted when a user delegates a specific token\\n    event DelegateForToken(address vault, address delegate, address contract_, uint256 tokenId, bool value);\\n\\n    /// @notice Emitted when a user revokes all delegations\\n    event RevokeAllDelegates(address vault);\\n\\n    /// @notice Emitted when a user revoes all delegations for a given delegate\\n    event RevokeDelegate(address vault, address delegate);\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for all contracts\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForAll(address delegate, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific contract\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForContract(address delegate, address contract_, bool value) external;\\n\\n    /**\\n     * @notice Allow the delegate to act on your behalf for a specific token\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param value Whether to enable or disable delegation for this address, true for setting and false for revoking\\n     */\\n    function delegateForToken(address delegate, address contract_, uint256 tokenId, bool value) external;\\n\\n    /**\\n     * @notice Revoke all delegates\\n     */\\n    function revokeAllDelegates() external;\\n\\n    /**\\n     * @notice Revoke a specific delegate for all their permissions\\n     * @param delegate The hotwallet to revoke\\n     */\\n    function revokeDelegate(address delegate) external;\\n\\n    /**\\n     * @notice Remove yourself as a delegate for a specific vault\\n     * @param vault The vault which delegated to the msg.sender, and should be removed\\n     */\\n    function revokeSelf(address vault) external;\\n\\n    /**\\n     * -----------  READ -----------\\n     */\\n\\n    /**\\n     * @notice Returns all active delegations a given delegate is able to claim on behalf of\\n     * @param delegate The delegate that you would like to retrieve delegations for\\n     * @return info Array of DelegationInfo structs\\n     */\\n    function getDelegationsByDelegate(address delegate) external view returns (DelegationInfo[] memory);\\n\\n    /**\\n     * @notice Returns an array of wallet-level delegates for a given vault\\n     * @param vault The cold wallet who issued the delegation\\n     * @return addresses Array of wallet-level delegates for a given vault\\n     */\\n    function getDelegatesForAll(address vault) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault and contract\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault and contract\\n     */\\n    function getDelegatesForContract(address vault, address contract_) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns an array of contract-level delegates for a given vault's token\\n     * @param vault The cold wallet who issued the delegation\\n     * @param contract_ The address for the contract holding the token\\n     * @param tokenId The token id for the token you're delegating\\n     * @return addresses Array of contract-level delegates for a given vault's token\\n     */\\n    function getDelegatesForToken(address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all contract-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of ContractDelegation structs\\n     */\\n    function getContractLevelDelegations(address vault)\\n        external\\n        view\\n        returns (ContractDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all token-level delegations for a given vault\\n     * @param vault The cold wallet who issued the delegations\\n     * @return delegations Array of TokenDelegation structs\\n     */\\n    function getTokenLevelDelegations(address vault) external view returns (TokenDelegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on the entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForAll(address delegate, address vault) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a token contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForContract(address delegate, address vault, address contract_)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice Returns true if the address is delegated to act on your behalf for a specific token, the token's contract or an entire vault\\n     * @param delegate The hotwallet to act on your behalf\\n     * @param contract_ The address for the contract you're delegating\\n     * @param tokenId The token id for the token you're delegating\\n     * @param vault The cold wallet who issued the delegation\\n     */\\n    function checkDelegateForToken(address delegate, address vault, address contract_, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"shanghai\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_presaleClaim\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airdropClaim\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"airdropClaim\",\"outputs\":[{\"internalType\":\"contract IMemecoinClaim\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dc\",\"outputs\":[{\"internalType\":\"contract IDelegationRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcV2\",\"outputs\":[{\"internalType\":\"contract IDelegateRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"enum ClaimType[]\",\"name\":\"_claimTypes\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"withNFTAirdropList\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"withNFTRewardsList\",\"type\":\"bool[]\"}],\"internalType\":\"struct NFTCollectionClaimRequest[]\",\"name\":\"_nftCollectionClaimRequests\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"_withWalletRewards\",\"type\":\"bool\"}],\"name\":\"multiClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleClaim\",\"outputs\":[{\"internalType\":\"contract IMemecoinClaim\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MemecoinMultiClaim", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e6f3494e839f3d3fb36c407eb35cd85d90dc3704000000000000000000000000b1911d8ffcc2d8ca6c5ea4f4f18be6ea675c1ce7", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}