{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IPRTLToken {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract PremiumReserve {\r\n    address private owner;\r\n    uint8 public decimals;\r\n    uint256 public premiumPrice;\r\n    uint256 public premiumPriceERC;\r\n    uint32 private totalReserved;\r\n    uint32 public uniqueUsers;\r\n    \r\n    uint32 private constant MAX_RESERVES = 500;\r\n    bool public reserveOn;\r\n    mapping(address => uint32) internal reserved;\r\n    IPRTLToken private prtlToken;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    modifier ownerOnly() {\r\n        require(msg.sender == owner, \"Only the contract owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 price,uint256 priceerc, address prtlTokenAddress) {\r\n        owner = msg.sender;\r\n        premiumPrice = price;\r\n        premiumPriceERC = priceerc;\r\n        prtlToken = IPRTLToken(prtlTokenAddress);\r\n        decimals = 0;\r\n    }\r\n\r\n    function start() public ownerOnly {\r\n        reserveOn = true;\r\n    }\r\n\r\n    function end() public ownerOnly {\r\n        reserveOn = false;\r\n    }\r\n\r\n    function reserveApexETH(uint32 amount) public payable {\r\n        require(reserveOn, \"Reserve has not started yet.\");\r\n        require(totalReserved + amount <= MAX_RESERVES, \"Max reserves reached\");\r\n        require(msg.value == (premiumPrice * amount), \"Incorrect value\");\r\n        require(reserved[msg.sender] + amount <= 3, \"Max reserves per User reached\");\r\n\r\n        if (reserved[msg.sender] == 0) {\r\n            uniqueUsers += 1;\r\n        }\r\n\r\n        reserved[msg.sender] += amount;\r\n        totalReserved += amount;\r\n        emit Transfer(address(0), msg.sender, amount);\r\n    }\r\n\r\n    function reserveApexPRTL(uint32 amount) public {\r\n        require(reserveOn, \"Reserve has not started yet.\");\r\n        require(totalReserved + amount <= MAX_RESERVES, \"Max reserves reached\");\r\n        uint256 requiredTokens = premiumPriceERC * amount;\r\n        require(prtlToken.transferFrom(msg.sender, owner, requiredTokens), \"Token transfer failed\");\r\n        require(reserved[msg.sender] + amount <= 3, \"Max reserves per User reached\");\r\n        \r\n        if (reserved[msg.sender] == 0) {\r\n            uniqueUsers += 1;\r\n        }\r\n\r\n        reserved[msg.sender] += amount;\r\n        totalReserved += amount;\r\n        emit Transfer(address(0), msg.sender, amount);\r\n    }\r\n\r\n    function updatePrice(uint256 newPrice) public ownerOnly{\r\n        premiumPriceERC = newPrice;\r\n        \r\n    }\r\n\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"Apex Reserve\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"AR\";\r\n    }\r\n\r\n    \r\n\r\n    function balanceOf(address user) public view returns (uint32) {\r\n        return reserved[user];\r\n    }\r\n\r\n    function getTotalReserved() public view returns (uint32) {\r\n        return totalReserved;\r\n    }\r\n\r\n    function withdraw() public ownerOnly {\r\n        uint256 totalBalance = address(this).balance;\r\n        require(totalBalance > 0, \"No funds to withdraw\");\r\n\r\n        (bool sent, ) = owner.call{value: totalBalance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceerc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"prtlTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReserved\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPriceERC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"reserveApexETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"amount\",\"type\":\"uint32\"}],\"name\":\"reserveApexPRTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueUsers\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PremiumReserve", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000162ea854d0fc0000000000000000000000000000000000000000000000000070c1cc73b00c800000000000000000000000000001bbe973bef3a977fc51cbed703e8ffdefe001fed", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://976a7000049a33ef5cdb70567bf51e656e72f17e45bfe90056f0d846fbe50426"}