{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-v4/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/cryptography/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-v4/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/voting-escrow/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IVotingEscrow {\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  struct Point {\\n    int128 bias;\\n    int128 slope;\\n    uint256 ts;\\n    uint256 blk;\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  function token() external view returns (address);\\n\\n  function epoch() external view returns (uint256);\\n\\n  function point_history(uint256 epoch) external view returns (Point memory);\\n\\n  function user_point_epoch(address account) external view returns (uint256);\\n\\n  function user_point_history(address account, uint256 epoch) external view returns (Point memory);\\n\\n  /// @notice Get the timestamp for checkpoint `epoch` for `addr`\\n  /// @param addr User wallet address\\n  /// @param epoch User epoch number\\n  /// @return Epoch time of the checkpoint\\n  function user_point_history__ts(address addr, uint256 epoch) external view returns (uint256);\\n\\n  /// @notice Get timestamp when `addr`'s lock finishes\\n  /// @param addr User wallet\\n  /// @return Epoch time of the lock end\\n  function locked__end(address addr) external view returns (uint256);\\n\\n  /// @notice Calculate total voting power\\n  /// @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\\n  /// @return Total voting power\\n  function totalSupply() external view returns (uint256);\\n\\n  /// @notice Get the current voting power for `msg.sender`\\n  /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n  /// @param addr User wallet address\\n  /// @return User voting power\\n  function balanceOf(address addr) external view returns (uint256);\\n\\n  /// @notice time -> signed slope change\\n  function slope_changes(uint256 week) external view returns (int128);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Deposit `value` tokens for `addr` and add to the lock\\n  /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n  ///      cannot extend their locktime and deposit for a brand new user\\n  /// @param addr User's wallet address\\n  /// @param value Amount to add to user's lock\\n  function deposit_for(address addr, uint256 value) external;\\n\\n  /// @notice Deposit `value` tokens for `msg.sender` and lock until `unlock_time`\\n  /// @param value Amount to deposit\\n  /// @param unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n  function create_lock(uint256 value, uint256 unlock_time) external;\\n\\n  /// @notice Deposit `value` additional tokens for `msg.sender`\\n  ///         without modifying the unlock time\\n  /// @param value Amount of tokens to deposit and add to the lock\\n  function increase_amount(uint256 value) external;\\n\\n  /// @notice Extend the unlock time for `msg.sender` to `unlock_time`\\n  /// @param unlock_time New epoch time for unlocking\\n  function increase_unlock_time(uint256 unlock_time) external;\\n\\n  /// @notice Withdraw all tokens for `msg.sender`\\n  /// @dev Only possible if the lock has expired\\n  function withdraw() external;\\n\\n  /// @notice Record global data to checkpoint\\n  function checkpoint() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/voting-escrow/IVotingEscrowBoost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IVotingEscrowBoost {\\n  /**********\\n   * Errors *\\n   **********/\\n\\n  /// @dev Thrown when deadline is expired in `permit`.\\n  error ExpiredDeadline();\\n\\n  /// @dev Thrown when signature is invalid in `permit`.\\n  error InvalidSignature();\\n\\n  /// @dev Thrown when zero address try to approve.\\n  error ApproveFromZeroAddress();\\n\\n  /// @dev Thrown when approve to zero address.\\n  error ApproveToZeroAddress();\\n\\n  /// @dev Thrown when decrease allowance below zero.\\n  error DecreasedAllowanceBelowZero();\\n\\n  /// @dev Thrown when someone try to use more than allowance.\\n  error InsufficientAllowance();\\n\\n  /// @dev Thrown when boost zero amount.\\n  error BoostZeroAmount();\\n\\n  /// @dev Thrown when boost endtime before current timestamp.\\n  error EndTimeSmallerThanCurrentTimestamp();\\n\\n  /// @dev Thrown when boost endtime is not multiple of week.\\n  error EndTimeNotAlignedWithWeek();\\n\\n  /// @dev Thrown when boost endtime exceed lock end.\\n  error EndTimeExceedLockEnd();\\n\\n  /// @dev Thrown when boost more than current delegable balance.\\n  error BoostExceedBalance();\\n\\n  /// @dev Thrown when unboost a non-existed boost.\\n  error IndexOutOfBound();\\n\\n  /// @dev Thrown when caller try to cancel a boost not belong to him.\\n  error ErrorOnlyCancelByReceiver();\\n\\n  /// @dev Thrown when cancel more than boosted.\\n  error CancelBoostExceedBalance();\\n\\n  /// @dev Thrown when cancel expired boost.\\n  error CancelExpiredBoost();\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when `value` tokens are moved from one account (`from`) to\\n  /// another (`to`).\\n  ///\\n  /// Note that `value` may be zero.\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /// @notice Emitted when the allowance of a `spender` for an `owner` is set by\\n  /// a call to {approve}. `value` is the new allowance.\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /// @notice Emitted when the owner delegates ve balance to another user.\\n  /// @param owner The address of ve balance owner.\\n  /// @param receiver The address of ve balance recipient.\\n  /// @param bias The bias value at timestamp `start`.\\n  /// @param slope The slope value.\\n  /// @param start The timestamp when the boost starts.\\n  event Boost(address indexed owner, address indexed receiver, uint256 bias, uint256 slope, uint256 start);\\n\\n  /// @notice Emitted when the owner cancel an old boost.\\n  /// @param owner The address of ve balance owner.\\n  /// @param receiver The address of ve balance recipient.\\n  /// @param bias The bias value at timestamp `start`.\\n  /// @param slope The slope value.\\n  /// @param start The timestamp when the boost starts.\\n  event Unboost(address indexed owner, address indexed receiver, uint256 bias, uint256 slope, uint256 start);\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Returns the name of the token.\\n  function name() external view returns (string memory);\\n\\n  /// @notice Returns the symbol of the token.\\n  function symbol() external view returns (string memory);\\n\\n  /// @notice Returns the decimals places of the token.\\n  function decimals() external view returns (uint8);\\n\\n  /// @notice Returns the amount of tokens in existence.\\n  function totalSupply() external view returns (uint256);\\n\\n  /// @notice Returns the remaining number of tokens that `spender` will be\\n  /// allowed to spend on behalf of `owner` through {transferFrom}. This is\\n  /// zero by default.\\n  ///\\n  /// This value changes when {approve} or {transferFrom} are called.\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /// @notice Returns the amount of tokens owned by `account`.\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /// @notice Return the ve balance considering delegating.\\n  /// @param account The address of user to query.\\n  function adjustedVeBalance(address account) external view returns (uint256);\\n\\n  /// @notice Return the ve balance delegated to others.\\n  /// @param account The address of user to query.\\n  function delegatedBalance(address account) external view returns (uint256);\\n\\n  /// @notice Return the ve balance received from others.\\n  /// @param account The address of user to query.\\n  function receivedBalance(address account) external view returns (uint256);\\n\\n  /// @notice Return the ve balance can be delegated to others.\\n  /// @param account The address of user to query.\\n  function delegableBalance(address account) external view returns (uint256);\\n\\n  /// @notice Returns the current nonce for `owner`. This value must be\\n  /// included whenever a signature is generated for {permit}.\\n  ///\\n  /// Every successful call to {permit} increases ``owner``'s nonce by one. This\\n  /// prevents a signature from being used multiple times.\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /// @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\\n  ///\\n  /// Returns a boolean value indicating whether the operation succeeded.\\n  ///\\n  /// IMPORTANT: Beware that changing an allowance with this method brings the risk\\n  /// that someone may use both the old and the new allowance by unfortunate\\n  /// transaction ordering. One possible solution to mitigate this race\\n  /// condition is to first reduce the spender's allowance to 0 and set the\\n  /// desired value afterwards:\\n  /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n  ///\\n  /// Emits an {Approval} event.\\n  function approve(address spender, uint256 amount) external;\\n\\n  /// @notice Atomically increases the allowance granted to `spender` by the caller.\\n  ///\\n  /// This is an alternative to {approve} that can be used as a mitigation for\\n  /// problems described in {IVotingEscrowBoost-approve}.\\n  ///\\n  /// Emits an {Approval} event indicating the updated allowance.\\n  ///\\n  /// Requirements:\\n  ///\\n  /// - `spender` cannot be the zero address.\\n  function increaseAllowance(address spender, uint256 addedValue) external;\\n\\n  /// @notice Atomically decreases the allowance granted to `spender` by the caller.\\n  ///\\n  /// This is an alternative to {approve} that can be used as a mitigation for\\n  /// problems described in {IVotingEscrowBoost-approve}.\\n  ///\\n  /// Emits an {Approval} event indicating the updated allowance.\\n  ///\\n  /// Requirements:\\n  ///\\n  /// - `spender` cannot be the zero address.\\n  /// - `spender` must have allowance for the caller of at least\\n  /// `subtractedValue`.\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external;\\n\\n  /// @notice Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n  /// given ``owner``'s signed approval.\\n  ///\\n  /// IMPORTANT: The same issues {IVotingEscrowBoost-approve} has related to transaction\\n  /// ordering also apply here.\\n  ///\\n  /// Emits an {Approval} event.\\n  ///\\n  /// Requirements:\\n  ///\\n  /// - `spender` cannot be the zero address.\\n  /// - `deadline` must be a timestamp in the future.\\n  /// - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n  /// over the EIP712-formatted function arguments.\\n  /// - the signature must use ``owner``'s current nonce (see {nonces}).\\n  ///\\n  /// For more information on the signature format, see the\\n  /// https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n  /// section].\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /// @notice Boost ve balance to other user.\\n  /// @param receiver The address of recipient.\\n  /// @param amount The amount of ve balance to boost.\\n  /// @param endtime The end timestamp of this boost.\\n  function boost(\\n    address receiver,\\n    uint256 amount,\\n    uint256 endtime\\n  ) external;\\n\\n  /// @notice Boost ve balance to other user on behalf of another user.\\n  /// @param owner The address of ve balance owner.\\n  /// @param receiver The address of recipient.\\n  /// @param amount The amount of ve balance to boost.\\n  /// @param endtime The end timestamp of this boost.\\n  function boostFrom(\\n    address owner,\\n    address receiver,\\n    uint256 amount,\\n    uint256 endtime\\n  ) external;\\n\\n  /// @notice Cancel an existing boost.\\n  /// @param owner The owner of the boost.\\n  /// @param index The index of in the boost lists.\\n  /// @param amount The amount of boost to cancel.\\n  function unboost(\\n    address owner,\\n    uint256 index,\\n    uint128 amount\\n  ) external;\\n\\n  /// @notice Update the user balance snapshot.\\n  /// @param account The address of the user to update.\\n  function checkpoint(address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/voting-escrow/VotingEscrowBoost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.20;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts-v4/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts-v4/utils/cryptography/ECDSA.sol\\\";\\nimport { EIP712 } from \\\"@openzeppelin/contracts-v4/utils/cryptography/EIP712.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts-v4/utils/Context.sol\\\";\\n\\nimport { IVotingEscrow } from \\\"../interfaces/voting-escrow/IVotingEscrow.sol\\\";\\nimport { IVotingEscrowBoost } from \\\"../interfaces/voting-escrow/IVotingEscrowBoost.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable not-rely-on-time\\n\\ncontract VotingEscrowBoost is EIP712, Context, IVotingEscrowBoost {\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @notice The address of VotingEscrow contract.\\n  address public immutable ve;\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  uint8 public constant override decimals = 18;\\n\\n  // solhint-disable-next-line var-name-mixedcase\\n  bytes32 private constant _PERMIT_TYPEHASH =\\n    keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n  /// @dev The number of seconds in a week.\\n  uint256 private constant WEEK = 7 days;\\n\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  /// The boost power can be represented as `bias - slope * (t - ts)` if the time `t` and `ts`\\n  /// is in the same epoch. If epoch cross happens, we will change the corresponding value based\\n  /// on slope changes.\\n  struct Point {\\n    // The bias for the linear function\\n    uint112 bias;\\n    // The slop for the linear function\\n    uint112 slope;\\n    // The start timestamp in seconds for current epoch.\\n    // `uint32` should be enough for next 83 years.\\n    uint32 ts;\\n  }\\n\\n  /// @dev Compiler will pack this into two `uint256`.\\n  struct BoostItem {\\n    // The address of boost recipient.\\n    address receiver;\\n    // The start timestamp of the boost.\\n    uint48 startTime;\\n    // The end timestamp of the boost.\\n    uint48 endTime;\\n    // The initial amount of boost.\\n    uint128 initialAmount;\\n    // The amount of cancelled boost.\\n    uint128 cancelAmount;\\n  }\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  mapping(address => mapping(address => uint256)) public override allowance;\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  mapping(address => uint256) public override nonces;\\n\\n  /// @notice Mapping from user address to a list of boosts.\\n  mapping(address => BoostItem[]) public boosts;\\n\\n  /// @notice Mapping from user address to delegation information.\\n  mapping(address => Point) public delegated;\\n\\n  /// @notice Mapping from user address to delegation endtime to slope changes.\\n  mapping(address => mapping(uint256 => uint256)) public delegatedSlopeChanges;\\n\\n  /// @notice Mapping from user address to received information.\\n  mapping(address => Point) public received;\\n\\n  /// @notice Mapping from user address to received endtime to slope changes.\\n  mapping(address => mapping(uint256 => uint256)) public receivedSlopeChanges;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _ve) EIP712(\\\"VotingEscrow Boost\\\", \\\"1\\\") {\\n    ve = _ve;\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function name() external view returns (string memory) {\\n    return string(abi.encodePacked(IERC20Metadata(ve).name(), \\\" Boost\\\"));\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function symbol() external view returns (string memory) {\\n    return string(abi.encodePacked(IERC20Metadata(ve).symbol(), \\\"Boost\\\"));\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function totalSupply() external view returns (uint256) {\\n    return IERC20Metadata(ve).totalSupply();\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function balanceOf(address _account) external view returns (uint256) {\\n    return _balanceOf(_account);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function adjustedVeBalance(address _account) external view returns (uint256) {\\n    return _balanceOf(_account);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function delegatedBalance(address _account) public view returns (uint256) {\\n    (Point memory p, ) = _checkpoint(_account, true);\\n    return p.bias - p.slope * (block.timestamp - p.ts);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function receivedBalance(address _account) external view returns (uint256) {\\n    (Point memory p, ) = _checkpoint(_account, false);\\n    return p.bias - p.slope * (block.timestamp - p.ts);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function delegableBalance(address _account) external view returns (uint256) {\\n    return IVotingEscrow(ve).balanceOf(_account) - delegatedBalance(_account);\\n  }\\n\\n  /// @notice Return the number of boosts from this user.\\n  function boostLength(address _account) public view returns (uint256) {\\n    return boosts[_account].length;\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function approve(address spender, uint256 amount) external {\\n    address owner = _msgSender();\\n    _approve(owner, spender, amount);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function increaseAllowance(address spender, uint256 addedValue) external {\\n    address owner = _msgSender();\\n    _approve(owner, spender, allowance[owner][spender] + addedValue);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external {\\n    address owner = _msgSender();\\n    uint256 currentAllowance = allowance[owner][spender];\\n    if (currentAllowance < subtractedValue) revert DecreasedAllowanceBelowZero();\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    if (block.timestamp > deadline) {\\n      revert ExpiredDeadline();\\n    }\\n\\n    bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n    bytes32 hash = _hashTypedDataV4(structHash);\\n\\n    address signer = ECDSA.recover(hash, v, r, s);\\n    if (signer != owner) {\\n      revert InvalidSignature();\\n    }\\n\\n    _approve(owner, spender, value);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function boost(\\n    address _receiver,\\n    uint256 _amount,\\n    uint256 _endtime\\n  ) external {\\n    address owner = _msgSender();\\n    _boost(owner, _receiver, _amount, _endtime);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function boostFrom(\\n    address _owner,\\n    address _receiver,\\n    uint256 _amount,\\n    uint256 _endtime\\n  ) external {\\n    address spender = _msgSender();\\n\\n    _spendAllowance(_owner, spender, _amount);\\n    _boost(_owner, _receiver, _amount, _endtime);\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function unboost(\\n    address _owner,\\n    uint256 _index,\\n    uint128 _amount\\n  ) external {\\n    address _caller = _msgSender();\\n    if (_index >= boostLength(_owner)) revert IndexOutOfBound();\\n\\n    BoostItem memory _item = boosts[_owner][_index];\\n    // we only allow receiver to return boost.\\n    if (_item.receiver != _caller) revert ErrorOnlyCancelByReceiver();\\n\\n    _item.cancelAmount += _amount;\\n    if (_item.cancelAmount > _item.initialAmount) revert CancelBoostExceedBalance();\\n    if (_item.endTime <= block.timestamp) revert CancelExpiredBoost();\\n\\n    // update amount based on current timestamp\\n    _amount -= uint128((uint256(_amount) * (block.timestamp - _item.startTime)) / (_item.endTime - _item.startTime));\\n\\n    // checkpoint delegated point\\n    Point memory p = _checkpointWrite(_owner, true);\\n\\n    // calculate slope and bias being added\\n    uint112 slope = uint112(_amount / (_item.endTime - block.timestamp));\\n    uint112 bias = uint112(slope * (_item.endTime - block.timestamp));\\n\\n    // update delegated point\\n    p.bias -= bias;\\n    p.slope -= slope;\\n\\n    // store updated values\\n    delegated[_owner] = p;\\n    delegatedSlopeChanges[_owner][_item.endTime] -= slope;\\n\\n    // update received amount\\n    p = _checkpointWrite(_item.receiver, false);\\n    p.bias -= bias;\\n    p.slope -= slope;\\n\\n    // store updated values\\n    received[_item.receiver] = p;\\n    receivedSlopeChanges[_item.receiver][_item.endTime] -= slope;\\n\\n    emit Transfer(_item.receiver, address(0), bias);\\n\\n    // also checkpoint received and delegated\\n    received[_owner] = _checkpointWrite(_owner, false);\\n    delegated[_item.receiver] = _checkpointWrite(_item.receiver, true);\\n\\n    emit Unboost(_owner, _item.receiver, bias, slope, block.timestamp);\\n\\n    boosts[_owner][_index] = _item;\\n  }\\n\\n  /// @inheritdoc IVotingEscrowBoost\\n  function checkpoint(address _account) external {\\n    delegated[_account] = _checkpointWrite(_account, true);\\n    received[_account] = _checkpointWrite(_account, false);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to boost votes to others.\\n  function _boost(\\n    address _owner,\\n    address _receiver,\\n    uint256 _amount,\\n    uint256 _endtime\\n  ) private {\\n    if (_amount == 0) revert BoostZeroAmount();\\n    if (_endtime <= block.timestamp) revert EndTimeSmallerThanCurrentTimestamp();\\n    if (_endtime % WEEK != 0) revert EndTimeNotAlignedWithWeek();\\n    if (_endtime > IVotingEscrow(ve).locked__end(_owner)) revert EndTimeExceedLockEnd();\\n\\n    // checkpoint delegated point\\n    Point memory p = _checkpointWrite(_owner, true);\\n    if (_amount > IVotingEscrow(ve).balanceOf(_owner) - (p.bias - p.slope * (block.timestamp - p.ts))) {\\n      revert BoostExceedBalance();\\n    }\\n\\n    // calculate slope and bias being added\\n    uint112 slope = uint112(_amount / (_endtime - block.timestamp));\\n    uint112 bias = uint112(slope * (_endtime - block.timestamp));\\n\\n    // update delegated point\\n    p.bias += bias;\\n    p.slope += slope;\\n\\n    // store updated values\\n    delegated[_owner] = p;\\n    delegatedSlopeChanges[_owner][_endtime] += slope;\\n\\n    // update received amount\\n    p = _checkpointWrite(_receiver, false);\\n    p.bias += bias;\\n    p.slope += slope;\\n\\n    // store updated values\\n    received[_receiver] = p;\\n    receivedSlopeChanges[_receiver][_endtime] += slope;\\n\\n    emit Transfer(_owner, _receiver, bias);\\n    emit Boost(_owner, _receiver, bias, slope, block.timestamp);\\n\\n    // also checkpoint received and delegated\\n    received[_owner] = _checkpointWrite(_owner, false);\\n    delegated[_receiver] = _checkpointWrite(_receiver, true);\\n\\n    boosts[_owner].push(\\n      BoostItem({\\n        receiver: _receiver,\\n        startTime: uint48(block.timestamp),\\n        endTime: uint48(_endtime),\\n        initialAmount: uint128(bias),\\n        cancelAmount: 0\\n      })\\n    );\\n  }\\n\\n  function _balanceOf(address _account) private view returns (uint256) {\\n    uint256 _amount = IVotingEscrow(ve).balanceOf(_account);\\n\\n    (Point memory p, ) = _checkpoint(_account, true);\\n    _amount -= uint256(p.bias - p.slope * (block.timestamp - p.ts));\\n\\n    (p, ) = _checkpoint(_account, false);\\n    _amount += uint256(p.bias - p.slope * (block.timestamp - p.ts));\\n\\n    return _amount;\\n  }\\n\\n  /// @dev Internal function to read checkpoint result without state change.\\n  /// @param _account The address of user to checkpoint.\\n  /// @param _isDelegated whether to checkpoint delegate snapshot.\\n  /// @return p The snapshot point after checkpoint.\\n  /// @return dbias The ve balance decreased due to time decay.\\n  function _checkpoint(address _account, bool _isDelegated) internal view returns (Point memory p, uint256 dbias) {\\n    p = _isDelegated ? delegated[_account] : received[_account];\\n    if (p.ts == 0) {\\n      p.ts = uint32(block.timestamp);\\n    }\\n    if (p.ts == block.timestamp) {\\n      return (p, dbias);\\n    }\\n\\n    uint256 ts = (p.ts / WEEK) * WEEK;\\n    for (uint256 i = 0; i < 255; i++) {\\n      ts += WEEK;\\n      uint256 _slopeChange = 0;\\n      if (ts > block.timestamp) {\\n        ts = block.timestamp;\\n      } else {\\n        _slopeChange = _isDelegated ? delegatedSlopeChanges[_account][ts] : receivedSlopeChanges[_account][ts];\\n      }\\n\\n      uint112 _amount = p.slope * uint112(ts - p.ts);\\n      dbias += uint256(_amount);\\n      p.bias -= _amount;\\n      p.slope -= uint112(_slopeChange);\\n      p.ts = uint32(ts);\\n\\n      if (p.ts == block.timestamp) {\\n        break;\\n      }\\n    }\\n  }\\n\\n  /// @dev Internal function to read checkpoint result with state change.\\n  /// @param _account The address of user to checkpoint.\\n  /// @param _isDelegated whether to checkpoint delegate snapshot.\\n  /// @return p The snapshot point after checkpoint.\\n  function _checkpointWrite(address _account, bool _isDelegated) internal returns (Point memory p) {\\n    uint256 dbias;\\n    (p, dbias) = _checkpoint(_account, _isDelegated);\\n\\n    // received boost\\n    if (!_isDelegated && dbias > 0) {\\n      emit Transfer(_account, address(0), dbias);\\n    }\\n  }\\n\\n  /// @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n  ///\\n  /// Does not update the allowance amount in case of infinite allowance.\\n  /// Revert if not enough allowance is available.\\n  ///\\n  /// Might emit an {Approval} event.\\n  function _spendAllowance(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) private {\\n    uint256 currentAllowance = allowance[owner][spender];\\n    if (currentAllowance != type(uint256).max) {\\n      if (currentAllowance < amount) revert InsufficientAllowance();\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  /// @dev See {IVotingEscrowBoost-approve}.\\n  ///\\n  /// NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n  /// `transferFrom`. This is semantically equivalent to an infinite approval.\\n  ///\\n  /// Requirements:\\n  ///\\n  /// - `spender` cannot be the zero address.\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) private {\\n    if (owner == address(0)) revert ApproveFromZeroAddress();\\n    if (spender == address(0)) revert ApproveToZeroAddress();\\n\\n    allowance[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /// @dev \\\"Consume a nonce\\\": return the current value and increment.\\n  function _useNonce(address _owner) private returns (uint256 _current) {\\n    _current = nonces[_owner];\\n    unchecked {\\n      nonces[_owner] = _current + 1;\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoostExceedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BoostZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CancelBoostExceedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CancelExpiredBoost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecreasedAllowanceBelowZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EndTimeExceedLockEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EndTimeNotAlignedWithWeek\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EndTimeSmallerThanCurrentTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorOnlyCancelByReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"Boost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bias\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slope\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"Unboost\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"adjustedVeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endtime\",\"type\":\"uint256\"}],\"name\":\"boostFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"boostLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"boosts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"endTime\",\"type\":\"uint48\"},{\"internalType\":\"uint128\",\"name\":\"initialAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"cancelAmount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"delegableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegated\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"bias\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"slope\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"ts\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"delegatedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegatedSlopeChanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"received\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"bias\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"slope\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"ts\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"receivedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivedSlopeChanges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"_amount\",\"type\":\"uint128\"}],\"name\":\"unboost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VotingEscrowBoost", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ec6b8a3f3605b083f7044c0f31f2cac0caf1d469", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}