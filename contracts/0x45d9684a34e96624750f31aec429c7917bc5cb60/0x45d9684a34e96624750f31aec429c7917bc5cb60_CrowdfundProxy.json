{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/producers/crowdfunds/crowdfund/CrowdfundProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\nimport {CrowdfundStorage} from \\\"./CrowdfundStorage.sol\\\";\\nimport {ERC20Storage} from \\\"../../../external/ERC20Storage.sol\\\";\\nimport {IERC20Events} from \\\"../../../external/interface/IERC20.sol\\\";\\n\\ninterface ICrowdfundFactory {\\n    function mediaAddress() external returns (address);\\n\\n    function logic() external returns (address);\\n\\n    // ERC20 data.\\n    function parameters()\\n        external\\n        returns (\\n            address payable fundingRecipient,\\n            uint256 fundingCap,\\n            uint256 operatorPercent,\\n            uint256 feePercentage\\n        );\\n}\\n\\n/**\\n * @title CrowdfundProxy\\n * @author MirrorXYZ\\n */\\ncontract CrowdfundProxy is CrowdfundStorage, ERC20Storage, IERC20Events {\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    constructor(\\n        address treasuryConfig_,\\n        address payable operator_,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC20Storage(name_, symbol_) {\\n        address logic = ICrowdfundFactory(msg.sender).logic();\\n\\n        assembly {\\n            sstore(_IMPLEMENTATION_SLOT, logic)\\n        }\\n\\n        emit Upgraded(logic);\\n\\n        // Crowdfund-specific data.\\n        (\\n            fundingRecipient,\\n            fundingCap,\\n            operatorPercent,\\n            feePercentage\\n        ) = ICrowdfundFactory(msg.sender).parameters();\\n\\n        operator = operator_;\\n        treasuryConfig = treasuryConfig_;\\n        // Initialize mutable storage.\\n        status = Status.FUNDING;\\n    }\\n\\n    /// @notice Get current logic\\n    function logic() external view returns (address logic_) {\\n        assembly {\\n            logic_ := sload(_IMPLEMENTATION_SLOT)\\n        }\\n    }\\n\\n    fallback() external payable {\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                sload(_IMPLEMENTATION_SLOT),\\n                ptr,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n            returndatacopy(ptr, 0, size)\\n\\n            switch result\\n            case 0 {\\n                revert(ptr, size)\\n            }\\n            default {\\n                return(ptr, size)\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/producers/crowdfunds/crowdfund/CrowdfundStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title CrowdfundStorage\\n * @author MirrorXYZ\\n */\\ncontract CrowdfundStorage {\\n    /**\\n     * @notice The two states that this contract can exist in.\\n     * \\\"FUNDING\\\" allows contributors to add funds.\\n     */\\n    enum Status {\\n        FUNDING,\\n        TRADING\\n    }\\n\\n    // ============ Constants ============\\n\\n    /// @notice The factor by which ETH contributions will multiply into crowdfund tokens.\\n    uint16 internal constant TOKEN_SCALE = 1000;\\n\\n    // ============ Reentrancy ============\\n\\n    /// @notice Reentrancy constants.\\n    uint256 internal constant REENTRANCY_NOT_ENTERED = 1;\\n    uint256 internal constant REENTRANCY_ENTERED = 2;\\n\\n    /// @notice Current reentrancy status -- used by the modifier.\\n    uint256 internal reentrancy_status;\\n\\n    /// @notice The operator has a special role to change contract status.\\n    address payable public operator;\\n\\n    /// @notice Receives the funds when calling withdraw. Operator can configure.\\n    address payable public fundingRecipient;\\n\\n    /// @notice Treasury configuration.\\n    address public treasuryConfig;\\n\\n    /// @notice We add a hard cap to prevent raising more funds than deemed reasonable.\\n    uint256 public fundingCap;\\n\\n    /// @notice Fee percentage that the crowdfund pays to the treasury.\\n    uint256 public feePercentage;\\n\\n    /// @notice The operator takes some equity in the tokens, represented by this percent.\\n    uint256 public operatorPercent;\\n\\n    // ============ Mutable Storage ============\\n\\n    /// @notice Represents the current state of the campaign.\\n    Status public status;\\n}\\n\"\r\n    },\r\n    \"contracts/external/ERC20Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\n/**\\n * @title ERC20Storage\\n * @author MirrorXYZ\\n */\\ncontract ERC20Storage {\\n    /// @notice EIP-20 token name for this token\\n    string public name;\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public symbol;\\n\\n    /// @notice EIP-20 total number of tokens in circulation\\n    uint256 public totalSupply;\\n\\n    /// @notice Initialize total supply to zero.\\n    constructor(string memory name_, string memory symbol_) {\\n        name = name_;\\n        symbol = symbol_;\\n        totalSupply = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.6;\\n\\ninterface IERC20 {\\n    /// @notice EIP-20 token name for this token\\n    function name() external returns (string calldata);\\n\\n    /// @notice EIP-20 token symbol for this token\\n    function symbol() external returns (string calldata);\\n\\n    /// @notice EIP-20 token decimals for this token\\n    function decimals() external returns (uint8);\\n\\n    /// @notice EIP-20 total number of tokens in circulation\\n    function totalSupply() external returns (uint256);\\n\\n    /// @notice EIP-20 official record of token balances for each account\\n    function balanceOf(address account) external returns (uint256);\\n\\n    /// @notice EIP-20 allowance amounts on behalf of others\\n    function allowance(address owner, address spender)\\n        external\\n        returns (uint256);\\n\\n    /// @notice EIP-20 approves _spender_ to transfer up to _value_ multiple times\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /// @notice EIP-20 transfer _value_ to _to_ from _msg.sender_\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /// @notice EIP-20 transfer _value_ to _to_ from _from_\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\\ninterface IERC20Events {\\n    /// @notice EIP-20 Mint event\\n    event Mint(address indexed to, uint256 amount);\\n\\n    /// @notice EIP-20 approval event\\n    event Approval(\\n        address indexed from,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /// @notice EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryConfig_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"logic_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum CrowdfundStorage.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CrowdfundProxy", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "00000000000000000000000021a93be569666527dae0fdbfbe7715299dec1202000000000000000000000000467aadc88d99b4e978a8d3d4f0a9017dcaecaabf000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000001d427269676874204d6f6d656e74732052697475616c732056656e69636500000000000000000000000000000000000000000000000000000000000000000000054252545256000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x8cd3dc90eaa8ec8d6391fca22eb72ba3400b3fba", "SwarmSource": ""}