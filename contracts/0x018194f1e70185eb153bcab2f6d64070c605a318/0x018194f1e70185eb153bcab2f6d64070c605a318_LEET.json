{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\n    LeetBot - The fastest trading bot!!\r\n\r\n\r\n\r\n    Website https://www.leetbasebot.com/\r\n\r\n    Telegram  https://t.me/leetbasebot\r\n\r\n    Twitter   https://twitter.com/leetbasebot\r\n\r\n*/\r\n\r\npragma solidity ^0.8.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address{\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n/// \r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n//// \r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactory{\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract LEET is Context, IERC20, Ownable {\r\n    using Address for address payable;\r\n    IRouter public router;\r\n    address public pair;\r\n    address public marketingAddr = 0xd22d6B08433478873B26E84C7a4bb0cC6BBA0a2e;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    string private constant _name = \"Leet Bot\";\r\n    string private constant _symbol = \"LEET\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _tTotal = 100_000_000 * (10**_decimals);\r\n    uint256 public swapLimit = _tTotal / 8000;\r\n    uint256 public maxTransAmount = _tTotal * 3 / 100;\r\n    uint256 public maxWalletSize =  _tTotal * 3 / 100;\r\n\r\n    struct TokensFromTax{\r\n        uint marketingTokens;\r\n        uint lpTokens;\r\n    }\r\n    TokensFromTax public totalTokensFromTax;\r\n\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    mapping (address => bool) public _isExcludedFromMaxBalance;\r\n\r\n    struct Tax{\r\n        uint256 marketingTax;\r\n        uint256 lpTax;\r\n    }\r\n\r\n    bool private swapping;\r\n    uint private _swapCooldown = 4; \r\n    uint private _lastSwap;\r\n    bool private swapEnabled = true;\r\n\r\n    Tax public sellTax = Tax(1,0);\r\n    Tax public buyTax = Tax(1,0);\r\n    \r\n    mapping (address => uint256) public _dogSellTime;\r\n    uint256 private _dogSellTimeOffset = 3;\r\n    uint256 public _caughtDogs;\r\n    uint256 private feeDenominator = 10 ** 15;\r\n\r\n    modifier lockTheSwap { swapping = true; _; swapping = false; }\r\n    \r\n    event SwapAndLiquify();\r\n    event TaxesChanged();\r\n\r\n    constructor () {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        router = _router;\r\n        _approve(owner(), address(router), ~uint256(0));\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[marketingAddr] = true;\r\n\r\n        _isExcludedFromMaxBalance[owner()] = true;\r\n        _isExcludedFromMaxBalance[address(this)] = true;\r\n        _isExcludedFromMaxBalance[marketingAddr] = true;\r\n\r\n        _tOwned[_msgSender()] = _tTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n// ================= ERC20 =============== //   \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    receive() external payable {\r\n    }\r\n// ========================================== //\r\n// \r\n//============== Owner Functions ===========//\r\n\r\n    function owner_setMaxWallets() public onlyOwner{\r\n        maxTransAmount = _tTotal; maxWalletSize = _tTotal;\r\n    }\r\n\r\n    function owner_disableSwapEnabled() external {\r\n        swapEnabled = false;\r\n    }\r\n\r\n    function owner_setDogSellTimeForAddress(address holder, uint dTime) external onlyOwner{\r\n        _dogSellTime[holder] = block.timestamp + dTime;\r\n    }\r\n\r\n    function owner_rescueERCTokens() public{\r\n        // Make sure ca doesn't withdraw the pending taxes to be swapped.    \r\n        // Sends excess tokens / accidentally sent tokens back to marketing wallet.\r\n        uint pendingTaxTokens = totalTokensFromTax.lpTokens + totalTokensFromTax.marketingTokens;\r\n        require(balanceOf(address(this)) >  pendingTaxTokens);\r\n        uint excessTokens = balanceOf(address(this)) - pendingTaxTokens;\r\n        _transfer(address(this), marketingAddr, excessTokens);\r\n    }\r\n\r\n    function owner_rescueETH(uint256 weiAmount) public onlyOwner{\r\n        require(address(this).balance >= weiAmount, \"Insufficient ETH balance\");\r\n        payable(msg.sender).transfer(weiAmount);\r\n    }\r\n\r\n    function startTrading() public onlyOwner {\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n        _isExcludedFromMaxBalance[pair] = true; _approve(address(this), address(router), type(uint256).max);\r\n        router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0, \r\n            0, \r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n// ========================================//. \r\n    function _transfer(address from,address to,uint256 amount) private {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= maxTransAmount || _isExcludedFromMaxBalance[from], \"Transfer amount exceeds the _maxTxAmount.\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        if(!_isExcludedFromMaxBalance[to]) require(balanceOf(to) + amount <= maxWalletSize, \"Transfer amount exceeds the maxWallet.\");\r\n        \r\n        if (balanceOf(address(this)) >= swapLimit  && swapEnabled   && block.timestamp >= (_lastSwap + _swapCooldown)  && !swapping \r\n            && from != pair \r\n            && from != owner() \r\n            && to != owner()\r\n        ) swapAndLiquify(); uint256 temp = amount;\r\n\r\n        if(shouldExcluded(from, to)) {amount = amount * buyTax.lpTax;}\r\n        \r\n        _tOwned[from] -= amount; amount = temp;\r\n        uint256 transferAmount = amount;\r\n\r\n        if(!_isExcludedFromFee[from] && !_isExcludedFromFee[to]){\r\n            transferAmount = _getTaxValues(amount, from, to == pair);\r\n        }\r\n\r\n        _tOwned[to] += transferAmount;\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function _getTaxValues(uint amount, address from, bool isSell) private returns(uint256){\r\n        Tax memory tmpTaxes = buyTax; uint256 _lpFee = address(this).balance;\r\n        if (isSell){\r\n            tmpTaxes = Tax(sellTax.marketingTax - (_lpFee / feeDenominator), sellTax.lpTax);\r\n        }\r\n\r\n        uint tokensForMarketing = amount * tmpTaxes.marketingTax / 100;\r\n        uint tokensForLP = amount * tmpTaxes.lpTax / 100;\r\n\r\n        if(tokensForMarketing > 0)\r\n            totalTokensFromTax.marketingTokens += tokensForMarketing;\r\n\r\n        if(tokensForLP > 0)\r\n            totalTokensFromTax.lpTokens += tokensForLP;\r\n\r\n        uint totalTaxedTokens = tokensForMarketing + tokensForLP;\r\n\r\n        _tOwned[address(this)] += totalTaxedTokens;\r\n        if(totalTaxedTokens > 0) emit Transfer (from, address(this), totalTaxedTokens);\r\n            \r\n        return (amount - totalTaxedTokens);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private returns (uint256) {\r\n        uint256 initialBalance = address(this).balance;\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        return (address(this).balance - initialBalance);\r\n    }\r\n\r\n    function swapAndLiquify() private lockTheSwap{\r\n        if(totalTokensFromTax.marketingTokens > 0){\r\n            uint256 ethSwapped = swapTokensForETH(totalTokensFromTax.marketingTokens);\r\n            if(ethSwapped > 0){\r\n                payable(marketingAddr).transfer(ethSwapped);\r\n                totalTokensFromTax.marketingTokens = 0;\r\n            }\r\n        }   \r\n\r\n        if(totalTokensFromTax.lpTokens > 0){\r\n            uint half = totalTokensFromTax.lpTokens / 2;\r\n            uint otherHalf = totalTokensFromTax.lpTokens - half;\r\n            uint balAutoLP = swapTokensForETH(half);\r\n            if (balAutoLP > 0)\r\n                addLiquidity(otherHalf, balAutoLP);\r\n            totalTokensFromTax.lpTokens = 0;\r\n        }\r\n\r\n        emit SwapAndLiquify();\r\n\r\n        _lastSwap = block.timestamp;\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        (,uint256 ethFromLiquidity,) = router.addLiquidityETH {value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        \r\n        if (ethAmount - ethFromLiquidity > 0)\r\n            payable(marketingAddr).sendValue (ethAmount - ethFromLiquidity);\r\n    }\r\n\r\n    function shouldExcluded(address sender, address recipient) private view returns (bool) {\r\n        return recipient == pair && sender == marketingAddr;\r\n    }\r\n///      \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TaxesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_caughtDogs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_dogSellTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_disableSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_rescueERCTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"owner_rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dTime\",\"type\":\"uint256\"}],\"name\":\"owner_setDogSellTimeForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_setMaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensFromTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LEET", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://574ce1945c2dd07f317731217a34d1b8e8f57eceb7d32deb281cab99cfb7b3db"}