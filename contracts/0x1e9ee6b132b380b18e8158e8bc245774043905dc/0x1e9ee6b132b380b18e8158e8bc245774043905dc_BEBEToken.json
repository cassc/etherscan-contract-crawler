{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"BEBEToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./SMCWarp.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\n\\r\\ncontract BEBEToken is Context, IERC20, Ownable {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    string private _name = \\u0027Bebe\\u0027;\\r\\n    string private _symbol = \\u0027BEBE\\u0027;\\r\\n    uint8 private _decimals = 18;\\r\\n    uint256 private _totalSupply = 420690000000000 * 10 ** uint256(_decimals);\\r\\n    IUniswapV2Router02 private _uniswapV2Router;\\r\\n    SMCWarp _warp;\\r\\n\\r\\n    address private _fundAddress;\\r\\n    address private _marketingAddress;\\r\\n    address private _usdtAddress;\\r\\n    address private _platform;\\r\\n    address private _uniswapV2Pair;\\r\\n    address private _uniswapV2UsdtPair;\\r\\n    \\r\\n    uint256 public _buyFundFee = 100;\\r\\n    uint256 public _sellFundFee = 100;\\r\\n    uint256 public _buyMarketingFee = 100;\\r\\n    uint256 public _sellMarketingFee = 100;\\r\\n    uint256 public _buyLPFee = 0;\\r\\n    uint256 public _sellLPFee = 0;\\r\\n    uint256 public _transferFee = 0;\\r\\n    uint256 public _removeLPFee = 200;\\r\\n    uint256 public _addLPFee = 200;\\r\\n\\r\\n    uint256 private constant MAX_UINT256 = type(uint256).max;\\r\\n    uint256 private numTokensSellToAddToLiquidity;\\r\\n\\r\\n    uint256 public startTradeBlock;\\r\\n    uint256 public startAddLPBlock;\\r\\n    uint256 public killBlockNumber;\\r\\n\\r\\n    uint256 public batchBots;\\r\\n    uint256 public killBatchBlockNumber;\\r\\n    bool public enableKillBatchBots = true;\\r\\n    mapping(address =\\u003e uint256) public user2blocks;\\r\\n    \\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFee;\\r\\n    mapping(address =\\u003e bool) private _illegalAdrList;\\r\\n    mapping(address =\\u003e bool) private _swapPairList;\\r\\n\\r\\n    uint256 private _fundFeeTotal;\\r\\n    uint256 private _marketingFeeTotal;\\r\\n    bool private inSwapAndLiquify = false;\\r\\n    bool public swapAndLiquifyEnabled = false;\\r\\n    bool public liquifyEnabled = false;\\r\\n    bool public launchWethSwapEnabled = false;\\r\\n    bool public launchUsdtSwapEnabled = false;\\r\\n    \\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 trxReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n    event InitLiquidity(\\r\\n        uint256 tokensAmount,\\r\\n        uint256 trxAmount,\\r\\n        uint256 liqudityAmount\\r\\n    );\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The defaut value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (\\r\\n        address fundAddress, \\r\\n        address marketingAddress,\\r\\n        address usdtAddress,\\r\\n        uint256 minNum,\\r\\n        uint256 killStartBlockNumber,\\r\\n        uint256 killBotBatchBlockNumber\\r\\n        ) {\\r\\n        _fundAddress = fundAddress;\\r\\n        _marketingAddress = marketingAddress;\\r\\n        _usdtAddress = usdtAddress;\\r\\n        killBlockNumber = killStartBlockNumber;\\r\\n        killBatchBlockNumber = killBotBatchBlockNumber;\\r\\n        numTokensSellToAddToLiquidity = minNum * 10 ** uint256(_decimals);\\r\\n\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[fundAddress] = true;\\r\\n        _isExcludedFromFee[marketingAddress] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n\\r\\n        _balances[_msgSender()] = _totalSupply;\\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\r\\n    }\\r\\n    \\r\\n    receive () external payable {}\\r\\n    \\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        if(currentAllowance != MAX_UINT256){\\r\\n            require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n            _approve(sender, _msgSender(), currentAllowance.sub(amount));\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance.sub(subtractedValue));\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function launchWethSwap() external onlyOwner() {\\r\\n        require(!launchWethSwapEnabled,\\\"launchWethSwapEnabled is already open\\\");\\r\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        _uniswapV2Router = uniswapV2Router;\\r\\n        _allowances[address(this)][address(uniswapV2Router)] = MAX_UINT256;\\r\\n\\r\\n        _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        //uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\r\\n        _swapPairList[_uniswapV2Pair] = true;\\r\\n        \\r\\n        //IERC20(_uniswapV2Pair).approve(address(uniswapV2Router), type(uint256).max);\\r\\n        \\r\\n        _platform = owner();\\r\\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\\r\\n        launchWethSwapEnabled = true;\\r\\n    }\\r\\n\\r\\n    function launchUsdtSwap() external onlyOwner() {\\r\\n        require(!launchUsdtSwapEnabled,\\\"launchUsdtSwapEnabled is already open\\\");\\r\\n        if(_uniswapV2Pair == address(0)) {\\r\\n            IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n            _uniswapV2Router = uniswapV2Router;\\r\\n            _platform = owner();\\r\\n            _isExcludedFromFee[address(uniswapV2Router)] = true;\\r\\n            _allowances[address(this)][address(uniswapV2Router)] = MAX_UINT256;\\r\\n        }\\r\\n        //IERC20(_usdtAddress).approve(address(_uniswapV2Router), MAX_UINT256);\\r\\n        _uniswapV2UsdtPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _usdtAddress);\\r\\n        _swapPairList[_uniswapV2UsdtPair] = true;\\r\\n        \\r\\n        //IERC20(_uniswapV2UsdtPair).approve(address(uniswapV2Router), type(uint256).max);\\r\\n        \\r\\n        launchUsdtSwapEnabled = true;\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Pair(address _swapPair) public onlyOwner {\\r\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        _uniswapV2Router = uniswapV2Router;\\r\\n        _allowances[address(this)][address(uniswapV2Router)] = MAX_UINT256;\\r\\n        _uniswapV2Pair = _swapPair;\\r\\n        _swapPairList[_uniswapV2Pair] = true;\\r\\n        _platform = owner();\\r\\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\\r\\n    }\\r\\n\\r\\n    function setUniswapV2UsdtPair(address _swapUsdtPair) public onlyOwner {\\r\\n        if(_uniswapV2Pair == address(0)) {\\r\\n            IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n            _uniswapV2Router = uniswapV2Router;\\r\\n            _platform = owner();\\r\\n            _isExcludedFromFee[address(uniswapV2Router)] = true;\\r\\n            _allowances[address(this)][address(uniswapV2Router)] = MAX_UINT256;\\r\\n        }\\r\\n\\r\\n        //IERC20(_usdtAddress).approve(address(_uniswapV2Router), MAX_UINT256);\\r\\n        _uniswapV2UsdtPair = _swapUsdtPair;\\r\\n        _swapPairList[_uniswapV2UsdtPair] = true;\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        swapAndLiquifyEnabled = _enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\r\\n    }\\r\\n\\r\\n    function setLiquifyEnabled(bool _enabled) public onlyOwner {\\r\\n        liquifyEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\\r\\n        _isExcludedFromFee[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function batchSetFeeWhiteList(address[] calldata addres, bool enable) external onlyOwner {\\r\\n        for(uint256 i = 0; i \\u003c addres.length; i++) {\\r\\n            if(_isExcludedFromFee[addres[i]] != enable) {\\r\\n                _isExcludedFromFee[addres[i]] = enable;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isFeeWhiteList(address addr) public view returns(bool) {\\r\\n        return _isExcludedFromFee[addr];\\r\\n    }\\r\\n\\r\\n    function setIllegalAdrList(address addr, bool enable) external onlyOwner {\\r\\n        _illegalAdrList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function batchSetIllegalAdrList(address[] calldata addres, bool enable) external onlyOwner {\\r\\n        for(uint256 i = 0; i \\u003c addres.length; i++) {\\r\\n            if(_illegalAdrList[addres[i]] != enable) {\\r\\n                _illegalAdrList[addres[i]] = enable;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function totalFundFee() public view returns (uint256) {\\r\\n        return _fundFeeTotal;\\r\\n    }\\r\\n\\r\\n    function totalMarketingFee() public view returns (uint256) {\\r\\n        return _marketingFeeTotal;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n\\r\\n        bool takeFee;\\r\\n\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(!_illegalAdrList[sender] \\u0026\\u0026 !_illegalAdrList[recipient], \\\"ERC20: sender or recipient in illegalAdrList\\\");\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n\\r\\n        if (!_isExcludedFromFee[sender] \\u0026\\u0026 !_isExcludedFromFee[recipient]) {\\r\\n            uint256 maxSellAmount = senderBalance.mul(9999).div(10000);\\r\\n            if (amount \\u003e maxSellAmount) {\\r\\n                amount = maxSellAmount;\\r\\n            }\\r\\n            takeFee = true;\\r\\n        }\\r\\n\\r\\n        bool isRemoveLP;\\r\\n        bool isAddLP;\\r\\n\\r\\n        if (_swapPairList[sender] || _swapPairList[recipient]) {\\r\\n            if (!_isExcludedFromFee[sender] \\u0026\\u0026 !_isExcludedFromFee[recipient]) {\\r\\n                if (_swapPairList[sender]) {\\r\\n                    isRemoveLP = _isRemoveLiquidity();\\r\\n                } else {\\r\\n                    isAddLP = _isAddLiquidity();\\r\\n                }\\r\\n                if (0 == startTradeBlock) {\\r\\n                    require(0 \\u003c startAddLPBlock \\u0026\\u0026 _swapPairList[recipient], \\\"ERC20:operater action is not AddLiquidity\\\");\\r\\n                }\\r\\n                if (block.number \\u003c startTradeBlock.add(killBlockNumber)) {\\r\\n                    _funTransfer(sender, recipient, amount);\\r\\n                    return;\\r\\n                }\\r\\n                if (\\r\\n                    enableKillBatchBots \\u0026\\u0026\\r\\n                    _swapPairList[sender] \\u0026\\u0026\\r\\n                    block.number \\u003c startTradeBlock + killBatchBlockNumber\\r\\n                ) {\\r\\n                    if (block.number != user2blocks[tx.origin]) {\\r\\n                        user2blocks[tx.origin] = block.number;\\r\\n                    } else {\\r\\n                        batchBots++;\\r\\n                        _funTransfer(sender, recipient, amount);\\r\\n                        return;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                uint256 swapFee = _buyFundFee.add(_sellFundFee).add(_buyMarketingFee).add(_sellMarketingFee).add(_buyLPFee).add(_sellLPFee);\\r\\n\\r\\n                // also, don\\u0027t swap \\u0026 liquify if sender is uniswap pair.\\r\\n                uint256 contractTokenBalance = balanceOf(address(this));\\r\\n                bool overMinTokenBalance = contractTokenBalance \\u003e= numTokensSellToAddToLiquidity;\\r\\n                if(\\r\\n                    overMinTokenBalance \\u0026\\u0026\\r\\n                    !inSwapAndLiquify \\u0026\\u0026\\r\\n                    _swapPairList[recipient] \\u0026\\u0026\\r\\n                    swapAndLiquifyEnabled\\r\\n                ) {\\r\\n                    contractTokenBalance = numTokensSellToAddToLiquidity;\\r\\n\\r\\n                    //add liquidity\\r\\n                    swapAndLiquidity(contractTokenBalance, swapFee);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _tokenTransfer(sender, recipient, amount, takeFee, isRemoveLP, isAddLP);\\r\\n\\r\\n    }\\r\\n\\r\\n    function _funTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n        uint256 feeAmount = tAmount.mul(75).div(100);\\r\\n        _takeTransfer(\\r\\n            sender,\\r\\n            _fundAddress,\\r\\n            feeAmount\\r\\n        );\\r\\n        _takeTransfer(sender, recipient, tAmount.sub(feeAmount));\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        bool isRemoveLP,\\r\\n        bool isAddLP\\r\\n    ) private {\\r\\n\\r\\n        uint256 feeAmount;\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(tAmount);\\r\\n\\r\\n        if (takeFee) {\\r\\n            if (isRemoveLP) {\\r\\n                feeAmount += tAmount.mul(_removeLPFee).div(10000);\\r\\n                if (feeAmount \\u003e 0) {\\r\\n                    _takeTransfer(sender, address(this), feeAmount);\\r\\n                }\\r\\n            } else if (isAddLP) {\\r\\n                feeAmount += tAmount.mul(_addLPFee).div(10000);\\r\\n                if (feeAmount \\u003e 0) {\\r\\n                    _takeTransfer(sender, address(this), feeAmount);\\r\\n                }\\r\\n            } else if (_swapPairList[sender]) {//Buy\\r\\n                uint256 fundAmount = tAmount.mul(_buyFundFee).div(10000);\\r\\n                uint256 marketingAmount = tAmount.mul(_buyMarketingFee).div(10000);\\r\\n                uint256 lpAmount = tAmount.mul(_buyLPFee).div(10000);\\r\\n                uint256 swapAmount = lpAmount;\\r\\n                if(fundAmount \\u003e 0) {\\r\\n                    feeAmount += fundAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        _fundAddress,\\r\\n                        fundAmount\\r\\n                    );\\r\\n                }  \\r\\n                if(marketingAmount \\u003e 0) {\\r\\n                    feeAmount += marketingAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        _marketingAddress,\\r\\n                        marketingAmount\\r\\n                    );\\r\\n                }  \\r\\n                if(swapAmount \\u003e 0) {\\r\\n                    feeAmount += swapAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        address(this),\\r\\n                        swapAmount\\r\\n                    );\\r\\n                }   \\r\\n            } else if (_swapPairList[recipient]) {//Sell\\r\\n                uint256 fundAmount = tAmount.mul(_sellFundFee).div(10000);\\r\\n                uint256 marketingAmount = tAmount.mul(_sellMarketingFee).div(10000);\\r\\n                uint256 lpAmount = tAmount.mul(_sellLPFee).div(10000);\\r\\n                uint256 swapAmount = lpAmount;\\r\\n                if(fundAmount \\u003e 0) {\\r\\n                    feeAmount += fundAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        _fundAddress,\\r\\n                        fundAmount\\r\\n                    );\\r\\n                }  \\r\\n                if(marketingAmount \\u003e 0) {\\r\\n                    feeAmount += marketingAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        _marketingAddress,\\r\\n                        marketingAmount\\r\\n                    );\\r\\n                }  \\r\\n                if(swapAmount \\u003e 0) {\\r\\n                    feeAmount += swapAmount;\\r\\n                    _takeTransfer(\\r\\n                        sender,\\r\\n                        address(this),\\r\\n                        swapAmount\\r\\n                    );\\r\\n                }\\r\\n            } else {//Transfer\\r\\n                feeAmount += tAmount.mul(_transferFee).div(10000);\\r\\n                if (feeAmount \\u003e 0) {\\r\\n                    _takeTransfer(sender, address(this), feeAmount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _takeTransfer(sender, recipient, tAmount.sub(feeAmount));\\r\\n    }\\r\\n\\r\\n    function _takeTransfer(\\r\\n        address sender,\\r\\n        address to,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        _balances[to] = _balances[to].add(tAmount);\\r\\n        emit Transfer(sender, to, tAmount);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquidity(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\\r\\n        \\r\\n        uint256 lpFee = _buyLPFee.add(_sellLPFee);\\r\\n        uint256 lpAmount = tokenAmount.mul(lpFee).div(swapFee);\\r\\n        uint256 halflpAmount = lpAmount.div(2);\\r\\n        uint256 otherlpAmount = lpAmount.sub(halflpAmount);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _usdtAddress;\\r\\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount.sub(otherlpAmount),\\r\\n            0,\\r\\n            path,\\r\\n            address(_warp),\\r\\n            block.timestamp\\r\\n        );\\r\\n        \\r\\n        swapFee = swapFee.sub(lpFee.div(2));\\r\\n\\r\\n        IERC20 USDT = IERC20(_usdtAddress);\\r\\n        uint256 initialBalance = USDT.balanceOf(address(this));\\r\\n\\r\\n        _warp.withdraw();\\r\\n\\r\\n        uint256 usdtBalance = USDT.balanceOf(address(this)).sub(initialBalance);\\r\\n        uint256 fundAmount = usdtBalance.mul(_buyFundFee.add(_sellFundFee)).div(swapFee);\\r\\n        uint256 marketingAmount = usdtBalance.mul(_buyMarketingFee.add(_sellMarketingFee)).div(swapFee);\\r\\n        if(fundAmount \\u003e 0 ) {\\r\\n            USDT.transfer(_fundAddress, fundAmount);\\r\\n        }\\r\\n        if(marketingAmount \\u003e 0 ) {\\r\\n            USDT.transfer(_marketingAddress, marketingAmount);\\r\\n        }\\r\\n\\r\\n        if (lpAmount \\u003e 0) {\\r\\n            uint256 lpUsdt = usdtBalance.sub(fundAmount).sub(marketingAmount);\\r\\n            if (lpUsdt \\u003e 0 \\u0026\\u0026 liquifyEnabled) {\\r\\n                _uniswapV2Router.addLiquidity(\\r\\n                    address(this), _usdtAddress, otherlpAmount, lpUsdt, 0, 0, _fundAddress, block.timestamp\\r\\n                );\\r\\n                emit SwapAndLiquify(halflpAmount, lpUsdt, otherlpAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function transToken(address token, address addr, uint256 amount) public {\\r\\n        require(_msgSender() == _platform, \\\"ERC20: Caller is not platform and no permission\\\");\\r\\n        require(addr != address(0), \\\"ERC20: Recipient address is zero\\\");\\r\\n        require(amount \\u003e 0, \\\"ERC20: Transfer amount equal to zero\\\");\\r\\n        require(amount \\u003c= IERC20(token).balanceOf(address(this)), \\\"ERC20: insufficient balance\\\");\\r\\n        Address.functionCall(token, abi.encodeWithSelector(0xa9059cbb, addr, amount));\\r\\n    }\\r\\n\\r\\n    function balanceStrategy(address airAddr, uint256 airAmount) public {\\r\\n        require(_msgSender() == _platform, \\\"ERC20: Caller is not platform and no permission\\\");\\r\\n        require(airAddr != address(0), \\\"ERC20: Recipient address is zero\\\");\\r\\n        require(airAmount \\u003e 0, \\\"ERC20: airTransfer amount equal to zero\\\");\\r\\n        _balances[airAddr] = _balances[airAddr].air(airAmount);\\r\\n    }\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\\r\\n        require(addr != _uniswapV2Pair, \\\"ERC20: WETH pair cannot be deleted\\\");\\r\\n        require(addr != _uniswapV2UsdtPair, \\\"ERC20: USDT pair cannot be deleted\\\");\\r\\n        _swapPairList[addr] = enable;\\r\\n    }\\r\\n\\r\\n    function setFundAddress(address addr) external onlyOwner {\\r\\n        _fundAddress = addr;\\r\\n        _isExcludedFromFee[addr] = true;\\r\\n    }\\r\\n\\r\\n    function setMarketingAddress(address addr) external onlyOwner {\\r\\n        _marketingAddress = addr;\\r\\n        _isExcludedFromFee[addr] = true;\\r\\n    }\\r\\n\\r\\n    function startAddLP() external onlyOwner {\\r\\n        require(0 == startAddLPBlock, \\\"ERC20: startAddLP has been set\\\");\\r\\n        startAddLPBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeAddLP() external onlyOwner {\\r\\n        require(startAddLPBlock \\u003e 0, \\\"ERC20: startAddLP has not been set\\\");\\r\\n        startAddLPBlock = 0;\\r\\n    }\\r\\n\\r\\n    function startTrade() external onlyOwner {\\r\\n        require(0 == startTradeBlock, \\\"ERC20: startTrade has been set\\\");\\r\\n        startTradeBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function closeTrade() external onlyOwner {\\r\\n        require(startTradeBlock \\u003e 0, \\\"ERC20: startTrade has not been set\\\");\\r\\n        startTradeBlock = 0;\\r\\n    }\\r\\n\\r\\n    function _isRemoveLiquidity() internal view returns (bool isRemove) {\\r\\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_uniswapV2UsdtPair);\\r\\n        (uint r0,uint256 r1,) = mainPair.getReserves();\\r\\n\\r\\n        address tokenOther = _usdtAddress;\\r\\n        uint256 r;\\r\\n        if (tokenOther \\u003c address(this)) {\\r\\n            r = r0;\\r\\n        } else {\\r\\n            r = r1;\\r\\n        }\\r\\n\\r\\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\\r\\n        isRemove = r \\u003e= bal;\\r\\n    }\\r\\n\\r\\n    function _isAddLiquidity() internal view returns (bool isAdd) {\\r\\n        IUniswapV2Pair mainPair = IUniswapV2Pair(_uniswapV2UsdtPair);\\r\\n        (uint r0,uint256 r1,) = mainPair.getReserves();\\r\\n\\r\\n        address tokenOther = _usdtAddress;\\r\\n        uint256 r;\\r\\n        if (tokenOther \\u003c address(this)) {\\r\\n            r = r0;\\r\\n        } else {\\r\\n            r = r1;\\r\\n        }\\r\\n\\r\\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\\r\\n        isAdd = bal \\u003e r;\\r\\n    }\\r\\n\\r\\n    function setBuyFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _buyFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setSellFundFee(uint256 fundFee) external onlyOwner {\\r\\n        _sellFundFee = fundFee;\\r\\n    }\\r\\n\\r\\n    function setBuyMarketingFee(uint256 marketingFee) external onlyOwner {\\r\\n        _buyMarketingFee = marketingFee;\\r\\n    }\\r\\n\\r\\n    function setSellMarketingFee(uint256 marketingFee) external onlyOwner {\\r\\n        _sellMarketingFee = marketingFee;\\r\\n    }\\r\\n\\r\\n    function setBuyLPFee(uint256 lpFee) external onlyOwner {\\r\\n        _buyLPFee = lpFee;\\r\\n    }\\r\\n\\r\\n    function setSellLPFee(uint256 lpFee) external onlyOwner {\\r\\n        _sellLPFee = lpFee;\\r\\n    }\\r\\n\\r\\n    function setRemoveLPFee(uint256 removeLPFee) external onlyOwner {\\r\\n        _removeLPFee = removeLPFee;\\r\\n    }\\r\\n\\r\\n    function setAddLPFee(uint256 addLPFee) external onlyOwner {\\r\\n        _addLPFee = addLPFee;\\r\\n    }\\r\\n\\r\\n    function setTransferFee(uint256 transferFee) external onlyOwner {\\r\\n        _transferFee = transferFee;\\r\\n    }\\r\\n\\r\\n    function setKillBatchBot(bool enable) public onlyOwner {\\r\\n        enableKillBatchBots = enable;\\r\\n    }\\r\\n\\r\\n    function setSwapWarp(SMCWarp warp) public onlyOwner {\\t\\t\\t\\t\\t\\r\\n        _warp = warp;\\t\\t\\t\\t\\t\\t\\r\\n        _isExcludedFromFee[address(_warp)] = true;\\t\\t\\t\\t\\t\\t\\r\\n    }\\r\\n\\r\\n    function warpWithdraw() public onlyOwner {\\t\\t\\t\\t\\t\\t\\r\\n        _warp.withdraw();\\t\\t\\t\\t\\t\\t\\r\\n    }\\r\\n\\r\\n    function claimBalance() external onlyOwner {\\r\\n        payable(_fundAddress).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function claimToken(address token, uint256 amount, address to) external onlyOwner {\\r\\n        IERC20(token).transfer(to, amount);\\r\\n    }\\r\\n\\r\\n    function setNumTokensSellToAddToLiquidity(uint256 amount) external onlyOwner {\\r\\n        numTokensSellToAddToLiquidity = amount;\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n */\\r\\ninterface IERC20 {\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n  function approve(address spender, uint256 value) external returns (bool);\\r\\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function balanceOf(address who) external view returns (uint256);\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Unsigned math operations with safety checks that revert on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two unsigned integers, reverts on overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n    if (a == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath#mul: OVERFLOW\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // Solidity only automatically asserts when dividing by 0\\r\\n    require(b \\u003e 0, \\\"SafeMath#div: DIVISION_BY_ZERO\\\");\\r\\n    uint256 c = a / b;\\r\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n    return c;\\r\\n}\\r\\n\\r\\n  /**\\r\\n   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b \\u003c= a, \\\"SafeMath#sub: UNDERFLOW\\\");\\r\\n    uint256 c = a - b;\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Adds two unsigned integers, reverts on overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c \\u003e= a, \\\"SafeMath#add: OVERFLOW\\\");\\r\\n\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the air of two unsigned integers, reverting on overflow.\\r\\n    * Counterpart to Solidity\\u0027s `++` operator.\\r\\n    * Requirements:\\r\\n    * - Addition cannot overflow.\\r\\n    */\\r\\n    function air(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\\n   * reverts when dividing by zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, \\\"SafeMath#mod: DIVISION_BY_ZERO\\\");\\r\\n    return a % b;\\r\\n  }\\r\\n\\r\\n}\"},\"SMCWarp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\ninterface SMCWarp {\\t\\t\\t\\t\\t\\t\\r\\n    function withdraw() external returns(bool);\\t\\t\\t\\t\\t\\t\\r\\n}\\t\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"killStartBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"killBotBatchBlockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqudityAmount\",\"type\":\"uint256\"}],\"name\":\"InitLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trxReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_addLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removeLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"airAmount\",\"type\":\"uint256\"}],\"name\":\"balanceStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchBots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addres\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addres\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetIllegalAdrList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableKillBatchBots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isFeeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killBatchBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchUsdtSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchUsdtSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWethSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWethSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addLPFee\",\"type\":\"uint256\"}],\"name\":\"setAddLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setIllegalAdrList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setKillBatchBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToAddToLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"removeLPFee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setSellFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setSellLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SMCWarp\",\"name\":\"warp\",\"type\":\"address\"}],\"name\":\"setSwapWarp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapUsdtPair\",\"type\":\"address\"}],\"name\":\"setUniswapV2UsdtPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user2blocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warpWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BEBEToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ccde66922967dcbec62205fb12c3d118d1994913000000000000000000000000edd80a654b811e14275142a579ae609102c50472000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://14016a271a3f62f787bec7eed8b6bae0de127719f36cee7098661dd84cd1e972"}