{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2019-05-28\r\n*/\r\n\r\n// File: contracts/EToken2Interface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract RegistryICAPInterface {\r\n    function parse(bytes32 _icap) public view returns(address, bytes32, bool);\r\n    function institutions(bytes32 _institution) public view returns(address);\r\n}\r\n\r\n\r\ncontract EToken2Interface {\r\n    function registryICAP() public view returns(RegistryICAPInterface);\r\n    function baseUnit(bytes32 _symbol) public view returns(uint8);\r\n    function description(bytes32 _symbol) public view returns(string memory);\r\n    function owner(bytes32 _symbol) public view returns(address);\r\n    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\r\n    function totalSupply(bytes32 _symbol) public view returns(uint);\r\n    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\r\n    function isLocked(bytes32 _symbol) public view returns(bool);\r\n\r\n    function issueAsset(\r\n        bytes32 _symbol,\r\n        uint _value,\r\n        string memory _name,\r\n        string memory _description,\r\n        uint8 _baseUnit,\r\n        bool _isReissuable)\r\n    public returns(bool);\r\n\r\n    function reissueAsset(bytes32 _symbol, uint _value) public returns(bool);\r\n    function revokeAsset(bytes32 _symbol, uint _value) public returns(bool);\r\n    function setProxy(address _address, bytes32 _symbol) public returns(bool);\r\n    function lockAsset(bytes32 _symbol) public returns(bool);\r\n\r\n    function proxyTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender)\r\n    public returns(bool);\r\n    \r\n    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\r\n\r\n    function proxyTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        bytes32 _symbol,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(bool);\r\n}\r\n\r\n// File: contracts/AssetInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract AssetInterface {\r\n    function _performTransferWithReference(\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _performGeneric(bytes memory, address) public payable {\r\n        revert();\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() public view returns(uint256 supply);\r\n    function balanceOf(address _owner) public view returns(uint256 balance);\r\n    // solhint-disable-next-line no-simple-event-func-name\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\r\n\r\n    // function symbol() constant returns(string);\r\n    function decimals() public view returns(uint8);\r\n    // function name() constant returns(string);\r\n}\r\n\r\n// File: contracts/AssetProxyInterface.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\ncontract AssetProxyInterface is ERC20Interface {\r\n    function _forwardApprove(address _spender, uint _value, address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function _forwardTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public returns(bool);\r\n\r\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\r\n    public returns(bool);\r\n\r\n    function etoken2() external view returns(address); // To be replaced by the implicit getter;\r\n\r\n    // To be replaced by the implicit getter;\r\n    function etoken2Symbol() external view returns(bytes32);\r\n}\r\n\r\n// File: smart-contracts-common/contracts/Bytes32.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract Bytes32 {\r\n    function _bytes32(string memory _input) internal pure returns(bytes32 result) {\r\n        assembly {\r\n            result := mload(add(_input, 32))\r\n        }\r\n    }\r\n}\r\n\r\n// File: smart-contracts-common/contracts/ReturnData.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\ncontract ReturnData {\r\n    function _returnReturnData(bool _success) internal pure {\r\n        assembly {\r\n            let returndatastart := 0\r\n            returndatacopy(returndatastart, 0, returndatasize)\r\n            switch _success case 0 { revert(returndatastart, returndatasize) }\r\n                default { return(returndatastart, returndatasize) }\r\n        }\r\n    }\r\n\r\n    function _assemblyCall(address _destination, uint _value, bytes memory _data)\r\n    internal returns(bool success) {\r\n        assembly {\r\n            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/AssetProxy.sol\r\n\r\npragma solidity 0.5.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title EToken2 Asset Proxy.\r\n *\r\n * Proxy implements ERC20 interface and acts as a gateway to a single EToken2 asset.\r\n * Proxy adds etoken2Symbol and caller(sender) when forwarding requests to EToken2.\r\n * Every request that is made by caller first sent to the specific asset implementation\r\n * contract, which then calls back to be forwarded onto EToken2.\r\n *\r\n * Calls flow: Caller ->\r\n *             Proxy.func(...) ->\r\n *             Asset._performFunc(..., Caller.address) ->\r\n *             Proxy._forwardFunc(..., Caller.address) ->\r\n *             Platform.proxyFunc(..., symbol, Caller.address)\r\n *\r\n * Generic call flow: Caller ->\r\n *             Proxy.unknownFunc(...) ->\r\n *             Asset._performGeneric(..., Caller.address) ->\r\n *             Asset.unknownFunc(...)\r\n *\r\n * Asset implementation contract is mutable, but each user have an option to stick with\r\n * old implementation, through explicit decision made in timely manner, if he doesn't agree\r\n * with new rules.\r\n * Each user have a possibility to upgrade to latest asset contract implementation, without the\r\n * possibility to rollback.\r\n *\r\n * Note: all the non constant functions return false instead of throwing in case if state change\r\n * didn't happen yet.\r\n */\r\ncontract AssetProxy is ERC20Interface, AssetProxyInterface, Bytes32, ReturnData {\r\n    // Assigned EToken2, immutable.\r\n    EToken2Interface public etoken2;\r\n\r\n    // Assigned symbol, immutable.\r\n    bytes32 public etoken2Symbol;\r\n\r\n    // Assigned name, immutable. For UI.\r\n    string public name;\r\n    string public symbol;\r\n\r\n    /**\r\n     * Sets EToken2 address, assigns symbol and name.\r\n     *\r\n     * Can be set only once.\r\n     *\r\n     * @param _etoken2 EToken2 contract address.\r\n     * @param _symbol assigned symbol.\r\n     * @param _name assigned name.\r\n     *\r\n     * @return success.\r\n     */\r\n    function init(EToken2Interface _etoken2, string memory _symbol, string memory _name)\r\n        public returns(bool)\r\n    {\r\n        if (address(etoken2) != address(0)) {\r\n            return false;\r\n        }\r\n        etoken2 = _etoken2;\r\n        etoken2Symbol = _bytes32(_symbol);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Only EToken2 is allowed to call.\r\n     */\r\n    modifier onlyEToken2() {\r\n        if (msg.sender == address(etoken2)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Only current asset owner is allowed to call.\r\n     */\r\n    modifier onlyAssetOwner() {\r\n        if (etoken2.isOwner(msg.sender, etoken2Symbol)) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns asset implementation contract for current caller.\r\n     *\r\n     * @return asset implementation contract.\r\n     */\r\n    function _getAsset() internal view returns(AssetInterface) {\r\n        return AssetInterface(getVersionFor(msg.sender));\r\n    }\r\n\r\n    /**\r\n     * Recovers tokens on proxy contract\r\n     *\r\n     * @param _asset type of tokens to recover.\r\n     * @param _value tokens that will be recovered.\r\n     * @param _receiver address where to send recovered tokens.\r\n     *\r\n     * @return success.\r\n     */\r\n    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\r\n    public onlyAssetOwner() returns(bool) {\r\n        return _asset.transfer(_receiver, _value);\r\n    }\r\n\r\n    /**\r\n     * Returns asset total supply.\r\n     *\r\n     * @return asset total supply.\r\n     */\r\n    function totalSupply() public view returns(uint) {\r\n        return etoken2.totalSupply(etoken2Symbol);\r\n    }\r\n\r\n    /**\r\n     * Returns asset balance for a particular holder.\r\n     *\r\n     * @param _owner holder address.\r\n     *\r\n     * @return holder balance.\r\n     */\r\n    function balanceOf(address _owner) public view returns(uint) {\r\n        return etoken2.balanceOf(_owner, etoken2Symbol);\r\n    }\r\n\r\n    /**\r\n     * Returns asset allowance from one holder to another.\r\n     *\r\n     * @param _from holder that allowed spending.\r\n     * @param _spender holder that is allowed to spend.\r\n     *\r\n     * @return holder to spender allowance.\r\n     */\r\n    function allowance(address _from, address _spender) public view returns(uint) {\r\n        return etoken2.allowance(_from, _spender, etoken2Symbol);\r\n    }\r\n\r\n    /**\r\n     * Returns asset decimals.\r\n     *\r\n     * @return asset decimals.\r\n     */\r\n    function decimals() public view returns(uint8) {\r\n        return etoken2.baseUnit(etoken2Symbol);\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance from the caller to specified receiver.\r\n     *\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transfer(address _to, uint _value) public returns(bool) {\r\n        return transferWithReference(_to, _value, '');\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance from the caller to specified receiver adding specified comment.\r\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\r\n     * the caller address.\r\n     *\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferWithReference(address _to, uint _value, string memory _reference)\r\n    public returns(bool) {\r\n        return _getAsset()._performTransferWithReference(\r\n            _to, _value, _reference, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance from the caller to specified ICAP.\r\n     *\r\n     * @param _icap recipient ICAP to give to.\r\n     * @param _value amount to transfer.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferToICAP(bytes32 _icap, uint _value) public returns(bool) {\r\n        return transferToICAPWithReference(_icap, _value, '');\r\n    }\r\n\r\n    /**\r\n     * Transfers asset balance from the caller to specified ICAP adding specified comment.\r\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\r\n     * the caller address.\r\n     *\r\n     * @param _icap recipient ICAP to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferToICAPWithReference(\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference)\r\n    public returns(bool) {\r\n        return _getAsset()._performTransferToICAPWithReference(\r\n            _icap, _value, _reference, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Prforms allowance transfer of asset balance between holders.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns(bool) {\r\n        return transferFromWithReference(_from, _to, _value, '');\r\n    }\r\n\r\n    /**\r\n     * Prforms allowance transfer of asset balance between holders adding specified comment.\r\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\r\n     * the caller address.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference)\r\n    public returns(bool) {\r\n        return _getAsset()._performTransferFromWithReference(\r\n            _from,\r\n            _to,\r\n            _value,\r\n            _reference,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Performs transfer call on the EToken2 by the name of specified sender.\r\n     *\r\n     * Can only be called by asset implementation contract assigned to sender.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _to holder address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     * @param _sender initial caller.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _forwardTransferFromWithReference(\r\n        address _from,\r\n        address _to,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyImplementationFor(_sender) returns(bool) {\r\n        return etoken2.proxyTransferFromWithReference(\r\n            _from,\r\n            _to,\r\n            _value,\r\n            etoken2Symbol,\r\n            _reference,\r\n            _sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Prforms allowance transfer of asset balance between holders.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _icap recipient ICAP address to give to.\r\n     * @param _value amount to transfer.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferFromToICAP(address _from, bytes32 _icap, uint _value)\r\n    public returns(bool) {\r\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\r\n    }\r\n\r\n    /**\r\n     * Prforms allowance transfer of asset balance between holders adding specified comment.\r\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\r\n     * the caller address.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _icap recipient ICAP address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     *\r\n     * @return success.\r\n     */\r\n    function transferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference)\r\n    public returns(bool) {\r\n        return _getAsset()._performTransferFromToICAPWithReference(\r\n            _from,\r\n            _icap,\r\n            _value,\r\n            _reference,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Performs allowance transfer to ICAP call on the EToken2 by the name of specified sender.\r\n     *\r\n     * Can only be called by asset implementation contract assigned to sender.\r\n     *\r\n     * @param _from holder address to take from.\r\n     * @param _icap recipient ICAP address to give to.\r\n     * @param _value amount to transfer.\r\n     * @param _reference transfer comment to be included in a EToken2's Transfer event.\r\n     * @param _sender initial caller.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _forwardTransferFromToICAPWithReference(\r\n        address _from,\r\n        bytes32 _icap,\r\n        uint _value,\r\n        string memory _reference,\r\n        address _sender)\r\n    public onlyImplementationFor(_sender) returns(bool) {\r\n        return etoken2.proxyTransferFromToICAPWithReference(\r\n            _from,\r\n            _icap,\r\n            _value,\r\n            _reference,\r\n            _sender\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets asset spending allowance for a specified spender.\r\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\r\n     * the caller address.\r\n     *\r\n     * @param _spender holder address to set allowance to.\r\n     * @param _value amount to allow.\r\n     *\r\n     * @return success.\r\n     */\r\n    function approve(address _spender, uint _value) public returns(bool) {\r\n        return _getAsset()._performApprove(_spender, _value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * Performs allowance setting call on the EToken2 by the name of specified sender.\r\n     *\r\n     * Can only be called by asset implementation contract assigned to sender.\r\n     *\r\n     * @param _spender holder address to set allowance to.\r\n     * @param _value amount to allow.\r\n     * @param _sender initial caller.\r\n     *\r\n     * @return success.\r\n     */\r\n    function _forwardApprove(address _spender, uint _value, address _sender)\r\n    public onlyImplementationFor(_sender) returns(bool) {\r\n        return etoken2.proxyApprove(_spender, _value, etoken2Symbol, _sender);\r\n    }\r\n\r\n    /**\r\n     * Emits ERC20 Transfer event on this contract.\r\n     *\r\n     * Can only be, and, called by assigned EToken2 when asset transfer happens.\r\n     */\r\n    function emitTransfer(address _from, address _to, uint _value) public onlyEToken2() {\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Emits ERC20 Approval event on this contract.\r\n     *\r\n     * Can only be, and, called by assigned EToken2 when asset allowance set happens.\r\n     */\r\n    function emitApprove(address _from, address _spender, uint _value) public onlyEToken2() {\r\n        emit Approval(_from, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * Resolves asset implementation contract for the caller and forwards there transaction data,\r\n     * along with the value. This allows for proxy interface growth.\r\n     */\r\n    function () external payable {\r\n        _getAsset()._performGeneric.value(msg.value)(msg.data, msg.sender);\r\n        _returnReturnData(true);\r\n    }\r\n\r\n    // Interface functions to allow specifying ICAP addresses as strings.\r\n    function transferToICAP(string memory _icap, uint _value) public returns(bool) {\r\n        return transferToICAPWithReference(_icap, _value, '');\r\n    }\r\n\r\n    function transferToICAPWithReference(string memory _icap, uint _value, string memory _reference)\r\n    public returns(bool) {\r\n        return transferToICAPWithReference(_bytes32(_icap), _value, _reference);\r\n    }\r\n\r\n    function transferFromToICAP(address _from, string memory _icap, uint _value)\r\n        public returns(bool)\r\n    {\r\n        return transferFromToICAPWithReference(_from, _icap, _value, '');\r\n    }\r\n\r\n    function transferFromToICAPWithReference(\r\n        address _from,\r\n        string memory _icap,\r\n        uint _value,\r\n        string memory _reference)\r\n    public returns(bool) {\r\n        return transferFromToICAPWithReference(_from, _bytes32(_icap), _value, _reference);\r\n    }\r\n\r\n    /**\r\n     * Indicates an upgrade freeze-time start, and the next asset implementation contract.\r\n     */\r\n    event UpgradeProposed(address newVersion);\r\n    event UpgradePurged(address newVersion);\r\n    event UpgradeCommited(address newVersion);\r\n    event OptedOut(address sender, address version);\r\n    event OptedIn(address sender, address version);\r\n\r\n    // Current asset implementation contract address.\r\n    address internal latestVersion;\r\n\r\n    // Proposed next asset implementation contract address.\r\n    address internal pendingVersion;\r\n\r\n    // Upgrade freeze-time start.\r\n    uint internal pendingVersionTimestamp;\r\n\r\n    // Timespan for users to review the new implementation and make decision.\r\n    uint internal constant UPGRADE_FREEZE_TIME = 3 days;\r\n\r\n    // Asset implementation contract address that user decided to stick with.\r\n    // 0x0 means that user uses latest version.\r\n    mapping(address => address) internal userOptOutVersion;\r\n\r\n    /**\r\n     * Only asset implementation contract assigned to sender is allowed to call.\r\n     */\r\n    modifier onlyImplementationFor(address _sender) {\r\n        if (getVersionFor(_sender) == msg.sender) {\r\n            _;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns asset implementation contract address assigned to sender.\r\n     *\r\n     * @param _sender sender address.\r\n     *\r\n     * @return asset implementation contract address.\r\n     */\r\n    function getVersionFor(address _sender) public view returns(address) {\r\n        return userOptOutVersion[_sender] == address(0) ?\r\n            latestVersion : userOptOutVersion[_sender];\r\n    }\r\n\r\n    /**\r\n     * Returns current asset implementation contract address.\r\n     *\r\n     * @return asset implementation contract address.\r\n     */\r\n    function getLatestVersion() public view returns(address) {\r\n        return latestVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns proposed next asset implementation contract address.\r\n     *\r\n     * @return asset implementation contract address.\r\n     */\r\n    function getPendingVersion() public view returns(address) {\r\n        return pendingVersion;\r\n    }\r\n\r\n    /**\r\n     * Returns upgrade freeze-time start.\r\n     *\r\n     * @return freeze-time start.\r\n     */\r\n    function getPendingVersionTimestamp() public view returns(uint) {\r\n        return pendingVersionTimestamp;\r\n    }\r\n\r\n    /**\r\n     * Propose next asset implementation contract address.\r\n     *\r\n     * Can only be called by current asset owner.\r\n     *\r\n     * Note: freeze-time should not be applied for the initial setup.\r\n     *\r\n     * @param _newVersion asset implementation contract address.\r\n     *\r\n     * @return success.\r\n     */\r\n    function proposeUpgrade(address _newVersion) public onlyAssetOwner() returns(bool) {\r\n        // Should not already be in the upgrading process.\r\n        if (pendingVersion != address(0)) {\r\n            return false;\r\n        }\r\n        // New version address should be other than 0x0.\r\n        if (_newVersion == address(0)) {\r\n            return false;\r\n        }\r\n        // Don't apply freeze-time for the initial setup.\r\n        if (latestVersion == address(0)) {\r\n            latestVersion = _newVersion;\r\n            return true;\r\n        }\r\n        pendingVersion = _newVersion;\r\n        // solhint-disable-next-line not-rely-on-time\r\n        pendingVersionTimestamp = now;\r\n        emit UpgradeProposed(_newVersion);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Cancel the pending upgrade process.\r\n     *\r\n     * Can only be called by current asset owner.\r\n     *\r\n     * @return success.\r\n     */\r\n    function purgeUpgrade() public onlyAssetOwner() returns(bool) {\r\n        if (pendingVersion == address(0)) {\r\n            return false;\r\n        }\r\n        emit UpgradePurged(pendingVersion);\r\n        delete pendingVersion;\r\n        delete pendingVersionTimestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Finalize an upgrade process setting new asset implementation contract address.\r\n     *\r\n     * Can only be called after an upgrade freeze-time.\r\n     *\r\n     * @return success.\r\n     */\r\n    function commitUpgrade() public returns(bool) {\r\n        if (pendingVersion == address(0)) {\r\n            return false;\r\n        }\r\n        // solhint-disable-next-line not-rely-on-time\r\n        if (pendingVersionTimestamp + UPGRADE_FREEZE_TIME > now) {\r\n            return false;\r\n        }\r\n        latestVersion = pendingVersion;\r\n        delete pendingVersion;\r\n        delete pendingVersionTimestamp;\r\n        emit UpgradeCommited(latestVersion);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Disagree with proposed upgrade, and stick with current asset implementation\r\n     * until further explicit agreement to upgrade.\r\n     *\r\n     * @return success.\r\n     */\r\n    function optOut() public returns(bool) {\r\n        if (userOptOutVersion[msg.sender] != address(0)) {\r\n            return false;\r\n        }\r\n        userOptOutVersion[msg.sender] = latestVersion;\r\n        emit OptedOut(msg.sender, latestVersion);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Implicitly agree to upgrade to current and future asset implementation upgrades,\r\n     * until further explicit disagreement.\r\n     *\r\n     * @return success.\r\n     */\r\n    function optIn() public returns(bool) {\r\n        delete userOptOutVersion[msg.sender];\r\n        emit OptedIn(msg.sender, latestVersion);\r\n        return true;\r\n    }\r\n\r\n    // Backwards compatibility.\r\n    function multiAsset() public view returns(EToken2Interface) {\r\n        return etoken2;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"multiAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLatestVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_forwardTransferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitApprove\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"emitTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etoken2\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersionTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"purgeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optIn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_asset\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"recoverTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_forwardApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_icap\",\"type\":\"string\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"},{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"_forwardTransferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferFromToICAPWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_icap\",\"type\":\"bytes32\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFromToICAP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etoken2Symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"transferWithReference\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_etoken2\",\"type\":\"address\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newVersion\",\"type\":\"address\"}],\"name\":\"proposeUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"optOut\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getVersionFor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"UpgradeProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"UpgradePurged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newVersion\",\"type\":\"address\"}],\"name\":\"UpgradeCommited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"version\",\"type\":\"address\"}],\"name\":\"OptedOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"version\",\"type\":\"address\"}],\"name\":\"OptedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "AssetProxy", "CompilerVersion": "v0.5.8+commit.23d335f2", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://154bd9f5278cc0eca8563343acc16bf5fc6717560cdf3c21a0719f7755eb4bd7"}