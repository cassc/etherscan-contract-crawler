{"SourceCode": "# @version 0.2.15\r\n\"\"\"\r\n@title StableSwap\r\n@author Curve.Fi\r\n@license Copyright (c) Curve.Fi, 2020-2021 - all rights reserved\r\n@notice 3pool metapool implementation contract\r\n@dev ERC20 support for return True/revert, return True/False, return None\r\n\"\"\"\r\n\r\ninterface ERC20:\r\n    def approve(_spender: address, _amount: uint256): nonpayable\r\n    def balanceOf(_owner: address) -> uint256: view\r\n\r\ninterface Curve:\r\n    def coins(i: uint256) -> address: view\r\n    def get_virtual_price() -> uint256: view\r\n    def calc_token_amount(amounts: uint256[BASE_N_COINS], deposit: bool) -> uint256: view\r\n    def calc_withdraw_one_coin(_token_amount: uint256, i: int128) -> uint256: view\r\n    def fee() -> uint256: view\r\n    def get_dy(i: int128, j: int128, dx: uint256) -> uint256: view\r\n    def exchange(i: int128, j: int128, dx: uint256, min_dy: uint256): nonpayable\r\n    def add_liquidity(amounts: uint256[BASE_N_COINS], min_mint_amount: uint256): nonpayable\r\n    def remove_liquidity_one_coin(_token_amount: uint256, i: int128, min_amount: uint256): nonpayable\r\n\r\ninterface Factory:\r\n    def convert_metapool_fees() -> bool: nonpayable\r\n    def get_fee_receiver(_pool: address) -> address: view\r\n    def admin() -> address: view\r\n\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent TokenExchange:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent TokenExchangeUnderlying:\r\n    buyer: indexed(address)\r\n    sold_id: int128\r\n    tokens_sold: uint256\r\n    bought_id: int128\r\n    tokens_bought: uint256\r\n\r\nevent AddLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidity:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityOne:\r\n    provider: indexed(address)\r\n    token_amount: uint256\r\n    coin_amount: uint256\r\n    token_supply: uint256\r\n\r\nevent RemoveLiquidityImbalance:\r\n    provider: indexed(address)\r\n    token_amounts: uint256[N_COINS]\r\n    fees: uint256[N_COINS]\r\n    invariant: uint256\r\n    token_supply: uint256\r\n\r\nevent RampA:\r\n    old_A: uint256\r\n    new_A: uint256\r\n    initial_time: uint256\r\n    future_time: uint256\r\n\r\nevent StopRampA:\r\n    A: uint256\r\n    t: uint256\r\n\r\n\r\nBASE_POOL: constant(address) = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7\r\nBASE_COINS: constant(address[3]) = [\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F,  # DAI\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48,  # USDC\r\n    0xdAC17F958D2ee523a2206206994597C13D831ec7,  # USDT\r\n]\r\n\r\nN_COINS: constant(int128) = 2\r\nMAX_COIN: constant(int128) = N_COINS - 1\r\nBASE_N_COINS: constant(int128) = 3\r\nPRECISION: constant(uint256) = 10 ** 18\r\n\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nADMIN_FEE: constant(uint256) = 5000000000\r\n\r\nA_PRECISION: constant(uint256) = 100\r\nMAX_A: constant(uint256) = 10 ** 6\r\nMAX_A_CHANGE: constant(uint256) = 10\r\nMIN_RAMP_TIME: constant(uint256) = 86400\r\n\r\nfactory: address\r\n\r\ncoins: public(address[N_COINS])\r\nbalances: public(uint256[N_COINS])\r\nfee: public(uint256)  # fee * 1e10\r\n\r\ninitial_A: public(uint256)\r\nfuture_A: public(uint256)\r\ninitial_A_time: public(uint256)\r\nfuture_A_time: public(uint256)\r\n\r\nrate_multiplier: uint256\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    # we do this to prevent the implementation contract from being used as a pool\r\n    self.fee = 31337\r\n\r\n\r\n@external\r\ndef initialize(\r\n    _name: String[32],\r\n    _symbol: String[10],\r\n    _coin: address,\r\n    _rate_multiplier: uint256,\r\n    _A: uint256,\r\n    _fee: uint256\r\n):\r\n    \"\"\"\r\n    @notice Contract initializer\r\n    @param _name Name of the new pool\r\n    @param _symbol Token symbol\r\n    @param _coin Addresses of ERC20 conracts of coins\r\n    @param _rate_multiplier Rate multiplier for `_coin` (10 ** (36 - decimals))\r\n    @param _A Amplification coefficient multiplied by n ** (n - 1)\r\n    @param _fee Fee to charge for exchanges\r\n    \"\"\"\r\n    # check if fee was already set to prevent initializing contract twice\r\n    assert self.fee == 0\r\n\r\n    A: uint256 = _A * A_PRECISION\r\n    self.coins = [_coin, 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490]\r\n    self.rate_multiplier = _rate_multiplier\r\n    self.initial_A = A\r\n    self.future_A = A\r\n    self.fee = _fee\r\n    self.factory = msg.sender\r\n\r\n    self.name = concat(\"Curve.fi Factory USD Metapool: \", _name)\r\n    self.symbol = concat(_symbol, \"3CRV-f\")\r\n\r\n    for coin in BASE_COINS:\r\n        ERC20(coin).approve(BASE_POOL, MAX_UINT256)\r\n\r\n    # fire a transfer event so block explorers identify the contract as an ERC20\r\n    log Transfer(ZERO_ADDRESS, self, 0)\r\n\r\n\r\n### ERC20 Functionality ###\r\n\r\n@view\r\n@external\r\ndef decimals() -> uint256:\r\n    \"\"\"\r\n    @notice Get the number of decimals for this token\r\n    @dev Implemented as a view method to reduce gas costs\r\n    @return uint256 decimal places\r\n    \"\"\"\r\n    return 18\r\n\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _value: uint256):\r\n    # # NOTE: vyper does not allow underflows\r\n    # #       so the following subtraction would revert on insufficient balance\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n\r\n    log Transfer(_from, _to, _value)\r\n\r\n\r\n@external\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Transfer token for a specified address\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    self._transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @dev Transfer tokens from one address to another.\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    self._transfer(_from, _to, _value)\r\n\r\n    _allowance: uint256 = self.allowance[_from][msg.sender]\r\n    if _allowance != MAX_UINT256:\r\n        self.allowance[_from][msg.sender] = _allowance - _value\r\n\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve the passed address to transfer the specified amount of\r\n            tokens on behalf of msg.sender\r\n    @dev Beware that changing an allowance via this method brings the risk that\r\n         someone may use both the old and new allowance by unfortunate transaction\r\n         ordering: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will transfer the funds\r\n    @param _value The amount of tokens that may be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self.allowance[msg.sender][_spender] = _value\r\n\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n\r\n### StableSwap Functionality ###\r\n\r\n@view\r\n@internal\r\ndef _A() -> uint256:\r\n    \"\"\"\r\n    Handle ramping A up or down\r\n    \"\"\"\r\n    t1: uint256 = self.future_A_time\r\n    A1: uint256 = self.future_A\r\n\r\n    if block.timestamp < t1:\r\n        A0: uint256 = self.initial_A\r\n        t0: uint256 = self.initial_A_time\r\n        # Expressions in uint256 cannot have negative numbers, thus \"if\"\r\n        if A1 > A0:\r\n            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\r\n        else:\r\n            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\r\n\r\n    else:  # when t1 == 0 or block.timestamp >= t1\r\n        return A1\r\n\r\n\r\n@view\r\n@external\r\ndef admin_fee() -> uint256:\r\n    return ADMIN_FEE\r\n\r\n\r\n@view\r\n@external\r\ndef A() -> uint256:\r\n    return self._A() / A_PRECISION\r\n\r\n\r\n@view\r\n@external\r\ndef A_precise() -> uint256:\r\n    return self._A()\r\n\r\n\r\n@pure\r\n@internal\r\ndef _xp_mem(_rates: uint256[N_COINS], _balances: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    for i in range(N_COINS):\r\n        result[i] = _rates[i] * _balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@pure\r\n@internal\r\ndef get_D(_xp: uint256[N_COINS], _amp: uint256) -> uint256:\r\n    \"\"\"\r\n    D invariant calculation in non-overflowing integer operations\r\n    iteratively\r\n\r\n    A * sum(x_i) * n**n + D = A * D * n**n + D**(n+1) / (n**n * prod(x_i))\r\n\r\n    Converging solution:\r\n    D[j+1] = (A * n**n * sum(x_i) - D[j]**(n+1) / (n**n prod(x_i))) / (A * n**n - 1)\r\n    \"\"\"\r\n    S: uint256 = 0\r\n    Dprev: uint256 = 0\r\n    for x in _xp:\r\n        S += x\r\n    if S == 0:\r\n        return 0\r\n\r\n    D: uint256 = S\r\n    Ann: uint256 = _amp * N_COINS\r\n    for i in range(255):\r\n        D_P: uint256 = D\r\n        for x in _xp:\r\n            D_P = D_P * D / (x * N_COINS)  # If division by 0, this will be borked: only withdrawal will work. And that is good\r\n        Dprev = D\r\n        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                return D\r\n        else:\r\n            if Dprev - D <= 1:\r\n                return D\r\n    # convergence typically occurs in 4 rounds or less, this should be unreachable!\r\n    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef get_D_mem(_rates: uint256[N_COINS], _balances: uint256[N_COINS], _amp: uint256) -> uint256:\r\n    xp: uint256[N_COINS] = self._xp_mem(_rates, _balances)\r\n    return self.get_D(xp, _amp)\r\n\r\n\r\n@view\r\n@external\r\ndef get_virtual_price() -> uint256:\r\n    \"\"\"\r\n    @notice The current virtual price of the pool LP token\r\n    @dev Useful for calculating profits\r\n    @return LP token virtual price normalized to 1e18\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self.balances)\r\n    D: uint256 = self.get_D(xp, amp)\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    return D * PRECISION / self.totalSupply\r\n\r\n\r\n@view\r\n@external\r\ndef calc_token_amount(_amounts: uint256[N_COINS], _is_deposit: bool) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\r\n    @dev This calculation accounts for slippage, but not fees.\r\n         Needed to prevent front-running, not for precise calculations!\r\n    @param _amounts Amount of each coin being deposited\r\n    @param _is_deposit set True for deposits, False for withdrawals\r\n    @return Expected amount of LP tokens received\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    balances: uint256[N_COINS] = self.balances\r\n\r\n    D0: uint256 = self.get_D_mem(rates, balances, amp)\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if _is_deposit:\r\n            balances[i] += amount\r\n        else:\r\n            balances[i] -= amount\r\n    D1: uint256 = self.get_D_mem(rates, balances, amp)\r\n    diff: uint256 = 0\r\n    if _is_deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * self.totalSupply / D0\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef add_liquidity(\r\n    _amounts: uint256[N_COINS],\r\n    _min_mint_amount: uint256,\r\n    _receiver: address = msg.sender\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Deposit coins into the pool\r\n    @param _amounts List of amounts of coins to deposit\r\n    @param _min_mint_amount Minimum amount of LP tokens to mint from the deposit\r\n    @param _receiver Address that owns the minted LP tokens\r\n    @return Amount of LP tokens received by depositing\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n\r\n    # Initial invariant\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n    new_balances: uint256[N_COINS] = old_balances\r\n\r\n    total_supply: uint256 = self.totalSupply\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount == 0:\r\n            assert total_supply > 0\r\n        else:\r\n            response: Bytes[32] = raw_call(\r\n                self.coins[i],\r\n                concat(\r\n                    method_id(\"transferFrom(address,address,uint256)\"),\r\n                    convert(msg.sender, bytes32),\r\n                    convert(self, bytes32),\r\n                    convert(amount, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) > 0:\r\n                assert convert(response, bool)\r\n            new_balances[i] += amount\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    mint_amount: uint256 = 0\r\n    if total_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            new_balance: uint256 = new_balances[i]\r\n            if ideal_balance > new_balance:\r\n                difference = ideal_balance - new_balance\r\n            else:\r\n                difference = new_balance - ideal_balance\r\n            fees[i] = base_fee * difference / FEE_DENOMINATOR\r\n            self.balances[i] = new_balance - (fees[i] * ADMIN_FEE / FEE_DENOMINATOR)\r\n            new_balances[i] -= fees[i]\r\n        D2: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n        mint_amount = total_supply * (D2 - D0) / D0\r\n    else:\r\n        self.balances = new_balances\r\n        mint_amount = D1  # Take the dust if there was any\r\n\r\n    assert mint_amount >= _min_mint_amount\r\n\r\n    # Mint pool tokens\r\n    total_supply += mint_amount\r\n    self.balanceOf[_receiver] += mint_amount\r\n    self.totalSupply = total_supply\r\n    log Transfer(ZERO_ADDRESS, _receiver, mint_amount)\r\n    log AddLiquidity(msg.sender, _amounts, fees, D1, total_supply)\r\n\r\n    return mint_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y(i: int128, j: int128, x: uint256, xp: uint256[N_COINS]) -> uint256:\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i != j       # dev: same coin\r\n    assert j >= 0       # dev: j below zero\r\n    assert j < N_COINS  # dev: j above N_COINS\r\n\r\n    # should be unreachable, but good for safety\r\n    assert i >= 0\r\n    assert i < N_COINS\r\n\r\n    amp: uint256 = self._A()\r\n    D: uint256 = self.get_D(xp, amp)\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = amp * N_COINS\r\n\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current output dy given input dx\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @return Amount of `j` predicted\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self.balances)\r\n\r\n    x: uint256 = xp[i] + (dx * rates[i] / PRECISION)\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y - 1\r\n    fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return (dy - fee) * PRECISION / rates[j]\r\n\r\n\r\n@view\r\n@external\r\ndef get_dy_underlying(i: int128, j: int128, dx: uint256) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the current output dy given input dx on underlying\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param dx Amount of `i` being exchanged\r\n    @return Amount of `j` predicted\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self.balances)\r\n\r\n    x: uint256 = 0\r\n    base_i: int128 = 0\r\n    base_j: int128 = 0\r\n    meta_i: int128 = 0\r\n    meta_j: int128 = 0\r\n\r\n    if i != 0:\r\n        base_i = i - MAX_COIN\r\n        meta_i = 1\r\n    if j != 0:\r\n        base_j = j - MAX_COIN\r\n        meta_j = 1\r\n\r\n    if i == 0:\r\n        x = xp[i] + dx * (rates[0] / 10**18)\r\n    else:\r\n        if j == 0:\r\n            # i is from BasePool\r\n            # At first, get the amount of pool tokens\r\n            base_inputs: uint256[BASE_N_COINS] = empty(uint256[BASE_N_COINS])\r\n            base_inputs[base_i] = dx\r\n            # Token amount transformed to underlying \"dollars\"\r\n            x = Curve(BASE_POOL).calc_token_amount(base_inputs, True) * rates[1] / PRECISION\r\n            # Accounting for deposit/withdraw fees approximately\r\n            x -= x * Curve(BASE_POOL).fee() / (2 * FEE_DENOMINATOR)\r\n            # Adding number of pool tokens\r\n            x += xp[MAX_COIN]\r\n        else:\r\n            # If both are from the base pool\r\n            return Curve(BASE_POOL).get_dy(base_i, base_j, dx)\r\n\r\n    # This pool is involved only when in-pool assets are used\r\n    y: uint256 = self.get_y(meta_i, meta_j, x, xp)\r\n    dy: uint256 = xp[meta_j] - y - 1\r\n    dy = (dy - self.fee * dy / FEE_DENOMINATOR)\r\n\r\n    # If output is going via the metapool\r\n    if j == 0:\r\n        dy /= (rates[0] / 10**18)\r\n    else:\r\n        # j is from BasePool\r\n        # The fee is already accounted for\r\n        dy = Curve(BASE_POOL).calc_withdraw_one_coin(dy * PRECISION / rates[1], base_j)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange(\r\n    i: int128,\r\n    j: int128,\r\n    _dx: uint256,\r\n    _min_dy: uint256,\r\n    _receiver: address = msg.sender,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Perform an exchange between two coins\r\n    @dev Index values can be found via the `coins` public getter method\r\n    @param i Index value for the coin to send\r\n    @param j Index valie of the coin to recieve\r\n    @param _dx Amount of `i` being exchanged\r\n    @param _min_dy Minimum amount of `j` to receive\r\n    @param _receiver Address that receives `j`\r\n    @return Actual amount of `j` received\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, old_balances)\r\n\r\n    x: uint256 = xp[i] + _dx * rates[i] / PRECISION\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n\r\n    dy: uint256 = xp[j] - y - 1  # -1 just in case there were some rounding errors\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n    # Convert all to real units\r\n    dy = (dy - dy_fee) * PRECISION / rates[j]\r\n    assert dy >= _min_dy\r\n\r\n    dy_admin_fee: uint256 = dy_fee * ADMIN_FEE / FEE_DENOMINATOR\r\n    dy_admin_fee = dy_admin_fee * PRECISION / rates[j]\r\n\r\n    # Change balances exactly in same way as we change actual ERC20 coin amounts\r\n    self.balances[i] = old_balances[i] + _dx\r\n    # When rounding errors happen, we undercharge admin fee in favor of LP\r\n    self.balances[j] = old_balances[j] - dy - dy_admin_fee\r\n\r\n    response: Bytes[32] = raw_call(\r\n        self.coins[i],\r\n        concat(\r\n            method_id(\"transferFrom(address,address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(self, bytes32),\r\n            convert(_dx, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) > 0:\r\n        assert convert(response, bool)\r\n\r\n    response = raw_call(\r\n        self.coins[j],\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(_receiver, bytes32),\r\n            convert(dy, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) > 0:\r\n        assert convert(response, bool)\r\n\r\n    log TokenExchange(msg.sender, i, _dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef exchange_underlying(\r\n    i: int128,\r\n    j: int128,\r\n    _dx: uint256,\r\n    _min_dy: uint256,\r\n    _receiver: address = msg.sender,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Perform an exchange between two underlying coins\r\n    @param i Index value for the underlying coin to send\r\n    @param j Index valie of the underlying coin to receive\r\n    @param _dx Amount of `i` being exchanged\r\n    @param _min_dy Minimum amount of `j` to receive\r\n    @param _receiver Address that receives `j`\r\n    @return Actual amount of `j` received\r\n    \"\"\"\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, old_balances)\r\n\r\n    base_coins: address[3] = BASE_COINS\r\n\r\n    dy: uint256 = 0\r\n    base_i: int128 = 0\r\n    base_j: int128 = 0\r\n    meta_i: int128 = 0\r\n    meta_j: int128 = 0\r\n    x: uint256 = 0\r\n    input_coin: address = ZERO_ADDRESS\r\n    output_coin: address = ZERO_ADDRESS\r\n\r\n    if i == 0:\r\n        input_coin = self.coins[0]\r\n    else:\r\n        base_i = i - MAX_COIN\r\n        meta_i = 1\r\n        input_coin = base_coins[base_i]\r\n    if j == 0:\r\n        output_coin = self.coins[0]\r\n    else:\r\n        base_j = j - MAX_COIN\r\n        meta_j = 1\r\n        output_coin = base_coins[base_j]\r\n\r\n    response: Bytes[32] = raw_call(\r\n        input_coin,\r\n        concat(\r\n            method_id(\"transferFrom(address,address,uint256)\"),\r\n            convert(msg.sender, bytes32),\r\n            convert(self, bytes32),\r\n            convert(_dx, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) > 0:\r\n        assert convert(response, bool)\r\n\r\n    dx: uint256 = _dx\r\n    if i == 0 or j == 0:\r\n        if i == 0:\r\n            x = xp[i] + dx * rates[i] / PRECISION\r\n        else:\r\n            # i is from BasePool\r\n            # At first, get the amount of pool tokens\r\n            base_inputs: uint256[BASE_N_COINS] = empty(uint256[BASE_N_COINS])\r\n            base_inputs[base_i] = dx\r\n            coin_i: address = self.coins[MAX_COIN]\r\n            # Deposit and measure delta\r\n            x = ERC20(coin_i).balanceOf(self)\r\n            Curve(BASE_POOL).add_liquidity(base_inputs, 0)\r\n            # Need to convert pool token to \"virtual\" units using rates\r\n            # dx is also different now\r\n            dx = ERC20(coin_i).balanceOf(self) - x\r\n            x = dx * rates[MAX_COIN] / PRECISION\r\n            # Adding number of pool tokens\r\n            x += xp[MAX_COIN]\r\n\r\n        y: uint256 = self.get_y(meta_i, meta_j, x, xp)\r\n\r\n        # Either a real coin or token\r\n        dy = xp[meta_j] - y - 1  # -1 just in case there were some rounding errors\r\n        dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n\r\n        # Convert all to real units\r\n        # Works for both pool coins and real coins\r\n        dy = (dy - dy_fee) * PRECISION / rates[meta_j]\r\n\r\n        dy_admin_fee: uint256 = dy_fee * ADMIN_FEE / FEE_DENOMINATOR\r\n        dy_admin_fee = dy_admin_fee * PRECISION / rates[meta_j]\r\n\r\n        # Change balances exactly in same way as we change actual ERC20 coin amounts\r\n        self.balances[meta_i] = old_balances[meta_i] + dx\r\n        # When rounding errors happen, we undercharge admin fee in favor of LP\r\n        self.balances[meta_j] = old_balances[meta_j] - dy - dy_admin_fee\r\n\r\n        # Withdraw from the base pool if needed\r\n        if j > 0:\r\n            out_amount: uint256 = ERC20(output_coin).balanceOf(self)\r\n            Curve(BASE_POOL).remove_liquidity_one_coin(dy, base_j, 0)\r\n            dy = ERC20(output_coin).balanceOf(self) - out_amount\r\n\r\n        assert dy >= _min_dy\r\n\r\n    else:\r\n        # If both are from the base pool\r\n        dy = ERC20(output_coin).balanceOf(self)\r\n        Curve(BASE_POOL).exchange(base_i, base_j, dx, _min_dy)\r\n        dy = ERC20(output_coin).balanceOf(self) - dy\r\n\r\n    response = raw_call(\r\n        output_coin,\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(_receiver, bytes32),\r\n            convert(dy, bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) > 0:\r\n        assert convert(response, bool)\r\n\r\n    log TokenExchangeUnderlying(msg.sender, i, dx, j, dy)\r\n\r\n    return dy\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity(\r\n    _burn_amount: uint256,\r\n    _min_amounts: uint256[N_COINS],\r\n    _receiver: address = msg.sender\r\n) -> uint256[N_COINS]:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool\r\n    @dev Withdrawal amounts are based on current deposit ratios\r\n    @param _burn_amount Quantity of LP tokens to burn in the withdrawal\r\n    @param _min_amounts Minimum amounts of underlying coins to receive\r\n    @param _receiver Address that receives the withdrawn coins\r\n    @return List of amounts of coins that were withdrawn\r\n    \"\"\"\r\n    total_supply: uint256 = self.totalSupply\r\n    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\r\n\r\n    for i in range(N_COINS):\r\n        old_balance: uint256 = self.balances[i]\r\n        value: uint256 = old_balance * _burn_amount / total_supply\r\n        assert value >= _min_amounts[i]\r\n        self.balances[i] = old_balance - value\r\n        amounts[i] = value\r\n        response: Bytes[32] = raw_call(\r\n            self.coins[i],\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(_receiver, bytes32),\r\n                convert(value, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) > 0:\r\n            assert convert(response, bool)\r\n\r\n\r\n    total_supply -= _burn_amount\r\n    self.balanceOf[msg.sender] -= _burn_amount\r\n    self.totalSupply = total_supply\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _burn_amount)\r\n\r\n    log RemoveLiquidity(msg.sender, amounts, empty(uint256[N_COINS]), total_supply)\r\n\r\n    return amounts\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(\r\n    _amounts: uint256[N_COINS],\r\n    _max_burn_amount: uint256,\r\n    _receiver: address = msg.sender\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw coins from the pool in an imbalanced amount\r\n    @param _amounts List of amounts of underlying coins to withdraw\r\n    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\r\n    @param _receiver Address that receives the withdrawn coins\r\n    @return Actual amount of the LP token burned in the withdrawal\r\n    \"\"\"\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\r\n\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    for i in range(N_COINS):\r\n        amount: uint256 = _amounts[i]\r\n        if amount != 0:\r\n            new_balances[i] -= amount\r\n            response: Bytes[32] = raw_call(\r\n                self.coins[i],\r\n                concat(\r\n                    method_id(\"transfer(address,uint256)\"),\r\n                    convert(_receiver, bytes32),\r\n                    convert(amount, bytes32),\r\n                ),\r\n                max_outsize=32,\r\n            )\r\n            if len(response) > 0:\r\n                assert convert(response, bool)\r\n    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n\r\n    fees: uint256[N_COINS] = empty(uint256[N_COINS])\r\n    base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        difference: uint256 = 0\r\n        new_balance: uint256 = new_balances[i]\r\n        if ideal_balance > new_balance:\r\n            difference = ideal_balance - new_balance\r\n        else:\r\n            difference = new_balance - ideal_balance\r\n        fees[i] = base_fee * difference / FEE_DENOMINATOR\r\n        self.balances[i] = new_balance - (fees[i] * ADMIN_FEE / FEE_DENOMINATOR)\r\n        new_balances[i] -= fees[i]\r\n    D2: uint256 = self.get_D_mem(rates, new_balances, amp)\r\n\r\n    total_supply: uint256 = self.totalSupply\r\n    burn_amount: uint256 = ((D0 - D2) * total_supply / D0) + 1\r\n    assert burn_amount > 1  # dev: zero tokens burned\r\n    assert burn_amount <= _max_burn_amount\r\n\r\n    total_supply -= burn_amount\r\n    self.totalSupply = total_supply\r\n    self.balanceOf[msg.sender] -= burn_amount\r\n    log Transfer(msg.sender, ZERO_ADDRESS, burn_amount)\r\n    log RemoveLiquidityImbalance(msg.sender, _amounts, fees, D1, total_supply)\r\n\r\n    return burn_amount\r\n\r\n\r\n@view\r\n@internal\r\ndef get_y_D(A: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\r\n    \"\"\"\r\n    Calculate x[i] if one reduces D from being calculated for xp to D\r\n\r\n    Done by solving quadratic equation iteratively.\r\n    x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\r\n    x_1**2 + b*x_1 = c\r\n\r\n    x_1 = (x_1**2 + c) / (2*x_1 + b)\r\n    \"\"\"\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert i >= 0  # dev: i below zero\r\n    assert i < N_COINS  # dev: i above N_COINS\r\n\r\n    S_: uint256 = 0\r\n    _x: uint256 = 0\r\n    y_prev: uint256 = 0\r\n    c: uint256 = D\r\n    Ann: uint256 = A * N_COINS\r\n\r\n    for _i in range(N_COINS):\r\n        if _i != i:\r\n            _x = xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n\r\n    c = c * D * A_PRECISION / (Ann * N_COINS)\r\n    b: uint256 = S_ + D * A_PRECISION / Ann\r\n    y: uint256 = D\r\n\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                return y\r\n        else:\r\n            if y_prev - y <= 1:\r\n                return y\r\n    raise\r\n\r\n\r\n@view\r\n@internal\r\ndef _calc_withdraw_one_coin(_burn_amount: uint256, i: int128) -> uint256[2]:\r\n    # First, need to calculate\r\n    # * Get current D\r\n    # * Solve Eqn against y_i for D - _token_amount\r\n    amp: uint256 = self._A()\r\n    rates: uint256[N_COINS] = [self.rate_multiplier, Curve(BASE_POOL).get_virtual_price()]\r\n    xp: uint256[N_COINS] = self._xp_mem(rates, self.balances)\r\n    D0: uint256 = self.get_D(xp, amp)\r\n\r\n    total_supply: uint256 = self.totalSupply\r\n    D1: uint256 = D0 - _burn_amount * D0 / total_supply\r\n    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\r\n\r\n    base_fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    xp_reduced: uint256[N_COINS] = empty(uint256[N_COINS])\r\n\r\n    for j in range(N_COINS):\r\n        dx_expected: uint256 = 0\r\n        xp_j: uint256 = xp[j]\r\n        if j == i:\r\n            dx_expected = xp_j * D1 / D0 - new_y\r\n        else:\r\n            dx_expected = xp_j - xp_j * D1 / D0\r\n        xp_reduced[j] = xp_j - base_fee * dx_expected / FEE_DENOMINATOR\r\n\r\n    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\r\n    dy_0: uint256 = (xp[i] - new_y) * PRECISION / rates[i]  # w/o fees\r\n    dy = (dy - 1) * PRECISION / rates[i]  # Withdraw less to account for rounding errors\r\n\r\n    return [dy, dy_0 - dy]\r\n\r\n\r\n@view\r\n@external\r\ndef calc_withdraw_one_coin(_burn_amount: uint256, i: int128) -> uint256:\r\n    \"\"\"\r\n    @notice Calculate the amount received when withdrawing a single coin\r\n    @param _burn_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    return self._calc_withdraw_one_coin(_burn_amount, i)[0]\r\n\r\n\r\n@external\r\n@nonreentrant('lock')\r\ndef remove_liquidity_one_coin(\r\n    _burn_amount: uint256,\r\n    i: int128,\r\n    _min_received: uint256,\r\n    _receiver: address = msg.sender,\r\n) -> uint256:\r\n    \"\"\"\r\n    @notice Withdraw a single coin from the pool\r\n    @param _burn_amount Amount of LP tokens to burn in the withdrawal\r\n    @param i Index value of the coin to withdraw\r\n    @param _min_received Minimum amount of coin to receive\r\n    @param _receiver Address that receives the withdrawn coins\r\n    @return Amount of coin received\r\n    \"\"\"\r\n    dy: uint256[2] = self._calc_withdraw_one_coin(_burn_amount, i)\r\n    assert dy[0] >= _min_received\r\n\r\n    self.balances[i] -= (dy[0] + dy[1] * ADMIN_FEE / FEE_DENOMINATOR)\r\n    total_supply: uint256 = self.totalSupply - _burn_amount\r\n    self.totalSupply = total_supply\r\n    self.balanceOf[msg.sender] -= _burn_amount\r\n    log Transfer(msg.sender, ZERO_ADDRESS, _burn_amount)\r\n\r\n    response: Bytes[32] = raw_call(\r\n        self.coins[i],\r\n        concat(\r\n            method_id(\"transfer(address,uint256)\"),\r\n            convert(_receiver, bytes32),\r\n            convert(dy[0], bytes32),\r\n        ),\r\n        max_outsize=32,\r\n    )\r\n    if len(response) > 0:\r\n        assert convert(response, bool)\r\n\r\n    log RemoveLiquidityOne(msg.sender, _burn_amount, dy[0], total_supply)\r\n\r\n    return dy[0]\r\n\r\n\r\n@external\r\ndef ramp_A(_future_A: uint256, _future_time: uint256):\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\r\n    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\r\n\r\n    _initial_A: uint256 = self._A()\r\n    _future_A_p: uint256 = _future_A * A_PRECISION\r\n\r\n    assert _future_A > 0 and _future_A < MAX_A\r\n    if _future_A_p < _initial_A:\r\n        assert _future_A_p * MAX_A_CHANGE >= _initial_A\r\n    else:\r\n        assert _future_A_p <= _initial_A * MAX_A_CHANGE\r\n\r\n    self.initial_A = _initial_A\r\n    self.future_A = _future_A_p\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = _future_time\r\n\r\n    log RampA(_initial_A, _future_A_p, block.timestamp, _future_time)\r\n\r\n\r\n@external\r\ndef stop_ramp_A():\r\n    assert msg.sender == Factory(self.factory).admin()  # dev: only owner\r\n\r\n    current_A: uint256 = self._A()\r\n    self.initial_A = current_A\r\n    self.future_A = current_A\r\n    self.initial_A_time = block.timestamp\r\n    self.future_A_time = block.timestamp\r\n    # now (block.timestamp < t1) is always False, so we return saved A\r\n\r\n    log StopRampA(current_A, block.timestamp)\r\n\r\n\r\n@view\r\n@external\r\ndef admin_balances(i: uint256) -> uint256:\r\n    return ERC20(self.coins[i]).balanceOf(self) - self.balances[i]\r\n\r\n\r\n@external\r\ndef withdraw_admin_fees():\r\n    # transfer coin 0 to Factory and call `convert_fees` to swap it for coin 1\r\n    factory: address = self.factory\r\n    coin: address = self.coins[0]\r\n    amount: uint256 = ERC20(coin).balanceOf(self) - self.balances[0]\r\n    if amount > 0:\r\n        response: Bytes[32] = raw_call(\r\n            coin,\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(factory, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) > 0:\r\n            assert convert(response, bool)\r\n        Factory(factory).convert_metapool_fees()\r\n\r\n    # transfer coin 1 to the receiver\r\n    coin = self.coins[1]\r\n    amount = ERC20(coin).balanceOf(self) - self.balances[1]\r\n    if amount > 0:\r\n        receiver: address = Factory(factory).get_fee_receiver(self)\r\n        response: Bytes[32] = raw_call(\r\n            coin,\r\n            concat(\r\n                method_id(\"transfer(address,uint256)\"),\r\n                convert(receiver, bytes32),\r\n                convert(amount, bytes32),\r\n            ),\r\n            max_outsize=32,\r\n        )\r\n        if len(response) > 0:\r\n            assert convert(response, bool)", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenExchange\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"sold_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_sold\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"bought_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_bought\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenExchangeUnderlying\",\"inputs\":[{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"sold_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_sold\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"bought_id\",\"type\":\"int128\",\"indexed\":false},{\"name\":\"tokens_bought\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidity\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityOne\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"coin_amount\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityImbalance\",\"inputs\":[{\"name\":\"provider\",\"type\":\"address\",\"indexed\":true},{\"name\":\"token_amounts\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"fees\",\"type\":\"uint256[2]\",\"indexed\":false},{\"name\":\"invariant\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"token_supply\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RampA\",\"inputs\":[{\"name\":\"old_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"new_A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"initial_time\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"future_time\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"StopRampA\",\"inputs\":[{\"name\":\"A\",\"type\":\"uint256\",\"indexed\":false},{\"name\":\"t\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_coin\",\"type\":\"address\"},{\"name\":\"_rate_multiplier\",\"type\":\"uint256\"},{\"name\":\"_A\",\"type\":\"uint256\"},{\"name\":\"_fee\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":450772},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":318},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":77977},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":115912},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37851},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":438},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":10704},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"A_precise\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":10666},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_virtual_price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1023280},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_token_amount\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_is_deposit\",\"type\":\"bool\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":4029742},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"add_liquidity\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_min_mint_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2466478},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_dy_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"dx\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2475029},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"exchange_underlying\",\"inputs\":[{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"j\",\"type\":\"int128\"},{\"name\":\"_dx\",\"type\":\"uint256\"},{\"name\":\"_min_dy\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_min_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_imbalance\",\"inputs\":[{\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"name\":\"_max_burn_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"calc_withdraw_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":1130},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_received\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"remove_liquidity_one_coin\",\"inputs\":[{\"name\":\"_burn_amount\",\"type\":\"uint256\"},{\"name\":\"i\",\"type\":\"int128\"},{\"name\":\"_min_received\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"ramp_A\",\"inputs\":[{\"name\":\"_future_A\",\"type\":\"uint256\"},{\"name\":\"_future_time\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":162101},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"stop_ramp_A\",\"inputs\":[],\"outputs\":[],\"gas\":157565},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admin_balances\",\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":7770},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"withdraw_admin_fees\",\"inputs\":[],\"outputs\":[],\"gas\":40657},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"coins\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3123},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3153},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"fee\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3138},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3168},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3198},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"initial_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3228},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_A_time\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3258},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":13518},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":11271},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3563},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3808},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3408}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.15", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}