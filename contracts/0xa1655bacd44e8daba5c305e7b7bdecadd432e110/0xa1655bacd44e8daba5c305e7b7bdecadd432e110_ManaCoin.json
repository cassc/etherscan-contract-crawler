{"SourceCode": "/**\r\n * Website :  https://www.manacoin.io/\r\n * DApp :     https://app.manacoin.io/\r\n * Twitter :  https://twitter.com/ManaCoinETH\r\n * Medium :   https://medium.com/@ManaCoinETH\r\n * Telegram : https://t.me/ManaCoinETH\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    \r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract ManaCoin is Ownable, IERC20{\r\n    using SafeMath for uint256;\r\n\r\n    string  private _name;\r\n    string  private _symbol;\r\n    uint256 private _decimals;\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 public  maxTxLimit;\r\n    uint256 public  maxWalletLimit;\r\n    uint256 public minTokenSwapAmount;\r\n    address payable public treasuryWallet;\r\n    uint256 public  swapableRefection;\r\n    uint256 public  swapableTreasuryTax;\r\n    bool private _swapping;\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public sellTax;\r\n    uint256 public buyTax;\r\n    uint256 public taxSharePercentage;\r\n    uint256 public totalBurned;\r\n    uint256 public totalReflected;\r\n    uint256 public totalLP;\r\n\r\n    IUniswapV2Router02 public dexRouter;\r\n    address public  lpPair;\r\n    bool    public  tradingActive;\r\n    bool    public  isLimit;\r\n    uint256 public  ethReflectionBasis;\r\n    uint256 public  reflectionLockPeriod;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool)    private _reflectionExcluded;\r\n    mapping(address => uint256) public  lastReflectionBasis;\r\n    mapping(address => uint256) public  lastReflectionTimeStamp;\r\n    mapping(address => uint256) public  totalClaimedReflection;\r\n    mapping(address => uint256) private _claimableReflection;\r\n\r\n    mapping(address => bool)    public  lpPairs;\r\n    mapping(address => bool)    private _isExcludedFromTax;\r\n\r\n    event functionType (uint Type, address sender, uint256 amount);\r\n    event reflectionClaimed (address indexed recipient, uint256 amount);\r\n\r\n    constructor(){\r\n        _name              = \"ManaCoin\";\r\n        _symbol            = \"MNC\";\r\n        _decimals          = 18;\r\n        _totalSupply       = 100000000 * (10 ** _decimals);\r\n        _balances[owner()] = _balances[owner()].add(_totalSupply);\r\n\r\n        treasuryWallet     = payable(0x0aDEAE6683eFB0408542350E89B7B8311C4b6CE2);\r\n        sellTax            = 20;\r\n        buyTax             = 15;\r\n        maxTxLimit         = 2000000000000000000000000;\r\n        maxWalletLimit     = 2000000000000000000000000;\r\n        minTokenSwapAmount = (_totalSupply * 21) / 10000;\r\n        taxSharePercentage   = 50;\r\n        reflectionLockPeriod = 60; \r\n        isLimit = true;\r\n\r\n        dexRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        lpPair    = IUniswapV2Factory(dexRouter.factory()).createPair(address(this), dexRouter.WETH());\r\n        lpPairs[lpPair] = true;\r\n\r\n        _approve(owner(), address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n\r\n        _isExcludedFromTax[owner()]        = true;\r\n        _isExcludedFromTax[treasuryWallet] = true;\r\n        _isExcludedFromTax[address(this)]  = true;\r\n        _isExcludedFromTax[lpPair]         = true;\r\n\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address sender, address spender) public view override returns (uint256) {\r\n        return _allowances[sender][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) private {\r\n        require(sender  != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(_msgSender() != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != DEAD, \"ERC20: Dead Address\");\r\n        require(_balances[msg.sender] >= amount, \"ERC20: Amount exceeds account balance\");\r\n\r\n        _transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(_msgSender() != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != address(0), \"ERC20: Zero Address\");\r\n        require(recipient != DEAD, \"ERC20: Dead Address\");\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC20: Insufficient allowance.\");\r\n        require(_balances[sender] >= amount, \"ERC20: Amount exceeds sender's account balance\");\r\n\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender]  = _allowances[sender][msg.sender].sub(amount);\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n\r\n        if (sender == owner() && lpPairs[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        }\r\n        else if (lpPairs[sender] || lpPairs[recipient]){\r\n            require(tradingActive == true, \"ERC20: Trading is not active.\");\r\n            \r\n            if (_isExcludedFromTax[sender] && !_isExcludedFromTax[recipient]){\r\n                if (_checkWalletLimit(recipient, amount) && _checkTxLimit(amount)) {\r\n                    _transferBuy(sender, recipient, amount); //user buy process\r\n                } \r\n            }   \r\n            else if (!_isExcludedFromTax[sender] && _isExcludedFromTax[recipient]){\r\n                if (_checkTxLimit(amount)) {\r\n                    _transferSell(sender, recipient, amount); //user sell process\r\n                }\r\n            }\r\n            else if (_isExcludedFromTax[sender] && _isExcludedFromTax[recipient]) {\r\n                if (sender == owner() || recipient == owner() || sender == address(this) || recipient == address(this)) {\r\n                    _transferBothExcluded(sender, recipient, amount);\r\n                } else if (lpPairs[recipient]) {\r\n                    if (_checkTxLimit(amount)) {\r\n                        _transferBothExcluded(sender, recipient, amount);\r\n                    }\r\n                } else if (_checkWalletLimit(recipient, amount) && _checkTxLimit(amount)){\r\n                    _transferBothExcluded(sender, recipient, amount);\r\n                }\r\n            } \r\n        } else {\r\n            if (sender == owner() || recipient == owner() || sender == address(this) || recipient == address(this)) {\r\n                    _transferBothExcluded(sender, recipient, amount);\r\n            } else if(_checkWalletLimit(recipient, amount) && _checkTxLimit(amount)){\r\n                    _transferBothExcluded(sender, recipient, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferBuy(address sender, address recipient, uint256 amount) private { \r\n        /// users buy process\r\n        uint256 randomTaxType  = _generateRandomTaxType();\r\n        uint256 taxAmount     = amount.mul(buyTax).div(100);\r\n        uint256 receiveAmount = amount.sub(taxAmount);\r\n        // get tax details\r\n        ( uint256 treasuryAmount, uint256 burnAmount, uint256 lpAmount, uint256 reflectionAmount ) = _getTaxAmount(taxAmount);\r\n\r\n        _balances[sender]        = _balances[sender].sub(amount);\r\n        _balances[recipient]     = _balances[recipient].add(receiveAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(treasuryAmount);\r\n        swapableTreasuryTax      = swapableTreasuryTax.add(treasuryAmount);\r\n\r\n        if (randomTaxType == 1) {\r\n            // true burn\r\n            _burn(sender, burnAmount);\r\n            emit functionType(randomTaxType, sender, burnAmount);\r\n        } else if (randomTaxType == 2) {\r\n            // smart lp\r\n            _takeLP(sender, lpAmount);\r\n            emit functionType(randomTaxType, sender, lpAmount);\r\n        } else if (randomTaxType == 3) {\r\n            // reflection adding\r\n            _balances[address(this)] = _balances[address(this)].add(reflectionAmount);\r\n            swapableRefection        = swapableRefection.add(reflectionAmount);\r\n            totalReflected           = totalReflected.add(reflectionAmount);\r\n            emit functionType(randomTaxType, sender, reflectionAmount);\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferSell(address sender, address recipient, uint256 amount) private { \r\n        /// users sell process\r\n        uint256 randomTaxType = _generateRandomTaxType();\r\n        uint256 taxAmount    = amount.mul(sellTax).div(100);\r\n        uint256 sentAmount   = amount.sub(taxAmount);\r\n        // get sell tax details\r\n        ( uint256 treasuryAmount, uint256 burnAmount, uint256 lpAmount, uint256 reflectionAmount ) = _getTaxAmount(taxAmount);\r\n        bool canSwap = swapableTreasuryTax >= minTokenSwapAmount;\r\n\r\n        if(canSwap && !_swapping ) {\r\n            _swapping = true;\r\n            _swap(treasuryWallet, minTokenSwapAmount); // treasury swap function\r\n            _swapping = false;\r\n            swapableTreasuryTax = swapableTreasuryTax.sub(minTokenSwapAmount);\r\n        }\r\n\r\n        _balances[sender]        = _balances[sender].sub(amount);\r\n        _balances[recipient]     = _balances[recipient].add(sentAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(treasuryAmount);\r\n        swapableTreasuryTax      = swapableTreasuryTax.add(treasuryAmount);\r\n        \r\n        if (randomTaxType == 1) {\r\n            // true burn\r\n            _burn(sender, burnAmount); \r\n            emit functionType(randomTaxType, sender, burnAmount);\r\n        } else if (randomTaxType == 2) {\r\n            // smart lp\r\n            _takeLP(sender, lpAmount); \r\n            emit functionType(randomTaxType, sender, lpAmount);\r\n        } else if (randomTaxType == 3) {\r\n            // reflection adding\r\n            _balances[address(this)] = _balances[address(this)].add(reflectionAmount);\r\n            swapableRefection        = swapableRefection.add(reflectionAmount);\r\n            totalReflected           = totalReflected.add(reflectionAmount);\r\n            emit functionType(randomTaxType, sender, reflectionAmount);\r\n        }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 amount) private {\r\n        _balances[sender]    = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function burn(uint256 amountTokens) public {\r\n        address sender = msg.sender;\r\n        require(_balances[sender] >= amountTokens, \"ERC20: Burn Amount exceeds account balance\");\r\n        require(amountTokens > 0, \"ERC20: Enter some amount to burn\");\r\n\r\n        if (amountTokens > 0) {\r\n            _balances[sender] = _balances[sender].sub(amountTokens);\r\n            _burn(sender, amountTokens);\r\n        }\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) private {\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        totalBurned  = totalBurned.add(amount);\r\n        \r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function _takeLP(address from, uint256 tax) private {\r\n        if (tax > 0) {\r\n            (, , uint256 lp, ) = _getTaxAmount(tax);\r\n            _balances[lpPair]  = _balances[lpPair].add(lp);\r\n            totalLP = totalLP.add(lp);\r\n\r\n            emit Transfer(from, lpPair, lp);\r\n        }\r\n    }\r\n\r\n    function addReflection() external payable {\r\n        ethReflectionBasis = ethReflectionBasis.add(msg.value);\r\n    }\r\n\r\n    function isReflectionExcluded(address account) public view returns (bool) {\r\n        return _reflectionExcluded[account];\r\n    }\r\n\r\n    function removeReflectionExcluded(address account) external onlyOwner {\r\n        require(isReflectionExcluded(account), \"ERC20: Account must be excluded\");\r\n\r\n        _reflectionExcluded[account] = false;\r\n    }\r\n\r\n    function addReflectionExcluded(address account) external onlyOwner {\r\n        _addReflectionExcluded(account);\r\n    }\r\n\r\n    function _addReflectionExcluded(address account) internal {\r\n        require(!isReflectionExcluded(account), \"ERC20: Account must not be excluded\");\r\n        _reflectionExcluded[account] = true;\r\n    }\r\n\r\n    function unclaimedReflection(address addr) public view returns (uint256) {\r\n        if (addr == lpPair || addr == address(dexRouter)) return 0;\r\n\r\n        uint256 basisDifference = ethReflectionBasis - lastReflectionBasis[addr];\r\n        return (basisDifference * balanceOf(addr)) / _totalSupply;\r\n    }\r\n\r\n    function _claimReflection(address payable addr) internal {\r\n        uint256 unclaimed = unclaimedReflection(addr);\r\n        require(unclaimed > 0, \"ERC20: Claim amount should be more then 0\");\r\n        require(isReflectionExcluded(addr) == false, \"ERC20: Address is excluded to claim reflection\");\r\n        \r\n        lastReflectionBasis[addr] = ethReflectionBasis;\r\n        lastReflectionTimeStamp[addr] = block.timestamp; // adding last claim Timestamp\r\n        _claimableReflection[addr] = 0;\r\n        addr.transfer(unclaimed);\r\n        totalClaimedReflection[addr] = totalClaimedReflection[addr].add(unclaimed);\r\n        emit reflectionClaimed(addr, unclaimed);\r\n    }\r\n\r\n    function claimReflection() external returns (bool) {\r\n        address _sender = _msgSender();\r\n        require(!_isContract(_sender), \"ERC20: Sender can't be a contract\"); \r\n        require(lastReflectionTimeStamp[_sender] + reflectionLockPeriod <= block.timestamp, \"ERC20: Reflection lock period exists,  try again later\");\r\n        _claimReflection(payable(_sender));\r\n        return true;\r\n    }\r\n\r\n    function swapReflection(uint256 amount) public returns (bool) {\r\n        // everyone can call this function to generate eth reflection\r\n        require(swapableRefection > 0, \"ERC20: Insufficient token to swap\");\r\n        require(swapableRefection >= amount);\r\n        uint256 currentBalance = address(this).balance;\r\n        _swap(address(this), amount);\r\n        swapableRefection = swapableRefection - amount;\r\n        uint256 ethTransfer = (address(this).balance).sub(currentBalance);\r\n        ethReflectionBasis  = ethReflectionBasis.add(ethTransfer);\r\n        return true;\r\n    }\r\n\r\n    function setMinTokensSwapAmount(uint256 newValue) external onlyOwner {\r\n        require(\r\n            newValue != minTokenSwapAmount,\r\n            \"Cannot update minTokenSwapAmount to same value\"\r\n        );\r\n        minTokenSwapAmount = newValue;\r\n    }\r\n\r\n    function setsellTax(uint256 tax) public onlyOwner {\r\n        require(tax <= 6, \"ERC20: The percentage can't more 6%.\");\r\n        sellTax = tax;\r\n    }\r\n\r\n    function setbuyTax(uint256 tax) public onlyOwner {\r\n        require(tax <= 6, \"ERC20: The percentage can't more 6%.\");\r\n        buyTax = tax;\r\n    }\r\n\r\n    function setTaxSharePercentage(uint256 percentage) public onlyOwner {\r\n        require(percentage <= 100, \"ERC20: The percentage can't more then 100\");\r\n        taxSharePercentage = percentage;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        tradingActive = true;\r\n    }\r\n\r\n    function addLpPair(address pair, bool status) public onlyOwner{\r\n        lpPairs[pair] = status;\r\n        _isExcludedFromTax[pair] = status;\r\n    }\r\n\r\n    function returnNormalTax() public onlyOwner {\r\n        sellTax = 5;\r\n        buyTax  = 5;\r\n        taxSharePercentage = 50;\r\n    }\r\n\r\n    function removeAllTax() public onlyOwner {\r\n        sellTax = 0;\r\n        buyTax  = 0;\r\n        taxSharePercentage = 0;\r\n    }\r\n\r\n    function removeAllLimits() public onlyOwner {\r\n        isLimit = false;\r\n    }\r\n\r\n    function excludeFromTax(address account) public onlyOwner {\r\n        require(!_isExcludedFromTax[account], \"ERC20: Account is already excluded.\");\r\n        _isExcludedFromTax[account] = true;\r\n    }\r\n\r\n    function includeInTax(address _account) public onlyOwner {\r\n        require(_isExcludedFromTax[_account], \"ERC20: Account is already included.\");\r\n        _isExcludedFromTax[_account] = false;\r\n    }\r\n    \r\n    function recoverAllEth() public {\r\n        payable(treasuryWallet).transfer(address(this).balance);\r\n    }\r\n\r\n    function recoverErc20token(address token, uint256 amount) public onlyOwner {\r\n        IERC20(token).transfer(owner(), amount);\r\n    }\r\n\r\n    function checkExludedFromTax(address _account) public view returns (bool) {\r\n        return _isExcludedFromTax[_account];\r\n    }\r\n\r\n    function _generateRandomTaxType() private view returns (uint256) {\r\n        return (uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, block.gaslimit, tx.origin, block.number, tx.gasprice))) % 3) + 1;\r\n    }\r\n\r\n    function _getTaxAmount(uint256 _tax) private view returns (uint256 _treasuryAmount, uint256 Burn, uint256 LP, uint256 Reflection) {\r\n        uint256 treasuryAmount;\r\n        uint256 burnAmount;\r\n        uint256 lpAmount;\r\n        uint256 reflectionAmount;\r\n\r\n        if (_tax > 0) {\r\n            treasuryAmount = _tax.mul((100 - taxSharePercentage)).div(100);\r\n            burnAmount = _tax.mul(taxSharePercentage).div(100);\r\n            lpAmount = _tax.mul(taxSharePercentage).div(100);\r\n            reflectionAmount = _tax.mul(taxSharePercentage).div(100);\r\n        }\r\n        return (treasuryAmount, burnAmount, lpAmount, reflectionAmount);\r\n    }\r\n\r\n    function _checkWalletLimit(address recipient, uint256 amount) private view returns(bool){\r\n        if (isLimit) {\r\n        require(maxWalletLimit >= balanceOf(recipient).add(amount), \"ERC20: Wallet limit exceeds\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _checkTxLimit(uint256 amount) private view returns(bool){\r\n        if (isLimit) {\r\n        require(amount <= maxTxLimit, \"ERC20: Transaction limit exceeds\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _isContract(address _addr) private view returns (bool){\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return (size > 0);\r\n    }\r\n\r\n    function _swap(address recipient, uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        dexRouter.swapExactTokensForETH(\r\n            amount,\r\n            0,\r\n            path,\r\n            recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Type\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"functionType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reflectionClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addReflection\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addReflectionExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"checkExludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethReflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"includeInTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isReflectionExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReflectionBasis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastReflectionTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverAllEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverErc20token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionLockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeReflectionExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnNormalTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinTokensSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setTaxSharePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setbuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setsellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapReflection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapableRefection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapableTreasuryTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSharePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalClaimedReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unclaimedReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ManaCoin", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://273f9ce13d46cc8e19df3055d31db6a0916da194f33565d11cd1ec54d46e301a"}