{"SourceCode": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract Main {\r\n\r\n    using SafeMath for uint;\r\n\r\n    // The nested mapping is used to implement the round-based logic\r\n    mapping(uint => mapping(address => uint)) public balance;\r\n    mapping(uint => mapping(address => uint)) public time;\r\n    mapping(uint => mapping(address => uint)) public percentWithdraw;\r\n    mapping(uint => mapping(address => uint)) public allPercentWithdraw;\r\n    mapping(uint => uint) public investorsByRound;\r\n\r\n    uint public stepTime = 24 hours;\r\n    uint public countOfInvestors = 0;\r\n    uint public totalRaised;\r\n    uint public rounds_counter;\r\n    uint public projectPercent = 10;\r\n    uint public totalWithdrawed = 0;\r\n    bool public started;\r\n\r\n    address public ownerAddress;\r\n\r\n    event Invest(uint indexed round, address indexed investor, uint256 amount);\r\n    event Withdraw(uint indexed round, address indexed investor, uint256 amount);\r\n\r\n    modifier userExist() {\r\n        require(balance[rounds_counter][msg.sender] > 0, \"Address not found\");\r\n        _;\r\n    }\r\n\r\n    modifier checkTime() {\r\n        require(now >= time[rounds_counter][msg.sender].add(stepTime), \"Too fast payout request\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStarted() {\r\n        require(started == true);\r\n        _;\r\n    }\r\n\r\n    // @dev This function is processing all the logic with withdraw\r\n    function collectPercent() userExist checkTime internal {\r\n\r\n        // Check that user already has received 200%\r\n        // In this case - remove him from the db\r\n        if ((balance[rounds_counter][msg.sender].mul(2)) <= allPercentWithdraw[rounds_counter][msg.sender]) {\r\n            balance[rounds_counter][msg.sender] = 0;\r\n            time[rounds_counter][msg.sender] = 0;\r\n            percentWithdraw[rounds_counter][msg.sender] = 0;\r\n        } else {\r\n            // User has not reached the limit yet\r\n            // Process the withdraw and update the stats\r\n\r\n            uint payout = payoutAmount();  // Get the amount of weis to send\r\n\r\n            percentWithdraw[rounds_counter][msg.sender] = percentWithdraw[rounds_counter][msg.sender].add(payout);\r\n            allPercentWithdraw[rounds_counter][msg.sender] = allPercentWithdraw[rounds_counter][msg.sender].add(payout);\r\n\r\n            // Send Ethers\r\n            msg.sender.transfer(payout);\r\n            totalWithdrawed = totalWithdrawed.add(payout);\r\n\r\n            emit Withdraw(rounds_counter, msg.sender, payout);\r\n        }\r\n\r\n    }\r\n\r\n    // @dev The withdraw percentage depends on two things:\r\n    // @dev first one is total amount of Ethers on the contract balance\r\n    // @dev and second one is the deposit size of current investor\r\n    function percentRate() public view returns(uint) {\r\n\r\n        uint contractBalance = address(this).balance;\r\n        uint user_balance = balance[rounds_counter][msg.sender];\r\n        uint contract_depending_percent = 0;\r\n\r\n        // Check the contract balance and add some additional percents\r\n        // Because of the Solidity troubles with floats\r\n        // 20 means 2%, 15 means 1.5%, 10 means 1%\r\n        if (contractBalance >= 10000 ether) {\r\n            contract_depending_percent = 20;\r\n        } else if (contractBalance >= 5000 ether) {\r\n            contract_depending_percent = 15;\r\n        } else if (contractBalance >= 1000 ether) {\r\n            contract_depending_percent = 10;\r\n        }\r\n\r\n        // Check the investor's balance\r\n        if (user_balance < 9999999999999999999) {          // < 9.999999 Ethers\r\n          return (30 + contract_depending_percent);\r\n        } else if (user_balance < 29999999999999999999) {  // < 29.999999 Ethers\r\n          return (35 + contract_depending_percent);\r\n        } else if (user_balance < 49999999999999999999) {  // < 49.999999 Ethers\r\n          return (40 + contract_depending_percent);\r\n        } else {                                        // <= 100 Ethers\r\n          return (45 + contract_depending_percent);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // @dev This function returns the amount in weis for withdraw\r\n    function payoutAmount() public view returns(uint256) {\r\n        // Minimum percent is 3%, maximum percent is 6.5% per 24 hours\r\n        uint256 percent = percentRate();\r\n\r\n        uint256 different = now.sub(time[rounds_counter][msg.sender]).div(stepTime);\r\n\r\n        // 1000 instead of 100, because in case of 3%\r\n        // 'percent' equals to 30 and so on\r\n        uint256 rate = balance[rounds_counter][msg.sender].mul(percent).div(1000);\r\n\r\n        uint256 withdrawalAmount = rate.mul(different).sub(percentWithdraw[rounds_counter][msg.sender]);\r\n\r\n        return withdrawalAmount;\r\n    }\r\n\r\n    // @dev This function is called each time when user sends Ethers\r\n    function deposit() private {\r\n        if (msg.value > 0) { // User wants to invest\r\n            require(balance[rounds_counter][msg.sender] == 0);  // User can invest only once\r\n\r\n            if (balance[rounds_counter][msg.sender] == 0) {  // New investor\r\n              countOfInvestors = countOfInvestors.add(1);\r\n              investorsByRound[rounds_counter] = investorsByRound[rounds_counter].add(1);\r\n            }\r\n\r\n            // If already has some investments and the time gap is correct\r\n            // make a withdraw\r\n            if (\r\n              balance[rounds_counter][msg.sender] > 0 &&\r\n              now > time[rounds_counter][msg.sender].add(stepTime)\r\n            ) {\r\n                collectPercent();\r\n                percentWithdraw[rounds_counter][msg.sender] = 0;\r\n            }\r\n\r\n            balance[rounds_counter][msg.sender] = balance[rounds_counter][msg.sender].add(msg.value);\r\n            time[rounds_counter][msg.sender] = now;\r\n\r\n            // Send fee to the owner\r\n            ownerAddress.transfer(msg.value.mul(projectPercent).div(100));\r\n            totalRaised = totalRaised.add(msg.value);\r\n\r\n            emit Invest(rounds_counter, msg.sender, msg.value);\r\n        } else {  // User wants to withdraw his profit\r\n            collectPercent();\r\n        }\r\n    }\r\n\r\n    // @dev This function is called when user sends Ethers\r\n    function() external payable onlyStarted {\r\n        // Maximum deposit per address - 100 Ethers\r\n        require(balance[rounds_counter][msg.sender].add(msg.value) <= 100 ether, \"More than 100 ethers\");\r\n\r\n        // Check that contract has less than 10%\r\n        // of total collected investments\r\n        if (address(this).balance < totalRaised.div(100).mul(10)) {\r\n            startNewRound();\r\n        }\r\n\r\n        deposit();\r\n    }\r\n\r\n    // @dev In the case of new round - reset all the stats\r\n    // @dev and start new round with the rest of the balance on the contract\r\n    function startNewRound() internal {\r\n        rounds_counter = rounds_counter.add(1);\r\n        totalRaised = address(this).balance;\r\n    }\r\n\r\n    // @dev Enable the game\r\n    function start() public {\r\n        require(ownerAddress == msg.sender);\r\n        started = true;\r\n    }\r\n\r\n    constructor() public {\r\n        ownerAddress = msg.sender;\r\n        started = false;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"percentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"projectPercent\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"payoutAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investorsByRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"percentRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWithdrawed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rounds_counter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allPercentWithdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"countOfInvestors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stepTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"}]", "ContractName": "Main", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://97da9ba47836922c5c6dd3a0c8cbd578746ea2b929b66c30a710964e76a2c184"}