{"SourceCode": "// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title ERC20Detailed token\r\n * @dev The decimals are only for visualization purposes.\r\n * All the operations are done using the smallest and indivisible token unit,\r\n * just as on Ethereum all the operations are done in wei.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\ncontract PauserRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(msg.sender);\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(msg.sender);\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is PauserRole {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IModerator.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\ninterface IModerator {\r\n    function verifyIssue(address _tokenHolder, uint256 _value, bytes calldata _data) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyTransfer(address _from, address _to, uint256 _amount, bytes calldata _data) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyTransferFrom(address _from, address _to, address _forwarder, uint256 _amount, bytes calldata _data) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyRedeem(address _sender, uint256 _amount, bytes calldata _data) external view \r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyRedeemFrom(address _sender, address _tokenHolder, uint256 _amount, bytes calldata _data) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);        \r\n\r\n    function verifyControllerTransfer(address _controller, address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n\r\n    function verifyControllerRedeem(address _controller, address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external view\r\n        returns (bool allowed, byte statusCode, bytes32 applicationCode);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary Address {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IRewardsUpdatable.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\ninterface IRewardsUpdatable {\r\n    event NotifierUpdated(address implementation);\r\n\r\n    function updateOnTransfer(address from, address to, uint amount) external returns (bool);\r\n    function updateOnBurn(address account, uint amount) external returns (bool);\r\n    function setRewardsNotifier(address notifier) external;\r\n}\r\n\r\n// File: contracts/interfaces/IRewardable.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\ninterface IRewardable {\r\n    event RewardsUpdated(address implementation);\r\n\r\n    function setRewards(IRewardsUpdatable rewards) external;\r\n}\r\n\r\n// File: contracts/rewards/Rewardable.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice A contract with an associated Rewards contract to calculate rewards during token movements.\r\n */\r\ncontract Rewardable is IRewardable, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    IRewardsUpdatable public rewards; // The rewards contract\r\n\r\n    event RewardsUpdated(address implementation);\r\n\r\n    /**\r\n    * @notice Calculates and updates _dampings[address] based on the token movement.\r\n    * @notice This modifier is applied to mint(), transfer(), and transferFrom().\r\n    * @param _from Address of sender\r\n    * @param _to Address of recipient\r\n    * @param _value Amount of tokens\r\n    */\r\n    modifier updatesRewardsOnTransfer(address _from, address _to, uint _value) {\r\n        _;\r\n        require(rewards.updateOnTransfer(_from, _to, _value), \"Rewards updateOnTransfer failed.\"); // [External contract call]\r\n    }\r\n\r\n    /**\r\n    * @notice Calculates and updates _dampings[address] based on the token burning.\r\n    * @notice This modifier is applied to burn()\r\n    * @param _account Address of owner\r\n    * @param _value Amount of tokens\r\n    */\r\n    modifier updatesRewardsOnBurn(address _account, uint _value) {\r\n        _;\r\n        require(rewards.updateOnBurn(_account, _value), \"Rewards updateOnBurn failed.\"); // [External contract call]\r\n    }\r\n\r\n    /**\r\n    * @notice Links a Rewards contract to this contract.\r\n    * @param _rewards Rewards contract address.\r\n    */\r\n    function setRewards(IRewardsUpdatable _rewards) external onlyOwner {\r\n        require(address(_rewards) != address(0), \"Rewards address must not be a zero address.\");\r\n        require(Address.isContract(address(_rewards)), \"Address must point to a contract.\");\r\n        rewards = _rewards;\r\n        emit RewardsUpdated(address(_rewards));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://eips.ethereum.org/EIPS/eip-20\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev Total number of tokens in existence\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param owner The address to query the balance of.\r\n     * @return A uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token to a specified address\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer token for a specified addresses\r\n     * @param from The address to transfer from.\r\n     * @param to The address to transfer to.\r\n     * @param value The amount to be transferred.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve an address to spend another addresses' tokens.\r\n     * @param owner The address that owns the tokens.\r\n     * @param spender The address that will spend the tokens.\r\n     * @param value The number of tokens that can be spent.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(spender != address(0));\r\n        require(owner != address(0));\r\n\r\n        _allowed[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender's allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20Redeemable.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\ncontract ERC20Redeemable is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalRedeemed;\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account. Overriden to track totalRedeemed.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        totalRedeemed = totalRedeemed.add(value); // Keep track of total for Rewards calculation\r\n        super._burn(account, value);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC1594.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n/// @title IERC1594 Security Token Standard\r\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\r\ninterface IERC1594 {\r\n    // Issuance / Redemption Events\r\n    event Issued(address indexed _operator, address indexed _to, uint256 _value, bytes _data);\r\n    event Redeemed(address indexed _operator, address indexed _from, uint256 _value, bytes _data);\r\n\r\n    // Transfers\r\n    function transferWithData(address _to, uint256 _value, bytes calldata _data) external;\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes calldata _data) external;\r\n\r\n    // Token Redemption\r\n    function redeem(uint256 _value, bytes calldata _data) external;\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n\r\n    // Token Issuance\r\n    function issue(address _tokenHolder, uint256 _value, bytes calldata _data) external;\r\n    function isIssuable() external view returns (bool);\r\n\r\n    // Transfer Validity\r\n    function canTransfer(address _to, uint256 _value, bytes calldata _data) external view returns (bool, byte, bytes32);\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes calldata _data) external view returns (bool, byte, bytes32);\r\n}\r\n\r\n// File: contracts/interfaces/IHasIssuership.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\ninterface IHasIssuership {\r\n    event IssuershipTransferred(address indexed from, address indexed to);\r\n\r\n    function transferIssuership(address newIssuer) external;\r\n}\r\n\r\n// File: contracts/roles/IssuerRole.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n// @notice Issuers are capable of issuing new TENX tokens from the TENXToken contract.\r\ncontract IssuerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event IssuerAdded(address indexed account);\r\n    event IssuerRemoved(address indexed account);\r\n\r\n    Roles.Role internal _issuers;\r\n\r\n    modifier onlyIssuer() {\r\n        require(isIssuer(msg.sender), \"Only Issuers can execute this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor() internal {\r\n        _addIssuer(msg.sender);\r\n    }\r\n\r\n    function isIssuer(address account) public view returns (bool) {\r\n        return _issuers.has(account);\r\n    }\r\n\r\n    function addIssuer(address account) public onlyIssuer {\r\n        _addIssuer(account);\r\n    }\r\n\r\n    function renounceIssuer() public {\r\n        _removeIssuer(msg.sender);\r\n    }\r\n\r\n    function _addIssuer(address account) internal {\r\n        _issuers.add(account);\r\n        emit IssuerAdded(account);\r\n    }\r\n\r\n    function _removeIssuer(address account) internal {\r\n        _issuers.remove(account);\r\n        emit IssuerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/roles/ControllerRole.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n// @notice Controllers are capable of performing ERC1644 forced transfers.\r\ncontract ControllerRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event ControllerAdded(address indexed account);\r\n    event ControllerRemoved(address indexed account);\r\n\r\n    Roles.Role internal _controllers;\r\n\r\n    modifier onlyController() {\r\n        require(isController(msg.sender), \"Only Controllers can execute this function.\");\r\n        _;\r\n    }\r\n\r\n    constructor() internal {\r\n        _addController(msg.sender);\r\n    }\r\n\r\n    function isController(address account) public view returns (bool) {\r\n        return _controllers.has(account);\r\n    }\r\n\r\n    function addController(address account) public onlyController {\r\n        _addController(account);\r\n    }\r\n\r\n    function renounceController() public {\r\n        _removeController(msg.sender);\r\n    }\r\n\r\n    function _addController(address account) internal {\r\n        _controllers.add(account);\r\n        emit ControllerAdded(account);\r\n    }    \r\n\r\n    function _removeController(address account) internal {\r\n        _controllers.remove(account);\r\n        emit ControllerRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/compliance/Moderated.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract Moderated is ControllerRole {\r\n    IModerator public moderator; // External moderator contract\r\n\r\n    event ModeratorUpdated(address moderator);\r\n\r\n    constructor(IModerator _moderator) public {\r\n        moderator = _moderator;\r\n    }\r\n\r\n    /**\r\n    * @notice Links a Moderator contract to this contract.\r\n    * @param _moderator Moderator contract address.\r\n    */\r\n    function setModerator(IModerator _moderator) external onlyController {\r\n        require(address(moderator) != address(0), \"Moderator address must not be a zero address.\");\r\n        require(Address.isContract(address(_moderator)), \"Address must point to a contract.\");\r\n        moderator = _moderator;\r\n        emit ModeratorUpdated(address(_moderator));\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC1594.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC1594 is IERC1594, IHasIssuership, Moderated, ERC20Redeemable, IssuerRole {\r\n    bool public isIssuable = true;\r\n\r\n    event Issued(address indexed operator, address indexed to, uint256 value, bytes data);\r\n    event Redeemed(address indexed operator, address indexed from, uint256 value, bytes data);\r\n    event IssuershipTransferred(address indexed from, address indexed to);\r\n    event IssuanceFinished();\r\n\r\n    /**\r\n    * @notice Modifier to check token issuance status\r\n    */\r\n    modifier whenIssuable() {\r\n        require(isIssuable, \"Issuance period has ended.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer the token's singleton Issuer role to another address.\r\n     */\r\n    function transferIssuership(address _newIssuer) public whenIssuable onlyIssuer {\r\n        require(_newIssuer != address(0), \"New Issuer cannot be zero address.\");\r\n        require(msg.sender != _newIssuer, \"New Issuer cannot have the same address as the old issuer.\");\r\n        _addIssuer(_newIssuer);\r\n        _removeIssuer(msg.sender);\r\n        emit IssuershipTransferred(msg.sender, _newIssuer);\r\n    }\r\n\r\n    /**\r\n     * @notice End token issuance period permanently.\r\n     */\r\n    function finishIssuance() public whenIssuable onlyIssuer {\r\n        isIssuable = false;\r\n        emit IssuanceFinished();\r\n    }\r\n\r\n    function issue(address _tokenHolder, uint256 _value, bytes memory _data) public whenIssuable onlyIssuer {\r\n        bool allowed;\r\n        (allowed, , ) = moderator.verifyIssue(_tokenHolder, _value, _data);\r\n        require(allowed, \"Issue is not allowed.\");\r\n        _mint(_tokenHolder, _value);\r\n        emit Issued(msg.sender, _tokenHolder, _value, _data);\r\n    }\r\n\r\n    function redeem(uint256 _value, bytes memory _data) public {\r\n        bool allowed;\r\n        (allowed, , ) = moderator.verifyRedeem(msg.sender, _value, _data);\r\n        require(allowed, \"Redeem is not allowed.\");\r\n\r\n        _burn(msg.sender, _value);\r\n        emit Redeemed(msg.sender, msg.sender, _value, _data);\r\n    }\r\n\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes memory _data) public {\r\n        bool allowed;\r\n        (allowed, , ) = moderator.verifyRedeemFrom(msg.sender, _tokenHolder, _value, _data);\r\n        require(allowed, \"RedeemFrom is not allowed.\");\r\n\r\n        _burnFrom(_tokenHolder, _value);\r\n        emit Redeemed(msg.sender, _tokenHolder, _value, _data);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        bool allowed;\r\n        (allowed, , ) = canTransfer(_to, _value, \"\");\r\n        require(allowed, \"Transfer is not allowed.\");\r\n\r\n        success = super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferWithData(address _to, uint256 _value, bytes memory _data) public {\r\n        bool allowed;\r\n        (allowed, , ) = canTransfer(_to, _value, _data);\r\n        require(allowed, \"Transfer is not allowed.\");\r\n\r\n        require(super.transfer(_to, _value), \"Transfer failed.\");\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        bool allowed;\r\n        (allowed, , ) = canTransferFrom(_from, _to, _value, \"\");\r\n        require(allowed, \"TransferFrom is not allowed.\");\r\n\r\n        success = super.transferFrom(_from, _to, _value);\r\n    }    \r\n\r\n    function transferFromWithData(address _from, address _to, uint256 _value, bytes memory _data) public {\r\n        bool allowed;\r\n        (allowed, , ) = canTransferFrom(_from, _to, _value, _data);\r\n        require(allowed, \"TransferFrom is not allowed.\");\r\n\r\n        require(super.transferFrom(_from, _to, _value), \"TransferFrom failed.\");\r\n    }\r\n\r\n    function canTransfer(address _to, uint256 _value, bytes memory _data) public view \r\n        returns (bool success, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        return moderator.verifyTransfer(msg.sender, _to, _value, _data);\r\n    }\r\n\r\n    function canTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public view \r\n        returns (bool success, byte statusCode, bytes32 applicationCode) \r\n    {\r\n        return moderator.verifyTransferFrom(_from, _to, msg.sender, _value, _data);\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC1644.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n/// @title IERC1644 Controller Token Operation (part of the ERC1400 Security Token Standards)\r\n/// @dev See https://github.com/SecurityTokenStandard/EIP-Spec\r\ninterface IERC1644 {\r\n    // Controller Events\r\n    event ControllerTransfer(\r\n        address _controller,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    event ControllerRedemption(\r\n        address _controller,\r\n        address indexed _tokenHolder,\r\n        uint256 _value,\r\n        bytes _data,\r\n        bytes _operatorData\r\n    );\r\n\r\n    // Controller Operation\r\n    function controllerTransfer(address _from, address _to, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\r\n    function controllerRedeem(address _tokenHolder, uint256 _value, bytes calldata _data, bytes calldata _operatorData) external;\r\n    function isControllable() external view returns (bool);\r\n}\r\n\r\n// File: contracts/token/ERC1644.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC1644 is IERC1644, Moderated, ERC20Redeemable {\r\n    event ControllerTransfer(\r\n        address controller,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event ControllerRedemption(\r\n        address controller,\r\n        address indexed tokenHolder,\r\n        uint256 value,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    function controllerTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        bytes memory _operatorData\r\n    ) public onlyController {\r\n        bool allowed;\r\n        (allowed, , ) = moderator.verifyControllerTransfer(\r\n            msg.sender,\r\n            _from,\r\n            _to,\r\n            _value,\r\n            _data,\r\n            _operatorData\r\n        );\r\n        require(allowed, \"controllerTransfer is not allowed.\");\r\n        require(_value <= balanceOf(_from), \"Insufficient balance.\");\r\n        _transfer(_from, _to, _value);\r\n        emit ControllerTransfer(msg.sender, _from, _to, _value, _data, _operatorData);\r\n    }\r\n\r\n    function controllerRedeem(\r\n        address _tokenHolder,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        bytes memory _operatorData\r\n    ) public onlyController {\r\n        bool allowed;\r\n        (allowed, , ) = moderator.verifyControllerRedeem(\r\n            msg.sender,\r\n            _tokenHolder,\r\n            _value,\r\n            _data,\r\n            _operatorData\r\n        );\r\n        require(allowed, \"controllerRedeem is not allowed.\");\r\n        require(_value <= balanceOf(_tokenHolder), \"Insufficient balance.\");\r\n        _burn(_tokenHolder, _value);\r\n        emit ControllerRedemption(msg.sender, _tokenHolder, _value, _data, _operatorData);\r\n    }\r\n\r\n    function isControllable() public view returns (bool) {\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC1400.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\ncontract ERC1400 is ERC1594, ERC1644 {\r\n    constructor(IModerator _moderator) public Moderated(_moderator) {}\r\n}\r\n\r\n// File: contracts/token/ERC20Capped.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Capped ERC20 token\r\n * @dev ERC20 token with a token cap on mints, to ensure a 1:1 mint ratio of TENX to PAY.\r\n */\r\ncontract ERC20Capped is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint public cap;\r\n    uint public totalMinted;\r\n\r\n    constructor (uint _cap) public {\r\n        require(_cap > 0, \"Cap must be above zero.\");\r\n        cap = _cap;\r\n        totalMinted = 0;\r\n    }\r\n\r\n    /**\r\n    * @notice Modifier to check that an operation does not exceed the token cap.\r\n    * @param _newValue Token mint amount\r\n    */\r\n    modifier capped(uint _newValue) {\r\n        require(totalMinted.add(_newValue) <= cap, \"Cannot mint beyond cap.\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Cannot _mint beyond cap.\r\n    */\r\n    function _mint(address _account, uint _value) internal capped(_value) {\r\n        totalMinted = totalMinted.add(_value);\r\n        super._mint(_account, _value);\r\n    }\r\n}\r\n\r\n// File: contracts/token/RewardableToken.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice RewardableToken\r\n * @dev ERC1400 token with a token cap and amortized rewards calculations. It's pausable for contract migrations.\r\n */\r\ncontract RewardableToken is ERC1400, ERC20Capped, Rewardable, Pausable {\r\n    constructor(IModerator _moderator, uint _cap) public ERC1400(_moderator) ERC20Capped(_cap) {}\r\n\r\n    // ERC20\r\n    function transfer(address _to, uint _value) \r\n        public \r\n        whenNotPaused\r\n        updatesRewardsOnTransfer(msg.sender, _to, _value) returns (bool success) \r\n    {\r\n        success = super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) \r\n        public \r\n        whenNotPaused\r\n        updatesRewardsOnTransfer(_from, _to, _value) returns (bool success) \r\n    {\r\n        success = super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    // ERC1400: ERC1594\r\n    function issue(address _tokenHolder, uint256 _value, bytes memory _data) \r\n        public \r\n        whenNotPaused\r\n        // No damping updates, uses unallocated rewards\r\n    {\r\n        super.issue(_tokenHolder, _value, _data);\r\n    }\r\n\r\n    function redeem(uint256 _value, bytes memory _data) \r\n        public \r\n        whenNotPaused\r\n        updatesRewardsOnBurn(msg.sender, _value)\r\n    {\r\n        super.redeem(_value, _data);\r\n    }\r\n\r\n    function redeemFrom(address _tokenHolder, uint256 _value, bytes memory _data) \r\n        public\r\n        whenNotPaused\r\n        updatesRewardsOnBurn(_tokenHolder, _value)\r\n    {\r\n        super.redeemFrom(_tokenHolder, _value, _data);\r\n    }\r\n\r\n    // ERC1400: ERC1644\r\n    function controllerTransfer(address _from, address _to, uint256 _value, bytes memory _data, bytes memory _operatorData) \r\n        public\r\n        updatesRewardsOnTransfer(_from, _to, _value) \r\n    {\r\n        super.controllerTransfer(_from, _to, _value, _data, _operatorData);\r\n    }\r\n\r\n    function controllerRedeem(address _tokenHolder, uint256 _value, bytes memory _data, bytes memory _operatorData) \r\n        public\r\n        updatesRewardsOnBurn(_tokenHolder, _value)\r\n    {\r\n        super.controllerRedeem(_tokenHolder, _value, _data, _operatorData);\r\n    }\r\n}\r\n\r\n// File: contracts/token/TENXToken.sol\r\n\r\npragma solidity 0.5.4;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice TENXToken\r\n */\r\ncontract TENXToken is RewardableToken, ERC20Detailed(\"TenX Token\", \"TENX\", 18) {\r\n    constructor(IModerator _moderator, uint _cap) public RewardableToken(_moderator, _cap) {}\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"canTransferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"},{\"name\":\"statusCode\",\"type\":\"bytes1\"},{\"name\":\"applicationCode\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"controllerRedeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isIssuable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"moderator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isControllable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_moderator\",\"type\":\"address\"}],\"name\":\"setModerator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIssuer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceIssuer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"redeemFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newIssuer\",\"type\":\"address\"}],\"name\":\"transferIssuership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenHolder\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishIssuance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferFromWithData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"_operatorData\",\"type\":\"bytes\"}],\"name\":\"controllerTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRedeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_moderator\",\"type\":\"address\"},{\"name\":\"_cap\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"ControllerTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenHolder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"ControllerRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"IssuershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IssuanceFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IssuerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"moderator\",\"type\":\"address\"}],\"name\":\"ModeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"}]", "ContractName": "TENXToken", "CompilerVersion": "v0.5.4+commit.9549d8ff", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d41f5a9bf9ff2aed4497f39bb3ccb5ef58346aff000000000000000000000000000000000000000000a9c0a7f258183071078b8f", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://47019c3539fcedb634408cd6c43e8a5e4e651bf313ec9ff2ef8acd2213417f0d"}