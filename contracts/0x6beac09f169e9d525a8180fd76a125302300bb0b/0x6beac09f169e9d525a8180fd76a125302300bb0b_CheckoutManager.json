{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CheckoutManager.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2021-03-30\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract CheckoutManager {\\r\\n\\r\\n    address public admin;\\r\\n    address payable public vaultWallet;\\r\\n    \\r\\n    event BuyItems(string orderId, string buyerId, address buyer, string[] itemIds, uint256[] amounts);\\r\\n    event BuyAuctionItem(string orderId, string buyerId, address buyer, string editionId, string itemId, address payoutWallet);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Not admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address payable _vaultWallet) {\\r\\n        require(_vaultWallet != address(0), \\\"Invalid vault address\\\");\\r\\n        admin = msg.sender;\\r\\n        vaultWallet = _vaultWallet;\\r\\n    }\\r\\n\\r\\n    function buyItems(string calldata orderId, string calldata buyerId, string[] calldata itemIds, uint256[] calldata amounts) external payable {\\r\\n        require(msg.value > 0, \\\"Wrong ETH value!\\\");\\r\\n        require(itemIds.length > 0, \\\"No items\\\");\\r\\n        require(itemIds.length == amounts.length, \\\"Items and amounts length should be the same\\\");\\r\\n\\r\\n        vaultWallet.transfer(msg.value);\\r\\n\\r\\n        emit BuyItems(orderId, buyerId, msg.sender, itemIds, amounts);\\r\\n    }\\r\\n\\r\\n    function buyAuctionItem(string calldata orderId, string calldata buyerId, string calldata editionId, string calldata itemId, address payable payoutWallet) external payable {\\r\\n        require(msg.value > 0, \\\"Wrong ETH value!\\\");\\r\\n\\r\\n        uint256 payout = msg.value * 9500 / 10000;\\r\\n        uint256 vault = msg.value - payout;\\r\\n\\r\\n        payoutWallet.transfer(payout);\\r\\n        vaultWallet.transfer(vault);\\r\\n\\r\\n        emit BuyAuctionItem(orderId, buyerId, msg.sender, editionId, itemId, payoutWallet);\\r\\n    }\\r\\n\\r\\n    function setAdmin(address _newAdmin) external onlyAdmin {\\r\\n        require(_newAdmin != address(0), \\\"Invalid address\\\");\\r\\n        \\r\\n        admin = _newAdmin;\\r\\n    }\\r\\n\\r\\n    function setVaultAddress(address payable _vaultWallet) public onlyAdmin {\\r\\n        require(_vaultWallet != address(0), \\\"Invalid vault address\\\");\\r\\n        \\r\\n        vaultWallet = _vaultWallet;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vaultWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"editionId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"BuyAuctionItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"itemIds\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"BuyItems\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"editionId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"itemId\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"buyAuctionItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"orderId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"itemIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"buyItems\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_vaultWallet\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CheckoutManager", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e8a0518eee8a9d41b31b7e6273acbb00b390040f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}