{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract ProcessDepositVerifier {\r\n    \r\n    struct PublicKey {\r\n        bytes32 key;\r\n    }\r\n\r\n    struct EncryptedBalance {\r\n        bytes balance;\r\n    }\r\n\r\n    struct DepositProof {\r\n        bytes proofData;\r\n    }\r\n\r\n    function verifyDeposit(\r\n        PublicKey memory recipientPublicKey,\r\n        EncryptedBalance memory previousBalance,\r\n        EncryptedBalance memory newBalance,\r\n        uint256 depositAmount,\r\n        DepositProof memory proof\r\n    ) public pure returns (bool) {\r\n        return _performProofVerification(recipientPublicKey, previousBalance, newBalance, depositAmount, proof) &&\r\n               _checkAdditionalProofRequirements(proof);\r\n    }\r\n\r\n    function _performProofVerification(\r\n        PublicKey memory recipientPublicKey,\r\n        EncryptedBalance memory previousBalance,\r\n        EncryptedBalance memory newBalance,\r\n        uint256 depositAmount,\r\n        DepositProof memory proof\r\n    ) private pure returns (bool) {\r\n        return proof.proofData.length > 0 && recipientPublicKey.key != 0 && depositAmount != 0 &&\r\n               _balanceHashesMatch(previousBalance, newBalance);\r\n    }\r\n\r\n    function _checkAdditionalProofRequirements(DepositProof memory proof) private pure returns (bool) {\r\n        return proof.proofData[0] != 0;\r\n    }\r\n\r\n    function _balanceHashesMatch(EncryptedBalance memory previousBalance, EncryptedBalance memory newBalance) private pure returns (bool) {\r\n        return keccak256(previousBalance.balance) != keccak256(newBalance.balance);\r\n    }\r\n\r\n    function generateProofData(uint256 depositAmount, PublicKey memory recipientPublicKey) public pure returns (bytes memory) {\r\n        return abi.encodePacked(depositAmount, recipientPublicKey.key, _securityConstant());\r\n    }\r\n    \r\n    function computePreviousBalanceHash(EncryptedBalance memory previousBalance) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(previousBalance.balance, _securityConstant()));\r\n    }\r\n    \r\n    function computeNewBalanceHash(EncryptedBalance memory newBalance, uint256 depositAmount) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(newBalance.balance, depositAmount, _securityConstant()));\r\n    }\r\n    \r\n    function _securityConstant() private pure returns (bytes32) {\r\n        return bytes32(0x783c12ab432b8e7d123f4323c1239f84f2137ab9b123d789ab123efc12345678);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessDepositVerifier.EncryptedBalance\",\"name\":\"newBalance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"computeNewBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessDepositVerifier.EncryptedBalance\",\"name\":\"previousBalance\",\"type\":\"tuple\"}],\"name\":\"computePreviousBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProcessDepositVerifier.PublicKey\",\"name\":\"recipientPublicKey\",\"type\":\"tuple\"}],\"name\":\"generateProofData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProcessDepositVerifier.PublicKey\",\"name\":\"recipientPublicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessDepositVerifier.EncryptedBalance\",\"name\":\"previousBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessDepositVerifier.EncryptedBalance\",\"name\":\"newBalance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"internalType\":\"struct ProcessDepositVerifier.DepositProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "ProcessDepositVerifier", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://99e1efd8580ef2c9f49e61f99c09524e0aab2698dcde997da929568acd6f4953"}