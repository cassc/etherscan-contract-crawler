{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/AccountFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { PaymentStorage } from \\\"../storage/PaymentStorage.sol\\\";\\nimport \\\"../libraries/Structs.sol\\\";\\n\\ncontract AccountFacet {\\n\\n    error AddressIsZero();\\n    error InvalidAmount();\\n    error InvalidToken();\\n    error InvalidServiceID();\\n    error UnauthService();\\n    error ServiceTerminated();\\n    error InsufficientBalance();\\n\\n    event DepositBalance(address indexed caller, address indexed token, uint amount);\\n    event DepositSecurity(address indexed caller, address token, uint amount, bytes32 id);\\n    event WithdrawBalance(address indexed caller, address indexed token, address indexed to, uint amount);\\n    event WithdrawSecurity(address indexed caller, address token, address indexed to, uint amount, bytes32 id);\\n\\n    function getTokenBalance(address _user, address _token) external view returns (uint) {\\n        return PaymentStorage.layout().userAccounts[_user].balances[_token];\\n    }\\n\\n    function getTokensBalance(address _user, address[] calldata _tokens) external view returns (uint[] memory) {\\n        Account storage account = PaymentStorage.layout().userAccounts[_user];\\n        uint len = _tokens.length;\\n        uint[] memory tokenBalance = new uint[](len);\\n        for (uint i; i < len; i++) {\\n            tokenBalance[i] = account.balances[_tokens[i]];\\n        }\\n        \\n        return tokenBalance;\\n    }\\n\\n    function getUserFeeDiscount(address _user) external view returns (uint) {\\n        return PaymentStorage.layout().userAccounts[_user].feeDiscount;\\n    }\\n\\n    function getUserAccount(address _user, address[] calldata _tokens) external view returns (uint, uint[] memory) {\\n        Account storage account = PaymentStorage.layout().userAccounts[_user];\\n        uint len = _tokens.length;\\n        uint[] memory tokenBalance = new uint[](len);\\n        for (uint i; i < len; i++) {\\n            tokenBalance[i] = account.balances[_tokens[i]];\\n        }\\n        \\n        return (\\n            account.feeDiscount,\\n            tokenBalance\\n        );\\n    }\\n\\n    function getService(bytes32 _id) external view returns (Service memory) {\\n        return PaymentStorage.layout().subscription[_id];\\n    }\\n\\n    function getWithdrawSecurityQuota(bytes32 _id) external view returns (uint) {\\n        return _withdrawSecurityQuota(_id);\\n    }\\n\\n    function isTerminated(bytes32 _id) external view returns (bool) {\\n        return PaymentStorage.layout().subscription[_id].terminated;\\n    }\\n\\n    function depositBalance(address _token, uint _amount) external {\\n        if (_token == address(0)) revert AddressIsZero();\\n        if (_amount == 0) revert InvalidAmount();\\n\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        if (!layout.registeredToken[_token]) revert InvalidToken();\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n        // Overflow not possible: the sum of all balances is capped by usdt totalSupply, and the sum is preserved by\\n        unchecked {\\n            layout.userAccounts[msg.sender].balances[_token] += _amount;\\n        }\\n\\n        emit DepositBalance(msg.sender, _token, _amount);\\n    }\\n\\n    function depositSecurity(bytes32 _id, uint _amount) external {\\n        if (_id == bytes32(0)) revert InvalidServiceID();\\n        if (_amount == 0) revert InvalidAmount();\\n\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        Service storage service = layout.subscription[_id];\\n        if (service.terminated) revert ServiceTerminated();\\n\\n        IERC20(service.token).transferFrom(msg.sender, address(this), _amount);\\n        service.security += _amount;\\n\\n        emit DepositSecurity(msg.sender, service.token, _amount, _id);\\n    }\\n\\n    function withdrawBalance(address _token, address _to, uint _amount) external {\\n        if (_token == address(0)) revert AddressIsZero();\\n        if (_to == address(0)) revert AddressIsZero();\\n        if (_amount == 0) revert InvalidAmount();\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        Account storage account = layout.userAccounts[msg.sender];\\n        if (account.balances[_token] < _amount) revert InsufficientBalance();\\n\\n        IERC20(_token).transfer(_to, _amount);\\n        unchecked {\\n            account.balances[_token] -= _amount;\\n        }\\n\\n        emit WithdrawBalance(msg.sender, _token, _to, _amount);\\n    }\\n\\n    function withdrawSecurity(bytes32 _id, address _to, uint _amount) external {\\n        if (_id == bytes32(0)) revert InvalidServiceID();\\n        if (_to == address(0)) revert AddressIsZero();\\n        if (_amount == 0) revert InvalidAmount();\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        Service storage service = layout.subscription[_id];\\n        if (service.buyer != msg.sender) revert UnauthService();\\n        if (service.terminated) revert ServiceTerminated();\\n        \\n        uint quota = _withdrawSecurityQuota(_id);\\n        if (quota < _amount) revert InsufficientBalance();\\n        IERC20(service.token).transfer(_to, _amount);\\n\\n        unchecked {\\n            service.security -= _amount;\\n        }\\n\\n        emit WithdrawSecurity(msg.sender, service.token, _to, _amount, _id);\\n    }\\n\\n    function _withdrawSecurityQuota(bytes32 _id) internal view returns (uint) {\\n        Service memory service = PaymentStorage.layout().subscription[_id];\\n        unchecked {\\n            uint security = service.security;\\n            uint double = service.lastConsume * 2;\\n            return double < security ? security - double : 0;\\n        }\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// user account\\nstruct Account {\\n    uint feeDiscount;\\n    mapping(address => uint) balances;\\n}\\n\\nstruct Service {\\n    bool terminated;\\n    address token;\\n    address buyer;\\n    address seller;\\n    uint security;\\n    uint lastConsume;\\n}\"\r\n    },\r\n    \"contracts/storage/PaymentStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"../libraries/Structs.sol\\\";\\n\\nlibrary PaymentStorage {\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('contracts.storage.Payment');\\n\\n    struct Layout {\\n        address template;\\n        uint baseFee;\\n        mapping(address => bool) registeredToken;\\n        mapping(address => uint) protocolIncome;\\n        mapping(address => Account) userAccounts;\\n        mapping(bytes32 => Service) subscription;\\n\\n        uint[60] _gaps;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function calculateServiceFee(address _user, uint _amount) internal view returns (uint) {\\n        Layout storage data = layout();\\n        uint baseFee = data.baseFee;\\n        if (baseFee == 0) return 0;\\n        unchecked {\\n            uint discount = data.userAccounts[_user].feeDiscount;\\n\\n            if (discount == 0) {\\n                return _amount * baseFee / 100_000;\\n            }\\n\\n            return _amount * baseFee * discount / 10_000_000;\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidServiceID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ServiceTerminated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthService\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DepositSecurity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"WithdrawSecurity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositSecurity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getService\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"terminated\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"security\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastConsume\",\"type\":\"uint256\"}],\"internalType\":\"struct Service\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getTokensBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"getUserAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserFeeDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawSecurityQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"isTerminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSecurity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AccountFacet", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}