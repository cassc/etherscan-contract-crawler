{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interface/IStakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IStakeFactory {\\n    function impl() external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/SaitaProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IStakeFactory.sol\\\";\\n\\ncontract SaitaProxy {\\n    \\n        bytes32 private constant proxyOwnerPosition = keccak256(\\\"com.saitama.proxy.owner\\\");\\n        bytes32 private constant factory = keccak256(\\\"com.saitama.proxy.factory\\\");\\n\\n    constructor(address owner) {\\n        setProxyOwner(owner);\\n\\n    }\\n\\n    function setProxyOwner(address newProxyOwner) private  {\\n        bytes32 position = proxyOwnerPosition;\\n        assembly {\\n            sstore(position, newProxyOwner)\\n        }\\n    }\\n\\n    function setFactory(address _factory) public  {\\n        require(msg.sender == proxyOwner(), \\\"ONLY_OWNER_CAN_CHANGE\\\");\\n        bytes32 position = factory;\\n        assembly {\\n            sstore(position, _factory)\\n        }\\n    }\\n\\n    function getFactory() public view returns (address _factory) {\\n        bytes32 position = factory;\\n        assembly {\\n            _factory := sload(position)\\n        }\\n    }\\n\\n    function proxyOwner() public view returns (address owner) {\\n        bytes32 position = proxyOwnerPosition;\\n        assembly {\\n            owner := sload(position)\\n        }\\n    }\\n\\n\\n    function implementation() public view returns (address) {\\n        return IStakeFactory(getFactory()).impl();\\n    }\\n    \\n\\n\\n    fallback() external payable {\\n        address _impl = implementation();\\n\\n            assembly \\n                {\\n                let ptr := mload(0x40)\\n\\n                // (1) copy incoming call data\\n                calldatacopy(ptr, 0, calldatasize())\\n\\n                // (2) forward call to logic contract\\n                let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\n                let size := returndatasize()\\n\\n                // (3) retrieve return data\\n                returndatacopy(ptr, 0, size)\\n\\n                // (4) forward return data back to caller\\n                switch result\\n                case 0 { revert(ptr, size) }\\n                default { return(ptr, size) }\\n                }\\n    }\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SaitaProxy", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000461ada809ced50eba546877d29ca0cd2230098b2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xe35abb69e916c84f697cf94ede7d1b0ebfa63598", "SwarmSource": ""}