{"SourceCode": "// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n// File: Coinlend.sol\r\n\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The Conlend DeFi contract\r\n * @author Jan Pumpe\r\n * @notice This contract is used for a decentralized lending platform\r\n */\r\ncontract Coinlend is ReentrancyGuard, Ownable {\r\n    struct Loan {\r\n        // Attributes of an loan\r\n        uint256 id; // Unique identifier for loan\r\n        address user; // Creator of loan\r\n        address lender; // User who is lending\r\n        address tokenLending; // Address of the token borrower receives\r\n        uint256 tokenLendingAmount; // Amount to lend\r\n        address tokenCollateral; // Address of token used as collateral\r\n        uint256 tokenCollateralAmount; // Amount collateral\r\n        uint256 interestRate; // Interest rate of the loan in basis points -> 5% = 500\r\n        uint256 loanDuration; // The loan duration in days\r\n        uint256 loanState; // The state of the loan (0 = OPEN, 1 = CANCELED, 2 = ACTIVE, 3 = COMPLETE)\r\n        address borrower; // User who is borrowing\r\n        uint256 timestamp; // Time when loan was created or taken\r\n    }\r\n\r\n    struct Transfer {\r\n        uint256 id; // Unique identifier for deposit\r\n        address user; // User who is lending\r\n        address token; // Address of the token which is transferred\r\n        uint256 tokenAmount; // Amount transferred\r\n        uint256 transferType; // 0 -> Deposit, 1 -> Withdraw\r\n        uint256 timestamp; // Time transfer was created\r\n    }\r\n\r\n    /* State variables */\r\n\r\n    /**\r\n     * Mapping of the exchange balances\r\n     */\r\n    mapping(address => mapping(address => uint256)) public tokens;\r\n\r\n    /**\r\n     * Mapping of all loans on the platform (id as key)\r\n     */\r\n    mapping(uint256 => Loan) public loans;\r\n\r\n    /**\r\n     * Store the fee percent for the loans so fee percent changes don't affect existing loans.\r\n     * Separate mapping needed since loan struct is too big already.\r\n     */\r\n    mapping(uint256 => uint256) public loansFee;\r\n\r\n    /**\r\n     * Mapping of all deposits/withdrawals on the platform (id as key)\r\n     */\r\n    mapping(uint256 => Transfer) public transfers;\r\n\r\n    /**\r\n     * Mapping of pricefeeds for all supported tokens on the platform\r\n     */\r\n    mapping(address => AggregatorV3Interface) public priceFeeds;\r\n\r\n    /**\r\n     * Count of all loans on the platform -> used as ID\r\n     */\r\n    uint256 public loanCount = 1;\r\n\r\n    /**\r\n     * Count of all transfers on the platform -> used as ID\r\n     */\r\n    uint256 public transferCount = 1;\r\n\r\n    /**\r\n     * The address that receives all fee payments\r\n     */\r\n    address public feeAccount;\r\n\r\n    /**\r\n     * The fee charged for the interest generated on the platform in basis points: 5% -> 500\r\n     */\r\n    uint256 public feePercent;\r\n\r\n    /**\r\n     * The maximum LTV for new loans\r\n     */\r\n    uint256 public maxLTV;\r\n\r\n    /**\r\n     * The  maximum LTV for exiting loans. If LTV exceeds this threshold the lender can force liquidate loan\r\n     */\r\n    uint256 public ltvThreshold;\r\n\r\n    /**\r\n     * The time that needs to pass after loan expiration after which the lender can force liquidate the loan if it is not payed back\r\n     */\r\n    uint256 public expirationBuffer = 60 * 60 * 24 * 7; // 7 days\r\n\r\n    /**\r\n     * The address of the Coinlend Credits token\r\n     */\r\n    address public coinlendCredits;\r\n\r\n    /**\r\n     * Discount in percent for paying with Coinlend Credits\r\n     */\r\n    uint256 public coinlendCreditsDiscount;\r\n\r\n    /* Events */\r\n\r\n    event LoanListingCreated(\r\n        // Attributes of an loan\r\n        uint256 id, // Unique identifier for loan\r\n        address user, // Creater of the loan\r\n        address lender, // User who is lending\r\n        address tokenLending, // Address of the token they receive\r\n        uint256 tokenLendingAmount, // Amount to lend\r\n        address borrower, // user who is borowwing\r\n        address tokenCollateral, // Address of token for the collateral\r\n        uint256 tokenCollateralAmount, // Amount collateral\r\n        uint256 interestRate,\r\n        uint256 loanDuration,\r\n        uint256 loanState,\r\n        uint256 timestamp // When loan was created\r\n    );\r\n\r\n    event LoanListingCancelled(\r\n        // Attributes of an loan\r\n        uint256 id, // Unique identifier for loan\r\n        address user, // user that created event\r\n        address lender, // User who is lending\r\n        address tokenLending, // Address of the token they receive\r\n        uint256 tokenLendingAmount, // Amount to lend\r\n        address borrower,\r\n        address tokenCollateral, // Address of token for the collateral\r\n        uint256 tokenCollateralAmount, // Amount collateral\r\n        uint256 interestRate,\r\n        uint256 loanDuration,\r\n        uint256 loanState,\r\n        uint256 timestamp // When loan was created\r\n    );\r\n\r\n    event LoanTaken(\r\n        // Attributes of an loan\r\n        uint256 id, // Unique identifier for loan\r\n        address user,\r\n        address lender, // User who is lending\r\n        address tokenLending, // Address of the token they receive\r\n        uint256 tokenLendingAmount, // Amount to lend\r\n        address borrower,\r\n        address tokenCollateral, // Address of token for the collateral\r\n        uint256 tokenCollateralAmount, // Amount collateral\r\n        uint256 interestRate,\r\n        uint256 loanDuration,\r\n        uint256 loanState,\r\n        uint256 timestamp // When loan was created\r\n    );\r\n\r\n    event LoanPayBack(\r\n        // Attributes of an loan\r\n        uint256 id, // Unique identifier for loan\r\n        address user,\r\n        address lender, // User who is lending\r\n        address tokenLending, // Address of the token they receive\r\n        uint256 tokenLendingAmount, // Amount to lend\r\n        address borrower,\r\n        address tokenCollateral, // Address of token for the collateral\r\n        uint256 tokenCollateralAmount, // Amount collateral\r\n        uint256 interestRate,\r\n        uint256 loanDuration,\r\n        uint256 interest,\r\n        uint256 timestamp // When loan was created\r\n    );\r\n\r\n    event LoanOfferCancelled(address indexed loanProvider, uint256 loanId);\r\n\r\n    event Deposit(uint256 id, address token, address user, uint256 amount, uint256 balance);\r\n\r\n    event Withdraw(uint256 id, address token, address user, uint256 amount, uint256 balance);\r\n\r\n    /* Functions */\r\n    constructor(address initialOwner) ReentrancyGuard() Ownable(initialOwner) {\r\n        feeAccount = msg.sender; // Deployer will receive fees by default\r\n        feePercent = 500; // 5% default fee\r\n        maxLTV = 80; // Maximum LTV = 80%\r\n        ltvThreshold = 90; // Loans can be liquidated if LTV exceed 90%\r\n    }\r\n\r\n    /**\r\n     * Deposit tokens to the platform\r\n     * @param _token Address of the token to deposit\r\n     * @param _amount Amount of token to deposit\r\n     */\r\n    function depositToken(address _token, uint256 _amount) public nonReentrant {\r\n        // Only allow deposit of token with pricefeed (prevent deposit of fake token)\r\n        require(getLatestPrice(_token) > 0);\r\n\r\n        // Only allow valid amounts greater 0\r\n        require(_amount > 0);\r\n\r\n        uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\r\n        // Transfer tokens to exchange\r\n        SafeERC20.safeTransferFrom(\r\n            IERC20(_token), // Pass the token contract address as the first parameter\r\n            msg.sender, // Sender of the tokens\r\n            address(this), // Recipient of the tokens\r\n            _amount // Amount of tokens to transfer\r\n        );\r\n\r\n        // Special handling for deflationary tokens\r\n        uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\r\n        uint256 balanceDiff = balanceAfter - balanceBefore;\r\n        if (balanceDiff < _amount) {\r\n            _amount = balanceDiff;\r\n        }\r\n\r\n        // Update user balance\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender] + _amount;\r\n\r\n        transfers[transferCount] = Transfer(\r\n            transferCount,\r\n            msg.sender,\r\n            _token,\r\n            _amount,\r\n            0,\r\n            block.timestamp\r\n        );\r\n\r\n        // Emit deposit event\r\n        emit Deposit(transferCount, _token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n\r\n        transferCount++;\r\n    }\r\n\r\n    /**\r\n     * Withdraw tokens from the platform\r\n     * @param _token Address of the token to withdraw\r\n     * @param _amount Amount of token to withdraw\r\n     */\r\n    function withdrawToken(address _token, uint256 _amount) public nonReentrant {\r\n        // Ensure user has enough tokens to withdraw\r\n\r\n        require(tokens[_token][msg.sender] >= _amount);\r\n\r\n        // Transfer tokens to user\r\n        SafeERC20.safeTransfer(\r\n            IERC20(_token), // Pass the token contract address as the first parameter\r\n            msg.sender, // Sender of the tokens\r\n            _amount // Amount of tokens to transfer\r\n        );\r\n\r\n        // Update user balance\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender] - _amount;\r\n\r\n        transfers[transferCount] = Transfer(\r\n            transferCount,\r\n            msg.sender,\r\n            _token,\r\n            _amount,\r\n            1,\r\n            block.timestamp\r\n        );\r\n\r\n        // Emit withdraw event\r\n        emit Withdraw(transferCount, _token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n\r\n        transferCount++;\r\n    }\r\n\r\n    function balanceOf(address _token, address _user) public view returns (uint256) {\r\n        return tokens[_token][_user];\r\n    }\r\n\r\n    function createLoanLend(\r\n        address _tokenLend,\r\n        uint256 _tokenLendAmount,\r\n        address _tokenCollateral,\r\n        uint256 _interestRate, // Interest in basis points: 12% -> 1200\r\n        uint256 _loanDuration,\r\n        uint256 _ltv\r\n    ) public nonReentrant {\r\n        require(_ltv > 0 && _ltv <= maxLTV);\r\n        require(_interestRate >= 1 && _interestRate <= 10000); // Interest in basis points: 0,01% - 100%\r\n        require(_tokenLendAmount > 0);\r\n        require(_loanDuration > 0 && _loanDuration < 3650);\r\n\r\n        require(balanceOf(_tokenLend, msg.sender) >= _tokenLendAmount);\r\n\r\n        uint256 tokenCollateralAmount = (_tokenLendAmount * 100 * getLatestPrice(_tokenLend)) /\r\n            _ltv /\r\n            getLatestPrice(_tokenCollateral);\r\n\r\n        tokens[_tokenLend][msg.sender] -= _tokenLendAmount;\r\n\r\n        createLoanInternal(\r\n            msg.sender, // loan creator\r\n            msg.sender,\r\n            _tokenLend,\r\n            _tokenLendAmount,\r\n            address(0),\r\n            _tokenCollateral,\r\n            tokenCollateralAmount,\r\n            _interestRate,\r\n            _loanDuration\r\n        );\r\n    }\r\n\r\n    function createLoanBorrow(\r\n        address _tokenLend,\r\n        uint256 _tokenLendAmount,\r\n        address _tokenCollateral,\r\n        uint256 _interestRate,\r\n        uint256 _loanDuration,\r\n        uint256 _ltv\r\n    ) public nonReentrant {\r\n        require(_ltv > 0 && _ltv <= maxLTV);\r\n        require(_interestRate >= 1 && _interestRate <= 10000); // Interest in basis points: 0,01% - 100%\r\n        require(_tokenLendAmount > 0);\r\n        require(_loanDuration > 0 && _loanDuration < 3650);\r\n\r\n        uint256 tokenCollateralAmount = (_tokenLendAmount * 100 * getLatestPrice(_tokenLend)) /\r\n            _ltv /\r\n            getLatestPrice(_tokenCollateral);\r\n\r\n        require(balanceOf(_tokenCollateral, msg.sender) >= tokenCollateralAmount);\r\n\r\n        tokens[_tokenCollateral][msg.sender] -= tokenCollateralAmount;\r\n\r\n        createLoanInternal(\r\n            msg.sender, // loan creator\r\n            address(0),\r\n            _tokenLend,\r\n            _tokenLendAmount,\r\n            msg.sender,\r\n            _tokenCollateral,\r\n            tokenCollateralAmount,\r\n            _interestRate,\r\n            _loanDuration\r\n        );\r\n    }\r\n\r\n    function createLoanInternal(\r\n        address _user,\r\n        address _lender,\r\n        address _tokenLending,\r\n        uint256 _tokenLendingAmount,\r\n        address _borrower,\r\n        address _tokenCollateral,\r\n        uint256 _tokenCollateralAmount, // Amount collateral\r\n        uint256 _interestRate, // Interest in basis points: 12% -> 1200\r\n        uint256 _loanDuration\r\n    ) internal {\r\n        loans[loanCount] = Loan(\r\n            loanCount,\r\n            _user,\r\n            _lender,\r\n            _tokenLending,\r\n            _tokenLendingAmount,\r\n            _tokenCollateral,\r\n            _tokenCollateralAmount,\r\n            _interestRate,\r\n            _loanDuration,\r\n            0,\r\n            _borrower,\r\n            block.timestamp\r\n        );\r\n\r\n        loansFee[loanCount] = feePercent;\r\n        // Emit event\r\n        emit LoanListingCreated(\r\n            loanCount,\r\n            _user, // loan creator\r\n            _lender,\r\n            _tokenLending,\r\n            _tokenLendingAmount,\r\n            _borrower,\r\n            _tokenCollateral,\r\n            _tokenCollateralAmount,\r\n            _interestRate,\r\n            _loanDuration,\r\n            0,\r\n            block.timestamp\r\n        );\r\n\r\n        loanCount++;\r\n    }\r\n\r\n    function cancelLoan(uint256 _id) public nonReentrant {\r\n        // Fetch loan\r\n        Loan storage _loan = loans[_id];\r\n\r\n        // Ensure the caller of the function is the owner of the loan\r\n        require(address(_loan.user) == msg.sender);\r\n\r\n        // Ensue the loan is in state open\r\n        require(_loan.loanState == 0);\r\n\r\n        // Update loan state\r\n        _loan.loanState = 1;\r\n\r\n        if (_loan.borrower == address(0)) {\r\n            tokens[_loan.tokenLending][_loan.lender] += _loan.tokenLendingAmount;\r\n        } else if (_loan.lender == address(0)) {\r\n            tokens[_loan.tokenCollateral][_loan.borrower] += _loan.tokenCollateralAmount;\r\n        }\r\n\r\n        // Emit event\r\n        emit LoanListingCancelled(\r\n            _loan.id,\r\n            msg.sender,\r\n            _loan.lender,\r\n            _loan.tokenLending,\r\n            _loan.tokenLendingAmount,\r\n            _loan.borrower,\r\n            _loan.tokenCollateral,\r\n            _loan.tokenCollateralAmount,\r\n            _loan.interestRate,\r\n            _loan.loanDuration,\r\n            1,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeLoan(uint256 _id) public nonReentrant {\r\n        // Fetch loan\r\n        Loan storage _loan = loans[_id];\r\n\r\n        // Loan must exist\r\n        require(_loan.id == _id);\r\n\r\n        // Check loan state: Only open loans can be taken\r\n        require(_loan.loanState == 0);\r\n\r\n        // If user takes a lending offer -> check if he has enough collateral\r\n        if (_loan.borrower == address(0)) {\r\n            require(balanceOf(_loan.tokenCollateral, msg.sender) >= _loan.tokenCollateralAmount);\r\n        }\r\n\r\n        // If user provides funds for a borrow offer -> check if he has enough funds to lend\r\n        if (_loan.lender == address(0)) {\r\n            require(balanceOf(_loan.tokenLending, msg.sender) >= _loan.tokenLendingAmount);\r\n        }\r\n\r\n        _loan.loanState = 2;\r\n        _loan.timestamp = block.timestamp;\r\n\r\n        // Transfer tokens\r\n        if (_loan.borrower == address(0)) {\r\n            // Borrower takes a loan: Transfer lending amount to him and transfer collateral to contract\r\n\r\n            // Transfer away collateral from borrower\r\n            tokens[_loan.tokenCollateral][msg.sender] -= _loan.tokenCollateralAmount;\r\n\r\n            // Transfer borrowed coins to borrower\r\n            tokens[_loan.tokenLending][msg.sender] += _loan.tokenLendingAmount;\r\n\r\n            _loan.borrower = msg.sender;\r\n        } else if (_loan.lender == address(0)) {\r\n            // Lender takes borrowing offer\r\n            // Transfer borrowed coins to borrower\r\n            tokens[_loan.tokenLending][_loan.borrower] += _loan.tokenLendingAmount;\r\n\r\n            // Subtract borrowed coins from lender\r\n            tokens[_loan.tokenLending][msg.sender] -= _loan.tokenLendingAmount;\r\n\r\n            _loan.lender = msg.sender;\r\n        }\r\n\r\n        // Emit event\r\n        emit LoanTaken(\r\n            _loan.id,\r\n            msg.sender,\r\n            _loan.lender,\r\n            _loan.tokenLending,\r\n            _loan.tokenLendingAmount,\r\n            _loan.borrower,\r\n            _loan.tokenCollateral,\r\n            _loan.tokenCollateralAmount,\r\n            _loan.interestRate,\r\n            _loan.loanDuration,\r\n            2,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function payBackLoan(uint256 _id) public nonReentrant {\r\n        // Fetch loan\r\n        Loan storage _loan = loans[_id];\r\n\r\n        // Ensure the caller of the function is the owner of the loan\r\n        require(address(_loan.borrower) == msg.sender);\r\n\r\n        // Only active loans can be paid back\r\n        require(_loan.loanState == 2);\r\n\r\n        _loan.loanState = 3;\r\n\r\n        // Calculate interest\r\n        uint256 interestAmount = calculateInterest(\r\n            _loan.tokenLendingAmount,\r\n            _loan.interestRate,\r\n            _loan.timestamp,\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 fee = calculateFee(interestAmount, loansFee[_id]);\r\n\r\n        // Check if borrower has enough funds for payback\r\n        require(hasBorrowerEnoughFundsForPayback(_loan, interestAmount));\r\n\r\n        payBackLoanInternal(_loan, interestAmount, fee);\r\n    }\r\n\r\n    function payBackLoanInternal(Loan memory _loan, uint256 _interestAmount, uint256 _fee) private {\r\n        uint256 feeValue = (((_fee * getLatestPrice(_loan.tokenLending)) /\r\n            (10 ** (ERC20(_loan.tokenLending).decimals()))) * (100 - coinlendCreditsDiscount)) /\r\n            100;\r\n        // Transfer fee to fee account\r\n        bool senderHasEnoughCredits = senderHasEnoughCoinlendCredits(feeValue);\r\n\r\n        if (senderHasEnoughCredits) {\r\n            tokens[coinlendCredits][feeAccount] += feeValue;\r\n        } else {\r\n            tokens[_loan.tokenLending][feeAccount] += _fee;\r\n        }\r\n\r\n        uint256 interestAmountMinusFee = _interestAmount - _fee;\r\n\r\n        // Payback borrowed token to lender\r\n        tokens[_loan.tokenLending][_loan.lender] +=\r\n            _loan.tokenLendingAmount +\r\n            interestAmountMinusFee;\r\n\r\n        if (senderHasEnoughCredits) {\r\n            tokens[coinlendCredits][_loan.borrower] -= feeValue;\r\n            // substract lending amount and interest from borrower balance\r\n            tokens[_loan.tokenLending][_loan.borrower] -= (_loan.tokenLendingAmount +\r\n                interestAmountMinusFee);\r\n        } else {\r\n            // substract lending amount and interest from borrower balance\r\n            tokens[_loan.tokenLending][_loan.borrower] -= (_loan.tokenLendingAmount +\r\n                _interestAmount);\r\n        }\r\n\r\n        // Payback collateral\r\n        tokens[_loan.tokenCollateral][_loan.borrower] += _loan.tokenCollateralAmount;\r\n\r\n        // Emit event\r\n        emit LoanPayBack(\r\n            _loan.id,\r\n            msg.sender,\r\n            _loan.lender,\r\n            _loan.tokenLending,\r\n            _loan.tokenLendingAmount,\r\n            _loan.borrower,\r\n            _loan.tokenCollateral,\r\n            _loan.tokenCollateralAmount,\r\n            _loan.interestRate,\r\n            _loan.loanDuration,\r\n            interestAmountMinusFee,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function hasBorrowerEnoughFundsForPayback(\r\n        Loan memory _loan,\r\n        uint256 _interestAmount\r\n    ) internal view returns (bool) {\r\n        return\r\n            tokens[_loan.tokenLending][_loan.borrower] >=\r\n            _loan.tokenLendingAmount + _interestAmount;\r\n    }\r\n\r\n    function senderHasEnoughCoinlendCredits(uint256 _feeValue) internal view returns (bool) {\r\n        return balanceOf(coinlendCredits, msg.sender) >= _feeValue;\r\n    }\r\n\r\n    function calculateInterest(\r\n        uint256 _tokenLendingAmount,\r\n        uint256 _interestRate,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    ) internal pure returns (uint256) {\r\n        // End time needs to be bigger than the start time\r\n        require(_endTime > _startTime);\r\n        uint256 interestAmount = (((_tokenLendingAmount * _interestRate) *\r\n            (_endTime - _startTime)) /\r\n            365 /\r\n            24 /\r\n            60 /\r\n            60 /\r\n            10000);\r\n\r\n        return interestAmount;\r\n    }\r\n\r\n    function calculateFee(\r\n        uint256 _interestAmount,\r\n        uint256 _feePercent\r\n    ) internal pure returns (uint256) {\r\n        return (_interestAmount * _feePercent) / 10000;\r\n    }\r\n\r\n    function forceLiquidateExpiredLoan(uint256 _id) public nonReentrant {\r\n        // Fetch loan\r\n        Loan storage _loan = loans[_id];\r\n\r\n        // Ensure the caller of the function is the lender of the loan\r\n        require(address(_loan.lender) == msg.sender);\r\n\r\n        // Check loan state\r\n        require(_loan.loanState == 2);\r\n\r\n        // check loan is expired + buffer\r\n        // Only loans which are expired the loan duration plus buffer can be liquidated\r\n        require(_loan.timestamp + _loan.loanDuration + expirationBuffer < block.timestamp);\r\n\r\n        // If borrower has enough of borrowed currency + fee -> payback lender and return collateral\r\n        uint256 interestAmount = calculateInterest(\r\n            _loan.tokenLendingAmount,\r\n            _loan.interestRate,\r\n            _loan.timestamp,\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 fee = calculateFee(interestAmount, loansFee[_id]);\r\n\r\n        // Check if borrower has enough funds for payback\r\n        if (hasBorrowerEnoughFundsForPayback(_loan, interestAmount)) {\r\n            payBackLoanInternal(_loan, interestAmount, fee);\r\n        } else {\r\n            // If borrower has not enough of borrowed currency + fee -> move ownership of collateral to lender\r\n            tokens[_loan.tokenCollateral][_loan.lender] += _loan.tokenCollateralAmount;\r\n\r\n            // Emit event\r\n            emit LoanPayBack(\r\n                _loan.id,\r\n                msg.sender,\r\n                _loan.lender,\r\n                _loan.tokenLending,\r\n                _loan.tokenLendingAmount,\r\n                _loan.borrower,\r\n                _loan.tokenCollateral,\r\n                _loan.tokenCollateralAmount,\r\n                _loan.interestRate,\r\n                _loan.loanDuration,\r\n                interestAmount - fee,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        _loan.loanState = 3;\r\n    }\r\n\r\n    function forceLiquidateMarginExceeded(uint256 _id) public nonReentrant {\r\n        // Fetch loan\r\n        Loan storage _loan = loans[_id];\r\n\r\n        // Ensure the caller of the function is the lender of the loan\r\n        require(address(_loan.lender) == msg.sender);\r\n\r\n        // Check loan state\r\n        require(_loan.loanState == 2);\r\n\r\n        uint256 ltv = calculateLTV(_loan);\r\n\r\n        // Loan can not be liquiditated since ltv threshold was not exeeded yet\r\n        require(ltv > ltvThreshold);\r\n\r\n        // If borrower has enough of borrowed currency + fee -> payback lender and return collateral\r\n        uint256 interestAmount = calculateInterest(\r\n            _loan.tokenLendingAmount,\r\n            _loan.interestRate,\r\n            _loan.timestamp,\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 fee = calculateFee(interestAmount, loansFee[_id]);\r\n\r\n        // Check if borrower has enough funds for payback\r\n        if (hasBorrowerEnoughFundsForPayback(_loan, interestAmount)) {\r\n            payBackLoanInternal(_loan, interestAmount, fee);\r\n        } else {\r\n            // If borrower has not enough of borrowed currency + fee -> move ownership of collateral to lender\r\n            tokens[_loan.tokenCollateral][_loan.lender] += _loan.tokenCollateralAmount;\r\n\r\n            // Emit event\r\n            emit LoanPayBack(\r\n                _loan.id,\r\n                msg.sender,\r\n                _loan.lender,\r\n                _loan.tokenLending,\r\n                _loan.tokenLendingAmount,\r\n                _loan.borrower,\r\n                _loan.tokenCollateral,\r\n                _loan.tokenCollateralAmount,\r\n                _loan.interestRate,\r\n                _loan.loanDuration,\r\n                interestAmount - fee,\r\n                block.timestamp\r\n            );\r\n        }\r\n\r\n        _loan.loanState = 3;\r\n    }\r\n\r\n    /**\r\n     *  Increase the collateral amount of the loan for the given loan ID\r\n     */\r\n    function increaseCollateral(uint256 _id, uint256 _amount) public nonReentrant {\r\n        // Fetch loan\r\n        Loan storage _loan = loans[_id];\r\n\r\n        // Ensure the caller of the function is the borrower of the loan\r\n        require(address(_loan.borrower) == msg.sender);\r\n\r\n        // Check loan state\r\n        require(_loan.loanState == 2);\r\n\r\n        // check if borrower has enough funds to increase collateral\r\n        require(tokens[_loan.tokenCollateral][msg.sender] >= _amount);\r\n\r\n        tokens[_loan.tokenCollateral][_loan.borrower] -= _amount;\r\n\r\n        _loan.tokenCollateralAmount += _amount;\r\n    }\r\n\r\n    /**\r\n     * Returns the latest price adjusted for the decimals of the token\r\n     */\r\n    function getLatestPrice(address _currencyAddress) public view returns (uint256) {\r\n        (uint80 roundID, int price, , uint256 timeStamp, uint80 answeredInRound) = priceFeeds[\r\n            _currencyAddress\r\n        ].latestRoundData();\r\n\r\n        uint256 decimalsFeed = priceFeeds[_currencyAddress].decimals();\r\n        // Validate price feed data\r\n        require(price > 0 && answeredInRound >= roundID && timeStamp != 0);\r\n\r\n        return uint256(price) * 10 ** (18 - decimalsFeed); // Price comes with variable decimals but we need 18\r\n    }\r\n\r\n    function calculateLTV(uint256 _loanId) internal view returns (uint256) {\r\n        return calculateLTV(loans[_loanId]);\r\n    }\r\n\r\n    function calculateLTV(Loan memory _loan) internal view returns (uint256) {\r\n        uint256 tokenLendingTotalValue = (getLatestPrice(_loan.tokenLending) *\r\n            _loan.tokenLendingAmount);\r\n\r\n        uint256 tokenCollateralTotalValue = (getLatestPrice(_loan.tokenCollateral) *\r\n            _loan.tokenCollateralAmount);\r\n\r\n        return (tokenLendingTotalValue * 100) / tokenCollateralTotalValue;\r\n    }\r\n\r\n    function addPriceFeed(address _currencyAddress, address _priceFeedAddress) public onlyOwner {\r\n        priceFeeds[_currencyAddress] = AggregatorV3Interface(_priceFeedAddress);\r\n    }\r\n\r\n    function setMaxLTV(uint256 _maxLTV) public onlyOwner {\r\n        require(maxLTV > 0);\r\n        maxLTV = _maxLTV;\r\n    }\r\n\r\n    function setFeeAccount(address _feeAccount) public onlyOwner {\r\n        feeAccount = _feeAccount;\r\n    }\r\n\r\n    function setExpirationBuffer(uint256 _expirationBuffer) public onlyOwner {\r\n        expirationBuffer = _expirationBuffer;\r\n    }\r\n\r\n    function setCoinlendCredits(address _coinlendCredits) public onlyOwner {\r\n        coinlendCredits = _coinlendCredits;\r\n    }\r\n\r\n    function setFeePercent(uint256 _feePercent) public onlyOwner {\r\n        require(_feePercent <= 3000); // limit fee to max 30%\r\n        feePercent = _feePercent;\r\n    }\r\n\r\n    function setCoinlendCreditsDiscount(uint256 _coinlendCreditsDiscount) public onlyOwner {\r\n        coinlendCreditsDiscount = _coinlendCreditsDiscount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenLending\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanState\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LoanListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenLending\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanState\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LoanListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"loanProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"LoanOfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenLending\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LoanPayBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenLending\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanState\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LoanTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"addPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"cancelLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinlendCredits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinlendCreditsDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenLend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenLendAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"}],\"name\":\"createLoanBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenLend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenLendAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"}],\"name\":\"createLoanLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expirationBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"forceLiquidateExpiredLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"forceLiquidateMarginExceeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyAddress\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenLending\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenLendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanState\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loansFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ltvThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payBackLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_coinlendCredits\",\"type\":\"address\"}],\"name\":\"setCoinlendCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_coinlendCreditsDiscount\",\"type\":\"uint256\"}],\"name\":\"setCoinlendCreditsDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expirationBuffer\",\"type\":\"uint256\"}],\"name\":\"setExpirationBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"setFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLTV\",\"type\":\"uint256\"}],\"name\":\"setMaxLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"takeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Coinlend", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002726ffe32ad10b8264b9c44494d5f319caf92d76", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://af5a0ae2c27b8386bed1a02ef36a5deff53347387a1556aadc32e8a208c2416c"}