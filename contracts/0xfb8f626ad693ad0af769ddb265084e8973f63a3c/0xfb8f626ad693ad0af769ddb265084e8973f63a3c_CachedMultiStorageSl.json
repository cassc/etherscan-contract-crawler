{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BlockHistory.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./lib/CoreTypes.sol\\\";\\nimport \\\"./lib/MerkleTree.sol\\\";\\nimport \\\"./lib/AuxMerkleTree.sol\\\";\\nimport \\\"./interfaces/IBlockHistory.sol\\\";\\nimport \\\"./interfaces/IRecursiveVerifier.sol\\\";\\n\\nimport {\\n    RecursiveProof,\\n    SignedRecursiveProof,\\n    getProofSigner,\\n    readHashWords\\n} from \\\"./lib/Proofs.sol\\\";\\n\\n/**\\n * @title BlockHistory\\n * @author Theori, Inc.\\n * @notice BlockHistory allows trustless and cheap verification of any\\n *         historical block hash. Historical blocks are divided into chunks of\\n *         fixed size, and each chunk's merkle root is stored on-chain. The\\n *         merkle roots are validated on chain using aggregated SNARK proofs,\\n *         enabling both trustlessness and scalability.\\n *\\n * @dev Each SNARK proof validates some contiguous block headers and has\\n *      public inputs (parentHash, lastHash, merkleRoot). Here the merkleRoot\\n *      is the merkleRoot of all block hashes contained in the proof, which may\\n *      commit to many merkle roots which to commit on chain. If the last block\\n *      is recent enough (<= 256 blocks old), the lastHash can be confirmed in\\n *      the EVM, verifying that all blocks of the proof belong to this chain.\\n *      Due to this, the historical blocks' merkle roots are imported in reverse\\n *      order.\\n */\\ncontract BlockHistory is AccessControl, IBlockHistory {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant QUERY_ROLE = keccak256(\\\"QUERY_ROLE\\\");\\n\\n    // depth of the merkle trees whose roots we store in storage\\n    uint256 private constant MERKLE_TREE_DEPTH = 13;\\n    uint256 private constant BLOCKS_PER_CHUNK = 1 << MERKLE_TREE_DEPTH;\\n\\n    /// @dev address of the reliquary, immutable\\n    address public immutable reliquary;\\n\\n    /// @dev the expected signer of the SNARK proofs - if 0, then no signatures\\n    address public signer;\\n\\n    /// @dev maps numBlocks => SNARK verifier (with VK embedded), only assigned\\n    ///      to in the constructor\\n    mapping(uint256 => IRecursiveVerifier) public verifiers;\\n\\n    /// @dev parent hash of oldest block in current merkle trees\\n    ///      (0 once backlog fully imported)\\n    bytes32 public parentHash;\\n\\n    /// @dev the earliest merkle root that has been imported\\n    uint256 public earliestRoot;\\n\\n    /// @dev hash of most recent block in merkle trees\\n    bytes32 public lastHash;\\n\\n    /// @dev merkle roots of block chunks between parentHash and lastHash\\n    mapping(uint256 => bytes32) private merkleRoots;\\n\\n    /// @dev ZK-Friendly merkle roots, used by auxiliary SNARKs\\n    mapping(uint256 => bytes32) private auxiliaryRoots;\\n\\n    /// @dev whether auth checks should run on aux root queries\\n    bool private needsAuth;\\n\\n    event ImportMerkleRoot(uint256 indexed index, bytes32 merkleRoot, bytes32 auxiliaryRoot);\\n    event NewSigner(address newSigner);\\n\\n    enum ProofType {\\n        Merkle,\\n        SNARK\\n    }\\n\\n    /// @dev A SNARK + Merkle proof used to prove validity of a block\\n    struct MerkleSNARKProof {\\n        uint256 numBlocks;\\n        uint256 endBlock;\\n        SignedRecursiveProof snark;\\n        bytes32[] merkleProof;\\n    }\\n\\n    struct ProofInputs {\\n        bytes32 parent;\\n        bytes32 last;\\n        bytes32 merkleRoot;\\n        bytes32 auxiliaryRoot;\\n    }\\n\\n    constructor(\\n        uint256[] memory sizes,\\n        IRecursiveVerifier[] memory _verifiers,\\n        address _reliquary\\n    ) AccessControl() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(QUERY_ROLE, msg.sender);\\n\\n        reliquary = _reliquary;\\n        signer = msg.sender;\\n\\n        require(sizes.length == _verifiers.length);\\n        for (uint256 i = 0; i < sizes.length; i++) {\\n            require(address(verifiers[sizes[i]]) == address(0));\\n            verifiers[sizes[i]] = _verifiers[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a SNARK is valid and signed as expected.\\n     *         Signatures checks are disabled if stored signer == address(0)\\n     *         Properties proven by the SNARK:\\n     *         - (parent ... last) form a valid block chain of length numBlocks\\n     *         - root is the merkle root of all contained blocks\\n     *\\n     * @param proof the aggregated proof\\n     * @param numBlocks the number of blocks contained in the proof\\n     * @return the validity\\n     */\\n    function validSNARK(SignedRecursiveProof calldata proof, uint256 numBlocks)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        address expected = signer;\\n        if (expected != address(0) && getProofSigner(proof) != expected) {\\n            return false;\\n        }\\n        IRecursiveVerifier verifier = verifiers[numBlocks];\\n        require(address(verifier) != address(0), \\\"invalid numBlocks\\\");\\n        return verifier.verify(proof.inner);\\n    }\\n\\n    /**\\n     * @notice Asserts that the provided SNARK proof is valid and contains\\n     *         the provied merkle roots.\\n     *\\n     * @param proof the aggregated proof\\n     * @param roots the block merkle roots\\n     * @param aux the auxiliary merkle roots\\n     * @return inputs the proof inputs\\n     */\\n    function assertValidSNARKWithRoots(\\n        SignedRecursiveProof calldata proof,\\n        bytes32[] calldata roots,\\n        bytes32[] calldata aux\\n    ) internal view returns (ProofInputs memory inputs) {\\n        require(roots.length & (roots.length - 1) == 0, \\\"roots length must be a power of 2\\\");\\n        require(roots.length == aux.length, \\\"roots arrays must be same length\\\");\\n\\n        // extract the inputs from the proof\\n        inputs = parseProofInputs(proof);\\n\\n        // ensure the merkle roots are valid\\n        require(inputs.merkleRoot == MerkleTree.computeRoot(roots), \\\"invalid block roots\\\");\\n\\n        // ensure the auxiliary merkle roots are valid\\n        require(inputs.auxiliaryRoot == AuxMerkleTree.computeRoot(aux), \\\"invalid aux roots\\\");\\n\\n        // assert the SNARK proof is valid\\n        require(validSNARK(proof, BLOCKS_PER_CHUNK * roots.length), \\\"invalid SNARK\\\");\\n    }\\n\\n    /**\\n     * @notice Checks if the given block number/hash connects to the current\\n     *         block using a SNARK.\\n     *\\n     * @param num the block number to check\\n     * @param hash the block hash to check\\n     * @param encodedProof the encoded MerkleSNARKProof\\n     * @return the validity\\n     */\\n    function validBlockHashWithSNARK(\\n        bytes32 hash,\\n        uint256 num,\\n        bytes calldata encodedProof\\n    ) internal view returns (bool) {\\n        MerkleSNARKProof calldata proof = parseMerkleSNARKProof(encodedProof);\\n\\n        ProofInputs memory inputs = parseProofInputs(proof.snark);\\n\\n        // check that the proof ends with a current block\\n        if (!validCurrentBlock(inputs.last, proof.endBlock)) {\\n            return false;\\n        }\\n\\n        if (!validSNARK(proof.snark, proof.numBlocks)) {\\n            return false;\\n        }\\n\\n        // compute the first block number in the proof\\n        uint256 startBlock = proof.endBlock + 1 - proof.numBlocks;\\n\\n        // check if the target block is the parent of the proven blocks\\n        if (num == startBlock - 1 && hash == inputs.parent) {\\n            // merkle proof not needed in this case\\n            return true;\\n        }\\n\\n        // check if the target block is in the proven merkle root\\n        uint256 index = num - startBlock;\\n        return MerkleTree.validProof(inputs.merkleRoot, index, hash, proof.merkleProof);\\n    }\\n\\n    /**\\n     * @notice Checks if the given block number + hash exists in a commited\\n     *         merkle tree.\\n     *\\n     * @param num the block number to check\\n     * @param hash the block hash to check\\n     * @param encodedProof the encoded merkle proof\\n     * @return the validity\\n     */\\n    function validBlockHashWithMerkle(\\n        bytes32 hash,\\n        uint256 num,\\n        bytes calldata encodedProof\\n    ) internal view returns (bool) {\\n        bytes32 merkleRoot = merkleRoots[num / BLOCKS_PER_CHUNK];\\n        if (merkleRoot == 0) {\\n            return false;\\n        }\\n        bytes32[] calldata proofHashes = parseMerkleProof(encodedProof);\\n        if (proofHashes.length != MERKLE_TREE_DEPTH) {\\n            return false;\\n        }\\n        return MerkleTree.validProof(merkleRoot, num % BLOCKS_PER_CHUNK, hash, proofHashes);\\n    }\\n\\n    /**\\n     * @notice Checks if the block is a current block (defined as being\\n     *         accessible in the EVM, i.e. <= 256 blocks old) and that the hash\\n     *         is correct.\\n     *\\n     * @param hash the alleged block hash\\n     * @param num the block number\\n     * @return the validity\\n     */\\n    function validCurrentBlock(bytes32 hash, uint256 num) internal view returns (bool) {\\n        // the block hash must be accessible in the EVM and match\\n        return (block.number - num <= 256) && (blockhash(num) == hash);\\n    }\\n\\n    /**\\n     * @notice Stores the merkle roots starting at the index\\n     *\\n     * @param index the index for the first merkle root\\n     * @param roots the merkle roots of the block hashes\\n     * @param aux the auxiliary merkle roots of the block hashes\\n     */\\n    function storeMerkleRoots(\\n        uint256 index,\\n        bytes32[] calldata roots,\\n        bytes32[] calldata aux\\n    ) internal {\\n        for (uint256 i = 0; i < roots.length; i++) {\\n            uint256 idx = index + i;\\n            merkleRoots[idx] = roots[i];\\n            auxiliaryRoots[idx] = aux[i];\\n            emit ImportMerkleRoot(idx, roots[i], aux[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Imports new chunks of blocks before the current parentHash\\n     *\\n     * @param proof the aggregated proof for these chunks\\n     * @param roots the merkle roots for the block hashes\\n     * @param aux the auxiliary roots for the block hashes\\n     */\\n    function importParent(\\n        SignedRecursiveProof calldata proof,\\n        bytes32[] calldata roots,\\n        bytes32[] calldata aux\\n    ) external {\\n        require(parentHash != 0 && earliestRoot != 0, \\\"import not started or already completed\\\");\\n\\n        ProofInputs memory inputs = assertValidSNARKWithRoots(proof, roots, aux);\\n\\n        // assert the last hash in the proof is our current parent hash\\n        require(parentHash == inputs.last, \\\"proof doesn't connect with parentHash\\\");\\n\\n        // store the merkle roots\\n        uint256 index = earliestRoot - roots.length;\\n        storeMerkleRoots(index, roots, aux);\\n\\n        // store the new parentHash and earliestRoot\\n        parentHash = inputs.parent;\\n        earliestRoot = index;\\n    }\\n\\n    /**\\n     * @notice Imports new chunks of blocks after the current lastHash\\n     *\\n     * @param endBlock the last block number in the chunks\\n     * @param proof the aggregated proof for these chunks\\n     * @param roots the merkle roots for the block hashes\\n     * @param connectProof an optional SNARK proof connecting the proof to\\n     *                     a current block\\n     */\\n    function importLast(\\n        uint256 endBlock,\\n        SignedRecursiveProof calldata proof,\\n        bytes32[] calldata roots,\\n        bytes32[] calldata aux,\\n        bytes calldata connectProof\\n    ) external {\\n        require((endBlock + 1) % BLOCKS_PER_CHUNK == 0, \\\"endBlock must end at a chunk boundary\\\");\\n\\n        ProofInputs memory inputs = assertValidSNARKWithRoots(proof, roots, aux);\\n\\n        if (!validCurrentBlock(inputs.last, endBlock)) {\\n            // if the proof doesn't connect our lastHash with a current block,\\n            // then the connectProof must fill the gap\\n            require(\\n                validBlockHashWithSNARK(inputs.last, endBlock, connectProof),\\n                \\\"connectProof invalid\\\"\\n            );\\n        }\\n\\n        uint256 index = (endBlock + 1) / BLOCKS_PER_CHUNK - roots.length;\\n        if (lastHash == 0) {\\n            // if we're importing for the first time, set parentHash and earliestRoot\\n            require(parentHash == 0);\\n            parentHash = inputs.parent;\\n            earliestRoot = index;\\n        } else {\\n            require(inputs.parent == lastHash, \\\"proof doesn't connect with lastHash\\\");\\n        }\\n\\n        // store the new lastHash\\n        lastHash = inputs.last;\\n\\n        // store the merkle roots\\n        storeMerkleRoots(index, roots, aux);\\n    }\\n\\n    /**\\n     * @notice Checks if a block hash is valid. A proof is required unless the\\n     *         block is current (accesible in the EVM). If the target block has\\n     *         no commited merkle root, the proof must contain a SNARK proof.\\n     *\\n     * @param hash the hash to check\\n     * @param num the block number for the alleged hash\\n     * @param proof the merkle witness or SNARK proof (if needed)\\n     * @return the validity\\n     */\\n    function _validBlockHash(\\n        bytes32 hash,\\n        uint256 num,\\n        bytes calldata proof\\n    ) internal view returns (bool) {\\n        if (validCurrentBlock(hash, num)) {\\n            return true;\\n        }\\n\\n        ProofType typ;\\n        (typ, proof) = parseProofType(proof);\\n        if (typ == ProofType.Merkle) {\\n            return validBlockHashWithMerkle(hash, num, proof);\\n        } else if (typ == ProofType.SNARK) {\\n            return validBlockHashWithSNARK(hash, num, proof);\\n        } else {\\n            revert(\\\"invalid proof type\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a block hash is correct. A proof is required unless the\\n     *         block is current (accesible in the EVM). If the target block has\\n     *         no commited merkle root, the proof must contain a SNARK proof.\\n     *         Reverts if block hash or proof is invalid.\\n     *\\n     * @param hash the hash to check\\n     * @param num the block number for the alleged hash\\n     * @param proof the merkle witness or SNARK proof (if needed)\\n     */\\n    function validBlockHash(\\n        bytes32 hash,\\n        uint256 num,\\n        bytes calldata proof\\n    ) external view returns (bool) {\\n        require(msg.sender == reliquary || hasRole(QUERY_ROLE, msg.sender));\\n        require(num < block.number);\\n        return _validBlockHash(hash, num, proof);\\n    }\\n\\n    /**\\n     * @notice Queries an auxRoot\\n     *\\n     * @dev only authorized addresses can call this\\n     * @param idx the index of the root to query\\n     */\\n    function auxRoots(uint256 idx) external view returns (bytes32 root) {\\n        if (needsAuth) {\\n            _checkRole(QUERY_ROLE);\\n        }\\n        root = auxiliaryRoots[idx];\\n    }\\n\\n    /**\\n     * @notice sets the needsAuth flag which controls auxRoot query auth checks\\n     *\\n     * @dev only the owner can call this\\n     * @param _needsAuth the new value\\n     */\\n    function setNeedsAuth(bool _needsAuth) external onlyRole(ADMIN_ROLE) {\\n        needsAuth = _needsAuth;\\n    }\\n\\n    /**\\n     * @notice Parses a proof type and proof from the encoded proof\\n     *\\n     * @param proof the encoded proof\\n     * @return typ the proof type (SNARK or Merkle)\\n     * @return proof the remaining encoded proof\\n     */\\n    function parseProofType(bytes calldata encodedProof)\\n        internal\\n        pure\\n        returns (ProofType typ, bytes calldata proof)\\n    {\\n        require(encodedProof.length > 0, \\\"cannot parse proof type\\\");\\n        typ = ProofType(uint8(encodedProof[0]));\\n        proof = encodedProof[1:];\\n    }\\n\\n    /**\\n     * @notice Parses a MerkleSNARKProof from calldata bytes\\n     *\\n     * @param proof the encoded proof\\n     * @return result a MerkleSNARKProof\\n     */\\n    function parseMerkleSNARKProof(bytes calldata proof)\\n        internal\\n        pure\\n        returns (MerkleSNARKProof calldata result)\\n    {\\n        // solidity doesn't support getting calldata outputs from abi.decode\\n        // but we can decode it; calldata structs are just offsets\\n        assembly {\\n            result := proof.offset\\n        }\\n    }\\n\\n    /**\\n     * @notice Parses a merkle inclusion proof from the bytes\\n     *\\n     * @param proof the encoded merkle inclusion proof\\n     * @return result the array of proof hashes\\n     */\\n    function parseMerkleProof(bytes calldata proof)\\n        internal\\n        pure\\n        returns (bytes32[] calldata result)\\n    {\\n        require(proof.length % 32 == 0);\\n        require(proof.length >= 32);\\n\\n        // solidity doesn't support getting calldata outputs from abi.decode\\n        // but we can decode it; calldata arrays are just (offset,length)\\n        assembly {\\n            result.offset := add(proof.offset, 0x20)\\n            result.length := calldataload(proof.offset)\\n        }\\n    }\\n\\n    /**\\n     * @notice Parses the proof inputs for block history snark proofs\\n     *\\n     * @param proof the snark proof\\n     * @return result the parsed proof inputs\\n     */\\n    function parseProofInputs(SignedRecursiveProof calldata proof)\\n        internal\\n        pure\\n        returns (ProofInputs memory result)\\n    {\\n        uint256[] calldata inputs = proof.inner.inputs;\\n        require(inputs.length == 13);\\n        result = ProofInputs(\\n            readHashWords(inputs[0:4]),\\n            readHashWords(inputs[4:8]),\\n            readHashWords(inputs[8:12]),\\n            bytes32(inputs[12])\\n        );\\n    }\\n\\n    /**\\n     * @notice sets the expected signer of the SNARK proofs, only callable by\\n     *         the contract owner\\n     *\\n     * @param _signer the new signer; if 0, disables signature checks\\n     */\\n    function setSigner(address _signer) external onlyRole(ADMIN_ROLE) {\\n        require(signer != _signer);\\n        signer = _signer;\\n        emit NewSigner(_signer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RelicToken.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"./interfaces/IContractURI.sol\\\";\\nimport \\\"./interfaces/IERC5192.sol\\\";\\nimport \\\"./interfaces/ITokenURI.sol\\\";\\n\\n/**\\n * @title RelicToken\\n * @author Theori, Inc.\\n * @notice RelicToken is the base contract for all Relic SBTs. It implements\\n *         ERC721 (with transfers disables) and ERC5192.\\n */\\nabstract contract RelicToken is Ownable, ERC165, IERC721, IERC721Metadata, IERC5192 {\\n    mapping(address => bool) public provers;\\n\\n    /// @notice contract metadata URI provider\\n    IContractURI contractURIProvider;\\n\\n    /**\\n     * @notice determind if the given owner is entitiled to a token with the specific data\\n     * @param owner the address in question\\n     * @param data the opaque data in question\\n     * @return the existence of the given data\\n     */\\n    function hasToken(address owner, uint96 data) internal view virtual returns (bool);\\n\\n    /**\\n     * @notice updates the set of contracts trusted to create new tokens and\\n     *         possibly resolve entitlement questions\\n     * @param prover the address of the prover\\n     * @param valid whether the prover is trusted\\n     */\\n    function setProver(address prover, bool valid) external onlyOwner {\\n        provers[prover] = valid;\\n    }\\n\\n    /**\\n     * @notice helper function to break a tokenId into its constituent data\\n     * @param tokenId the tokenId in question\\n     * @return who the address bound to this token\\n     * @return data any additional data bound to this token\\n     */\\n    function parseTokenId(uint256 tokenId) internal pure returns (address who, uint96 data) {\\n        who = address(bytes20(bytes32(tokenId << 96)));\\n        data = uint96(tokenId >> 160);\\n    }\\n\\n    /**\\n     * @notice issue a new Relic\\n     * @param who the address to which this token should be bound\\n     * @param data any data to be associated with this token\\n     * @dev emits ERC-721 Transfer event and ERC-5192 Locked event. Note\\n     *      that storage is not generally updated by this function.\\n     */\\n    function mint(address who, uint96 data) public virtual {\\n        require(provers[msg.sender], \\\"only a prover can mint\\\");\\n        require(hasToken(who, data), \\\"cannot mint for invalid token\\\");\\n\\n        uint256 id = uint256(uint160(who)) | (uint256(data) << 160);\\n        emit Transfer(address(0), who, id);\\n        emit Locked(id);\\n    }\\n\\n    /* begin ERC-721 spec functions */\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev If the token has not been issued (no transfer event) this function\\n     *      may still return an owner if there is an account entitled to this\\n     *      token.\\n     */\\n    function ownerOf(uint256 id) public view virtual returns (address who) {\\n        uint96 data;\\n        (who, data) = parseTokenId(id);\\n        if (!hasToken(who, data)) {\\n            who = address(0);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Balance will always be 0 if the address is not entitled to any\\n     *      tokens, and 1 if they are entitled to a token. If multiple tokens\\n     *      are minted, this will still return 1.\\n     */\\n    function balanceOf(address who) external view override returns (uint256 balance) {\\n        require(who != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        if (hasToken(who, 0)) {\\n            balance = 1;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Immediately reverts: Relics are soul-bound/non-transferrable\\n     */\\n    function safeTransferFrom(\\n        address, /* from */\\n        address, /* _to */\\n        uint256, /* _tokenId */\\n        bytes calldata /* data */\\n    ) external pure {\\n        revert(\\\"RelicToken is soulbound\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Immediately reverts: Relics are soul-bound/non-transferrable\\n     */\\n    function safeTransferFrom(\\n        address, /* from */\\n        address, /* to */\\n        uint256 /* tokenId */\\n    ) external pure {\\n        revert(\\\"RelicToken is soulbound\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Immediately reverts: Relics are soul-bound/non-transferrable\\n     */\\n    function transferFrom(\\n        address, /* from */\\n        address, /* to */\\n        uint256 /* id */\\n    ) external pure {\\n        revert(\\\"RelicToken is soulbound\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Immediately reverts: Relics are soul-bound/non-transferrable\\n     */\\n    function approve(\\n        address, /* to */\\n        uint256 /* tokenId */\\n    ) external pure {\\n        revert(\\\"RelicToken is soulbound\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Immediately reverts: Relics are soul-bound/non-transferrable\\n     */\\n    function setApprovalForAll(\\n        address, /* operator */\\n        bool /* _approved */\\n    ) external pure {\\n        revert(\\\"RelicToken is soulbound\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Always returns the null address: Relics are soul-bound/non-transferrable\\n     */\\n    function getApproved(\\n        uint256 /* tokenId */\\n    ) external pure returns (address operator) {\\n        operator = address(0);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721\\n     * @dev Always returns false: Relics are soul-bound/non-transferrable\\n     */\\n    function isApprovedForAll(\\n        address, /* owner */\\n        address /* operator */\\n    ) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     * @dev Supported interfaces: IERC721, IERC721Metadata, IERC5192\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return (interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC5192).interfaceId ||\\n            super.supportsInterface(interfaceId));\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() external pure virtual returns (string memory);\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() external pure virtual returns (string memory);\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenID) external view virtual returns (string memory);\\n\\n    /* end ERC-721 spec functions */\\n\\n    /* begin ERC-5192 spec functions */\\n    /**\\n     * @inheritdoc IERC5192\\n     * @dev All valid tokens are locked: Relics are soul-bound/non-transferrable\\n     */\\n    function locked(uint256 id) external view returns (bool) {\\n        return ownerOf(id) != address(0);\\n    }\\n\\n    /* end ERC-5192 spec functions */\\n\\n    /* begin OpenSea metadata functions */\\n    /**\\n     * @notice contract metadata URI as defined by OpenSea\\n     */\\n    function contractURI() external view returns (string memory) {\\n        return contractURIProvider.contractURI();\\n    }\\n\\n    /**\\n     * @notice set contract-level metadata URI provider\\n     * @param provider new metadata URI provider\\n     */\\n    function setContractURIProvider(IContractURI provider) external onlyOwner {\\n        contractURIProvider = provider;\\n    }\\n    /* end OpenSea metadata functions */\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBatchProver.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\nimport \\\"../lib/Facts.sol\\\";\\n\\npragma solidity >=0.8.12;\\n\\n/**\\n * @title IBatchProver\\n * @author Theori, Inc.\\n * @notice IBatchProver is a standard interface implemented by some Relic provers.\\n *         Supports proving multiple facts ephemerally or proving and storing\\n *         them in the Reliquary.\\n */\\ninterface IBatchProver {\\n    /**\\n     * @notice prove multiple facts ephemerally\\n     * @param proof the encoded proof, depends on the prover implementation\\n     * @param store whether to store the facts in the reliquary\\n     * @return facts the proven facts' information\\n     */\\n    function proveBatch(bytes calldata proof, bool store)\\n        external\\n        payable\\n        returns (Fact[] memory facts);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBlockHistory.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Block history provider\\n * @author Theori, Inc.\\n * @notice IBlockHistory provides a way to verify a blockhash\\n */\\n\\ninterface IBlockHistory {\\n    /**\\n     * @notice Determine if the given hash corresponds to the given block\\n     * @param hash the hash if the block in question\\n     * @param num the number of the block in question\\n     * @param proof any witness data required to prove the block hash is\\n     *        correct (such as a Merkle or SNARK proof)\\n     * @return boolean indicating if the block hash can be verified correct\\n     */\\n    function validBlockHash(\\n        bytes32 hash,\\n        uint256 num,\\n        bytes calldata proof\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IContractURI.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title NFT Contract Metadata URI provider\\n * @author Theori, Inc.\\n * @notice Outsourced contractURI provider for NFT/SBT tokens\\n */\\ninterface IContractURI {\\n    /**\\n     * @notice Get the contract metadata URI\\n     * @return the string of the URI\\n     */\\n    function contractURI() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC5192.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\n/**\\n * @title EIP-5192 specification\\n * @author Theori, Inc.\\n * @notice EIP-5192 events and functions\\n */\\ninterface IERC5192 {\\n    /// @notice Emitted when the locking status is changed to locked.\\n    /// @dev If a token is minted and the status is locked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Locked(uint256 tokenId);\\n\\n    /// @notice Emitted when the locking status is changed to unlocked.\\n    /// @dev If a token is minted and the status is unlocked, this event should be emitted.\\n    /// @param tokenId The identifier for a token.\\n    event Unlocked(uint256 tokenId);\\n\\n    /// @notice Returns the locking status of an Soulbound Token\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    /// about them do throw.\\n    /// @param tokenId The identifier for an SBT.\\n    function locked(uint256 tokenId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRecursiveVerifier.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\nimport {RecursiveProof} from \\\"../lib/Proofs.sol\\\";\\n\\n/**\\n * @title Verifier of zk-SNARK proofs\\n * @author Theori, Inc.\\n * @notice Provider of validity checking of zk-SNARKs\\n */\\ninterface IRecursiveVerifier {\\n    /**\\n     * @notice Checks the validity of SNARK data\\n     * @param proof the proof to verify\\n     * @return the validity of the proof\\n     */\\n    function verify(RecursiveProof calldata proof) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IReliquary.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"../lib/Facts.sol\\\";\\n\\ninterface IReliquary {\\n    event NewProver(address prover, uint64 version);\\n    event PendingProverAdded(address prover, uint64 version, uint64 timestamp);\\n    event ProverRevoked(address prover, uint64 version);\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct ProverInfo {\\n        uint64 version;\\n        FeeInfo feeInfo;\\n        bool revoked;\\n    }\\n\\n    enum FeeFlags {\\n        FeeNone,\\n        FeeNative,\\n        FeeCredits,\\n        FeeExternalDelegate,\\n        FeeExternalToken\\n    }\\n\\n    struct FeeInfo {\\n        uint8 flags;\\n        uint16 feeCredits;\\n        // feeWei = feeWeiMantissa * pow(10, feeWeiExponent)\\n        uint8 feeWeiMantissa;\\n        uint8 feeWeiExponent;\\n        uint32 feeExternalId;\\n    }\\n\\n    function ADD_PROVER_ROLE() external view returns (bytes32);\\n\\n    function CREDITS_ROLE() external view returns (bytes32);\\n\\n    function DEFAULT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    function DELAY() external view returns (uint64);\\n\\n    function GOVERNANCE_ROLE() external view returns (bytes32);\\n\\n    function SUBSCRIPTION_ROLE() external view returns (bytes32);\\n\\n    function activateProver(address prover) external;\\n\\n    function addCredits(address user, uint192 amount) external;\\n\\n    function addProver(address prover, uint64 version) external;\\n\\n    function addSubscriber(address user, uint64 ts) external;\\n\\n    function assertValidBlockHash(\\n        address verifier,\\n        bytes32 hash,\\n        uint256 num,\\n        bytes memory proof\\n    ) external payable;\\n\\n    function assertValidBlockHashFromProver(\\n        address verifier,\\n        bytes32 hash,\\n        uint256 num,\\n        bytes memory proof\\n    ) external view;\\n\\n    function checkProveFactFee(address sender) external payable;\\n\\n    function checkProver(ProverInfo memory prover) external pure;\\n\\n    function credits(address user) external view returns (uint192);\\n\\n    function debugValidBlockHash(\\n        address verifier,\\n        bytes32 hash,\\n        uint256 num,\\n        bytes memory proof\\n    ) external view returns (bool);\\n\\n    function debugVerifyFact(address account, FactSignature factSig)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint64 version,\\n            bytes memory data\\n        );\\n\\n    function factFees(uint8)\\n        external\\n        view\\n        returns (\\n            uint8 flags,\\n            uint16 feeCredits,\\n            uint8 feeWeiMantissa,\\n            uint8 feeWeiExponent,\\n            uint32 feeExternalId\\n        );\\n\\n    function feeAccounts(address)\\n        external\\n        view\\n        returns (uint64 subscriberUntilTime, uint192 credits);\\n\\n    function feeExternals(uint256) external view returns (address);\\n\\n    function getFact(address account, FactSignature factSig)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint64 version,\\n            bytes memory data\\n        );\\n\\n    function getProveFactNativeFee(address prover) external view returns (uint256);\\n\\n    function getProveFactTokenFee(address prover) external view returns (uint256);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function getVerifyFactNativeFee(FactSignature factSig) external view returns (uint256);\\n\\n    function getVerifyFactTokenFee(FactSignature factSig) external view returns (uint256);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function initialized() external view returns (bool);\\n\\n    function isSubscriber(address user) external view returns (bool);\\n\\n    function pendingProvers(address) external view returns (uint64 timestamp, uint64 version);\\n\\n    function provers(address) external view returns (ProverInfo memory);\\n\\n    function removeCredits(address user, uint192 amount) external;\\n\\n    function removeSubscriber(address user) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function resetFact(address account, FactSignature factSig) external;\\n\\n    function revokeProver(address prover) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function setCredits(address user, uint192 amount) external;\\n\\n    function setFact(\\n        address account,\\n        FactSignature factSig,\\n        bytes memory data\\n    ) external;\\n\\n    function setFactFee(\\n        uint8 cls,\\n        FeeInfo memory feeInfo,\\n        address feeExternal\\n    ) external;\\n\\n    function setInitialized() external;\\n\\n    function setProverFee(\\n        address prover,\\n        FeeInfo memory feeInfo,\\n        address feeExternal\\n    ) external;\\n\\n    function setValidBlockFee(FeeInfo memory feeInfo, address feeExternal) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    function validBlockHash(\\n        address verifier,\\n        bytes32 hash,\\n        uint256 num,\\n        bytes memory proof\\n    ) external payable returns (bool);\\n\\n    function validBlockHashFromProver(\\n        address verifier,\\n        bytes32 hash,\\n        uint256 num,\\n        bytes memory proof\\n    ) external view returns (bool);\\n\\n    function verifyBlockFeeInfo()\\n        external\\n        view\\n        returns (\\n            uint8 flags,\\n            uint16 feeCredits,\\n            uint8 feeWeiMantissa,\\n            uint8 feeWeiExponent,\\n            uint32 feeExternalId\\n        );\\n\\n    function verifyFact(address account, FactSignature factSig)\\n        external\\n        payable\\n        returns (\\n            bool exists,\\n            uint64 version,\\n            bytes memory data\\n        );\\n\\n    function verifyFactNoFee(address account, FactSignature factSig)\\n        external\\n        view\\n        returns (\\n            bool exists,\\n            uint64 version,\\n            bytes memory data\\n        );\\n\\n    function verifyFactVersion(address account, FactSignature factSig)\\n        external\\n        payable\\n        returns (bool exists, uint64 version);\\n\\n    function verifyFactVersionNoFee(address account, FactSignature factSig)\\n        external\\n        view\\n        returns (bool exists, uint64 version);\\n\\n    function versions(uint64) external view returns (address);\\n\\n    function withdrawFees(address token, address dest) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenURI.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title NFT Token URI provider\\n * @author Theori, Inc.\\n * @notice Outsourced tokenURI provider for NFT/SBT tokens\\n */\\ninterface ITokenURI {\\n    /**\\n     * @notice Get the URI for the given token\\n     * @param tokenID the unique ID for the token\\n     * @return the string of the URI\\n     * @dev when called with an invalid tokenID, this may revert,\\n     *      or it may return invalid output\\n     */\\n    function tokenURI(uint256 tokenID) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AnemoiJive.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title AnemoiJive\\n * @author Theori, Inc.\\n * @notice Implementation of the Anemoi hash function and Jive mode of operation\\n */\\nlibrary AnemoiJive {\\n    uint256 constant beta = 5;\\n    uint256 constant alpha_inv =\\n        17510594297471420177797124596205820070838691520332827474958563349260646796493;\\n    uint256 constant q =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant delta =\\n        8755297148735710088898562298102910035419345760166413737479281674630323398247;\\n\\n    function CD(uint256 round) internal pure returns (uint256, uint256) {\\n        if (round == 0)\\n            return (\\n                37,\\n                8755297148735710088898562298102910035419345760166413737479281674630323398284\\n            );\\n        if (round == 1)\\n            return (\\n                13352247125433170118601974521234241686699252132838635793584252509352796067497,\\n                5240474505904316858775051800099222288270827863409873986701694203345984265770\\n            );\\n        if (round == 2)\\n            return (\\n                8959866518978803666083663798535154543742217570455117599799616562379347639707,\\n                9012679925958717565787111885188464538194947839997341443807348023221726055342\\n            );\\n        if (round == 3)\\n            return (\\n                3222831896788299315979047232033900743869692917288857580060845801753443388885,\\n                21855834035835287540286238525800162342051591799629360593177152465113152235615\\n            );\\n        if (round == 4)\\n            return (\\n                11437915391085696126542499325791687418764799800375359697173212755436799377493,\\n                11227229470941648605622822052481187204980748641142847464327016901091886692935\\n            );\\n        if (round == 5)\\n            return (\\n                14725846076402186085242174266911981167870784841637418717042290211288365715997,\\n                8277823808153992786803029269162651355418392229624501612473854822154276610437\\n            );\\n        if (round == 6)\\n            return (\\n                3625896738440557179745980526949999799504652863693655156640745358188128872126,\\n                20904607884889140694334069064199005451741168419308859136555043894134683701950\\n            );\\n        if (round == 7)\\n            return (\\n                463291105983501380924034618222275689104775247665779333141206049632645736639,\\n                1902748146936068574869616392736208205391158973416079524055965306829204527070\\n            );\\n        if (round == 8)\\n            return (\\n                17443852951621246980363565040958781632244400021738903729528591709655537559937,\\n                14452570815461138929654743535323908350592751448372202277464697056225242868484\\n            );\\n        if (round == 9)\\n            return (\\n                10761214205488034344706216213805155745482379858424137060372633423069634639664,\\n                10548134661912479705005015677785100436776982856523954428067830720054853946467\\n            );\\n        if (round == 10)\\n            return (\\n                1555059412520168878870894914371762771431462665764010129192912372490340449901,\\n                17068729307795998980462158858164249718900656779672000551618940554342475266265\\n            );\\n        if (round == 11)\\n            return (\\n                7985258549919592662769781896447490440621354347569971700598437766156081995625,\\n                16199718037005378969178070485166950928725365516399196926532630556982133691321\\n            );\\n        if (round == 12)\\n            return (\\n                9570976950823929161626934660575939683401710897903342799921775980893943353035,\\n                19148564379197615165212957504107910110246052442686857059768087896511716255278\\n            );\\n        if (round == 13)\\n            return (\\n                17962366505931708682321542383646032762931774796150042922562707170594807376009,\\n                5497141763311860520411283868772341077137612389285480008601414949457218086902\\n            );\\n        if (round == 14)\\n            return (\\n                12386136552538719544323156650508108618627836659179619225468319506857645902649,\\n                18379046272821041930426853913114663808750865563081998867954732461233335541378\\n            );\\n        if (round == 15)\\n            return (\\n                21184636178578575123799189548464293431630680704815247777768147599366857217074,\\n                7696001730141875853127759241422464241772355903155684178131833937483164915734\\n            );\\n        if (round == 16)\\n            return (\\n                3021529450787050964585040537124323203563336821758666690160233275817988779052,\\n                963844642109550260189938374814031216012862679737123536423540607519656220143\\n            );\\n        if (round == 17)\\n            return (\\n                7005374570978576078843482270548485551486006385990713926354381743200520456088,\\n                12412434690468911461310698766576920805270445399824272791985598210955534611003\\n            );\\n        if (round == 18)\\n            return (\\n                3870834761329466217812893622834770840278912371521351591476987639109753753261,\\n                6971318955459107915662273112161635903624047034354567202210253298398705502050\\n            );\\n        revert();\\n    }\\n\\n    function expmod(\\n        uint256 base,\\n        uint256 e,\\n        uint256 m\\n    ) internal view returns (uint256 o) {\\n        assembly {\\n            // define pointer\\n            let p := mload(0x40)\\n            // store data assembly-favouring ways\\n            mstore(p, 0x20) // Length of Base\\n            mstore(add(p, 0x20), 0x20) // Length of Exponent\\n            mstore(add(p, 0x40), 0x20) // Length of Modulus\\n            mstore(add(p, 0x60), base) // Base\\n            mstore(add(p, 0x80), e) // Exponent\\n            mstore(add(p, 0xa0), m) // Modulus\\n            if iszero(staticcall(sub(gas(), 2000), 0x05, p, 0xc0, p, 0x20)) {\\n                revert(0, 0)\\n            }\\n            // data\\n            o := mload(p)\\n        }\\n    }\\n\\n    function sbox(uint256 x, uint256 y) internal view returns (uint256, uint256) {\\n        x = addmod(x, q - mulmod(beta, mulmod(y, y, q), q), q);\\n        y = addmod(y, q - expmod(x, alpha_inv, q), q);\\n        x = addmod(addmod(x, mulmod(beta, mulmod(y, y, q), q), q), delta, q);\\n        return (x, y);\\n    }\\n\\n    function ll(uint256 x, uint256 y) internal pure returns (uint256 r0, uint256 r1) {\\n        r0 = addmod(x, mulmod(5, y, q), q);\\n        r1 = addmod(y, mulmod(5, r0, q), q);\\n    }\\n\\n    function compress(uint256 x, uint256 y) internal view returns (uint256) {\\n        uint256 sum = addmod(x, y, q);\\n        uint256 c;\\n        uint256 d;\\n        for (uint256 r = 0; r < 19; r++) {\\n            (c, d) = CD(r);\\n            x = addmod(x, c, q);\\n            y = addmod(y, d, q);\\n            (x, y) = ll(x, y);\\n            (x, y) = sbox(x, y);\\n        }\\n        (x, y) = ll(x, y);\\n        return addmod(addmod(x, y, q), sum, q);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/AuxMerkleTree.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./AnemoiJive.sol\\\";\\n\\n/**\\n * @title Auxiliary Merkle Tree\\n * @author Theori, Inc.\\n * @notice Gas optimized arithmetic-friendly merkle tree code.\\n * @dev uses Anemoi / Jive 2-to-1\\n */\\nlibrary AuxMerkleTree {\\n    /**\\n     * @notice computes a jive merkle root of the provided hashes, in place\\n     * @param temp the mutable array of hashes\\n     * @return root the merkle root hash\\n     */\\n    function computeRoot(bytes32[] memory temp) internal view returns (bytes32 root) {\\n        uint256 count = temp.length;\\n        while (count > 1) {\\n            unchecked {\\n                for (uint256 i = 0; i < count / 2; i++) {\\n                    uint256 x;\\n                    uint256 y;\\n                    assembly {\\n                        let ptr := add(temp, add(0x20, mul(0x40, i)))\\n                        x := mload(ptr)\\n                        ptr := add(ptr, 0x20)\\n                        y := mload(ptr)\\n                    }\\n                    x = AnemoiJive.compress(x, y);\\n                    assembly {\\n                        mstore(add(temp, add(0x20, mul(0x20, i))), x)\\n                    }\\n                }\\n                count >>= 1;\\n            }\\n        }\\n        return temp[0];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/BytesCalldata.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.13;\\n\\n// custom bytes calldata pointer storing (length | offset) in one word,\\n// also allows calldata pointers to be stored in memory\\ntype BytesCalldata is uint256;\\n\\nusing BytesCalldataOps for BytesCalldata global;\\n\\n// can't introduce global using .. for non UDTs\\n// each consumer should add the following line:\\nusing BytesCalldataOps for bytes;\\n\\n/**\\n * @author Theori, Inc\\n * @title BytesCalldataOps\\n * @notice Common operations for bytes calldata, implemented for both the builtin\\n *         type and our BytesCalldata type. These operations are heavily optimized\\n *         and omit safety checks, so this library should only be used when memory\\n *         safety is not a security issue.\\n */\\nlibrary BytesCalldataOps {\\n    function length(BytesCalldata bc) internal pure returns (uint256 result) {\\n        assembly {\\n            result := shr(128, shl(128, bc))\\n        }\\n    }\\n\\n    function offset(BytesCalldata bc) internal pure returns (uint256 result) {\\n        assembly {\\n            result := shr(128, bc)\\n        }\\n    }\\n\\n    function convert(BytesCalldata bc) internal pure returns (bytes calldata value) {\\n        assembly {\\n            value.offset := shr(128, bc)\\n            value.length := shr(128, shl(128, bc))\\n        }\\n    }\\n\\n    function convert(bytes calldata inp) internal pure returns (BytesCalldata bc) {\\n        assembly {\\n            bc := or(shl(128, inp.offset), inp.length)\\n        }\\n    }\\n\\n    function slice(\\n        BytesCalldata bc,\\n        uint256 start,\\n        uint256 len\\n    ) internal pure returns (BytesCalldata result) {\\n        assembly {\\n            result := shl(128, add(shr(128, bc), start)) // add to the offset and clear the length\\n            result := or(result, len) // set the new length\\n        }\\n    }\\n\\n    function slice(\\n        bytes calldata value,\\n        uint256 start,\\n        uint256 len\\n    ) internal pure returns (bytes calldata result) {\\n        assembly {\\n            result.offset := add(value.offset, start)\\n            result.length := len\\n        }\\n    }\\n\\n    function prefix(BytesCalldata bc, uint256 len) internal pure returns (BytesCalldata result) {\\n        assembly {\\n            result := shl(128, shr(128, bc)) // clear out the length\\n            result := or(result, len) // set it to the new length\\n        }\\n    }\\n\\n    function prefix(bytes calldata value, uint256 len)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        assembly {\\n            result.offset := value.offset\\n            result.length := len\\n        }\\n    }\\n\\n    function suffix(BytesCalldata bc, uint256 start) internal pure returns (BytesCalldata result) {\\n        assembly {\\n            result := add(bc, shl(128, start)) // add to the offset\\n            result := sub(result, start) // subtract from the length\\n        }\\n    }\\n\\n    function suffix(bytes calldata value, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata result)\\n    {\\n        assembly {\\n            result.offset := add(value.offset, start)\\n            result.length := sub(value.length, start)\\n        }\\n    }\\n\\n    function split(BytesCalldata bc, uint256 start)\\n        internal\\n        pure\\n        returns (BytesCalldata, BytesCalldata)\\n    {\\n        return (prefix(bc, start), suffix(bc, start));\\n    }\\n\\n    function split(bytes calldata value, uint256 start)\\n        internal\\n        pure\\n        returns (bytes calldata, bytes calldata)\\n    {\\n        return (prefix(value, start), suffix(value, start));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/CoreTypes.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./BytesCalldata.sol\\\";\\nimport \\\"./RLP.sol\\\";\\n\\n/**\\n * @title CoreTypes\\n * @author Theori, Inc.\\n * @notice Data types and parsing functions for core types, including block headers\\n *         and account data.\\n */\\nlibrary CoreTypes {\\n    using BytesCalldataOps for bytes;\\n    struct BlockHeaderData {\\n        bytes32 ParentHash;\\n        address Coinbase;\\n        bytes32 Root;\\n        bytes32 TxHash;\\n        bytes32 ReceiptHash;\\n        uint256 Number;\\n        uint256 GasLimit;\\n        uint256 GasUsed;\\n        uint256 Time;\\n        bytes32 MixHash;\\n        uint256 BaseFee;\\n        bytes32 WithdrawalsHash;\\n    }\\n\\n    struct AccountData {\\n        uint256 Nonce;\\n        uint256 Balance;\\n        bytes32 StorageRoot;\\n        bytes32 CodeHash;\\n    }\\n\\n    struct LogData {\\n        address Address;\\n        bytes32[] Topics;\\n        bytes Data;\\n    }\\n\\n    struct WithdrawalData {\\n        uint256 Index;\\n        uint256 ValidatorIndex;\\n        address Address;\\n        uint256 AmountInGwei;\\n    }\\n\\n    function parseHash(bytes calldata buf) internal pure returns (bytes32 result, uint256 offset) {\\n        uint256 value;\\n        (value, offset) = RLP.parseUint(buf);\\n        result = bytes32(value);\\n    }\\n\\n    function parseAddress(bytes calldata buf)\\n        internal\\n        pure\\n        returns (address result, uint256 offset)\\n    {\\n        uint256 value;\\n        (value, offset) = RLP.parseUint(buf);\\n        result = address(uint160(value));\\n    }\\n\\n    function parseBlockHeader(bytes calldata header)\\n        internal\\n        pure\\n        returns (BlockHeaderData memory data)\\n    {\\n        (uint256 listSize, uint256 offset) = RLP.parseList(header);\\n        header = header.slice(offset, listSize);\\n\\n        (data.ParentHash, offset) = parseHash(header); // ParentHash\\n        header = header.suffix(offset);\\n        header = RLP.skip(header); // UncleHash\\n        (data.Coinbase, offset) = parseAddress(header); // Coinbase\\n        header = header.suffix(offset);\\n        (data.Root, offset) = parseHash(header); // Root\\n        header = header.suffix(offset);\\n        (data.TxHash, offset) = parseHash(header); // TxHash\\n        header = header.suffix(offset);\\n        (data.ReceiptHash, offset) = parseHash(header); // ReceiptHash\\n        header = header.suffix(offset);\\n        header = RLP.skip(header); // Bloom\\n        header = RLP.skip(header); // Difficulty\\n        (data.Number, offset) = RLP.parseUint(header); // Number\\n        header = header.suffix(offset);\\n        (data.GasLimit, offset) = RLP.parseUint(header); // GasLimit\\n        header = header.suffix(offset);\\n        (data.GasUsed, offset) = RLP.parseUint(header); // GasUsed\\n        header = header.suffix(offset);\\n        (data.Time, offset) = RLP.parseUint(header); // Time\\n        header = header.suffix(offset);\\n        header = RLP.skip(header); // Extra\\n        (data.MixHash, offset) = parseHash(header); // MixHash\\n        header = header.suffix(offset);\\n        header = RLP.skip(header); // Nonce\\n\\n        if (header.length > 0) {\\n            (data.BaseFee, offset) = RLP.parseUint(header); // BaseFee\\n            header = header.suffix(offset);\\n        }\\n\\n        if (header.length > 0) {\\n            (data.WithdrawalsHash, offset) = parseHash(header); // WithdrawalsHash\\n        }\\n    }\\n\\n    function getBlockHeaderHashAndSize(bytes calldata header)\\n        internal\\n        pure\\n        returns (bytes32 blockHash, uint256 headerSize)\\n    {\\n        (uint256 listSize, uint256 offset) = RLP.parseList(header);\\n        unchecked {\\n            headerSize = offset + listSize;\\n        }\\n        blockHash = keccak256(header.prefix(headerSize));\\n    }\\n\\n    function parseAccount(bytes calldata account) internal pure returns (AccountData memory data) {\\n        (, uint256 offset) = RLP.parseList(account);\\n        account = account.suffix(offset);\\n\\n        (data.Nonce, offset) = RLP.parseUint(account); // Nonce\\n        account = account.suffix(offset);\\n        (data.Balance, offset) = RLP.parseUint(account); // Balance\\n        account = account.suffix(offset);\\n        (data.StorageRoot, offset) = parseHash(account); // StorageRoot\\n        account = account.suffix(offset);\\n        (data.CodeHash, offset) = parseHash(account); // CodeHash\\n        account = account.suffix(offset);\\n    }\\n\\n    function parseLog(bytes calldata log) internal pure returns (LogData memory data) {\\n        (, uint256 offset) = RLP.parseList(log);\\n        log = log.suffix(offset);\\n\\n        uint256 tmp;\\n        (tmp, offset) = RLP.parseUint(log); // Address\\n        data.Address = address(uint160(tmp));\\n        log = log.suffix(offset);\\n\\n        (tmp, offset) = RLP.parseList(log); // Topics\\n        bytes calldata topics = log.slice(offset, tmp);\\n        log = log.suffix(offset + tmp);\\n\\n        require(topics.length % 33 == 0);\\n        data.Topics = new bytes32[](tmp / 33);\\n        uint256 i = 0;\\n        while (topics.length > 0) {\\n            (data.Topics[i], offset) = parseHash(topics);\\n            topics = topics.suffix(offset);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        (data.Data, ) = RLP.splitBytes(log);\\n    }\\n\\n    function extractLog(bytes calldata receiptValue, uint256 logIdx)\\n        internal\\n        pure\\n        returns (LogData memory)\\n    {\\n        // support EIP-2718: Currently all transaction types have the same\\n        // receipt RLP format, so we can just skip the receipt type byte\\n        if (receiptValue[0] < 0x80) {\\n            receiptValue = receiptValue.suffix(1);\\n        }\\n\\n        (, uint256 offset) = RLP.parseList(receiptValue);\\n        receiptValue = receiptValue.suffix(offset);\\n\\n        // pre EIP-658, receipts stored an intermediate state root in this field\\n        // post EIP-658, the field is a tx status (0 for failure, 1 for success)\\n        uint256 statusOrIntermediateRoot;\\n        (statusOrIntermediateRoot, offset) = RLP.parseUint(receiptValue);\\n        require(statusOrIntermediateRoot != 0, \\\"tx did not succeed\\\");\\n        receiptValue = receiptValue.suffix(offset);\\n\\n        receiptValue = RLP.skip(receiptValue); // GasUsed\\n        receiptValue = RLP.skip(receiptValue); // LogsBloom\\n\\n        uint256 length;\\n        (length, offset) = RLP.parseList(receiptValue); // Logs\\n        receiptValue = receiptValue.slice(offset, length);\\n\\n        // skip the earlier logs\\n        for (uint256 i = 0; i < logIdx; i++) {\\n            require(receiptValue.length > 0, \\\"log index does not exist\\\");\\n            receiptValue = RLP.skip(receiptValue);\\n        }\\n\\n        return parseLog(receiptValue);\\n    }\\n\\n    function parseWithdrawal(bytes calldata withdrawal)\\n        internal\\n        pure\\n        returns (WithdrawalData memory data)\\n    {\\n        (, uint256 offset) = RLP.parseList(withdrawal);\\n        withdrawal = withdrawal.suffix(offset);\\n\\n        (data.Index, offset) = RLP.parseUint(withdrawal); // Index\\n        withdrawal = withdrawal.suffix(offset);\\n        (data.ValidatorIndex, offset) = RLP.parseUint(withdrawal); // ValidatorIndex\\n        withdrawal = withdrawal.suffix(offset);\\n        (data.Address, offset) = parseAddress(withdrawal); // Address\\n        withdrawal = withdrawal.suffix(offset);\\n        (data.AmountInGwei, offset) = RLP.parseUint(withdrawal); // Amount\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FactSigs.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"./Facts.sol\\\";\\n\\n/**\\n * @title FactSigs\\n * @author Theori, Inc.\\n * @notice Helper functions for computing fact signatures\\n */\\nlibrary FactSigs {\\n    /**\\n     * @notice Produce the fact signature data for birth certificates\\n     */\\n    function birthCertificateFactSigData() internal pure returns (bytes memory) {\\n        return abi.encode(\\\"BirthCertificate\\\");\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature for a birth certificate fact\\n     */\\n    function birthCertificateFactSig() internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, birthCertificateFactSigData());\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for an account's storage root\\n     * @param blockNum the block number to look at\\n     * @param storageRoot the storageRoot for the account\\n     */\\n    function accountStorageFactSigData(uint256 blockNum, bytes32 storageRoot)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(\\\"AccountStorage\\\", blockNum, storageRoot);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for an account storage root\\n     * @param blockNum the block number to look at\\n     * @param storageRoot the storageRoot for the account\\n     */\\n    function accountStorageFactSig(uint256 blockNum, bytes32 storageRoot)\\n        internal\\n        pure\\n        returns (FactSignature)\\n    {\\n        return\\n            Facts.toFactSignature(Facts.NO_FEE, accountStorageFactSigData(blockNum, storageRoot));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for an account's code hash\\n     * @param blockNum the block number to look at\\n     * @param codeHash the codeHash for the account\\n     */\\n    function accountCodeHashFactSigData(uint256 blockNum, bytes32 codeHash)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(\\\"AccountCodeHash\\\", blockNum, codeHash);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for an account code hash\\n     * @param blockNum the block number to look at\\n     * @param codeHash the codeHash for the account\\n     */\\n    function accountCodeHashFactSig(uint256 blockNum, bytes32 codeHash)\\n        internal\\n        pure\\n        returns (FactSignature)\\n    {\\n        return Facts.toFactSignature(Facts.NO_FEE, accountCodeHashFactSigData(blockNum, codeHash));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for an account's nonce at a block\\n     * @param blockNum the block number to look at\\n     */\\n    function accountNonceFactSigData(uint256 blockNum) internal pure returns (bytes memory) {\\n        return abi.encode(\\\"AccountNonce\\\", blockNum);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for an account nonce at a block\\n     * @param blockNum the block number to look at\\n     */\\n    function accountNonceFactSig(uint256 blockNum) internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, accountNonceFactSigData(blockNum));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for an account's balance at a block\\n     * @param blockNum the block number to look at\\n     */\\n    function accountBalanceFactSigData(uint256 blockNum) internal pure returns (bytes memory) {\\n        return abi.encode(\\\"AccountBalance\\\", blockNum);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for an account balance a block\\n     * @param blockNum the block number to look at\\n     */\\n    function accountBalanceFactSig(uint256 blockNum) internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, accountBalanceFactSigData(blockNum));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for an account's raw header\\n     * @param blockNum the block number to look at\\n     */\\n    function accountFactSigData(uint256 blockNum) internal pure returns (bytes memory) {\\n        return abi.encode(\\\"Account\\\", blockNum);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for an account raw header\\n     * @param blockNum the block number to look at\\n     */\\n    function accountFactSig(uint256 blockNum) internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, accountFactSigData(blockNum));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for a storage slot\\n     * @param slot the account's slot\\n     * @param blockNum the block number to look at\\n     */\\n    function storageSlotFactSigData(bytes32 slot, uint256 blockNum)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(\\\"StorageSlot\\\", slot, blockNum);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for a storage slot\\n     * @param slot the account's slot\\n     * @param blockNum the block number to look at\\n     */\\n    function storageSlotFactSig(bytes32 slot, uint256 blockNum)\\n        internal\\n        pure\\n        returns (FactSignature)\\n    {\\n        return Facts.toFactSignature(Facts.NO_FEE, storageSlotFactSigData(slot, blockNum));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for a log\\n     * @param blockNum the block number to look at\\n     * @param txIdx the transaction index in the block\\n     * @param logIdx the log index in the transaction\\n     */\\n    function logFactSigData(\\n        uint256 blockNum,\\n        uint256 txIdx,\\n        uint256 logIdx\\n    ) internal pure returns (bytes memory) {\\n        return abi.encode(\\\"Log\\\", blockNum, txIdx, logIdx);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for a log\\n     * @param blockNum the block number to look at\\n     * @param txIdx the transaction index in the block\\n     * @param logIdx the log index in the transaction\\n     */\\n    function logFactSig(\\n        uint256 blockNum,\\n        uint256 txIdx,\\n        uint256 logIdx\\n    ) internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, logFactSigData(blockNum, txIdx, logIdx));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for a block header\\n     * @param blockNum the block number\\n     */\\n    function blockHeaderSigData(uint256 blockNum) internal pure returns (bytes memory) {\\n        return abi.encode(\\\"BlockHeader\\\", blockNum);\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for a block header\\n     * @param blockNum the block number\\n     */\\n    function blockHeaderSig(uint256 blockNum) internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, blockHeaderSigData(blockNum));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for a withdrawal\\n     * @param blockNum the block number\\n     * @param index the withdrawal index\\n     */\\n    function withdrawalSigData(uint256 blockNum, uint256 index)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(\\\"Withdrawal\\\", blockNum, index);\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature for a withdrawal\\n     * @param blockNum the block number\\n     * @param index the withdrawal index\\n     */\\n    function withdrawalFactSig(uint256 blockNum, uint256 index)\\n        internal\\n        pure\\n        returns (FactSignature)\\n    {\\n        return Facts.toFactSignature(Facts.NO_FEE, withdrawalSigData(blockNum, index));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for an event fact\\n     * @param eventId The event in question\\n     */\\n    function eventFactSigData(uint64 eventId) internal pure returns (bytes memory) {\\n        return abi.encode(\\\"EventAttendance\\\", \\\"EventID\\\", eventId);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for a given event\\n     * @param eventId The event in question\\n     */\\n    function eventFactSig(uint64 eventId) internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, eventFactSigData(eventId));\\n    }\\n\\n    /**\\n     * @notice Produce the fact signature data for a transaction fact\\n     * @param transaction the transaction hash to be proven\\n     */\\n    function transactionFactSigData(bytes32 transaction) internal pure returns (bytes memory) {\\n        return abi.encode(\\\"Transaction\\\", transaction);\\n    }\\n\\n    /**\\n     * @notice Produce a fact signature for a transaction\\n     * @param transaction the transaction hash to be proven\\n     */\\n    function transactionFactSig(bytes32 transaction) internal pure returns (FactSignature) {\\n        return Facts.toFactSignature(Facts.NO_FEE, transactionFactSigData(transaction));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Facts.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\ntype FactSignature is bytes32;\\n\\nstruct Fact {\\n    address account;\\n    FactSignature sig;\\n    bytes data;\\n}\\n\\nlibrary Facts {\\n    uint8 internal constant NO_FEE = 0;\\n\\n    function toFactSignature(uint8 cls, bytes memory data) internal pure returns (FactSignature) {\\n        return FactSignature.wrap(bytes32((uint256(keccak256(data)) << 8) | cls));\\n    }\\n\\n    function toFactClass(FactSignature factSig) internal pure returns (uint8) {\\n        return uint8(uint256(FactSignature.unwrap(factSig)));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/MPT.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\n/**\\n * @title MPT\\n * @author Theori, Inc.\\n * @notice Implements proof checking for Ethereum Merkle-Patricia Tries.\\n *         To save gas, it assumes nodes are validly structured,\\n *         so soundness is only guaranteed if the rootHash belongs\\n *         to a valid ethereum block.\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./RLP.sol\\\";\\nimport \\\"./CoreTypes.sol\\\";\\nimport \\\"./BytesCalldata.sol\\\";\\n\\nlibrary MPT {\\n    using BytesCalldataOps for bytes;\\n\\n    struct Node {\\n        BytesCalldata data;\\n        bytes32 hash;\\n    }\\n\\n    // prefix constants\\n    uint8 constant ODD_LENGTH = 1;\\n    uint8 constant LEAF = 2;\\n    uint8 constant MAX_PREFIX = 3;\\n\\n    /**\\n     * @notice parses concatenated MPT nodes into processed Node structs\\n     * @param input the concatenated MPT nodes\\n     * @return result the parsed nodes array, containing a calldata slice and hash\\n     *                for each node\\n     */\\n    function parseNodes(bytes calldata input) internal pure returns (Node[] memory result) {\\n        uint256 freePtr;\\n        uint256 firstNode;\\n\\n        // we'll use a dynamic amount of memory starting at the free pointer\\n        // it is crucial that no other allocations happen during parsing\\n        assembly {\\n            freePtr := mload(0x40)\\n\\n            // corrupt free pointer to cause out-of-gas if allocation occurs\\n            mstore(0x40, 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc)\\n\\n            firstNode := freePtr\\n        }\\n\\n        uint256 count;\\n        while (input.length > 0) {\\n            (uint256 listsize, uint256 offset) = RLP.parseList(input);\\n            bytes calldata node = input.slice(offset, listsize);\\n            BytesCalldata slice = node.convert();\\n\\n            uint256 len;\\n            assembly {\\n                len := add(listsize, offset)\\n\\n                // compute node hash\\n                calldatacopy(freePtr, input.offset, len)\\n                let nodeHash := keccak256(freePtr, len)\\n\\n                // store the Node struct (calldata slice and hash)\\n                mstore(freePtr, slice)\\n                mstore(add(freePtr, 0x20), nodeHash)\\n\\n                // advance pointer\\n                count := add(count, 1)\\n                freePtr := add(freePtr, 0x40)\\n            }\\n\\n            input = input.suffix(len);\\n        }\\n\\n        assembly {\\n            // allocate the result array and fill it with the node pointers\\n            result := freePtr\\n            mstore(result, count)\\n            freePtr := add(freePtr, 0x20)\\n            for {\\n                let i := 0\\n            } lt(i, count) {\\n                i := add(i, 1)\\n            } {\\n                mstore(freePtr, add(firstNode, mul(0x40, i)))\\n                freePtr := add(freePtr, 0x20)\\n            }\\n\\n            // update the free pointer\\n            mstore(0x40, freePtr)\\n        }\\n    }\\n\\n    /**\\n     * @notice parses a compressed MPT proof into arrays of Node structs\\n     * @param nodes the set of nodes used in the compressed proofs\\n     * @param compressed the compressed MPT proof\\n     * @param count the number of proofs expected from the compressed proof\\n     * @return result the array of proofs\\n     */\\n    function parseCompressedProofs(\\n        Node[] memory nodes,\\n        bytes calldata compressed,\\n        uint256 count\\n    ) internal pure returns (Node[][] memory result) {\\n        uint256 resultPtr;\\n        uint256 freePtr;\\n\\n        // we'll use a dynamic amount of memory starting at the free pointer\\n        // it is crucial that no other allocations happen during parsing\\n        assembly {\\n            result := mload(0x40)\\n\\n            // corrupt free pointer to cause out-of-gas if allocation occurs\\n            mstore(0x40, 0xcccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc)\\n\\n            mstore(result, count)\\n            resultPtr := add(result, 0x20)\\n            freePtr := add(resultPtr, mul(0x20, count))\\n        }\\n\\n        (uint256 listSize, uint256 offset) = RLP.parseList(compressed);\\n        compressed = compressed.slice(offset, listSize);\\n\\n        // parse the indices and populate the proof list\\n        for (; count > 0; count--) {\\n            bytes calldata indices;\\n            (listSize, offset) = RLP.parseList(compressed);\\n            indices = compressed.slice(offset, listSize);\\n            compressed = compressed.suffix(listSize + offset);\\n\\n            // begin next proof array\\n            uint256 arr;\\n            assembly {\\n                arr := freePtr\\n                freePtr := add(freePtr, 0x20)\\n            }\\n\\n            // fill proof array\\n            uint256 len;\\n            for (len = 0; indices.length > 0; len++) {\\n                uint256 idx;\\n                (idx, offset) = RLP.parseUint(indices);\\n                indices = indices.suffix(offset);\\n                require(idx < nodes.length, \\\"invalid node index in compressed proof\\\");\\n                assembly {\\n                    let node := mload(add(add(nodes, 0x20), mul(0x20, idx)))\\n                    mstore(freePtr, node)\\n                    freePtr := add(freePtr, 0x20)\\n                }\\n            }\\n\\n            assembly {\\n                // store the array length\\n                mstore(arr, len)\\n\\n                // store the array pointer in the result\\n                mstore(resultPtr, arr)\\n                resultPtr := add(resultPtr, 0x20)\\n            }\\n        }\\n\\n        assembly {\\n            // update the free pointer\\n            mstore(0x40, freePtr)\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if the provided bytes match the key at a given offset\\n     * @param key the MPT key to check against\\n     * @param keyLen the length (in nibbles) of the key\\n     * @param testBytes the subkey to check\\n     */\\n    function subkeysEqual(\\n        bytes32 key,\\n        uint256 keyLen,\\n        bytes calldata testBytes\\n    ) private pure returns (bool result) {\\n        // arithmetic cannot overflow because testBytes is from calldata\\n        uint256 nibbleLength;\\n        unchecked {\\n            nibbleLength = 2 * testBytes.length;\\n            require(nibbleLength <= keyLen);\\n        }\\n\\n        assembly {\\n            let shiftAmount := sub(256, shl(2, nibbleLength))\\n            let testValue := shr(shiftAmount, calldataload(testBytes.offset))\\n            let subkey := shr(shiftAmount, key)\\n            result := eq(testValue, subkey)\\n        }\\n    }\\n\\n    /**\\n     * @notice checks the MPT proof. Note: for certain optimizations, we assume\\n     *         that the rootHash belongs to a valid ethereum block. Correctness\\n     *         is only guaranteed in that case.\\n     *         Gas usage depends on both proof size and key nibble values.\\n     *         Gas usage for actual ethereum account proofs: ~ 30000 - 45000\\n     * @param nodes MPT proof nodes, parsed using parseNodes()\\n     * @param key the MPT key, padded with trailing 0s if needed\\n     * @param keyLen the byte length of the MPT key, must be <= 32\\n     * @param expectedHash the root hash of the MPT\\n     */\\n    function verifyTrieValueWithNodes(\\n        Node[] memory nodes,\\n        bytes32 key,\\n        uint256 keyLen,\\n        bytes32 expectedHash\\n    ) internal pure returns (bool exists, bytes calldata value) {\\n        // handle completely empty trie case\\n        if (nodes.length == 0) {\\n            require(keccak256(hex\\\"80\\\") == expectedHash, \\\"root hash incorrect\\\");\\n            return (false, msg.data[:0]);\\n        }\\n\\n        // we will read the key nibble by nibble, so double the length\\n        unchecked {\\n            keyLen *= 2;\\n        }\\n\\n        // initialize return values to make solc happy;\\n        // one will always be overwritten before returing\\n        assembly {\\n            value.offset := 0\\n            value.length := 0\\n        }\\n        exists = true;\\n\\n        // we'll use nodes as a pointer, advancing through each element\\n        // end will point to the end of the array\\n        uint256 end;\\n        assembly {\\n            end := add(nodes, add(0x20, mul(0x20, mload(nodes))))\\n            nodes := add(nodes, 0x20)\\n        }\\n\\n        while (true) {\\n            bytes calldata node;\\n            {\\n                BytesCalldata slice;\\n                bytes32 nodeHash;\\n\\n                // load the element and advance the proof pointer\\n                assembly {\\n                    // bounds checking\\n                    if iszero(lt(nodes, end)) {\\n                        revert(0, 0)\\n                    }\\n\\n                    let ptr := mload(nodes)\\n                    nodes := add(nodes, 0x20)\\n\\n                    slice := mload(ptr)\\n                    nodeHash := mload(add(ptr, 0x20))\\n                }\\n                node = slice.convert();\\n\\n                require(nodeHash == expectedHash, \\\"node hash incorrect\\\");\\n            }\\n\\n            // find the length of the first two elements\\n            uint256 size = RLP.nextSize(node);\\n            unchecked {\\n                size += RLP.nextSize(node.suffix(size));\\n            }\\n\\n            // we now know which type of node we're looking at:\\n            // leaf + extension nodes have 2 list elements, branch nodes have 17\\n            if (size == node.length) {\\n                // only two elements, leaf or extension node\\n                bytes calldata encodedPath;\\n                (encodedPath, node) = RLP.splitBytes(node);\\n\\n                // keep track of whether the key nibbles match\\n                bool keysMatch;\\n\\n                // the first nibble of the encodedPath tells us the type of\\n                // node and if it contains an even or odd number of nibbles\\n                uint8 firstByte = uint8(encodedPath[0]);\\n                uint8 prefix = firstByte >> 4;\\n                require(prefix <= MAX_PREFIX);\\n                if (prefix & ODD_LENGTH == 0) {\\n                    // second nibble is padding, must be 0\\n                    require(firstByte & 0xf == 0);\\n                    keysMatch = true;\\n                } else {\\n                    // second nibble is part of key\\n                    keysMatch = (firstByte & 0xf) == (uint8(bytes1(key)) >> 4);\\n                    unchecked {\\n                        key <<= 4;\\n                        keyLen--;\\n                    }\\n                }\\n\\n                // check the remainder of the encodedPath\\n                encodedPath = encodedPath.suffix(1);\\n                keysMatch = keysMatch && subkeysEqual(key, keyLen, encodedPath);\\n                // cannot overflow because encodedPath is from calldata\\n                unchecked {\\n                    key <<= 8 * encodedPath.length;\\n                    keyLen -= 2 * encodedPath.length;\\n                }\\n\\n                if (prefix & LEAF == 0) {\\n                    // extension can't prove nonexistence, subkeys must match\\n                    require(keysMatch);\\n\\n                    (expectedHash, ) = CoreTypes.parseHash(node);\\n                } else {\\n                    // leaf node, must have used all of key\\n                    require(keyLen == 0);\\n\\n                    if (keysMatch) {\\n                        // if keys equal, we found the value\\n                        (value, node) = RLP.splitBytes(node);\\n                        break;\\n                    } else {\\n                        // if keys aren't equal, key doesn't exist\\n                        exists = false;\\n                        break;\\n                    }\\n                }\\n            } else {\\n                // branch node, this is the hotspot for gas usage\\n\\n                // there should be 17 elements (16 branch hashes + a value)\\n                // we won't explicitly check this in order to save gas, since\\n                // it's implied by inclusion in a valid ethereum block\\n\\n                // also note, we never need the value element because we assume\\n                // uniquely-prefixed keys, so branch nodes never hold values\\n\\n                // fetch the branch for the next nibble of the key\\n                uint256 keyNibble = uint256(key >> 252);\\n\\n                // skip past the branches we don't need\\n                // we already skipped past 2 elements; start there if we can\\n                uint256 i = 0;\\n                if (keyNibble >= 2) {\\n                    i = 2;\\n                    node = node.suffix(size);\\n                }\\n                while (i < keyNibble) {\\n                    node = RLP.skip(node);\\n                    unchecked {\\n                        i++;\\n                    }\\n                }\\n\\n                (expectedHash, ) = CoreTypes.parseHash(node);\\n                // if we've reached an empty branch, key doesn't exist\\n                if (expectedHash == 0) {\\n                    exists = false;\\n                    break;\\n                }\\n                unchecked {\\n                    key <<= 4;\\n                    keyLen -= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice checks the MPT proof. Note: for certain optimizations, we assume\\n     *         that the rootHash belongs to a valid ethereum block. Correctness\\n     *         is only guaranteed in that case.\\n     *         Gas usage depends on both proof size and key nibble values.\\n     *         Gas usage for actual ethereum account proofs: ~ 30000 - 45000\\n     * @param proof the encoded MPT proof noodes concatenated\\n     * @param key the MPT key, padded with trailing 0s if needed\\n     * @param keyLen the byte length of the MPT key, must be <= 32\\n     * @param rootHash the root hash of the MPT\\n     */\\n    function verifyTrieValue(\\n        bytes calldata proof,\\n        bytes32 key,\\n        uint256 keyLen,\\n        bytes32 rootHash\\n    ) internal pure returns (bool exists, bytes calldata value) {\\n        Node[] memory nodes = parseNodes(proof);\\n        return verifyTrieValueWithNodes(nodes, key, keyLen, rootHash);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/MerkleTree.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Merkle Tree\\n * @author Theori, Inc.\\n * @notice Gas optimized SHA256 Merkle tree code.\\n */\\nlibrary MerkleTree {\\n    /**\\n     * @notice computes a SHA256 merkle root of the provided hashes, in place\\n     * @param temp the mutable array of hashes\\n     * @return the merkle root hash\\n     */\\n    function computeRoot(bytes32[] memory temp) internal view returns (bytes32) {\\n        uint256 count = temp.length;\\n        assembly {\\n            // repeat until we arrive at one root hash\\n            for {\\n\\n            } gt(count, 1) {\\n\\n            } {\\n                let dataElementLocation := add(temp, 0x20)\\n                let hashElementLocation := add(temp, 0x20)\\n                for {\\n                    let i := 0\\n                } lt(i, count) {\\n                    i := add(i, 2)\\n                } {\\n                    if iszero(\\n                        staticcall(gas(), 0x2, hashElementLocation, 0x40, dataElementLocation, 0x20)\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    dataElementLocation := add(dataElementLocation, 0x20)\\n                    hashElementLocation := add(hashElementLocation, 0x40)\\n                }\\n                count := shr(1, count)\\n            }\\n        }\\n        return temp[0];\\n    }\\n\\n    /**\\n     * @notice check if a hash is in the merkle tree for rootHash\\n     * @param rootHash the merkle root\\n     * @param index the index of the node to check\\n     * @param hash the hash to check\\n     * @param proofHashes the proof, i.e. the sequence of siblings from the\\n     *        node to root\\n     */\\n    function validProof(\\n        bytes32 rootHash,\\n        uint256 index,\\n        bytes32 hash,\\n        bytes32[] memory proofHashes\\n    ) internal view returns (bool result) {\\n        assembly {\\n            let constructedHash := hash\\n            let length := mload(proofHashes)\\n            let start := add(proofHashes, 0x20)\\n            let end := add(start, mul(length, 0x20))\\n            for {\\n                let ptr := start\\n            } lt(ptr, end) {\\n                ptr := add(ptr, 0x20)\\n            } {\\n                let proofHash := mload(ptr)\\n\\n                // use scratch space (0x0 - 0x40) for hash input\\n                switch and(index, 1)\\n                case 0 {\\n                    mstore(0x0, constructedHash)\\n                    mstore(0x20, proofHash)\\n                }\\n                case 1 {\\n                    mstore(0x0, proofHash)\\n                    mstore(0x20, constructedHash)\\n                }\\n\\n                // compute sha256\\n                if iszero(staticcall(gas(), 0x2, 0x0, 0x40, 0x0, 0x20)) {\\n                    revert(0, 0)\\n                }\\n                constructedHash := mload(0x0)\\n\\n                index := shr(1, index)\\n            }\\n            result := eq(constructedHash, rootHash)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Proofs.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\n/*\\n * @author Theori, Inc.\\n */\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nuint256 constant BASE_PROOF_SIZE = 34;\\nuint256 constant SUBPROOF_LIMBS_SIZE = 16;\\n\\nstruct RecursiveProof {\\n    uint256[BASE_PROOF_SIZE] base;\\n    uint256[SUBPROOF_LIMBS_SIZE] subproofLimbs;\\n    uint256[] inputs;\\n}\\n\\nstruct SignedRecursiveProof {\\n    RecursiveProof inner;\\n    bytes signature;\\n}\\n\\n/**\\n * @notice recover the signer of the proof\\n * @param proof the SignedRecursiveProof\\n * @return the address of the signer\\n */\\nfunction getProofSigner(SignedRecursiveProof calldata proof) pure returns (address) {\\n    bytes32 msgHash = keccak256(\\n        abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", \\\"32\\\", hashProof(proof.inner))\\n    );\\n    return ECDSA.recover(msgHash, proof.signature);\\n}\\n\\n/**\\n * @notice hash the contents of a RecursiveProof\\n * @param proof the RecursiveProof\\n * @return result a 32-byte digest of the proof\\n */\\nfunction hashProof(RecursiveProof calldata proof) pure returns (bytes32 result) {\\n    uint256[] calldata inputs = proof.inputs;\\n    assembly {\\n        let ptr := mload(0x40)\\n        let contigLen := mul(0x20, add(BASE_PROOF_SIZE, SUBPROOF_LIMBS_SIZE))\\n        let inputsLen := mul(0x20, inputs.length)\\n        calldatacopy(ptr, proof, contigLen)\\n        calldatacopy(add(ptr, contigLen), inputs.offset, inputsLen)\\n        result := keccak256(ptr, add(contigLen, inputsLen))\\n    }\\n}\\n\\n/**\\n * @notice reverse the byte order of a uint256\\n * @param input the input value\\n * @return v the byte-order reversed value\\n */\\nfunction byteReverse(uint256 input) pure returns (uint256 v) {\\n    v = input;\\n\\n    uint256 MASK08 = 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00;\\n    uint256 MASK16 = 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000;\\n    uint256 MASK32 = 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000;\\n    uint256 MASK64 = 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000;\\n\\n    // swap bytes\\n    v = ((v & MASK08) >> 8) | ((v & (~MASK08)) << 8);\\n\\n    // swap 2-byte long pairs\\n    v = ((v & MASK16) >> 16) | ((v & (~MASK16)) << 16);\\n\\n    // swap 4-byte long pairs\\n    v = ((v & MASK32) >> 32) | ((v & (~MASK32)) << 32);\\n\\n    // swap 8-byte long pairs\\n    v = ((v & MASK64) >> 64) | ((v & (~MASK64)) << 64);\\n\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n}\\n\\n/**\\n * @notice reads a 32-byte hash from its little-endian word-encoded form\\n * @param words the hash words\\n * @return the hash\\n */\\nfunction readHashWords(uint256[] calldata words) pure returns (bytes32) {\\n    uint256 mask = 0xffffffffffffffff;\\n    uint256 result = (words[0] & mask);\\n    result |= (words[1] & mask) << 0x40;\\n    result |= (words[2] & mask) << 0x80;\\n    result |= (words[3] & mask) << 0xc0;\\n    return bytes32(byteReverse(result));\\n}\\n\"\r\n    },\r\n    \"contracts/lib/RLP.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title RLP\\n * @author Theori, Inc.\\n * @notice Gas optimized RLP parsing code. Note that some parsing logic is\\n *         duplicated because helper functions are oddly expensive.\\n */\\nlibrary RLP {\\n    function parseUint(bytes calldata buf) internal pure returns (uint256 result, uint256 size) {\\n        assembly {\\n            // check that we have at least one byte of input\\n            if iszero(buf.length) {\\n                revert(0, 0)\\n            }\\n            let first32 := calldataload(buf.offset)\\n            let kind := shr(248, first32)\\n\\n            // ensure it's a not a long string or list (> 0xB7)\\n            // also ensure it's not a short string longer than 32 bytes (> 0xA0)\\n            if gt(kind, 0xA0) {\\n                revert(0, 0)\\n            }\\n\\n            switch lt(kind, 0x80)\\n            case true {\\n                // small single byte\\n                result := kind\\n                size := 1\\n            }\\n            case false {\\n                // short string\\n                size := sub(kind, 0x80)\\n\\n                // ensure it's not reading out of bounds\\n                if lt(buf.length, size) {\\n                    revert(0, 0)\\n                }\\n\\n                switch eq(size, 32)\\n                case true {\\n                    // if it's exactly 32 bytes, read it from calldata\\n                    result := calldataload(add(buf.offset, 1))\\n                }\\n                case false {\\n                    // if it's < 32 bytes, we've already read it from calldata\\n                    result := shr(shl(3, sub(32, size)), shl(8, first32))\\n                }\\n                size := add(size, 1)\\n            }\\n        }\\n    }\\n\\n    function nextSize(bytes calldata buf) internal pure returns (uint256 size) {\\n        assembly {\\n            if iszero(buf.length) {\\n                revert(0, 0)\\n            }\\n            let first32 := calldataload(buf.offset)\\n            let kind := shr(248, first32)\\n\\n            switch lt(kind, 0x80)\\n            case true {\\n                // small single byte\\n                size := 1\\n            }\\n            case false {\\n                switch lt(kind, 0xB8)\\n                case true {\\n                    // short string\\n                    size := add(1, sub(kind, 0x80))\\n                }\\n                case false {\\n                    switch lt(kind, 0xC0)\\n                    case true {\\n                        // long string\\n                        let lengthSize := sub(kind, 0xB7)\\n\\n                        // ensure that we don't overflow\\n                        if gt(lengthSize, 31) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // ensure that we don't read out of bounds\\n                        if lt(buf.length, lengthSize) {\\n                            revert(0, 0)\\n                        }\\n                        size := shr(mul(8, sub(32, lengthSize)), shl(8, first32))\\n                        size := add(size, add(1, lengthSize))\\n                    }\\n                    case false {\\n                        switch lt(kind, 0xF8)\\n                        case true {\\n                            // short list\\n                            size := add(1, sub(kind, 0xC0))\\n                        }\\n                        case false {\\n                            let lengthSize := sub(kind, 0xF7)\\n\\n                            // ensure that we don't overflow\\n                            if gt(lengthSize, 31) {\\n                                revert(0, 0)\\n                            }\\n                            // ensure that we don't read out of bounds\\n                            if lt(buf.length, lengthSize) {\\n                                revert(0, 0)\\n                            }\\n                            size := shr(mul(8, sub(32, lengthSize)), shl(8, first32))\\n                            size := add(size, add(1, lengthSize))\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function skip(bytes calldata buf) internal pure returns (bytes calldata) {\\n        uint256 size = RLP.nextSize(buf);\\n        assembly {\\n            buf.offset := add(buf.offset, size)\\n            buf.length := sub(buf.length, size)\\n        }\\n        return buf;\\n    }\\n\\n    function parseList(bytes calldata buf)\\n        internal\\n        pure\\n        returns (uint256 listSize, uint256 offset)\\n    {\\n        assembly {\\n            // check that we have at least one byte of input\\n            if iszero(buf.length) {\\n                revert(0, 0)\\n            }\\n            let first32 := calldataload(buf.offset)\\n            let kind := shr(248, first32)\\n\\n            // ensure it's a list\\n            if lt(kind, 0xC0) {\\n                revert(0, 0)\\n            }\\n\\n            switch lt(kind, 0xF8)\\n            case true {\\n                // short list\\n                listSize := sub(kind, 0xC0)\\n                offset := 1\\n            }\\n            case false {\\n                // long list\\n                let lengthSize := sub(kind, 0xF7)\\n\\n                // ensure that we don't overflow\\n                if gt(lengthSize, 31) {\\n                    revert(0, 0)\\n                }\\n                // ensure that we don't read out of bounds\\n                if lt(buf.length, lengthSize) {\\n                    revert(0, 0)\\n                }\\n                listSize := shr(mul(8, sub(32, lengthSize)), shl(8, first32))\\n                offset := add(lengthSize, 1)\\n            }\\n        }\\n    }\\n\\n    function splitBytes(bytes calldata buf)\\n        internal\\n        pure\\n        returns (bytes calldata result, bytes calldata rest)\\n    {\\n        uint256 offset;\\n        uint256 size;\\n        assembly {\\n            // check that we have at least one byte of input\\n            if iszero(buf.length) {\\n                revert(0, 0)\\n            }\\n            let first32 := calldataload(buf.offset)\\n            let kind := shr(248, first32)\\n\\n            // ensure it's a not list\\n            if gt(kind, 0xBF) {\\n                revert(0, 0)\\n            }\\n\\n            switch lt(kind, 0x80)\\n            case true {\\n                // small single byte\\n                offset := 0\\n                size := 1\\n            }\\n            case false {\\n                switch lt(kind, 0xB8)\\n                case true {\\n                    // short string\\n                    offset := 1\\n                    size := sub(kind, 0x80)\\n                }\\n                case false {\\n                    // long string\\n                    let lengthSize := sub(kind, 0xB7)\\n\\n                    // ensure that we don't overflow\\n                    if gt(lengthSize, 31) {\\n                        revert(0, 0)\\n                    }\\n                    // ensure we don't read out of bounds\\n                    if lt(buf.length, lengthSize) {\\n                        revert(0, 0)\\n                    }\\n                    size := shr(mul(8, sub(32, lengthSize)), shl(8, first32))\\n                    offset := add(lengthSize, 1)\\n                }\\n            }\\n\\n            result.offset := add(buf.offset, offset)\\n            result.length := size\\n\\n            let end := add(offset, size)\\n            rest.offset := add(buf.offset, end)\\n            rest.length := sub(buf.length, end)\\n        }\\n    }\\n\\n    function encodeUint(uint256 value) internal pure returns (bytes memory) {\\n        // allocate our result bytes\\n        bytes memory result = new bytes(33);\\n\\n        if (value == 0) {\\n            // store length = 1, value = 0x80\\n            assembly {\\n                mstore(add(result, 1), 0x180)\\n            }\\n            return result;\\n        }\\n\\n        if (value < 128) {\\n            // store length = 1, value = value\\n            assembly {\\n                mstore(add(result, 1), or(0x100, value))\\n            }\\n            return result;\\n        }\\n\\n        if (value > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n            // length 33, prefix 0xa0 followed by value\\n            assembly {\\n                mstore(add(result, 1), 0x21a0)\\n                mstore(add(result, 33), value)\\n            }\\n            return result;\\n        }\\n\\n        if (value > 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n            // length 32, prefix 0x9f followed by value\\n            assembly {\\n                mstore(add(result, 1), 0x209f)\\n                mstore(add(result, 33), shl(8, value))\\n            }\\n            return result;\\n        }\\n\\n        assembly {\\n            let length := 1\\n            for {\\n                let min := 0x100\\n            } lt(sub(min, 1), value) {\\n                min := shl(8, min)\\n            } {\\n                length := add(length, 1)\\n            }\\n\\n            let bytesLength := add(length, 1)\\n\\n            // bytes length field\\n            let hi := shl(mul(bytesLength, 8), bytesLength)\\n\\n            // rlp encoding of value\\n            let lo := or(shl(mul(length, 8), add(length, 0x80)), value)\\n\\n            mstore(add(result, bytesLength), or(hi, lo))\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/provers/BatchProver.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"../interfaces/IReliquary.sol\\\";\\nimport \\\"../interfaces/IBatchProver.sol\\\";\\n\\nabstract contract BatchProver is ERC165, IBatchProver {\\n    IReliquary immutable reliquary;\\n\\n    constructor(IReliquary _reliquary) {\\n        reliquary = _reliquary;\\n    }\\n\\n    // Signaling event for off-chain indexers, does not contain data in order\\n    // to save gas\\n    event FactsProven();\\n\\n    // must implemented by each prover\\n    function _prove(bytes calldata proof) internal view virtual returns (Fact[] memory);\\n\\n    // can optionally be overridden by each prover\\n    function _afterStore(Fact memory fact, bool alreadyStored) internal virtual {}\\n\\n    /**\\n     * @notice proves a fact ephemerally and returns the fact information\\n     * @param proof the encoded proof for this prover\\n     * @param store whether to store the fact in the reqliquary\\n     */\\n    function proveBatch(bytes calldata proof, bool store)\\n        public\\n        payable\\n        returns (Fact[] memory facts)\\n    {\\n        reliquary.checkProveFactFee{value: msg.value}(msg.sender);\\n        facts = _prove(proof);\\n        emit FactsProven();\\n        for (uint256 i = 0; i < facts.length; i++) {\\n            Fact memory fact = facts[i];\\n            if (store) {\\n                (bool alreadyStored, , ) = reliquary.getFact(fact.account, fact.sig);\\n                reliquary.setFact(fact.account, fact.sig, fact.data);\\n                _afterStore(fact, alreadyStored);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     * @dev Supported interfaces: IProver\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165)\\n        returns (bool)\\n    {\\n        return (interfaceId == type(IBatchProver).interfaceId ||\\n            super.supportsInterface(interfaceId));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/provers/CachedMultiStorageSlotProver.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"../interfaces/IReliquary.sol\\\";\\nimport \\\"../RelicToken.sol\\\";\\nimport \\\"../BlockHistory.sol\\\";\\nimport \\\"./BatchProver.sol\\\";\\nimport \\\"./StateVerifier.sol\\\";\\nimport \\\"../lib/FactSigs.sol\\\";\\n\\n/**\\n * @title CachedMultiStorageSlotProver\\n * @author Theori, Inc.\\n * @notice CachedMultiStorageSlotProver batch proves multiple storage slots from an account\\n *         at a particular block, using a cached account storage root\\n */\\ncontract CachedMultiStorageSlotProver is BatchProver, StateVerifier {\\n    constructor(BlockHistory blockHistory, IReliquary _reliquary)\\n        BatchProver(_reliquary)\\n        StateVerifier(blockHistory, _reliquary)\\n    {}\\n\\n    struct CachedMultiStorageSlotProof {\\n        address account;\\n        uint256 blockNumber;\\n        bytes32 storageRoot;\\n        bytes proofNodes;\\n        bytes32[] slots;\\n        bytes slotProofs;\\n    }\\n\\n    function parseCachedMultiStorageSlotProof(bytes calldata proof)\\n        internal\\n        pure\\n        returns (CachedMultiStorageSlotProof calldata res)\\n    {\\n        assembly {\\n            res := proof.offset\\n        }\\n    }\\n\\n    /**\\n     * @notice Proves that a storage slot had a particular value at a particular block.\\n     *\\n     * @param encodedProof the encoded CachedMultiStorageSlotProof\\n     */\\n    function _prove(bytes calldata encodedProof) internal view override returns (Fact[] memory) {\\n        CachedMultiStorageSlotProof calldata proof = parseCachedMultiStorageSlotProof(encodedProof);\\n        (bool exists, , ) = reliquary.getFact(\\n            proof.account,\\n            FactSigs.accountStorageFactSig(proof.blockNumber, proof.storageRoot)\\n        );\\n        require(exists, \\\"Cached storage root doesn't exist\\\");\\n\\n        BytesCalldata[] memory values = verifyMultiStorageSlot(\\n            proof.proofNodes,\\n            proof.slots,\\n            proof.slotProofs,\\n            proof.storageRoot\\n        );\\n\\n        Fact[] memory facts = new Fact[](values.length);\\n\\n        for (uint256 i = 0; i < values.length; i++) {\\n            facts[i] = Fact(\\n                proof.account,\\n                FactSigs.storageSlotFactSig(proof.slots[i], proof.blockNumber),\\n                values[i].convert()\\n            );\\n        }\\n        return facts;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/provers/StateVerifier.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: UNLICENSED\\n/// (c) Theori, Inc. 2022\\n/// All rights reserved\\n\\npragma solidity >=0.8.12;\\n\\nimport \\\"../BlockHistory.sol\\\";\\nimport \\\"../interfaces/IReliquary.sol\\\";\\nimport \\\"../lib/BytesCalldata.sol\\\";\\nimport \\\"../lib/CoreTypes.sol\\\";\\nimport \\\"../lib/RLP.sol\\\";\\nimport \\\"../lib/MPT.sol\\\";\\n\\n/**\\n * @title StateVerifier\\n * @author Theori, Inc.\\n * @notice StateVerifier is a base contract for verifying historical Ethereum\\n *         state using BlockHistory proofs and MPT proofs.\\n */\\ncontract StateVerifier {\\n    using BytesCalldataOps for bytes;\\n\\n    BlockHistory public immutable blockHistory;\\n    IReliquary private immutable reliquary;\\n\\n    constructor(BlockHistory _blockHistory, IReliquary _reliquary) {\\n        blockHistory = _blockHistory;\\n        reliquary = _reliquary;\\n    }\\n\\n    /**\\n     * @notice verifies that the block header is included in the current chain\\n     *         by querying the BlockHistory contract using the provided proof.\\n     *         Reverts if the header or proof is invalid.\\n     *\\n     * @param header the block header in RLP encoded form\\n     * @param proof the proof to pass to blockHistory\\n     * @return head the parsed block header\\n     */\\n    function verifyBlockHeader(bytes calldata header, bytes calldata proof)\\n        internal\\n        view\\n        returns (CoreTypes.BlockHeaderData memory head)\\n    {\\n        // first validate the block, ensuring that the rootHash is valid\\n        (bytes32 blockHash, ) = CoreTypes.getBlockHeaderHashAndSize(header);\\n        head = CoreTypes.parseBlockHeader(header);\\n        reliquary.assertValidBlockHashFromProver(\\n            address(blockHistory),\\n            blockHash,\\n            head.Number,\\n            proof\\n        );\\n    }\\n\\n    /**\\n     * @notice verifies that the account is included in the account trie using\\n     *         the provided proof. Accepts both existence and nonexistence\\n     *         proofs. Reverts if the proof is invalid. Assumes the stateRoot\\n     *         comes from a valid Ethereum block header.\\n     *\\n     * @param account the account address to check\\n     * @param proof the MPT proof for the account trie\\n     * @param stateRoot the MPT root hash for the account trie\\n     * @return exists whether the account exists\\n     * @return acc the parsed account value\\n     */\\n    function verifyAccount(\\n        address account,\\n        bytes calldata proof,\\n        bytes32 stateRoot\\n    ) internal pure returns (bool exists, CoreTypes.AccountData memory acc) {\\n        bytes32 key = keccak256(abi.encodePacked(account));\\n\\n        // validate the trie node and extract the value (if it exists)\\n        bytes calldata accountValue;\\n        (exists, accountValue) = MPT.verifyTrieValue(proof, key, 32, stateRoot);\\n        if (exists) {\\n            acc = CoreTypes.parseAccount(accountValue);\\n        }\\n    }\\n\\n    /**\\n     * @notice verifies that the storage slot is included in the storage trie\\n     *         using the provided proof. Accepts both existence and nonexistence\\n     *         proofs. Reverts if the proof is invalid. Assumes the storageRoot\\n     *         comes from a valid Ethereum account.\\n     *\\n     * @param slot the storage slot index\\n     * @param proof the MPT proof for the storage trie\\n     * @param storageRoot the MPT root hash for the storage trie\\n     * @return value the value in the storage slot, as bytes, with leading 0 bytes removed\\n     */\\n    function verifyStorageSlot(\\n        bytes32 slot,\\n        bytes calldata proof,\\n        bytes32 storageRoot\\n    ) internal pure returns (bytes calldata value) {\\n        bytes32 key = keccak256(abi.encodePacked(slot));\\n\\n        // validate the trie node and extract the value (default is 0)\\n        bool exists;\\n        (exists, value) = MPT.verifyTrieValue(proof, key, 32, storageRoot);\\n        if (exists) {\\n            (value, ) = RLP.splitBytes(value);\\n            require(value.length <= 32);\\n        }\\n    }\\n\\n    /**\\n     * @notice verifies that each storage slot is included in the storage trie\\n     *         using the provided proofs. Accepts both existence and nonexistence\\n     *         proofs. Reverts if a proof is invalid. Assumes the storageRoot\\n     *         comes from a valid Ethereum account.\\n     * @param proofNodes concatenation of all nodes used in the trie proofs\\n     * @param slots the list of slots being proven\\n     * @param slotProofs the compressed MPT proofs for each slot\\n     * @param storageRoot the MPT root hash for the storage trie\\n     * @return values the values in the storage slot, as bytes, with leading 0 bytes removed\\n     */\\n    function verifyMultiStorageSlot(\\n        bytes calldata proofNodes,\\n        bytes32[] calldata slots,\\n        bytes calldata slotProofs,\\n        bytes32 storageRoot\\n    ) internal pure returns (BytesCalldata[] memory values) {\\n        MPT.Node[] memory nodes = MPT.parseNodes(proofNodes);\\n        MPT.Node[][] memory proofs = MPT.parseCompressedProofs(nodes, slotProofs, slots.length);\\n        BytesCalldata[] memory results = new BytesCalldata[](slots.length);\\n\\n        for (uint256 i = 0; i < slots.length; i++) {\\n            bytes32 key = keccak256(abi.encodePacked(slots[i]));\\n            (bool exists, bytes calldata value) = MPT.verifyTrieValueWithNodes(\\n                proofs[i],\\n                key,\\n                32,\\n                storageRoot\\n            );\\n            if (exists) {\\n                (value, ) = RLP.splitBytes(value);\\n                require(value.length <= 32);\\n            }\\n            results[i] = value.convert();\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @notice verifies that an entry is included in the indexed trie using\\n     *         the provided proof. Accepts both existence and nonexistence\\n     *         proofs. Reverts if the proof is invalid. Assumes the root comes\\n     *         from a valid Ethereum MPT, i.e. from a valid block header.\\n     *\\n     * @param idx the receipt index in the block\\n     * @param proof the MPT proof for the indexed trie\\n     * @param root the MPT root hash for the indexed trie\\n     * @return exists whether the index exists\\n     * @return value the value at the given index, as bytes\\n     */\\n    function verifyIndexedTrieProof(\\n        uint256 idx,\\n        bytes calldata proof,\\n        bytes32 root\\n    ) internal pure returns (bool exists, bytes calldata value) {\\n        bytes memory key = RLP.encodeUint(idx);\\n        (exists, value) = MPT.verifyTrieValue(proof, bytes32(key), key.length, root);\\n    }\\n\\n    /**\\n     * @notice verifies that the account is included in the account trie for\\n     *         a block using the provided proofs. Accepts both existence and\\n     *         nonexistence proofs. Reverts if the proofs are invalid.\\n     *\\n     * @param account the account address to check\\n     * @param accountProof the MPT proof for the account trie\\n     * @param header the block header in RLP encoded form\\n     * @param blockProof the proof to pass to blockHistory\\n     * @return exists whether the account exists\\n     * @return head the parsed block header\\n     * @return acc the parsed account value\\n     */\\n    function verifyAccountAtBlock(\\n        address account,\\n        bytes calldata accountProof,\\n        bytes calldata header,\\n        bytes calldata blockProof\\n    )\\n        internal\\n        view\\n        returns (\\n            bool exists,\\n            CoreTypes.BlockHeaderData memory head,\\n            CoreTypes.AccountData memory acc\\n        )\\n    {\\n        head = verifyBlockHeader(header, blockProof);\\n        (exists, acc) = verifyAccount(account, accountProof, head.Root);\\n    }\\n\\n    /**\\n     * @notice verifies a log was emitted in the given block, txIdx, and logIdx\\n     *         using the provided proofs. Reverts if the log doesn't exist or if\\n     *         the proofs are invalid.\\n     *\\n     * @param txIdx the transaction index in the block\\n     * @param logIdx the index of the log in the transaction\\n     * @param receiptProof the Merkle-Patricia trie proof for the receipt\\n     * @param header the block header, RLP encoded\\n     * @param blockProof proof that the block header is valid\\n     * @return head the parsed block header\\n     * @return log the parsed log value\\n     */\\n    function verifyLogAtBlock(\\n        uint256 txIdx,\\n        uint256 logIdx,\\n        bytes calldata receiptProof,\\n        bytes calldata header,\\n        bytes calldata blockProof\\n    ) internal view returns (CoreTypes.BlockHeaderData memory head, CoreTypes.LogData memory log) {\\n        head = verifyBlockHeader(header, blockProof);\\n        (bool exists, bytes calldata receiptValue) = verifyIndexedTrieProof(\\n            txIdx,\\n            receiptProof,\\n            head.ReceiptHash\\n        );\\n        require(exists, \\\"receipt does not exist\\\");\\n        log = CoreTypes.extractLog(receiptValue, logIdx);\\n    }\\n\\n    /**\\n     * @notice verifies the presence of a transaction in the given block at txIdx\\n     *         using the provided proofs. Reverts if the transaction doesn't exist or if\\n     *         the proofs are invalid.\\n     *\\n     * @param txIdx the transaction index in the block\\n     * @param transactionProof the Merkle-Patricia trie proof for the transaction's hash\\n     * @param header the block header, RLP encoded\\n     * @param blockProof proof that the block header is valid\\n     * @return head the parsed block header\\n     * @return txHash the hash of the transaction proven\\n     */\\n    function verifyTransactionAtBlock(\\n        uint256 txIdx,\\n        bytes calldata transactionProof,\\n        bytes calldata header,\\n        bytes calldata blockProof\\n    ) internal view returns (CoreTypes.BlockHeaderData memory head, bytes32 txHash) {\\n        head = verifyBlockHeader(header, blockProof);\\n        (bool exists, bytes calldata txData) = verifyIndexedTrieProof(\\n            txIdx,\\n            transactionProof,\\n            head.TxHash\\n        );\\n        require(exists, \\\"transaction does not exist in given block\\\");\\n        txHash = keccak256(txData);\\n    }\\n\\n    /**\\n     * @notice verifies a withdrawal occurred in the given block using the\\n     *         provided proofs. Reverts if the withdrawal doesn't exist or\\n     *         if the proofs are invalid.\\n     *\\n     * @param idx the index of the withdrawal in the block\\n     * @param withdrawalProof the Merkle-Patricia trie proof for the receipt\\n     * @param header the block header, RLP encoded\\n     * @param blockProof proof that the block header is valid\\n     * @return head the parsed block header\\n     * @return withdrawal the parsed withdrawal value\\n     */\\n    function verifyWithdrawalAtBlock(\\n        uint256 idx,\\n        bytes calldata withdrawalProof,\\n        bytes calldata header,\\n        bytes calldata blockProof\\n    )\\n        internal\\n        view\\n        returns (CoreTypes.BlockHeaderData memory head, CoreTypes.WithdrawalData memory withdrawal)\\n    {\\n        head = verifyBlockHeader(header, blockProof);\\n        (bool exists, bytes calldata withdrawalValue) = verifyIndexedTrieProof(\\n            idx,\\n            withdrawalProof,\\n            head.WithdrawalsHash\\n        );\\n        require(exists, \\\"Withdrawal does not exist at block\\\");\\n        withdrawal = CoreTypes.parseWithdrawal(withdrawalValue);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract BlockHistory\",\"name\":\"blockHistory\",\"type\":\"address\"},{\"internalType\":\"contract IReliquary\",\"name\":\"_reliquary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FactsProven\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockHistory\",\"outputs\":[{\"internalType\":\"contract BlockHistory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"store\",\"type\":\"bool\"}],\"name\":\"proveBatch\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"FactSignature\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Fact[]\",\"name\":\"facts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CachedMultiStorageSlotProver", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "00000000000000000000000075d6ac4fd8b578d6fde72a02f8a00189208dcc3a0000000000000000000000005e4de6bb8c6824f29c44bd3473d44da120387d08", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": ""}