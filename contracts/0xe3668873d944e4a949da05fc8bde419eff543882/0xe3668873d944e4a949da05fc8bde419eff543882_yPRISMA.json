{"SourceCode": "# @version 0.3.10\r\n\r\n\"\"\"\r\n@title yPRISMA\r\n@license GNU AGPLv3\r\n@author Yearn Finance\r\n\"\"\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nevent DelegateMint:\r\n    minter: indexed(address)\r\n    recipient: indexed(address)\r\n    amount: uint256\r\n\r\nevent ApproveMinter:\r\n    minter: indexed(address)\r\n    approved: indexed(bool)\r\n\r\nevent UpdateOperator:\r\n    operator: indexed(address)\r\n\r\nylocker: public(immutable(address))\r\nprisma: public(immutable(address))\r\nname: public(immutable(String[32]))\r\nsymbol: public(immutable(String[32]))\r\ndecimals: public(immutable(uint8))\r\n\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\napproved_minters: public(HashMap[address, bool])\r\noperator: public(address)\r\nproposed_operator: public(address)\r\n\r\n@external\r\ndef __init__(_name: String[32], _symbol: String[32], _prisma: address, _ylocker: address, _operator: address):\r\n    name = _name\r\n    symbol = _symbol\r\n    decimals = 18\r\n    prisma = _prisma\r\n    ylocker = _ylocker\r\n    self.operator = _operator\r\n\r\n@external\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Transfer token for a specified address\r\n    @param _to The address to transfer to.\r\n    @param _value The amount to be transferred.\r\n    \"\"\"\r\n    self.balanceOf[msg.sender] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(msg.sender, _to, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n     @dev Transfer tokens from one address to another.\r\n     @param _from address The address which you want to send tokens from\r\n     @param _to address The address which you want to transfer to\r\n     @param _value uint256 the amount of tokens to be transferred\r\n    \"\"\"\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    self.allowance[_from][msg.sender] -= _value\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    \"\"\"\r\n    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n    @param _spender The address which will spend the funds.\r\n    @param _value The amount of tokens to be spent.\r\n    \"\"\"\r\n    self.allowance[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n        \r\n@internal\r\ndef _mint(_to: address, _value: uint256):\r\n    self.totalSupply += _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(empty(address), _to, _value)\r\n\r\n@external\r\ndef mint(_amount: uint256 = max_value(uint256), _recipient: address = msg.sender) -> uint256:\r\n    \"\"\"\r\n    @notice Lock any amount of the underlying token to mint yTOKEN 1 to 1.\r\n    @param _amount The desired amount of tokens to lock / yTOKENs to mint.\r\n    @param _recipient The address which minted yTOKENS should be received at.\r\n    \"\"\"\r\n    assert _recipient not in [self, empty(address)]\r\n    amount: uint256 = _amount\r\n    if amount == max_value(uint256):\r\n        amount = ERC20(prisma).balanceOf(msg.sender)\r\n    assert amount > 0\r\n    assert ERC20(prisma).transferFrom(msg.sender, ylocker, amount)\r\n    self._mint(_recipient, amount)\r\n    return amount\r\n\r\n@external\r\ndef delegate_mint(_recipient: address, _amount: uint256) -> uint256:\r\n    \"\"\"\r\n    @dev Minters must be permitted to mint upon user claims from the vault.\r\n    @param _amount The desired amount of tokens to lock / yTOKENs to mint.\r\n    @param _recipient The address which minted yTOKENS should be received at.\r\n    \"\"\"\r\n    assert self.approved_minters[msg.sender], \"!approved\"\r\n    self._mint(_recipient, _amount)\r\n    log DelegateMint(msg.sender, _recipient, _amount)\r\n    return _amount\r\n\r\n@external\r\ndef approve_minter(_minter: address, _approved: bool):\r\n    assert msg.sender == self.operator, \"!approved\"\r\n    self.approved_minters[_minter] = _approved\r\n    log ApproveMinter(_minter, _approved)\r\n\r\n@external\r\ndef set_operator(_proposed_operator: address):\r\n    assert msg.sender == self.operator\r\n    self.proposed_operator = _proposed_operator\r\n\r\n@external\r\ndef accept_operator():\r\n    proposed_operator: address = self.proposed_operator\r\n    assert msg.sender == proposed_operator\r\n    self.operator = proposed_operator\r\n    self.proposed_operator = empty(address)\r\n    log UpdateOperator(proposed_operator)\r\n\r\n@external\r\ndef sweep(_token: address, _amount: uint256 = max_value(uint256)):\r\n    operator: address = self.operator\r\n    assert msg.sender == operator\r\n    amount: uint256 = _amount\r\n    if amount == max_value(uint256):\r\n        amount = ERC20(_token).balanceOf(self)\r\n    assert amount > 0\r\n    assert ERC20(_token).transfer(operator, amount, default_return_value=True)", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"DelegateMint\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"indexed\":true},{\"name\":\"recipient\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApproveMinter\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"indexed\":true},{\"name\":\"approved\",\"type\":\"bool\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_prisma\",\"type\":\"address\"},{\"name\":\"_ylocker\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_recipient\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"delegate_mint\",\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve_minter\",\"inputs\":[{\"name\":\"_minter\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_operator\",\"inputs\":[{\"name\":\"_proposed_operator\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_operator\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweep\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"sweep\",\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ylocker\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"prisma\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"approved_minters\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"operator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"proposed_operator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "yPRISMA", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000da47862a83dac0c112ba89c6abc2159b95afd71c00000000000000000000000090be6dfea8c80c184c442a36e17cb2439aae25a70000000000000000000000004444aaaacdba5580282365e25b16309bd770ce4a000000000000000000000000000000000000000000000000000000000000000c596561726e20505249534d410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000779505249534d4100000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": ""}