{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"MasterChefMod.sol\": {\r\n      \"content\": \"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens in existence.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the amount of tokens owned by `account`.\\r\\n   */\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remaining number of tokens that `spender` will be\\r\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n   * zero by default.\\r\\n   *\\r\\n   * This value changes when {approve} or {transferFrom} are called.\\r\\n   */\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n   * that someone may use both the old and the new allowance by unfortunate\\r\\n   * transaction ordering. One possible solution to mitigate this race\\r\\n   * condition is to first reduce the spender's allowance to 0 and set the\\r\\n   * desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n   * allowance mechanism. `amount` is then deducted from the caller's\\r\\n   * allowance.\\r\\n   *\\r\\n   * Returns a boolean value indicating whether the operation succeeded.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount\\r\\n  ) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n   * another (`to`).\\r\\n   *\\r\\n   * Note that `value` may be zero.\\r\\n   */\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n   * a call to {approve}. `value` is the new allowance.\\r\\n   */\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/math/SafeMath.sol\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    uint256 c = a + b;\\r\\n    if (c < a) return (false, 0);\\r\\n    return (true, c);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    if (b > a) return (false, 0);\\r\\n    return (true, a - b);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n    // benefit is lost if 'b' is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) return (true, 0);\\r\\n    uint256 c = a * b;\\r\\n    if (c / a != b) return (false, 0);\\r\\n    return (true, c);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    if (b == 0) return (false, 0);\\r\\n    return (true, a / b);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    if (b == 0) return (false, 0);\\r\\n    return (true, a % b);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a, 'SafeMath: addition overflow');\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b <= a, 'SafeMath: subtraction overflow');\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) return 0;\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, 'SafeMath: multiplication overflow');\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b > 0, 'SafeMath: division by zero');\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b > 0, 'SafeMath: modulo by zero');\\r\\n    return a % b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b <= a, errorMessage);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b > 0, errorMessage);\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting with custom message when dividing by zero.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b > 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Address.sol\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n    (bool success, ) = recipient.call{ value: amount }('');\\r\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain`call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionCall(target, data, 'Address: low-level call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\r\\n    require(isContract(target), 'Address: call to non-contract');\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls\\r\\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), 'Address: static call to non-contract');\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), 'Address: delegate call to non-contract');\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  function _verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) private pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n  function safeTransfer(\\r\\n    IERC20 token,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n  }\\r\\n\\r\\n  function safeTransferFrom(\\r\\n    IERC20 token,\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Deprecated. This function has issues similar to the ones found in\\r\\n   * {IERC20-approve}, and its usage is discouraged.\\r\\n   *\\r\\n   * Whenever possible, use {safeIncreaseAllowance} and\\r\\n   * {safeDecreaseAllowance} instead.\\r\\n   */\\r\\n  function safeApprove(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    // safeApprove should only be called when setting an initial allowance,\\r\\n    // or when resetting it to zero. To increase and decrease it, use\\r\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n    // solhint-disable-next-line max-line-length\\r\\n    require(\\r\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n      'SafeERC20: approve from non-zero to non-zero allowance'\\r\\n    );\\r\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n  }\\r\\n\\r\\n  function safeIncreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function safeDecreaseAllowance(\\r\\n    IERC20 token,\\r\\n    address spender,\\r\\n    uint256 value\\r\\n  ) internal {\\r\\n    uint256 newAllowance =\\r\\n      token.allowance(address(this), spender).sub(\\r\\n        value,\\r\\n        'SafeERC20: decreased allowance below zero'\\r\\n      );\\r\\n    _callOptionalReturn(\\r\\n      token,\\r\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n   * @param token The token targeted by the call.\\r\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n   */\\r\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n    // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n    bytes memory returndata = address(token).functionCall(data, 'SafeERC20: low-level call failed');\\r\\n    if (returndata.length > 0) {\\r\\n      // Return data is optional\\r\\n      // solhint-disable-next-line max-line-length\\r\\n      require(abi.decode(returndata, (bool)), 'SafeERC20: ERC20 operation did not succeed');\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/math/Math.sol\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n  /**\\r\\n   * @dev Returns the largest of two numbers.\\r\\n   */\\r\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a >= b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the smallest of two numbers.\\r\\n   */\\r\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    return a < b ? a : b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the average of two numbers. The result is rounded towards\\r\\n   * zero.\\r\\n   */\\r\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    // (a + b) / 2 can overflow, so we distribute\\r\\n    return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Context.sol\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n  function _msgSender() internal view virtual returns (address payable) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/access/Ownable.sol\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  constructor() internal {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n}\\r\\n\\r\\n// File: contracts/MasterChefMod.sol\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\ncontract MasterChefMod is Ownable {\\r\\n  using SafeMath for uint256;\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n  event Claim(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n  event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n  /// @notice Detail of each user.\\r\\n  struct UserInfo {\\r\\n    uint256 amount; // Number of tokens staked\\r\\n    uint256 rewardDebt; // A base for future reward claims. Works as a threshold, updated on each reward claim\\r\\n    //\\r\\n    // At any point in time, pending user reward for a given pool is:\\r\\n    // pending reward = (user.amount * pool.accRewardPerShare) - user.rewardFloor\\r\\n    //\\r\\n    // Whenever a user deposits or withdraws a pool token:\\r\\n    //   1. The pool's `accRewardPerShare` (and `lastUpdate`) gets updated.\\r\\n    //   2. User receives the pending reward sent to their address.\\r\\n    //   3. User's `amount` gets updated.\\r\\n    //   4. User's `rewardFloor` gets updated.\\r\\n  }\\r\\n\\r\\n  /// @notice Detail of each pool.\\r\\n  struct PoolInfo {\\r\\n    address token; // Token to stake.\\r\\n    uint256 allocPoint; // How many allocation points assigned to this pool. Rewards to distribute per second.\\r\\n    uint256 lastUpdateTime; // Last time that distribution happened.\\r\\n    uint256 accRewardPerShare; // Accumulated rewards per share.\\r\\n    uint256 totalStaked; // Amount of tokens staked in the pool.\\r\\n    uint256 accUndistributedReward; // Accumulated rewards when a pool has no stake in it.\\r\\n  }\\r\\n\\r\\n  /// @dev Division precision.\\r\\n  uint256 private precision = 1e18;\\r\\n\\r\\n  /// @dev Reward token balance.\\r\\n  uint256 public rewardTokenBalance;\\r\\n\\r\\n  /// @notice Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n  uint256 public totalAllocPoint;\\r\\n\\r\\n  /// @notice Time of the contract deployment.\\r\\n  uint256 public timeDeployed;\\r\\n\\r\\n  /// @notice Total rewards accumulated since contract deployment.\\r\\n  uint256 public totalRewards;\\r\\n\\r\\n  /// @notice Reward token.\\r\\n  address public rewardToken;\\r\\n\\r\\n  /// @notice Detail of each pool.\\r\\n  PoolInfo[] public poolInfo;\\r\\n\\r\\n  /// @notice Period in which the latest distribution of rewards will end.\\r\\n  uint256 public periodFinish;\\r\\n\\r\\n  /// @notice Reward rate per second. Has increased precision (when doing math with it, do div(precision))\\r\\n  uint256 public rewardRate;\\r\\n\\r\\n  ///  @notice New rewards are equaly split between the duration.\\r\\n  uint256 public rewardsDuration;\\r\\n\\r\\n  /// @notice Detail of each user who stakes tokens.\\r\\n  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n  mapping(address => bool) private poolToken;\\r\\n\\r\\n  constructor(address _rewardToken, uint256 _rewardsDuration) public {\\r\\n    rewardToken = _rewardToken;\\r\\n    rewardsDuration = _rewardsDuration;\\r\\n    timeDeployed = block.timestamp;\\r\\n    periodFinish = timeDeployed.add(rewardsDuration);\\r\\n  }\\r\\n\\r\\n  /// @notice Average reward per second generated since contract deployment.\\r\\n  function avgRewardsPerSecondTotal() external view returns (uint256 avgPerSecond) {\\r\\n    return totalRewards.div(block.timestamp.sub(timeDeployed));\\r\\n  }\\r\\n\\r\\n  /// @notice Total pools.\\r\\n  function poolLength() external view returns (uint256) {\\r\\n    return poolInfo.length;\\r\\n  }\\r\\n\\r\\n  /// @notice Display user rewards for a specific pool.\\r\\n  function pendingReward(uint256 _pid, address _user) public view returns (uint256) {\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    UserInfo storage user = userInfo[_pid][_user];\\r\\n    uint256 accRewardPerShare = pool.accRewardPerShare;\\r\\n\\r\\n    if (pool.totalStaked != 0 && totalAllocPoint != 0) {\\r\\n      accRewardPerShare = accRewardPerShare.add(\\r\\n        _getPoolRewardsSinceLastUpdate(_pid).mul(precision).div(pool.totalStaked)\\r\\n      );\\r\\n    }\\r\\n\\r\\n    return user.amount.mul(accRewardPerShare).div(precision).sub(user.rewardDebt);\\r\\n  }\\r\\n\\r\\n  /// @notice Add a new pool.\\r\\n  function add(\\r\\n    uint256 _allocPoint,\\r\\n    address _token,\\r\\n    bool _withUpdate\\r\\n  ) public onlyOwner {\\r\\n    if (_withUpdate) {\\r\\n      massUpdatePools();\\r\\n    }\\r\\n\\r\\n    require(\\r\\n      poolToken[address(_token)] == false,\\r\\n      'MasterChefMod: Stake token has already been added'\\r\\n    );\\r\\n\\r\\n    totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n\\r\\n    poolInfo.push(\\r\\n      PoolInfo({\\r\\n        token: _token,\\r\\n        allocPoint: _allocPoint,\\r\\n        lastUpdateTime: block.timestamp,\\r\\n        accRewardPerShare: 0,\\r\\n        totalStaked: 0,\\r\\n        accUndistributedReward: 0\\r\\n      })\\r\\n    );\\r\\n\\r\\n    poolToken[address(_token)] = true;\\r\\n  }\\r\\n\\r\\n  /// @notice Update the given pool's allocation point.\\r\\n  function set(\\r\\n    uint256 _pid,\\r\\n    uint256 _allocPoint,\\r\\n    bool _withUpdate\\r\\n  ) public onlyOwner {\\r\\n    if (_withUpdate) {\\r\\n      massUpdatePools();\\r\\n    }\\r\\n\\r\\n    totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n    poolInfo[_pid].allocPoint = _allocPoint;\\r\\n  }\\r\\n\\r\\n  /// @notice Deposit tokens to pool for reward allocation.\\r\\n  function deposit(uint256 _pid, uint256 _amount) public {\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n    _updatePool(_pid);\\r\\n\\r\\n    uint256 pending;\\r\\n\\r\\n    if (pool.totalStaked == 0) {\\r\\n      // Special case: no one was staking, the pool was accumulating rewards.\\r\\n      pending = pool.accUndistributedReward;\\r\\n      pool.accUndistributedReward = 0;\\r\\n    }\\r\\n    if (user.amount != 0) {\\r\\n      pending = _getUserPendingReward(_pid);\\r\\n    }\\r\\n\\r\\n    _claimFromPool(_pid, pending);\\r\\n    _transferAmountIn(_pid, _amount);\\r\\n    _updateRewardDebt(_pid);\\r\\n\\r\\n    emit Deposit(msg.sender, _pid, _amount);\\r\\n  }\\r\\n\\r\\n  // Withdraw tokens from pool. Claims rewards implicitly (only claims rewards when called with _amount = 0)\\r\\n  function withdraw(uint256 _pid, uint256 _amount) public {\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n    require(user.amount >= _amount, 'MasterChefMod: Withdraw amount is greater than user stake.');\\r\\n\\r\\n    _updatePool(_pid);\\r\\n    _claimFromPool(_pid, _getUserPendingReward(_pid));\\r\\n    _transferAmountOut(_pid, _amount);\\r\\n    _updateRewardDebt(_pid);\\r\\n\\r\\n    emit Withdraw(msg.sender, _pid, _amount);\\r\\n  }\\r\\n\\r\\n  // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n  // !Caution this will remove all your pending rewards!\\r\\n  function emergencyWithdraw(uint256 _pid) public {\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n    uint256 _amount = user.amount;\\r\\n    user.amount = 0;\\r\\n    user.rewardDebt = 0;\\r\\n    pool.totalStaked = pool.totalStaked.sub(_amount);\\r\\n\\r\\n    IERC20(pool.token).safeTransfer(address(msg.sender), _amount);\\r\\n    emit EmergencyWithdraw(msg.sender, _pid, _amount);\\r\\n    // No mass update dont update pending rewards\\r\\n  }\\r\\n\\r\\n  /// Adds and evenly distributes any rewards that were sent to the contract since last reward update.\\r\\n  function updateRewards(uint256 amount) external onlyOwner {\\r\\n    require(amount != 0, 'MasterChefMod: Reward amount must be greater than zero');\\r\\n\\r\\n    IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\\r\\n    rewardTokenBalance = rewardTokenBalance.add(amount);\\r\\n\\r\\n    if (totalAllocPoint == 0) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    massUpdatePools();\\r\\n\\r\\n    // note: if increasing rewards after the last period has ended, just divide the amount by period length\\r\\n    if (block.timestamp >= periodFinish) {\\r\\n      rewardRate = amount.mul(precision).div(rewardsDuration);\\r\\n    } else {\\r\\n      uint256 periodSecondsLeft = periodFinish.sub(block.timestamp);\\r\\n      uint256 periodRewardsLeft = periodSecondsLeft.mul(rewardRate);\\r\\n      rewardRate = periodRewardsLeft.add(amount.mul(precision)).div(rewardsDuration);\\r\\n    }\\r\\n\\r\\n    totalRewards = totalRewards.add(amount);\\r\\n    periodFinish = block.timestamp.add(rewardsDuration);\\r\\n  }\\r\\n\\r\\n  /// @notice Updates rewards for all pools by adding pending rewards.\\r\\n  /// Can spend a lot of gas.\\r\\n  function massUpdatePools() public {\\r\\n    uint256 length = poolInfo.length;\\r\\n    for (uint256 pid = 0; pid < length; ++pid) {\\r\\n      _updatePool(pid);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Keeps pool properties (lastUpdateTime, accRewardPerShare, accUndistributedReward) up to date.\\r\\n  function _updatePool(uint256 _pid) internal {\\r\\n    if (totalAllocPoint == 0) return;\\r\\n\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    uint256 poolRewards = _getPoolRewardsSinceLastUpdate(_pid);\\r\\n\\r\\n    if (pool.totalStaked == 0) {\\r\\n      pool.accRewardPerShare = pool.accRewardPerShare.add(poolRewards);\\r\\n      pool.accUndistributedReward = pool.accUndistributedReward.add(poolRewards);\\r\\n    } else {\\r\\n      pool.accRewardPerShare = pool.accRewardPerShare.add(\\r\\n        poolRewards.mul(precision).div(pool.totalStaked)\\r\\n      );\\r\\n    }\\r\\n\\r\\n    pool.lastUpdateTime = block.timestamp;\\r\\n  }\\r\\n\\r\\n  function _getPoolRewardsSinceLastUpdate(uint256 _pid)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256 _poolRewards)\\r\\n  {\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    uint256 lastTimeRewardApplicable = Math.min(block.timestamp, periodFinish);\\r\\n\\r\\n    uint256 lastUpdateTime = pool.lastUpdateTime;\\r\\n\\r\\n    if (lastUpdateTime > lastTimeRewardApplicable) {\\r\\n      lastUpdateTime = lastTimeRewardApplicable;\\r\\n    }\\r\\n\\r\\n    uint256 numSeconds = lastTimeRewardApplicable.sub(lastUpdateTime);\\r\\n\\r\\n    return numSeconds.mul(rewardRate).mul(pool.allocPoint).div(totalAllocPoint).div(precision);\\r\\n  }\\r\\n\\r\\n  function _safeRewardTokenTransfer(address _to, uint256 _amount)\\r\\n    internal\\r\\n    returns (uint256 _claimed)\\r\\n  {\\r\\n    _claimed = Math.min(_amount, rewardTokenBalance);\\r\\n    IERC20(rewardToken).transfer(_to, _claimed);\\r\\n    rewardTokenBalance = rewardTokenBalance.sub(_claimed);\\r\\n  }\\r\\n\\r\\n  function withdrawStuckTokens(address _token, uint256 _amount) public onlyOwner {\\r\\n    require(_token != address(rewardToken), 'MasterChefMod: Cannot withdraw reward tokens');\\r\\n    require(poolToken[address(_token)] == false, 'MasterChefMod: Cannot withdraw stake tokens');\\r\\n    IERC20(_token).safeTransfer(msg.sender, _amount);\\r\\n  }\\r\\n\\r\\n  function _getUserPendingReward(uint256 _pid) internal view returns (uint256 _reward) {\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n    return user.amount.mul(pool.accRewardPerShare).div(precision).sub(user.rewardDebt);\\r\\n  }\\r\\n\\r\\n  function _claimFromPool(uint256 _pid, uint256 _amount) internal {\\r\\n    if (_amount != 0) {\\r\\n      uint256 amountClaimed = _safeRewardTokenTransfer(msg.sender, _amount);\\r\\n      emit Claim(msg.sender, _pid, amountClaimed);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _transferAmountIn(uint256 _pid, uint256 _amount) internal {\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n    if (_amount != 0) {\\r\\n      IERC20(pool.token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n      user.amount = user.amount.add(_amount);\\r\\n      pool.totalStaked = pool.totalStaked.add(_amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _transferAmountOut(uint256 _pid, uint256 _amount) internal {\\r\\n    PoolInfo storage pool = poolInfo[_pid];\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n\\r\\n    if (_amount != 0) {\\r\\n      IERC20(pool.token).safeTransfer(msg.sender, _amount);\\r\\n      user.amount = user.amount.sub(_amount);\\r\\n      pool.totalStaked = pool.totalStaked.sub(_amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _updateRewardDebt(uint256 _pid) internal {\\r\\n    UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n    user.rewardDebt = user.amount.mul(poolInfo[_pid].accRewardPerShare).div(precision);\\r\\n  }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgRewardsPerSecondTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"avgPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accUndistributedReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefMod", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003505f494c3f0fed0b594e01fa41dd3967645ca390000000000000000000000000000000000000000000000000000000000278d00", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}