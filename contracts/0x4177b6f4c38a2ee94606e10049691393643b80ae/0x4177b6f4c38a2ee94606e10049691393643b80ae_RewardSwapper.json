{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {Common} from \\\"../libraries/Common.sol\\\";\\n\\ninterface IRewardDistributor {\\n    /**\\n        @notice Update rewards metadata\\n        @param  distributions  Distribution[] List of reward distribution details\\n     */\\n    function updateRewardsMetadata(\\n        Common.Distribution[] calldata distributions\\n    ) external;\\n\\n    /** \\n        @notice Set the contract's pause state (ie. before taking snapshot for the harvester)\\n        @param  state  bool  Pause state\\n    */\\n    function setPauseState(bool state) external;\\n\\n    /**\\n        @notice Claim rewards based on the specified metadata\\n        @param  _claims  Claim[] List of claim metadata\\n     */\\n    function claim(Common.Claim[] calldata _claims) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardHarvester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface IRewardHarvester {\\n    /**\\n        @notice Return the default token address\\n     */\\n    function defaultToken() external view returns (address);\\n\\n    /**\\n        @notice Deposit `defaultToken` to this contract\\n        @param  _amount  uint256  Amount of `defaultToken` to deposit\\n     */\\n    function depositReward(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Common.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nlibrary Common {\\n    /**\\n     * @param identifier  bytes32  Identifier of the distribution\\n     * @param token       address  Address of the token to distribute\\n     * @param merkleRoot  bytes32  Merkle root of the distribution\\n     * @param proof       bytes32  Proof of the distribution\\n     */\\n    struct Distribution {\\n        bytes32 identifier;\\n        address token;\\n        bytes32 merkleRoot;\\n        bytes32 proof;\\n    }\\n\\n    /**\\n     * @param proposal          bytes32  Proposal to bribe\\n     * @param token             address  Token to bribe with\\n     * @param briber            address  Address of the briber\\n     * @param amount            uint256  Amount of tokens to bribe with\\n     * @param maxTokensPerVote  uint256  Maximum amount of tokens to use per vote\\n     * @param periods           uint256  Number of periods to bribe for\\n     * @param periodDuration    uint256  Duration of each period\\n     * @param proposalDeadline  uint256  Deadline for the proposal\\n     * @param permitDeadline    uint256  Deadline for the permit2 signature\\n     * @param signature         bytes    Permit2 signature\\n     */\\n    struct DepositBribeParams {\\n        bytes32 proposal;\\n        address token;\\n        address briber;\\n        uint256 amount;\\n        uint256 maxTokensPerVote;\\n        uint256 periods;\\n        uint256 periodDuration;\\n        uint256 proposalDeadline;\\n        uint256 permitDeadline;\\n        bytes signature;\\n    }\\n\\n    /**\\n     * @param rwIdentifier      bytes32    Identifier for claiming reward\\n     * @param fromToken         address    Address of token to swap from\\n     * @param toToken           address    Address of token to swap to\\n     * @param fromAmount        uint256    Amount of fromToken to swap\\n     * @param toAmount          uint256    Amount of toToken to receive\\n     * @param deadline          uint256    Timestamp until which swap may be fulfilled\\n     * @param callees           address[]  Array of addresses to call (DEX addresses)\\n     * @param callLengths       uint256[]  Index of the beginning of each call in exchangeData\\n     * @param values            uint256[]  Array of encoded values for each call in exchangeData\\n     * @param exchangeData      bytes      Calldata to execute on callees\\n     * @param rwMerkleProof     bytes32[]  Merkle proof for the reward claim\\n     */\\n    struct ClaimAndSwapData {\\n        bytes32 rwIdentifier;\\n        address fromToken;\\n        address toToken;\\n        uint256 fromAmount;\\n        uint256 toAmount;\\n        uint256 deadline;\\n        address[] callees;\\n        uint256[] callLengths;\\n        uint256[] values;\\n        bytes exchangeData;\\n        bytes32[] rwMerkleProof;\\n    }\\n\\n    /**\\n     * @param identifier   bytes32    Identifier for claiming reward\\n     * @param account      address    Address of the account to claim for\\n     * @param amount       uint256    Amount of tokens to claim\\n     * @param merkleProof  bytes32[]  Merkle proof for the reward claim\\n     */\\n    struct Claim {\\n        bytes32 identifier;\\n        address account;\\n        uint256 amount;\\n        bytes32[] merkleProof;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nlibrary Errors {\\n    /**\\n     * @notice max period 0 or greater than MAX_PERIODS\\n     */\\n    error InvalidMaxPeriod();\\n\\n    /**\\n     * @notice period duration 0 or greater than MAX_PERIOD_DURATION\\n     */\\n    error InvalidPeriodDuration();\\n\\n    /**\\n     * @notice address provided is not a contract\\n     */\\n    error NotAContract();\\n\\n    /**\\n     * @notice not authorized\\n     */\\n    error NotAuthorized();\\n\\n    /**\\n     * @notice contract already initialized\\n     */\\n    error AlreadyInitialized();\\n\\n    /**\\n     * @notice address(0)\\n     */\\n    error InvalidAddress();\\n\\n    /**\\n     * @notice empty bytes identifier\\n     */\\n    error InvalidIdentifier();\\n\\n    /**\\n     * @notice invalid protocol name\\n     */\\n    error InvalidProtocol();\\n\\n    /**\\n     * @notice invalid number of choices\\n     */\\n    error InvalidChoiceCount();\\n\\n    /**\\n     * @notice invalid input amount\\n     */\\n    error InvalidAmount();\\n\\n    /**\\n     * @notice not team member\\n     */\\n    error NotTeamMember();\\n\\n    /**\\n     * @notice cannot whitelist BRIBE_VAULT\\n     */\\n    error NoWhitelistBribeVault();\\n\\n    /**\\n     * @notice token already whitelisted\\n     */\\n    error TokenWhitelisted();\\n\\n    /**\\n     * @notice token not whitelisted\\n     */\\n    error TokenNotWhitelisted();\\n\\n    /**\\n     * @notice voter already blacklisted\\n     */\\n    error VoterBlacklisted();\\n\\n    /**\\n     * @notice voter not blacklisted\\n     */\\n    error VoterNotBlacklisted();\\n\\n    /**\\n     * @notice deadline has passed\\n     */\\n    error DeadlinePassed();\\n\\n    /**\\n     * @notice invalid period\\n     */\\n    error InvalidPeriod();\\n\\n    /**\\n     * @notice invalid deadline\\n     */\\n    error InvalidDeadline();\\n\\n    /**\\n     * @notice invalid max fee\\n     */\\n    error InvalidMaxFee();\\n\\n    /**\\n     * @notice invalid fee\\n     */\\n    error InvalidFee();\\n\\n    /**\\n     * @notice invalid fee recipient\\n     */\\n    error InvalidFeeRecipient();\\n\\n    /**\\n     * @notice invalid distributor\\n     */\\n    error InvalidDistributor();\\n\\n    /**\\n     * @notice invalid briber\\n     */\\n    error InvalidBriber();\\n\\n    /**\\n     * @notice address does not have DEPOSITOR_ROLE\\n     */\\n    error NotDepositor();\\n\\n    /**\\n     * @notice no array given\\n     */\\n    error InvalidArray();\\n\\n    /**\\n     * @notice invalid reward identifier\\n     */\\n    error InvalidRewardIdentifier();\\n\\n    /**\\n     * @notice bribe has already been transferred\\n     */\\n    error BribeAlreadyTransferred();\\n\\n    /**\\n     * @notice distribution does not exist\\n     */\\n    error InvalidDistribution();\\n\\n    /**\\n     * @notice invalid merkle root\\n     */\\n    error InvalidMerkleRoot();\\n\\n    /**\\n     * @notice token is address(0)\\n     */\\n    error InvalidToken();\\n\\n    /**\\n     * @notice claim does not exist\\n     */\\n    error InvalidClaim();\\n\\n    /**\\n     * @notice reward is not yet active for claiming\\n     */\\n    error RewardInactive();\\n\\n    /**\\n     * @notice timer duration is invalid\\n     */\\n    error InvalidTimerDuration();\\n\\n    /**\\n     * @notice merkle proof is invalid\\n     */\\n    error InvalidProof();\\n\\n    /**\\n     * @notice ETH transfer failed\\n     */\\n    error ETHTransferFailed();\\n\\n    /**\\n     * @notice Invalid operator address\\n     */\\n    error InvalidOperator();\\n\\n    /**\\n     * @notice call to TokenTransferProxy contract\\n     */\\n    error TokenTransferProxyCall();\\n\\n    /**\\n     * @notice calling TransferFrom\\n     */\\n    error TransferFromCall();\\n\\n    /**\\n     * @notice external call failed\\n     */\\n    error ExternalCallFailure();\\n\\n    /**\\n     * @notice returned tokens too few\\n     */\\n    error InsufficientReturn();\\n\\n    /**\\n     * @notice swapDeadline expired\\n     */\\n    error DeadlineBreach();\\n\\n    /**\\n     * @notice expected tokens returned are 0\\n     */\\n    error ZeroExpectedReturns();\\n\\n    /**\\n     * @notice arrays in SwapData.exchangeData have wrong lengths\\n     */\\n    error ExchangeDataArrayMismatch();\\n}\\n\"\r\n    },\r\n    \"contracts/RewardSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IRewardDistributor} from \\\"./interfaces/IRewardDistributor.sol\\\";\\nimport {IRewardHarvester} from \\\"./interfaces/IRewardHarvester.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\nimport {Common} from \\\"./libraries/Common.sol\\\";\\n\\ncontract RewardSwapper is Ownable2Step {\\n    using SafeERC20 for IERC20;\\n\\n    IRewardDistributor public rewardDistributor;\\n    IRewardHarvester public rewardHarvester;\\n\\n    // Operator address\\n    address public operator;\\n\\n    //-----------------------//\\n    //        Events         //\\n    //-----------------------//\\n    event SetOperator(address indexed operator);\\n    event SetRewardHarvester(address indexed rewardHarvester);\\n    event SetRewardDistributor(address indexed rewardDistributor);\\n    event BribeTransferred(address indexed token, uint256 totalAmount);\\n\\n    /**\\n     * @notice Modifier to check caller is operator\\n     */\\n    modifier onlyOperator() {\\n        if (msg.sender != operator) revert Errors.NotAuthorized();\\n        _;\\n    }\\n\\n    //-----------------------//\\n    //       Constructor     //\\n    //-----------------------//\\n    constructor(\\n        address _rewardDistributor,\\n        address _rewardHarvester,\\n        address _operator\\n    ) {\\n        _setRewardDistributor(_rewardDistributor);\\n        _setRewardHarvester(_rewardHarvester);\\n        _setOperator(_operator);\\n    }\\n\\n    //-----------------------//\\n    //   External Functions  //\\n    //-----------------------//\\n\\n    /**\\n     * @notice Executes swaps via DEX\\n     * @param  _claimSwapData  Common.ClaimAndSwapData[]  The data for the claims+swaps\\n     */\\n    function claimSwapAndDepositReward(\\n        Common.ClaimAndSwapData[] calldata _claimSwapData\\n    ) external onlyOperator {\\n        uint256 cLen = _claimSwapData.length;\\n\\n        if (cLen == 0) revert Errors.InvalidArray();\\n\\n        IERC20 defaultToken = IERC20(rewardHarvester.defaultToken());\\n\\n        uint256 initalAmount = defaultToken.balanceOf(address(this));\\n\\n        Common.Claim[] memory claimData = new Common.Claim[](\\n            _claimSwapData.length\\n        );\\n\\n        // Claim rewards\\n        for (uint256 i; i < cLen; ) {\\n            claimData[i].identifier = _claimSwapData[i].rwIdentifier;\\n            claimData[i].account = address(this);\\n            claimData[i].amount = _claimSwapData[i].fromAmount;\\n            claimData[i].merkleProof = _claimSwapData[i].rwMerkleProof;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        rewardDistributor.claim(claimData);\\n\\n        // Swap reward tokens to default token\\n        for (uint256 i; i < cLen; ) {\\n            _swap(_claimSwapData[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 amountClaimed = defaultToken.balanceOf(address(this)) -\\n            initalAmount;\\n\\n        // Approve reward harvester if needed\\n        if (\\n            defaultToken.allowance(address(this), address(rewardHarvester)) <\\n            amountClaimed\\n        ) {\\n            defaultToken.safeApprove(\\n                address(rewardHarvester),\\n                type(uint256).max\\n            );\\n        }\\n\\n        // Deposit reward\\n        rewardHarvester.depositReward(amountClaimed);\\n\\n        emit BribeTransferred(address(defaultToken), amountClaimed);\\n    }\\n\\n    /**\\n        @notice Change the operator\\n        @param  _operator  address  New operator address\\n     */\\n    function changeOperator(address _operator) external onlyOwner {\\n        _setOperator(_operator);\\n    }\\n\\n    /**\\n        @notice Change the reward harvester address\\n        @param  _harvester  address  New harvester address\\n     */\\n    function changeRewardHarvester(address _harvester) external onlyOwner {\\n        _setRewardHarvester(_harvester);\\n    }\\n\\n    /**\\n        @notice Change the reward distributor address\\n        @param  _distributor  address  New distributor address\\n     */\\n    function changeRewardDistributor(address _distributor) external onlyOwner {\\n        _setRewardDistributor(_distributor);\\n    }\\n\\n    //-----------------------//\\n    //   Internal Functions  //\\n    //-----------------------//\\n\\n    /**\\n        @dev    Internal to set the operator\\n        @param  _operator  address  Operator address\\n     */\\n    function _setOperator(address _operator) internal {\\n        if (_operator == address(0)) revert Errors.InvalidAddress();\\n\\n        operator = _operator;\\n\\n        emit SetOperator(_operator);\\n    }\\n\\n    /**\\n        @dev    Internal to set the reward harvester\\n        @param  _harvester  address  Reward Harvester address\\n     */\\n    function _setRewardHarvester(address _harvester) internal {\\n        if (_harvester == address(0)) revert Errors.InvalidAddress();\\n\\n        rewardHarvester = IRewardHarvester(_harvester);\\n\\n        emit SetRewardHarvester(_harvester);\\n    }\\n\\n    /**\\n        @dev    Internal to set the reward distributor\\n        @param  _distributor  address  Distributor address\\n     */\\n    function _setRewardDistributor(address _distributor) internal {\\n        if (_distributor == address(0)) revert Errors.InvalidAddress();\\n\\n        rewardDistributor = IRewardDistributor(_distributor);\\n\\n        emit SetRewardDistributor(_distributor);\\n    }\\n\\n    /**\\n     * @notice Executes a sequence of swaps via DEX\\n     * @param  _swapData       Common.SwapData  The data for the swaps\\n     * @return receivedAmount  uint256          The final amount of the toToken received\\n     */\\n    function _swap(\\n        Common.ClaimAndSwapData memory _swapData\\n    ) internal returns (uint256 receivedAmount) {\\n        if (\\n            !(_swapData.callees.length == _swapData.callLengths.length &&\\n                _swapData.callees.length == _swapData.values.length)\\n        ) {\\n            revert Errors.ExchangeDataArrayMismatch();\\n        }\\n\\n        if (_swapData.deadline < block.timestamp) {\\n            revert Errors.DeadlineBreach();\\n        }\\n\\n        if (_swapData.toAmount == 0) {\\n            revert Errors.ZeroExpectedReturns();\\n        }\\n\\n        bytes memory exchangeData = _swapData.exchangeData;\\n        uint256 calleesLength = _swapData.callees.length;\\n\\n        if (calleesLength == 0) revert Errors.InvalidArray();\\n\\n        bytes4 transferFromSelector = IERC20.transferFrom.selector;\\n        uint256 initialAmount = IERC20(_swapData.toToken).balanceOf(\\n            address(this)\\n        );\\n\\n        uint256 currentDataStartIndex = 0;\\n        for (uint256 i; i < calleesLength; ) {\\n            // Check if the call is a transferFrom call\\n            // protect caller from transferring more than `fromAmount`\\n            {\\n                bytes32 selector;\\n                assembly {\\n                    selector := mload(add(exchangeData, add(currentDataStartIndex, 32)))\\n                }\\n                if (bytes4(selector) == transferFromSelector) {\\n                    revert Errors.TransferFromCall();\\n                }\\n            }\\n            bool result = _externalCall(\\n                _swapData.callees[i], //destination\\n                _swapData.values[i], //value to send\\n                currentDataStartIndex, // start index of call data\\n                _swapData.callLengths[i], // length of calldata\\n                exchangeData // total calldata\\n            );\\n            if (!result) {\\n                revert Errors.ExternalCallFailure();\\n            }\\n            currentDataStartIndex += _swapData.callLengths[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        receivedAmount = IERC20(_swapData.toToken).balanceOf(address(this));\\n\\n        if ((receivedAmount - initialAmount) < _swapData.toAmount) {\\n            revert Errors.InsufficientReturn();\\n        }\\n    }\\n\\n    /**\\n     * @dev Source take from GNOSIS MultiSigWallet\\n     * @dev https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\\n     */\\n    function _externalCall(\\n        address _destination,\\n        uint256 _value,\\n        uint256 _dataOffset,\\n        uint256 _dataLength,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bool result;\\n        assembly {\\n            let x := mload(0x40) // \\\"Allocate\\\" memory for output\\n            // (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n\\n            let d := add(_data, 32) // First 32 bytes are the padded length of data, so exclude that\\n            result := call(\\n                gas(),\\n                _destination,\\n                _value,\\n                add(d, _dataOffset),\\n                _dataLength, // Size of the input (in bytes) - this is what fixes the padding problem\\n                x,\\n                0 // Output is ignored, therefore the output size is zero\\n            )\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\"\r\n        }\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardDistributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardHarvester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DeadlineBreach\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExchangeDataArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExternalCallFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientReturn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroExpectedReturns\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"BribeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"SetOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardDistributor\",\"type\":\"address\"}],\"name\":\"SetRewardDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardHarvester\",\"type\":\"address\"}],\"name\":\"SetRewardHarvester\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"changeRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"changeRewardHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"rwIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"callLengths\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"exchangeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"rwMerkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct Common.ClaimAndSwapData[]\",\"name\":\"_claimSwapData\",\"type\":\"tuple[]\"}],\"name\":\"claimSwapAndDepositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDistributor\",\"outputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHarvester\",\"outputs\":[{\"internalType\":\"contract IRewardHarvester\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardSwapper", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a9b08b4ceec1ef29edec7f9c94583270337d6416000000000000000000000000b02748d3eee8691c94b7c8d6788776aa52571628000000000000000000000000fcd2f5f382e4b3cd3b67a4e399ada0edf56d0383", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}