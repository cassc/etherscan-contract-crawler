{"SourceCode": "library CCTPMessage {\r\n    using LibBytes for *;\r\n    uint8 public constant MESSAGE_BODY_INDEX = 116;\r\n\r\n    function body(bytes memory message) public pure returns (bytes memory) {\r\n        return\r\n            message.slice(\r\n                MESSAGE_BODY_INDEX,\r\n                message.length - MESSAGE_BODY_INDEX\r\n            );\r\n    }\r\n\r\n    /*function testGetCCTPMessageBody() public pure {\r\n        bytes\r\n            memory message = hex\"0000000000000003000000000000000000000071000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000233333\";\r\n        bytes memory messageBody = body(message);\r\n        require(keccak256(messageBody) == keccak256(hex\"233333\"));\r\n    }*/\r\n}\r\nlibrary LibBytes {\r\n    function addressToBytes32(address addr) external pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(addr)));\r\n    }\r\n\r\n    function bytes32ToAddress(bytes32 _buf) public pure returns (address) {\r\n        return address(uint160(uint256(_buf)));\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint256 _start,\r\n        uint256 _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 >= _length, \"slice_overflow\");\r\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                tempBytes := mload(0x40)\r\n\r\n                let lengthmod := and(_length, 31)\r\n\r\n                let mc := add(\r\n                    add(tempBytes, lengthmod),\r\n                    mul(0x20, iszero(lengthmod))\r\n                )\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    let cc := add(\r\n                        add(\r\n                            add(_bytes, lengthmod),\r\n                            mul(0x20, iszero(lengthmod))\r\n                        ),\r\n                        _start\r\n                    )\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            default {\r\n                tempBytes := mload(0x40)\r\n                mstore(tempBytes, 0)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"MESSAGE_BODY_INDEX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"body\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CCTPMessage", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d58c98443956b1ae79d52ea06a6bacf0b0abac4428cea5df7b9405b19891cc5"}