{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/SCompStrategyV1.1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"./SCompStrategyBase.sol\\\";\\n\\n/*\\nVersion 1.1:\\n    - Amount out min calculate version without variant\\n*/\\ncontract SCompStrategyV1_1 is\\nSCompStrategyBase\\n{\\n\\n    using SafeMath for uint256;\\n    /**\\n     * @param _nameStrategy name string of strategy\\n     * @param _governance is authorized actors, authorized pauser, can call earn, can set params strategy, receive fee harvest\\n     * @param _strategist receive fee compound\\n     * @param _want address lp to deposit\\n     * @param _tokenCompound address token to compound\\n     * @param _pid id of pool in convex booster\\n     * @param _feeConfig performanceFee governance e strategist + fee withdraw\\n     * @param _curvePool curve pool config\\n     */\\n    constructor(\\n        string memory _nameStrategy,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _want,\\n        address _tokenCompound,\\n        uint256 _pid,\\n        uint256[3] memory _feeConfig,\\n        CurvePoolConfig memory _curvePool\\n    ) SCompStrategyBase(_nameStrategy, _governance, _strategist, _controller, _want, _tokenCompound, _pid, _feeConfig, _curvePool) {\\n    }\\n\\n    function version() virtual override external pure returns (string memory) {\\n        return \\\"1.1\\\";\\n    }\\n\\n    function _getAmountOutMinAddLiquidity(uint _amount) virtual override public view returns(uint){\\n        uint amountCurveOut;\\n        if ( curvePool.numElements == 2 ) {\\n            uint[2] memory amounts;\\n            amounts[curvePool.tokenCompoundPosition] = _amount;\\n            amountCurveOut = ICurveFi(curvePool.swap).calc_token_amount(amounts, true);\\n        } else if ( curvePool.numElements == 3 ) {\\n            uint[3] memory amounts;\\n            amounts[curvePool.tokenCompoundPosition] = _amount;\\n            amountCurveOut = ICurveFi(curvePool.swap).calc_token_amount(amounts, true);\\n        } else {\\n            uint[4] memory amounts;\\n            amounts[curvePool.tokenCompoundPosition] = _amount;\\n            amountCurveOut = ICurveFi(curvePool.swap).calc_token_amount(amounts, true);\\n        }\\n        amountCurveOut -= amountCurveOut.mul(slippageLiquidity).div(PRECISION);\\n        return amountCurveOut;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/SCompStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./abstract/BaseStrategy.sol\\\";\\nimport \\\"./utility/TokenSwapPathRegistry.sol\\\";\\nimport \\\"../utility/uniswap/UniswapSwapper.sol\\\";\\nimport \\\"../utility/interface/IBooster.sol\\\";\\nimport \\\"../utility/interface/IBaseRewardsPool.sol\\\";\\nimport \\\"../utility/StableMath.sol\\\";\\nimport \\\"../oracle/OracleRouter.sol\\\";\\nimport \\\"../utility/interface/IBasicToken.sol\\\";\\nimport \\\"../utility/curve/CurveSwapper.sol\\\";\\n\\npragma experimental ABIEncoderV2;\\n\\n\\n/*\\nVersion 1.0:\\n    - Amount out min calculate with previous balance check\\n*/\\nabstract contract SCompStrategyBase is\\nBaseStrategy,\\nCurveSwapper,\\nUniswapSwapper\\n{\\n\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using StableMath for uint256;\\n\\n    // ===== Token Registry =====\\n    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n    address public constant cvx = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n\\n    IERC20 public constant crvToken =\\n    IERC20(crv);\\n    IERC20 public constant cvxToken =\\n    IERC20(cvx);\\n\\n    // ===== Convex Registry =====\\n    IBooster public constant booster =\\n    IBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n    IBaseRewardsPool public baseRewardsPool;\\n\\n    uint256 public constant MAX_UINT_256 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    uint256 public pid;\\n    address public tokenCompoundAddress;\\n    IERC20 public tokenCompound;\\n\\n    mapping(address => bool) public whitelistRouter;\\n\\n    uint256 public slippageSwapCrv = 100; // 5000 -> 50% ; 500 -> 5% ; 50 -> 0.5% ; 5 -> 0.05%\\n    uint256 public slippageSwapCvx = 100; // 5000 -> 50% ; 500 -> 5% ; 50 -> 0.5% ; 5 -> 0.05%\\n\\n    uint256 public slippageLiquidity = 100; // 5000 -> 50% ; 500 -> 5% ; 50 -> 0.5% ; 5 -> 0.05%\\n\\n    address public oracleRouter;\\n\\n    struct CurvePoolConfig {\\n        address swap;\\n        uint256 tokenCompoundPosition;\\n        uint256 numElements;\\n    }\\n\\n    struct ParamsSwapHarvest {\\n        bytes[] listPathData;\\n        uint[] listTypeSwap;\\n        address[] listRouterAddress;\\n    }\\n\\n    CurvePoolConfig public curvePool;\\n\\n    string nameStrategy;\\n\\n    event PerformanceFeeGovernance(\\n        address indexed destination,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 indexed blockNumber,\\n        uint256 timestamp\\n    );\\n    event PerformanceFeeStrategist(\\n        address indexed destination,\\n        address indexed token,\\n        uint256 amount,\\n        uint256 indexed blockNumber,\\n        uint256 timestamp\\n    );\\n\\n    event WithdrawState(\\n        uint256 toWithdraw,\\n        uint256 preWant,\\n        uint256 postWant,\\n        uint256 withdrawn\\n    );\\n\\n    struct TendData {\\n        uint256 crvTended;\\n        uint256 cvxTended;\\n    }\\n\\n    event TendState(uint crvTended, uint cvxTended);\\n\\n    /**\\n     * @param _nameStrategy name string of strategy\\n     * @param _governance is authorized actors, authorized pauser, can call earn, can set params strategy, receive fee harvest\\n     * @param _strategist receive fee compound\\n     * @param _want address lp to deposit\\n     * @param _tokenCompound address token to compound\\n     * @param _pid id of pool in convex booster\\n     * @param _feeConfig performanceFee governance e strategist + fee withdraw\\n     * @param _curvePool curve pool config\\n     */\\n    constructor(\\n        string memory _nameStrategy,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _want,\\n        address _tokenCompound,\\n        uint256 _pid,\\n        uint256[3] memory _feeConfig,\\n        CurvePoolConfig memory _curvePool\\n    ) BaseStrategy(_governance, _strategist, _controller) {\\n\\n        nameStrategy = _nameStrategy;\\n\\n        want = _want;\\n\\n        pid = _pid; // Core staking pool ID\\n\\n        IBooster.PoolInfo memory poolInfo = booster.poolInfo(pid);\\n        baseRewardsPool = IBaseRewardsPool(poolInfo.crvRewards);\\n\\n        performanceFeeGovernance = _feeConfig[0];\\n        performanceFeeStrategist = _feeConfig[1];\\n        withdrawalFee = _feeConfig[2];\\n\\n        tokenCompoundAddress = _tokenCompound;\\n        tokenCompound = IERC20(_tokenCompound);\\n\\n        // Approvals: Staking Pools\\n        IERC20(want).approve(address(booster), MAX_UINT_256);\\n\\n        curvePool = CurvePoolConfig(\\n            _curvePool.swap,\\n            _curvePool.tokenCompoundPosition,\\n            _curvePool.numElements\\n        );\\n    }\\n\\n    function version() virtual external pure returns (string memory);\\n\\n    function _setOracleRouter(address _router) internal {\\n        oracleRouter = _router;\\n    }\\n\\n    /**\\n     * @dev add router to whitelist\\n     * Requirements:\\n     *\\n     * - router must be not already whitelist.\\n     */\\n    function _addWhitelistRouter(address _address) public virtual {\\n        require(!isWhitelistedRouter(_address), \\\"already whitelisted\\\");\\n\\n        whitelistRouter[_address] = true;\\n    }\\n\\n    /**\\n     * @dev remove router to whitelist\\n     * Requirements:\\n     *\\n     * - router must be whitelist.\\n     */\\n    function _removeWhitelistRouter(address _address) public virtual {\\n        require(isWhitelistedRouter(_address), \\\"not whitelisted\\\");\\n\\n        whitelistRouter[_address] = false;\\n    }\\n\\n\\n    function _getAmountOutMinAddLiquidity(uint _amount) virtual public view returns(uint);\\n\\n    function getName() external view override returns (string memory) {\\n        return nameStrategy;\\n    }\\n\\n    function approveForAll() external {\\n        // Approvals: Staking Pools\\n        IERC20(want).approve(address(booster), MAX_UINT_256);\\n    }\\n\\n    /// ===== Permissioned Functions =====\\n    function setPid(uint256 _pid) external {\\n        _onlyGovernance();\\n        pid = _pid; // LP token pool ID\\n    }\\n\\n    function setCurvePoolSwap(CurvePoolConfig memory _curvePool) external {\\n        _onlyGovernance();\\n        curvePool = CurvePoolConfig(\\n                _curvePool.swap,\\n                _curvePool.tokenCompoundPosition,\\n                _curvePool.numElements\\n        );\\n    }\\n\\n    function setTokenCompound(address _tokenCompound, uint _tokenCompoundPosition) external {\\n        _onlyGovernance();\\n        tokenCompoundAddress = _tokenCompound;\\n        tokenCompound = IERC20(_tokenCompound);\\n        curvePool.tokenCompoundPosition = _tokenCompoundPosition;\\n\\n    }\\n\\n    function setOracleRouter(address _router) external {\\n        _onlyGovernance();\\n        _setOracleRouter(_router);\\n    }\\n\\n    function addWhitelistRouter(address _address) external {\\n        _onlyGovernance();\\n        _addWhitelistRouter(_address);\\n    }\\n\\n    function removeWhitelistRouter(address _address) external {\\n        _onlyGovernance();\\n        _removeWhitelistRouter(_address);\\n    }\\n\\n    /**\\n     * @dev check if router is whitelisted\\n     */\\n    function isWhitelistedRouter(address _address) public view returns(bool) {\\n        return whitelistRouter[_address];\\n    }\\n\\n    function setSlippageSwapCrv(uint _slippage) external {\\n        _onlyGovernance();\\n        require(_slippage <= PRECISION, \\\"slippage must be less than PRECISION\\\");\\n        slippageSwapCrv = _slippage;\\n    }\\n\\n    function setSlippageSwapCvx(uint _slippage) external {\\n        _onlyGovernance();\\n        require(_slippage <= PRECISION, \\\"slippage must be less than PRECISION\\\");\\n        slippageSwapCvx = _slippage;\\n    }\\n\\n    function setSlippageLiquidity(uint _slippage) external {\\n        _onlyGovernance();\\n        require(_slippage <= PRECISION, \\\"slippage must be less than PRECISION\\\");\\n        slippageLiquidity = _slippage;\\n    }\\n\\n    function balanceOfPool() public view override returns (uint256) {\\n        return baseRewardsPool.balanceOf(address(this));\\n    }\\n\\n    /// ===== Internal Core Implementations =====\\n    function _onlyNotProtectedTokens(address _asset) internal view override {\\n        require(address(want) != _asset, \\\"want\\\");\\n        require(address(crv) != _asset, \\\"crv\\\");\\n        require(address(cvx) != _asset, \\\"cvx\\\");\\n    }\\n\\n    /// @dev Deposit Badger into the staking contract\\n    function _deposit(uint256 _want) internal override {\\n        // Deposit all want in core staking pool\\n        booster.deposit(pid, _want, true);\\n    }\\n\\n    /// @dev Unroll from all strategy positions, and transfer non-core tokens to controller rewards\\n    function _withdrawAll() internal override {\\n        baseRewardsPool.withdrawAndUnwrap(balanceOfPool(), false);\\n        // Note: All want is automatically withdrawn outside this \\\"inner hook\\\" in base strategy function\\n    }\\n\\n    /// @dev Withdraw want from staking rewards, using earnings first\\n    function _withdrawSome(uint256 _amount)\\n    internal\\n    override\\n    returns (uint256)\\n    {\\n        // Get idle want in the strategy\\n        uint256 _preWant = IERC20(want).balanceOf(address(this));\\n\\n        // If we lack sufficient idle want, withdraw the difference from the strategy position\\n        if (_preWant < _amount) {\\n            uint256 _toWithdraw = _amount.sub(_preWant);\\n            baseRewardsPool.withdrawAndUnwrap(_toWithdraw, false);\\n        }\\n\\n        // Confirm how much want we actually end up with\\n        uint256 _postWant = IERC20(want).balanceOf(address(this));\\n\\n        // Return the actual amount withdrawn if less than requested\\n        uint256 _withdrawn = Math.min(_postWant, _amount);\\n        emit WithdrawState(_amount, _preWant, _postWant, _withdrawn);\\n\\n        return _withdrawn;\\n    }\\n\\n    function _tendGainsFromPositions() internal {\\n        // Harvest CRV from staking positions\\n        // Note: Always claim extras\\n        baseRewardsPool.getReward(address(this), true);\\n    }\\n\\n    function _takeFeeAutoCompounded(address _tokenAddress, uint _amount) internal returns(uint) {\\n        // take fee\\n        uint256 autoCompoundedPerformanceFeeGovernance;\\n        if(performanceFeeGovernance > 0) {\\n            autoCompoundedPerformanceFeeGovernance =\\n            _amount.mul(performanceFeeGovernance).div(\\n                PRECISION\\n            );\\n            IERC20(_tokenAddress).transfer(\\n                governance,\\n                autoCompoundedPerformanceFeeGovernance\\n            );\\n            emit PerformanceFeeGovernance(\\n                governance,\\n                _tokenAddress,\\n                autoCompoundedPerformanceFeeGovernance,\\n                block.number,\\n                block.timestamp\\n            );\\n        }\\n        uint256 autoCompoundedPerformanceFeeStrategist;\\n        if(performanceFeeStrategist > 0) {\\n            autoCompoundedPerformanceFeeStrategist =\\n            _amount.mul(performanceFeeStrategist).div(\\n                PRECISION\\n            );\\n            IERC20(_tokenAddress).transfer(\\n                strategist,\\n                autoCompoundedPerformanceFeeStrategist\\n            );\\n            emit PerformanceFeeStrategist(\\n                strategist,\\n                _tokenAddress,\\n                autoCompoundedPerformanceFeeStrategist,\\n                block.number,\\n                block.timestamp\\n            );\\n        }\\n\\n        return autoCompoundedPerformanceFeeStrategist + autoCompoundedPerformanceFeeGovernance;\\n\\n    }\\n\\n    /// @notice The more frequent the tend, the higher returns will be\\n    function tend() external whenNotPaused returns (TendData memory) {\\n        TendData memory tendData;\\n\\n        // 1. Harvest gains from positions\\n        _tendGainsFromPositions();\\n\\n        // Track harvested coins, before conversion\\n        tendData.crvTended = crvToken.balanceOf(address(this));\\n        tendData.cvxTended = cvxToken.balanceOf(address(this));\\n\\n        emit Tend(0);\\n        emit TendState(\\n            tendData.crvTended,\\n            tendData.cvxTended\\n        );\\n        return tendData;\\n    }\\n\\n    function harvest(ParamsSwapHarvest memory paramsSwap) external whenNotPaused returns (uint256) {\\n        uint256 idleWant = IERC20(want).balanceOf(address(this));\\n        uint256 totalWantBefore = balanceOf();\\n\\n        // 1. Withdraw accrued rewards from staking positions (claim unclaimed positions as well)\\n        baseRewardsPool.getReward(address(this), true);\\n\\n        // 2. Sell reward - fee for underlying\\n        uint crvToSell = crvToken.balanceOf(address(this));\\n        if(crvToSell > 0)  {\\n            uint fee = _takeFeeAutoCompounded(crv, crvToSell);\\n            crvToSell = crvToSell.sub(fee);\\n\\n            _makeSwap(crv, tokenCompoundAddress, crvToSell,\\n                paramsSwap.listTypeSwap[0], paramsSwap.listRouterAddress[0], paramsSwap.listPathData[0]);\\n        }\\n\\n        uint cvxToSell = cvxToken.balanceOf(address(this));\\n        if(cvxToSell > 0)  {\\n            uint fee = _takeFeeAutoCompounded(cvx, cvxToSell);\\n            cvxToSell = cvxToSell.sub(fee);\\n\\n            _makeSwap(cvx, tokenCompoundAddress, cvxToSell,\\n                paramsSwap.listTypeSwap[1], paramsSwap.listRouterAddress[1], paramsSwap.listPathData[1]);\\n        }\\n\\n        // 4. Roll Want gained into want position\\n        uint256 tokenCompoundToDeposit = tokenCompound.balanceOf(address(this));\\n        uint256 wantGained;\\n\\n        if (tokenCompoundToDeposit > 0) {\\n\\n            _addLiquidityCurve(tokenCompoundToDeposit);\\n\\n            wantGained = IERC20(want).balanceOf(address(this)).sub(idleWant);\\n        }\\n\\n        // Deposit remaining want (including idle want) into strategy position\\n        uint256 wantToDeposited = IERC20(want).balanceOf(address(this));\\n\\n        if (wantToDeposited > 0) {\\n            _deposit(wantToDeposited);\\n        }\\n\\n        uint256 totalWantAfter = balanceOf();\\n        require(totalWantAfter >= totalWantBefore, \\\"want-decreased\\\");\\n\\n        emit Harvest(wantGained, block.number);\\n        return wantGained;\\n    }\\n\\n    function _addLiquidityCurve(uint _amount) internal {\\n        uint minLpOutput = _getAmountOutMinAddLiquidity(_amount);\\n\\n        _add_liquidity_single_coin(\\n            curvePool.swap,\\n            tokenCompoundAddress,\\n            _amount,\\n            curvePool.tokenCompoundPosition,\\n            curvePool.numElements,\\n            minLpOutput\\n        );\\n    }\\n\\n    function _makeSwap(address _tokenIn, address _tokenOut, uint _amountIn, uint _swapType, address _router, bytes memory _pathData) internal {\\n        require(isWhitelistedRouter(_router), \\\"_router is not whitelisted\\\");\\n        uint amountOutMin = _getAmountOutMinSwap(_tokenIn, _tokenOut, _amountIn);\\n        if(_swapType == 0) {\\n            _swapExactTokensForTokens(_router, _tokenIn, _amountIn, amountOutMin, _pathData, address(this));\\n        } else if(_swapType == 1) {\\n            _swapExactInputMultihop(_router, _tokenIn, _amountIn, amountOutMin, _pathData, address(this));\\n        } else {\\n            _exchange_multiple(_router, _tokenIn, _amountIn, amountOutMin, _pathData, address(this));\\n        }\\n    }\\n\\n    function _getAmountOutMinSwap(address _tokenIn, address _tokenOut, uint _amountIn) public view returns(uint){\\n        uint slippageTokenOut = _tokenIn == crv ? slippageSwapCrv : slippageSwapCvx;\\n        (uint tokenInPrice, ) = OracleRouter(oracleRouter).price(_tokenIn);\\n        (uint tokenOutPrice, ) = OracleRouter(oracleRouter).price(_tokenOut);\\n        // sanitary check\\n        if(tokenOutPrice == 0 ) {\\n            return 0;\\n        }\\n\\n        uint amountOutMin = _amountIn * tokenInPrice / tokenOutPrice;\\n        uint decimalsTokenIn = IBasicToken(_tokenIn).decimals();\\n        uint decimalsTokenOut = IBasicToken(_tokenOut).decimals();\\n        amountOutMin = amountOutMin.scaleBy(decimalsTokenOut, decimalsTokenIn);\\n        amountOutMin -= amountOutMin.mul(slippageTokenOut).div(PRECISION);\\n        return amountOutMin.mulTruncate(uint256(1e18));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utility/StableMath.sol\": {\r\n      \"content\": \"// StableMath.sol\\n// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/OracleRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.13;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * Oracle set to retrieve the price of an asset in dollars with 8 decimals.\\n * @dev If feed not exist admin can set a price fixed for the asset\\n * @dev When adding a feed for a stablecoin asset, set the '_isStablecoin' variable to true\\n *  to enable checking for stablecoins that cannot deviate in price by more than 30% from 1 USD.\\n * @dev Use \\\"setFeed(address _asset, address _feed, uint _priceAdmin, bool _isStablecoin)\\\" to add a new asset.\\n * @dev Use \\\"price(address _asset)\\\" to retrieve the price of an asset in USD with 8 decimal\\n */\\ncontract OracleRouter is Ownable {\\n    uint256 constant MIN_DRIFT = uint256(70000000);\\n    uint256 constant MAX_DRIFT = uint256(130000000);\\n\\n    struct FeedStruct {\\n        address feedAddress;\\n        uint priceAdmin;\\n        uint heartbeat;\\n        bool isStablecoin;\\n    }\\n    mapping(address => FeedStruct) public assetToFeed;\\n\\n    function setFeed(address _asset, address _feed, uint _priceAdmin, uint _heartbeat, bool _isStablecoin) external {\\n        require(_feed == address(0) || _priceAdmin == 0, \\\"cannot set feed and priceAdmin at same time\\\");\\n        assetToFeed[_asset].feedAddress = _feed;\\n        assetToFeed[_asset].priceAdmin = _priceAdmin;\\n        assetToFeed[_asset].heartbeat = _heartbeat;\\n        assetToFeed[_asset].isStablecoin = _isStablecoin;\\n    }\\n\\n    /**\\n     * @dev The price feed contract to use for a particular asset and if is a stablecoin.\\n     * @param _asset address of the asset\\n     */\\n    function getFeed(address _asset) public view returns (address, uint, uint, bool) {\\n        return (assetToFeed[_asset].feedAddress, assetToFeed[_asset].priceAdmin, assetToFeed[_asset].heartbeat, assetToFeed[_asset].isStablecoin);\\n    }\\n\\n    /**\\n     * @notice Returns the total price in 8 digit USD for a given asset.\\n     * @param _asset address of the asset\\n     * @return uint256 USD price of 1 of the asset, in 8 decimal fixed\\n     */\\n    function price(address _asset) external view virtual returns (uint, uint) {\\n        (address feed, uint priceAdmin, uint heartbeat, bool isStablecoin) = getFeed(_asset);\\n        if(feed == address(0)) {\\n            return (priceAdmin, 2);\\n        }\\n        (, int256 iPrice, uint startedAt, ,) = AggregatorV3Interface(feed).latestRoundData();\\n        uint8 decimals = AggregatorV3Interface(feed).decimals();\\n        require(verifyTimestampRound(startedAt, heartbeat), \\\"feed price is not updated\\\");\\n        uint256 priceRoundData = uint256(iPrice);\\n        if (isStablecoin) {\\n            require(priceRoundData <= MAX_DRIFT, \\\"price exceeds max\\\");\\n            require(priceRoundData >= MIN_DRIFT, \\\"price under min\\\");\\n        }\\n        return (priceRoundData, uint(decimals));\\n    }\\n\\n    function verifyTimestampRound(uint _timestampRound, uint _heartbeat) public view returns (bool) {\\n        return (block.timestamp - _timestampRound) <= _heartbeat;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/abstract/BaseStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../../controller/interface/IController.sol\\\";\\nimport \\\"../../accessControl/SCompAccessControl.sol\\\";\\n\\n/*\\n    ===== Badger Base Strategy =====\\n    Common base class for all Sett strategies\\n\\n    Changelog\\n    V1.1\\n    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\\n    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\\n\\n    V1.2\\n    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\\n\\n    sComp updated:\\n    V1.0\\n    - Remove keeper\\n    - Remove guardian\\n*/\\nabstract contract BaseStrategy is Pausable, SCompAccessControl {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    event SetController(address controller);\\n    event SetWithdrawalFee(uint256 withdrawalFee);\\n    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);\\n    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);\\n    event Harvest(uint256 harvested, uint256 indexed blockNumber);\\n    event Tend(uint256 tended);\\n\\n    address public want;\\n\\n    uint256 public performanceFeeGovernance;\\n    uint256 public performanceFeeStrategist;\\n    uint256 public withdrawalFee;\\n\\n    uint256 public constant PRECISION = 10000;\\n\\n    address public controller;\\n\\n    uint256 public withdrawalMaxDeviationThreshold;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller\\n    ){\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        withdrawalMaxDeviationThreshold = 50;\\n    }\\n\\n    // ===== Modifiers =====\\n\\n    function _onlyController() internal view {\\n        require(msg.sender == controller, \\\"onlyController\\\");\\n    }\\n\\n    function _onlyAuthorizedActorsOrController() internal view {\\n        require(\\n            msg.sender == governance ||\\n            msg.sender == controller,\\n            \\\"onlyAuthorizedActorsOrController\\\"\\n        );\\n    }\\n\\n    function _onlyAuthorizedPausers() internal view {\\n        require(\\n            msg.sender == governance,\\n            \\\"onlyPausers\\\"\\n        );\\n    }\\n\\n    /// ===== View Functions =====\\n    function baseStrategyVersion() public pure returns (string memory) {\\n        return \\\"1.0\\\";\\n    }\\n\\n    /// @notice Get the balance of want held idle in the Strategy\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\\n    function balanceOf() public view virtual returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function isTendable() public pure virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function isProtectedToken(address token) public view returns (bool) {\\n        address[] memory protectedTokens = getProtectedTokens();\\n        for (uint256 i = 0; i < protectedTokens.length; i++) {\\n            if (token == protectedTokens[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// ===== Permissioned Actions: TimeLockController =====\\n\\n    function setWithdrawalFee(uint256 _withdrawalFee) external {\\n        _onlyTimeLockController();\\n        require(_withdrawalFee <= PRECISION, \\\"excessive-fee\\\");\\n        withdrawalFee = _withdrawalFee;\\n        emit SetWithdrawalFee(_withdrawalFee);\\n    }\\n\\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist)\\n    external\\n    {\\n        _onlyTimeLockController();\\n        require(_performanceFeeStrategist <= PRECISION, \\\"excessive-fee\\\");\\n        performanceFeeStrategist = _performanceFeeStrategist;\\n        emit SetPerformanceFeeStrategist(_performanceFeeStrategist);\\n    }\\n\\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance)\\n    external\\n    {\\n        _onlyTimeLockController();\\n        require(_performanceFeeGovernance <= PRECISION, \\\"excessive-fee\\\");\\n        performanceFeeGovernance = _performanceFeeGovernance;\\n        emit SetPerformanceFeeGovernance(_performanceFeeGovernance);\\n    }\\n\\n    /// ===== Permissioned Actions: Governance =====\\n\\n    function setController(address _controller) external {\\n        _onlyGovernance();\\n        controller = _controller;\\n        emit SetController(_controller);\\n    }\\n\\n    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\\n        _onlyGovernance();\\n        require(_threshold <= PRECISION, \\\"excessive-threshold\\\");\\n        withdrawalMaxDeviationThreshold = _threshold;\\n    }\\n\\n    function deposit() public virtual whenNotPaused {\\n        _onlyAuthorizedActorsOrController();\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            _deposit(_want);\\n        }\\n        _postDeposit();\\n    }\\n\\n    // ===== Permissioned Actions: Controller =====\\n\\n    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\\n    function withdrawAll()\\n    external\\n    virtual\\n    whenNotPaused\\n    {\\n        _onlyController();\\n\\n        _withdrawAll();\\n\\n        _transferToVault(IERC20(want).balanceOf(address(this)));\\n    }\\n\\n    /// @notice Withdraw partial funds from the strategy, unrolling from strategy positions as necessary\\n    /// @notice Processes withdrawal fee if present\\n    /// @dev If it fails to recover sufficient funds (defined by withdrawalMaxDeviationThreshold), the withdrawal should fail so that this unexpected behavior can be investigated\\n    function withdraw(uint256 _amount) external virtual whenNotPaused {\\n        _onlyController();\\n\\n        // Withdraw from strategy positions, typically taking from any idle want first.\\n        _withdrawSome(_amount);\\n        uint256 _postWithdraw =\\n        IERC20(want).balanceOf(address(this));\\n\\n        // Sanity check: Ensure we were able to retrieve sufficent want from strategy positions\\n        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\\n        if (_postWithdraw < _amount) {\\n            uint256 diff = _diff(_amount, _postWithdraw);\\n\\n            // Require that difference between expected and actual values is less than the deviation threshold percentage\\n            require(\\n                diff <=\\n                _amount.mul(withdrawalMaxDeviationThreshold).div(PRECISION),\\n                \\\"withdraw-exceed-max-deviation-threshold\\\"\\n            );\\n        }\\n\\n        // Return the amount actually withdrawn if less than amount requested\\n        uint256 _toWithdraw = Math.min(_postWithdraw, _amount);\\n\\n        // Process withdrawal fee\\n        uint256 _fee = _processWithdrawalFee(_toWithdraw);\\n\\n        // Transfer remaining to Vault to handle withdrawal\\n        _transferToVault(_toWithdraw.sub(_fee));\\n    }\\n\\n    // NOTE: must exclude any tokens used in the yield\\n    // Controller role - withdraw should return to Controller\\n    function withdrawOther(address _asset)\\n    external\\n    virtual\\n    whenNotPaused\\n    returns (uint256 balance)\\n    {\\n        _onlyController();\\n        _onlyNotProtectedTokens(_asset);\\n\\n        balance = IERC20(_asset).balanceOf(address(this));\\n        IERC20(_asset).safeTransfer(controller, balance);\\n    }\\n\\n    /// ===== Permissioned Actions: Authoized Contract Pausers =====\\n\\n    function pause() external {\\n        _onlyAuthorizedPausers();\\n        _pause();\\n    }\\n\\n    function unpause() external {\\n        _onlyGovernance();\\n        _unpause();\\n    }\\n\\n    /// ===== Internal Helper Functions =====\\n\\n    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\\n    /// @return The withdrawal fee that was taken\\n    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\\n        if (withdrawalFee == 0) {\\n            return 0;\\n        }\\n\\n        uint256 fee = _amount.mul(withdrawalFee).div(PRECISION);\\n        IERC20(want).safeTransfer(\\n            IController(controller).rewards(),\\n            fee\\n        );\\n        return fee;\\n    }\\n\\n    /// @dev Helper function to process an arbitrary fee\\n    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\\n    /// @return The fee that was taken\\n    function _processFee(\\n        address token,\\n        uint256 amount,\\n        uint256 feeBps,\\n        address recipient\\n    ) internal returns (uint256) {\\n        if (feeBps == 0) {\\n            return 0;\\n        }\\n        uint256 fee = amount.mul(feeBps).div(PRECISION);\\n        IERC20(token).safeTransfer(recipient, fee);\\n        return fee;\\n    }\\n\\n    function _transferToVault(uint256 _amount) internal {\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_vault, _amount);\\n    }\\n\\n    /// @notice Utility function to diff two numbers, expects higher value in first position\\n    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(a >= b, \\\"diff/expected-higher-number-in-first-position\\\");\\n        return a.sub(b);\\n    }\\n\\n    // ===== Abstract Functions: To be implemented by specific Strategies =====\\n\\n    /// @dev Internal deposit logic to be implemented by Stratgies\\n    function _deposit(uint256 _want) internal virtual;\\n\\n    function _postDeposit() internal virtual {\\n        //no-op by default\\n    }\\n\\n    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\\n    function _onlyNotProtectedTokens(address _asset) internal virtual;\\n\\n    function getProtectedTokens()\\n    public\\n    view\\n    virtual\\n    returns (address[] memory)\\n    {\\n        return new address[](0);\\n    }\\n\\n    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\\n    function _withdrawAll() internal virtual;\\n\\n    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\\n    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    /// @dev Realize returns from positions\\n    /// @dev Returns can be reinvested into positions, or distributed in another fashion\\n    /// @dev Performance fees should also be implemented in this function\\n    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\\n    // function harvest() external virtual;\\n\\n    /// @dev User-friendly name for this strategy for purposes of convenient reading\\n    function getName() external virtual returns (string memory);\\n\\n    /// @dev Balance of want currently held in strategy positions\\n    function balanceOfPool() public view virtual returns (uint256);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utility/interface/IBasicToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.13;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/utility/TokenSwapPathRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\n/*\\n    Expands swapping functionality over base strategy\\n    - ETH in and ETH out Variants\\n    - Sushiswap support in addition to Uniswap\\n*/\\ncontract TokenSwapPathRegistry {\\n    struct SwapPathStruct {\\n        bytes pathData;\\n        address[] pathAddress;\\n        uint swapType;  // 0 == uniswapv2, 1 == sushiswap, 2 == uniswapv3\\n    }\\n\\n    mapping(address => mapping(address => SwapPathStruct)) public swapPaths;\\n    event PathUpdated(address indexed tokenIn, address indexed tokenOut, bytes newPath);\\n    event TokenRevoked(address indexed tokenIn, address indexed tokenOut);\\n\\n    /// @notice Adds a token to support with this contract\\n    /// @param _tokenIn Token in to add to this contract\\n    /// @param _tokenOut Token out to add to this contract\\n    /// @param _pathAddress Addresses used (in order) for the swap\\n    /// @param _pathFees Fees used (in order) to get the path for the pool to use for the swap / only for uniswap v3\\n    /// @param _swapParams params type for swap curve router\\n    /// @param _poolAddress pool address for swap curve router\\n    /// @param _swapType indicate which type of swap will be executed - 0 == uniswapv2 / 1 == sushiswap / 2 == uniswapv3 / 3 == curve\\n    /// @dev This function can be called to change the path for a token or to add a new supported\\n    /// token\\n    function _addToken(\\n        address _tokenIn, address _tokenOut,\\n        address[] memory _pathAddress, // v2 + v3\\n        uint24[] memory _pathFees, // v3\\n        uint[][] memory _swapParams, address[] memory _poolAddress, // curve\\n        uint _swapType\\n    ) internal {\\n        require(_tokenIn != address(0) && _tokenOut != address(0), \\\"token address cannot be address(0)\\\");\\n        require(_pathAddress.length >= 2, \\\"error address length\\\");\\n        require((_pathAddress.length == _pathFees.length + 1) || _swapType != 2, \\\"error path length\\\");\\n        require((_pathAddress.length == 9 && _swapParams.length == 4 && _poolAddress.length == 4) || _swapType != 3, \\\"error params swap curve\\\");\\n        require(_swapType >= 0 && _swapType <= 3, \\\"error router index\\\");\\n\\n        bytes memory path;\\n        if(_swapType == 0 || _swapType == 1) {\\n            for (uint i = 0; i < _pathAddress.length; i++) {\\n                path = abi.encodePacked(path, _pathAddress[i]);\\n            }\\n        } else if(_swapType == 2) {\\n            for (uint i = 0; i < _pathFees.length; i++) {\\n                require(_pathAddress[i] != address(0) && _pathAddress[i + 1] != address(0), \\\"error path address position with address(0)\\\");\\n                path = abi.encodePacked(path, _pathAddress[i], _pathFees[i]);\\n            }\\n            path = abi.encodePacked(path, _pathAddress[_pathFees.length]);\\n        } else if(_swapType == 3) {\\n            for (uint i = 0; i < _pathAddress.length; i++) {\\n                path = abi.encodePacked(path, _pathAddress[i]);\\n            }\\n            for (uint i = 0; i < _swapParams.length; i++) {\\n                require(_swapParams[i].length == 3, \\\"error params swap curve\\\");\\n                for(uint j = 0; j < _swapParams[i].length; j++) {\\n                    path = abi.encodePacked(path, uint8(_swapParams[i][j]));\\n                }\\n            }\\n            for (uint i = 0; i < _poolAddress.length; i++) {\\n                path = abi.encodePacked(path, _poolAddress[i]);\\n            }\\n            _pathAddress = _formatPathAddressCurve(_pathAddress);\\n        }\\n\\n        SwapPathStruct memory swapPathStruct;\\n        swapPathStruct.pathData = path;\\n        swapPathStruct.pathAddress = _pathAddress;\\n        swapPathStruct.swapType = _swapType;\\n\\n        swapPaths[_tokenIn][_tokenOut] = swapPathStruct;\\n        emit PathUpdated(_tokenIn, _tokenOut, swapPathStruct.pathData);\\n    }\\n\\n    /// @notice Revokes a token supported by this contract\\n    /// @param _tokenIn Token in to add to this contract\\n    /// @param _tokenOut Token out to add to this contract\\n    function _revokeToken(address _tokenIn, address _tokenOut) internal {\\n        delete swapPaths[_tokenIn][_tokenOut];\\n        emit TokenRevoked(_tokenIn, _tokenOut);\\n    }\\n\\n    function _formatPathAddressCurve(address[] memory _pathAddress) internal pure returns(address[] memory){\\n        uint newLength = (_pathAddress.length/2) + 1;\\n        address[] memory newPathAddress = new address[](newLength);\\n        for(uint i = 0; i < _pathAddress.length; i++) {\\n            if(i%2 == 0) {\\n                newPathAddress[i/2] = _pathAddress[i];\\n            }\\n        }\\n        return newPathAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utility/curve/CurveSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"./interface/ICurveRegistryAddressProvider.sol\\\";\\nimport \\\"./interface/ICurveRegistry.sol\\\";\\nimport \\\"./interface/ICurveFi.sol\\\";\\nimport \\\"./interface/ISwapRouterCurve.sol\\\";\\nimport \\\"../BaseSwapper.sol\\\";\\n\\n/*\\n    Expands swapping functionality over base strategy\\n    - ETH in and ETH out Variants\\n    - Sushiswap support in addition to Uniswap\\n*/\\ncontract CurveSwapper is BaseSwapper {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using BytesLib for bytes;\\n\\n    address public constant addressProvider =\\n    0x0000000022D53366457F9d5E68Ec105046FC4383;\\n\\n    uint256 public constant registryId = 0;\\n    uint256 public constant metaPoolFactoryId = 3;\\n\\n    // CURVE\\n    function _exchange_multiple(\\n        address _router,\\n        address _startToken,\\n        uint256 _amountIn,\\n        uint256 _amountsOutMin,\\n        bytes memory _pathData,\\n        address _recipient\\n    ) internal returns(uint){\\n\\n        _safeApproveHelper(_startToken, _router, _amountIn);\\n\\n        // encode path data curve\\n        (address[9] memory pathAddress, uint[3][4] memory swapParams, address[4] memory poolAddress) = _encodePathDataCurve(_pathData);\\n\\n        return ISwapRouterCurve(_router).exchange_multiple(pathAddress, swapParams, _amountIn, _amountsOutMin, poolAddress, _recipient);\\n    }\\n\\n    function _exchange_multiple_eth(\\n        address _router,\\n        uint256 _amountIn,\\n        uint256 _amountsOutMin,\\n        bytes memory _pathData,\\n        address _recipient\\n    ) internal returns(uint){\\n\\n        // encode path data curve\\n        (address[9] memory pathAddress, uint[3][4] memory swapParams, address[4] memory poolAddress) = _encodePathDataCurve(_pathData);\\n\\n        return ISwapRouterCurve(_router).exchange_multiple{value: _amountIn}(pathAddress, swapParams, _amountIn, _amountsOutMin, poolAddress, _recipient);\\n    }\\n\\n    function _add_liquidity_single_coin(\\n        address swap,\\n        address inputToken,\\n        uint256 inputAmount,\\n        uint256 inputPosition,\\n        uint256 numPoolElements,\\n        uint256 min_mint_amount\\n    ) internal {\\n        _safeApproveHelper(inputToken, swap, inputAmount);\\n        if (numPoolElements == 2) {\\n            uint256[2] memory convertedAmounts;\\n            convertedAmounts[inputPosition] = inputAmount;\\n            ICurveFi(swap).add_liquidity(convertedAmounts, min_mint_amount);\\n        } else if (numPoolElements == 3) {\\n            uint256[3] memory convertedAmounts;\\n            convertedAmounts[inputPosition] = inputAmount;\\n            ICurveFi(swap).add_liquidity(convertedAmounts, min_mint_amount);\\n        } else if (numPoolElements == 4) {\\n            uint256[4] memory convertedAmounts;\\n            convertedAmounts[inputPosition] = inputAmount;\\n            ICurveFi(swap).add_liquidity(convertedAmounts, min_mint_amount);\\n        } else {\\n            revert(\\\"Bad numPoolElements\\\");\\n        }\\n    }\\n\\n    function _add_liquidity(\\n        address pool,\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount\\n    ) internal {\\n        ICurveFi(pool).add_liquidity(amounts, min_mint_amount);\\n    }\\n\\n    function _add_liquidity(\\n        address pool,\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount\\n    ) internal {\\n        ICurveFi(pool).add_liquidity(amounts, min_mint_amount);\\n    }\\n\\n    function _add_liquidity_4coins(\\n        address pool,\\n        uint256[4] memory amounts,\\n        uint256 min_mint_amount\\n    ) internal {\\n        ICurveFi(pool).add_liquidity(amounts, min_mint_amount);\\n    }\\n\\n    function _remove_liquidity_one_coin(\\n        address swap,\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) internal {\\n        ICurveFi(swap).remove_liquidity_one_coin(_token_amount, i, _min_amount);\\n    }\\n\\n    function _encodePathDataCurve(bytes memory _data)\\n    internal pure\\n    returns(address[9] memory, uint[3][4] memory, address[4] memory) {\\n        address[9] memory addresses;\\n        uint[3][4] memory swapParams;\\n        address[4] memory poolAddress;\\n\\n        uint offset = 0;\\n        uint j = 0;\\n        uint k = 0;\\n        uint q = 0;\\n\\n        for (uint256 i = 0; i < 25; i++) {\\n            if ( i < 9 ) {\\n                offset = 20 *i;\\n                addresses[i] = _bytesToAddress(_data.slice(offset, 20));\\n\\n            }\\n            if(i == 9) offset += 20;\\n            if ( i >= 9 && i < 21 ) {\\n                if(i == 12 || i == 15 || i == 18) {\\n                    j++;\\n                    k = 0;\\n                }\\n                bytes1 dataSlice = bytes1(_data.slice(offset, 1));\\n                swapParams[j][k] = uint(uint8(dataSlice));\\n                k++;\\n                offset += 1;\\n            }\\n            if ( i >= 21 ) {\\n                poolAddress[q] = _bytesToAddress(_data.slice(offset, 20));\\n                q += 1;\\n                offset += 20;\\n            }\\n        }\\n        return (addresses, swapParams, poolAddress);\\n    }\\n\\n    function sliceUint8(bytes memory bs, uint start)\\n    internal pure\\n    returns (uint8)\\n    {\\n        require(bs.length >= start + 1, \\\"slicing out of range\\\");\\n        uint8 x;\\n        assembly {\\n            x := mload(add(bs, add(1, start)))\\n        }\\n        return x;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utility/uniswap/UniswapSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\n\\nimport \\\"./interface/IUniswapRouterV2.sol\\\";\\nimport \\\"./interface/IUniswapV2Factory.sol\\\";\\n\\nimport \\\"../BaseSwapper.sol\\\";\\n\\n/*\\n    Expands swapping functionality over base strategy\\n    - ETH in and ETH out Variants\\n    - Sushiswap support in addition to Uniswap\\n*/\\ncontract UniswapSwapper is BaseSwapper {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using BytesLib for bytes;\\n\\n    // V2\\n    function _swapExactTokensForTokens(\\n        address _router,\\n        address _startToken,\\n        uint256 _amountIn,\\n        uint256 _amountOutMin,\\n        bytes memory _pathEncoded,\\n        address _recipient\\n    ) internal returns(uint[] memory) {\\n        require(_pathEncoded.length > 0, \\\"path not valid\\\");\\n\\n        address[] memory _pathAddress = _encodePathDataV2(_pathEncoded);\\n\\n        _safeApproveHelper(_startToken, _router, _amountIn);\\n        return IUniswapV2Router(_router).swapExactTokensForTokens(\\n            _amountIn,\\n            _amountOutMin,\\n            _pathAddress,\\n            _recipient,\\n            block.timestamp + 1000\\n        );\\n    }\\n\\n    function _swapExactEthForTokens(\\n        address _router,\\n        uint256 _amountIn,\\n        uint _minAmountOut,\\n        bytes memory _pathEncoded,\\n        address _recipient\\n    ) internal returns(uint[] memory) {\\n        require(_pathEncoded.length > 0, \\\"path not valid\\\");\\n\\n        address[] memory _pathAddress = _encodePathDataV2(_pathEncoded);\\n\\n        return IUniswapV2Router(_router).swapExactETHForTokens{value: _amountIn}(\\n            _minAmountOut,\\n            _pathAddress,\\n            _recipient,\\n            block.timestamp + 1000\\n        );\\n    }\\n\\n    // V3\\n    function _swapExactInputMultihop(\\n        address _router,\\n        address _startToken,\\n        uint256 _amountIn,\\n        uint256 _amountsOutMin,\\n        bytes memory _pathData,\\n        address _recipient\\n    ) internal returns(uint){\\n        ISwapRouter swapRouter = ISwapRouter(_router);\\n\\n        _safeApproveHelper(_startToken, _router, _amountIn);\\n\\n        ISwapRouter.ExactInputParams memory params =\\n        ISwapRouter.ExactInputParams({\\n            path: _pathData,\\n            recipient: _recipient,\\n            deadline: block.timestamp + 1000,\\n            amountIn: _amountIn,\\n            amountOutMinimum: _amountsOutMin\\n        });\\n\\n        // Executes the swap.\\n        return swapRouter.exactInput(params);\\n    }\\n\\n    function _swapExactInputMultihopETH(\\n        address _router,\\n        uint256 _amountIn,\\n        uint256 _amountsOutMin,\\n        bytes memory _pathData,\\n        address _recipient\\n    ) internal returns(uint){\\n        ISwapRouter swapRouter = ISwapRouter(_router);\\n\\n        ISwapRouter.ExactInputParams memory params =\\n        ISwapRouter.ExactInputParams({\\n            path: _pathData,\\n            recipient: _recipient,\\n            deadline: block.timestamp + 1000,\\n            amountIn: _amountIn,\\n            amountOutMinimum: _amountsOutMin\\n        });\\n\\n        // Executes the swap.\\n        return swapRouter.exactInput{value: _amountIn}(params);\\n    }\\n\\n    // INTERNAL\\n\\n    function _encodePathDataV2(bytes memory _data) internal pure returns(address[] memory){\\n        require(_data.length % 20 == 0, \\\"Invalid encoded path length\\\");\\n        uint256 numAddresses = _data.length / 20;\\n        address[] memory addresses = new address[](numAddresses);\\n        for (uint256 i = 0; i < numAddresses; i++) {\\n            addresses[i] = _bytesToAddress(_data.slice(20*i, 20));\\n        }\\n        return addresses;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utility/interface/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n    function poolLength() external view returns (uint);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/utility/interface/IBaseRewardsPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface IBaseRewardsPool {\\n    //balance\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    //withdraw to a convex tokenized deposit\\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\\n\\n    //withdraw directly to curve LP token\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim)\\n    external\\n    returns (bool);\\n\\n    //claim rewards\\n    function getReward() external returns (bool);\\n\\n    //stake a convex tokenized deposit\\n    function stake(uint256 _amount) external returns (bool);\\n\\n    //stake a convex tokenized deposit for another address(transfering ownership)\\n    function stakeFor(address _account, uint256 _amount)\\n    external\\n    returns (bool);\\n\\n    function getReward(address _account, bool _claimExtras)\\n    external\\n    returns (bool);\\n\\n    function rewards(address _account) external view returns (uint256);\\n\\n    function earned(address _account) external view returns (uint256);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function periodFinish() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/accessControl/SCompAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\n/*\\n    Common base for permissioned roles throughout Sett ecosystem\\n\\n    sComp update\\n    V1.0\\n    - Remove keeper\\n*/\\ncontract SCompAccessControl {\\n    event SetStrategist(address strategist);\\n    event SetGovernance(address governance);\\n    event SetTimeLockController(address timeLockController);\\n\\n    address public governance;\\n    address public strategist;\\n    address public timeLockController;\\n\\n    // ===== MODIFIERS =====\\n    function _onlyGovernance() internal view {\\n        require(msg.sender == governance, \\\"onlyGovernance\\\");\\n    }\\n\\n    function _onlyTimeLockController() internal view {\\n        require(msg.sender == timeLockController, \\\"onlyTimeLockController\\\");\\n    }\\n\\n    function _onlyGovernanceOrStrategist() internal view {\\n        require(msg.sender == strategist || msg.sender == governance, \\\"onlyGovernanceOrStrategist\\\");\\n    }\\n\\n    function _onlyAuthorizedActors() internal view {\\n        require(msg.sender == governance, \\\"onlyAuthorizedActors\\\");\\n    }\\n\\n    // ===== PERMISSIONED ACTIONS =====\\n\\n    /// @notice Change strategist address\\n    /// @notice Can only be changed by governance itself\\n    function setStrategist(address _strategist) external {\\n        _onlyGovernance();\\n        strategist = _strategist;\\n        emit SetStrategist(_strategist);\\n    }\\n\\n    /// @notice Change governance address\\n    /// @notice Can only be changed by governance itself\\n    function setGovernance(address _governance) public {\\n        _onlyGovernance();\\n        governance = _governance;\\n        emit SetGovernance(_governance);\\n    }\\n\\n    /// @notice Change TimeLockController address\\n    /// @notice Can only be changed by governance itself\\n    function setTimeLockController(address _timeLockController) public {\\n        _onlyGovernance();\\n        timeLockController = _timeLockController;\\n        emit SetTimeLockController(_timeLockController);\\n\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/controller/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\n// File: IController.sol\\n\\ninterface IController {\\n    function withdraw(address, uint256) external;\\n\\n    function withdrawAll(address) external;\\n\\n    function strategies(address) external view returns (address);\\n\\n    function approvedStrategies(address, address) external view returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function earn(address, uint256) external;\\n\\n    function approveStrategy(address, address) external;\\n\\n    function setStrategy(address, address) external;\\n\\n    function setVault(address, address) external;\\n\\n    //function want(address) external view returns (address);\\n\\n    function governance() external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function vaults(address) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/utility/BaseSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\ncontract BaseSwapper {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /// @dev Reset approval and approve exact amount\\n    function _safeApproveHelper(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        IERC20(token).safeApprove(recipient, 0);\\n        IERC20(token).safeApprove(recipient, amount);\\n    }\\n\\n    function _bytesToAddress(bytes memory _data) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(_data, 20))\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/utility/curve/interface/ICurveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICurveRegistry {\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _index\\n    ) external returns (address);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n    external\\n    returns (\\n        int128,\\n        int128,\\n        bool\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/utility/curve/interface/ICurveRegistryAddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICurveRegistryAddressProvider {\\n    function get_address(uint256 id) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/utility/curve/interface/ICurveFi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface ICurveFi {\\n    function get_virtual_price() external view returns (uint256 out);\\n\\n    function coins(\\n        uint256 _index\\n    ) external view returns (address);\\n\\n    function calc_token_amount(\\n        uint256[2] calldata _amounts\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] calldata _amounts,\\n        bool _isDeposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[2] calldata _amounts,\\n        bool _isDeposit,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[3] calldata _amounts\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[3] calldata _amounts,\\n        bool _isDeposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[3] calldata _amounts,\\n        bool _isDeposit,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[4] calldata _amounts\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[4] calldata _amounts,\\n        bool _isDeposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[4] calldata _amounts,\\n        bool _isDeposit,\\n        bool _previous\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n    // renbtc/tbtc pool\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function add_liquidity(\\n    // sBTC pool\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function add_liquidity(\\n    // bUSD pool\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external returns (uint256 out);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external returns (uint256 out);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        uint256 deadline\\n    ) external;\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        uint256 deadline\\n    ) external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256 deadline,\\n        uint256[2] calldata min_amounts\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[2] calldata amounts,\\n        uint256 deadline\\n    ) external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[3] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts)\\n    external;\\n\\n    function remove_liquidity_imbalance(\\n        uint256[4] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts)\\n    external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 _min_amount\\n    ) external;\\n\\n    function commit_new_parameters(\\n        int128 amplification,\\n        int128 new_fee,\\n        int128 new_admin_fee\\n    ) external;\\n\\n    function apply_new_parameters() external;\\n\\n    function revert_new_parameters() external;\\n\\n    function commit_transfer_ownership(address _owner) external;\\n\\n    function apply_transfer_ownership() external;\\n\\n    function revert_transfer_ownership() external;\\n\\n    function withdraw_admin_fees() external;\\n\\n    function underlying_coins(int128 arg0) external returns (address out);\\n\\n    function balances(int128 arg0) external returns (uint256 out);\\n\\n    function A() external returns (int128 out);\\n\\n    function fee() external returns (int128 out);\\n\\n    function admin_fee() external returns (int128 out);\\n\\n    function owner() external returns (address out);\\n\\n    function admin_actions_deadline() external returns (uint256 out);\\n\\n    function transfer_ownership_deadline() external returns (uint256 out);\\n\\n    function future_A() external returns (int128 out);\\n\\n    function future_fee() external returns (int128 out);\\n\\n    function future_admin_fee() external returns (int128 out);\\n\\n    function future_owner() external returns (address out);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 _i)\\n    external\\n    view\\n    returns (uint256 out);\\n}\\n\"\r\n    },\r\n    \"contracts/utility/curve/interface/ISwapRouterCurve.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface ISwapRouterCurve {\\n    function exchange_multiple(\\n        address[9] memory _route, uint[3][4] memory _swap_params,\\n        uint _amount, uint _expected,\\n        address[4] memory _pools, address _receiver\\n    ) payable external returns(uint);\\n}\\n\"\r\n    },\r\n    \"solidity-bytes-utils/contracts/BytesLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\u00e7alo S\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utility/uniswap/interface/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n    external\\n    view\\n    returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n    external\\n    returns (address pair);\\n}\\n\"\r\n    },\r\n    \"contracts/utility/uniswap/interface/IUniswapRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.13;\\n\\ninterface IUniswapV2Router {\\n    function factory() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n    external\\n    returns (\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 liquidity\\n    );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n    external\\n    payable\\n    returns (\\n        uint256 amountToken,\\n        uint256 amountETH,\\n        uint256 liquidity\\n    );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nameStrategy\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenCompound\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_feeConfig\",\"type\":\"uint256[3]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCompoundPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numElements\",\"type\":\"uint256\"}],\"internalType\":\"struct SCompStrategyBase.CurvePoolConfig\",\"name\":\"_curvePool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"SetController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"SetPerformanceFeeStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"}],\"name\":\"SetStrategist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"timeLockController\",\"type\":\"address\"}],\"name\":\"SetTimeLockController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"SetWithdrawalFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tended\",\"type\":\"uint256\"}],\"name\":\"Tend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"crvTended\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cvxTended\",\"type\":\"uint256\"}],\"name\":\"TendState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preWant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"postWant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"name\":\"WithdrawState\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_UINT_256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_addWhitelistRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"_getAmountOutMinAddLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"_getAmountOutMinSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"_removeWhitelistRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelistRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRewardsPool\",\"outputs\":[{\"internalType\":\"contract IBaseRewardsPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseStrategyVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCompoundPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numElements\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvxToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtectedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"listPathData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"listTypeSwap\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"listRouterAddress\",\"type\":\"address[]\"}],\"internalType\":\"struct SCompStrategyBase.ParamsSwapHarvest\",\"name\":\"paramsSwap\",\"type\":\"tuple\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isProtectedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTendable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelistedRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaPoolFactoryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeStrategist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelistRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"swap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenCompoundPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numElements\",\"type\":\"uint256\"}],\"internalType\":\"struct SCompStrategyBase.CurvePoolConfig\",\"name\":\"_curvePool\",\"type\":\"tuple\"}],\"name\":\"setCurvePoolSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setOracleRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeGovernance\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFeeStrategist\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFeeStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setPid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippageLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippageSwapCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippageSwapCvx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timeLockController\",\"type\":\"address\"}],\"name\":\"setTimeLockController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenCompound\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenCompoundPosition\",\"type\":\"uint256\"}],\"name\":\"setTokenCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalMaxDeviationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageSwapCrv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageSwapCvx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"crvTended\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cvxTended\",\"type\":\"uint256\"}],\"internalType\":\"struct SCompStrategyBase.TendData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLockController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCompound\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCompoundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdrawOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalMaxDeviationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SCompStrategyV1_1", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001a00000000000000000000000002b276218d962deebf96c749ffb228601b2c7a5870000000000000000000000002b276218d962deebf96c749ffb228601b2c7a587000000000000000000000000753fb727b2487fd22c8860167acf01e20b69fbea0000000000000000000000003175df0976dfa876431c2e9ee6bc45b65d3473cc000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000014000000000000000000000000dcef968d416a41cdac0ed8702fac8128a64241a20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000084672617855736463000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}