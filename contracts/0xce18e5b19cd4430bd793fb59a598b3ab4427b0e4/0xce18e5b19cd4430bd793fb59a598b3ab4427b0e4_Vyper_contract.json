{"SourceCode": "# @dev Implementation of ERC-20 token standard.\r\n# @author Takayuki Jimba (@yudetamago)\r\n# @autho VROOM.bet (@vroom_bet)\r\n# https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n\r\nfrom vyper.interfaces import ERC20\r\nfrom vyper.interfaces import ERC20Detailed\r\n\r\nimplements: ERC20\r\nimplements: ERC20Detailed\r\n\r\nevent Transfer:\r\n  sender: indexed(address)\r\n  receiver: indexed(address)\r\n  value: uint256\r\n\r\nevent Approval:\r\n  owner: indexed(address)\r\n  spender: indexed(address)\r\n  value: uint256\r\n\r\nMAX_RECIPIENTS: constant(uint256) = 100\r\nBURN_ADDRESS: constant(address) = 0x000000000000000000000000000000000000dEaD\r\n\r\nname: public(String[32])\r\nsymbol: public(String[32])\r\ndecimals: public(uint8)\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\nowner: public(address)\r\n\r\ntradingEnabled: public(bool)\r\nammPairs: public(HashMap[address, bool])\r\n\r\nbuyFees: public(uint256)\r\nsellFees: public(uint256)\r\nexcludedFromFees: public(HashMap[address, bool])\r\n\r\nmaxTxAmount: public(uint256)\r\nexcludedFromMaxTxAmount: public(HashMap[address, bool])\r\n\r\n@external\r\ndef __init__():\r\n  # token params\r\n  self.name = \"VROOM\"\r\n  self.symbol = \"VROOM\"\r\n  self.decimals = 18\r\n  self.totalSupply = 3_000_000_000 * 10 ** 18\r\n  self.owner = msg.sender\r\n\r\n  # anti-bots params for launch\r\n  self.tradingEnabled = False\r\n  self.buyFees = 30\r\n  self.sellFees = 30\r\n  self.maxTxAmount = self.totalSupply / 100\r\n\r\n  # mint all tokens to owner\r\n  self.balanceOf[msg.sender] = self.totalSupply\r\n  log Transfer(empty(address), msg.sender, self.totalSupply)\r\n\r\n  # exlude owner from fees and transfer ban\r\n  self.excludedFromFees[msg.sender] = True\r\n  self.excludedFromMaxTxAmount[msg.sender] = True\r\n\r\n  # exclude team tokens wallet from bans\r\n  self.excludedFromFees[0x2e38856eB6F2a0aAF13cE7ce98e34901884c517C] = True\r\n  self.excludedFromMaxTxAmount[0x2e38856eB6F2a0aAF13cE7ce98e34901884c517C] = True\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n  return self._transfer(msg.sender, _to, _value, msg.sender)\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n  assert _value <= self.allowance[_from][msg.sender], \"Insufficient allowance\"\r\n  self.allowance[_from][msg.sender] -= _value\r\n  return self._transfer(_from, _to, _value, msg.sender)\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, _value: uint256, _sender: address) -> bool:\r\n  assert _to != empty(address), \"Can't transfer to zero address\"\r\n  assert self.balanceOf[_from] >= _value, \"Insufficient balance\"\r\n  assert self.tradingEnabled or self.excludedFromMaxTxAmount[_sender] == True, \"Trading not enabled\"\r\n\r\n  if (self.ammPairs[_from] == True and self.excludedFromMaxTxAmount[_to] == False) or (self.ammPairs[_to] == True and self.excludedFromMaxTxAmount[_from] == False):\r\n    assert _value <= self.maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\"\r\n\r\n  # first decrease the balance of the sender\r\n  self.balanceOf[_from] -= _value\r\n\r\n  # calculate if fees applies\r\n  feesAmount: uint256 = 0\r\n  if self.ammPairs[_from] == True and self.excludedFromFees[_to] == False:\r\n    feesAmount = _value * self.buyFees / 100\r\n  elif self.ammPairs[_to] == True and self.excludedFromFees[_from] == False:\r\n      feesAmount = _value * self.sellFees / 100\r\n\r\n  # increase the balance of the receiver\r\n  self.balanceOf[_to] += _value - feesAmount\r\n  self.balanceOf[BURN_ADDRESS] += feesAmount\r\n\r\n  log Transfer(_from, _to, _value - feesAmount)\r\n\r\n  return True\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n  self.allowance[msg.sender][_spender] = _value\r\n  log Approval(msg.sender, _spender, _value)\r\n  return True\r\n\r\n@external\r\ndef renounceOwnership() -> bool:\r\n  assert msg.sender == self.owner, \"Only owner can renounce ownership\"\r\n  self.owner = empty(address)\r\n  return True\r\n\r\n@external\r\ndef enableTrading() -> bool:\r\n  assert msg.sender == self.owner, \"Only owner can enable trading\"\r\n  self.tradingEnabled = True\r\n  return True\r\n\r\n@external\r\ndef addAMMPair(_pair: address) -> bool:\r\n  assert msg.sender == self.owner, \"Only owner can add AMM pair\"\r\n  assert self.ammPairs[_pair] == False, \"AMM pair already added\"\r\n  self.ammPairs[_pair] = True\r\n  return True\r\n\r\n@external\r\ndef updateFees(_buyFees: uint256, _sellFees: uint256) -> bool:\r\n  assert msg.sender == self.owner, \"Only owner can update fees\"\r\n  assert _buyFees <= 100 and _sellFees <= 100, \"Fees can't be more than 100%\"\r\n  self.buyFees = _buyFees\r\n  self.sellFees = _sellFees\r\n  return True\r\n\r\n@external\r\ndef addExcludedFromMaxTxAmount(_address: address) -> bool:\r\n  assert msg.sender == self.owner, \"Only owner can add excluded from fees\"\r\n  assert self.excludedFromMaxTxAmount[_address] == False, \"Address already excluded from fees\"\r\n  self.excludedFromMaxTxAmount[_address] = True\r\n  return True\r\n\r\n@external\r\ndef multiTransfer(_recipients: address[MAX_RECIPIENTS], _amounts: uint256[MAX_RECIPIENTS]) -> bool:\r\n  assert msg.sender == self.owner, \"Only owner can multi transfer\"\r\n\r\n  totalAmount: uint256 = 0\r\n  for i in range(MAX_RECIPIENTS):\r\n    if _recipients[i] == empty(address):\r\n      break\r\n    totalAmount += _amounts[i]\r\n\r\n  assert self.balanceOf[msg.sender] >= totalAmount, \"Insufficient balance\"\r\n\r\n  for i in range(MAX_RECIPIENTS):\r\n    if _recipients[i] == empty(address):\r\n      break\r\n    self._transfer(msg.sender, _recipients[i], _amounts[i], msg.sender)\r\n\r\n  return True", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"enableTrading\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addAMMPair\",\"inputs\":[{\"name\":\"_pair\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"updateFees\",\"inputs\":[{\"name\":\"_buyFees\",\"type\":\"uint256\"},{\"name\":\"_sellFees\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addExcludedFromMaxTxAmount\",\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"multiTransfer\",\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[100]\"},{\"name\":\"_amounts\",\"type\":\"uint256[100]\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tradingEnabled\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"ammPairs\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"buyFees\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"sellFees\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"excludedFromFees\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"maxTxAmount\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"excludedFromMaxTxAmount\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.9", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}