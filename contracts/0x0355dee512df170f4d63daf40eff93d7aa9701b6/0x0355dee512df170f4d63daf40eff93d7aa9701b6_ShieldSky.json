{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/DividendToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n// ------------------------------------- Context -------------------------------------------\\r\\ncontract DividendToken is ERC20 {\\r\\n\\tevent DividendsDistributed(\\r\\n\\t   address indexed from,\\r\\n\\t   uint256 weiAmount,\\r\\n\\t   uint256 magnifiedDividendPerShare\\r\\n\\t);\\r\\n\\r\\n\\t/// @dev This event MUST emit when an address withdraws their dividend.\\r\\n\\t/// @param to The address which withdraws ether from this contract.\\r\\n\\t/// @param weiAmount The amount of withdrawn ether in wei.\\r\\n\\tevent DividendWithdrawn(\\r\\n\\t   address indexed to,\\r\\n\\t   uint256 weiAmount\\r\\n\\t);\\r\\n\\r\\n\\tevent DividendReturn(\\r\\n\\t   address indexed to,\\r\\n\\t   uint256 weiAmount\\r\\n\\t);\\r\\n\\r\\n\\t// With `magnitude`, we can properly distribute dividends even if the amount of received ether is small.\\r\\n\\t// For more discussion about choosing the value of `magnitude`,\\r\\n\\t//  see https://github.com/ethereum/EIPs/issues/1726#issuecomment-472352728\\r\\n\\tuint256 constant internal magnitude = 2**128;\\r\\n\\r\\n\\tuint256 public magnifiedDividendPerShare;\\r\\n\\r\\n\\t// About dividendCorrection:\\r\\n\\t// If the token balance of a `_user` is never changed, the dividend of `_user` can be computed with:\\r\\n\\t//   `dividendOf(_user) = dividendPerShare * balanceOf(_user)`.\\r\\n\\t// When `balanceOf(_user)` is changed (via minting/burning/transferring tokens),\\r\\n\\t//   `dividendOf(_user)` should not be changed,\\r\\n\\t//   but the computed value of `dividendPerShare * balanceOf(_user)` is changed.\\r\\n\\t// To keep the `dividendOf(_user)` unchanged, we add a correction term:\\r\\n\\t//   `dividendOf(_user) = dividendPerShare * balanceOf(_user) + dividendCorrectionOf(_user)`,\\r\\n\\t//   where `dividendCorrectionOf(_user)` is updated whenever `balanceOf(_user)` is changed:\\r\\n\\t//   `dividendCorrectionOf(_user) = dividendPerShare * (old balanceOf(_user)) - (new balanceOf(_user))`.\\r\\n\\t// So now `dividendOf(_user)` returns the same value before and after `balanceOf(_user)` is changed.\\r\\n\\tmapping(address => int256) public magnifiedDividendCorrections;\\r\\n\\tmapping(address => uint256) public withdrawnDividends;\\r\\n\\tmapping(address => bool) public excludedAccounts;\\r\\n\\r\\n\\tuint256 public totalDividendsDistributed;\\r\\n\\r\\n\\tconstructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Distributes dividends whenever ether is paid to this contract.\\r\\n\\treceive() external payable {\\r\\n\\t\\tdistributeDividends();\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Distributes ether to token holders as dividends.\\r\\n\\t/// @dev It reverts if the total supply of tokens is 0.\\r\\n\\t/// It emits the `DividendsDistributed` event if the amount of received ether is greater than 0.\\r\\n\\t/// About undistributed ether:\\r\\n\\t///   In each distribution, there is a small amount of ether not distributed,\\r\\n\\t///     the magnified amount of which is\\r\\n\\t///     `(msg.value * magnitude) % totalSupply()`.\\r\\n\\t///   With a well-chosen `magnitude`, the amount of undistributed ether\\r\\n\\t///     (de-magnified) in a distribution can be less than 1 wei.\\r\\n\\t///   We can actually keep track of the undistributed ether in a distribution\\r\\n\\t///     and try to distribute it in the next distribution,\\r\\n\\t///     but keeping track of such data on-chain costs much more than\\r\\n\\t///     the saved ether, so we don't do that.\\r\\n\\tfunction distributeDividends() public payable {\\r\\n\\t\\trequire(totalSupply() != 0);\\r\\n\\r\\n\\t\\tif (msg.value != 0) {\\r\\n\\t\\t\\tmagnifiedDividendPerShare += msg.value * magnitude / totalSupply();\\r\\n\\t\\t\\temit DividendsDistributed(msg.sender, msg.value, magnifiedDividendPerShare);\\r\\n\\t\\t\\ttotalDividendsDistributed += msg.value;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction returnDividends(uint256 amount) internal {\\r\\n\\t\\tif (amount != 0) {\\r\\n\\t\\t\\tmagnifiedDividendPerShare += amount * magnitude / totalSupply();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction isExcluded(address account) public view returns (bool) {\\r\\n\\t\\treturn excludedAccounts[account];\\r\\n\\t}\\r\\n\\tfunction _exclude(address account) internal {\\r\\n\\t\\tif (!excludedAccounts[account]) excludedAccounts[account] = true;\\r\\n\\t}\\r\\n\\tfunction _include(address account) internal {\\r\\n        if (excludedAccounts[account]) excludedAccounts[account] = false;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Withdraws the ether distributed to the sender.\\r\\n\\t/// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n\\tfunction withdrawDividend() public { //\\r\\n\\t\\t//require(false);\\r\\n\\t\\t_withdrawDividendOfUser(payable(msg.sender));\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Withdraws the ether distributed to the sender.\\r\\n\\t/// @dev It emits a `DividendWithdrawn` event if the amount of withdrawn ether is greater than 0.\\r\\n\\tfunction _withdrawDividendOfUser(address payable account) internal returns (uint256) {\\r\\n\\t\\tuint256 _withdrawableDividend = withdrawableDividendOf(account);\\r\\n\\t\\tif (_withdrawableDividend != 0) {\\r\\n\\t\\t\\twithdrawnDividends[account] += _withdrawableDividend;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif (!isExcluded(account)) {\\r\\n\\t\\t\\t\\temit DividendWithdrawn(account, _withdrawableDividend);\\r\\n\\t\\t\\t\\t(bool success,) = account.call{ value: _withdrawableDividend, gas: 3000 }(\\\"\\\");\\r\\n\\r\\n\\t\\t\\t\\tif (!success) {\\r\\n\\t\\t\\t\\t\\twithdrawnDividends[account] -= _withdrawableDividend;\\r\\n\\t\\t\\t\\t\\treturn 0;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\treturn _withdrawableDividend;\\r\\n\\t\\t\\t} else {\\t\\t\\t\\t\\r\\n\\t\\t\\t\\treturnDividends(_withdrawableDividend);\\r\\n\\t\\t\\t\\temit DividendReturn(account, _withdrawableDividend);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn 0;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n\\t/// @param account The address of a token holder.\\r\\n\\t/// @return The amount of dividend in wei that `account` can withdraw.\\r\\n\\tfunction dividendOf(address account) public view returns(uint256) {\\r\\n\\t\\treturn withdrawableDividendOf(account);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice View the amount of dividend in wei that an address can withdraw.\\r\\n\\t/// @param account The address of a token holder.\\r\\n\\t/// @return The amount of dividend in wei that `account` can withdraw.\\r\\n\\tfunction withdrawableDividendOf(address account) public view returns(uint256) {\\r\\n\\t\\treturn accumulativeDividendOf(account) - withdrawnDividends[account];\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice View the amount of dividend in wei that an address has withdrawn.\\r\\n\\t/// @param account The address of a token holder.\\r\\n\\t/// @return The amount of dividend in wei that `account` has withdrawn.\\r\\n\\tfunction withdrawnDividendOf(address account) public view returns(uint256) {\\r\\n\\t\\treturn withdrawnDividends[account];\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/// @notice View the amount of dividend in wei that an address has earned in total.\\r\\n\\t/// @dev accumulativeDividendOf(account) = withdrawableDividendOf(account) + withdrawnDividendOf(account)\\r\\n\\t/// = (magnifiedDividendPerShare * balanceOf(account) + magnifiedDividendCorrections[account]) / magnitude\\r\\n\\t/// @param account The address of a token holder.\\r\\n\\t/// @return The amount of dividend in wei that `account` has earned in total.\\r\\n\\tfunction accumulativeDividendOf(address account) public view returns(uint256) {\\r\\n\\t\\treturn uint256(int256(magnifiedDividendPerShare * balanceOf(account)) + magnifiedDividendCorrections[account]) / magnitude;\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Internal function that transfer tokens from one address to another.\\r\\n\\t/// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n\\t/// @param from The address to transfer from.\\r\\n\\t/// @param to The address to transfer to.\\r\\n\\t/// @param value The amount to be transferred.\\r\\n\\tfunction _transfer(address from, address to, uint256 value) internal virtual override {\\r\\n\\t\\trequire(false);\\r\\n\\t\\tint256 _magCorrection = int256(magnifiedDividendPerShare * value);\\r\\n\\t\\tmagnifiedDividendCorrections[from] += _magCorrection;\\r\\n\\t\\tmagnifiedDividendCorrections[to] -= _magCorrection;\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Internal function that mints tokens to an account.\\r\\n\\t/// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n\\t/// @param account The account that will receive the created tokens.\\r\\n\\t/// @param value The amount that will be created.\\r\\n\\tfunction _mint(address account, uint256 value) internal override {\\r\\n\\t\\tsuper._mint(account, value);\\r\\n\\t\\tmagnifiedDividendCorrections[account] -= int256(magnifiedDividendPerShare * value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @dev Internal function that burns an amount of the token of a given account.\\r\\n\\t/// Update magnifiedDividendCorrections to keep dividends unchanged.\\r\\n\\t/// @param account The account whose tokens will be burnt.\\r\\n\\t/// @param value The amount that will be burnt.\\r\\n\\tfunction _burn(address account, uint256 value) internal override {\\r\\n\\t\\tsuper._burn(account, value);\\r\\n\\t\\tmagnifiedDividendCorrections[account] += int256(magnifiedDividendPerShare * value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _setBalance(address account, uint256 newBalance) internal {\\r\\n\\t\\tuint256 currentBalance = balanceOf(account);\\r\\n\\r\\n\\t\\tif (newBalance > currentBalance) {\\r\\n\\t\\t\\tuint256 mintAmount = newBalance - currentBalance;\\r\\n\\t\\t\\t_mint(account, mintAmount);\\r\\n\\t\\t} else if (newBalance < currentBalance) {\\r\\n\\t\\t\\tuint256 burnAmount = currentBalance - newBalance;\\r\\n\\t\\t\\t_burn(account, burnAmount);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/DividendTracker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./DividendToken.sol\\\";\\r\\n\\r\\ninterface IDividendTracker {\\r\\n\\tfunction setExcludedFromDividends(address account, bool state) external;\\t\\r\\n    function setBalance(address payable account, uint256 amount) external;\\r\\n\\tfunction setDividendClaimWait(uint256 value) external;\\r\\n\\tfunction process(uint256 gas) external returns (uint256, uint256, uint256);\\t\\r\\n}\\r\\n\\r\\ncontract DividendTracker is IDividendTracker, DividendToken {\\r\\n\\tusing SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 public immutable mainToken;\\r\\n\\t\\r\\n\\tstruct Map {\\r\\n        address[] keys;\\r\\n        mapping(address => uint) indexOf;\\r\\n        mapping(address => bool) inserted;\\r\\n    }\\r\\n\\r\\n    Map private tokenHoldersMap;\\r\\n    uint256 public lastProcessedIndex;\\r\\n\\tuint256 public claimWait;\\r\\n\\r\\n    mapping (address => bool) public excludedFromDividends;\\r\\n    mapping (address => uint256) public lastClaimTimes;\\r\\n\\t\\t\\t\\t\\r\\n    constructor(\\r\\n\\t\\tstring memory dtName_, \\r\\n\\t\\tstring memory dtSymbol_\\r\\n\\t) \\r\\n        DividendToken(dtName_, dtSymbol_) \\r\\n    {\\r\\n    \\tmainToken = IERC20(msg.sender);\\r\\n    }\\r\\n\\r\\n\\t// --------------------- MAIN TOKEN ------------------------\\r\\n\\tmodifier onlyMainToken() {\\r\\n        require(_msgSender() == address(mainToken), \\\"Not allowed\\\");\\r\\n        _;\\r\\n    }\\t\\r\\n    \\r\\n    function setDividendClaimWait(uint256 value) public onlyMainToken {\\r\\n    \\t_checkAlreadySet(claimWait == value);\\r\\n\\t\\tclaimWait = value;\\r\\n    }\\r\\n\\r\\n    function setExcludedFromDividends(address account, bool state) public onlyMainToken {\\r\\n    \\t_checkAlreadySet(excludedFromDividends[account] == state);\\r\\n    \\texcludedFromDividends[account] = state;\\r\\n\\t\\tif (!state) {\\r\\n\\t\\t\\t_processAccount(payable(account));\\r\\n\\t\\t\\t_exclude(account);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t_setBalance(account, 0);\\t\\t\\r\\n\\t\\t\\t_tokenHoldersRemove(account);\\r\\n\\t\\t} \\r\\n    }\\r\\n\\r\\n\\tfunction setBalance(address payable account, uint256 value) external onlyMainToken {\\r\\n    \\tif (excludedFromDividends[account]) return;    \\t\\t\\r\\n\\t\\t_tokenHoldersAdd(account);\\r\\n\\t\\t_setBalance(account, value);    \\t\\t\\r\\n\\t\\t\\r\\n\\t\\t_processAccount(account);\\r\\n\\t\\t_include(account);\\t\\r\\n    }\\r\\n\\r\\n    // --------------------- VIEW ------------------------\\r\\n\\r\\n    function getAccount(address account_) public view returns (\\r\\n        address account,\\r\\n        int256 index,\\r\\n        int256 iterationsUntilProcessed,\\r\\n        uint256 withdrawableDividends,\\r\\n        uint256 totalDividends,\\r\\n        uint256 lastClaimTime,\\r\\n        uint256 nextClaimTime,\\r\\n        uint256 secondsUntilAutoClaimAvailable\\r\\n\\t) {\\r\\n        account = account_;\\r\\n        index = tokenHoldersGetIndexOfKey(account);\\r\\n        iterationsUntilProcessed = -1;\\r\\n\\r\\n        if (index >= 0) {\\r\\n            if (uint256(index) > lastProcessedIndex) {\\r\\n                iterationsUntilProcessed = index - int256(lastProcessedIndex);\\r\\n            } else {\\r\\n                uint256 processesUntilEndOfArray = tokenHoldersSize() > lastProcessedIndex ? tokenHoldersSize() - lastProcessedIndex : 0;\\r\\n                iterationsUntilProcessed = index + int256(processesUntilEndOfArray);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        withdrawableDividends = withdrawableDividendOf(account);\\r\\n        totalDividends = accumulativeDividendOf(account);\\r\\n        lastClaimTime = lastClaimTimes[account];\\r\\n        nextClaimTime = lastClaimTime > 0 ? lastClaimTime + claimWait : 0;\\r\\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ? nextClaimTime - block.timestamp : 0;\\r\\n    }\\r\\n\\r\\n    function getAccountAtIndex(uint256 index) public view returns (address, int256, int256, uint256, uint256, uint256, uint256, uint256) {\\r\\n    \\tif (index >= tokenHoldersSize()) {\\r\\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\\r\\n        }\\r\\n        address account = tokenHoldersGetKeyAtIndex(index);\\r\\n        return getAccount(account);\\r\\n    }\\r\\n\\r\\n    // --------------------- PUBLIC ------------------------\\r\\n\\r\\n\\tfunction process(uint256 gas) public returns (uint256, uint256, uint256) {\\r\\n    \\tuint256 numberOfTokenHolders = tokenHoldersSize();\\r\\n\\r\\n    \\tif (numberOfTokenHolders == 0) {\\r\\n    \\t\\treturn (0, 0, lastProcessedIndex);\\r\\n    \\t}\\r\\n\\r\\n    \\tuint256 _lastProcessedIndex = lastProcessedIndex;\\r\\n    \\tuint256 gasUsed = 0;\\r\\n    \\tuint256 gasLeft = gasleft();\\r\\n    \\tuint256 iterations = 0;\\r\\n    \\tuint256 claims = 0;\\r\\n\\r\\n    \\twhile (gasUsed < gas && iterations < numberOfTokenHolders) {\\r\\n    \\t\\t_lastProcessedIndex++;\\r\\n\\t\\t\\tif (_lastProcessedIndex >= tokenHoldersSize()) {\\r\\n    \\t\\t\\t_lastProcessedIndex = 0;\\r\\n    \\t\\t}\\r\\n\\r\\n    \\t\\taddress account = tokenHoldersMap.keys[_lastProcessedIndex];\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t// check on every distribution is user still eligible\\r\\n            bool canClaim = block.timestamp - lastClaimTimes[account] >= claimWait;\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\tif (canClaim && _processAccount(payable(account))) claims++;\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\titerations++;\\r\\n\\r\\n    \\t\\tuint256 newGasLeft = gasleft();\\r\\n    \\t\\tif (gasLeft > newGasLeft) {\\r\\n\\t\\t\\t\\tuint256 iterationGas = gasLeft - newGasLeft;\\r\\n    \\t\\t\\tgasUsed += iterationGas;\\t\\t\\t\\t\\r\\n    \\t\\t}\\r\\n\\t\\t\\t\\r\\n    \\t\\tgasLeft = newGasLeft;\\t\\t\\t\\r\\n    \\t}\\r\\n\\r\\n    \\tlastProcessedIndex = _lastProcessedIndex;\\r\\n    \\treturn (iterations, claims, lastProcessedIndex);\\r\\n    }\\r\\n\\r\\n    // --------------------- INTERNAL ------------------------\\r\\n\\r\\n\\tfunction _processAccount(address payable account) internal returns (bool) {\\r\\n\\t\\tuint256 amount = _withdrawDividendOfUser(account);    \\t\\r\\n\\t\\tif (amount != 0) {\\r\\n    \\t\\tlastClaimTimes[account] = block.timestamp;\\r\\n            return true;\\t\\t\\t\\r\\n    \\t}\\r\\n    \\treturn false;\\r\\n    }\\r\\n\\r\\n    function _checkAlreadySet(bool result) internal pure {\\r\\n        require(!result, \\\"Already set\\\");\\r\\n    }\\r\\n\\t\\r\\n\\t// --------------------- HOLDERS MAP ------------------------\\r\\n\\t\\r\\n    function tokenHoldersGetIndexOfKey(address key) public view returns (int) {\\r\\n        if (!tokenHoldersMap.inserted[key]) {\\r\\n            return -1;\\r\\n        }\\r\\n        return int(tokenHoldersMap.indexOf[key]);\\r\\n    }\\r\\n\\r\\n    function tokenHoldersGetKeyAtIndex(uint index) public view returns (address) {\\r\\n        return tokenHoldersMap.keys[index];\\r\\n    }\\r\\n\\r\\n    function tokenHoldersSize() public view returns (uint) {\\r\\n        return tokenHoldersMap.keys.length;\\r\\n    }\\r\\n\\r\\n    function _tokenHoldersAdd(address key) internal {\\r\\n\\t\\tMap storage map = tokenHoldersMap;\\r\\n        if (!map.inserted[key]) {\\r\\n            map.inserted[key] = true;            \\r\\n            map.indexOf[key] = map.keys.length;\\r\\n            map.keys.push(key);\\r\\n        } \\r\\n    }\\r\\n\\r\\n    function _tokenHoldersRemove(address key) internal {\\r\\n\\t\\tMap storage map = tokenHoldersMap;\\r\\n        if (!map.inserted[key]) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        delete map.inserted[key];\\r\\n\\r\\n        uint index = map.indexOf[key];\\r\\n        uint lastIndex = map.keys.length - 1;\\r\\n        address lastKey = map.keys[lastIndex];\\r\\n\\r\\n        map.indexOf[lastKey] = index;\\r\\n        delete map.indexOf[key];\\r\\n\\r\\n        map.keys[index] = lastKey;\\r\\n        map.keys.pop();\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/ShieldSky.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: none\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./DividendTracker.sol\\\"; \\r\\n\\r\\ncontract ShieldSky is ERC20, Ownable  {    \\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n    IDividendTracker public immutable dividendTracker;\\r\\n\\r\\n    address public immutable uniswapV2Pair;\\r\\n    address public marketingWallet;       \\r\\n\\r\\n    bool private swapping;\\r\\n    bool public limitsInEffect = true;\\r\\n    bool public tradingActive = true;\\r\\n    bool public swapEnabled = true;\\r\\n    \\r\\n    uint8 public buyTotalFees;\\r\\n    uint8 public buyMarketingFee;\\r\\n    uint8 public buyReflectionsFee;\\r\\n    \\r\\n    uint8 public sellTotalFees;\\r\\n    uint8 public sellMarketingFee;\\r\\n    uint8 public sellReflectionsFee;\\r\\n\\r\\n    uint32 public gasForProcessingDividends; \\r\\n    \\r\\n    uint256 public maxTransactionAmount;\\r\\n    uint256 public swapTokensAtAmount;\\r\\n    uint256 public swapMaxTokensAmount;\\r\\n    uint256 public maxWalletAmount;\\r\\n    \\r\\n    uint256 public tokensForMarketing;\\r\\n    uint256 public tokensForReflections;\\r\\n    \\r\\n    mapping (address => bool) public isExcludedFromFees;\\r\\n    mapping (address => bool) public isExcludedMaxTransaction;\\r\\n    mapping (address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    struct DeployArgs {\\r\\n        string name; \\r\\n        string symbol; \\r\\n        string dtName; \\r\\n        string dtSymbol; \\r\\n        uint256 dtClaimWait;\\r\\n        address marketingWallet;\\r\\n        address uniswapV2Router;        \\r\\n        uint8 buyMarketingFee; \\r\\n        uint8 buyReflectionsFee; \\r\\n        uint8 sellMarketingFee; \\r\\n        uint8 sellReflectionsFee;\\r\\n        uint32 gasForProcessingDividends;\\r\\n        uint256 maxWalletAmount;\\r\\n        uint256 maxTransactionAmount;\\r\\n        uint256 swapTokensAtAmount; \\r\\n        uint256 swapMaxTokensAmount;\\r\\n        uint256 totalSupply;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        DeployArgs memory args\\r\\n    ) \\r\\n        ERC20(args.name, args.symbol)\\r\\n    {\\r\\n        uniswapV2Router = IUniswapV2Router02(args.uniswapV2Router); \\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        \\r\\n        setAutomatedMarketMakerPair(uniswapV2Pair, true);\\r\\n\\r\\n        dividendTracker = new DividendTracker(args.dtName, args.dtSymbol);                \\r\\n        \\r\\n        setDividendClaimWait(args.dtClaimWait);        \\r\\n        setExcludedFromDividends(owner(), true);\\r\\n        setExcludedFromDividends(uniswapV2Pair, true);\\r\\n        \\r\\n        setGasForProcessingDividends(args.gasForProcessingDividends);           \\r\\n        \\r\\n        setMarketingWallet(args.marketingWallet);     \\r\\n        \\r\\n        setExcludeFromFees(args.marketingWallet, true);\\r\\n        setExcludeFromFees(address(this), true);\\r\\n        setExcludeFromFees(address(0xdead), true);\\r\\n        setExcludeFromFees(owner(), true);\\r\\n\\r\\n        setExcludeFromMaxTransaction(args.uniswapV2Router, true);\\r\\n        setExcludeFromMaxTransaction(uniswapV2Pair, true);\\r\\n        setExcludeFromMaxTransaction(args.marketingWallet, true);\\r\\n        setExcludeFromMaxTransaction(address(this), true);\\r\\n        setExcludeFromMaxTransaction(address(0xdead), true);\\r\\n        setExcludeFromMaxTransaction(owner(), true);\\r\\n\\r\\n        _mint(owner(), args.totalSupply);  \\r\\n\\r\\n        setMaxWalletAmount(args.maxWalletAmount);\\r\\n        setMaxTransactionAmount(args.maxTransactionAmount);      \\r\\n        setSwapTokensAtAmount(args.swapTokensAtAmount, args.swapMaxTokensAmount);\\r\\n\\r\\n        setBuyFees(args.buyMarketingFee, args.buyReflectionsFee);\\r\\n        setSellFees(args.sellMarketingFee, args.sellReflectionsFee);  \\r\\n    }\\r\\n\\r\\n    // --------------------- OWNER ------------------------\\r\\n\\r\\n    function enableTrading() external onlyOwner {\\r\\n        tradingActive = true;\\r\\n        swapEnabled = true;\\r\\n        emit TradingEnabled();\\r\\n    }\\r\\n    \\r\\n    function removeLimits() external onlyOwner {\\r\\n        limitsInEffect = false;\\r\\n        emit LimitsRemoved();\\r\\n    }\\r\\n\\r\\n    function setDividendClaimWait(uint256 value) public onlyOwner {\\r\\n        dividendTracker.setDividendClaimWait(value);      \\r\\n        emit SetDividendClaimWait(value);\\r\\n    }\\r\\n\\r\\n    function setExcludedFromDividends(address account, bool state) public onlyOwner {\\r\\n        dividendTracker.setExcludedFromDividends(account, state);       \\r\\n        emit SetExcludeFromDividends(account, state);\\r\\n    }\\r\\n\\r\\n    function setSwapTokensAtAmount(uint256 value, uint256 maxValue) public onlyOwner {\\r\\n        _checkAlreadySet(swapTokensAtAmount == value);\\r\\n        require(value >= totalSupply() / 100000, \\\"setSwapTokensAtAmount 1\\\");\\r\\n        require(value <= totalSupply() / 100, \\\"setSwapTokensAtAmount 2\\\");\\r\\n        swapTokensAtAmount = value;\\r\\n        require(value <= maxValue, \\\"setSwapTokensAtAmount 3\\\");\\r\\n        swapMaxTokensAmount = maxValue;\\r\\n        emit SetSwapTokensAtAmount(value);\\r\\n    }\\r\\n    \\r\\n    function setGasForProcessingDividends(uint32 value) public onlyOwner {\\r\\n        _checkAlreadySet(gasForProcessingDividends == value);\\r\\n        require(value >= 100_000, \\\"setGasForProcessingDividends 1\\\");\\r\\n        require(value <= 1_500_000, \\\"setGasForProcessingDividends 2\\\");\\r\\n        gasForProcessingDividends = value;\\r\\n        emit SetGasForProcessingDividends(value);\\r\\n    }\\r\\n\\r\\n    function setMaxTransactionAmount(uint256 value) public onlyOwner {\\r\\n        _checkAlreadySet(maxTransactionAmount == value);\\r\\n        require(value >= totalSupply() / 1000, \\\"setMaxTransactionAmount\\\");\\r\\n        maxTransactionAmount = value;\\r\\n        emit SetMaxTransactionAmount(value);\\r\\n    }\\r\\n\\r\\n    function setMaxWalletAmount(uint256 value) public onlyOwner {\\r\\n        _checkAlreadySet(maxWalletAmount == value);\\r\\n        require(value >= totalSupply() * 5 / 1000, \\\"setMaxWalletAmount\\\");\\r\\n        maxWalletAmount = value;\\r\\n        emit SetMaxWalletAmount(value);\\r\\n    }\\r\\n    \\r\\n    function setExcludeFromMaxTransaction(address account, bool state) public onlyOwner {\\r\\n        _checkAlreadySet(isExcludedMaxTransaction[account] == state);\\r\\n        isExcludedMaxTransaction[account] = state;\\r\\n        emit SetExcludeFromMaxTransaction(state);\\r\\n    }\\r\\n    \\r\\n    // only use to disable contract sales if absolutely necessary (emergency use only)\\r\\n    function setSwapEnabled(bool state) public onlyOwner(){\\r\\n        _checkAlreadySet(swapEnabled == state);\\r\\n        swapEnabled = state;\\r\\n        emit SetSwapEnabled(state);\\r\\n    }\\r\\n    \\r\\n    function setBuyFees(uint8 marketingFee_, uint8 reflectionsFee_) public onlyOwner {\\r\\n        buyMarketingFee = marketingFee_;\\r\\n        buyReflectionsFee = reflectionsFee_;\\r\\n        buyTotalFees = buyMarketingFee + buyReflectionsFee;\\r\\n        require(buyTotalFees <= 50, \\\"setBuyFees\\\");\\r\\n        emit SetBuyFees(buyMarketingFee, buyReflectionsFee);\\r\\n    }\\r\\n    \\r\\n    function setSellFees(uint8 marketingFee_, uint8 reflectionsFee_) public onlyOwner {\\r\\n        sellMarketingFee = marketingFee_;\\r\\n        sellReflectionsFee = reflectionsFee_;\\r\\n        sellTotalFees = sellMarketingFee + sellReflectionsFee;\\r\\n        require(sellTotalFees <= 99, \\\"setSellFees\\\");\\r\\n        emit SetSellFees(buyMarketingFee, buyReflectionsFee);\\r\\n    }\\r\\n\\r\\n    function setExcludeFromFees(address account, bool state) public onlyOwner {\\r\\n        _checkAlreadySet(isExcludedFromFees[account] == state);\\r\\n        isExcludedFromFees[account] = state;\\r\\n        emit SetExcludeFromFees(account, state);\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address account, bool state) public onlyOwner {\\r\\n        if (account == uniswapV2Pair && !state) {\\r\\n            require(state, \\\"setAutomatedMarketMakerPair\\\");\\r\\n        }\\r\\n        _checkAlreadySet(automatedMarketMakerPairs[account] == state);\\r\\n        automatedMarketMakerPairs[account] = state;\\r\\n        emit SetAutomatedMarketMakerPair(account, state);        \\r\\n    }\\r\\n\\r\\n    function setMarketingWallet(address account) public onlyOwner {\\r\\n        _checkAlreadySet(marketingWallet == account);\\r\\n        marketingWallet = account;\\r\\n        emit SetMarketingWallet(account);\\r\\n    }\\r\\n\\r\\n    // --------------------- INTERNAL ------------------------\\r\\n\\r\\n    function _checkAlreadySet(bool result) internal pure {\\r\\n        require(!result, \\\"Already set\\\");\\r\\n    }\\r\\n        \\r\\n    function _transfer(address from, address to, uint256 amount) internal override {//\\r\\n        if (amount == 0) return super._transfer(from, to, 0);\\r\\n                \\r\\n        if (limitsInEffect){\\r\\n            if (\\r\\n                from != owner() &&\\r\\n                to != owner() &&\\r\\n                to != address(0) &&\\r\\n                to != address(0xdead) &&\\r\\n                !swapping\\r\\n            ){\\r\\n                if (!tradingActive){\\r\\n                    require(isExcludedFromFees[from] || isExcludedFromFees[to], \\\"Trading is not active\\\");\\r\\n                }\\r\\n                 \\r\\n                // buy\\r\\n                if (automatedMarketMakerPairs[from] && !isExcludedMaxTransaction[to]) {\\r\\n                    require(amount <= maxTransactionAmount, \\\"Buy amount exceeded\\\");\\r\\n                    require(amount + balanceOf(to) <= maxWalletAmount, \\\"Max wallet exceeded\\\");\\r\\n                }\\r\\n                \\r\\n                // sell\\r\\n                else if (automatedMarketMakerPairs[to] && !isExcludedMaxTransaction[from]) {\\r\\n                    require(amount <= maxTransactionAmount, \\\"Sell amount exceeded\\\");\\r\\n                } \\r\\n                else if (!isExcludedMaxTransaction[to]){\\r\\n                    require(amount + balanceOf(to) <= maxWalletAmount, \\\"Max wallet exceeded\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n               \\r\\n        if (balanceOf(address(this)) >= swapTokensAtAmount && \\r\\n            swapEnabled &&\\r\\n            !swapping &&\\r\\n            !automatedMarketMakerPairs[from] &&\\r\\n            !isExcludedFromFees[from] &&\\r\\n            !isExcludedFromFees[to]\\r\\n        ) {\\r\\n            swapping = true;            \\r\\n            _swapBack();\\r\\n            swapping = false;\\r\\n        }\\r\\n        \\r\\n        uint256 fees = 0;\\r\\n        bool takeFee = !swapping;\\r\\n        if (isExcludedFromFees[from] || isExcludedFromFees[to]) takeFee = false;\\r\\n        \\r\\n        if (takeFee){\\r\\n            // sell\\r\\n            if (sellTotalFees != 0 && \\r\\n                automatedMarketMakerPairs[to]\\r\\n            ) {\\r\\n                fees = amount * sellTotalFees / 100;\\r\\n                tokensForReflections += fees * sellReflectionsFee / sellTotalFees;\\r\\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\\r\\n            }\\r\\n            // buy\\r\\n            else \\r\\n            if (buyTotalFees != 0 && \\r\\n                automatedMarketMakerPairs[from]\\r\\n            ) {\\r\\n                fees = amount * buyTotalFees / 100;\\r\\n                tokensForReflections += fees * buyReflectionsFee / buyTotalFees;\\r\\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\\r\\n            }\\r\\n            \\r\\n            if (fees > 0) super._transfer(from, address(this), fees);\\r\\n            \\r\\n            amount -= fees;\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n       \\r\\n\\t\\tdividendTracker.setBalance(payable(from), balanceOf(from));    \\r\\n        dividendTracker.setBalance(payable(to), balanceOf(to));\\r\\n        \\r\\n\\t\\tif (!swapping) {\\r\\n            (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gasForProcessingDividends);\\r\\n\\t\\t\\temit ProcessedDividends(iterations, claims, lastProcessedIndex);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _swapTokensForEth(uint256 tokenAmount) private {        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        \\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );        \\r\\n    }\\r\\n    \\r\\n    function _swapBack() private {\\r\\n        uint256 amountToSwapForETH = balanceOf(address(this));\\r\\n        uint256 totalTokensToSwap = tokensForReflections + tokensForMarketing;\\r\\n                \\r\\n        if (amountToSwapForETH == 0 || totalTokensToSwap == 0) return;\\r\\n        \\r\\n        if (amountToSwapForETH > swapMaxTokensAmount) amountToSwapForETH = swapMaxTokensAmount;\\r\\n                        \\r\\n        uint256 initialETHBalance = address(this).balance;\\r\\n        _swapTokensForEth(amountToSwapForETH);         \\r\\n        uint256 ethBalance = address(this).balance - initialETHBalance;\\r\\n                       \\r\\n        uint256 ethForReflections = ethBalance * tokensForReflections / totalTokensToSwap;\\r\\n                \\r\\n        tokensForMarketing = 0;\\r\\n        tokensForReflections = 0;\\r\\n        \\r\\n        bool success;\\r\\n\\t\\t(success,) = address(dividendTracker).call{value: ethForReflections}(\\\"\\\");\\r\\n        (success,) = marketingWallet.call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable { }\\r\\n    \\r\\n    // --------------------- EVENTS ------------------------\\r\\n    event TradingEnabled();\\r\\n    event LimitsRemoved();\\r\\n    event SetMarketingWallet(address account);\\r\\n    event SetSwapTokensAtAmount(uint256 value);\\r\\n    event SetMaxTransactionAmount(uint256 value);\\r\\n    event SetMaxWalletAmount(uint256 value);\\r\\n    event SetExcludeFromMaxTransaction(bool state);\\r\\n    event SetSwapEnabled(bool state);\\r\\n    event SetBuyFees(uint8 buyMarketingFee, uint8 buyReflectionsFee);\\r\\n    event SetSellFees(uint8 buyMarketingFee, uint8 buyReflectionsFee);\\r\\n    event SetExcludeFromFees(address account, bool state);\\r\\n    event SetAutomatedMarketMakerPair(address account, bool state);\\r\\n    event SetGasForProcessingDividends(uint256 value);\\r\\n    event SetExcludeFromDividends(address account, bool state);\\r\\n    event SetDividendClaimWait(uint256 value);\\r\\n    event ProcessedDividends(uint256 iterations, uint256 claims, uint256 lastProcessedIndex);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dtName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dtSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"dtClaimWait\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"buyMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyReflectionsFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellMarketingFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellReflectionsFee\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"gasForProcessingDividends\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTokensAtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMaxTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct ShieldSky.DeployArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"}],\"name\":\"ProcessedDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyMarketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyReflectionsFee\",\"type\":\"uint8\"}],\"name\":\"SetBuyFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetDividendClaimWait\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetExcludeFromDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetExcludeFromMaxTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetGasForProcessingDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetMarketingWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetMaxWalletAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyMarketingFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyReflectionsFee\",\"type\":\"uint8\"}],\"name\":\"SetSellFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"SetSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SetSwapTokensAtAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyReflectionsFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract IDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessingDividends\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedMaxTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellReflectionsFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"marketingFee_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflectionsFee_\",\"type\":\"uint8\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setDividendClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setExcludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setExcludedFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"value\",\"type\":\"uint32\"}],\"name\":\"setGasForProcessingDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"marketingFee_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"reflectionsFee_\",\"type\":\"uint8\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShieldSky", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "5", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000037dffaff5f0429317ee4fc7d706a254af08782690000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000493e00000000000000000000000000000000000000000000c685fa11e01ec6f0000000000000000000000000000000000000000000000000c685fa11e01ec6f00000000000000000000000000000000000000000000000000152d02c7e14af680000000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000011536869656c64536b792046696e616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006534849454c4400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011536869656c64536b794469766964656e6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035354440000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}