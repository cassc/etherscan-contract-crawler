{"SourceCode": "// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n */\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account => uint256) private _balances;\r\n\r\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `value`.\r\n     */\r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `value`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `value`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\r\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\r\n     * this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance < value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: value <= fromBalance <= totalSupply.\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     *\r\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\r\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\r\n     * `Approval` event during `transferFrom` operations.\r\n     *\r\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\r\n     * true using the following override:\r\n     * ```\r\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\r\n     *     super._approve(owner, spender, value, true);\r\n     * }\r\n     * ```\r\n     *\r\n     * Requirements are the same as {_approve}.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     *\r\n     * Does not update the allowance value in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Does not emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: obama.sol\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n/// THE ORIGINAL OBAMA COIN\r\n/// telegram: t.me/tickerobama\r\n/// website: tickerobama.org\r\n/// twitter: https://twitter.com/BitcoinObama/status/1708414123644510661\r\n/// twitter archive: https://archive.ph/F0I9D\r\n  \r\n  \r\n    /**\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##########BGGP555G####&&&######&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###########B#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###BB##BBGP55YYYYYYYYY5Y5PGB###&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BP5YJJJYYYYYY555PPPPP5555PP5YYJYY5PG##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###&&B5YJ?J?JJJJJYYYJJYYYYYYY55YYYYYYY555555YYJJ5G#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BBGGP5YYYYYJJY55555555YYYYYJJJJJ??????JJJJJYYYYYYY5555J?J5G&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BGP5YYYY5PPPPPPPGGGGGPPPPPPPP55555555YYYJJ??????JJJJJJJYYYJYY5YJYPB&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#GPJ?JY55PPPPPPP5PPPPPPPPPP555555YYYYJJJJYYYYYYYYJJ?777????JJJJJYYYYJ??YB&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BPYJJYY55PP5555555YYYYYY555555YYYYJJJ????????JJJJJJJJYJJ?7!!!7?????JJJJJJJ??YB&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&BPJ?JY5PPPPPPPPPPPP5555YJJY555YYJJ????777777?????????????JJJJ?7!~~!777????JJJJ?7?G&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BG5Y?YPPGGGPP55PPGGGGPPPPP55YYYYJJJ??????777777??7777!!7!!!777??JJJ?!~~!777?????????7P#&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###BBGGPP5Y5PGGGGGGGGGGPPGGGGGGPP55YYYYYYYJJ?????????7?777777!~~~^^~~~~!!77??JJ7~~~!!7777??????7JB&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#&&&B5JJYJJY5PGGGGGGGGGGGGGGGGGGGGGP55YYJJJYYYJJJJJJ??????????777!~~~~^^^^:^^^~!!77???!~~~!!77?7777??7JG#&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#######BBBB####&&&&&&&&#BBPY?JY5PPGGGGPGGGGGGGGGGGGGGGGGGP55555YYJJ???77??JYJ??777?????77!!~~~~~~~^:::^^~~!!7??7!~~~!!7777777?77P&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&BPPGP5555555555YY5GGGGBBGPYJJY5PPPGGGPPPPPPPPPPP5PPPPPGGPP5YYYYJJYY5P5YJ7!!!7JJJJ?7777???777!!~~~~~~^^::.:^^~~!7???7!~~~!!!!77777!7P########&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#5P###BGGGPGGPPP55YYJ???77?5GGGGGGGGGPPPPP555555555PPPP55YYYYJJ?????JJ5GP5J7!!?JYYYJJ?7!!7!~~!!!~^^^^^^^:..:^^~~!7???7!~~~~!!!777777!JB#&#&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BPYG####BGPP55YYYJ?????J5PGGGGGGGGGGGGGGGPPPP5PPP555YYYYJJJJ??7777J?7?YPP5Y?7!?Y55YYJ?7~~~^^^~~~~^^^^^^::::::^^~!7???7!~~~!!!7777777!J#&####&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##GJB&&##BG5JJJ???77?JPBBBGGGGGGGGGGPPP55PPPPPPP55YJJJJ???7!!!!!!!7??!7?Y55YY?77J55YYYJ7~^~~~~~~~~^^^^^^^^::::^~!77????!~~~!!!!!77777!J#####&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##P5PPPPGGP5YYYYYY5PBBBGGGGGGGGGGGGGPPPPPPPP555YYYJJ???77!!~^^^~~!7??!!7J5P55Y??J5555YJ7!~~~~!~~~~^^^^~~~^^^^^~!77???J?!!!~!!!!!!7777!Y#&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##BBG5JP##BBBGGGBGGGGGGGGGGGGGGPPPPPPPPP55YYYYYYJJ??77!~~^::^~~~~!?J?77JYP555JJY555YJ?7~^~!!!~~^^^^~~~~~~~~~~!!77??JJ?7!!!!!!!777777!5#&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###P?J5PPGGGGGGGGGGGGGPGGGGGGGPPPPPP555YYYYYYYYYYJJ?77!~~^^^~~!!!!!7??????JJYYYYY5YJJYJ7~^~~~~~~~^^^~!!!!!!!!!!7??JJYY?7!!!!!!!!7777775#&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&B5?J5PPPPGPPGGGGGGGGGGGGPPPGGGPPPP5555YYJJJJJYYYJJ??7777777!!~~!7777????777??JJY555J???7!~~~~~^^^^^^~!777777777??JJJYYJ?!!!!!!!!777777!G&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BY?YPPPPPPPGGPPGGGGGGGGGPPGGPGGPPP5YYYYJJJ????JJJ?77!777??JJJ??7!!777777????J?JJYYYYJJ7!!!!!!!!~~~!!!!77????????JJJJYY5Y?7!!!!!77777777!7B&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#GYJ55PPPPPPPPPPPPPPP5555PPPPPPPPPPP5YYYYJJJ???????777!!!!!!!!!!7???777!!!!77????????!^~?YYYJJJJ???7!!77???JJJJJJJJYYYY555Y?7!!!!!77777????7G&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###&#GY?Y555555555555555555YYYY5PPPPP5YJY55YYYJJJJ?????J????????77!!!77??????7777??77!!!!!~~!?J5PGPP5555YYJ???7?JJYYYYYYYYYY55PPY?7!!!!!777777???!Y&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&BG5J?JYYYYYYYYYY5YY55YY55555555555YJ??JY5YYYYJJJJ?JJYYYJJJ????????JYYJ????????????777!~~!7?JY5PGGPPPPPPP5YYJJ??JYYYYYYY55555PPPY7777777777777?7?!P&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#P??JYY5YYYYYYYYYYYYYJJ?JJJJJJJYYYYJ??YYY5YYYYYJJJJJYYYYY77????7777YPG5Y???7!!~~^^!777!!7??JYY55555YYYY5PPP5YYJJYYYYYYY5555PPPGPJ777777777777????!G&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&###&G5JJYYY55YYYYYYYYJJYJJJ??????777?????JJJJ??JYYYJJJJJJJJYYYJ7!!!!???!^^75GPYJ?!~:.   :~!77??JJJYYYYY55555YJY5P5Y55YJYYYYYYYY55PPGGY77777777777777???!G&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##BGY?JY55YY5555YYJJYYYYYJJJJ??????7777777777!~7?!7?JJJJJJ?JJY??7!!!~7???!:.!5G5J?7!!~^:..:!7?JJJYYYYYJJYY55YYYJJY55555YYYYYYYY55PGGGY?7777777777777???7!#&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##BBPYJJY5555555555YYYYYYYYYYYYJJJ?????777!!!777!!~^::^!JJJJ??JJJ?77~^~~!????7^:755YJ???7!!~~!7?JYYYYYJJJ?77?5P5YYYJJYYPGP5YYY555PPGGGGY?77777777777777???!J#&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##P?7J55PPPPPP5555YYYYYYYYYYYYJJJJJJ?777!!!!!!!!!!!~^^^^^7?JJ?JJJ?77~^~~!7??JJ?~^!Y55YJ???77???JYYYYJJJYJJ?77?JPGP55JJJYPGPYY5PPPGGBGPJ7777777777???77????~P&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&###G7?YY5PPP5P555555YYYY555YYYJJJJJJ???77777!77!!~~~~!!~^~~~~7???JJ7!!!~^^~77?JJJ?!~~?Y55YYYJJJJJJYYYYJJJ??JJJ???JPGGG5YY5PGP5PGGBBBGPY?777777777??????????77B&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&#B57?Y55PPPPPP5555555555555YYYYYYYJJ?????777777!!~~~~~~!~~~^^^!??JJ?!~~^::^!7?JJJJJ?7~~7YPGGPP5YYYYJYY??7!!7??JJJJJ5GBG5Y5GGGGGBBBB5J?7777777777??????????77G&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&G?7J55555555555555Y555YYYYYYYYYYYYYJJJJJ?????77!!!~~~~~~~~^^^^^~7?JJ?7~~^^^~~!7?JJJJJ?7!!7YGBBGP5YYJJJ?7!~~~!!7??JJJYPBP55GBBB##GY?!!7777777777???????????!JB&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&GJJ5PP555555555555555YY5YYYYYYYYYYYJJJJJJ?JJ???77!!!~^~~~~~~~~~^^^~7JYJ?!~~^:^~~!7?JJJJJJ??7J5GGGPY?7777!!~~~!!!7??JYJ5PPPPG##BPJ7!!777777777777????????????P#&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&BG55PPP555YYY555YYYYYY5YYYYYYYYJJYYYYJJ??7?J??JJ???77!!!~~~^~~~~~~~^^^~!?JYY?7!~^:.^!~!777?JJJ???Y5PY?7!77!~~^~!!777?JYYY5PGGGGPJ7!777!!7777777777777????????7Y###&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&#####BP5Y5PPP55YYYYYYYYYYYYYYYYYYYJJJJJJJYYJJ77??77?JJJJ?77?77!!!!!~~~~~~~~~^^^^~!?YYJ?7~~~!!~^~^^~!?????JYYJ?7777!~~!77???JYY5PGBGP5J7!!!777???77?777777777????????7?B#BB#&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&###G5YYPP55555YYYYJJYYYYYYYYYYYYYJJ??JJJJJJJ?!?JJ77?J??JJ???777!~!!!~~~~~^^^~~~~~~!?JYYY?77!!!!!~~~!!77??JJJ?7777777????JJY55PPP5J?77!7777777?J??7???7777?????????J??G#####&&&&&&&&&&&&&\r\n&&&&&&&&&&&##BG5555Y5P5555YY5YYYYYJJJJJJJJJYYYYJJ??????????????7?JJJJJ???J???77!!!!!~~~~~^^^^~~~~~~!7JYYYYJJ?????JJJ77?JY5YJ??????JJJJYY55PPPPY?777!!!7777777?J?????777777???????J?75&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&G?PP555PP555YYYYYYYYYYYJJJJJ??JJJYYYJJJJJJJ??77~!!7JJJJJ??77???J???777!!!!~~~~^~~~~~~~~~~~!?JYYY5555555PP555PPP5YYYYYYY5555PPPGGPY?7!777!!!!777777?????7777777???????J?7Y###&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&#YYPP555Y555YYYYYYYYYYYYYYYJJ??JJJJJJJJJJJJJ??7!!7JJJJ?7JJ!~!?????7777!!!!!!!~~~~~~~~~~~~~~~7JJYY555555PPPGGGGPP5555PPPPPPGGGG5J7!!7777!!77777777????????JJJ?????????7JG###&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&#PYY555YYYYYYYYYYYYYYYY555YYYYJJJJJJJJJJ??????????JJJJ77??!^~!777!!77!!!!~!!!~~~~~~~~~~~~~~~!?YYYY555PPPPGGGGPPPPPPPGGGBBBPY?7!777777777777777???JJ?????JJJ?????????5B###&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&#&B5JY5YYJYYYYYYYYYYYY555555PPPP55YJJJJJ?????????JJJJJ?7777777777777!!!!!~~~~~~~~~~~~~~~~~~~~!7Y555PPPGGGGGGPPPPGGGBB##G5?7777777777777777777???JJJ?????????????J?7YGB##&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&GJJ5YYYYYYYYYYY5555555PGGBBBBGP5YJJJJ??77???77?JJ?77777??????777!!!!!!~~~~~!~~~~~~~~~~~~~!!!JPGGGGGGGGGGGGBBB###BPJ77777777777777777777??????J?????7???????77YPGB#&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&BJJYY5YYYYY5555555Y55PPGBBBBBBGP5JJ???77777777777777777?????777!!!!!~~~~~~~~~!~~~~~~~!!!!!!!75PGGGGGBBBBB##BGPY?777777777777777777777???????????????????77JG#&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&##&B?Y5555YY55555555PGGP5PPGGBBBBBGP5J?777!!!!!!!!!777777777777777!!!!!~!!!!~~~~~~~~~~!!!!!!!!!!?PGBBG5YJJJYJ??77777777777777777777777??????????????????77YG###&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&#B#G?YYY555555P55PPGGG5YY555PPGGBBBBBPJ?7!!!!!!!!!!!77777777777777!!!!!!!!!!!~~~~~!~~~!!!!!!!!!!!7YYJ?7!777777777?7777777777777777?????????????????????77G#####&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&###?7YY5P555PPPPGBGP55YYYYYY5555PGGBBBPJ?777!!!!!!!!7777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!77777777777777777777777??77777777???????????????J????7JB######&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&#?7YY5PP5PPGBBBP55Y5YYY5YYYYYY5Y5PGBBPJ?777!!!!!!!!777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!777777777777777777??J??77777777777?????????????????77PGB##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&B7?Y55555PP5PP555555YY5555YYYYYY55PGBG5J?777777!!77777777777777!!!!!!!!!!!!!!!!!!!!!!!!!!7777!!777777777777777?JY55YJ???????????????????????????77YGBBB&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&#P!JYY5555P55P555P555555555555555555PGBG5J???777!!777!7!!777!!77!!!!!!!!!!!!!!!!!!!!!7!!!77777777777777777777?JY555YJJJJJJJJ????????????????????J5GBBBBB&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&#5!JYY5YY5P55PP55PP55555555555555555PGBBG5YJ??777777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!7777777777777777777?JY5YJJ??????????JJJYYYJ???????????JP###BB###&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&##5!JYYYYY555YYPGP55555555P555555Y55PPPGBBBP5YJ???7777777!!!!!!!!!!!!!!!!!!!!!!!!!!!!7777777777777777777777?Y5YYJ??????7777777?JJ55J?????????JG####&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&#BJ7YYYYY5555YYYPGPP5555PPPP5555555PPPPPGGGBBG5YJ?777777777!!!!!!!!77!!!!!!!!!!7777777777777???77777777777?Y55YY5PPYJ???777777??JY5J???????YG##BB#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&B7?JJYY5P5555YY5GGPPP555PP555PPPPPPPP5PGGBBBBBPY????77777777777777777777!7!77777777777??????????????7??77?YPPP5Y5GGY???777?77???JYJ???7YPGB&&#####&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&P7??JYY5PPPPP5YY5GGGPP55PPPPPPPPGPPPPPPGGBBBBBBPYJ????777777777777777777777!777777777777????????????????777???77?PGY?77777777??JJY???JP#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&#Y7??JJYY5PPGGP5555PGGP555PPPPPPGGGPPPPPPPGGGBBBBGY?????7777777777777777777777777777777??????J?????????????77???7JPGJ77?77??77??JY?JPG###&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&P7J?JJYY5Y5PGPPP555PPPPPPPPPPPGGPPPPPPPPPPGGGBBB#GYJJ???777777777777777777777777777777??????JJ??????????????????JPPJ???????????JJ!G#B#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&B7?JJJY55555PPPPP55PPGBBBBBGGGPPPPPPPPPPPGGGGGBBBBGY???????777777777777777777777777777?????JJJJ?????????????????YPPJ?????????JJJ??#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&##?!??JY555555PPGGPGBBBBBB#BBBGGPPPPPPPPPGGGGGGBBBBBPJJJJJ??7777777777777777777777???7???????JJJ?????????????????YP5J?JJJ?JJJJJJJ7J&#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&P!??JJYPPPPP5Y5GGGGGGGGBBBBBGGGPPPGGGGGGGGGBBBBB##BPJJJJJ??777777777????7777777???????????JJYJ?????????????????YP5YYYYJJYYYJJYY?G###&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&B77JJJY5PPPP5YYPGGGPPPGGGGGBBBGGPPPPPPPPPPPGGGBBBBBGYJJJJJ???????????????????????????????JJYYJ?????????????????YGBGPPP555555P5JP##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&#57JJJY5PPPPPP5555PPPPPPPGGBBBBBGP5555PPPPPPGGGBBBBGPJJJJ????JJJ?????77?????????????????JJJYYJ???????????????????Y55PGGP5PPP55G##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&#??JJY5PPPPPPP55555P55Y555PPPGGBBGPPPPGGGGGGGGGGGBBPYJJ??JYYYJJJ??77777777?????????????JJJJJJ?????????????????7?G#BBBBBBBBBB##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&Y!?JJY5PPPPPPPPP5PPPPPP555555PGGGPPGGGGGGGGGGBBBBBGYJ?JY55YYJJJ????7777777???????????JJ??JYJJ????????????????YB#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&P!?JJYY55PPPPPP5PPPPPPGPPPPPPPGGGPPPGGGGGGGGGGBBBBPYJY555YYYJ???????7777777?????????????JJYJJ??JJJJ???????7?G##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&##Y7?JJJ55PPPGGGP5PPPPPPPPPPPPPPGGPPPPPGGGGGGGGGBBG5YYPPYJJJJJ??????7777777??????????????JJJJJJJYYJJJJJJ??J5#&##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&BY7JJJY55PPPGBGPPPPPPPPPPPPGGPPGGPPGGGGGGGGGGBBGPY5P5YJJJJJ?????????7???????JJJJJJJ?????JJJY5555YYYJ?YPB#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&#&G??YJYY55PGGGGGPPPPPGGGGGGGGGGGGGGGGGGGGGGBBGGP5555YJJJ??????????????????JJYYYJJ????JJYY5PPP55555PPB#BB#&&&&#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&BY?JYYY55PPGGBGP5PPGGGGGGGGGGGGGGGGGGGGGGGGGPPP5YJJ???????????????????JJY5YYJJ????JJYY5PPGGGGB##&&##B##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&GJ?JYY55PGGGBGGPGGGGBBBGGGGGGGGBBBBBBGGPP55YYYJJ??????????????????JJY5YJJJ?????JPGB#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&#PJJYY55PPGGGGGPGGGBBBBBBBBBBBBGGP55555YYYYJYJ??????????????????JYYYJ???????JPBB#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&#PYJY555PPPGGGGGGGGGGGBBGGGGGPP5555YYYYYYYJJ?????????????????JY5J??J??YY5G#&BB#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#GJJY55PPPGPPPPPGGGGGGGGGPPPP555YYYYYYJJJJ???????????????JYP5YJJJYG#&#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#GPYJY555555YYYYYYYY55555555YYYYYYYYYYJJ???????????????J55JJYPBBBB###&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BYJ555YYJJ??????????JYYYJJYYYYYYY5YJJJ???????????JJ55J5B######&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&BPJJ555YYJJJJJ?????JJJJJJYYYYYYYYYYJJ?????JJJJJJ5PJ5##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#PYYY555555YYJJYYYJYYYYYY5555555P5YJJJJJJJJY5P5J5B###&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&#BGPYYY555555555555Y55PPP55555P5YJJY55YY5PPYYG##&&######&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&BGPPPPGGGGGGPP5YYGGGGB######G5JY55PBGJ5#&&&&&######&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##&&&&#########BGPP555G####&&&######&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&##&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\r\n    */\r\n\r\n\r\ncontract CustomToken is ERC20 {\r\n    address public owner;\r\n    address public taxAddress; // Address where taxes will be sent\r\n    mapping(address => bool) public blacklist;\r\n    mapping(address => bool) public antiWhaleWhitelist;\r\n    uint256 public taxPercentage;\r\n    uint256 public whaleLimit; // Will be set to 1% of total supply in the constructor\r\n    address public uniswapPair; // Address of the Uniswap pair for this token\r\n\r\n    constructor() ERC20(\"TickerObama\", \"OBAMA\") {\r\n        owner = msg.sender;\r\n        // Mint initial supply if needed, for example:\r\n        _mint(msg.sender, 1e8 * 1e18); // Example: 100,000,000 tokens with 18 decimals\r\n        whaleLimit = totalSupply() / 100; // Set whaleLimit to 1% of total supply\r\n        // Set initial values for taxPercentage\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the contract owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        owner = address(0);\r\n    }\r\n\r\n    function setTaxAddress(address _taxAddress) external onlyOwner {\r\n        taxAddress = _taxAddress;\r\n    }\r\n\r\n    function setUniswapPair(address _pair) external onlyOwner {\r\n        uniswapPair = _pair;\r\n    }\r\n\r\n    function addToBlacklist(address _address) external onlyOwner {\r\n        blacklist[_address] = true;\r\n    }\r\n\r\n    function removeFromBlacklist(address _address) external onlyOwner {\r\n        blacklist[_address] = false;\r\n    }\r\n\r\n    function addToWhitelist(address _address) external onlyOwner {\r\n        antiWhaleWhitelist[_address] = true;\r\n    }\r\n\r\n    function removeFromWhitelist(address _address) external onlyOwner {\r\n        antiWhaleWhitelist[_address] = false;\r\n    }\r\n\r\n    function setWhaleLimit(uint256 _limit) external onlyOwner {\r\n        whaleLimit = _limit;\r\n    }\r\n\r\n    function setTaxPercentage(uint256 _percentage) external onlyOwner {\r\n        taxPercentage = _percentage;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        require(!blacklist[msg.sender], \"You are blacklisted\");\r\n        require(balanceOf(recipient) + amount <= whaleLimit || antiWhaleWhitelist[recipient], \"Recipient would exceed the whale limit\");\r\n\r\n        uint256 tax = 0;\r\n        if ((msg.sender == uniswapPair || recipient == uniswapPair) && !antiWhaleWhitelist[msg.sender] && !antiWhaleWhitelist[recipient]) {\r\n            // Apply tax only if the transfer involves the Uniswap pair and neither the sender nor recipient is whitelisted\r\n            tax = (amount * taxPercentage) / 100;\r\n            super.transfer(taxAddress, tax); // Send tax to the specified tax address\r\n        }\r\n\r\n        super.transfer(recipient, amount - tax);\r\n        return true;\r\n    }\r\n\r\n    // Implement other functions like deployLiquidity, etc.\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"antiWhaleWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxAddress\",\"type\":\"address\"}],\"name\":\"setTaxAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setTaxPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setWhaleLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whaleLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CustomToken", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1f0f40d0ea6de323fd0d9b186cfc0bb80b513bbb464d5d9b0a848b00161189df"}