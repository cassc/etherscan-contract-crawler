{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/governance/interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IVault {\\n    /// @dev Removes an existing implementation address.\\n    function removeImplementation(address implementation_) external;\\n\\n    /// @dev Adds new implementation address.\\n    function addImplementation(\\n        address implementation_,\\n        bytes4[] calldata sigs_\\n    ) external;\\n\\n    /// @dev Sets new dummy-implementation.\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    /// @dev Sets new admin.\\n    function setAdmin(address newAdmin_) external;\\n\\n    /// @notice Re-initializes the vault with new protocol IDs and risk ratios.\\n    function initializeV2() external;\\n}\\n\"\r\n    },\r\n    \"contracts/governance/main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./variables.sol\\\";\\n\\ncontract Events {\\n    event LogExecute(\\n        address newUserModule,\\n        address newAdminModule,\\n        address newLeverageModule,\\n        address newRebalanceModule,\\n        address newRefinanceModule,\\n        address newDsaModule,\\n        address newWIthdrawalsModule,\\n        uint256 blockTimestamp\\n    );\\n}\\n\\ncontract InitializeVault is NewSignatures, Events {\\n    /***********************************|\\n    |              ERRORS               |\\n    |__________________________________*/\\n    error InitializeVault__NotGovernance();\\n\\n    /***********************************|\\n    |              MODIFIERS            |\\n    |__________________________________*/\\n    modifier onlyGovernance() {\\n        if (msg.sender != GOVERNANCE) {\\n            revert InitializeVault__NotGovernance();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Executes Lite vault upgrade with initializing version 2.\\n    function execute() public onlyGovernance {\\n        // Remove old implementations\\n        vault.removeImplementation(OLD_USER_MODULE);\\n        vault.removeImplementation(OLD_ADMIN_MODULE);\\n        vault.removeImplementation(OLD_LEVERAGE_MODULE);\\n        vault.removeImplementation(OLD_REBALANCER_MODULE);\\n        vault.removeImplementation(OLD_REFINANCE_MODULE);\\n        vault.removeImplementation(OLD_DSA_MODULE);\\n\\n        // Add new signatures\\n        vault.addImplementation(NEW_USER_MODULE, userSigs());\\n        vault.addImplementation(NEW_ADMIN_MODULE, adminSigs());\\n        vault.addImplementation(NEW_LEVERAGE_MODULE, leverageSigs());\\n        vault.addImplementation(NEW_REBALANCER_MODULE, rebalancerSigs());\\n        vault.addImplementation(NEW_REFINANCE_MODULE, refinanceSigs());\\n        vault.addImplementation(NEW_DSA_MODULE, dsaSigs());\\n        vault.addImplementation(NEW_WITHDRAWALS_MODULE, withdrawalsSigs());\\n\\n        // Update dummy implementation\\n        vault.setDummyImplementation(NEW_DUMMY_IMPLEMENTATION);\\n\\n        // Call Initialize V2\\n        vault.initializeV2();\\n\\n        // Tranfer ownership back to governance\\n        vault.setAdmin(GOVERNANCE);\\n\\n        emit LogExecute(\\n            NEW_USER_MODULE,\\n            NEW_ADMIN_MODULE,\\n            NEW_LEVERAGE_MODULE,\\n            NEW_REBALANCER_MODULE,\\n            NEW_REFINANCE_MODULE,\\n            NEW_DSA_MODULE,\\n            NEW_WITHDRAWALS_MODULE,\\n            block.timestamp\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/governance/variables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./interface.sol\\\";\\n\\ncontract Variables {\\n    /***********************************|\\n    |             OLD ADDRESSES         |\\n    |__________________________________*/\\n    address internal constant OLD_USER_MODULE =\\n        0xFF1029d2fB178167f1eb9435289a90b324F3BdbC;\\n    address internal constant OLD_ADMIN_MODULE =\\n        0x27248FEe1c1DD1697F305328B031725e10B8c241;\\n    address internal constant OLD_LEVERAGE_MODULE =\\n        0xeb228438D3e5829aCe4D90a6f4D5453B8146b79a;\\n    address internal constant OLD_REBALANCER_MODULE =\\n        0x63AD4D2346B7b1009F888a4708ba66178a8431F0;\\n    address internal constant OLD_REFINANCE_MODULE =\\n        0x0f885fe8f1351A8F1755e7E79bD831d108FF10B4;\\n    address internal constant OLD_DSA_MODULE =\\n        0x8b751C738767b90005b9C06c1398F65cd0bd3094;\\n\\n    /***********************************|\\n    |             NEW ADDRESSES         |\\n    |__________________________________*/\\n    address internal constant NEW_USER_MODULE =\\n        0xFF93C10FB34f7069071D0679c45ed77A98f37f21;\\n    address internal constant NEW_ADMIN_MODULE =\\n        0x06feaa505193e987B12f161F1dB73b1D4d604001;\\n    address internal constant NEW_LEVERAGE_MODULE =\\n        0xA18519a6bb1282954e933DA0A775924E4CcE6019;\\n    address internal constant NEW_REBALANCER_MODULE =\\n        0xc6639CE123d779fE6eA545B70CbDc1dCA421740d;\\n    address internal constant NEW_REFINANCE_MODULE =\\n        0x390936658cB9B73ca75c6c02D5EF88b958D38241;\\n    address internal constant NEW_DSA_MODULE =\\n        0xE38d5938d6D75ceF2c3Fc63Dc4AB32cD103E10df;\\n    address internal constant NEW_WITHDRAWALS_MODULE =\\n        0xbd45DfF3320b0d832C61fb41489fdd3a1b960067;\\n\\n    address internal constant NEW_DUMMY_IMPLEMENTATION =\\n        0x5C122207f668D3fE345465Ac447b3FEF627f4963;\\n\\n    address internal constant GOVERNANCE =\\n        0xC7Cb1dE2721BFC0E0DA1b9D526bCdC54eF1C0eFC; // InstaTimelock\\n\\n    address internal constant VAULT =\\n        0xA0D3707c569ff8C87FA923d3823eC5D81c98Be78;\\n    IVault internal constant vault =\\n        IVault(0xA0D3707c569ff8C87FA923d3823eC5D81c98Be78);\\n}\\n\\ncontract NewSignatures is Variables {\\n\\n    // Keeping them pulic so we can verify that all the signatures are matching after deploying.\\n    function userSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](54);\\n        sigs_[0] = bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"approve(address,uint256)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"balanceOf(address)\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"decreaseAllowance(address,uint256)\\\"));\\n        sigs_[4] = bytes4(keccak256(\\\"increaseAllowance(address,uint256)\\\"));\\n        sigs_[5] = bytes4(keccak256(\\\"name()\\\"));\\n        sigs_[6] = bytes4(keccak256(\\\"symbol()\\\"));\\n        sigs_[7] = bytes4(keccak256(\\\"totalSupply()\\\"));\\n        sigs_[8] = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\n        sigs_[9] = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\n        sigs_[10] = bytes4(keccak256(\\\"asset()\\\"));\\n        sigs_[11] = bytes4(keccak256(\\\"convertToAssets(uint256)\\\"));\\n        sigs_[12] = bytes4(keccak256(\\\"convertToShares(uint256)\\\"));\\n        sigs_[13] = bytes4(keccak256(\\\"decimals()\\\"));\\n        sigs_[14] = bytes4(keccak256(\\\"maxDeposit(address)\\\"));\\n        sigs_[15] = bytes4(keccak256(\\\"maxMint(address)\\\"));\\n        sigs_[16] = bytes4(keccak256(\\\"maxRedeem(address)\\\"));\\n        sigs_[17] = bytes4(keccak256(\\\"maxWithdraw(address)\\\"));\\n        sigs_[18] = bytes4(keccak256(\\\"previewDeposit(uint256)\\\"));\\n        sigs_[19] = bytes4(keccak256(\\\"previewMint(uint256)\\\"));\\n        sigs_[20] = bytes4(keccak256(\\\"previewRedeem(uint256)\\\"));\\n        sigs_[21] = bytes4(keccak256(\\\"previewWithdraw(uint256)\\\"));\\n        sigs_[22] = bytes4(keccak256(\\\"getNetAssets()\\\"));\\n        sigs_[23] = bytes4(keccak256(\\\"getProtocolRatio(uint8)\\\"));\\n        sigs_[24] = bytes4(keccak256(\\\"getRatioAaveV2()\\\"));\\n        sigs_[25] = bytes4(keccak256(\\\"getRatioAaveV3(uint256)\\\"));\\n        sigs_[26] = bytes4(keccak256(\\\"getRatioCompoundV3(uint256)\\\"));\\n        sigs_[27] = bytes4(keccak256(\\\"getRatioEuler(uint256)\\\"));\\n        sigs_[28] = bytes4(keccak256(\\\"getRatioMorphoAaveV2()\\\"));\\n        sigs_[29] = bytes4(keccak256(\\\"getWithdrawFee(uint256)\\\"));\\n        sigs_[30] = bytes4(keccak256(\\\"aggrMaxVaultRatio()\\\"));\\n        sigs_[31] = bytes4(keccak256(\\\"exchangePrice()\\\"));\\n        sigs_[32] = bytes4(keccak256(\\\"isRebalancer(address)\\\"));\\n        sigs_[33] = bytes4(keccak256(\\\"leverageMaxUnitAmountLimit()\\\"));\\n        sigs_[34] = bytes4(keccak256(\\\"maxRiskRatio(uint8)\\\"));\\n        sigs_[35] = bytes4(keccak256(\\\"revenue()\\\"));\\n        sigs_[36] = bytes4(keccak256(\\\"revenueExchangePrice()\\\"));\\n        sigs_[37] = bytes4(keccak256(\\\"revenueFeePercentage()\\\"));\\n        sigs_[38] = bytes4(keccak256(\\\"secondaryAuth()\\\"));\\n        sigs_[39] = bytes4(keccak256(\\\"treasury()\\\"));\\n        sigs_[40] = bytes4(keccak256(\\\"vaultDSA()\\\"));\\n        sigs_[41] = bytes4(keccak256(\\\"withdrawFeeAbsoluteMin()\\\"));\\n        sigs_[42] = bytes4(keccak256(\\\"withdrawalFeePercentage()\\\"));\\n        sigs_[43] = bytes4(keccak256(\\\"deposit(uint256,address)\\\"));\\n        sigs_[44] = bytes4(\\n            keccak256(\\\"importPosition(uint256,uint256,uint256,address)\\\")\\n        );\\n        sigs_[45] = bytes4(keccak256(\\\"mint(uint256,address)\\\"));\\n        sigs_[46] = bytes4(keccak256(\\\"redeem(uint256,address,address)\\\"));\\n        sigs_[47] = bytes4(keccak256(\\\"totalAssets()\\\"));\\n        sigs_[48] = bytes4(keccak256(\\\"withdraw(uint256,address,address)\\\"));\\n        // new functions\\n        sigs_[49] = bytes4(keccak256(\\\"borrowBalanceMorphoAaveV3(address)\\\"));\\n        sigs_[50] = bytes4(keccak256(\\\"collateralBalanceMorphoAaveV3(address)\\\"));\\n        sigs_[51] = bytes4(keccak256(\\\"getRatioMorphoAaveV3(uint256)\\\"));\\n        sigs_[52] = bytes4(keccak256(\\\"getRatioSpark(uint256)\\\"));\\n        sigs_[53] = bytes4(keccak256(\\\"queuedWithdrawStEth()\\\"));\\n    }\\n\\n    function adminSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](11);\\n        sigs_[0] = bytes4(keccak256(\\\"changeVaultStatus(uint8)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"reduceAggrMaxVaultRatio(uint256)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"reduceMaxRiskRatio(uint8[],uint256[])\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"updateAggrMaxVaultRatio(uint256)\\\"));\\n        sigs_[4] = bytes4(keccak256(\\\"updateFees(uint256,uint256,uint256)\\\"));\\n        sigs_[5] = bytes4(\\n            keccak256(\\\"updateLeverageMaxUnitAmountLimit(uint256)\\\")\\n        );\\n        sigs_[6] = bytes4(keccak256(\\\"updateMaxRiskRatio(uint8[],uint256[])\\\"));\\n        sigs_[7] = bytes4(keccak256(\\\"updateRebalancer(address,bool)\\\"));\\n        sigs_[8] = bytes4(keccak256(\\\"updateSecondaryAuth(address)\\\"));\\n        sigs_[9] = bytes4(keccak256(\\\"updateTreasury(address)\\\"));\\n        // new functions\\n        sigs_[10] = bytes4(keccak256(\\\"initializeV2()\\\"));\\n    }\\n\\n    function leverageSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](1);\\n        sigs_[0] = bytes4(\\n            keccak256(\\n                \\\"leverage(uint8,uint256,uint256,uint256,address[],uint256[],uint256,uint256,bytes)\\\"\\n            )\\n        );\\n    }\\n\\n    function rebalancerSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](6);\\n        sigs_[0] = bytes4(keccak256(\\\"collectRevenue(uint256)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"fillVaultAvailability(uint8,uint256)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"sweepEthToSteth()\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"sweepWethToSteth()\\\"));\\n        sigs_[4] = bytes4(keccak256(\\\"updateExchangePrice()\\\"));\\n        sigs_[5] = bytes4(keccak256(\\\"vaultToProtocolDeposit(uint8,uint256)\\\"));\\n    }\\n\\n    function refinanceSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](1);\\n        sigs_[0] = bytes4(\\n            keccak256(\\\"refinance(uint8,uint8,uint256,uint256,uint256,uint256)\\\")\\n        );\\n    }\\n\\n    function dsaSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](2);\\n        sigs_[0] = bytes4(keccak256(\\\"addDSAAuth(address)\\\"));\\n        sigs_[1] = bytes4(keccak256(\\\"spell(address,bytes,uint256,uint256)\\\"));\\n    }\\n\\n    function withdrawalsSigs() public pure returns (bytes4[] memory sigs_) {\\n        sigs_ = new bytes4[](4);\\n        // new functions\\n        sigs_[0] = bytes4(\\n            keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\")\\n        );\\n        sigs_[1] = bytes4(keccak256(\\\"queueEthWithdrawal(uint256,uint8)\\\"));\\n        sigs_[2] = bytes4(keccak256(\\\"paybackDebt(uint8)\\\"));\\n        sigs_[3] = bytes4(keccak256(\\\"claimEthWithdrawal(uint256,uint8)\\\"));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InitializeVault__NotGovernance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newUserModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdminModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLeverageModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRebalanceModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRefinanceModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDsaModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWIthdrawalsModule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogExecute\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adminSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dsaSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancerSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refinanceSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsSigs\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"sigs_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "InitializeVault", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}