{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/boosting/StakingProxyRebalancePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./StakingProxyBase.sol\\\";\\nimport \\\"../interfaces/IFxnGauge.sol\\\";\\nimport \\\"../interfaces/IFxUsd.sol\\\";\\nimport \\\"../interfaces/IFxFacetV2.sol\\\";\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\n/*\\nVault implementation for rebalance pool gauges\\n\\nThis should mostly act like a normal erc20 vault with the exception that\\nfxn is not minted directly and is rather passed in via the extra rewards route.\\nThus automatic redirect must be turned off and processed locally from the vault.\\n*/\\ncontract StakingProxyRebalancePool is StakingProxyBase, ReentrancyGuard{\\n    using SafeERC20 for IERC20;\\n\\n    address public constant fxusd = address(0x085780639CC2cACd35E474e71f4d000e2405d8f6); \\n\\n    constructor(address _poolRegistry, address _feeRegistry, address _fxnminter) \\n        StakingProxyBase(_poolRegistry, _feeRegistry, _fxnminter){\\n    }\\n\\n    //vault type\\n    function vaultType() external pure override returns(VaultType){\\n        return VaultType.RebalancePool;\\n    }\\n\\n    //vault version\\n    function vaultVersion() external pure override returns(uint256){\\n        return 1;\\n    }\\n\\n    //initialize vault\\n    function initialize(address _owner, uint256 _pid) public override{\\n        super.initialize(_owner, _pid);\\n\\n        //set infinite approval\\n        IERC20(stakingToken).approve(gaugeAddress, type(uint256).max);\\n    }\\n\\n\\n    //deposit into rebalance pool with ftoken\\n    function deposit(uint256 _amount) external onlyOwner nonReentrant{\\n        if(_amount > 0){\\n            //pull ftokens from user\\n            IERC20(stakingToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            //stake\\n            IFxnGauge(gaugeAddress).deposit(_amount, address(this));\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //deposit into rebalance pool with fxusd\\n    function depositFxUsd(uint256 _amount) external onlyOwner nonReentrant{\\n        if(_amount > 0){\\n            //pull fxusd from user\\n            IERC20(fxusd).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            //stake using fxusd's earn function\\n            IFxUsd(fxusd).earn(gaugeAddress, _amount, address(this));\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //deposit into rebalance pool with base\\n    function depositBase(uint256 _amount, uint256 _minAmountOut) external onlyOwner nonReentrant{\\n        if(_amount > 0){\\n            address _baseToken = IFxnGauge(gaugeAddress).baseToken();\\n\\n            //pull base from user\\n            IERC20(_baseToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n            IERC20(_baseToken).approve(fxusd, _amount);\\n            //stake using fxusd's earn function\\n            IFxUsd(fxusd).mintAndEarn(gaugeAddress, _amount, address(this), _minAmountOut);\\n\\n            //return left over\\n            IERC20(_baseToken).safeTransfer(msg.sender, IERC20(_baseToken).balanceOf(address(this)) );\\n        }\\n        \\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //withdraw a staked position and return ftoken\\n    function withdraw(uint256 _amount) external onlyOwner nonReentrant{\\n\\n        //withdraw ftoken directly to owner\\n        IFxnGauge(gaugeAddress).withdraw(_amount, owner);\\n\\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //withdraw a staked position and return fxusd\\n    function withdrawFxUsd(uint256 _amount) external onlyOwner nonReentrant{\\n\\n        //wrap to fxusd and receive at owner(msg.sender)\\n        IFxUsd(fxusd).wrapFrom(gaugeAddress, _amount, msg.sender);\\n\\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //withdraw from rebalance pool(v2) and return underlying base\\n    function withdrawAsBase(uint256 _amount, address _fxfacet, address _fxconverter) external onlyOwner nonReentrant{\\n\\n        //withdraw from rebase pool as underlying\\n        IFxFacetV2.ConvertOutParams memory params = IFxFacetV2.ConvertOutParams(_fxconverter,0,new uint256[](0));\\n        IFxFacetV2(_fxfacet).fxRebalancePoolWithdrawAs(params, gaugeAddress, _amount);\\n\\n        //return left over\\n        address _baseToken = IFxnGauge(gaugeAddress).baseToken();\\n        IERC20(_baseToken).safeTransfer(msg.sender, IERC20(_baseToken).balanceOf(address(this)) );\\n\\n        //checkpoint rewards\\n        _checkpointRewards();\\n    }\\n\\n    //return earned tokens on staking contract and any tokens that are on this vault\\n    function earned() external override returns (address[] memory token_addresses, uint256[] memory total_earned) {\\n        //get list of reward tokens\\n        address[] memory rewardTokens = IFxnGauge(gaugeAddress).getActiveRewardTokens();\\n\\n        //create array of rewards on gauge, rewards on extra reward contract, and fxn that is minted\\n        address _rewards = rewards;\\n        token_addresses = new address[](rewardTokens.length + IRewards(_rewards).rewardTokenLength());\\n        total_earned = new uint256[](rewardTokens.length + IRewards(_rewards).rewardTokenLength());\\n\\n        //simulate claiming\\n\\n        //claim other rewards on gauge to this address to tally\\n        IFxnGauge(gaugeAddress).claim(address(this),address(this));\\n\\n        //get balance of tokens\\n        for(uint256 i = 0; i < rewardTokens.length; i++){\\n            token_addresses[i] = rewardTokens[i];\\n            if(rewardTokens[i] == fxn){\\n                //remove boost fee here as boosted fxn is distributed via extra rewards\\n                total_earned[i] = IERC20(fxn).balanceOf(address(this)) * (FEE_DENOMINATOR - IFeeRegistry(feeRegistry).totalFees()) / FEE_DENOMINATOR;\\n            }else{\\n                total_earned[i] = IERC20(rewardTokens[i]).balanceOf(address(this));\\n            }\\n        }\\n\\n        //also add an extra rewards from convex's side\\n        IRewards.EarnedData[] memory extraRewards = IRewards(_rewards).claimableRewards(address(this));\\n        for(uint256 i = 0; i < extraRewards.length; i++){\\n            token_addresses[i+rewardTokens.length] = extraRewards[i].token;\\n            total_earned[i+rewardTokens.length] = extraRewards[i].amount;\\n        }\\n    }\\n\\n    /*\\n    claim flow:\\n        mint fxn rewards directly to vault\\n        claim extra rewards directly to the owner\\n        calculate fees on fxn\\n        distribute fxn between owner and fee deposit\\n    */\\n    function getReward() external override{\\n        getReward(true);\\n    }\\n\\n    //get reward with claim option.\\n    function getReward(bool _claim) public override{\\n\\n        //claim\\n        if(_claim){\\n            //extras. rebalance pool will have fxn\\n            IFxnGauge(gaugeAddress).claim();\\n        }\\n\\n        //process fxn fees\\n        _processFxn();\\n\\n        //get list of reward tokens\\n        address[] memory rewardTokens = IFxnGauge(gaugeAddress).getActiveRewardTokens();\\n\\n        //transfer remaining tokens\\n        _transferTokens(rewardTokens);\\n\\n        //extra rewards\\n        _processExtraRewards();\\n    }\\n\\n    //get reward with claim option, as well as a specific token list to claim from convex extra rewards\\n    function getReward(bool _claim, address[] calldata _tokenList) external override{\\n\\n        //claim\\n        if(_claim){\\n            //extras. rebalance pool will have fxn\\n            IFxnGauge(gaugeAddress).claim();\\n        }\\n\\n        //process fxn fees\\n        _processFxn();\\n\\n        //get list of reward tokens\\n        address[] memory rewardTokens = IFxnGauge(gaugeAddress).getActiveRewardTokens();\\n\\n        //transfer remaining tokens\\n        _transferTokens(rewardTokens);\\n\\n        //extra rewards\\n        _processExtraRewardsFilter(_tokenList);\\n    }\\n\\n    //return any tokens in vault back to owner\\n    function transferTokens(address[] calldata _tokenList) external onlyOwner{\\n        //transfer tokens back to owner\\n        //fxn and gauge tokens are skipped\\n        _transferTokens(_tokenList);\\n    }\\n\\n\\n    function _checkExecutable(address _address) internal override{\\n        super._checkExecutable(_address);\\n\\n        //require shutdown for calls to withdraw role contracts\\n        if(IFxUsd(gaugeAddress).hasRole(keccak256(\\\"WITHDRAW_FROM_ROLE\\\"), _address)){\\n            (, , , , uint8 shutdown) = IPoolRegistry(poolRegistry).poolInfo(pid);\\n            require(shutdown == 0,\\\"!shutdown\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IRewards{\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    enum RewardState{\\n        NotInitialized,\\n        NoRewards,\\n        Active\\n    }\\n    \\n    function initialize(uint256 _pid, bool _startActive) external;\\n    function addReward(address _rewardsToken, address _distributor) external;\\n    function approveRewardDistributor(\\n        address _rewardsToken,\\n        address _distributor,\\n        bool _approved\\n    ) external;\\n    function deposit(address _owner, uint256 _amount) external;\\n    function withdraw(address _owner, uint256 _amount) external;\\n    function getReward(address _forward) external;\\n    function getRewardFilter(address _forward, address[] calldata _tokens) external;\\n    function notifyRewardAmount(address _rewardsToken, uint256 _reward) external;\\n    function balanceOf(address account) external view returns (uint256);\\n    function claimableRewards(address _account) external view returns(EarnedData[] memory userRewards);\\n    function rewardTokens(uint256 _rid) external view returns (address);\\n    function rewardTokenLength() external view returns(uint256);\\n    function rewardState() external view returns(RewardState);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IProxyVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IProxyVault {\\n\\n    enum VaultType{\\n        Erc20Basic,\\n        RebalancePool\\n    }\\n\\n    function vaultType() external view returns(VaultType);\\n    function vaultVersion() external view returns(uint256);\\n    function initialize(address _owner, uint256 _pid) external;\\n    function pid() external returns(uint256);\\n    function usingProxy() external returns(address);\\n    function owner() external returns(address);\\n    function gaugeAddress() external returns(address);\\n    function stakingToken() external returns(address);\\n    function rewards() external returns(address);\\n    function getReward() external;\\n    function getReward(bool _claim) external;\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external;\\n    function earned() external returns (address[] memory token_addresses, uint256[] memory total_earned);\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IPoolRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IPoolRegistry {\\n    function poolLength() external view returns(uint256);\\n    function poolInfo(uint256 _pid) external view returns(address, address, address, address, uint8);\\n    function vaultMap(uint256 _pid, address _user) external view returns(address vault);\\n    function addUserVault(uint256 _pid, address _user) external returns(address vault, address stakeAddress, address stakeToken, address rewards);\\n    function deactivatePool(uint256 _pid) external;\\n    function addPool(address _implementation, address _stakingAddress, address _stakingToken) external;\\n    function setRewardActiveOnCreation(bool _active) external;\\n    function setRewardImplementation(address _imp) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFxnTokenMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable func-name-mixedcase\\ninterface IFxnTokenMinter {\\n  function token() external view returns (address);\\n\\n  function controller() external view returns (address);\\n\\n  function minted(address user, address gauge) external view returns (uint256);\\n\\n  function mint(address gauge_addr) external;\\n\\n  function mint_many(address[8] memory gauges) external;\\n\\n  function mint_for(address gauge, address _for) external;\\n\\n  function toggle_approve_mint(address _user) external;\\n}\"\r\n    },\r\n    \"/contracts/interfaces/IFxnGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFxnGauge{\\n\\n    //basics\\n    function stakingToken() external view returns(address);\\n    function totalSupply() external view returns(uint256);\\n    function workingSupply() external view returns(uint256);\\n    function workingBalanceOf(address _account) external view returns(uint256);\\n    function deposit(uint256 _amount) external;\\n    function deposit(uint256 _amount, address _receiver) external;\\n    function withdraw(uint256 _amount) external;\\n    function withdraw(uint256 _amount, address _receiver) external;\\n    function user_checkpoint(address _account) external returns (bool);\\n    function balanceOf(address _account) external view returns(uint256);\\n    function integrate_fraction(address account) external view returns (uint256);\\n    function baseToken() external view returns(address);\\n    function asset() external view returns(address);\\n    function market() external view returns(address);\\n\\n    //weight sharing\\n    function toggleVoteSharing(address _staker) external;\\n    function acceptSharedVote(address _newOwner) external;\\n    function rejectSharedVote() external;\\n    function getStakerVoteOwner(address _account) external view returns (address);\\n    function numAcceptedStakers(address _account) external view returns (uint256);\\n    function sharedBalanceOf(address _account) external view returns (uint256);\\n    function veProxy() external view returns(address);\\n\\n    //rewards\\n    function rewardData(address _token) external view returns(uint96 queued, uint80 rate, uint40 lastUpdate, uint40 finishAt);\\n    function getActiveRewardTokens() external view returns (address[] memory _rewardTokens);\\n    function rewardReceiver(address account) external view returns (address);\\n    function setRewardReceiver(address _newReceiver) external;\\n    function claim() external;\\n    function claim(address account) external;\\n    function claim(address account, address receiver) external;\\n    function getBoostRatio(address _account) external view returns (uint256);\\n    function depositReward(address _token, uint256 _amount) external;\\n    function voteOwnerBalances(address _account) external view returns(uint112 product, uint104 amount, uint40 updateAt);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFxUsd.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFxUsd{\\n\\n    function wrap(\\n        address _baseToken,\\n        uint256 _amount,\\n        address _receiver\\n      ) external;\\n\\n    function wrapFrom(\\n        address _pool,\\n        uint256 _amount,\\n        address _receiver\\n      ) external;\\n\\n    function mint(\\n        address _baseToken,\\n        uint256 _amountIn,\\n        address _receiver,\\n        uint256 _minOut\\n      ) external returns (uint256 _amountOut);\\n\\n\\n    function earn(\\n        address _pool,\\n        uint256 _amount,\\n        address _receiver\\n      ) external;\\n\\n    function mintAndEarn(\\n        address _pool,\\n        uint256 _amountIn,\\n        address _receiver,\\n        uint256 _minOut\\n      ) external returns (uint256 _amountOut);\\n\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFxFacetV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IFxFacetV2{\\n\\n    struct ConvertOutParams {\\n        address converter;\\n        uint256 minOut;\\n        uint256[] routes;\\n    }\\n\\n    function fxRebalancePoolWithdraw(address _pool, uint256 _amountIn) external payable returns (uint256 _amountOut);\\n    function fxRebalancePoolWithdrawAs(\\n        ConvertOutParams memory _params,\\n        address _pool,\\n        uint256 _amountIn\\n    ) external payable returns (uint256 _amountOut);\\n}\\n\"\r\n    },\r\n    \"/contracts/interfaces/IFeeRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IFeeRegistry{\\n    function cvxfxnIncentive() external view returns(uint256);\\n    function cvxIncentive() external view returns(uint256);\\n    function platformIncentive() external view returns(uint256);\\n    function totalFees() external view returns(uint256);\\n    function maxFees() external view returns(uint256);\\n    function feeDeposit() external view returns(address);\\n    function getFeeDepositor(address _from) external view returns(address);\\n}\"\r\n    },\r\n    \"/contracts/boosting/StakingProxyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"../interfaces/IProxyVault.sol\\\";\\nimport \\\"../interfaces/IFeeRegistry.sol\\\";\\nimport \\\"../interfaces/IFxnGauge.sol\\\";\\nimport \\\"../interfaces/IFxnTokenMinter.sol\\\";\\nimport \\\"../interfaces/IRewards.sol\\\";\\nimport \\\"../interfaces/IPoolRegistry.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/*\\nBase class for vaults\\n\\n*/\\ncontract StakingProxyBase is IProxyVault{\\n    using SafeERC20 for IERC20;\\n\\n    address public constant fxn = address(0x365AccFCa291e7D3914637ABf1F7635dB165Bb09);\\n    address public constant vefxnProxy = address(0xd11a4Ee017cA0BECA8FA45fF2abFe9C6267b7881);\\n    address public immutable feeRegistry;\\n    address public immutable poolRegistry;\\n    address public immutable fxnMinter;\\n\\n    address public owner; //owner of the vault\\n    address public gaugeAddress; //gauge contract\\n    address public stakingToken; //staking token\\n    address public rewards; //extra rewards on convex\\n    address public usingProxy; //address of proxy being used\\n    uint256 public pid;\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n\\n    constructor(address _poolRegistry, address _feeRegistry, address _fxnminter){\\n        poolRegistry = _poolRegistry;\\n        feeRegistry = _feeRegistry;\\n        fxnMinter = _fxnminter;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"!auth\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(vefxnProxy == msg.sender, \\\"!auth_admin\\\");\\n        _;\\n    }\\n\\n    //vault type\\n    function vaultType() external virtual pure returns(VaultType){\\n        return VaultType.Erc20Basic;\\n    }\\n\\n    //vault version\\n    function vaultVersion() external virtual pure returns(uint256){\\n        return 1;\\n    }\\n\\n    //initialize vault\\n    function initialize(address _owner, uint256 _pid) public virtual{\\n        require(owner == address(0),\\\"already init\\\");\\n        owner = _owner;\\n        pid = _pid;\\n\\n        //get pool info\\n        (,gaugeAddress, stakingToken, rewards,) = IPoolRegistry(poolRegistry).poolInfo(_pid);\\n    }\\n\\n    //set what veFXN proxy this vault is using\\n    function setVeFXNProxy(address _proxy) external virtual onlyAdmin{\\n        //set the vefxn proxy\\n        _setVeFXNProxy(_proxy);\\n    }\\n\\n    //set veFXN proxy the vault is using. call acceptSharedVote to start sharing vefxn proxy's boost\\n    function _setVeFXNProxy(address _proxyAddress) internal{\\n        //set proxy address on staking contract\\n        IFxnGauge(gaugeAddress).acceptSharedVote(_proxyAddress);\\n        if(_proxyAddress == vefxnProxy){\\n            //reset back to address 0 to default to convex's proxy, dont write if not needed.\\n            if(usingProxy != address(0)){\\n                usingProxy = address(0);\\n            }\\n        }else{\\n            //write non-default proxy address\\n            usingProxy = _proxyAddress;\\n        }\\n    }\\n\\n    //get rewards and earned are type specific. extend in child class\\n    function getReward() external virtual{}\\n    function getReward(bool _claim) external virtual{}\\n    function getReward(bool _claim, address[] calldata _rewardTokenList) external virtual{}\\n    function earned() external virtual returns (address[] memory token_addresses, uint256[] memory total_earned){}\\n\\n\\n    //checkpoint and add/remove weight to convex rewards contract\\n    function _checkpointRewards() internal{\\n        //if rewards are active, checkpoint\\n        address _rewards = rewards;\\n        if(IRewards(_rewards).rewardState() == IRewards.RewardState.Active){\\n            //get user balance from the gauge\\n            uint256 userLiq = IFxnGauge(gaugeAddress).balanceOf(address(this));\\n            //get current balance of reward contract\\n            uint256 bal = IRewards(_rewards).balanceOf(address(this));\\n            if(userLiq >= bal){\\n                //add the difference to reward contract\\n                IRewards(_rewards).deposit(owner, userLiq - bal);\\n            }else{\\n                //remove the difference from the reward contract\\n                IRewards(_rewards).withdraw(owner, bal - userLiq);\\n            }\\n        }\\n    }\\n\\n    //apply fees to fxn and send remaining to owner\\n    function _processFxn() internal{\\n\\n        //get fee rate from fee registry (only need to know total, let deposit contract disperse itself)\\n        uint256 totalFees = IFeeRegistry(feeRegistry).totalFees();\\n\\n        //send fxn fees to fee deposit\\n        uint256 fxnBalance = IERC20(fxn).balanceOf(address(this));\\n        uint256 sendAmount = fxnBalance * totalFees / FEE_DENOMINATOR;\\n        if(sendAmount > 0){\\n            //get deposit address for given proxy (address 0 will be handled by fee registry to return default convex proxy)\\n            IERC20(fxn).transfer(IFeeRegistry(feeRegistry).getFeeDepositor(usingProxy), sendAmount);\\n        }\\n\\n        //transfer remaining fxn to owner\\n        sendAmount = IERC20(fxn).balanceOf(address(this));\\n        if(sendAmount > 0){\\n            IERC20(fxn).transfer(owner, sendAmount);\\n        }\\n    }\\n\\n    //get extra rewards (convex side)\\n    function _processExtraRewards() internal{\\n        address _rewards = rewards;\\n        if(IRewards(_rewards).rewardState() == IRewards.RewardState.Active){\\n            //update reward balance if this is the first call since reward contract activation:\\n            //check if no balance recorded yet and set staked balance\\n            //dont use _checkpointRewards since difference of 0 will still call deposit()\\n            //as well as it will check rewardState twice\\n            uint256 bal = IRewards(_rewards).balanceOf(address(this));\\n            uint256 gaugeBalance = IFxnGauge(gaugeAddress).balanceOf(address(this));\\n            if(bal == 0 && gaugeBalance > 0){\\n                //set balance to gauge.balanceof(this)\\n                IRewards(_rewards).deposit(owner,gaugeBalance);\\n            }\\n\\n            //get the rewards\\n            IRewards(_rewards).getReward(owner);\\n        }\\n    }\\n\\n    //get extra rewards (convex side) with a filter list\\n    function _processExtraRewardsFilter(address[] calldata _tokens) internal{\\n        address _rewards = rewards;\\n        if(IRewards(_rewards).rewardState() == IRewards.RewardState.Active){\\n            //update reward balance if this is the first call since reward contract activation:\\n            //check if no balance recorded yet and set staked balance\\n            //dont use _checkpointRewards since difference of 0 will still call deposit()\\n            //as well as it will check rewardState twice\\n            uint256 bal = IRewards(_rewards).balanceOf(address(this));\\n            uint256 gaugeBalance = IFxnGauge(gaugeAddress).balanceOf(address(this));\\n            if(bal == 0 && gaugeBalance > 0){\\n                //set balance to gauge.balanceof(this)\\n                IRewards(_rewards).deposit(owner,gaugeBalance);\\n            }\\n\\n            //get the rewards\\n            IRewards(_rewards).getRewardFilter(owner,_tokens);\\n        }\\n    }\\n\\n    //transfer other reward tokens besides fxn(which needs to have fees applied)\\n    //also block gauge tokens from being transfered out\\n    function _transferTokens(address[] memory _tokens) internal{\\n        //transfer all tokens\\n        for(uint256 i = 0; i < _tokens.length; i++){\\n            //dont allow fxn (need to take fee)\\n            //dont allow gauge token transfer\\n            if(_tokens[i] != fxn && _tokens[i] != gaugeAddress){\\n                uint256 bal = IERC20(_tokens[i]).balanceOf(address(this));\\n                if(bal > 0){\\n                    IERC20(_tokens[i]).safeTransfer(owner, bal);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkExecutable(address _address) internal virtual{\\n        require(_address != fxn && _address != stakingToken && _address != rewards, \\\"!invalid target\\\");\\n    }\\n\\n    //allow arbitrary calls. some function signatures and targets are blocked\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOwner returns (bool, bytes memory) {\\n        //fully block fxn, staking token(lp etc), and rewards\\n        _checkExecutable(_to);\\n\\n        //only calls to staking(gauge) address if pool is shutdown\\n        if(_to == gaugeAddress){\\n            (, , , , uint8 shutdown) = IPoolRegistry(poolRegistry).poolInfo(pid);\\n            require(shutdown == 0,\\\"!shutdown\\\");\\n        }\\n\\n        (bool success, bytes memory result) = _to.call{value:_value}(_data);\\n        require(success, \\\"!success\\\");\\n        return (success, result);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxnminter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"depositBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFxUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"token_addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"total_earned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxnMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setVeFXNProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenList\",\"type\":\"address[]\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultType\",\"outputs\":[{\"internalType\":\"enum IProxyVault.VaultType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vefxnProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fxfacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxconverter\",\"type\":\"address\"}],\"name\":\"withdrawAsBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFxUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingProxyRebalancePool", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000db95d646012bb87ac2e6cd63eab2c42323c1f5af0000000000000000000000004f258fecc91b2ff162ca702c2bd9abf2af089611000000000000000000000000c8b194925d55d5de9555ad1db74c149329f71def", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}