{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IBalancerRateProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity =0.8.22;\\n\\ninterface IBalancerRateProvider {\\n  /**\\n   * @notice Returns the price of a unit of osToken (e.g price of osETH in ETH)\\n   * @return The price of a unit of osToken (with 18 decimals)\\n   */\\n  function getRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChainlinkAggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.22;\\n\\n/**\\n * @title IChainlinkAggregator\\n * @author Chainlink\\n * @dev Copied from https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorInterface.sol\\n * @notice Interface for Chainlink aggregator contract\\n */\\ninterface IChainlinkAggregator {\\n  /**\\n   * @notice Returns the price of a unit of osToken (e.g price of osETH in ETH)\\n   * @return The price of a unit of osToken (with 18 decimals)\\n   */\\n  function latestAnswer() external view returns (int256);\\n\\n  /**\\n   * @notice The last updated at block timestamp\\n   * @return The timestamp of the last update\\n   */\\n  function latestTimestamp() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IChainlinkV3Aggregator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.8.22;\\n\\n/**\\n * @title IChainlinkAggregator\\n * @author Chainlink\\n * @dev Copied from https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n * @notice Interface for Chainlink V3 aggregator contract\\n */\\ninterface IChainlinkV3Aggregator {\\n  /**\\n   * @notice The number of decimals the price is formatted with\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @notice The description of the aggregator\\n   */\\n  function description() external view returns (string memory);\\n\\n  /**\\n   * @notice The version number of the aggregator\\n   */\\n  function version() external view returns (uint256);\\n\\n  /**\\n   * @notice Get the data from the latest round\\n   * @return roundId The round ID\\n   * @return answer The current price\\n   * @return startedAt The timestamp of when the round started\\n   * @return updatedAt The timestamp of when the round was updated\\n   * @return answeredInRound (Deprecated) Previously used when answers could take multiple rounds to be computed\\n   */\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOsTokenVaultController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.22;\\n\\n/**\\n * @title IOsTokenVaultController\\n * @author StakeWise\\n * @notice Defines the interface for the OsTokenVaultController contract\\n */\\ninterface IOsTokenVaultController {\\n  /**\\n   * @notice Event emitted on minting shares\\n   * @param vault The address of the Vault\\n   * @param receiver The address that received the shares\\n   * @param assets The number of assets collateralized\\n   * @param shares The number of tokens the owner received\\n   */\\n  event Mint(address indexed vault, address indexed receiver, uint256 assets, uint256 shares);\\n\\n  /**\\n   * @notice Event emitted on burning shares\\n   * @param vault The address of the Vault\\n   * @param owner The address that owns the shares\\n   * @param assets The total number of assets withdrawn\\n   * @param shares The total number of shares burned\\n   */\\n  event Burn(address indexed vault, address indexed owner, uint256 assets, uint256 shares);\\n\\n  /**\\n   * @notice Event emitted on state update\\n   * @param profitAccrued The profit accrued since the last update\\n   * @param treasuryShares The number of shares minted for the treasury\\n   * @param treasuryAssets The number of assets minted for the treasury\\n   */\\n  event StateUpdated(uint256 profitAccrued, uint256 treasuryShares, uint256 treasuryAssets);\\n\\n  /**\\n   * @notice Event emitted on capacity update\\n   * @param capacity The amount after which the OsToken stops accepting deposits\\n   */\\n  event CapacityUpdated(uint256 capacity);\\n\\n  /**\\n   * @notice Event emitted on treasury address update\\n   * @param treasury The new treasury address\\n   */\\n  event TreasuryUpdated(address indexed treasury);\\n\\n  /**\\n   * @notice Event emitted on fee percent update\\n   * @param feePercent The new fee percent\\n   */\\n  event FeePercentUpdated(uint16 feePercent);\\n\\n  /**\\n   * @notice Event emitted on average reward per second update\\n   * @param avgRewardPerSecond The new average reward per second\\n   */\\n  event AvgRewardPerSecondUpdated(uint256 avgRewardPerSecond);\\n\\n  /**\\n   * @notice Event emitted on keeper address update\\n   * @param keeper The new keeper address\\n   */\\n  event KeeperUpdated(address keeper);\\n\\n  /**\\n   * @notice The OsToken capacity\\n   * @return The amount after which the OsToken stops accepting deposits\\n   */\\n  function capacity() external view returns (uint256);\\n\\n  /**\\n   * @notice The DAO treasury address that receives OsToken fees\\n   * @return The address of the treasury\\n   */\\n  function treasury() external view returns (address);\\n\\n  /**\\n   * @notice The fee percent (multiplied by 100)\\n   * @return The fee percent applied by the OsToken on the rewards\\n   */\\n  function feePercent() external view returns (uint64);\\n\\n  /**\\n   * @notice The address that can update avgRewardPerSecond\\n   * @return The address of the keeper contract\\n   */\\n  function keeper() external view returns (address);\\n\\n  /**\\n   * @notice The average reward per second used to mint OsToken rewards\\n   * @return The average reward per second earned by the Vaults\\n   */\\n  function avgRewardPerSecond() external view returns (uint256);\\n\\n  /**\\n   * @notice The fee per share used for calculating the fee for every position\\n   * @return The cumulative fee per share\\n   */\\n  function cumulativeFeePerShare() external view returns (uint256);\\n\\n  /**\\n   * @notice The total number of shares controlled by the OsToken\\n   * @return The total number of shares\\n   */\\n  function totalShares() external view returns (uint256);\\n\\n  /**\\n   * @notice Total assets controlled by the OsToken\\n   * @return The total amount of the underlying asset that is \\\"managed\\\" by OsToken\\n   */\\n  function totalAssets() external view returns (uint256);\\n\\n  /**\\n   * @notice Converts shares to assets\\n   * @param assets The amount of assets to convert to shares\\n   * @return shares The amount of shares that the OsToken would exchange for the amount of assets provided\\n   */\\n  function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n  /**\\n   * @notice Converts assets to shares\\n   * @param shares The amount of shares to convert to assets\\n   * @return assets The amount of assets that the OsToken would exchange for the amount of shares provided\\n   */\\n  function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n  /**\\n   * @notice Updates rewards and treasury fee checkpoint for the OsToken\\n   */\\n  function updateState() external;\\n\\n  /**\\n   * @notice Mint OsToken shares. Can only be called by the registered vault.\\n   * @param receiver The address that will receive the shares\\n   * @param shares The amount of shares to mint\\n   * @return assets The amount of assets minted\\n   */\\n  function mintShares(address receiver, uint256 shares) external returns (uint256 assets);\\n\\n  /**\\n   * @notice Burn shares for withdrawn assets. Can only be called by the registered vault.\\n   * @param owner The address that owns the shares\\n   * @param shares The amount of shares to burn\\n   * @return assets The amount of assets withdrawn\\n   */\\n  function burnShares(address owner, uint256 shares) external returns (uint256 assets);\\n\\n  /**\\n   * @notice Update treasury address. Can only be called by the owner.\\n   * @param _treasury The new treasury address\\n   */\\n  function setTreasury(address _treasury) external;\\n\\n  /**\\n   * @notice Update capacity. Can only be called by the owner.\\n   * @param _capacity The amount after which the OsToken stops accepting deposits\\n   */\\n  function setCapacity(uint256 _capacity) external;\\n\\n  /**\\n   * @notice Update fee percent. Can only be called by the owner. Cannot be larger than 10 000 (100%).\\n   * @param _feePercent The new fee percent\\n   */\\n  function setFeePercent(uint16 _feePercent) external;\\n\\n  /**\\n   * @notice Update keeper address. Can only be called by the owner.\\n   * @param _keeper The new keeper address\\n   */\\n  function setKeeper(address _keeper) external;\\n\\n  /**\\n   * @notice Updates average reward per second. Can only be called by the keeper.\\n   * @param _avgRewardPerSecond The new average reward per second\\n   */\\n  function setAvgRewardPerSecond(uint256 _avgRewardPerSecond) external;\\n}\\n\"\r\n    },\r\n    \"contracts/osToken/PriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.22;\\n\\nimport {IChainlinkAggregator} from '../interfaces/IChainlinkAggregator.sol';\\nimport {IChainlinkV3Aggregator} from '../interfaces/IChainlinkV3Aggregator.sol';\\nimport {IBalancerRateProvider} from '../interfaces/IBalancerRateProvider.sol';\\nimport {IOsTokenVaultController} from '../interfaces/IOsTokenVaultController.sol';\\n\\n/**\\n * @title PriceFeed\\n * @author StakeWise\\n * @notice Price feed for osToken (e.g osETH price in ETH)\\n */\\ncontract PriceFeed is IBalancerRateProvider, IChainlinkAggregator, IChainlinkV3Aggregator {\\n  error NotImplemented();\\n\\n  /// @inheritdoc IChainlinkV3Aggregator\\n  uint256 public constant override version = 0;\\n\\n  address public immutable osTokenVaultController;\\n\\n  /// @inheritdoc IChainlinkV3Aggregator\\n  string public override description;\\n\\n  /**\\n   * @dev Constructor\\n   * @param _osTokenVaultController The address of the OsTokenVaultController contract\\n   * @param _description The description of the price feed\\n   */\\n  constructor(address _osTokenVaultController, string memory _description) {\\n    osTokenVaultController = _osTokenVaultController;\\n    description = _description;\\n  }\\n\\n  /// @inheritdoc IBalancerRateProvider\\n  function getRate() public view override returns (uint256) {\\n    return IOsTokenVaultController(osTokenVaultController).convertToAssets(10 ** decimals());\\n  }\\n\\n  /// @inheritdoc IChainlinkAggregator\\n  function latestAnswer() public view override returns (int256) {\\n    uint256 value = getRate();\\n    // cannot realistically overflow, but better to check\\n    return (value > uint256(type(int256).max)) ? type(int256).max : int256(value);\\n  }\\n\\n  /// @inheritdoc IChainlinkAggregator\\n  function latestTimestamp() external view returns (uint256) {\\n    return block.timestamp;\\n  }\\n\\n  /// @inheritdoc IChainlinkV3Aggregator\\n  function decimals() public pure returns (uint8) {\\n    return 18;\\n  }\\n\\n  /// @inheritdoc IChainlinkV3Aggregator\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (0, latestAnswer(), block.timestamp, block.timestamp, 0);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_osTokenVaultController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"osTokenVaultController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PriceFeed", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002a261e60fb14586b474c208b1b7ac6d0f5000306000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000096f734554482f4554480000000000000000000000000000000000000000000000", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}