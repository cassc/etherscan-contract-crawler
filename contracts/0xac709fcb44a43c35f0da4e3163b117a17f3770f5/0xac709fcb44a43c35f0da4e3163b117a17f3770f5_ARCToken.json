{"SourceCode": "/**\r\n * Overflow aware uint math functions.\r\n *\r\n * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\r\n */\r\npragma solidity ^0.4.2;\r\n\r\ncontract SafeMath {\r\n  //internals\r\n\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function assert(bool assertion) internal {\r\n    if (!assertion) throw;\r\n  }\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n/**\r\n * ERC 20 token\r\n *\r\n * https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is Token {\r\n\r\n    /**\r\n     * Reviewed:\r\n     * - Interger overflow = OK, checked\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    uint256 public totalSupply;\r\n\r\n}\r\n\r\n\r\n/**\r\n * Arcade City crowdsale crowdsale contract.\r\n *\r\n * Security criteria evaluated against http://ethereum.stackexchange.com/questions/8551/methodological-security-review-of-a-smart-contract\r\n *\r\n *\r\n */\r\ncontract ARCToken is StandardToken, SafeMath {\r\n\r\n    string public name = \"Arcade Token\";\r\n    string public symbol = \"ARC\";\r\n    uint public decimals = 18;\r\n    uint public startBlock; //crowdsale start block (set in constructor)\r\n    uint public endBlock; //crowdsale end block (set in constructor)\r\n\r\n    // Initial multisig address (set in constructor)\r\n    // All deposited ETH will be instantly forwarded to this address.\r\n    // Address is a multisig wallet.\r\n    address public multisig = 0x0;\r\n\r\n    address public founder = 0x0;\r\n    address public developer = 0x0;\r\n    address public rewards = 0x0;\r\n    bool public rewardAddressesSet = false;\r\n\r\n    address public owner = 0x0;\r\n    bool public marketactive = false;\r\n\r\n    uint public etherCap = 672000 * 10**18; //max amount raised during crowdsale (8.5M USD worth of ether will be measured with a moving average market price at beginning of the crowdsale)\r\n    uint public rewardsAllocation = 2; //2% tokens allocated post-crowdsale for swarm rewards\r\n    uint public developerAllocation = 6 ; //6% of token supply allocated post-crowdsale for the developer fund\r\n    uint public founderAllocation = 8; //8% of token supply allocated post-crowdsale for the founder allocation\r\n    bool public allocated = false; //this will change to true when the rewards are allocated\r\n    uint public presaleTokenSupply = 0; //this will keep track of the token supply created during the crowdsale\r\n    uint public presaleEtherRaised = 0; //this will keep track of the Ether raised during the crowdsale\r\n    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\r\n    event Buy(address indexed sender, uint eth, uint fbt);\r\n\r\n    function ARCToken(address multisigInput, uint startBlockInput, uint endBlockInput) {\r\n        owner = msg.sender;\r\n        multisig = multisigInput;\r\n\r\n        startBlock = startBlockInput;\r\n        endBlock = endBlockInput;\r\n    }\r\n\r\n    function setRewardAddresses(address founderInput, address developerInput, address rewardsInput){\r\n        if (msg.sender != owner) throw;\r\n        if (rewardAddressesSet) throw;\r\n        founder = founderInput;\r\n        developer = developerInput;\r\n        rewards = rewardsInput;\r\n        rewardAddressesSet = true;\r\n    }\r\n\r\n    function price() constant returns(uint) {\r\n        return testPrice(block.number);        \r\n    }\r\n\r\n    // price() exposed for unit tests\r\n    function testPrice(uint blockNumber) constant returns(uint) {\r\n        if (blockNumber>=startBlock && blockNumber<startBlock+250) return 125; //power hour\r\n        if (blockNumber<startBlock || blockNumber>endBlock) return 75; //default price\r\n        return 75 + 4*(endBlock - blockNumber)/(endBlock - startBlock + 1)*34/4; //crowdsale price\r\n    }\r\n\r\n    /**\r\n     * Main token buy function.\r\n     *\r\n     * Security review\r\n     *\r\n     * - Integer math: ok - using SafeMath\r\n     *\r\n     * - halt flag added - ok\r\n     *\r\n     * Applicable tests:\r\n     *\r\n     * - Test halting, buying, and failing\r\n     * - Test buying on behalf of a recipient\r\n     * - Test buy\r\n     * - Test unhalting, buying, and succeeding\r\n     * - Test buying after the sale ends\r\n     *\r\n     */\r\n    function buyRecipient(address recipient) {\r\n        if (block.number<startBlock || block.number>endBlock || safeAdd(presaleEtherRaised,msg.value)>etherCap || halted) throw;\r\n        uint tokens = safeMul(msg.value, price());\r\n        balances[recipient] = safeAdd(balances[recipient], tokens);\r\n        totalSupply = safeAdd(totalSupply, tokens);\r\n        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\r\n\r\n        if (!multisig.send(msg.value)) throw; //immediately send Ether to multisig address\r\n\r\n        // if etherCap is reached - activate the market\r\n        if (presaleEtherRaised == etherCap && !marketactive){\r\n            marketactive = true;\r\n        }\r\n\r\n        Buy(recipient, msg.value, tokens);\r\n\r\n    }\r\n\r\n    /**\r\n     * Set up founder address token balance.\r\n     *\r\n     * allocateBountyAndEcosystemTokens() must be calld first.\r\n     *\r\n     * Security review\r\n     *\r\n     * - Integer math: ok - only called once with fixed parameters\r\n     *\r\n     * Applicable tests:\r\n     *\r\n     * - Test bounty and ecosystem allocation\r\n     * - Test bounty and ecosystem allocation twice\r\n     *\r\n     */\r\n    function allocateTokens() {\r\n        // make sure founder/developer/rewards addresses are configured\r\n        if(founder == 0x0 || developer == 0x0 || rewards == 0x0) throw;\r\n        // owner/founder/developer/rewards addresses can call this function\r\n        if (msg.sender != owner && msg.sender != founder && msg.sender != developer && msg.sender != rewards ) throw;\r\n        // it should only continue if endBlock has passed OR presaleEtherRaised has reached the cap\r\n        if (block.number <= endBlock && presaleEtherRaised < etherCap) throw;\r\n        if (allocated) throw;\r\n        presaleTokenSupply = totalSupply;\r\n        // total token allocations add up to 16% of total coins, so formula is reward=allocation_in_percent/84 .\r\n        balances[founder] = safeAdd(balances[founder], presaleTokenSupply * founderAllocation / 84 );\r\n        totalSupply = safeAdd(totalSupply, presaleTokenSupply * founderAllocation / 84);\r\n        \r\n        balances[developer] = safeAdd(balances[developer], presaleTokenSupply * developerAllocation / 84);\r\n        totalSupply = safeAdd(totalSupply, presaleTokenSupply * developerAllocation / 84);\r\n        \r\n        balances[rewards] = safeAdd(balances[rewards], presaleTokenSupply * rewardsAllocation / 84);\r\n        totalSupply = safeAdd(totalSupply, presaleTokenSupply * rewardsAllocation / 84);\r\n\r\n        allocated = true;\r\n\r\n    }\r\n\r\n    /**\r\n     * Emergency Stop crowdsale.\r\n     *\r\n     *  Applicable tests:\r\n     *\r\n     * - Test unhalting, buying, and succeeding\r\n     */\r\n    function halt() {\r\n        if (msg.sender!=founder && msg.sender != developer) throw;\r\n        halted = true;\r\n    }\r\n\r\n    function unhalt() {\r\n        if (msg.sender!=founder && msg.sender != developer) throw;\r\n        halted = false;\r\n    }\r\n\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until token sale is over.\r\n     *\r\n     * Applicable tests:\r\n     *\r\n     * - Test transfer after restricted period\r\n     * - Test transfer after market activated\r\n     */\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        if (block.number <= endBlock && marketactive == false) throw;\r\n        return super.transfer(_to, _value);\r\n    }\r\n    /**\r\n     * ERC 20 Standard Token interface transfer function\r\n     *\r\n     * Prevent transfers until token sale is over.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        if (block.number <= endBlock && marketactive == false) throw;\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Direct deposits buys tokens\r\n     */\r\n    function() payable {\r\n        buyRecipient(msg.sender);\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[],\"name\":\"allocateTokens\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"buyRecipient\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"testPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleEtherRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardsAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founder\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developerAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"etherCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"founderInput\",\"type\":\"address\"},{\"name\":\"developerInput\",\"type\":\"address\"},{\"name\":\"rewardsInput\",\"type\":\"address\"}],\"name\":\"setRewardAddresses\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"founderAllocation\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"presaleTokenSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketactive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardAddressesSet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[{\"name\":\"multisigInput\",\"type\":\"address\"},{\"name\":\"startBlockInput\",\"type\":\"uint256\"},{\"name\":\"endBlockInput\",\"type\":\"uint256\"}],\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"fbt\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "ARCToken", "CompilerVersion": "v0.4.3-nightly.2016.10.24+commit.84b43b91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d9d0bd75319a3780d3cab012759efbae334291b000000000000000000000000000000000000000000000000000000000026e0d30000000000000000000000000000000000000000000000000000000000297187", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}