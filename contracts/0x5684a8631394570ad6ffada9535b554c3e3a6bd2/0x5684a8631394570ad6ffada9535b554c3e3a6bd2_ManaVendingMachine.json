{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ManaVendingMachine.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ManaVendingMachine is Ownable {\\n    /**\\n     * @notice Vault address.\\n     * @notice This address will receive all the funds after withdrawal.\\n     */\\n    address payable public vaultAddress;\\n\\n    /**\\n     * @notice Contract balance.\\n     * @notice This contract will hold funds after mana purchase until withdrawal.\\n     */\\n    uint256 public contractBalance;\\n\\n    /**\\n     * @notice Mana balances.\\n     * @notice This mapping stores the mana balance of each address.\\n     */\\n    mapping(address => uint256) public manaBalances;\\n\\n    /**\\n     * @notice Package struct.\\n     * @notice This struct defines the mana quantity and price of a package.\\n     */\\n    struct Package {\\n        uint256 manaQty;\\n        uint256 price;\\n    }\\n\\n    /**\\n     * @notice Define maximum integer value.\\n     */\\n    uint256 MAX_INT = type(uint256).max;\\n\\n    /**\\n     * @notice Number of packages.\\n     * @notice This number should be the same as the length of the packages array.\\n     */\\n    uint8 public pkgQty = 3;\\n    Package[] public packages;\\n\\n    /**\\n     * @dev Event for purchase packages.\\n     * @param buyer address The address of the buyer.\\n     * @param quantities uint256[] The quantity of each package purchased.\\n     * @param totalEth uint256 The total eth spent.\\n     * @param totalMana uint256 The total mana purchased.\\n     */\\n    event PurchasePackages(\\n        address buyer,\\n        uint256[] quantities,\\n        uint256 totalEth,\\n        uint256 totalMana\\n    );\\n\\n    /**\\n     * @dev Constructor function.\\n     */\\n    constructor() {\\n        // Set the owner and vaultAddress as the contract creator\\n        vaultAddress = payable(msg.sender);\\n\\n        for (uint8 i = 0; i < pkgQty; i++) {\\n            packages.push(Package(0, MAX_INT));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the vault address.\\n     * @param _vaultAdress address The address of the vault.\\n     */\\n    function setVaultAddress(address _vaultAdress) external onlyOwner {\\n        vaultAddress = payable(_vaultAdress);\\n    }\\n\\n    /**\\n     * @dev Get the number of packages defined in contract.\\n     * @return uint8 The number of packages.\\n     */\\n    function getPkgQty() public view returns (uint8) {\\n        return pkgQty;\\n    }\\n\\n    /**\\n     * @dev Get the mana balance of an address.\\n     * @param _address address The address to check.\\n     * @return uint The mana balance.\\n     */\\n    function getManaBalance(address _address) public view returns (uint) {\\n        return manaBalances[_address];\\n    }\\n\\n    /**\\n     * @dev Get the packages list.\\n     * @return Package[] The list of packages.\\n     */\\n    function getPackages() public view returns (Package[] memory) {\\n        return packages;\\n    }\\n\\n    /**\\n     * @dev Get a package from its id.\\n     * @param pkgId uint8 The id of the package.\\n     * @return Package The package.\\n     */\\n    function getPackageFromId(\\n        uint8 pkgId\\n    ) public view returns (Package memory) {\\n        // Id should be in the size of the packages array\\n        require(\\n            pkgId < packages.length,\\n            \\\"The pkgId must be in the size of the packages array\\\"\\n        );\\n\\n        return packages[pkgId];\\n    }\\n\\n    /**\\n     * @dev Set the packages.\\n     * @param _manaQty uint256[] The quantity of mana of each package.\\n     * @param _prices uint256[] The price of each package.\\n     */\\n    function setPackages(\\n        uint256[] calldata _manaQty,\\n        uint256[] calldata _prices\\n    ) external onlyOwner {\\n        // Arrays should be the same length\\n        require(\\n            _manaQty.length == _prices.length,\\n            \\\"Mana quantity and prices arrays must have the same length\\\"\\n        );\\n\\n        // Arrays should be the same size as pkgQty (packages quantity)\\n        require(\\n            _manaQty.length == pkgQty,\\n            \\\"Mana quantity and prices arrays must be same length as pkgQty\\\"\\n        );\\n\\n        // Loop through the arrays and create the packages\\n        for (uint8 i = 0; i < _manaQty.length; i++) {\\n            packages[i] = Package(_manaQty[i], _prices[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Purchase packages.\\n     * @param _qty uint256[] The quantity of each package to purchase.\\n     */\\n    function purchasePackages(uint256[] memory _qty) public payable {\\n        // Array should be the same length as the number of packages\\n        require(\\n            _qty.length == packages.length,\\n            \\\"The length of the array is not the same as the number of packages\\\"\\n        );\\n\\n        // Loop through the array to calculate the total price\\n        uint256 totalEth = 0;\\n        uint256 totalMana = 0;\\n        for (uint8 i = 0; i < _qty.length; i++) {\\n            totalEth += packages[i].price * _qty[i];\\n            totalMana += packages[i].manaQty * _qty[i];\\n        }\\n\\n        // Check if the value sent is enough\\n        require(msg.value == totalEth, \\\"Value sent is not exact\\\");\\n\\n        // Add the mana to the user's balance\\n        manaBalances[msg.sender] += totalMana;\\n\\n        // Save the value to the contract balance\\n        contractBalance += totalEth;\\n\\n        // Emit the event\\n        emit PurchasePackages(msg.sender, _qty, totalEth, totalMana);\\n    }\\n\\n    /**\\n     * @dev Withdraw funds to the vault using call.\\n     * @param _amount uint256 The amount to withdraw.\\n     */\\n    function withdraw(uint256 _amount) external onlyOwner {\\n        require(_amount <= contractBalance, \\\"Insufficient contract balance\\\");\\n        contractBalance -= _amount;\\n\\n        (bool success, ) = vaultAddress.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Withdraw was not successful\\\");\\n    }\\n\\n    /**\\n     * @dev Withdraw all the funds to the vaultAdress using call.\\n     */\\n    function withdrawAll() external onlyOwner {\\n        uint256 _amount = contractBalance;\\n        contractBalance = 0;\\n\\n        (bool success, ) = vaultAddress.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Withdraw all was not successful\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMana\",\"type\":\"uint256\"}],\"name\":\"PurchasePackages\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getManaBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"pkgId\",\"type\":\"uint8\"}],\"name\":\"getPackageFromId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"manaQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ManaVendingMachine.Package\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPackages\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"manaQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ManaVendingMachine.Package[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPkgQty\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manaBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"manaQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pkgQty\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_qty\",\"type\":\"uint256[]\"}],\"name\":\"purchasePackages\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_manaQty\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"setPackages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAdress\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ManaVendingMachine", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}