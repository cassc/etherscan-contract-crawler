{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/AaveTokenV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BaseAaveTokenV2} from './BaseAaveTokenV2.sol';\\nimport {BaseDelegation} from './BaseDelegation.sol';\\n\\ncontract AaveTokenV3 is BaseAaveTokenV2, BaseDelegation {\\n  /**\\n   * @dev initializes the contract upon assignment to the InitializableAdminUpgradeabilityProxy\\n   */\\n  function initialize() external virtual initializer {}\\n\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 fromBalanceBefore,\\n    uint256 toBalanceBefore,\\n    uint256 amount\\n  ) internal override {\\n    _delegationChangeOnTransfer(from, to, fromBalanceBefore, toBalanceBefore, amount);\\n  }\\n\\n  function _getDelegationState(address user)\\n    internal\\n    view\\n    override\\n    returns (DelegationState memory)\\n  {\\n    DelegationAwareBalance memory userState = _balances[user];\\n    return\\n      DelegationState({\\n        delegatedPropositionBalance: userState.delegatedPropositionBalance,\\n        delegatedVotingBalance: userState.delegatedVotingBalance,\\n        delegationMode: userState.delegationMode\\n      });\\n  }\\n\\n  function _getBalance(address user) internal view override returns (uint256) {\\n    return _balances[user].balance;\\n  }\\n\\n  function _setDelegationState(address user, DelegationState memory delegationState)\\n    internal\\n    override\\n  {\\n    DelegationAwareBalance storage userState = _balances[user];\\n    userState.delegatedPropositionBalance = delegationState.delegatedPropositionBalance;\\n    userState.delegatedVotingBalance = delegationState.delegatedVotingBalance;\\n    userState.delegationMode = delegationState.delegationMode;\\n  }\\n\\n  function _incrementNonces(address user) internal override returns (uint256) {\\n    unchecked {\\n      // Does not make sense to check because it's not realistic to reach uint256.max in nonce\\n      return _nonces[user]++;\\n    }\\n  }\\n\\n  function _getDomainSeparator() internal view override returns (bytes32) {\\n    return DOMAIN_SEPARATOR();\\n  }\\n}\\n\"\r\n    },\r\n    \"src/BaseAaveTokenV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ECDSA} from 'openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol';\\n\\nimport {VersionedInitializable} from './utils/VersionedInitializable.sol';\\nimport {EIP712} from './utils/EIP712.sol';\\nimport {BaseAaveToken} from './BaseAaveToken.sol';\\n\\nabstract contract BaseAaveTokenV2 is BaseAaveToken, VersionedInitializable, EIP712 {\\n  /// @dev owner => next valid nonce to submit with permit()\\n  mapping(address => uint256) public _nonces;\\n\\n  ///////// @dev DEPRECATED from AaveToken v1  //////////////////////////\\n  //////// kept for backwards compatibility with old storage layout ////\\n  uint256[3] private ______DEPRECATED_FROM_AAVE_V1;\\n  ///////// @dev END OF DEPRECATED from AaveToken v1  //////////////////////////\\n\\n  // deprecated in favor to OZ EIP712\\n  bytes32 private __DEPRECATED_DOMAIN_SEPARATOR;\\n\\n  ///////// @dev DEPRECATED from AaveToken v2  //////////////////////////\\n  //////// kept for backwards compatibility with old storage layout ////\\n  uint256[4] private ______DEPRECATED_FROM_AAVE_V2;\\n  ///////// @dev END OF DEPRECATED from AaveToken v2  //////////////////////////\\n\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  uint256 public constant REVISION = 4;\\n\\n  constructor() EIP712('Aave token V3', '2') {}\\n\\n  function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner the owner of the funds\\n   * @param spender the spender\\n   * @param value the amount\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(owner != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    uint256 currentValidNonce = _nonces[owner];\\n    bytes32 digest = _hashTypedDataV4(\\n      keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\\n    );\\n\\n    require(owner == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    unchecked {\\n      // does not make sense to check because it's not realistic to reach uint256.max in nonce\\n      _nonces[owner] = currentValidNonce + 1;\\n    }\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @dev returns the revision of the implementation contract\\n   */\\n  function getRevision() internal pure override returns (uint256) {\\n    return REVISION;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/BaseDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ECDSA} from 'openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol';\\n\\nimport {SafeCast72} from './utils/SafeCast72.sol';\\nimport {IGovernancePowerDelegationToken} from './interfaces/IGovernancePowerDelegationToken.sol';\\nimport {DelegationMode} from './DelegationAwareBalance.sol';\\n\\n/**\\n * @notice The contract implements generic delegation functionality for the upcoming governance v3\\n * @author BGD Labs\\n * @dev to make it's pluggable to any exising token it has a set of virtual functions\\n *   for simple access to balances and permit functionality\\n * @dev ************ IMPORTANT SECURITY CONSIDERATION ************\\n *   current version of the token can be used only with asset which has 18 decimals\\n *   and possible totalSupply lower then 4722366482869645213696,\\n *   otherwise at least POWER_SCALE_FACTOR should be adjusted !!!\\n *   *************************************************************\\n */\\nabstract contract BaseDelegation is IGovernancePowerDelegationToken {\\n  struct DelegationState {\\n    uint72 delegatedPropositionBalance;\\n    uint72 delegatedVotingBalance;\\n    DelegationMode delegationMode;\\n  }\\n\\n  mapping(address => address) internal _votingDelegatee;\\n  mapping(address => address) internal _propositionDelegatee;\\n\\n  /** @dev we assume that for the governance system delegation with 18 decimals of precision is not needed,\\n   *   by this constant we reduce it by 10, to 8 decimals.\\n   *   In case of Aave token this will allow to work with up to 47'223'664'828'696,45213696 total supply\\n   *   If your token already have less then 10 decimals, please change it to appropriate.\\n   */\\n  uint256 public constant POWER_SCALE_FACTOR = 1e10;\\n\\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH =\\n    keccak256(\\n      'DelegateByType(address delegator,address delegatee,uint8 delegationType,uint256 nonce,uint256 deadline)'\\n    );\\n  bytes32 public constant DELEGATE_TYPEHASH =\\n    keccak256('Delegate(address delegator,address delegatee,uint256 nonce,uint256 deadline)');\\n\\n  /**\\n   * @notice returns eip-2612 compatible domain separator\\n   * @dev we expect that existing tokens, ie Aave, already have, so we want to reuse\\n   * @return domain separator\\n   */\\n  function _getDomainSeparator() internal view virtual returns (bytes32);\\n\\n  /**\\n   * @notice gets the delegation state of a user\\n   * @param user address\\n   * @return state of a user's delegation\\n   */\\n  function _getDelegationState(address user) internal view virtual returns (DelegationState memory);\\n\\n  /**\\n   * @notice returns the token balance of a user\\n   * @param user address\\n   * @return current nonce before increase\\n   */\\n  function _getBalance(address user) internal view virtual returns (uint256);\\n\\n  /**\\n   * @notice increases and return the current nonce of a user\\n   * @dev should use `return nonce++;` pattern\\n   * @param user address\\n   * @return current nonce before increase\\n   */\\n  function _incrementNonces(address user) internal virtual returns (uint256);\\n\\n  /**\\n   * @notice sets the delegation state of a user\\n   * @param user address\\n   * @param delegationState state of a user's delegation\\n   */\\n  function _setDelegationState(address user, DelegationState memory delegationState)\\n    internal\\n    virtual;\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function delegateByType(address delegatee, GovernancePowerType delegationType)\\n    external\\n    virtual\\n    override\\n  {\\n    _delegateByType(msg.sender, delegatee, delegationType);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function delegate(address delegatee) external override {\\n    _delegateByType(msg.sender, delegatee, GovernancePowerType.VOTING);\\n    _delegateByType(msg.sender, delegatee, GovernancePowerType.PROPOSITION);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getDelegateeByType(address delegator, GovernancePowerType delegationType)\\n    external\\n    view\\n    override\\n    returns (address)\\n  {\\n    return _getDelegateeByType(delegator, _getDelegationState(delegator), delegationType);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getDelegates(address delegator) external view override returns (address, address) {\\n    DelegationState memory delegatorBalance = _getDelegationState(delegator);\\n    return (\\n      _getDelegateeByType(delegator, delegatorBalance, GovernancePowerType.VOTING),\\n      _getDelegateeByType(delegator, delegatorBalance, GovernancePowerType.PROPOSITION)\\n    );\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getPowerCurrent(address user, GovernancePowerType delegationType)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    DelegationState memory userState = _getDelegationState(user);\\n    uint256 userOwnPower = uint8(userState.delegationMode) & (uint8(delegationType) + 1) == 0\\n      ? _getBalance(user)\\n      : 0;\\n    uint256 userDelegatedPower = _getDelegatedPowerByType(userState, delegationType);\\n    return userOwnPower + userDelegatedPower;\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function getPowersCurrent(address user) external view override returns (uint256, uint256) {\\n    return (\\n      getPowerCurrent(user, GovernancePowerType.VOTING),\\n      getPowerCurrent(user, GovernancePowerType.PROPOSITION)\\n    );\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function metaDelegateByType(\\n    address delegator,\\n    address delegatee,\\n    GovernancePowerType delegationType,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(delegator != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    bytes32 digest = ECDSA.toTypedDataHash(\\n      _getDomainSeparator(),\\n      keccak256(\\n        abi.encode(\\n          DELEGATE_BY_TYPE_TYPEHASH,\\n          delegator,\\n          delegatee,\\n          delegationType,\\n          _incrementNonces(delegator),\\n          deadline\\n        )\\n      )\\n    );\\n\\n    require(delegator == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _delegateByType(delegator, delegatee, delegationType);\\n  }\\n\\n  /// @inheritdoc IGovernancePowerDelegationToken\\n  function metaDelegate(\\n    address delegator,\\n    address delegatee,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override {\\n    require(delegator != address(0), 'INVALID_OWNER');\\n    //solium-disable-next-line\\n    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');\\n    bytes32 digest = ECDSA.toTypedDataHash(\\n      _getDomainSeparator(),\\n      keccak256(\\n        abi.encode(DELEGATE_TYPEHASH, delegator, delegatee, _incrementNonces(delegator), deadline)\\n      )\\n    );\\n\\n    require(delegator == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');\\n    _delegateByType(delegator, delegatee, GovernancePowerType.VOTING);\\n    _delegateByType(delegator, delegatee, GovernancePowerType.PROPOSITION);\\n  }\\n\\n  /**\\n   * @dev Modifies the delegated power of a `delegatee` account by type (VOTING, PROPOSITION).\\n   * Passing the impact on the delegation of `delegatee` account before and after to reduce conditionals and not lose\\n   * any precision.\\n   * @param impactOnDelegationBefore how much impact a balance of another account had over the delegation of a `delegatee`\\n   * before an action.\\n   * For example, if the action is a delegation from one account to another, the impact before the action will be 0.\\n   * @param impactOnDelegationAfter how much impact a balance of another account will have  over the delegation of a `delegatee`\\n   * after an action.\\n   * For example, if the action is a delegation from one account to another, the impact after the action will be the whole balance\\n   * of the account changing the delegatee.\\n   * @param delegatee the user whom delegated governance power will be changed\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   **/\\n  function _governancePowerTransferByType(\\n    uint256 impactOnDelegationBefore,\\n    uint256 impactOnDelegationAfter,\\n    address delegatee,\\n    GovernancePowerType delegationType\\n  ) internal {\\n    if (delegatee == address(0)) return;\\n    if (impactOnDelegationBefore == impactOnDelegationAfter) return;\\n\\n    // we use uint72, because this is the most optimal for AaveTokenV3\\n    // To make delegated balance fit into uint72 we're decreasing precision of delegated balance by POWER_SCALE_FACTOR\\n    uint72 impactOnDelegationBefore72 = SafeCast72.toUint72(\\n      impactOnDelegationBefore / POWER_SCALE_FACTOR\\n    );\\n    uint72 impactOnDelegationAfter72 = SafeCast72.toUint72(\\n      impactOnDelegationAfter / POWER_SCALE_FACTOR\\n    );\\n\\n    DelegationState memory delegateeState = _getDelegationState(delegatee);\\n    if (delegationType == GovernancePowerType.VOTING) {\\n      delegateeState.delegatedVotingBalance =\\n        delegateeState.delegatedVotingBalance -\\n        impactOnDelegationBefore72 +\\n        impactOnDelegationAfter72;\\n    } else {\\n      delegateeState.delegatedPropositionBalance =\\n        delegateeState.delegatedPropositionBalance -\\n        impactOnDelegationBefore72 +\\n        impactOnDelegationAfter72;\\n    }\\n    _setDelegationState(delegatee, delegateeState);\\n  }\\n\\n  /**\\n   * @dev performs all state changes related delegation changes on transfer\\n   * @param from token sender\\n   * @param to token recipient\\n   * @param fromBalanceBefore balance of the sender before transfer\\n   * @param toBalanceBefore balance of the recipient before transfer\\n   * @param amount amount of tokens sent\\n   **/\\n  function _delegationChangeOnTransfer(\\n    address from,\\n    address to,\\n    uint256 fromBalanceBefore,\\n    uint256 toBalanceBefore,\\n    uint256 amount\\n  ) internal {\\n    if (from == to) {\\n      return;\\n    }\\n\\n    if (from != address(0)) {\\n      DelegationState memory fromUserState = _getDelegationState(from);\\n      uint256 fromBalanceAfter = fromBalanceBefore - amount;\\n      if (fromUserState.delegationMode != DelegationMode.NO_DELEGATION) {\\n        _governancePowerTransferByType(\\n          fromBalanceBefore,\\n          fromBalanceAfter,\\n          _getDelegateeByType(from, fromUserState, GovernancePowerType.VOTING),\\n          GovernancePowerType.VOTING\\n        );\\n        _governancePowerTransferByType(\\n          fromBalanceBefore,\\n          fromBalanceAfter,\\n          _getDelegateeByType(from, fromUserState, GovernancePowerType.PROPOSITION),\\n          GovernancePowerType.PROPOSITION\\n        );\\n      }\\n    }\\n\\n    if (to != address(0)) {\\n      DelegationState memory toUserState = _getDelegationState(to);\\n      uint256 toBalanceAfter = toBalanceBefore + amount;\\n\\n      if (toUserState.delegationMode != DelegationMode.NO_DELEGATION) {\\n        _governancePowerTransferByType(\\n          toBalanceBefore,\\n          toBalanceAfter,\\n          _getDelegateeByType(to, toUserState, GovernancePowerType.VOTING),\\n          GovernancePowerType.VOTING\\n        );\\n        _governancePowerTransferByType(\\n          toBalanceBefore,\\n          toBalanceAfter,\\n          _getDelegateeByType(to, toUserState, GovernancePowerType.PROPOSITION),\\n          GovernancePowerType.PROPOSITION\\n        );\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Extracts from state and returns delegated governance power (Voting, Proposition)\\n   * @param userState the current state of a user\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   **/\\n  function _getDelegatedPowerByType(\\n    DelegationState memory userState,\\n    GovernancePowerType delegationType\\n  ) internal pure returns (uint256) {\\n    return\\n      POWER_SCALE_FACTOR *\\n      (\\n        delegationType == GovernancePowerType.VOTING\\n          ? userState.delegatedVotingBalance\\n          : userState.delegatedPropositionBalance\\n      );\\n  }\\n\\n  /**\\n   * @dev Extracts from state and returns the delegatee of a delegator by type of governance power (Voting, Proposition)\\n   * - If the delegator doesn't have any delegatee, returns address(0)\\n   * @param delegator delegator\\n   * @param userState the current state of a user\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   **/\\n  function _getDelegateeByType(\\n    address delegator,\\n    DelegationState memory userState,\\n    GovernancePowerType delegationType\\n  ) internal view returns (address) {\\n    if (delegationType == GovernancePowerType.VOTING) {\\n      return\\n        /// With the & operation, we cover both VOTING_DELEGATED delegation and FULL_POWER_DELEGATED\\n        /// as VOTING_DELEGATED is equivalent to 01 in binary and FULL_POWER_DELEGATED is equivalent to 11\\n        (uint8(userState.delegationMode) & uint8(DelegationMode.VOTING_DELEGATED)) != 0\\n          ? _votingDelegatee[delegator]\\n          : address(0);\\n    }\\n    return\\n      userState.delegationMode >= DelegationMode.PROPOSITION_DELEGATED\\n        ? _propositionDelegatee[delegator]\\n        : address(0);\\n  }\\n\\n  /**\\n   * @dev Changes user's delegatee address by type of governance power (Voting, Proposition)\\n   * @param delegator delegator\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   * @param _newDelegatee the new delegatee\\n   **/\\n  function _updateDelegateeByType(\\n    address delegator,\\n    GovernancePowerType delegationType,\\n    address _newDelegatee\\n  ) internal {\\n    address newDelegatee = _newDelegatee == delegator ? address(0) : _newDelegatee;\\n    if (delegationType == GovernancePowerType.VOTING) {\\n      _votingDelegatee[delegator] = newDelegatee;\\n    } else {\\n      _propositionDelegatee[delegator] = newDelegatee;\\n    }\\n  }\\n\\n  /**\\n   * @dev Updates the specific flag which signaling about existence of delegation of governance power (Voting, Proposition)\\n   * @param userState a user state to change\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   * @param willDelegate next state of delegation\\n   **/\\n  function _updateDelegationModeByType(\\n    DelegationState memory userState,\\n    GovernancePowerType delegationType,\\n    bool willDelegate\\n  ) internal pure returns (DelegationState memory) {\\n    if (willDelegate) {\\n      // Because GovernancePowerType starts from 0, we should add 1 first, then we apply bitwise OR\\n      userState.delegationMode = DelegationMode(\\n        uint8(userState.delegationMode) | (uint8(delegationType) + 1)\\n      );\\n    } else {\\n      // First bitwise NEGATION, ie was 01, after XOR with 11 will be 10,\\n      // then bitwise AND, which means it will keep only another delegation type if it exists\\n      userState.delegationMode = DelegationMode(\\n        uint8(userState.delegationMode) &\\n          ((uint8(delegationType) + 1) ^ uint8(DelegationMode.FULL_POWER_DELEGATED))\\n      );\\n    }\\n    return userState;\\n  }\\n\\n  /**\\n   * @dev This is the equivalent of an ERC20 transfer(), but for a power type: an atomic transfer of a balance (power).\\n   * When needed, it decreases the power of the `delegator` and when needed, it increases the power of the `delegatee`\\n   * @param delegator delegator\\n   * @param _delegatee the user which delegated power will change\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  function _delegateByType(\\n    address delegator,\\n    address _delegatee,\\n    GovernancePowerType delegationType\\n  ) internal {\\n    // Here we unify the property that delegating power to address(0) == delegating power to yourself == no delegation\\n    // So from now on, not being delegating is (exclusively) that delegatee == address(0)\\n    address delegatee = _delegatee == delegator ? address(0) : _delegatee;\\n\\n    // We read the whole struct before validating delegatee, because in the optimistic case\\n    // (_delegatee != currentDelegatee) we will reuse userState in the rest of the function\\n    DelegationState memory delegatorState = _getDelegationState(delegator);\\n    address currentDelegatee = _getDelegateeByType(delegator, delegatorState, delegationType);\\n    if (delegatee == currentDelegatee) return;\\n\\n    bool delegatingNow = currentDelegatee != address(0);\\n    bool willDelegateAfter = delegatee != address(0);\\n    uint256 delegatorBalance = _getBalance(delegator);\\n\\n    if (delegatingNow) {\\n      _governancePowerTransferByType(delegatorBalance, 0, currentDelegatee, delegationType);\\n    }\\n\\n    if (willDelegateAfter) {\\n      _governancePowerTransferByType(0, delegatorBalance, delegatee, delegationType);\\n    }\\n\\n    _updateDelegateeByType(delegator, delegationType, delegatee);\\n\\n    if (willDelegateAfter != delegatingNow) {\\n      _setDelegationState(\\n        delegator,\\n        _updateDelegationModeByType(delegatorState, delegationType, willDelegateAfter)\\n      );\\n    }\\n\\n    emit DelegateChanged(delegator, delegatee, delegationType);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 internal lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');\\n\\n    lastInitializedRevision = revision;\\n\\n    _;\\n  }\\n\\n  /// @dev returns the revision number of the contract.\\n  /// Needs to be defined in the inherited class as a constant.\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"src/utils/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Contract modified from OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol) to remove local\\n// fallback storage variables, so contract does not affect on existing storage layout. This works as its used on contracts\\n// that have name and revision < 32 bytes\\n\\npragma solidity ^0.8.10;\\n\\nimport {ECDSA} from 'openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol';\\nimport {ShortStrings, ShortString} from 'openzeppelin-contracts/contracts/utils/ShortStrings.sol';\\nimport {IERC5267} from 'openzeppelin-contracts/contracts/interfaces/IERC5267.sol';\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n  using ShortStrings for *;\\n\\n  bytes32 private constant _TYPE_HASH =\\n    keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n\\n  // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n  // invalidate the cached domain separator if the chain id changes.\\n  bytes32 private immutable _cachedDomainSeparator;\\n  uint256 private immutable _cachedChainId;\\n  address private immutable _cachedThis;\\n\\n  bytes32 private immutable _hashedName;\\n  bytes32 private immutable _hashedVersion;\\n\\n  ShortString private immutable _name;\\n  ShortString private immutable _version;\\n\\n  /**\\n   * @dev Initializes the domain separator and parameter caches.\\n   *\\n   * The meaning of `name` and `version` is specified in\\n   * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n   *\\n   * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n   * - `version`: the current major version of the signing domain.\\n   *\\n   * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n   * contract upgrade].\\n   */\\n  /// @dev BGD: removed usage of fallback variables to not modify previous storage layout. As we know that the length of\\n  ///           name and version will not be bigger than 32 bytes we use toShortString as there is no need to use the fallback system.\\n  constructor(string memory name, string memory version) {\\n    _name = name.toShortString();\\n    _version = version.toShortString();\\n    _hashedName = keccak256(bytes(name));\\n    _hashedVersion = keccak256(bytes(version));\\n\\n    _cachedChainId = block.chainid;\\n    _cachedDomainSeparator = _buildDomainSeparator();\\n    _cachedThis = address(this);\\n  }\\n\\n  /**\\n   * @dev Returns the domain separator for the current chain.\\n   */\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n      return _cachedDomainSeparator;\\n    } else {\\n      return _buildDomainSeparator();\\n    }\\n  }\\n\\n  function _buildDomainSeparator() private view returns (bytes32) {\\n    return\\n      keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n  }\\n\\n  /**\\n   * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n   * function returns the hash of the fully encoded EIP712 message for this domain.\\n   *\\n   * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n   *\\n   * ```solidity\\n   * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n   *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n   *     mailTo,\\n   *     keccak256(bytes(mailContents))\\n   * )));\\n   * address signer = ECDSA.recover(digest, signature);\\n   * ```\\n   */\\n  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n    return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n  }\\n\\n  /**\\n   * @dev See {EIP-5267}.\\n   *\\n   * _Available since v4.9._\\n   */\\n  function eip712Domain()\\n    public\\n    view\\n    virtual\\n    returns (\\n      bytes1 fields,\\n      string memory name,\\n      string memory version,\\n      uint256 chainId,\\n      address verifyingContract,\\n      bytes32 salt,\\n      uint256[] memory extensions\\n    )\\n  {\\n    return (\\n      hex'0f', // 01111\\n      _EIP712Name(),\\n      _EIP712Version(),\\n      block.chainid,\\n      address(this),\\n      bytes32(0),\\n      new uint256[](0)\\n    );\\n  }\\n\\n  /**\\n   * @dev The name parameter for the EIP712 domain.\\n   *\\n   * NOTE: By default this function reads _name which is an immutable value.\\n   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n   *\\n   * _Available since v5.0._\\n   */\\n  /// @dev BGD: we use toString instead of toStringWithFallback as we dont have fallback, to not modify previous storage layout\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _EIP712Name() internal view returns (string memory) {\\n    return _name.toString(); // _name.toStringWithFallback(_nameFallback);\\n  }\\n\\n  /**\\n   * @dev The version parameter for the EIP712 domain.\\n   *\\n   * NOTE: By default this function reads _version which is an immutable value.\\n   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n   *\\n   * _Available since v5.0._\\n   */\\n  /// @dev BGD: we use toString instead of toStringWithFallback as we dont have fallback, to not modify previous storage layout\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _EIP712Version() internal view returns (string memory) {\\n    return _version.toString();\\n  }\\n}\\n\"\r\n    },\r\n    \"src/BaseAaveToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Context} from 'openzeppelin-contracts/contracts/utils/Context.sol';\\nimport {IERC20} from 'openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\nimport {IERC20Metadata} from 'openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport {DelegationMode} from './DelegationAwareBalance.sol';\\n\\n// Inspired by OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\nabstract contract BaseAaveToken is Context, IERC20Metadata {\\n  struct DelegationAwareBalance {\\n    uint104 balance;\\n    uint72 delegatedPropositionBalance;\\n    uint72 delegatedVotingBalance;\\n    DelegationMode delegationMode;\\n  }\\n\\n  mapping(address => DelegationAwareBalance) internal _balances;\\n\\n  mapping(address => mapping(address => uint256)) internal _allowances;\\n\\n  uint256 internal _totalSupply;\\n\\n  string internal _name;\\n  string internal _symbol;\\n\\n  // @dev DEPRECATED\\n  // kept for backwards compatibility with old storage layout\\n  uint8 private ______DEPRECATED_OLD_ERC20_DECIMALS;\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account].balance;\\n  }\\n\\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _transfer(owner, to, amount);\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) public virtual override returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, amount);\\n    _transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n  {\\n    address owner = _msgSender();\\n    uint256 currentAllowance = _allowances[owner][spender];\\n    require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual {\\n    require(from != address(0), 'ERC20: transfer from the zero address');\\n    require(to != address(0), 'ERC20: transfer to the zero address');\\n\\n    if (from != to) {\\n      uint104 fromBalanceBefore = _balances[from].balance;\\n      uint104 toBalanceBefore = _balances[to].balance;\\n\\n      require(fromBalanceBefore >= amount, 'ERC20: transfer amount exceeds balance');\\n      unchecked {\\n        _balances[from].balance = fromBalanceBefore - uint104(amount);\\n      }\\n\\n      _balances[to].balance = toBalanceBefore + uint104(amount);\\n\\n      _afterTokenTransfer(from, to, fromBalanceBefore, toBalanceBefore, amount);\\n    }\\n    emit Transfer(from, to, amount);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  function _spendAllowance(\\n    address owner,\\n    address spender,\\n    uint256 amount\\n  ) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      require(currentAllowance >= amount, 'ERC20: insufficient allowance');\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev after token transfer hook, added for delegation system\\n   * @param from token sender\\n   * @param to token recipient\\n   * @param fromBalanceBefore balance of the sender before transfer\\n   * @param toBalanceBefore balance of the recipient before transfer\\n   * @param amount amount of tokens sent\\n   **/\\n  function _afterTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 fromBalanceBefore,\\n    uint256 toBalanceBefore,\\n    uint256 amount\\n  ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/utils/SafeCast72.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** @notice influenced by OpenZeppelin SafeCast lib, which is missing to uint72 cast\\n * @author BGD Labs\\n */\\nlibrary SafeCast72 {\\n  /**\\n   * @dev Returns the downcasted uint72 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint72).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 72 bits\\n   */\\n  function toUint72(uint256 value) internal pure returns (uint72) {\\n    require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    return uint72(value);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGovernancePowerDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernancePowerDelegationToken {\\n  enum GovernancePowerType {\\n    VOTING,\\n    PROPOSITION\\n  }\\n\\n  /**\\n   * @dev emitted when a user delegates to another\\n   * @param delegator the user which delegated governance power\\n   * @param delegatee the delegatee\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  event DelegateChanged(\\n    address indexed delegator,\\n    address indexed delegatee,\\n    GovernancePowerType delegationType\\n  );\\n\\n  // @dev we removed DelegatedPowerChanged event because to reconstruct the full state of the system,\\n  // is enough to have Transfer and DelegateChanged TODO: document it\\n\\n  /**\\n   * @dev delegates the specific power to a delegatee\\n   * @param delegatee the user which delegated power will change\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   **/\\n  function delegateByType(address delegatee, GovernancePowerType delegationType) external;\\n\\n  /**\\n   * @dev delegates all the governance powers to a specific user\\n   * @param delegatee the user to which the powers will be delegated\\n   **/\\n  function delegate(address delegatee) external;\\n\\n  /**\\n   * @dev returns the delegatee of an user\\n   * @param delegator the address of the delegator\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   * @return address of the specified delegatee\\n   **/\\n  function getDelegateeByType(address delegator, GovernancePowerType delegationType)\\n    external\\n    view\\n    returns (address);\\n\\n  /**\\n   * @dev returns delegates of an user\\n   * @param delegator the address of the delegator\\n   * @return a tuple of addresses the VOTING and PROPOSITION delegatee\\n   **/\\n  function getDelegates(address delegator)\\n    external\\n    view\\n    returns (address, address);\\n\\n  /**\\n   * @dev returns the current voting or proposition power of a user.\\n   * @param user the user\\n   * @param delegationType the type of delegation (VOTING, PROPOSITION)\\n   * @return the current voting or proposition power of a user\\n   **/\\n  function getPowerCurrent(address user, GovernancePowerType delegationType)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @dev returns the current voting or proposition power of a user.\\n   * @param user the user\\n   * @return the current voting and proposition power of a user\\n   **/\\n  function getPowersCurrent(address user)\\n    external\\n    view\\n    returns (uint256, uint256);\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param delegator the owner of the funds\\n   * @param delegatee the user to who owner delegates his governance power\\n   * @param delegationType the type of governance power delegation (VOTING, PROPOSITION)\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  function metaDelegateByType(\\n    address delegator,\\n    address delegatee,\\n    GovernancePowerType delegationType,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev implements the permit function as for https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param delegator the owner of the funds\\n   * @param delegatee the user to who delegator delegates his voting and proposition governance power\\n   * @param deadline the deadline timestamp, type(uint256).max for no deadline\\n   * @param v signature param\\n   * @param s signature param\\n   * @param r signature param\\n   */\\n  function metaDelegate(\\n    address delegator,\\n    address delegatee,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"src/DelegationAwareBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum DelegationMode {\\n  NO_DELEGATION,\\n  VOTING_DELEGATED,\\n  PROPOSITION_DELEGATED,\\n  FULL_POWER_DELEGATED\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"aave-token-v2/=lib/aave-token-v2/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"aave-helpers/=lib/aave-helpers/src/\",\r\n      \"solidity-utils/=lib/solidity-utils/src/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"@aave/core-v3/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"aave-v3-core/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"governance-crosschain-bridges/=lib/aave-helpers/lib/governance-crosschain-bridges/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POWER_SCALE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"}],\"name\":\"getDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPowersCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"metaDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationToken.GovernancePowerType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"metaDelegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AaveTokenV3", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}