{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nabstract contract IERC20 {\r\n    function transfer(address _to, uint256 _value) external virtual returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external virtual returns (bool success);\r\n}\r\n\r\ncontract TokenStaking {\r\n\r\n    address public tokenContract;\r\n    uint256 public interest;  // e.g. 3.5% ==> 1035\r\n    uint256 public spotsLeft;\r\n    uint256 public minimumAmount;\r\n    uint256 public maximumAmount;\r\n\r\n    mapping(address => uint256) public ownerToStakedValue;\r\n    mapping(address => uint256) public ownerToReleaseTime;\r\n    mapping(address => uint256) public ownerToReleaseValue;\r\n\r\n    bool public paused = false;\r\n    address public owner;\r\n    address public newContractOwner;\r\n\r\n    event Pause();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor (uint256 _spotsLeft, uint256 _minimumAmount, uint256 _maximumAmount, uint256 _interest, address _tokenContract) {\r\n        spotsLeft = _spotsLeft;\r\n        minimumAmount = _minimumAmount;\r\n        maximumAmount = _maximumAmount;\r\n        interest = _interest;\r\n        tokenContract = _tokenContract;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier ifNotPaused {\r\n        require(!paused, \"Contract is paused.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyContractOwner {\r\n        require(msg.sender == owner, \"Not authorized.\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) external onlyContractOwner {\r\n        require(_newOwner != address(0), \"Invalid address.\");\r\n        newContractOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(msg.sender == newContractOwner, \"Not authorized to accept ownership.\");\r\n        emit OwnershipTransferred(owner, newContractOwner);\r\n        owner = newContractOwner;\r\n        newContractOwner = address(0);\r\n    }\r\n\r\n    function setPause(bool _paused) external onlyContractOwner {\r\n        paused = _paused;\r\n        if (paused) {\r\n            emit Pause();\r\n        }\r\n    }\r\n\r\n    function setInterest(uint256 _interest) external onlyContractOwner {\r\n        interest = _interest;\r\n    }\r\n\r\n    function setTokenContract(address _tokenContract) external onlyContractOwner {\r\n        tokenContract = _tokenContract;\r\n    }\r\n\r\n    function stake(uint256 _value) external payable ifNotPaused {\r\n        require(_value >= minimumAmount, \"Insufficient amount for staking!\");\r\n        require(_value <= maximumAmount, \"Amount too big for staking!\");\r\n        require(spotsLeft > 0, \"No more staking spots left!\");\r\n        require(ownerToStakedValue[msg.sender] == 0, \"This address is already staking!\");\r\n        IERC20 token = IERC20(tokenContract);\r\n        token.transferFrom(msg.sender, address(this), _value);\r\n\r\n        ownerToStakedValue[msg.sender] = _value;\r\n        ownerToReleaseTime[msg.sender] = block.timestamp + (12 * 2628000);  // one month equals 2628000 secs\r\n        ownerToReleaseValue[msg.sender] = (_value * interest) / 1000;\r\n\r\n        spotsLeft -= 1;\r\n    }\r\n\r\n    function claim() external payable ifNotPaused {\r\n        require(block.timestamp >= ownerToReleaseTime[msg.sender], \"Your staking has not ended yet.\");\r\n        require(ownerToReleaseValue[msg.sender] > 0, \"Release value is zero.\");\r\n\r\n        delete ownerToReleaseTime[msg.sender];\r\n        delete ownerToStakedValue[msg.sender];\r\n        delete ownerToReleaseValue[msg.sender];\r\n\r\n        IERC20 token = IERC20(tokenContract);\r\n        token.transfer(msg.sender, ownerToReleaseValue[msg.sender]);\r\n    }\r\n\r\n    receive() external payable {\r\n        revert();\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert();\r\n    }\r\n\r\n    function withdrawBalance(uint256 _amount) external onlyContractOwner {\r\n        payable(owner).transfer(_amount);\r\n    }\r\n\r\n    function withdrawTokenBalance(address _address, uint256 _amount) external onlyContractOwner {\r\n        IERC20 token = IERC20(_address);\r\n        token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spotsLeft\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToReleaseValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToStakedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interest\",\"type\":\"uint256\"}],\"name\":\"setInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotsLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TokenStaking", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000009600000000000000000000000000000000000000000000000000000000000005dc000000000000000000000000000000000000000000000000000000000000138700000000000000000000000000000000000000000000000000000000000007080000000000000000000000008b3870df408ff4d7c3a26df852d41034eda11d81", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c53d35b0deb5c7f4643a9427350cae96dcfcfc2bb0ca635639b3d5f0e1a5e097"}