{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title Layer Zero Bridge (Ethereum Version)\r\n@license MIT\r\n@author Curve Finance\r\n\"\"\"\r\nfrom vyper.interfaces import ERC20\r\n\r\n\r\ninterface BERC20:\r\n    def burn(_value: uint256) -> bool: nonpayable\r\n\r\ninterface Minter:\r\n    def mint(_gauge: address): nonpayable\r\n\r\ninterface Endpoint:\r\n    def send(\r\n        _dst_chain_id: uint16,\r\n        _destination: Bytes[40],\r\n        _payload: Bytes[64],\r\n        _refund_address: address,\r\n        _zro_payment_address: address,\r\n        _adapter_params: Bytes[86]\r\n    ): payable\r\n    def estimateFees(\r\n        _dst_chain_id: uint16,\r\n        _user_application: address,\r\n        _payload: Bytes[64],\r\n        _pay_in_zro: bool,\r\n        _adapter_params: Bytes[86]\r\n    ) -> uint256: view\r\n\r\n\r\nevent SetKilled:\r\n    killed: bool\r\n\r\nevent SetDelay:\r\n    delay: uint256\r\n\r\nevent SetLimit:\r\n    limit: uint256\r\n\r\nevent Bridged:\r\n    receiver: indexed(address)\r\n    amount: uint256\r\n\r\nevent Delayed:\r\n    nonce: indexed(uint64)\r\n    receiver: indexed(address)\r\n    amount: uint256\r\n\r\nevent Issued:\r\n    nonce: indexed(uint64)\r\n    receiver: indexed(address)\r\n    amount: uint256\r\n\r\nevent TransferOwnership:\r\n    owner: indexed(address)\r\n\r\n\r\nCRV20: constant(address) = 0xD533a949740bb3306d119CC777fa900bA034cd52\r\nMINTER: constant(address) = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0\r\nISSUANCE_INTERVAL: constant(uint256) = 86400\r\n\r\nLZ_ENDPOINT: public(constant(address)) = 0x66A71Dcef29A0fFBDBE3c6a460a3B5BC225Cd675\r\n\r\n\r\nLZ_CHAIN_ID: public(immutable(uint16))\r\nLZ_ADDRESS: immutable(Bytes[40])\r\nKECCAK_LZ_ADDRESS: immutable(bytes32)\r\n\r\n\r\nminted: public(uint256)\r\n\r\nlimit: public(uint256)\r\ndelay: public(uint256)\r\nissued: public(HashMap[uint256, uint256])\r\ndelayed: public(HashMap[uint64, bytes32])\r\n\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\n\r\nis_killed: public(bool)\r\n\r\n\r\n@external\r\ndef __init__(_delay: uint256, _limit: uint256, _lz_chain_id: uint16):\r\n    self.delay = _delay\r\n    log SetDelay(_delay)\r\n\r\n    self.limit = _limit\r\n    log SetLimit(_limit)\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)\r\n\r\n    LZ_CHAIN_ID = _lz_chain_id\r\n    LZ_ADDRESS = concat(\r\n        slice(convert(self, bytes32), 12, 20), slice(convert(self, bytes32), 12, 20)\r\n    )\r\n    KECCAK_LZ_ADDRESS = keccak256(LZ_ADDRESS)\r\n\r\n\r\n@payable\r\n@external\r\ndef bridge(\r\n    _amount: uint256,\r\n    _receiver: address = msg.sender,\r\n    _refund_address: address = msg.sender,\r\n    _zro_payment_address: address = empty(address),\r\n    _native_amount: uint256 = 0,\r\n    _native_receiver: address = empty(address)\r\n):\r\n    \"\"\"\r\n    @notice Bridge CRV\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: dead\r\n    assert _amount != 0 and _receiver != empty(address)  # dev: invalid\r\n\r\n    assert ERC20(CRV20).transferFrom(msg.sender, self, _amount)\r\n    assert BERC20(CRV20).burn(_amount)\r\n\r\n    adapter_params: Bytes[86] = b\"\"\r\n    if _native_amount == 0:\r\n        adapter_params = concat(\r\n            b\"\\x00\\x01\",\r\n            convert(500_000, bytes32)\r\n        )\r\n    else:\r\n        adapter_params = concat(\r\n            b\"\\x00\\x02\",\r\n            convert(500_000, bytes32),\r\n            convert(_native_amount, bytes32),\r\n            slice(convert(_native_receiver, bytes32), 12, 20)\r\n        )\r\n\r\n    Endpoint(LZ_ENDPOINT).send(\r\n        LZ_CHAIN_ID,\r\n        LZ_ADDRESS,\r\n        _abi_encode(_receiver, _amount),\r\n        _refund_address,\r\n        _zro_payment_address,\r\n        adapter_params,\r\n        value=msg.value\r\n    )\r\n    log Bridged(_receiver, _amount)\r\n\r\n\r\n@external\r\ndef lzReceive(_lz_chain_id: uint16, _lz_address: Bytes[40], _nonce: uint64, _payload: Bytes[64]):\r\n    \"\"\"\r\n    @dev LayerZero method which should not revert at all\r\n    \"\"\"\r\n    assert msg.sender == LZ_ENDPOINT  # dev: invalid caller\r\n\r\n    assert _lz_chain_id == LZ_CHAIN_ID  # dev: invalid source chain\r\n    assert keccak256(_lz_address) == KECCAK_LZ_ADDRESS  # dev: invalid source address\r\n\r\n    receiver: address = empty(address)\r\n    amount: uint256 = empty(uint256)\r\n    receiver, amount = _abi_decode(_payload, (address, uint256))\r\n\r\n    if receiver == empty(address) or amount == 0:\r\n        # precaution\r\n        return\r\n\r\n    period: uint256 = block.timestamp / ISSUANCE_INTERVAL\r\n    issued: uint256 = self.issued[period] + amount\r\n\r\n    if issued > self.limit or self.is_killed:\r\n        self.delayed[_nonce] = keccak256(_abi_encode(block.timestamp, _payload))\r\n        log Delayed(_nonce, receiver, amount)\r\n    else:\r\n        self.issued[period] = issued\r\n        self.minted += amount\r\n\r\n        Minter(MINTER).mint(self)\r\n        ERC20(CRV20).transfer(receiver, amount)\r\n\r\n        log Issued(_nonce, receiver, amount)\r\n\r\n\r\n@external\r\ndef retry(_nonce: uint64, _timestamp: uint256, _receiver: address, _amount: uint256):\r\n    \"\"\"\r\n    @notice Retry a previously delayed bridge attempt\r\n    \"\"\"\r\n    assert not self.is_killed  # dev: dead\r\n\r\n    assert _timestamp < block.timestamp + self.delay  # dev: too soon\r\n    assert self.delayed[_nonce] == keccak256(\r\n        _abi_encode(_timestamp, _abi_encode(_receiver, _amount))\r\n    )  # dev: incorrect\r\n\r\n    self.delayed[_nonce] = empty(bytes32)\r\n    self.minted += _amount\r\n\r\n    Minter(MINTER).mint(self)\r\n    ERC20(CRV20).transfer(_receiver, _amount)\r\n\r\n    log Issued(_nonce, _receiver, _amount)\r\n\r\n\r\n@view\r\n@external\r\ndef quote(_native_amount: uint256 = 0) -> uint256:\r\n    \"\"\"\r\n    @notice Quote the cost of calling the `bridge` method\r\n    \"\"\"\r\n    adapter_params: Bytes[86] = b\"\"\r\n    if _native_amount == 0:\r\n        adapter_params = concat(\r\n            b\"\\x00\\x01\",\r\n            convert(500_000, bytes32)\r\n        )\r\n    else:\r\n        adapter_params = concat(\r\n            b\"\\x00\\x02\",\r\n            convert(500_000, bytes32),\r\n            convert(_native_amount, bytes32),\r\n            b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\r\n        )\r\n\r\n    return Endpoint(LZ_ENDPOINT).estimateFees(\r\n        LZ_CHAIN_ID,\r\n        self,\r\n        concat(empty(bytes32), empty(bytes32)),\r\n        False,\r\n        adapter_params\r\n    )\r\n\r\n\r\n@external\r\ndef user_checkpoint(_user: address) -> bool:\r\n    assert _user == self  # dev: only gauge\r\n\r\n    return True\r\n\r\n\r\n@view\r\n@external\r\ndef integrate_fraction(_user: address) -> uint256:\r\n    \"\"\"\r\n    @dev The only account permitted to receive CRV via the Minter is this gauge\r\n    \"\"\"\r\n    assert _user == self  # dev: only gauge\r\n\r\n    return self.minted\r\n\r\n\r\n@external\r\ndef set_delay(_delay: uint256):\r\n    \"\"\"\r\n    @notice Set the delay for retrying a delayed bridge attempt\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    self.delay = _delay\r\n    log SetDelay(_delay)\r\n\r\n\r\n@external\r\ndef set_limit(_limit: uint256):\r\n    \"\"\"\r\n    @notice Set the issuance limit for the issuance interval\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    self.limit = _limit\r\n    log SetLimit(_limit)\r\n\r\n\r\n@external\r\ndef set_killed(_killed: bool):\r\n    \"\"\"\r\n    @notice Set the kill status of this side of the bridge\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    self.is_killed = _killed\r\n    log SetKilled(_killed)\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership to `_future_owner`\r\n    @param _future_owner The account to commit as the future owner\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.future_owner = _future_owner\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept the transfer of ownership\r\n    @dev Only the committed future owner can call this function\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only future owner\r\n\r\n    self.owner = msg.sender\r\n    log TransferOwnership(msg.sender)", "ABI": "[{\"name\":\"SetKilled\",\"inputs\":[{\"name\":\"killed\",\"type\":\"bool\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetDelay\",\"inputs\":[{\"name\":\"delay\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetLimit\",\"inputs\":[{\"name\":\"limit\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Bridged\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Delayed\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint64\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Issued\",\"inputs\":[{\"name\":\"nonce\",\"type\":\"uint64\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"amount\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TransferOwnership\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_delay\",\"type\":\"uint256\"},{\"name\":\"_limit\",\"type\":\"uint256\"},{\"name\":\"_lz_chain_id\",\"type\":\"uint16\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_refund_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_refund_address\",\"type\":\"address\"},{\"name\":\"_zro_payment_address\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_refund_address\",\"type\":\"address\"},{\"name\":\"_zro_payment_address\",\"type\":\"address\"},{\"name\":\"_native_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_refund_address\",\"type\":\"address\"},{\"name\":\"_zro_payment_address\",\"type\":\"address\"},{\"name\":\"_native_amount\",\"type\":\"uint256\"},{\"name\":\"_native_receiver\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"lzReceive\",\"inputs\":[{\"name\":\"_lz_chain_id\",\"type\":\"uint16\"},{\"name\":\"_lz_address\",\"type\":\"bytes\"},{\"name\":\"_nonce\",\"type\":\"uint64\"},{\"name\":\"_payload\",\"type\":\"bytes\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"retry\",\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint64\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"quote\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"quote\",\"inputs\":[{\"name\":\"_native_amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"user_checkpoint\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"integrate_fraction\",\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_delay\",\"inputs\":[{\"name\":\"_delay\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_limit\",\"inputs\":[{\"name\":\"_limit\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_killed\",\"inputs\":[{\"name\":\"_killed\",\"type\":\"bool\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LZ_ENDPOINT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LZ_CHAIN_ID\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minted\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"limit\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delay\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"issued\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"delayed\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_killed\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]}]", "ContractName": "Layer Zero Bridge (Ethereum Version)", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000001e1338000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}