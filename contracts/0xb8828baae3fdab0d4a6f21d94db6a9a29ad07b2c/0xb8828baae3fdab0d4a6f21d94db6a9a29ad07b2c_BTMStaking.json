{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-07-05\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * SAFEMATH LIBRARY\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract BTMStaking is ReentrancyGuard,Ownable {\r\n    using SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tIERC20 public _BTM = IERC20(0x6CD583c99632a1BB761d9BBD8682C6A5ad327087);\r\n\t\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    struct AllInfo {\r\n        uint256 totalStakes;\r\n        uint256 totalDistributed;\r\n        uint256 totalRewards;\r\n        uint256 stakingStart;\r\n        uint256 stakingEnd;\r\n\r\n        uint256 userStaked;\r\n        uint256 pendingRewards;\r\n        uint256 totalClaimed;\r\n        uint256 stakeTime;\r\n        uint256 lastClaim;\r\n        bool earlyWithdraw;\r\n    }\r\n    \r\n\tstruct BalanceTransaction {\r\n        uint256 balanceBeforeSend;\r\n        uint256 balanceAfterSend;\r\n    }\r\n\t\r\n    address[] stakeholders;\r\n    mapping (address => uint256) stakeholderIndexes;\r\n    mapping (address => uint256) stakeholderClaims;\r\n    mapping (address => uint256) stakeholderStaking;\r\n\r\n    mapping (address => Stake) public stakes;\r\n\r\n    uint256 public totalStakes;\r\n    uint256 public totalDistributed;\r\n    uint256 public totalRewards;\r\n    uint256 public totalDays = 180 days; // 6 month\r\n    uint256 public totalDuration = 86400; // 1 day\r\n    uint256 public dividendsPerStake;\r\n    uint256 public dividendsPerStakeAccuracyFactor = 10 ** 36;\r\n\t\r\n\tuint256 public stakingStart = 0;\r\n\tuint256 public stakingEnd = 0;\r\n    uint256 public dividendsCheckPoint;\r\n\t\r\n    uint256 public earlyWithdrawPenalty = 10; // 10%\r\n\tbool public activePenalty = true;\r\n\t\r\n\tuint256 private _weiDecimal = 18;\r\n\r\n    constructor (\r\n\t\tuint256 _totalRewards\r\n\t\t, uint256 _stakingStart\r\n\t) payable {\r\n\t\ttotalRewards = _totalRewards;\r\n\t\tstakingStart = _stakingStart;\r\n\t\tdividendsCheckPoint = stakingStart;\r\n\t\tstakingEnd = stakingStart + totalDays;\r\n\t}\r\n\r\n    function deposit(uint256 amount) payable external nonReentrant {\r\n        require(amount > 0, \"No deposit amount\");\r\n        // require(msg.value == amount, \"Amount not match\");\r\n        require(block.timestamp < stakingEnd, \"Staking Ended\");\r\n        require(block.timestamp >= stakingStart, \"Staking Not Started\");\r\n\t\t\r\n\t\tuint256 _amount;\r\n\t\t\r\n\t\tBalanceTransaction memory balanceTransaction;\r\n\t\tbalanceTransaction.balanceBeforeSend = _BTM.balanceOf(address(this));\r\n\t\t_BTM.safeTransferFrom(msg.sender, address(this), _getTokenAmount(address(_BTM),amount));\r\n\t\tbalanceTransaction.balanceAfterSend = _BTM.balanceOf(address(this));\r\n\t\t_amount = balanceTransaction.balanceAfterSend - balanceTransaction.balanceBeforeSend;\r\n\t\t_amount = _getReverseTokenAmount(address(_BTM),_amount);\r\n\t\t\r\n\t\tif(stakes[msg.sender].amount > 0){\r\n            distributeReward(msg.sender);\r\n        }\r\n\r\n        if(stakes[msg.sender].amount == 0){\r\n            addStakeholder(msg.sender);\r\n        }\r\n\t\t\r\n        totalStakes = totalStakes.add(_amount);\r\n        stakes[msg.sender].amount += _amount;\r\n        stakes[msg.sender].totalExcluded = getCumulativeDividends(stakes[msg.sender].amount);\r\n\t\tstakeholderStaking[msg.sender] = block.timestamp;\r\n\t\tupdateCumulativeDividends();\r\n    }\r\n\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n\t\taddress stakeholder = msg.sender;\r\n\t\t\r\n\t\trequire(amount > 0, \"No withdraw amount\");\r\n        require(stakes[stakeholder].amount >= amount, \"insufficient balance\");\r\n\t\t\r\n\t\tdistributeReward(stakeholder);\r\n\t\t\r\n\t\ttotalStakes = totalStakes.sub(amount);\r\n\t\tstakes[stakeholder].amount -= amount;\r\n\t\tstakes[stakeholder].totalExcluded = getCumulativeDividends(stakes[stakeholder].amount);\r\n\t\t\r\n\t\tif(stakes[stakeholder].amount == 0){\r\n            removeStakeholder(stakeholder);\r\n        }\r\n\t\t\r\n\t\tupdateCumulativeDividends();\r\n\t\t\r\n\t\tuint256 withdrawAmount = amount;\r\n\t\tuint256 penaltyFee = 0;\r\n\t\t\r\n\t\tif(block.timestamp < (stakingStart + totalDays) && activePenalty){\r\n\t\t\tpenaltyFee = (amount * earlyWithdrawPenalty) / 100;\r\n\t\t\twithdrawAmount -= penaltyFee;\r\n\t\t\t_BTM.safeTransfer(address(0xdead), _getTokenAmount(address(_BTM),penaltyFee));\r\n\t\t}\r\n\t\t\r\n\t\t_BTM.safeTransfer(msg.sender, _getTokenAmount(address(_BTM),withdrawAmount));\r\n    }\r\n    \r\n    function distributeReward(address stakeholder) internal {\r\n        if(stakes[stakeholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(stakeholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed.add(amount);\r\n            stakeholderClaims[stakeholder] = block.timestamp;\r\n            stakes[stakeholder].totalRealised = stakes[stakeholder].totalRealised.add(amount);\r\n            stakes[stakeholder].totalExcluded = getCumulativeDividends(stakes[stakeholder].amount);\r\n\t\t\t_BTM.safeTransfer(stakeholder, _getTokenAmount(address(_BTM),amount));\r\n        }\r\n    }\r\n\r\n    function claimReward() external nonReentrant{\r\n        distributeReward(msg.sender);\r\n    }\r\n\t\r\n\tfunction updateCumulativeDividends() internal {\r\n        uint256 timestamp = block.timestamp;\r\n\t\t\r\n\t\tif(timestamp > stakingEnd){\r\n\t\t\ttimestamp = stakingEnd;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 pendingDividendsShare = (timestamp - dividendsCheckPoint) / totalDuration;\r\n        uint256 rewardPerDay = totalRewards / (totalDays / totalDuration);\r\n        uint256 valueShare = pendingDividendsShare * rewardPerDay;\r\n\t\t\r\n\t\tdividendsPerStake = dividendsPerStake.add(dividendsPerStakeAccuracyFactor.mul(valueShare).div(totalStakes));\r\n\t\tif (pendingDividendsShare > 0) {\r\n            dividendsCheckPoint += timestamp - dividendsCheckPoint;\r\n        }\r\n    }\r\n\t\r\n\tfunction getCumulativeDividends(uint256 stake) internal view returns (uint256) {\r\n        uint256 timestamp = block.timestamp;\r\n\t\t\r\n\t\tif(timestamp > stakingEnd){\r\n\t\t\ttimestamp = stakingEnd;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 pendingDividendsShare = (timestamp - dividendsCheckPoint) / totalDuration;\r\n        uint256 rewardPerDay = (totalRewards / (totalDays / totalDuration));\r\n        uint256 valueShare = pendingDividendsShare * rewardPerDay;\r\n\t\t\r\n\r\n        // timestamp - dividendsCheckPoint = time passed since last update / \r\n\t\tuint256 _dividendsPerStake = dividendsPerStake.add(dividendsPerStakeAccuracyFactor.mul(valueShare).div(totalStakes));\r\n\t\treturn stake.mul(_dividendsPerStake).div(dividendsPerStakeAccuracyFactor);\r\n    }\r\n\t\r\n    function getUnpaidEarnings(address stakeholder) public view returns (uint256) {\r\n        if(stakes[stakeholder].amount == 0){ return 0; }\r\n\r\n        uint256 stakeholderTotalDividends = getCumulativeDividends(stakes[stakeholder].amount);\r\n        uint256 stakeholderTotalExcluded = stakes[stakeholder].totalExcluded;\r\n\r\n        if(stakeholderTotalDividends <= stakeholderTotalExcluded){ return 0; }\r\n\r\n        return stakeholderTotalDividends.sub(stakeholderTotalExcluded);\r\n    }\r\n\r\n    function addStakeholder(address stakeholder) internal {\r\n        stakeholderIndexes[stakeholder] = stakeholders.length;\r\n        stakeholders.push(stakeholder);\r\n    }\r\n\r\n    function removeStakeholder(address stakeholder) internal {\r\n        stakeholders[stakeholderIndexes[stakeholder]] = stakeholders[stakeholders.length-1];\r\n        stakeholderIndexes[stakeholders[stakeholders.length-1]] = stakeholderIndexes[stakeholder];\r\n        stakeholders.pop();\r\n    }\r\n\t\r\n\tfunction setActivePenalty(bool _activePenalty) external onlyOwner{\r\n        activePenalty = _activePenalty;\r\n    }\r\n\t\r\n    function getAllInfo(address user) public view returns (AllInfo memory) {\r\n        return AllInfo(\r\n            totalStakes,\r\n            totalDistributed,\r\n            totalRewards,\r\n            stakingStart,\r\n            stakingEnd,\r\n\r\n            stakes[user].amount,\r\n            getUnpaidEarnings(user),\r\n            stakes[user].totalRealised,\r\n            stakeholderStaking[user],\r\n            stakeholderClaims[user],\r\n            block.timestamp < (stakingStart + totalDays * totalDuration)\r\n        );\r\n    }\r\n\t\r\n\tfunction clearStuckBalance() external onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\t\r\n\tfunction clearStuckToken(address TokenAddress, uint256 amount) external onlyOwner {\r\n        IERC20(TokenAddress).safeTransfer(msg.sender, _getTokenAmount(TokenAddress, amount));\r\n    }\r\n\t\r\n\tfunction _getTokenAmount(address _tokenAddress, uint256 _amount) internal view returns (uint256 quotient) {\r\n\t\tIERC20 tokenAddress = IERC20(_tokenAddress);\r\n\t\tuint256 tokenDecimal = tokenAddress.decimals();\r\n\t\tuint256 decimalDiff = 0;\r\n\t\tuint256 decimalDiffConverter = 0;\r\n\t\tuint256 amount = 0;\r\n\t\t\t\r\n\t\tif(_weiDecimal != tokenDecimal){\r\n\t\t\tif(_weiDecimal > tokenDecimal){\r\n\t\t\t\tdecimalDiff = _weiDecimal - tokenDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.div(decimalDiffConverter);\r\n\t\t\t} else {\r\n\t\t\t\tdecimalDiff = tokenDecimal - _weiDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.mul(decimalDiffConverter);\r\n\t\t\t}\t\t\r\n\t\t} else {\r\n\t\t\tamount = _amount;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _quotient = amount;\r\n\t\t\r\n\t\treturn (_quotient);\r\n    }\r\n\t\r\n\tfunction _getReverseTokenAmount(address _tokenAddress, uint256 _amount) internal view returns (uint256 quotient) {\r\n\t\tIERC20 tokenAddress = IERC20(_tokenAddress);\r\n\t\tuint256 tokenDecimal = tokenAddress.decimals();\r\n\t\tuint256 decimalDiff = 0;\r\n\t\tuint256 decimalDiffConverter = 0;\r\n\t\tuint256 amount = 0;\r\n\t\t\t\r\n\t\tif(_weiDecimal != tokenDecimal){\r\n\t\t\tif(_weiDecimal > tokenDecimal){\r\n\t\t\t\tdecimalDiff = _weiDecimal - tokenDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.mul(decimalDiffConverter);\r\n\t\t\t} else {\r\n\t\t\t\tdecimalDiff = tokenDecimal - _weiDecimal;\r\n\t\t\t\tdecimalDiffConverter = 10**decimalDiff;\r\n\t\t\t\tamount = _amount.div(decimalDiffConverter);\r\n\t\t\t}\t\t\r\n\t\t} else {\r\n\t\t\tamount = _amount;\r\n\t\t}\r\n\t\t\r\n\t\tuint256 _quotient = amount;\r\n\t\t\r\n\t\treturn (_quotient);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingStart\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_BTM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePenalty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"TokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsCheckPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendsPerStakeAccuracyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyWithdrawPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalStakes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDistributed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaim\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"earlyWithdraw\",\"type\":\"bool\"}],\"internalType\":\"struct BTMStaking.AllInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_activePenalty\",\"type\":\"bool\"}],\"name\":\"setActivePenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalExcluded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRealised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BTMStaking", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000001a784379d99db420000000000000000000000000000000000000000000000000000000000000064cc69b0", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cf4693a45a0f7750af47cef275cf47f8b323dcc9c19bd16d8ec1be12f79ea0d8"}