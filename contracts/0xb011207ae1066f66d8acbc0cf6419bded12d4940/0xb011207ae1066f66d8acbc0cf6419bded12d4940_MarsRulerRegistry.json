{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Ownable {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public owner;\r\n\r\n    constructor() { \r\n        owner = msg.sender; \r\n    }\r\n    \r\n    modifier onlyOwner { \r\n        require(owner == msg.sender, \"onlyOwner not owner!\");\r\n        _; \r\n    }\r\n    \r\n    function transferOwnership(address new_) external onlyOwner {\r\n        address _old = owner;\r\n        owner = new_;\r\n        emit OwnershipTransferred(_old, new_);\r\n    }\r\n}\r\n\r\nabstract contract Controllerable is Ownable {\r\n\r\n    event ControllerSet(string indexed controllerType, bytes32 indexed controllerSlot, \r\n        address indexed controller, bool status);\r\n\r\n    mapping(bytes32 => mapping(address => bool)) internal __controllers;\r\n\r\n    function isController(string memory type_, address controller_) public \r\n    view returns (bool) {\r\n        bytes32 _slot = keccak256(abi.encodePacked(type_));\r\n        return __controllers[_slot][controller_];\r\n    }\r\n\r\n    modifier onlyController(string memory type_) {\r\n        require(isController(type_, msg.sender), \"Controllerable: Not Controller!\");\r\n        _;\r\n    }\r\n\r\n    function setController(string memory type_, address controller_, bool bool_) \r\n    public onlyOwner {\r\n        bytes32 _slot = keccak256(abi.encodePacked(type_));\r\n        __controllers[_slot][controller_] = bool_;\r\n        emit ControllerSet(type_, _slot, controller_, bool_);\r\n    }\r\n}\r\n\r\ninterface iCS {\r\n    // Structs of Characters\r\n    struct Character {\r\n        uint8 race_;\r\n        uint8 renderType_;\r\n        uint16 transponderId_;\r\n        uint16 spaceCapsuleId_;\r\n        uint8 augments_;\r\n        uint16 basePoints_;\r\n        uint16 totalEquipmentBonus_;\r\n    }\r\n    struct Stats {\r\n        uint8 strength_; \r\n        uint8 agility_; \r\n        uint8 constitution_; \r\n        uint8 intelligence_; \r\n        uint8 spirit_; \r\n    }\r\n    struct Equipment {\r\n        uint8 weaponUpgrades_;\r\n        uint8 chestUpgrades_;\r\n        uint8 headUpgrades_;\r\n        uint8 legsUpgrades_;\r\n        uint8 vehicleUpgrades_;\r\n        uint8 armsUpgrades_;\r\n        uint8 artifactUpgrades_;\r\n        uint8 ringUpgrades_;\r\n    }\r\n\r\n    // View Functions\r\n    function names(uint256 tokenId_) external view returns (string memory);\r\n    function bios(uint256 tokenId_) external view returns (string memory);\r\n    function characters(uint256 tokenId_) external view returns (Character memory);\r\n    function stats(uint256 tokenId_) external view returns (Stats memory);\r\n    function equipments(uint256 tokenId_) external view returns (Equipment memory);\r\n    function contractToRace(address contractAddress_) external view returns (uint8);\r\n}\r\n\r\ninterface iMartians {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n}\r\n\r\ninterface iMES {\r\n    function transferFrom(address from_, address to_, uint256 amount_) \r\n    external returns (bool);\r\n}\r\n\r\n// The Locally Supplied Interface\r\ninterface iMarsRulerRegistry {\r\n\r\n    struct GearConfig {\r\n        bool hasConfig;\r\n        uint8 weaponType;\r\n        uint8 chestType;\r\n        uint8 headType;\r\n        uint8 legsType;\r\n        uint8 vehicleType;\r\n        uint8 armsType;\r\n        uint8 artifactType;\r\n        uint8 ringType;\r\n    }\r\n\r\n    function characterToGearconfig(uint256 tokenId_) external view\r\n    returns (GearConfig memory);\r\n}\r\n\r\ncontract MarsRulerRegistry is Controllerable {\r\n\r\n    ///// Interfaces ///// \r\n    // NOTE: MARTIANS ADDRESS MUST BE CHANGED TO V3!!! THIS IS V2!\r\n    iMartians public Martians = iMartians(0x53beA59B69bF9e58E0AFeEB4f34f49Fc29D10F55); \r\n    iCS public CS = iCS(0xC7C40032E952F52F1ce7472913CDd8EeC89521c4);\r\n    iMES public MES = iMES(0x3C2Eb40D25a4b2B5A068a959a40d57D63Dc98B95);\r\n\r\n    struct GearConfig {\r\n        bool hasConfig; // Set to True on write, False on reset\r\n        uint8 weaponType;\r\n        uint8 chestType;\r\n        uint8 headType;\r\n        uint8 legsType;\r\n        uint8 vehicleType;\r\n        uint8 armsType;\r\n        uint8 artifactType;\r\n        uint8 ringType;\r\n    }\r\n\r\n    event GearChange(address indexed owner, uint256 indexed tokenId, GearConfig config);\r\n    event GearReset(address indexed owner, uint256 indexed tokenId);\r\n\r\n    mapping(uint256 => GearConfig) public characterToGearConfig;\r\n\r\n    uint256 public GEAR_CHANGE_COST = 1000 ether; // Not Immutable!\r\n\r\n    ///// Administrative Functions /////\r\n    function O_setContracts(address martians_, address cs_, address mes_) \r\n    external onlyOwner {\r\n        if (martians_ != address(0)) Martians = iMartians(martians_);\r\n        if (cs_ != address(0)) CS = iCS(cs_);\r\n        if (mes_ != address(0)) MES = iMES(mes_);\r\n    }\r\n    function O_setGearChangeCost(uint256 cost_) external onlyOwner {\r\n        GEAR_CHANGE_COST = cost_;\r\n    }\r\n\r\n    ///// Controller Functions /////\r\n    function C_setCharacterGear(uint256 tokenId_, GearConfig memory gearConfig_) \r\n    external onlyController(\"SETTER\") {\r\n\r\n        require(18 > gearConfig_.weaponType     &&  // 0-17\r\n                15 > gearConfig_.chestType      &&  // 0-14\r\n                15 > gearConfig_.headType       &&  // 0-14\r\n                15 > gearConfig_.legsType       &&  // 0-14\r\n                15 > gearConfig_.vehicleType    &&  // 0-14\r\n                15 > gearConfig_.armsType       &&  // 0-14\r\n                3  > gearConfig_.artifactType   &&  // 0-2\r\n                5  > gearConfig_.ringType,          // 0-4\r\n                \"Gear Config out-of-bounds!\");\r\n\r\n        gearConfig_.hasConfig = true;\r\n        characterToGearConfig[tokenId_] = gearConfig_;\r\n        emit GearChange(msg.sender, tokenId_, gearConfig_);\r\n    }\r\n    function C_resetCharacterGear(uint256 tokenId_) external onlyController(\"SETTER\") {\r\n        delete characterToGearConfig[tokenId_];\r\n        emit GearReset(msg.sender, tokenId_);\r\n    }\r\n\r\n    ///// Usage Functions /////\r\n    function setGear(uint256 tokenId_, GearConfig memory gearConfig_) external {\r\n        // Validate Ownership\r\n        require(msg.sender == Martians.ownerOf(tokenId_),\r\n                \"You are not the owner!\");\r\n\r\n        // Validate Augments\r\n        require(10 == CS.characters(tokenId_).augments_,\r\n                \"Your Martian is not a Ruler yet!\");\r\n\r\n        require(18 > gearConfig_.weaponType     &&  // 0-17\r\n                15 > gearConfig_.chestType      &&  // 0-14\r\n                15 > gearConfig_.headType       &&  // 0-14\r\n                15 > gearConfig_.legsType       &&  // 0-14\r\n                15 > gearConfig_.vehicleType    &&  // 0-14\r\n                15 > gearConfig_.armsType       &&  // 0-14\r\n                3  > gearConfig_.artifactType   &&  // 0-2\r\n                5  > gearConfig_.ringType,          // 0-4\r\n                \"Gear Config out-of-bounds!\");\r\n            \r\n        // Consume $MES\r\n        bool _success = MES.transferFrom(msg.sender, address(this), GEAR_CHANGE_COST);\r\n        require(_success, \"$MES deduction failed!\");\r\n\r\n        // Set Gear Config\r\n        gearConfig_.hasConfig = true; // Force a True value on gearConfig\r\n        characterToGearConfig[tokenId_] = gearConfig_; // Set the gearConfig\r\n\r\n        // Emit GearChange Event\r\n        emit GearChange(msg.sender, tokenId_, gearConfig_);\r\n    }\r\n\r\n    function resetGear(uint256 tokenId_) external {\r\n        // Validate Ownership\r\n        require(msg.sender == Martians.ownerOf(tokenId_),\r\n                \"You are not the owner!\");\r\n        \r\n        // Validate Gear Config Exists\r\n        require(characterToGearConfig[tokenId_].hasConfig,\r\n                \"Ruler has no config!\");\r\n        \r\n        // Delete the Config. This forces the hasConfig bool to False\r\n        delete characterToGearConfig[tokenId_];\r\n\r\n        // Emit GearReset Event\r\n        emit GearReset(msg.sender, tokenId_);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"controllerType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"controllerSlot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ControllerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasConfig\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"weaponType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"artifactType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ringType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MarsRulerRegistry.GearConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"GearChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"GearReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CS\",\"outputs\":[{\"internalType\":\"contract iCS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"C_resetCharacterGear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasConfig\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"weaponType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"artifactType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ringType\",\"type\":\"uint8\"}],\"internalType\":\"struct MarsRulerRegistry.GearConfig\",\"name\":\"gearConfig_\",\"type\":\"tuple\"}],\"name\":\"C_setCharacterGear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GEAR_CHANGE_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MES\",\"outputs\":[{\"internalType\":\"contract iMES\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Martians\",\"outputs\":[{\"internalType\":\"contract iMartians\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"martians_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cs_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mes_\",\"type\":\"address\"}],\"name\":\"O_setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cost_\",\"type\":\"uint256\"}],\"name\":\"O_setGearChangeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"characterToGearConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasConfig\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"weaponType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"artifactType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ringType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"resetGear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"type_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasConfig\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"weaponType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"chestType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"headType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"legsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"vehicleType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"armsType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"artifactType\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ringType\",\"type\":\"uint8\"}],\"internalType\":\"struct MarsRulerRegistry.GearConfig\",\"name\":\"gearConfig_\",\"type\":\"tuple\"}],\"name\":\"setGear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarsRulerRegistry", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b92b2fc30d894773c42015311e0cf557d29003ae91b909087b709d5a66cf829c"}