{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/staking/StakingPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPoolRewarder.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPools.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title StakingPools\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @notice A contract for staking tokens in pools in exchange for rewards.\\r\\n * @dev The contract provides functionality for users to stake tokens in specific pools, earn rewards and claim them. The rewards are managed by a separate rewarder contract.\\r\\n *      The contract uses OpenZeppelin's Ownable for managing ownership and upgradeability to allow for future improvements without disrupting the contract's main operations.\\r\\n */\\r\\ncontract StakingPools is OwnableUpgradeable, IStakingPools {\\r\\n    using SafeMathUpgradeable for uint256;\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a new staking pool is created\\r\\n     * @dev Logs the newly created pool's ID, the staked token, option contract, start block, end block, and reward per block\\r\\n     * @param poolId The ID of the newly created pool\\r\\n     * @param token The address of the token to be staked\\r\\n     * @param optionContract The address of the option contract associated with the pool\\r\\n     * @param startBlock The block number from which staking begins\\r\\n     * @param endBlock The block number at which staking ends\\r\\n     * @param rewardPerBlock The reward to be distributed per block for the pool\\r\\n     */\\r\\n    event PoolCreated(\\r\\n        uint256 indexed poolId,\\r\\n        address indexed token,\\r\\n        address indexed optionContract,\\r\\n        uint256 startBlock,\\r\\n        uint256 endBlock,\\r\\n        uint256 rewardPerBlock\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a staking pool's end block is extended\\r\\n     * @dev Logs the pool's ID, its old end block and the new extended end block\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param oldEndBlock The old end block of the pool\\r\\n     * @param newEndBlock The new end block after extension\\r\\n     */\\r\\n    event PoolEndBlockExtended(uint256 indexed poolId, uint256 oldEndBlock, uint256 newEndBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a staking pool's reward rate is changed\\r\\n     * @dev Logs the pool's ID, its old reward per block and the new reward per block\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param oldRewardPerBlock The old reward per block of the pool\\r\\n     * @param newRewardPerBlock The new reward per block of the pool\\r\\n     */\\r\\n    event PoolRewardRateChanged(uint256 indexed poolId, uint256 oldRewardPerBlock, uint256 newRewardPerBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the rewarder contract address is changed\\r\\n     * @dev Logs the old rewarder address and the new rewarder address\\r\\n     * @param oldRewarder The old rewarder contract address\\r\\n     * @param newRewarder The new rewarder contract address\\r\\n     */\\r\\n    event RewarderChanged(address oldRewarder, address newRewarder);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are staked in a pool\\r\\n     * @dev Logs the pool's ID, the staker's address, the staked token's address, and the staked amount\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param staker The address of the staker\\r\\n     * @param token The address of the staked token\\r\\n     * @param amount The amount of tokens staked\\r\\n     */\\r\\n    event Staked(uint256 indexed poolId, address indexed staker, address token, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when tokens are unstaked from a pool\\r\\n     * @dev Logs the pool's ID, the staker's address, the staked token's address, and the unstaked amount\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param staker The address of the staker\\r\\n     * @param token The address of the staked token\\r\\n     * @param amount The amount of tokens unstaked\\r\\n     */\\r\\n    event Unstaked(uint256 indexed poolId, address indexed staker, address token, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when rewards are redeemed from a pool\\r\\n     * @dev Logs the pool's ID, the staker's address, the rewarder's address, and the redeemed reward amount\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param staker The address of the staker\\r\\n     * @param rewarder The address of the rewarder\\r\\n     * @param amount The amount of rewards redeemed\\r\\n     */\\r\\n    event RewardRedeemed(uint256 indexed poolId, address indexed staker, address rewarder, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the active state of a pool is changed\\r\\n     * @dev Logs the pool's ID and its new active state\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param isActive The new active state of the pool\\r\\n     */\\r\\n    event IsActiveChanged(uint256 indexed poolId, bool isActive);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the factory address is changed\\r\\n     * @dev Logs the old factory address and the new factory address\\r\\n     * @param oldFactory The old factory address\\r\\n     * @param newFactory The new factory address\\r\\n     */\\r\\n    event FactoryChanged(address oldFactory, address newFactory);\\r\\n\\r\\n    /**\\r\\n     * @notice Represents a staking pool\\r\\n     * @dev Contains pool details including start and end block for reward accumulation, reward per block, and the staking token's address\\r\\n     */\\r\\n    struct PoolInfo {\\r\\n        uint256 startBlock; // the block from which rewards accumulation starts\\r\\n        uint256 endBlock; // the block at which rewards accumulation ends\\r\\n        uint256 rewardPerBlock; // the total rewards given to the pool per block\\r\\n        address poolToken; // the address of the SNIPER token being staked in the pool\\r\\n        address optionContract; // the address of the Option the SNIPER being staked in the pool belongs to\\r\\n        bool isActive; // whether the pool is or is not open for staking\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Represents a pool's staking data\\r\\n     * @dev Contains information about total staked amount, accumulated reward per share, and the last block at which the accumulated reward was updated\\r\\n     */\\r\\n    struct PoolData {\\r\\n        uint256 totalStakeAmount; // the total amount of tokens staked in the pool\\r\\n        uint256 accuRewardPerShare; // the total amount of rewards divided with precision by the total number of tokens staked\\r\\n        uint256 accuRewardLastUpdateBlock; // the block number at which accuRewardPerShare was last updated\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Represents a user's staking data in a pool\\r\\n     * @dev Contains information about the amount of tokens staked by the user, pending rewards, and the accumulated reward per share at the user's last staking/unstaking action\\r\\n     */\\r\\n    struct UserData {\\r\\n        uint256 stakeAmount; // amount of tokens the user has in stake\\r\\n        uint256 pendingReward; // amount of reward that can be redeemed by the user up to his latest action\\r\\n        uint256 entryAccuRewardPerShare; // the accuRewardPerShare value at the user's last stake/unstake action\\r\\n        uint256 entryTime; // the timestamp of the block the user entered the pool\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The factory contract address\\r\\n     * @dev Stores the address of the factory contract responsible for creating option contracts\\r\\n     */\\r\\n    address public optionFactory;\\r\\n\\r\\n    /**\\r\\n     * @notice The ID of the last created pool\\r\\n     * @dev Stores the ID of the last created pool. The first pool has an ID of 1.\\r\\n     */\\r\\n    uint256 public lastPoolId;\\r\\n\\r\\n    /**\\r\\n     * @notice The rewarder contract\\r\\n     * @dev An instance of IStakingPoolRewarder which handles reward logic\\r\\n     */\\r\\n    IStakingPoolRewarder public rewarder;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps a pool ID to its PoolInfo struct\\r\\n     * @dev Contains details for each staking pool\\r\\n     */\\r\\n    mapping(uint256 => PoolInfo) public poolInfos;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps a pool ID to its PoolData struct\\r\\n     * @dev Contains staking data for each pool\\r\\n     */\\r\\n    mapping(uint256 => PoolData) public poolData;\\r\\n\\r\\n    /**\\r\\n     * @notice Maps a pool ID to a mapping of an address to its UserData struct\\r\\n     * @dev Contains user staking data for each pool\\r\\n     */\\r\\n    mapping(uint256 => mapping(address => UserData)) public userData;\\r\\n\\r\\n    /**\\r\\n     * @notice A constant used for precision loss prevention\\r\\n     * @dev A large constant to keep precision intact when dealing with very small amounts\\r\\n     */\\r\\n    uint256 private constant ACCU_REWARD_MULTIPLIER = 10**20;\\r\\n\\r\\n    /**\\r\\n     * @notice Constant for the `transfer` function selector\\r\\n     * @dev Bytes4 constant for the `transfer(address,uint256)` function selector to be used in calling ERC20 contracts\\r\\n     */\\r\\n    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\")));\\r\\n\\r\\n    /**\\r\\n     * @notice Constant for the `approve` function selector\\r\\n     * @dev Bytes4 constant for the `approve(address,uint256)` function selector to be used in calling ERC20 contracts\\r\\n     */\\r\\n    bytes4 private constant APPROVE_SELECTOR = bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\")));\\r\\n\\r\\n    /**\\r\\n     * @notice Constant for the `transferFrom` function selector\\r\\n     * @dev Bytes4 constant for the `transferFrom(address,address,uint256)` function selector to be used in calling ERC20 contracts\\r\\n     */\\r\\n    bytes4 private constant TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\\\"transferFrom(address,address,uint256)\\\")));\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures the pool exists\\r\\n     * @dev Checks if the pool with the specified ID exists\\r\\n     */\\r\\n    modifier onlyPoolExists(uint256 poolId) {\\r\\n        require(poolInfos[poolId].endBlock > 0, \\\"StakingPools: pool not found\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures the pool is active\\r\\n     * @dev Checks if the current block number is within the start and end block of the pool and if the pool is active\\r\\n     */\\r\\n    modifier onlyPoolActive(uint256 poolId) {\\r\\n        require(\\r\\n            block.number >= poolInfos[poolId].startBlock &&\\r\\n                block.number < poolInfos[poolId].endBlock &&\\r\\n                poolInfos[poolId].isActive,\\r\\n            \\\"StakingPools: pool not active\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures the pool has not ended\\r\\n     * @dev Checks if the current block number is less than the end block of the pool\\r\\n     */\\r\\n    modifier onlyPoolNotEnded(uint256 poolId) {\\r\\n        require(block.number < poolInfos[poolId].endBlock, \\\"StakingPools: pool ended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures only the option contract can call the function\\r\\n     * @dev Checks if the caller is the option contract associated with the pool\\r\\n     */\\r\\n    modifier onlyOptionContract(uint256 poolId) {\\r\\n        require(msg.sender == poolInfos[poolId].optionContract, \\\"StakingPools: only option contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Ensures only the owner or the factory contract can call the function\\r\\n     * @dev Checks if the caller is the owner of the contract or the factory contract\\r\\n     */\\r\\n    modifier onlyOwnerOrFactory() {\\r\\n        require(\\r\\n            msg.sender == optionFactory || msg.sender == owner(),\\r\\n            \\\"StakingPools: caller is not the optionFactory or owner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetches detailed information for a specific pool\\r\\n     * @dev This function simply returns the PoolInfo struct from the poolInfos mapping\\r\\n     * @param poolId The ID of the pool for which to fetch information\\r\\n     * @return PoolInfo struct containing detailed information about the pool\\r\\n     */\\r\\n    function getPoolInfo(uint256 poolId) external view returns (PoolInfo memory) {\\r\\n        return poolInfos[poolId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the pending reward for a specific user in a specific pool\\r\\n     * @dev This function calculates the pending reward for a user by using the accuRewardPerShare,\\r\\n     *      the amount the user has staked and the user's pendingReward\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param staker The address of the user\\r\\n     * @return The calculated pending reward for the user\\r\\n     */\\r\\n    function getPendingReward(uint256 poolId, address staker) external view returns (uint256) {\\r\\n        UserData memory currentUserData = userData[poolId][staker];\\r\\n        PoolInfo memory currentPoolInfo = poolInfos[poolId];\\r\\n        PoolData memory currentPoolData = poolData[poolId];\\r\\n\\r\\n        uint256 latestAccuRewardPerShare = currentPoolData.totalStakeAmount > 0\\r\\n            ? currentPoolData.accuRewardPerShare.add(\\r\\n                MathUpgradeable\\r\\n                .min(block.number, currentPoolInfo.endBlock)\\r\\n                .sub(currentPoolData.accuRewardLastUpdateBlock)\\r\\n                .mul(currentPoolInfo.rewardPerBlock)\\r\\n                .mul(ACCU_REWARD_MULTIPLIER)\\r\\n                .div(currentPoolData.totalStakeAmount)\\r\\n            )\\r\\n            : currentPoolData.accuRewardPerShare;\\r\\n\\r\\n        return\\r\\n            currentUserData.pendingReward.add(\\r\\n                currentUserData.stakeAmount.mul(latestAccuRewardPerShare.sub(currentUserData.entryAccuRewardPerShare)).div(\\r\\n                    ACCU_REWARD_MULTIPLIER\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetches the amount staked by a specific user in a specific pool\\r\\n     * @dev This function returns the stakeAmount from the UserData struct\\r\\n     *      in the userData mapping for the user in the specified pool\\r\\n     * @param user The address of the user\\r\\n     * @param poolId The ID of the pool\\r\\n     * @return The amount staked by the user in the pool\\r\\n     */\\r\\n    function getStakingAmountByPoolID(address user, uint256 poolId) external view override returns (uint256) {\\r\\n        return userData[poolId][user].stakeAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializer function for StakingPools contract\\r\\n     * @dev Calls the initializer of the parent Ownable contract. Only callable once.\\r\\n     */\\r\\n    function __StakingPools_init() public initializer {\\r\\n        __Ownable_init();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new staking pool\\r\\n     * @dev The function will create a new pool with the provided parameters and emit a PoolCreated event\\r\\n     * @param token The token that can be staked in the pool\\r\\n     * @param optionContract The address of the option contract associated with the pool\\r\\n     * @param startBlock The block at which staking starts\\r\\n     * @param endBlock The block at which staking ends\\r\\n     * @param rewardPerBlock The amount of reward token distributed per block\\r\\n     */\\r\\n    function createPool(\\r\\n        address token,\\r\\n        address optionContract,\\r\\n        uint256 startBlock,\\r\\n        uint256 endBlock,\\r\\n        uint256 rewardPerBlock\\r\\n    ) external override onlyOwnerOrFactory {\\r\\n        require(token != address(0), \\\"StakingPools: zero address\\\");\\r\\n        require(optionContract != address(0), \\\"StakingPools: zero address\\\");\\r\\n        require(startBlock > block.number && endBlock > startBlock, \\\"StakingPools: invalid block range\\\");\\r\\n        require(rewardPerBlock > 0, \\\"StakingPools: reward must be positive\\\");\\r\\n\\r\\n        uint256 newPoolId = ++lastPoolId;\\r\\n\\r\\n        poolInfos[newPoolId] = PoolInfo({\\r\\n            startBlock: startBlock,\\r\\n            endBlock: endBlock,\\r\\n            rewardPerBlock: rewardPerBlock,\\r\\n            poolToken: token,\\r\\n            optionContract: optionContract,\\r\\n            isActive: true\\r\\n        });\\r\\n        poolData[newPoolId] = PoolData({totalStakeAmount: 0, accuRewardPerShare: 0, accuRewardLastUpdateBlock: startBlock});\\r\\n\\r\\n        emit PoolCreated(newPoolId, token, optionContract, startBlock, endBlock, rewardPerBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Extends the end block of a pool\\r\\n     * @dev The function will update the endBlock of a pool and emit a PoolEndBlockExtended event\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param newEndBlock The new end block for the pool\\r\\n     */\\r\\n    function extendEndBlock(uint256 poolId, uint256 newEndBlock)\\r\\n        external\\r\\n        override\\r\\n        onlyOwnerOrFactory\\r\\n        onlyPoolExists(poolId)\\r\\n        onlyPoolNotEnded(poolId)\\r\\n    {\\r\\n        uint256 currentEndBlock = poolInfos[poolId].endBlock;\\r\\n        require(newEndBlock > currentEndBlock, \\\"StakingPools: end block not extended\\\");\\r\\n\\r\\n        poolInfos[poolId].endBlock = newEndBlock;\\r\\n\\r\\n        emit PoolEndBlockExtended(poolId, currentEndBlock, newEndBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the per block reward for a pool\\r\\n     * @dev The function will update the rewardPerBlock of a pool and emit a PoolRewardRateChanged event\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param newRewardPerBlock The new reward per block for the pool\\r\\n     */\\r\\n    function setPoolReward(uint256 poolId, uint256 newRewardPerBlock)\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyPoolExists(poolId)\\r\\n        onlyPoolNotEnded(poolId)\\r\\n    {\\r\\n        if (block.number >= poolInfos[poolId].startBlock) {\\r\\n            // \\\"Settle\\\" rewards up to this block\\r\\n            _updatePoolAccuReward(poolId);\\r\\n        }\\r\\n\\r\\n        // We're deliberately allowing setting the reward rate to 0 here. If it turns\\r\\n        // out this, or even changing rates at all, is undesirable after deployment, the\\r\\n        // ownership of this contract can be transferred to a contract incapable of making\\r\\n        // calls to this function.\\r\\n        uint256 currentRewardPerBlock = poolInfos[poolId].rewardPerBlock;\\r\\n        poolInfos[poolId].rewardPerBlock = newRewardPerBlock;\\r\\n\\r\\n        emit PoolRewardRateChanged(poolId, currentRewardPerBlock, newRewardPerBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the active status of a pool\\r\\n     * @dev The function will update the isActive field of a pool and emit an IsActiveChanged event\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param isActive The new active status for the pool\\r\\n     */\\r\\n    function setIsActive(uint256 poolId, bool isActive) external onlyOwner onlyPoolExists(poolId) {\\r\\n        poolInfos[poolId].isActive = isActive;\\r\\n\\r\\n        emit IsActiveChanged(poolId, isActive);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the rewarder contract\\r\\n     * @dev The function will update the rewarder field of the contract and emit a RewarderChanged event\\r\\n     * @param newRewarder The address of the new rewarder contract\\r\\n     */\\r\\n    function setRewarder(address newRewarder) external onlyOwner {\\r\\n        require(newRewarder != address(0), \\\"StakingPools: zero address\\\");\\r\\n\\r\\n        address oldRewarder = address(rewarder);\\r\\n        rewarder = IStakingPoolRewarder(newRewarder);\\r\\n\\r\\n        emit RewarderChanged(oldRewarder, newRewarder);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the factory contract\\r\\n     * @dev The function will update the optionFactory field of the contract and emit a FactoryChanged event\\r\\n     * @param newFactory The address of the new factory contract\\r\\n     */\\r\\n    function setFactory(address newFactory) external onlyOwner {\\r\\n        require(newFactory != address(0), \\\"StakingPools: zero address\\\");\\r\\n\\r\\n        address oldFactory = optionFactory;\\r\\n        optionFactory = newFactory;\\r\\n\\r\\n        emit FactoryChanged(oldFactory, optionFactory);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to stake a certain amount in a specific pool\\r\\n     * @dev Updates the pool's accumulated rewards and the user's reward, then stakes the specified amount.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param amount The amount to stake\\r\\n     */\\r\\n    function stake(uint256 poolId, uint256 amount) external onlyPoolExists(poolId) onlyPoolActive(poolId) {\\r\\n        _updatePoolAccuReward(poolId);\\r\\n        _updateStakerReward(poolId, msg.sender);\\r\\n\\r\\n        _stake(poolId, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to unstake a certain amount from a specific pool\\r\\n     * @dev Updates the pool's accumulated rewards and the user's reward, then unstakes the specified amount.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param amount The amount to unstake\\r\\n     */\\r\\n    function unstake(uint256 poolId, uint256 amount) external onlyPoolExists(poolId) {\\r\\n        _updatePoolAccuReward(poolId);\\r\\n        _updateStakerReward(poolId, msg.sender);\\r\\n\\r\\n        _unstake(poolId, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows an option contract to stake on behalf of a user in a specific pool\\r\\n     * @dev Updates the pool's accumulated rewards and the user's reward, then stakes the specified amount. Additionally, updates the user's entry time and vests any pending rewards.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param amount The amount to stake\\r\\n     * @param user The address of the user\\r\\n     */\\r\\n    function stakeFor(\\r\\n        uint256 poolId,\\r\\n        uint256 amount,\\r\\n        address user\\r\\n    ) external override onlyPoolExists(poolId) onlyPoolActive(poolId) onlyOptionContract(poolId) {\\r\\n        require(user != address(0), \\\"StakingPools: zero address\\\");\\r\\n\\r\\n        _updatePoolAccuReward(poolId);\\r\\n        _updateStakerReward(poolId, user);\\r\\n\\r\\n        require(amount > 0, \\\"StakingPools: cannot stake zero amount\\\");\\r\\n\\r\\n        userData[poolId][user].stakeAmount = userData[poolId][user].stakeAmount.add(amount);\\r\\n        poolData[poolId].totalStakeAmount = poolData[poolId].totalStakeAmount.add(amount);\\r\\n\\r\\n        _vestPendingRewards(poolId, user);\\r\\n        userData[poolId][user].entryTime = block.timestamp;\\r\\n\\r\\n        emit Staked(poolId, user, poolInfos[poolId].poolToken, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows an option contract to unstake on behalf of a user from a specific pool\\r\\n     * @dev Updates the pool's accumulated rewards and the user's reward, then unstakes the specified amount. Transfers the unstaked tokens back to the user.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param amount The amount to unstake\\r\\n     * @param user The address of the user\\r\\n     */\\r\\n    function unstakeFor(\\r\\n        uint256 poolId,\\r\\n        uint256 amount,\\r\\n        address user\\r\\n    ) external override onlyPoolExists(poolId) onlyOptionContract(poolId) {\\r\\n        require(user != address(0), \\\"StakingPools: zero address\\\");\\r\\n\\r\\n        _updatePoolAccuReward(poolId);\\r\\n        _updateStakerReward(poolId, user);\\r\\n\\r\\n        require(amount > 0, \\\"StakingPools: cannot unstake zero amount\\\");\\r\\n\\r\\n        userData[poolId][user].stakeAmount = userData[poolId][user].stakeAmount.sub(amount);\\r\\n        poolData[poolId].totalStakeAmount = poolData[poolId].totalStakeAmount.sub(amount);\\r\\n\\r\\n        safeTransfer(poolInfos[poolId].poolToken, user, amount);\\r\\n\\r\\n        emit Unstaked(poolId, user, poolInfos[poolId].poolToken, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to emergency unstake all staked tokens from a specific pool\\r\\n     * @dev Unstakes all staked tokens and forfeits any pending rewards to prevent abuse. This function can be used when the user wants to quickly withdraw all staked tokens without claiming the rewards.\\r\\n     * @param poolId The ID of the pool\\r\\n     */\\r\\n    function emergencyUnstake(uint256 poolId) external onlyPoolExists(poolId) {\\r\\n        _unstake(poolId, msg.sender, userData[poolId][msg.sender].stakeAmount);\\r\\n\\r\\n        userData[poolId][msg.sender].pendingReward = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to redeem rewards from a specific pool\\r\\n     * @dev Calls the _redeemRewardsByAddress private function with the caller's address to claim rewards from the pool.\\r\\n     * @param poolId The ID of the pool\\r\\n     */\\r\\n    function redeemRewards(uint256 poolId) external {\\r\\n        _redeemRewardsByAddress(poolId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to redeem rewards from a list of pools\\r\\n     * @dev Calls the _redeemRewardsByAddress private function for each pool in the list to claim rewards from the pools.\\r\\n     * @param poolIds An array of the pool IDs\\r\\n     */\\r\\n    function redeemRewardsByList(uint256[] memory poolIds) external {\\r\\n        for (uint256 i = 0; i < poolIds.length; i++) {\\r\\n            _redeemRewardsByAddress(poolIds[i], msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows to redeem rewards from a specific pool for a specific user\\r\\n     * @dev Calls the _redeemRewardsByAddress private function with the specified user address to claim rewards from the pool.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param user The address of the user\\r\\n     */\\r\\n    function redeemRewardsByAddress(uint256 poolId, address user) external override {\\r\\n        _redeemRewardsByAddress(poolId, user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to unstake a certain amount from a specific pool and redeem the rewards\\r\\n     * @dev Updates the pool's accumulated rewards and the user's reward, then unstakes the specified amount. Afterwards, redeems the rewards for the user.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param amount The amount to unstake\\r\\n     */\\r\\n    function unstakeAndRedeemReward(uint256 poolId, uint256 amount) external {\\r\\n        _updatePoolAccuReward(poolId);\\r\\n        _updateStakerReward(poolId, msg.sender);\\r\\n\\r\\n        _unstake(poolId, msg.sender, amount);\\r\\n\\r\\n        _redeemRewardsByAddress(poolId, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems the rewards for a user in a specific pool\\r\\n     * @dev Updates the pool's and the user's rewards, checks that the rewarder is set, vests any pending rewards and claims vested rewards for the user.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param user The address of the user\\r\\n     */\\r\\n    function _redeemRewardsByAddress(uint256 poolId, address user) private onlyPoolExists(poolId) {\\r\\n        require(user != address(0), \\\"StakingPools: zero address\\\");\\r\\n\\r\\n        _updatePoolAccuReward(poolId);\\r\\n        _updateStakerReward(poolId, user);\\r\\n\\r\\n        require(address(rewarder) != address(0), \\\"StakingPools: rewarder not set\\\");\\r\\n\\r\\n        _vestPendingRewards(poolId, user);\\r\\n\\r\\n        uint256 claimed = rewarder.claimVestedReward(poolId, user);\\r\\n\\r\\n        emit RewardRedeemed(poolId, user, address(rewarder), claimed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Vests the pending rewards for a user in a specific pool\\r\\n     * @dev Resets the user's pending reward to zero and transfers them to the rewarder contract, specifying the user's entry time.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param user The address of the user\\r\\n     */\\r\\n    function _vestPendingRewards(uint256 poolId, address user) private onlyPoolExists(poolId) {\\r\\n        uint256 rewardToVest = userData[poolId][user].pendingReward;\\r\\n        userData[poolId][user].pendingReward = 0;\\r\\n        rewarder.onReward(poolId, user, rewardToVest, userData[poolId][user].entryTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to stake a certain amount in a specific pool\\r\\n     * @dev Transfers the specified amount of the pool's token from the user to the contract, updates the user's stake amount, and resets the user's entry time.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param user The address of the user\\r\\n     * @param amount The amount to stake\\r\\n     */\\r\\n    function _stake(\\r\\n        uint256 poolId,\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(amount > 0, \\\"StakingPools: cannot stake zero amount\\\");\\r\\n\\r\\n        userData[poolId][user].stakeAmount = userData[poolId][user].stakeAmount.add(amount);\\r\\n        poolData[poolId].totalStakeAmount = poolData[poolId].totalStakeAmount.add(amount);\\r\\n\\r\\n        safeTransferFrom(poolInfos[poolId].poolToken, user, address(this), amount);\\r\\n\\r\\n        _vestPendingRewards(poolId, user);\\r\\n        userData[poolId][user].entryTime = block.timestamp;\\r\\n\\r\\n        emit Staked(poolId, user, poolInfos[poolId].poolToken, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows a user to unstake a certain amount from a specific pool\\r\\n     * @dev Transfers the specified amount of the pool's token back to the user and updates the user's stake amount.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param user The address of the user\\r\\n     * @param amount The amount to unstake\\r\\n     */\\r\\n    function _unstake(\\r\\n        uint256 poolId,\\r\\n        address user,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(amount > 0, \\\"StakingPools: cannot unstake zero amount\\\");\\r\\n\\r\\n        userData[poolId][user].stakeAmount = userData[poolId][user].stakeAmount.sub(amount);\\r\\n        poolData[poolId].totalStakeAmount = poolData[poolId].totalStakeAmount.sub(amount);\\r\\n\\r\\n        safeTransfer(poolInfos[poolId].poolToken, user, amount);\\r\\n\\r\\n        emit Unstaked(poolId, user, poolInfos[poolId].poolToken, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the accumulated reward per share for a specific pool\\r\\n     * @dev If there has been more than one block since the last update and the total staked amount is positive, the accumulated reward per share is increased based on the number of blocks since the last update and the pool's reward per block.\\r\\n     * @param poolId The ID of the pool\\r\\n     */\\r\\n    function _updatePoolAccuReward(uint256 poolId) private {\\r\\n        PoolInfo storage currentPoolInfo = poolInfos[poolId];\\r\\n        PoolData storage currentPoolData = poolData[poolId];\\r\\n\\r\\n        uint256 appliedUpdateBlock = MathUpgradeable.min(block.number, currentPoolInfo.endBlock);\\r\\n        uint256 durationInBlocks = appliedUpdateBlock.sub(currentPoolData.accuRewardLastUpdateBlock);\\r\\n\\r\\n        if (durationInBlocks > 0) {\\r\\n            if (currentPoolData.totalStakeAmount > 0) {\\r\\n                currentPoolData.accuRewardPerShare = currentPoolData.accuRewardPerShare.add(\\r\\n                    durationInBlocks.mul(currentPoolInfo.rewardPerBlock).mul(ACCU_REWARD_MULTIPLIER).div(\\r\\n                        currentPoolData.totalStakeAmount\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n            currentPoolData.accuRewardLastUpdateBlock = appliedUpdateBlock;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the pending reward and entry accumulated reward per share for a staker in a specific pool\\r\\n     * @dev If the pool's accumulated reward per share has increased since the staker's entry, the staker's pending reward is increased based on their stake amount and the difference in accumulated reward per share, and their entry accumulated reward per share is updated.\\r\\n     * @param poolId The ID of the pool\\r\\n     * @param staker The address of the staker\\r\\n     */\\r\\n    function _updateStakerReward(uint256 poolId, address staker) private {\\r\\n        UserData storage currentUserData = userData[poolId][staker];\\r\\n        PoolData storage currentPoolData = poolData[poolId];\\r\\n\\r\\n        uint256 stakeAmount = currentUserData.stakeAmount;\\r\\n        uint256 stakerEntryRate = currentUserData.entryAccuRewardPerShare;\\r\\n        uint256 accuDifference = currentPoolData.accuRewardPerShare.sub(stakerEntryRate);\\r\\n\\r\\n        if (accuDifference > 0) {\\r\\n            currentUserData.pendingReward = currentUserData.pendingReward.add(\\r\\n                stakeAmount.mul(accuDifference).div(ACCU_REWARD_MULTIPLIER)\\r\\n            );\\r\\n            currentUserData.entryAccuRewardPerShare = currentPoolData.accuRewardPerShare;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the contract to approve the transfer of a certain amount of a token on behalf of the contract\\r\\n     * @dev Calls the approve function of the token contract with the specified spender and amount, and requires that the call was successful.\\r\\n     * @param token The address of the token contract\\r\\n     * @param spender The address of the spender\\r\\n     * @param amount The amount to approve\\r\\n     */\\r\\n    function safeApprove(\\r\\n        address token,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(APPROVE_SELECTOR, spender, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"StakingPools: approve failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the contract to transfer a certain amount of a token to a recipient\\r\\n     * @dev Calls the transfer function of the token contract with the specified recipient and amount, and requires that the call was successful.\\r\\n     * @param token The address of the token contract\\r\\n     * @param recipient The address of the recipient\\r\\n     * @param amount The amount to transfer\\r\\n     */\\r\\n    function safeTransfer(\\r\\n        address token,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, recipient, amount));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"StakingPools: transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allows the contract to transfer a certain amount of a token from a sender to a recipient\\r\\n     * @dev Calls the transferFrom function of the token contract with the specified sender, recipient, and amount, and requires that the call was successful.\\r\\n     * @param token The address of the token contract\\r\\n     * @param sender The address of the sender\\r\\n     * @param recipient The address of the recipient\\r\\n     * @param amount The amount to transfer\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address token,\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        (bool success, bytes memory data) = token.call(\\r\\n            abi.encodeWithSelector(TRANSFERFROM_SELECTOR, sender, recipient, amount)\\r\\n        );\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"StakingPools: transferFrom failed\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPoolRewarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IStakingPoolRewarder interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for calculating and distributing staking pool rewards\\r\\n */\\r\\ninterface IStakingPoolRewarder {\\r\\n    /**\\r\\n     * @notice Calculate the total amount of reward tokens for the specified user and pool ID\\r\\n     * @dev Calculates the total amount of reward tokens for the specified user and pool ID\\r\\n     * @param user The address of the user to calculate rewards for\\r\\n     * @param poolId The ID of the staking pool to calculate rewards for\\r\\n     * @return The total amount of reward tokens for the specified user and pool ID\\r\\n     */\\r\\n    function calculateTotalReward(address user, uint256 poolId) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     * @dev Calculates the amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     * @param user The address of the user to calculate rewards for\\r\\n     * @param poolId The ID of the staking pool to calculate rewards for\\r\\n     * @return The amount of reward tokens that can be withdrawn by the specified user and pool ID\\r\\n     */\\r\\n    function calculateWithdrawableReward(address user, uint256 poolId) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Update the vesting schedule and claimable amounts for the specified user and pool ID\\r\\n     * @dev Calculates and updates the user's vested and unvested token amounts based on their staking activity, and adds any vested tokens to the user's claimable amounts.\\r\\n     * @param poolId The ID of the staking pool to update vesting schedule and claimable amounts for\\r\\n     * @param user The address of the user to update vesting schedule and claimable amounts for\\r\\n     * @param amount The amount of reward tokens earned by the user\\r\\n     * @param entryTime The timestamp of the user's entry into the staking pool\\r\\n     */\\r\\n    function onReward(uint256 poolId, address user, uint256 amount, uint256 entryTime) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Claim vested reward tokens for the specified user and pool ID\\r\\n     * @dev Claims vested reward tokens for the specified user and pool ID\\r\\n     * @param poolId The ID of the staking pool to claim rewards from\\r\\n     * @param user The address of the user to claim rewards for\\r\\n     * @return The amount of vested reward tokens claimed by the specified user and pool ID\\r\\n     */\\r\\n    function claimVestedReward(uint256 poolId, address user) external returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPools.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IStakingPools interface\\r\\n * @author DeOrderBook\\r\\n * @custom:license Copyright (c) DeOrderBook, 2023 \u2014 All Rights Reserved\\r\\n * @dev Interface for staking pools contract\\r\\n */\\r\\ninterface IStakingPools {\\r\\n    /**\\r\\n     * @notice Create a new staking pool\\r\\n     * @dev Creates a new staking pool with the specified parameters\\r\\n     * @param token The address of the ERC20 token contract to be staked\\r\\n     * @param optionContract The address of the Option contract\\r\\n     * @param startBlock The block number at which staking begins\\r\\n     * @param endBlock The block number at which staking ends\\r\\n     * @param rewardPerBlock The amount of reward tokens to be distributed per block\\r\\n     */\\r\\n    function createPool(\\r\\n        address token,\\r\\n        address optionContract,\\r\\n        uint256 startBlock,\\r\\n        uint256 endBlock,\\r\\n        uint256 rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Extend the end block of a staking pool\\r\\n     * @dev Extends the end block of a staking pool with the specified pool ID\\r\\n     * @param poolId The ID of the staking pool to extend\\r\\n     * @param newEndBlock The new end block of the staking pool\\r\\n     */\\r\\n    function extendEndBlock(uint256 poolId, uint256 newEndBlock) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Get the staking amount for a user and pool ID\\r\\n     * @dev Gets the staking amount for the specified user and pool ID\\r\\n     * @param user The address of the user to get the staking amount for\\r\\n     * @param poolId The ID of the staking pool to get the staking amount for\\r\\n     * @return The staking amount for the specified user and pool ID\\r\\n     */\\r\\n    function getStakingAmountByPoolID(address user, uint256 poolId) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Stake tokens on behalf of a user\\r\\n     * @dev Stakes tokens on behalf of the specified user for the specified staking pool\\r\\n     * @param poolId The ID of the staking pool to stake tokens for\\r\\n     * @param amount The amount of tokens to stake\\r\\n     * @param user The address of the user to stake tokens for\\r\\n     */\\r\\n    function stakeFor(uint256 poolId, uint256 amount, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Unstake tokens on behalf of a user\\r\\n     * @dev Unstakes tokens on behalf of the specified user for the specified staking pool\\r\\n     * @param poolId The ID of the staking pool to unstake tokens for\\r\\n     * @param amount The amount of tokens to unstake\\r\\n     * @param user The address of the user to unstake tokens for\\r\\n     */\\r\\n    function unstakeFor(uint256 poolId, uint256 amount, address user) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Redeem rewards for a user and pool ID\\r\\n     * @dev Redeems rewards for the specified user and pool ID\\r\\n     * @param poolId The ID of the staking pool to redeem rewards from\\r\\n     * @param user The address of the user to redeem rewards for\\r\\n     */\\r\\n    function redeemRewardsByAddress(uint256 poolId, address user) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"FactoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"IsActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"optionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEndBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndBlock\",\"type\":\"uint256\"}],\"name\":\"PoolEndBlockExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardPerBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"PoolRewardRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"RewarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__StakingPools_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newEndBlock\",\"type\":\"uint256\"}],\"name\":\"extendEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getPendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"struct StakingPools.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getStakingAmountByPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuRewardLastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"redeemRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"redeemRewardsByAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"poolIds\",\"type\":\"uint256[]\"}],\"name\":\"redeemRewardsByList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IStakingPoolRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setIsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"setPoolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewarder\",\"type\":\"address\"}],\"name\":\"setRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeAndRedeemReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unstakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryAccuRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StakingPools", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}