{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\ncontract Tree {\r\n    address public anaAddress;\r\n    address public reLockAddress;\r\n    address public ownerAddress;\r\n    uint256 public anaAmount = 10**10;\r\n    uint256 public swapTimesLimit;\r\n    mapping(uint256 => uint256) public swapLimitMap;\r\n\r\n    struct tokenInfo {\r\n        address tokenAddress;\r\n        uint256 currentBlock;\r\n        uint256 currentPrice;\r\n        uint256 swapTimes;\r\n        uint256 deployTime;\r\n    }\r\n    uint256 public tokenN;\r\n    mapping(uint256 => tokenInfo) public tokenList;\r\n    mapping(address => tokenInfo) public tokenListTempMap;\r\n    \r\n    constructor(address addr1,address addr2, uint256[] memory swapLimitList) {\r\n        anaAddress = addr1;\r\n        reLockAddress = addr2;\r\n        for(uint256 i=0;i<swapLimitList.length;i++) swapLimitMap[i+1] = swapLimitList[i];\r\n    }\r\n    function scyncData() public {\r\n        (bool success, bytes memory data) = anaAddress.call(abi.encodeWithSignature(\"ownerAddress()\"));\r\n        require(success, \"syncData failed\");\r\n        ownerAddress = abi.decode(data, (address));\r\n\r\n        ( success, data) = anaAddress.call(abi.encodeWithSignature(\"highPrice10000()\"));\r\n        require(success, \"syncData failed 2\");\r\n        uint256 highPrice10000 = abi.decode(data, (uint256));\r\n\r\n        swapTimesLimit = 0;\r\n        uint256 paramMax = highPrice10000 < 10000 ? 0 : (highPrice10000 - 6000)/4000;\r\n        for(uint256 param = 1; param <= paramMax; param++) swapTimesLimit += swapLimitMap[param];\r\n    }\r\n    function claimANA() public{\r\n        (bool success, ) = anaAddress.call(abi.encodeWithSignature(\"claim()\"));\r\n        require(success, \"claim failed 1\");\r\n        (success, ) = reLockAddress.call(abi.encodeWithSignature(\"claim()\"));\r\n        require(success, \"claim failed 2\");\r\n    }\r\n    function claimToken(uint256 _n, uint256 amount) checkOwner public {\r\n        tokenInfo memory t = tokenList[_n];\r\n        require(block.number > t.deployTime + 7200 * 365 * 3, \"wait 3 years\");\r\n        (bool success, bytes memory data) = t.tokenAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", ownerAddress, amount));\r\n        require(success && abi.decode(data, (bool)), \"transfer failed\");\r\n    }\r\n\r\n    modifier checkOwner{\r\n        require(msg.sender == ownerAddress, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    function newToken_1(address tokenAddress, uint256 currentPrice) checkOwner public {\r\n        tokenListTempMap[tokenAddress] = tokenInfo(tokenAddress, block.number, currentPrice, 0, block.number);\r\n    }\r\n    function newToken_2(address tokenAddress) checkOwner public {\r\n        require(tokenListTempMap[tokenAddress].currentPrice > 0, \"set tokenListTempMap first\");\r\n        tokenList[++tokenN] = tokenListTempMap[tokenAddress];\r\n        tokenListTempMap[tokenAddress].currentPrice = 0;\r\n    }\r\n\r\n    function swap(uint256 _n) public {\r\n        tokenInfo memory t = tokenList[_n];\r\n        require(block.number > t.currentBlock + 3600, \"wait 12 hours\");\r\n        require(t.swapTimes < swapTimesLimit, \"swapTimesLimit\");\r\n\r\n        uint256 diff = block.number - t.currentBlock - 3600;\r\n        uint256 price = diff < 300 ? t.currentPrice * 2 : (diff >= 1200 ? t.currentPrice / 2 : t.currentPrice * (1200-diff) / 600);\r\n        uint256 tokAmount = anaAmount * price / 10**18;\r\n\r\n        (bool success, bytes memory data) = t.tokenAddress.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), tokAmount));\r\n        require(success && abi.decode(data, (bool)), \"transferFrom failed\");\r\n        (success, data) = anaAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, anaAmount));\r\n        require(success && abi.decode(data, (bool)), \"transfer failed\");\r\n        \r\n        tokenList[_n].currentBlock = block.number;\r\n        tokenList[_n].currentPrice = price;\r\n        tokenList[_n].swapTimes ++;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"swapLimitList\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"anaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anaAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimANA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"}],\"name\":\"newToken_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"newToken_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reLockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scyncData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapLimitMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTimesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deployTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenListTempMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTimes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deployTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Tree", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dd5c345e098259426bfd44e9f2fd69c7c811b1f60000000000000000000000008570486381c92cb0b02b19c9b012f0d0534755900000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000aersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://882e52bb70fbcf4edb9568e67692af59a4b1df0591dd01f4547b44a08dab6ad4"}