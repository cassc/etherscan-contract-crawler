{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract TriviaGame {\r\n    using SafeMath for uint256;\r\n    IERC20 token;\r\n    address public owner;\r\n    address public gameMaster;\r\n    bool public playingActive = true;\r\n    uint public currentGame = 0;\r\n    uint public gameBet = 0;\r\n    bool public gameActive = false;\r\n    uint public gamePot = 0;\r\n    address public revenueWallet;\r\n    uint256 public revenueBps = 800;\r\n    uint256 public burnBps = 200;\r\n\r\n    event NewGame(uint id, address[] players, uint pot);\r\n    event Win(address player, uint256 amount);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        revenueWallet = address(0x57938dF55F34b8bA723ec8af9Bec47e28a889744);\r\n        gameMaster = address(0x93C92290b408f9BAe71BF0DB3D3Fb43f919015fD);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrGameMaster() {\r\n        require(msg.sender == gameMaster || msg.sender == owner, \"not authorized\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    \r\n    function start(address[] memory _players, uint _bet) public onlyOwnerOrGameMaster\r\n    {\r\n        require(playingActive == true,\"Maintenance in progress\");\r\n        require(gameActive == false,\"A previous game is still running\");\r\n        require(_players.length > 1,\"Not enough players\");\r\n\r\n        uint bet = _bet * 10** 9;\r\n        for (uint16 i = 0; i < _players.length; i++) {\r\n            require(token.allowance(_players[i], address(this)) >= bet ,\"Not enough allowance\");\r\n            bool isSent = token.transferFrom(_players[i], address(this), bet);\r\n            require(isSent, \"Funds transfer failed\");\r\n        }\r\n\r\n        gamePot = _players.length * bet;\r\n        gameBet = bet;\r\n        gameActive = true;\r\n\r\n        emit NewGame(currentGame,_players,gamePot);\r\n    }\r\n\r\n    function end(address winner) public onlyOwnerOrGameMaster\r\n    {\r\n        require(playingActive == true,\"Maintenance in progress\");\r\n        require(gameActive == true,\"No game running\");\r\n        \r\n        uint256 burnShare = gamePot * burnBps / 10_000;\r\n        uint256 approxRevenueShare = gamePot * revenueBps / 10_000;\r\n\r\n        uint256 totalWinnings = gamePot - burnShare - approxRevenueShare;\r\n \r\n        bool isSent = token.transfer(winner, totalWinnings);\r\n        require(isSent, \"Funds transfer failed\");\r\n        \r\n        token.transfer(address(0x000000000000000000000000000000000000dEaD), burnShare);\r\n\r\n        uint256 realRevenueShare = gamePot - totalWinnings - burnShare;\r\n        isSent = token.transfer(revenueWallet, realRevenueShare);\r\n        require(isSent, \"Revenue transfer failed\");\r\n\r\n        currentGame++;\r\n        gameActive = false;\r\n\r\n        emit Win(winner,totalWinnings);\r\n    }\r\n\r\n    function refund(address[] memory _players, uint _bet) public onlyOwnerOrGameMaster\r\n    {\r\n        require(playingActive == true,\"Maintenance in progress\");\r\n        require(gameActive == true,\"No game running\");\r\n\r\n        for (uint16 i = 0; i < _players.length; i++) {\r\n            bool isSent = token.transfer(_players[i], _bet);\r\n            require(isSent, \"Funds transfer failed\");\r\n        }\r\n        \r\n        currentGame++;\r\n        gameActive = false;\r\n    }\r\n    function toggleGame() external onlyOwner() {\r\n        playingActive = !playingActive;\r\n    }\r\n    function updateRevenueWallet(address _wallet) external onlyOwner {\r\n        revenueWallet = _wallet;\r\n    }\r\n\r\n    function updateRevenueBps(uint amount) external onlyOwner {\r\n        revenueBps = amount;\r\n    }\r\n\r\n    function updateBurnBps(uint amount) external onlyOwner {\r\n        burnBps = amount;\r\n    }\r\n\r\n    function setTokenAddress(address payable _tokenAddress) external onlyOwner() {\r\n       token = IERC20(address(_tokenAddress));\r\n    }\r\n\r\n    function setGMAddress(address _gameMaster) external onlyOwner() {\r\n       gameMaster = _gameMaster;\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        (bool success, ) = msg.sender.call{ value: address(this).balance } (\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    function withdrawStuckToken() external onlyOwner {\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"}],\"name\":\"NewGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burnBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamePot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameMaster\",\"type\":\"address\"}],\"name\":\"setGMAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_bet\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateBurnBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRevenueBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"updateRevenueWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TriviaGame", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c47ecd8d73be8c007ee335cf7f5979d383127d050464258a08b21a8d12195f2c"}