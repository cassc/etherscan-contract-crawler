{"SourceCode": "//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\n\r\n// File: contracts/ISynthetix.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface ISynthetix {\r\n    function exchange(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function exchangeWithTracking(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey,\r\n        address originator,\r\n        bytes32 trackingCode\r\n    ) external returns (uint256 amountReceived);\r\n\r\n    function synths(bytes32 key)\r\n        external\r\n        view\r\n        returns (address synthTokenAddress);\r\n\r\n    function settle(bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint256 reclaimed,\r\n            uint256 refunded,\r\n            uint256 numEntriesSettled\r\n        );\r\n}\r\n\r\n// File: contracts/IExchangeRates.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IExchangeRates {\r\n    function effectiveValue(\r\n        bytes32 sourceCurrencyKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationCurrencyKey\r\n    ) external view returns (uint256);\r\n\r\n    function rateForCurrency(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\n// File: contracts/IAddressResolver.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IAddressResolver {\r\n    function getAddress(bytes32 name) external view returns (address);\r\n}\r\n\r\n// File: contracts/IExchanger.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IExchanger {\r\n\r\n    function settle(address from, bytes32 currencyKey)\r\n        external\r\n        returns (\r\n            uint reclaimed,\r\n            uint refunded,\r\n            uint numEntries\r\n        );\r\n\r\n    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\r\n\r\n    function settlementOwing(address account, bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (\r\n            uint reclaimAmount,\r\n            uint rebateAmount,\r\n            uint numEntries\r\n        );\r\n\r\n}\r\n\r\n// File: contracts/ISynth.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface ISynth {\r\n    function proxy() external view returns (address);\r\n\r\n    // Mutative functions\r\n    function transferAndSettle(address to, uint256 value)\r\n        external\r\n        returns (bool);\r\n\r\n    function transferFromAndSettle(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/ISystemStatus.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface ISystemStatus {\r\n    struct Status {\r\n        bool canSuspend;\r\n        bool canResume;\r\n    }\r\n\r\n    struct Suspension {\r\n        bool suspended;\r\n        // reason is an integer code,\r\n        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\r\n        uint248 reason;\r\n    }\r\n\r\n    // Views\r\n//    function getSynthExchangeSuspensions(bytes32[] calldata synths)\r\n//        external\r\n//        view\r\n//        returns (bool[] memory exchangeSuspensions, uint256[] memory reasons);\r\n\r\n    function synthExchangeSuspension(bytes32 currencyKey)\r\n        external\r\n        view\r\n        returns (bool suspended, uint248 reason);\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Managed.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract Managed is Initializable {\r\n    using SafeMath for uint256;\r\n\r\n    event ManagerUpdated(address newManager, string newManagerName);\r\n\r\n    address private _manager;\r\n    string private _managerName;\r\n\r\n    address[] private _memberList;\r\n    mapping(address => uint256) private _memberPosition;\r\n\r\n    address private _trader;\r\n\r\n    function initialize(address manager, string memory managerName)\r\n        internal\r\n        initializer\r\n    {\r\n        _manager = manager;\r\n        _managerName = managerName;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager, \"only manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManagerOrTrader() {\r\n        require(msg.sender == _manager || msg.sender == _trader, \"only manager or trader\");\r\n        _;\r\n    }\r\n\r\n    function managerName() public view returns (string memory) {\r\n        return _managerName;\r\n    }\r\n\r\n    function manager() public view returns (address) {\r\n        return _manager;\r\n    }\r\n\r\n    function isMemberAllowed(address member) public view returns (bool) {\r\n        return _memberPosition[member] != 0;\r\n    }\r\n\r\n    function getMembers() public view returns (address[] memory) {\r\n        return _memberList;\r\n    }\r\n\r\n    function changeManager(address newManager, string memory newManagerName)\r\n        public\r\n        onlyManager\r\n    {\r\n        _manager = newManager;\r\n        _managerName = newManagerName;\r\n        emit ManagerUpdated(newManager, newManagerName);\r\n    }\r\n\r\n    function addMembers(address[] memory members) public onlyManager {\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            if (isMemberAllowed(members[i]))\r\n                continue;\r\n\r\n            _addMember(members[i]);\r\n        }\r\n    }\r\n\r\n    function removeMembers(address[] memory members) public onlyManager {\r\n        for (uint256 i = 0; i < members.length; i++) {\r\n            if (!isMemberAllowed(members[i]))\r\n                continue;\r\n\r\n            _removeMember(members[i]);\r\n        }\r\n    }\r\n\r\n    function addMember(address member) public onlyManager {\r\n        if (isMemberAllowed(member))\r\n            return;\r\n\r\n        _addMember(member);\r\n    }\r\n\r\n    function removeMember(address member) public onlyManager {\r\n        if (!isMemberAllowed(member))\r\n            return;\r\n\r\n        _removeMember(member);\r\n    }\r\n\r\n    function trader() public view returns (address) {\r\n        return _trader;\r\n    }\r\n\r\n    function setTrader(address newTrader) public onlyManager {\r\n        _trader = newTrader;\r\n    }\r\n\r\n    function removeTrader() public onlyManager {\r\n        _trader = address(0);\r\n    }\r\n\r\n    function numberOfMembers() public view returns (uint256) {\r\n        return _memberList.length;\r\n    }\r\n\r\n    function _addMember(address member) internal {\r\n        _memberList.push(member);\r\n        _memberPosition[member] = _memberList.length;\r\n    }\r\n\r\n    function _removeMember(address member) internal {\r\n        uint256 length = _memberList.length;\r\n        uint256 index = _memberPosition[member].sub(1);\r\n\r\n        address lastMember = _memberList[length.sub(1)];\r\n\r\n        _memberList[index] = lastMember;\r\n        _memberPosition[lastMember] = index.add(1);\r\n        _memberPosition[member] = 0;\r\n\r\n        _memberList.pop();\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/IHasDaoInfo.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IHasDaoInfo {\r\n    function getDaoFee() external view returns (uint256, uint256);\r\n\r\n    function getDaoAddress() external view returns (address);\r\n\r\n    function getAddressResolver() external view returns (IAddressResolver);\r\n}\r\n\r\n// File: contracts/IHasProtocolDaoInfo.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IHasProtocolDaoInfo {\r\n    function owner() external view returns (address);\r\n}\r\n\r\n// File: contracts/IHasFeeInfo.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IHasFeeInfo {\r\n    // Manager fee\r\n    function getPoolManagerFee(address pool) external view returns (uint256, uint256);\r\n    function setPoolManagerFeeNumerator(address pool, uint256 numerator) external;\r\n\r\n    function getMaximumManagerFeeNumeratorChange() external view returns (uint256);\r\n    function getManagerFeeNumeratorChangeDelay() external view returns (uint256);\r\n   \r\n    // Exit fee\r\n    function getExitFee() external view returns (uint256, uint256);\r\n    function getExitFeeCooldown() external view returns (uint256);\r\n\r\n    // Synthetix tracking\r\n    function getTrackingCode() external view returns (bytes32);\r\n}\r\n\r\n// File: contracts/IHasAssetInfo.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IHasAssetInfo {\r\n    function getMaximumSupportedAssetCount() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/IReceivesUpgrade.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IReceivesUpgrade {\r\n    function receiveUpgrade(uint256 targetVersion) external;\r\n}\r\n\r\n// File: contracts/IHasDhptSwapInfo.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface IHasDhptSwapInfo {\r\n    // DHPT Swap Address\r\n    function getDhptSwapAddress() external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract ContextUpgradeSafe is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n\r\n\r\n    }\r\n\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20MinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n\r\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name, symbol);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\r\n\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n\r\n    uint256[44] private __gap;\r\n}\r\n\r\n// File: contracts/DHedge.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DHedge is Initializable, ERC20UpgradeSafe, Managed, IReceivesUpgrade {\r\n    using SafeMath for uint256;\r\n\r\n    bytes32 constant private _EXCHANGE_RATES_KEY = \"ExchangeRates\";\r\n    bytes32 constant private _SYNTHETIX_KEY = \"Synthetix\";\r\n    bytes32 constant private _EXCHANGER_KEY = \"Exchanger\";\r\n    bytes32 constant private _SYSTEM_STATUS_KEY = \"SystemStatus\";\r\n    bytes32 constant private _SUSD_KEY = \"sUSD\";\r\n\r\n    event Deposit(\r\n        address fundAddress,\r\n        address investor,\r\n        uint256 valueDeposited,\r\n        uint256 fundTokensReceived,\r\n        uint256 totalInvestorFundTokens,\r\n        uint256 fundValue,\r\n        uint256 totalSupply,\r\n        uint256 time\r\n    );\r\n    event Withdrawal(\r\n        address fundAddress,\r\n        address investor,\r\n        uint256 valueWithdrawn,\r\n        uint256 fundTokensWithdrawn,\r\n        uint256 totalInvestorFundTokens,\r\n        uint256 fundValue,\r\n        uint256 totalSupply,\r\n        uint256 time\r\n    );\r\n    event Exchange(\r\n        address fundAddress,\r\n        address manager,\r\n        bytes32 sourceKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationKey,\r\n        uint256 destinationAmount,\r\n        uint256 time\r\n    );\r\n    event AssetAdded(address fundAddress, address manager, bytes32 assetKey);\r\n    event AssetRemoved(address fundAddress, address manager, bytes32 assetKey);\r\n\r\n    event PoolPrivacyUpdated(bool isPoolPrivate);\r\n\r\n    event ManagerFeeMinted(\r\n        address pool,\r\n        address manager,\r\n        uint256 available,\r\n        uint256 daoFee,\r\n        uint256 managerFee,\r\n        uint256 tokenPriceAtLastFeeMint\r\n    );\r\n\r\n    event ManagerFeeSet(\r\n        address fundAddress,\r\n        address manager,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    );\r\n\r\n    event ManagerFeeIncreaseAnnounced(\r\n        uint256 newNumerator,\r\n        uint256 announcedFeeActivationTime);\r\n\r\n    event ManagerFeeIncreaseRenounced();\r\n\r\n    bool public privatePool;\r\n    address public creator;\r\n\r\n    uint256 public creationTime;\r\n\r\n    IAddressResolver public addressResolver;\r\n\r\n    address public factory;\r\n\r\n    bytes32[] public supportedAssets;\r\n    mapping(bytes32 => uint256) public assetPosition; // maps the asset to its 1-based position\r\n\r\n    mapping(bytes32 => bool) public persistentAsset;\r\n\r\n    // Manager fees\r\n    uint256 public tokenPriceAtLastFeeMint;\r\n\r\n    mapping(address => uint256) public lastDeposit;\r\n\r\n    // Fee increase announcement\r\n    uint256 public announcedFeeIncreaseNumerator;\r\n    uint256 public announcedFeeIncreaseTimestamp;\r\n\r\n    modifier onlyPrivate() {\r\n        require(\r\n            msg.sender == manager() ||\r\n                !privatePool ||\r\n                isMemberAllowed(msg.sender),\r\n            \"only members allowed\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _factory,\r\n        bool _privatePool,\r\n        address _manager,\r\n        string memory _managerName,\r\n        string memory _fundName,\r\n        string memory _fundSymbol,\r\n        IAddressResolver _addressResolver,\r\n        bytes32[] memory _supportedAssets\r\n    ) public initializer {\r\n        ERC20UpgradeSafe.__ERC20_init(_fundName, _fundSymbol);\r\n        Managed.initialize(_manager, _managerName);\r\n\r\n        factory = _factory;\r\n        _setPoolPrivacy(_privatePool);\r\n        creator = msg.sender;\r\n        creationTime = block.timestamp;\r\n        addressResolver = _addressResolver;\r\n\r\n        _addToSupportedAssets(_SUSD_KEY);\r\n\r\n        for(uint8 i = 0; i < _supportedAssets.length; i++) {\r\n            _addToSupportedAssets(_supportedAssets[i]);\r\n        }\r\n\r\n        // Set persistent assets\r\n        persistentAsset[_SUSD_KEY] = true;\r\n\r\n        tokenPriceAtLastFeeMint = 10**18;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n        internal virtual override\r\n    {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(getExitFeeRemainingCooldown(from) == 0, \"cooldown active\");\r\n    }\r\n\r\n    function setPoolPrivate(bool _privatePool) public onlyManager {\r\n        require(privatePool != _privatePool, \"flag must be different\");\r\n\r\n        _setPoolPrivacy(_privatePool);\r\n    }\r\n\r\n    function _setPoolPrivacy(bool _privacy) internal {\r\n        privatePool = _privacy;\r\n\r\n        emit PoolPrivacyUpdated(_privacy);\r\n    }\r\n\r\n    function getAssetProxy(bytes32 key) public view returns (address) {\r\n        address synth = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY))\r\n            .synths(key);\r\n        require(synth != address(0), \"invalid key\");\r\n        address proxy = ISynth(synth).proxy();\r\n        require(proxy != address(0), \"invalid proxy\");\r\n        return proxy;\r\n    }\r\n\r\n    function isAssetSupported(bytes32 key) public view returns (bool) {\r\n        return assetPosition[key] != 0;\r\n    }\r\n\r\n    function validateAsset(bytes32 key) public view returns (bool) {\r\n        address synth = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY))\r\n            .synths(key);\r\n\r\n        if (synth == address(0))\r\n            return false;\r\n\r\n        address proxy = ISynth(synth).proxy();\r\n\r\n        if (proxy == address(0))\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    function addToSupportedAssets(bytes32 key) public onlyManagerOrTrader {\r\n        _addToSupportedAssets(key);\r\n    }\r\n\r\n    function removeFromSupportedAssets(bytes32 key) public {\r\n        require(msg.sender == IHasProtocolDaoInfo(factory).owner() ||\r\n            msg.sender == manager() ||\r\n            msg.sender == trader(), \"only manager, trader or Protocol DAO\");\r\n\r\n        require(isAssetSupported(key), \"asset not supported\");\r\n\r\n        require(!persistentAsset[key], \"persistent assets can't be removed\");\r\n        \r\n        if (validateAsset(key) == true) { // allow removal of depreciated synths\r\n            require(\r\n                IERC20(getAssetProxy(key)).balanceOf(address(this)) == 0,\r\n                \"non-empty asset cannot be removed\"\r\n            );\r\n        }\r\n        \r\n\r\n        _removeFromSupportedAssets(key);\r\n    }\r\n\r\n    function numberOfSupportedAssets() public view returns (uint256) {\r\n        return supportedAssets.length;\r\n    }\r\n\r\n    // Unsafe internal method that assumes we are not adding a duplicate\r\n    function _addToSupportedAssets(bytes32 key) internal {\r\n        require(supportedAssets.length < IHasAssetInfo(factory).getMaximumSupportedAssetCount(), \"maximum assets reached\");\r\n        require(!isAssetSupported(key), \"asset already supported\");\r\n        require(validateAsset(key) == true, \"not an asset\");\r\n\r\n        supportedAssets.push(key);\r\n        assetPosition[key] = supportedAssets.length;\r\n\r\n        emit AssetAdded(address(this), manager(), key);\r\n    }\r\n\r\n    // Unsafe internal method that assumes we are removing an element that exists\r\n    function _removeFromSupportedAssets(bytes32 key) internal {\r\n        uint256 length = supportedAssets.length;\r\n        uint256 index = assetPosition[key].sub(1); // adjusting the index because the map stores 1-based\r\n\r\n        bytes32 lastAsset = supportedAssets[length.sub(1)];\r\n\r\n        // overwrite the asset to be removed with the last supported asset\r\n        supportedAssets[index] = lastAsset;\r\n        assetPosition[lastAsset] = index.add(1); // adjusting the index to be 1-based\r\n        assetPosition[key] = 0; // update the map\r\n\r\n        // delete the last supported asset and resize the array\r\n        supportedAssets.pop();\r\n\r\n        emit AssetRemoved(address(this), manager(), key);\r\n    }\r\n\r\n    function exchange(\r\n        bytes32 sourceKey,\r\n        uint256 sourceAmount,\r\n        bytes32 destinationKey\r\n    ) public onlyManagerOrTrader {\r\n        require(isAssetSupported(sourceKey), \"unsupported source currency\");\r\n        require(\r\n            isAssetSupported(destinationKey),\r\n            \"unsupported destination currency\"\r\n        );\r\n\r\n        ISynthetix sx = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY));\r\n\r\n        uint256 destinationAmount = sx.exchangeWithTracking(\r\n            sourceKey,\r\n            sourceAmount,\r\n            destinationKey,\r\n            IHasDaoInfo(factory).getDaoAddress(),\r\n            IHasFeeInfo(factory).getTrackingCode()\r\n        );\r\n\r\n        emit Exchange(\r\n            address(this),\r\n            msg.sender,\r\n            sourceKey,\r\n            sourceAmount,\r\n            destinationKey,\r\n            destinationAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function totalFundValue() public virtual view returns (uint256) {\r\n        uint256 total = 0;\r\n        uint256 assetCount = supportedAssets.length;\r\n\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n            total = total.add(assetValue(supportedAssets[i]));\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function assetValue(bytes32 key) public view returns (uint256) {\r\n        return\r\n            IExchangeRates(addressResolver.getAddress(_EXCHANGE_RATES_KEY))\r\n                .effectiveValue(\r\n                key,\r\n                IERC20(getAssetProxy(key)).balanceOf(address(this)),\r\n                _SUSD_KEY\r\n            );\r\n    }\r\n\r\n    function deposit(uint256 _susdAmount) public onlyPrivate returns (uint256) {\r\n        lastDeposit[msg.sender] = block.timestamp;\r\n\r\n        //we need to settle all the assets before determining the total fund value for calculating manager fees\r\n        //as an optimisation it also returns current fundValue\r\n        uint256 fundValue = mintManagerFee(true);\r\n\r\n        uint256 totalSupplyBefore = totalSupply();\r\n\r\n        IExchanger sx = IExchanger(addressResolver.getAddress(_EXCHANGER_KEY));\r\n\r\n        require(\r\n            IERC20(getAssetProxy(_SUSD_KEY)).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                _susdAmount\r\n            ),\r\n            \"token transfer failed\"\r\n        );\r\n\r\n        uint256 liquidityMinted;\r\n        if (totalSupplyBefore > 0) {\r\n            //total balance converted to susd that this contract holds\r\n            //need to calculate total value of synths in this contract\r\n            liquidityMinted = _susdAmount.mul(totalSupplyBefore).div(fundValue);\r\n        } else {\r\n            liquidityMinted = _susdAmount;\r\n        }\r\n\r\n        _mint(msg.sender, liquidityMinted);\r\n\r\n        emit Deposit(\r\n            address(this),\r\n            msg.sender,\r\n            _susdAmount,\r\n            liquidityMinted,\r\n            balanceOf(msg.sender),\r\n            fundValue.add(_susdAmount),\r\n            totalSupplyBefore.add(liquidityMinted),\r\n            block.timestamp\r\n        );\r\n\r\n        return liquidityMinted;\r\n    }\r\n\r\n    function _settleAll(bool failOnSuspended) internal {\r\n        ISynthetix sx = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY));\r\n        ISystemStatus status = ISystemStatus(addressResolver.getAddress(_SYSTEM_STATUS_KEY));\r\n\r\n        uint256 assetCount = supportedAssets.length;\r\n\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n\r\n            address proxy = getAssetProxy(supportedAssets[i]);\r\n            uint256 totalAssetBalance = IERC20(proxy).balanceOf(address(this));\r\n\r\n            if (totalAssetBalance > 0) {\r\n                sx.settle(supportedAssets[i]);\r\n                if (failOnSuspended) {\r\n                    (bool suspended, ) = status.synthExchangeSuspension(supportedAssets[i]);\r\n                    require(!suspended , \"required asset is suspended\");\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _fundTokenAmount) public virtual {\r\n        require(\r\n            balanceOf(msg.sender) >= _fundTokenAmount,\r\n            \"insufficient balance of fund tokens\"\r\n        );\r\n\r\n        require(\r\n            getExitFeeRemainingCooldown(msg.sender) == 0,\r\n            \"cooldown active\"\r\n        );\r\n\r\n        uint256 fundValue = mintManagerFee(false);\r\n        uint256 valueWithdrawn = _fundTokenAmount.mul(fundValue).div(totalSupply());\r\n\r\n        //calculate the proportion\r\n        uint256 portion = _fundTokenAmount.mul(10**18).div(totalSupply());\r\n\r\n        //first return funded tokens\r\n        _burn(msg.sender, _fundTokenAmount);\r\n\r\n        uint256 assetCount = supportedAssets.length;\r\n\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n            address proxy = getAssetProxy(supportedAssets[i]);\r\n            uint256 totalAssetBalance = IERC20(proxy).balanceOf(address(this));\r\n            uint256 portionOfAssetBalance = totalAssetBalance.mul(portion).div(10**18);\r\n\r\n            if (portionOfAssetBalance > 0) {\r\n                IERC20(proxy).transfer(msg.sender, portionOfAssetBalance);\r\n            }\r\n        }\r\n\r\n        emit Withdrawal(\r\n            address(this),\r\n            msg.sender,\r\n            valueWithdrawn,\r\n            _fundTokenAmount,\r\n            balanceOf(msg.sender),\r\n            fundValue.sub(valueWithdrawn),\r\n            totalSupply(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getFundSummary()\r\n        public\r\n        view\r\n        returns (\r\n            string memory,\r\n            uint256,\r\n            uint256,\r\n            address,\r\n            string memory,\r\n            uint256,\r\n            bool,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n\r\n        uint256 managerFeeNumerator;\r\n        uint256 managerFeeDenominator;\r\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\r\n\r\n        uint256 exitFeeNumerator = 0;\r\n        uint256 exitFeeDenominator = 1;\r\n\r\n        return (\r\n            name(),\r\n            totalSupply(),\r\n            totalFundValue(),\r\n            manager(),\r\n            managerName(),\r\n            creationTime,\r\n            privatePool,\r\n            managerFeeNumerator,\r\n            managerFeeDenominator,\r\n            exitFeeNumerator,\r\n            exitFeeDenominator\r\n        );\r\n    }\r\n\r\n    function getSupportedAssets() public view returns (bytes32[] memory) {\r\n        return supportedAssets;\r\n    }\r\n\r\n    function getFundComposition()\r\n        public\r\n        view\r\n        returns (\r\n            bytes32[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        uint256 assetCount = supportedAssets.length;\r\n\r\n        bytes32[] memory assets = new bytes32[](assetCount);\r\n        uint256[] memory balances = new uint256[](assetCount);\r\n        uint256[] memory rates = new uint256[](assetCount);\r\n\r\n        IExchangeRates exchangeRates = IExchangeRates(\r\n            addressResolver.getAddress(_EXCHANGE_RATES_KEY)\r\n        );\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n            bytes32 asset = supportedAssets[i];\r\n            balances[i] = IERC20(getAssetProxy(asset)).balanceOf(address(this));\r\n            assets[i] = asset;\r\n            rates[i] = exchangeRates.rateForCurrency(asset);\r\n        }\r\n        return (assets, balances, rates);\r\n    }\r\n\r\n    function getWaitingPeriods()\r\n        public\r\n        view\r\n        returns (\r\n            bytes32[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        uint256 assetCount = supportedAssets.length;\r\n\r\n        bytes32[] memory assets = new bytes32[](assetCount);\r\n        uint256[] memory periods = new uint256[](assetCount);\r\n\r\n        IExchanger exchanger = IExchanger(addressResolver.getAddress(_EXCHANGER_KEY));\r\n\r\n        for (uint256 i = 0; i < assetCount; i++) {\r\n            bytes32 asset = supportedAssets[i];\r\n            assets[i] = asset;\r\n            periods[i] = exchanger.maxSecsLeftInWaitingPeriod(address(this), asset);\r\n        }\r\n\r\n        return (assets, periods);\r\n    }\r\n\r\n    // MANAGER FEES\r\n\r\n    function tokenPrice() public view returns (uint256) {\r\n        uint256 fundValue = totalFundValue();\r\n        uint256 tokenSupply = totalSupply();\r\n\r\n        return _tokenPrice(fundValue, tokenSupply);\r\n    }\r\n\r\n    function _tokenPrice(uint256 _fundValue, uint256 _tokenSupply)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (_tokenSupply == 0 || _fundValue == 0) return 0;\r\n\r\n        return _fundValue.mul(10**18).div(_tokenSupply);\r\n    }\r\n\r\n    function availableManagerFee() public view returns (uint256) {\r\n        uint256 fundValue = totalFundValue();\r\n        uint256 tokenSupply = totalSupply();\r\n\r\n        uint256 managerFeeNumerator;\r\n        uint256 managerFeeDenominator;\r\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\r\n\r\n        return\r\n            _availableManagerFee(\r\n                fundValue,\r\n                tokenSupply,\r\n                tokenPriceAtLastFeeMint,\r\n                managerFeeNumerator,\r\n                managerFeeDenominator\r\n            );\r\n    }\r\n\r\n    function _availableManagerFee(\r\n        uint256 _fundValue,\r\n        uint256 _tokenSupply,\r\n        uint256 _lastFeeMintPrice,\r\n        uint256 _feeNumerator,\r\n        uint256 _feeDenominator\r\n    ) internal pure returns (uint256) {\r\n        if (_tokenSupply == 0 || _fundValue == 0) return 0;\r\n\r\n        uint256 currentTokenPrice = _fundValue.mul(10**18).div(_tokenSupply);\r\n\r\n        if (currentTokenPrice <= _lastFeeMintPrice) return 0;\r\n\r\n        uint256 available = currentTokenPrice\r\n            .sub(_lastFeeMintPrice)\r\n            .mul(_tokenSupply)\r\n            .mul(_feeNumerator)\r\n            .div(_feeDenominator)\r\n            .div(currentTokenPrice);\r\n\r\n        return available;\r\n    }\r\n\r\n    //returns uint256 fundValue as a gas optimisation\r\n    function mintManagerFee(bool failOnSuspended) public returns (uint256) {\r\n        //we need to settle all the assets before minting the manager fee\r\n        _settleAll(failOnSuspended);\r\n\r\n        uint256 fundValue = totalFundValue();\r\n        uint256 tokenSupply = totalSupply();\r\n\r\n        uint256 managerFeeNumerator;\r\n        uint256 managerFeeDenominator;\r\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\r\n\r\n        uint256 available = _availableManagerFee(\r\n            fundValue,\r\n            tokenSupply,\r\n            tokenPriceAtLastFeeMint,\r\n            managerFeeNumerator,\r\n            managerFeeDenominator\r\n        );\r\n\r\n        // Ignore dust when minting performance fees\r\n        if (available < 100)\r\n            return fundValue;\r\n\r\n        address daoAddress = IHasDaoInfo(factory).getDaoAddress();\r\n        uint256 daoFeeNumerator;\r\n        uint256 daoFeeDenominator;\r\n\r\n        (daoFeeNumerator, daoFeeDenominator) = IHasDaoInfo(factory).getDaoFee();\r\n\r\n        uint256 daoFee = available.mul(daoFeeNumerator).div(daoFeeDenominator);\r\n        uint256 managerFee = available.sub(daoFee);\r\n\r\n        if (daoFee > 0) _mint(daoAddress, daoFee);\r\n\r\n        if (managerFee > 0) _mint(manager(), managerFee);\r\n\r\n        tokenPriceAtLastFeeMint = _tokenPrice(fundValue, tokenSupply);\r\n\r\n        emit ManagerFeeMinted(\r\n            address(this),\r\n            manager(),\r\n            available,\r\n            daoFee,\r\n            managerFee,\r\n            tokenPriceAtLastFeeMint\r\n        );\r\n\r\n        return fundValue;\r\n    }\r\n\r\n    function getManagerFee() public view returns (uint256, uint256) {\r\n        return IHasFeeInfo(factory).getPoolManagerFee(address(this));\r\n    }\r\n\r\n    function setManagerFeeNumerator(uint256 numerator) public onlyManager {\r\n        uint256 managerFeeNumerator;\r\n        uint256 managerFeeDenominator;\r\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\r\n\r\n        require(numerator < managerFeeNumerator, \"manager fee too high\");\r\n\r\n        IHasFeeInfo(factory).setPoolManagerFeeNumerator(address(this), numerator);\r\n\r\n        emit ManagerFeeSet(\r\n            address(this),\r\n            manager(),\r\n            numerator,\r\n            managerFeeDenominator\r\n        );\r\n    }\r\n\r\n    function _setManagerFeeNumerator(uint256 numerator) internal {\r\n        IHasFeeInfo(factory).setPoolManagerFeeNumerator(address(this), numerator);\r\n        \r\n        uint256 managerFeeNumerator;\r\n        uint256 managerFeeDenominator;\r\n        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(address(this));\r\n\r\n        emit ManagerFeeSet(\r\n            address(this),\r\n            manager(),\r\n            managerFeeNumerator,\r\n            managerFeeDenominator\r\n        );\r\n    }\r\n\r\n    function announceManagerFeeIncrease(uint256 numerator) public onlyManager {\r\n        uint256 maximumAllowedChange = IHasFeeInfo(factory).getMaximumManagerFeeNumeratorChange();\r\n\r\n        uint256 currentFeeNumerator;\r\n        (currentFeeNumerator, ) = getManagerFee();\r\n\r\n        require (numerator <= currentFeeNumerator.add(maximumAllowedChange), \"exceeded allowed increase\");\r\n\r\n        uint256 feeChangeDelay = IHasFeeInfo(factory).getManagerFeeNumeratorChangeDelay(); \r\n\r\n        announcedFeeIncreaseNumerator = numerator;\r\n        announcedFeeIncreaseTimestamp = block.timestamp + feeChangeDelay;\r\n        emit ManagerFeeIncreaseAnnounced(numerator, announcedFeeIncreaseTimestamp);\r\n    }\r\n\r\n    function renounceManagerFeeIncrease() public onlyManager {\r\n        announcedFeeIncreaseNumerator = 0;\r\n        announcedFeeIncreaseTimestamp = 0;\r\n        emit ManagerFeeIncreaseRenounced();\r\n    }\r\n\r\n    function commitManagerFeeIncrease() public onlyManager {\r\n        require(block.timestamp >= announcedFeeIncreaseTimestamp, \"fee increase delay active\");\r\n\r\n        _setManagerFeeNumerator(announcedFeeIncreaseNumerator);\r\n\r\n        announcedFeeIncreaseNumerator = 0;\r\n        announcedFeeIncreaseTimestamp = 0;\r\n    }\r\n\r\n    function getManagerFeeIncreaseInfo() public view returns (uint256, uint256) {\r\n        return (announcedFeeIncreaseNumerator, announcedFeeIncreaseTimestamp);\r\n    }\r\n\r\n    // Exit fees\r\n\r\n    function getExitFee() external view returns (uint256, uint256) {\r\n        return (0, 1);\r\n    }\r\n\r\n    function getExitFeeCooldown() external view returns (uint256) {\r\n        return IHasFeeInfo(factory).getExitFeeCooldown();\r\n    }\r\n\r\n    function getExitFeeRemainingCooldown(address sender) public view returns (uint256) {\r\n        uint256 cooldown = IHasFeeInfo(factory).getExitFeeCooldown();\r\n        uint256 cooldownFinished = lastDeposit[sender].add(cooldown);\r\n\r\n        if (cooldownFinished < block.timestamp)\r\n            return 0;\r\n\r\n        return cooldownFinished.sub(block.timestamp);\r\n    }\r\n    \r\n    // Swap contract\r\n\r\n    function setLastDeposit(address investor) public onlyDhptSwap {\r\n        lastDeposit[investor] = block.timestamp;\r\n    }\r\n\r\n    modifier onlyDhptSwap() {\r\n        address dhptSwapAddress = IHasDhptSwapInfo(factory)\r\n            .getDhptSwapAddress();\r\n        require(msg.sender == dhptSwapAddress, \"only swap contract\");\r\n        _;\r\n    }\r\n\r\n    // Upgrade\r\n\r\n    function receiveUpgrade(uint256 targetVersion) external override{\r\n        require(msg.sender == factory, \"no permission\");\r\n\r\n        if (targetVersion == 1) {\r\n            addressResolver = IAddressResolver(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2);\r\n            return;\r\n        }\r\n\r\n        require(false, \"upgrade handler not found\");\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: contracts/upgradability/Proxy.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Implements delegation of calls to other contracts, with proper\r\n * forwarding of return values and bubbling of failures.\r\n * It defines a fallback function that delegates all calls to the address\r\n * returned by the abstract _implementation() internal function.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Fallback function.\r\n     * Implemented entirely in `_fallback`.\r\n     */\r\n    fallback() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    receive() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @return The Address of the implementation.\r\n     */\r\n    function _implementation() internal virtual view returns (address);\r\n\r\n    /**\r\n     * @dev Delegates execution to an implementation contract.\r\n     * This is a low level function that doesn't return to its internal call site.\r\n     * It will return to the external caller whatever the implementation returns.\r\n     * @param implementation Address to delegate.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(\r\n                gas(),\r\n                implementation,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n                // delegatecall returns 0 on error.\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function that is run as the first thing in the fallback function.\r\n     * Can be redefined in derived contracts to add functionality.\r\n     * Redefinitions must call super._willFallback().\r\n     */\r\n    function _willFallback() internal virtual {}\r\n\r\n    /**\r\n     * @dev fallback implementation.\r\n     * Extracted to enable manual triggering.\r\n     */\r\n    function _fallback() internal {\r\n        _willFallback();\r\n        _delegate(_implementation());\r\n    }\r\n}\r\n\r\n// File: contracts/upgradability/Address.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n *\r\n * Source https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-solidity/v2.1.3/contracts/utils/Address.sol\r\n * This contract is copied here and renamed from the original to avoid clashes in the compiled artifacts\r\n * when the user imports a zos-lib contract (that transitively causes this contract to be compiled and added to the\r\n * build/artifacts folder) as well as the vanilla Address implementation from an openzeppelin version.\r\n */\r\nlibrary OpenZeppelinUpgradesAddress {\r\n    /**\r\n     * Returns whether the target address is a contract\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     * as the code is not actually created until after the constructor finishes.\r\n     * @param account address of the account to check\r\n     * @return whether the target address is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // XXX Currently there is no better way to check if there is a contract in an address\r\n        // than to check the size of the code at that address.\r\n        // See https://ethereum.stackexchange.com/a/14016/36603\r\n        // for more details about how this works.\r\n        // TODO Check this again before the Serenity release, because all addresses will be\r\n        // contracts then.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradability/HasLogic.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\ninterface HasLogic {\r\n    function getLogic() external view returns (address);\r\n}\r\n\r\n// File: contracts/upgradability/BaseUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title BaseUpgradeabilityProxy\r\n * @dev This contract implements a proxy that allows to change the\r\n * implementation address to which it will delegate.\r\n * Such a change is called an implementation upgrade.\r\n */\r\ncontract BaseUpgradeabilityProxy is Proxy {\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     * @param implementation Address of the new implementation.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32\r\n        internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Returns the current implementation.\r\n     * @return impl Address of the current implementation\r\n     */\r\n    function _implementation() internal override view returns (address) {\r\n        address factory;\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            factory := sload(slot)\r\n        }\r\n\r\n        // Begin custom modification\r\n        if (factory == address(0x0)) return address(0x0); // If factory not initialized return empty\r\n\r\n        return HasLogic(factory).getLogic();\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the proxy to a new implementation.\r\n     * @param newImplementation Address of the new implementation.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the implementation address of the proxy.\r\n     * @param newImplementation Address of the new implementation.\r\n     */\r\n    function _setImplementation(address newImplementation) internal {\r\n        require(\r\n            OpenZeppelinUpgradesAddress.isContract(newImplementation),\r\n            \"Cannot set a proxy implementation to a non-contract address\"\r\n        );\r\n\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n\r\n        assembly {\r\n            sstore(slot, newImplementation)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/upgradability/InitializableUpgradeabilityProxy.sol\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @title InitializableUpgradeabilityProxy\r\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\r\n * implementation and init data.\r\n */\r\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\r\n    /**\r\n     * @dev Contract initializer.\r\n     * @param _factory Address of the factory containing the implementation.\r\n     * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\r\n     * It should include the signature and the parameters of the function to be called, as described in\r\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\r\n     * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\r\n     */\r\n    function initialize(address _factory, bytes memory _data) public payable {\r\n        require(_implementation() == address(0), \"Impl not zero\");\r\n        assert(\r\n            IMPLEMENTATION_SLOT ==\r\n                bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\r\n        );\r\n        _setImplementation(_factory);\r\n        if (_data.length > 0) {\r\n            (bool success, ) = _implementation().delegatecall(_data);\r\n            require(success);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n\r\n\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: contracts/upgradability/ProxyFactory.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\ncontract ProxyFactory is OwnableUpgradeSafe, HasLogic {\r\n    event ProxyCreated(address proxy);\r\n\r\n    address private _logic;\r\n\r\n    function __ProxyFactory_init(address poolLogic) public initializer {\r\n        OwnableUpgradeSafe.__Ownable_init();\r\n\r\n        _logic = poolLogic;\r\n    }\r\n\r\n    function setLogic(address logic) public onlyOwner {\r\n        _logic = logic;\r\n    }\r\n\r\n    function getLogic() public override view returns (address) {\r\n        return _logic;\r\n    }\r\n\r\n    function deploy(bytes memory _data) public returns (address) {\r\n        return _deployProxy(_data);\r\n    }\r\n\r\n    function _deployProxy(bytes memory _data) internal returns (address) {\r\n        InitializableUpgradeabilityProxy proxy = _createProxy();\r\n        emit ProxyCreated(address(proxy));\r\n        proxy.initialize(address(this), _data);\r\n        return address(proxy);\r\n    }\r\n\r\n    function _createProxy()\r\n        internal\r\n        returns (InitializableUpgradeabilityProxy)\r\n    {\r\n        address payable addr;\r\n        bytes memory code = type(InitializableUpgradeabilityProxy).creationCode;\r\n\r\n        assembly {\r\n            addr := create(0, add(code, 0x20), mload(code))\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        return InitializableUpgradeabilityProxy(addr);\r\n    }\r\n    \r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: contracts/DHedgeFactory.sol\r\n\r\n//\r\n//        __  __    __  ________  _______    ______   ________ \r\n//       /  |/  |  /  |/        |/       \\  /      \\ /        |\r\n//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \r\n//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \r\n// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \r\n// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \r\n// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \r\n// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\r\n//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \r\n//\r\n// dHEDGE DAO - https://dhedge.org\r\n//\r\n// MIT License\r\n// ===========\r\n//\r\n// Copyright (c) 2020 dHEDGE DAO\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n//\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DHedgeFactory is\r\n    ProxyFactory,\r\n    IHasDaoInfo,\r\n    IHasFeeInfo,\r\n    IHasAssetInfo,\r\n    IHasDhptSwapInfo\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    event FundCreated(\r\n        address fundAddress,\r\n        bool isPoolPrivate,\r\n        string fundName,\r\n        string managerName,\r\n        address manager,\r\n        uint256 time,\r\n        uint256 managerFeeNumerator,\r\n        uint256 managerFeeDenominator\r\n    );\r\n\r\n    event DaoAddressSet(address dao);\r\n    event DaoFeeSet(uint256 numerator, uint256 denominator);\r\n\r\n    event ExitFeeSet(uint256 numerator, uint256 denominator);\r\n    event ExitFeeCooldownSet(uint256 cooldown);\r\n\r\n    event MaximumSupportedAssetCountSet(uint256 count);\r\n    \r\n    event DhptSwapAddressSet(address dhptSwap);\r\n\r\n    IAddressResolver public addressResolver;\r\n\r\n    address[] public deployedFunds;\r\n\r\n    address internal _daoAddress;\r\n    uint256 internal _daoFeeNumerator;\r\n    uint256 internal _daoFeeDenominator;\r\n\r\n    mapping (address => bool) public isPool;\r\n\r\n    uint256 private _MAXIMUM_MANAGER_FEE_NUMERATOR;\r\n    uint256 private _MANAGER_FEE_DENOMINATOR;\r\n    mapping (address => uint256) public poolManagerFeeNumerator;\r\n    mapping (address => uint256) public poolManagerFeeDenominator;\r\n\r\n    uint256 internal _exitFeeNumerator;\r\n    uint256 internal _exitFeeDenominator;\r\n    uint256 internal _exitFeeCooldown;\r\n\r\n    uint256 internal _maximumSupportedAssetCount;\r\n\r\n    bytes32 internal _trackingCode;\r\n    \r\n    mapping (address => uint256) public poolVersion;\r\n    uint256 public poolStorageVersion;\r\n\r\n    address internal _dhptSwapAddress;\r\n\r\n    uint256 public maximumManagerFeeNumeratorChange;\r\n    uint256 public managerFeeNumeratorChangeDelay;\r\n\r\n    function initialize(\r\n        IAddressResolver _addressResolver,\r\n        address _poolLogic,\r\n        address daoAddress\r\n    ) public initializer {\r\n\r\n        ProxyFactory.__ProxyFactory_init(_poolLogic);\r\n\r\n        addressResolver = _addressResolver;\r\n\r\n        _setDaoAddress(daoAddress);\r\n\r\n        _setMaximumManagerFee(5000, 10000);\r\n\r\n        _setDaoFee(10, 100); // 10%\r\n        _setExitFee(5, 1000); // 0.5%\r\n        _setExitFeeCooldown(1 days);\r\n\r\n        _setMaximumSupportedAssetCount(10);\r\n\r\n        _setTrackingCode(\r\n            0x4448454447450000000000000000000000000000000000000000000000000000\r\n        );\r\n    }\r\n\r\n    function createFund(\r\n        bool _privatePool,\r\n        address _manager,\r\n        string memory _managerName,\r\n        string memory _fundName,\r\n        string memory _fundSymbol,\r\n        uint256 _managerFeeNumerator,\r\n        bytes32[] memory _supportedAssets\r\n    ) public returns (address) {\r\n        bytes memory data = abi.encodeWithSignature(\r\n            \"initialize(address,bool,address,string,string,string,address,bytes32[])\",\r\n            address(this),\r\n            _privatePool,\r\n            _manager,\r\n            _managerName,\r\n            _fundName,\r\n            _fundSymbol,\r\n            addressResolver,\r\n            _supportedAssets\r\n        );\r\n\r\n        address fund = deploy(data);\r\n\r\n        deployedFunds.push(fund);\r\n        isPool[fund] = true;\r\n\r\n        poolVersion[fund] = poolStorageVersion;\r\n\r\n        _setPoolManagerFee(fund, _managerFeeNumerator, _MANAGER_FEE_DENOMINATOR);\r\n\r\n        emit FundCreated(\r\n            fund,\r\n            _privatePool,\r\n            _fundName,\r\n            _managerName,\r\n            _manager,\r\n            block.timestamp,\r\n            _managerFeeNumerator,\r\n            _MANAGER_FEE_DENOMINATOR\r\n        );\r\n\r\n        return fund;\r\n    }\r\n\r\n    function deployedFundsLength() external view returns (uint256) {\r\n        return deployedFunds.length;\r\n    }\r\n\r\n    function setAddressResolver(address _addressResolver) public onlyOwner {\r\n        addressResolver = IAddressResolver(_addressResolver);\r\n    }\r\n\r\n    function getAddressResolver() public override view returns (IAddressResolver) {\r\n        return addressResolver;\r\n    }\r\n\r\n    // DAO info\r\n\r\n    function getDaoAddress() public override view returns (address) {\r\n        return _daoAddress;\r\n    }\r\n\r\n    function setDaoAddress(address daoAddress) public onlyOwner {\r\n        _setDaoAddress(daoAddress);\r\n    }\r\n\r\n    function _setDaoAddress(address daoAddress) internal {\r\n        _daoAddress = daoAddress;\r\n\r\n        emit DaoAddressSet(daoAddress);\r\n    }\r\n    \r\n    function setDaoFee(uint256 numerator, uint256 denominator) public onlyOwner {\r\n        _setDaoFee(numerator, denominator);\r\n    }\r\n\r\n    function _setDaoFee(uint256 numerator, uint256 denominator) internal {\r\n        require(numerator <= denominator, \"invalid fraction\");\r\n\r\n        _daoFeeNumerator = numerator;\r\n        _daoFeeDenominator = denominator;\r\n\r\n        emit DaoFeeSet(numerator, denominator);\r\n    }\r\n\r\n    function getDaoFee() public override view returns (uint256, uint256) {\r\n        return (_daoFeeNumerator, _daoFeeDenominator);\r\n    }\r\n\r\n    modifier onlyPool() {\r\n        require(\r\n            isPool[msg.sender] == true,\r\n            \"Only a pool contract can perform this action\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    // Manager fees\r\n\r\n    function getPoolManagerFee(address pool) external override view returns (uint256, uint256) {\r\n        require(isPool[pool] == true, \"supplied address is not a pool\");\r\n\r\n        return (poolManagerFeeNumerator[pool], poolManagerFeeDenominator[pool]);\r\n    }\r\n\r\n    function setPoolManagerFeeNumerator(address pool, uint256 numerator) external override {\r\n        require(pool == msg.sender && isPool[msg.sender] == true, \"only a pool can change own fee\");\r\n        require(isPool[pool] == true, \"supplied address is not a pool\");\r\n        require(numerator <= poolManagerFeeNumerator[pool].add(maximumManagerFeeNumeratorChange), \"manager fee too high\");\r\n\r\n        _setPoolManagerFee(msg.sender, numerator, _MANAGER_FEE_DENOMINATOR);\r\n    }\r\n\r\n    function _setPoolManagerFee(address pool, uint256 numerator, uint256 denominator) internal {\r\n        require(numerator <= denominator && numerator <= _MAXIMUM_MANAGER_FEE_NUMERATOR, \"invalid fraction\");\r\n\r\n        poolManagerFeeNumerator[pool] = numerator;\r\n        poolManagerFeeDenominator[pool] = denominator;\r\n    }\r\n\r\n    function getMaximumManagerFee() public view returns (uint256, uint256) {\r\n        return (_MAXIMUM_MANAGER_FEE_NUMERATOR, _MANAGER_FEE_DENOMINATOR);\r\n    }\r\n\r\n    function _setMaximumManagerFee(uint256 numerator, uint256 denominator) internal {\r\n        require(denominator > 0, \"denominator must be positive\");\r\n\r\n        _MAXIMUM_MANAGER_FEE_NUMERATOR = numerator;\r\n        _MANAGER_FEE_DENOMINATOR = denominator;\r\n    }\r\n\r\n    function setMaximumManagerFeeNumeratorChange(uint256 amount) public onlyOwner {\r\n        maximumManagerFeeNumeratorChange = amount;\r\n    }\r\n\r\n    function getMaximumManagerFeeNumeratorChange() public override view returns (uint256) {\r\n        return maximumManagerFeeNumeratorChange;\r\n    }\r\n\r\n    function setManagerFeeNumeratorChangeDelay(uint256 delay) public onlyOwner {\r\n        managerFeeNumeratorChangeDelay = delay;\r\n    }\r\n\r\n    function getManagerFeeNumeratorChangeDelay() public override view returns (uint256) {\r\n        return managerFeeNumeratorChangeDelay;\r\n    }\r\n\r\n    // Exit fees\r\n\r\n    function setExitFee(uint256 numerator, uint256 denominator) public onlyOwner {\r\n        _setExitFee(numerator, denominator);\r\n    }\r\n\r\n    function _setExitFee(uint256 numerator, uint256 denominator) internal {\r\n        require(numerator <= denominator, \"invalid fraction\");\r\n\r\n        _exitFeeNumerator = numerator;\r\n        _exitFeeDenominator = denominator;\r\n\r\n        emit ExitFeeSet(numerator, denominator);\r\n    }\r\n\r\n    function getExitFee() external override view returns (uint256, uint256) {\r\n        return (_exitFeeNumerator, _exitFeeDenominator);\r\n    }\r\n\r\n    function setExitFeeCooldown(uint256 cooldown)\r\n        external\r\n        onlyOwner\r\n    {\r\n        _setExitFeeCooldown(cooldown);\r\n    }\r\n\r\n    function _setExitFeeCooldown(uint256 cooldown) internal {\r\n        _exitFeeCooldown = cooldown;\r\n\r\n        emit ExitFeeCooldownSet(cooldown);\r\n    }\r\n\r\n    function getExitFeeCooldown() public override view returns (uint256) {\r\n        return _exitFeeCooldown;\r\n    }\r\n\r\n    // Asset Info\r\n\r\n    function setMaximumSupportedAssetCount(uint256 count) external onlyOwner {\r\n        _setMaximumSupportedAssetCount(count);\r\n    }\r\n\r\n    function _setMaximumSupportedAssetCount(uint256 count) internal {\r\n        _maximumSupportedAssetCount = count;\r\n\r\n        emit MaximumSupportedAssetCountSet(count);\r\n    }\r\n\r\n    function getMaximumSupportedAssetCount() external virtual view override returns (uint256) {\r\n        return _maximumSupportedAssetCount;\r\n    }\r\n\r\n    // Synthetix tracking\r\n\r\n    function setTrackingCode(bytes32 code) external onlyOwner {\r\n        _setTrackingCode(code);\r\n    }\r\n\r\n    function _setTrackingCode(bytes32 code) internal {\r\n        _trackingCode = code;\r\n    }\r\n\r\n    function getTrackingCode() public override view returns (bytes32) {\r\n        return _trackingCode;\r\n    }\r\n    \r\n    // DHPT Swap\r\n\r\n    function getDhptSwapAddress() public override view returns (address) {\r\n        return _dhptSwapAddress;\r\n    }\r\n\r\n    function setDhptSwapAddress(address dhptSwapAddress) public onlyOwner {\r\n        _setDhptSwapAddress(dhptSwapAddress);\r\n    }\r\n\r\n    function _setDhptSwapAddress(address dhptSwapAddress) internal {\r\n        _dhptSwapAddress = dhptSwapAddress;\r\n\r\n        emit DhptSwapAddressSet(dhptSwapAddress);\r\n    }\r\n\r\n    // Upgrade\r\n\r\n    function _upgradePool(address pool, uint256 targetVersion) internal {\r\n        IReceivesUpgrade(pool).receiveUpgrade(targetVersion);\r\n\r\n        poolVersion[pool] = targetVersion;\r\n    }\r\n\r\n    function upgradePoolBatch(uint256 startIndex, uint256 endIndex, uint256 sourceVersion, uint256 targetVersion) external onlyOwner {\r\n        require(startIndex <= endIndex && startIndex < deployedFunds.length && endIndex < deployedFunds.length, \"invalid bounds\");\r\n\r\n        for (uint256 i = startIndex; i <= endIndex; i++) {\r\n\r\n            address pool = deployedFunds[i];\r\n\r\n            if (poolVersion[pool] != sourceVersion)\r\n                continue;\r\n\r\n            _upgradePool(pool, targetVersion);\r\n\r\n        }\r\n    } \r\n\r\n    function setPoolStorageVersion(uint256 version) external onlyOwner {\r\n        require(version > poolStorageVersion, \"invalid version\");\r\n\r\n        poolStorageVersion = version;\r\n    }\r\n\r\n    uint256[48] private __gap;\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InitializableUpgradeabilityProxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://01b6de2999484679b2f7eac60ed7e3e7a755f921b64438900906c52243f18075"}