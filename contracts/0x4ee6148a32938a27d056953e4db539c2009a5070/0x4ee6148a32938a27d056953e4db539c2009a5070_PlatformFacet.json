{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/diamondFacets/PlatformFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport {IPlatformFacet} from \\\"../interfaces/internal/IPlatformFacet.sol\\\";\\r\\ncontract PlatformFacet  is IPlatformFacet{\\r\\n      bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.Platform.diamond.storage\\\");\\r\\n      struct Platform{\\r\\n           //eth\\r\\n           address eth;\\r\\n           //weth\\r\\n           address weth;\\r\\n           //module whiteList  \\r\\n           mapping(address=>bool)  moduleStatus;  \\r\\n           address[]  modules;\\r\\n           \\r\\n           //protocol Platform\\r\\n           ProtocolAndA[] protocols;\\r\\n           //module=>protocol name=>protocol address\\r\\n           mapping (address=>mapping(string=>address)) moduleToProtocolA; \\r\\n           \\r\\n           address[] tokens;\\r\\n           //assetList 1 normal 2 aave asset 3 compound asset 4gmx  5 lido asset\\r\\n           mapping(address=>uint256) tokenTypes; //asset type\\r\\n\\r\\n   \\r\\n \\r\\n           //factory use  wallet->vault\\r\\n           mapping(address=>address[])   walletToVault;\\r\\n           mapping(address=>uint256)  vaultToSalt;\\r\\n           mapping(address=>bool)  isVault;\\r\\n\\r\\n           //vaultImplementation\\r\\n           address vaultImplementation;\\r\\n           \\r\\n           //proxy code\\r\\n           mapping(bytes32=>bool)  proxyCodeHash;   \\r\\n      }\\r\\n\\r\\n      function diamondStorage() internal pure returns (Platform storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n      }\\r\\n      //set modules  \\r\\n      function setModules(address[] memory _modules,bool[] memory _status)  external {\\r\\n                  Platform storage ds = diamondStorage();  \\r\\n                  for(uint256 i=0;i<_modules.length;i++){       \\r\\n                  require(_modules[i]!=address(0),\\\"address is zero\\\");   \\r\\n                  //add module\\r\\n                  if(_status[i] && !ds.moduleStatus[_modules[i]]){         \\r\\n                        ds.moduleStatus[_modules[i]]=true;\\r\\n                        ds.modules.push(_modules[i]);\\r\\n                  }\\r\\n                  //delete module   \\r\\n                  if(!_status[i] && ds.moduleStatus[_modules[i]]){   \\r\\n                        delete ds.moduleStatus[_modules[i]];\\r\\n                        uint256 count=ds.modules.length;\\r\\n                        for(uint256 j=0;j<count;j++){\\r\\n                        if(ds.modules[j]==_modules[i]){\\r\\n                              ds.modules[j]=ds.modules[count-1];\\r\\n                              ds.modules.pop();   \\r\\n                        }\\r\\n                        }\\r\\n                  }\\r\\n                  }\\r\\n                  emit SetModules(_modules,_status);\\r\\n      }\\r\\n\\r\\n      function getAllModules() external view returns(address[] memory){\\r\\n            Platform storage ds = diamondStorage();  \\r\\n            return ds.modules;\\r\\n      }\\r\\n      function getModuleStatus(address _module) external view returns(bool){\\r\\n             Platform storage ds = diamondStorage();  \\r\\n             return ds.moduleStatus[_module];\\r\\n      }\\r\\n      //set protocol\\r\\n      function setProtocols(address _module,string[] memory _protocols,address[] memory _protocolAddrs)  external {\\r\\n            Platform storage ds = diamondStorage();\\r\\n            for(uint256 i=0;i<_protocols.length;i++){       \\r\\n                //add protocol \\r\\n                if(_protocolAddrs[i] != address(0) && ds.moduleToProtocolA[_module][_protocols[i]]== address(0)){\\r\\n                  ds.moduleToProtocolA[_module][_protocols[i]]=_protocolAddrs[i];\\r\\n                  ProtocolAndA memory p=ProtocolAndA({\\r\\n                        addr:_protocolAddrs[i],\\r\\n                        module:_module,\\r\\n                        protocol:_protocols[i]\\r\\n                  });\\r\\n                  ds.protocols.push(p);\\r\\n                }\\r\\n                //delete protocol\\r\\n                if(_protocolAddrs[i] == address(0)  && ds.moduleToProtocolA[_module][_protocols[i]] != address(0)){        \\r\\n                  delete ds.moduleToProtocolA[_module][_protocols[i]];    \\r\\n                  uint256 count=ds.protocols.length;\\r\\n                  for(uint256 j=0;j<count;j++){             \\r\\n                       if(keccak256(abi.encodePacked(ds.protocols[j].protocol))==keccak256(abi.encodePacked(_protocols[i]))){\\r\\n                           ds.protocols[j]=ds.protocols[count-1];\\r\\n                           ds.protocols.pop();   \\r\\n                       }\\r\\n                  }\\r\\n                }\\r\\n            }   \\r\\n            emit SetProtocols(_module,_protocols,_protocolAddrs); \\r\\n      }\\r\\n    \\r\\n      function getProtocols()  external view returns(ProtocolAndA[] memory){\\r\\n            Platform storage ds = diamondStorage();  \\r\\n            return ds.protocols;  \\r\\n      }\\r\\n\\r\\n      function getModuleToProtocolA(address _module,string memory _protocol) external view returns(address){\\r\\n            Platform storage ds = diamondStorage();  \\r\\n            return ds.moduleToProtocolA[_module][_protocol];\\r\\n      }\\r\\n\\r\\n      //set token\\r\\n      function setTokens(address[] memory _tokens,uint256[] memory _tokenTypes)  external {\\r\\n            Platform storage ds = diamondStorage();\\r\\n            for(uint256 i=0;i<_tokens.length;i++){       \\r\\n                require(_tokens[i]!=address(0),\\\"address is zero\\\");   \\r\\n                //add token\\r\\n                if(_tokenTypes[i] !=0 && ds.tokenTypes[_tokens[i]]==0){\\r\\n                  ds.tokens.push(_tokens[i]);\\r\\n                  ds.tokenTypes[_tokens[i]]=_tokenTypes[i];\\r\\n                } \\r\\n\\r\\n                //remove token\\r\\n                if(_tokenTypes[i] ==0 && ds.tokenTypes[_tokens[i]] !=0) {\\r\\n                  delete ds.tokenTypes[_tokens[i]];\\r\\n                  uint256 count=ds.tokens.length;\\r\\n                  for(uint256 j=0;j<count;j++){\\r\\n                       if(ds.tokens[j]==_tokens[i]){\\r\\n                           ds.tokens[j]=ds.tokens[count-1];\\r\\n                           ds.tokens.pop();   \\r\\n                       }\\r\\n                  }\\r\\n                }\\r\\n            }\\r\\n            emit SetTokens(_tokens,_tokenTypes);\\r\\n      }\\r\\n      function getTokens()  external view returns(address[] memory){\\r\\n            Platform storage ds = diamondStorage();  \\r\\n            return ds.tokens;  \\r\\n      }\\r\\n      function getTokenType(address _token) external view returns(uint256){\\r\\n            Platform storage ds = diamondStorage();  \\r\\n            return ds.tokenTypes[_token];              \\r\\n      }\\r\\n\\r\\n      //vaultfactory\\r\\n    \\r\\n      function addWalletToVault(address _wallet,address _vault,uint256 _salt) external {\\r\\n            Platform storage ds = diamondStorage();\\r\\n            ds.walletToVault[_wallet].push(_vault);\\r\\n            ds.vaultToSalt[_vault]=_salt;\\r\\n            ds.isVault[_vault]=true;\\r\\n            emit AddWalletToVault(_wallet,_vault,_salt);\\r\\n      }\\r\\n     \\r\\n      function removeWalletToVault(address _wallet,address[] memory _vaults) external {\\r\\n            Platform storage ds = diamondStorage();\\r\\n            address[] memory vaultList=ds.walletToVault[_wallet];\\r\\n            uint256 count=vaultList.length;\\r\\n            for(uint256 i=0;i<_vaults.length;i++){\\r\\n                 for(uint256 j=0;j<vaultList.length;j++){\\r\\n                    if(_vaults[i]==vaultList[j]){\\r\\n                         delete ds.isVault[_vaults[i]];\\r\\n                         delete ds.vaultToSalt[_vaults[i]];\\r\\n                         ds.walletToVault[_wallet][j]=ds.walletToVault[_wallet][count-1];\\r\\n                         ds.walletToVault[_wallet].pop();\\r\\n                         count--;\\r\\n                    }\\r\\n                 } \\r\\n            }\\r\\n            emit RemoveWalletToVault(_wallet,_vaults);\\r\\n\\r\\n      }\\r\\n      function getAllVaultByWallet(address _wallet) external view returns(address[] memory) {\\r\\n            Platform storage ds = diamondStorage();\\r\\n            return ds.walletToVault[_wallet];\\r\\n      }\\r\\n      function getVaultToSalt(address _vault) external view returns(uint256){\\r\\n            Platform storage ds = diamondStorage();\\r\\n            return ds.vaultToSalt[_vault];\\r\\n      }\\r\\n      function getIsVault(address _vault) external view returns(bool){\\r\\n            Platform storage ds = diamondStorage();\\r\\n            return ds.isVault[_vault]; \\r\\n      }\\r\\n     \\r\\n      function setWeth(address _weth) external{\\r\\n            Platform storage ds = diamondStorage();\\r\\n            ds.weth=_weth; \\r\\n            emit SetWeth(_weth);\\r\\n      }\\r\\n\\r\\n      function getWeth() external view returns(address){\\r\\n            Platform storage ds = diamondStorage();\\r\\n            return ds.weth;\\r\\n      }\\r\\n\\r\\n      function setEth(address _eth) external {\\r\\n            Platform storage ds = diamondStorage();\\r\\n            ds.eth=_eth;\\r\\n            emit SetEth(_eth);\\r\\n      }\\r\\n\\r\\n      function getEth() external view returns(address){\\r\\n            Platform storage ds = diamondStorage();\\r\\n            return ds.eth;\\r\\n      }\\r\\n\\r\\n      function getVaultImplementation() external view returns(address){\\r\\n            Platform storage ds=diamondStorage();\\r\\n            return ds.vaultImplementation;\\r\\n      }\\r\\n      \\r\\n      function setVaultImplementation(address _implementation) external{\\r\\n            Platform storage ds=diamondStorage();\\r\\n            ds.vaultImplementation=_implementation;\\r\\n            emit SetVaultImplementation(_implementation);\\r\\n      }\\r\\n      /**\\r\\n        _option:\\r\\n           true:add option\\r\\n           false:delete option      \\r\\n       */\\r\\n      function setProxyCodeHash(address _proxy,bool _option) external{\\r\\n             Platform storage ds=diamondStorage();\\r\\n             bytes32  hashCode=keccak256(_proxy.code);\\r\\n             ds.proxyCodeHash[hashCode]=_option;\\r\\n             emit SetProxyCodeHash(_proxy,_option);\\r\\n      }\\r\\n\\r\\n      function getProxyCodeHash(address _proxy) external view returns(bool){\\r\\n             Platform storage ds=diamondStorage();\\r\\n             bytes32  hashCode=keccak256(_proxy.code);\\r\\n             return  ds.proxyCodeHash[hashCode];\\r\\n      }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/IPlatformFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\ninterface IPlatformFacet{\\r\\n    struct ProtocolAndA{\\r\\n        address addr;\\r\\n        address module;\\r\\n        string  protocol;      \\r\\n    }\\r\\n    event SetModules(address[]  _modules,bool[]  _status);\\r\\n    event SetProtocols(address _module,string[]  _protocols,address[]  _protocolAddrs);\\r\\n    event SetTokens(address[]  _tokens,uint256[]  _tokenTypes);\\r\\n    event AddWalletToVault(address _wallet,address _vault,uint256 _salt);\\r\\n    event RemoveWalletToVault(address _wallet,address[]  _vaults);\\r\\n    event SetWeth(address _weth);\\r\\n    event SetEth(address _eth);\\r\\n    event SetVaultImplementation(address _implementation);\\r\\n    event SetProxyCodeHash(address _proxy,bool _option);\\r\\n\\r\\n    function setModules(address[] memory _modules,bool[] memory _status)  external;\\r\\n    function getAllModules()  external view returns(address[] memory);\\r\\n    function getModuleStatus(address _module) external view returns(bool);   \\r\\n\\r\\n\\r\\n    function setProtocols(address _module,string[] memory _protocols,address[] memory _protocolAddrs) external;\\r\\n    function getProtocols()  external view returns(ProtocolAndA[] memory);\\r\\n    function getModuleToProtocolA(address _module,string memory _protocol) external view returns(address);\\r\\n\\r\\n\\r\\n    function setTokens(address[] memory _tokens,uint256[] memory _tokenTypes)  external;\\r\\n    function getTokens()  external view returns(address[] memory);  \\r\\n    function getTokenType(address _token) external view returns(uint256);\\r\\n\\r\\n\\r\\n    function addWalletToVault(address _wallet,address _vault,uint256 _salt) external;\\r\\n    function removeWalletToVault(address _wallet,address[] memory _vaults) external;\\r\\n    function getAllVaultByWallet(address _wallet) external view returns(address[] memory);\\r\\n    function getVaultToSalt(address _vault) external view returns(uint256);\\r\\n    function getIsVault(address _vault) external view returns(bool);\\r\\n\\r\\n    function setWeth(address _weth) external;\\r\\n    function getWeth() external view returns(address);\\r\\n\\r\\n    function setEth(address _eth) external;\\r\\n    function getEth() external view returns(address);\\r\\n\\r\\n    function getVaultImplementation() external view returns(address);\\r\\n    function setVaultImplementation(address _implementation) external; \\r\\n    function setProxyCodeHash(address _proxy,bool _option) external;  \\r\\n    function getProxyCodeHash(address _proxy) external view returns(bool);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"AddWalletToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"RemoveWalletToVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_eth\",\"type\":\"address\"}],\"name\":\"SetEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"SetModules\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"_protocols\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_protocolAddrs\",\"type\":\"address[]\"}],\"name\":\"SetProtocols\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_option\",\"type\":\"bool\"}],\"name\":\"SetProxyCodeHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_tokenTypes\",\"type\":\"uint256[]\"}],\"name\":\"SetTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"SetVaultImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"SetWeth\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"addWalletToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllModules\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getAllVaultByWallet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getIsVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"getModuleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_protocol\",\"type\":\"string\"}],\"name\":\"getModuleToProtocolA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProtocols\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"protocol\",\"type\":\"string\"}],\"internalType\":\"struct IPlatformFacet.ProtocolAndA[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"getProxyCodeHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getVaultToSalt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"}],\"name\":\"removeWalletToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eth\",\"type\":\"address\"}],\"name\":\"setEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_status\",\"type\":\"bool[]\"}],\"name\":\"setModules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_protocols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_protocolAddrs\",\"type\":\"address[]\"}],\"name\":\"setProtocols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_option\",\"type\":\"bool\"}],\"name\":\"setProxyCodeHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenTypes\",\"type\":\"uint256[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setVaultImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlatformFacet", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}