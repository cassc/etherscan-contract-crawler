{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/feeDistributor/OracleFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"../feeDistributorFactory/IFeeDistributorFactory.sol\\\";\\nimport \\\"../assetRecovering/OwnableTokenRecoverer.sol\\\";\\nimport \\\"./IFeeDistributor.sol\\\";\\nimport \\\"../oracle/IOracle.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\nimport \\\"./BaseFeeDistributor.sol\\\";\\n\\n/// @notice Should be a Oracle contract\\n/// @param _passedAddress passed address that does not support IOracle interface\\nerror OracleFeeDistributor__NotOracle(address _passedAddress);\\n\\n/// @notice cannot withdraw until rewards (CL+EL) are enough to be split\\nerror OracleFeeDistributor__WaitForEnoughRewardsToWithdraw();\\n\\n/// @notice clientOnlyClRewards can only be set once\\nerror OracleFeeDistributor__CannotResetClientOnlyClRewards();\\n\\n/// @notice Client basis points should be higher than 5000\\nerror OracleFeeDistributor__ClientBasisPointsShouldBeHigherThan5000();\\n\\n/// @title FeeDistributor accepting EL rewards only but splitting them with consideration of CL rewards\\n/// @dev CL rewards are received by the client directly since client's address is ETH2 withdrawal credentials\\ncontract OracleFeeDistributor is BaseFeeDistributor {\\n\\n    /// @notice Emits when clientOnlyClRewards has been updated\\n    /// @param _clientOnlyClRewards new value of clientOnlyClRewards\\n    event OracleFeeDistributor__ClientOnlyClRewardsUpdated(\\n        uint256 _clientOnlyClRewards\\n    );\\n\\n    /// @notice address of Oracle\\n    IOracle private immutable i_oracle;\\n\\n    /// @notice amount of CL rewards (in Wei) that should belong to the client only\\n    /// and should not be considered for splitting between the service and the referrer\\n    uint256 s_clientOnlyClRewards;\\n\\n    /// @dev Set values that are constant, common for all the clients, known at the initial deploy time.\\n    /// @param _oracle address of Oracle\\n    /// @param _factory address of FeeDistributorFactory\\n    /// @param _service address of the service (P2P) fee recipient\\n    constructor(\\n        address _oracle,\\n        address _factory,\\n        address payable _service\\n    ) BaseFeeDistributor(_factory, _service) {\\n        if (!ERC165Checker.supportsInterface(_oracle, type(IOracle).interfaceId)) {\\n            revert OracleFeeDistributor__NotOracle(_oracle);\\n        }\\n\\n        i_oracle = IOracle(_oracle);\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function initialize(\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) public override {\\n        if (_clientConfig.basisPoints <= 5000) {\\n            revert OracleFeeDistributor__ClientBasisPointsShouldBeHigherThan5000();\\n        }\\n\\n        super.initialize(_clientConfig, _referrerConfig);\\n    }\\n\\n    /// @notice Set clientOnlyClRewards to a new value\\n    /// @param _clientOnlyClRewards new value of clientOnlyClRewards\\n    /// @dev may be needed when attaching this FeeDistributor to an existing validator.\\n    /// If previously earned rewards need not be split, they should be declared as client only.\\n    function setClientOnlyClRewards(uint256 _clientOnlyClRewards) external {\\n        i_factory.checkOperatorOrOwner(msg.sender);\\n\\n        if (s_clientOnlyClRewards != 0) {\\n            revert OracleFeeDistributor__CannotResetClientOnlyClRewards();\\n        }\\n\\n        s_clientOnlyClRewards = _clientOnlyClRewards;\\n\\n        emit OracleFeeDistributor__ClientOnlyClRewardsUpdated(_clientOnlyClRewards);\\n    }\\n\\n    /// @notice Withdraw the whole balance of the contract according to the pre-defined basis points.\\n    /// @dev In case someone (either service, or client, or referrer) fails to accept ether,\\n    /// the owner will be able to recover some of their share.\\n    /// This scenario is very unlikely. It can only happen if that someone is a contract\\n    /// whose receive function changed its behavior since FeeDistributor's initialization.\\n    /// It can never happen unless the receiving party themselves wants it to happen.\\n    /// We strongly recommend against intentional reverts in the receive function\\n    /// because the remaining parties might call `withdraw` again multiple times without waiting\\n    /// for the owner to recover ether for the reverting party.\\n    /// In fact, as a punishment for the reverting party, before the recovering,\\n    /// 1 more regular `withdraw` will happen, rewarding the non-reverting parties again.\\n    /// `recoverEther` function is just an emergency backup plan and does not replace `withdraw`.\\n    ///\\n    /// @param _proof Merkle proof (the leaf's sibling, and each non-leaf hash that could not otherwise be calculated without additional leaf nodes)\\n    /// @param _amountInGwei total CL rewards earned by all validators in GWei (see _validatorCount)\\n    function withdraw(\\n        bytes32[] calldata _proof,\\n        uint256 _amountInGwei\\n    ) external nonReentrant {\\n        if (s_clientConfig.recipient == address(0)) {\\n            revert FeeDistributor__ClientNotSet();\\n        }\\n\\n        // get the contract's balance\\n        uint256 balance = address(this).balance;\\n\\n        if (balance == 0) {\\n            // revert if there is no ether to withdraw\\n            revert FeeDistributor__NothingToWithdraw();\\n        }\\n\\n        // verify the data from the caller against the oracle\\n        i_oracle.verify(_proof, address(this), _amountInGwei);\\n\\n        // Gwei to Wei\\n        uint256 amount = _amountInGwei * (10 ** 9);\\n\\n        if (amount < s_clientOnlyClRewards) {\\n            // Can happen if the client has called emergencyEtherRecoveryWithoutOracleData before\\n            // but the actual rewards amount now appeared to be lower than the already split.\\n            // Should happen rarely.\\n\\n            revert OracleFeeDistributor__WaitForEnoughRewardsToWithdraw();\\n        }\\n\\n        // total to split = EL + CL - already split part of CL (should be OK unless halfBalance < serviceAmount)\\n        uint256 totalAmountToSplit = balance + amount - s_clientOnlyClRewards;\\n\\n        // set client basis points to value from storage config\\n        uint256 clientBp = s_clientConfig.basisPoints;\\n\\n        // how much should service get\\n        uint256 serviceAmount = totalAmountToSplit - ((totalAmountToSplit * clientBp) / 10000);\\n\\n        uint256 halfBalance = balance / 2;\\n\\n        // how much should client get\\n        uint256 clientAmount;\\n\\n        // if a half of the available balance is not enough to cover service (and referrer) shares\\n        // can happen when CL rewards (only accessible by client) are way much than EL rewards\\n        if (serviceAmount > halfBalance) {\\n            // client gets 50% of EL rewards\\n            clientAmount = halfBalance;\\n\\n            // service (and referrer) get 50% of EL rewards combined (+1 wei in case balance is odd)\\n            serviceAmount = balance - halfBalance;\\n\\n            // update the total amount being split to a smaller value to fit the actual balance of this contract\\n            totalAmountToSplit = (halfBalance * 10000) / (10000 - clientBp);\\n        } else {\\n            // send the remaining balance to client\\n            clientAmount = balance - serviceAmount;\\n        }\\n\\n        emit OracleFeeDistributor__ClientOnlyClRewardsUpdated(s_clientOnlyClRewards);\\n\\n        bool someEthSent;\\n\\n        // how much should referrer get\\n        uint256 referrerAmount;\\n\\n        if (s_referrerConfig.recipient != address(0)) {\\n            // if there is a referrer\\n\\n            referrerAmount = (totalAmountToSplit * s_referrerConfig.basisPoints) / 10000;\\n\\n            serviceAmount -= referrerAmount;\\n\\n            // Send ETH to referrer. Ignore the possible yet unlikely revert in the receive function.\\n            someEthSent = P2pAddressLib._sendValue(s_referrerConfig.recipient, referrerAmount);\\n        }\\n\\n        // Send ETH to service. Ignore the possible yet unlikely revert in the receive function.\\n        someEthSent = P2pAddressLib._sendValue(i_service, serviceAmount) || someEthSent;\\n\\n        // Send ETH to client. Ignore the possible yet unlikely revert in the receive function.\\n        someEthSent = P2pAddressLib._sendValue(s_clientConfig.recipient, clientAmount) || someEthSent;\\n\\n        if (someEthSent) {\\n            // client gets the rest from CL as not split anymore amount\\n            s_clientOnlyClRewards += (totalAmountToSplit - balance);\\n        }\\n\\n        emit FeeDistributor__Withdrawn(\\n            serviceAmount,\\n            clientAmount,\\n            referrerAmount\\n        );\\n    }\\n\\n    /// @notice Recover ether in a rare case when either service, or client, or referrer\\n    /// refuse to accept ether.\\n    /// @param _to receiver address\\n    /// @param _proof Merkle proof (the leaf's sibling, and each non-leaf hash that could not otherwise be calculated without additional leaf nodes)\\n    /// @param _amountInGwei total CL rewards earned by all validators in GWei (see _validatorCount)\\n    function recoverEther(\\n        address payable _to,\\n        bytes32[] calldata _proof,\\n        uint256 _amountInGwei\\n    ) external onlyOwner {\\n        if (_to == address(0)) {\\n            revert FeeDistributor__ZeroAddressEthReceiver();\\n        }\\n\\n        this.withdraw(_proof, _amountInGwei);\\n\\n        // get the contract's balance\\n        uint256 balance = address(this).balance;\\n\\n        if (balance > 0) { // only happens if at least 1 party reverted in their receive\\n            bool success = P2pAddressLib._sendValueWithoutGasRestrictions(_to, balance);\\n\\n            if (success) {\\n                emit FeeDistributor__EtherRecovered(_to, balance);\\n            } else {\\n                revert FeeDistributor__EtherRecoveryFailed(_to, balance);\\n            }\\n        }\\n    }\\n\\n    /// @notice SHOULD NEVER BE CALLED NORMALLY!!!! Recover ether if oracle data (Merkle proof) is not available for some reason.\\n    function emergencyEtherRecoveryWithoutOracleData() external onlyClient nonReentrant {\\n        // get the contract's balance\\n        uint256 balance = address(this).balance;\\n\\n        if (balance == 0) {\\n            // revert if there is no ether to withdraw\\n            revert FeeDistributor__NothingToWithdraw();\\n        }\\n\\n        uint256 halfBalance = balance / 2;\\n\\n        // client gets 50% of EL rewards\\n        uint256 clientAmount = halfBalance;\\n\\n        // service (and referrer) get 50% of EL rewards combined (+1 wei in case balance is odd)\\n        uint256 serviceAmount = balance - halfBalance;\\n\\n        // the total amount being split fits the actual balance of this contract\\n        uint256 totalAmountToSplit = (halfBalance * 10000) / (10000 - s_clientConfig.basisPoints);\\n\\n        emit OracleFeeDistributor__ClientOnlyClRewardsUpdated(s_clientOnlyClRewards);\\n\\n        bool someEthSent;\\n\\n        // how much should referrer get\\n        uint256 referrerAmount;\\n\\n        if (s_referrerConfig.recipient != address(0)) {\\n            // if there is a referrer\\n\\n            referrerAmount = (totalAmountToSplit * s_referrerConfig.basisPoints) / 10000;\\n\\n            serviceAmount -= referrerAmount;\\n\\n            // Send ETH to referrer. Ignore the possible yet unlikely revert in the receive function.\\n            someEthSent = P2pAddressLib._sendValue(s_referrerConfig.recipient, referrerAmount);\\n        }\\n\\n        // Send ETH to service. Ignore the possible yet unlikely revert in the receive function.\\n        someEthSent = P2pAddressLib._sendValue(i_service, serviceAmount) || someEthSent;\\n\\n        // Send ETH to client. Ignore the possible yet unlikely revert in the receive function.\\n        someEthSent = P2pAddressLib._sendValue(s_clientConfig.recipient, clientAmount) || someEthSent;\\n\\n        if (someEthSent) {\\n            // client gets the rest from CL as not split anymore amount\\n            s_clientOnlyClRewards += (totalAmountToSplit - balance);\\n        }\\n\\n        emit FeeDistributor__Withdrawn(\\n            serviceAmount,\\n            clientAmount,\\n            referrerAmount\\n        );\\n    }\\n\\n    /// @notice amount of CL rewards (in Wei) that should belong to the client only\\n    /// and should not be considered for splitting between the service and the referrer\\n    /// @return uint256 amount of client only CL rewards\\n    function clientOnlyClRewards() external view returns (uint256) {\\n        return s_clientOnlyClRewards;\\n    }\\n\\n    /// @notice Returns the oracle address\\n    /// @return address oracle address\\n    function oracle() external view returns (address) {\\n        return address(i_oracle);\\n    }\\n\\n    /// @inheritdoc Erc4337Account\\n    function withdrawSelector() public pure override returns (bytes4) {\\n        return OracleFeeDistributor.withdraw.selector;\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    /// @dev client address\\n    function eth2WithdrawalCredentialsAddress() external override view returns (address) {\\n        return s_clientConfig.recipient;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/feeDistributorFactory/IFeeDistributorFactory.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../access/IOwnable.sol\\\";\\nimport \\\"../feeDistributor/IFeeDistributor.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\n\\n/// @dev External interface of FeeDistributorFactory declared to support ERC165 detection.\\ninterface IFeeDistributorFactory is IOwnable, IERC165 {\\n\\n    /// @notice Emits when a new FeeDistributor instance has been created for a client\\n    /// @param _newFeeDistributorAddress address of the newly created FeeDistributor contract instance\\n    /// @param _clientAddress address of the client for whom the new instance was created\\n    /// @param _referenceFeeDistributor The address of the reference implementation of FeeDistributor used as the basis for clones\\n    /// @param _clientBasisPoints client basis points (percent * 100)\\n    event FeeDistributorFactory__FeeDistributorCreated(\\n        address indexed _newFeeDistributorAddress,\\n        address indexed _clientAddress,\\n        address indexed _referenceFeeDistributor,\\n        uint96 _clientBasisPoints\\n    );\\n\\n    /// @notice Emits when a new P2pEth2Depositor contract address has been set.\\n    /// @param _p2pEth2Depositor the address of the new P2pEth2Depositor contract\\n    event FeeDistributorFactory__P2pEth2DepositorSet(\\n        address indexed _p2pEth2Depositor\\n    );\\n\\n    /// @notice Emits when a new value of defaultClientBasisPoints has been set.\\n    /// @param _defaultClientBasisPoints new value of defaultClientBasisPoints\\n    event FeeDistributorFactory__DefaultClientBasisPointsSet(\\n        uint96 _defaultClientBasisPoints\\n    );\\n\\n    /// @notice Creates a FeeDistributor instance for a client\\n    /// @dev _referrerConfig can be zero if there is no referrer.\\n    ///\\n    /// @param _referenceFeeDistributor The address of the reference implementation of FeeDistributor used as the basis for clones\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    /// @return newFeeDistributorAddress user FeeDistributor instance that has just been deployed\\n    function createFeeDistributor(\\n        address _referenceFeeDistributor,\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external returns (address newFeeDistributorAddress);\\n\\n    /// @notice Computes the address of a FeeDistributor created by `createFeeDistributor` function\\n    /// @dev FeeDistributor instances are guaranteed to have the same address if all of\\n    /// 1) referenceFeeDistributor 2) clientConfig 3) referrerConfig\\n    /// are the same\\n    /// @param _referenceFeeDistributor The address of the reference implementation of FeeDistributor used as the basis for clones\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    /// @return address user FeeDistributor instance that will be or has been deployed\\n    function predictFeeDistributorAddress(\\n        address _referenceFeeDistributor,\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external view returns (address);\\n\\n    /// @notice Returns an array of client FeeDistributors\\n    /// @param _client client address\\n    /// @return address[] array of client FeeDistributors\\n    function allClientFeeDistributors(\\n        address _client\\n    ) external view returns (address[] memory);\\n\\n    /// @notice Returns an array of all FeeDistributors for all clients\\n    /// @return address[] array of all FeeDistributors\\n    function allFeeDistributors() external view returns (address[] memory);\\n\\n    /// @notice The address of P2pEth2Depositor\\n    /// @return address of P2pEth2Depositor\\n    function p2pEth2Depositor() external view returns (address);\\n\\n    /// @notice Returns default client basis points\\n    /// @return default client basis points\\n    function defaultClientBasisPoints() external view returns (uint96);\\n\\n    /// @notice Returns the current operator\\n    /// @return address of the current operator\\n    function operator() external view returns (address);\\n\\n    /// @notice Reverts if the passed address is neither operator nor owner\\n    /// @param _address passed address\\n    function checkOperatorOrOwner(address _address) external view;\\n\\n    /// @notice Reverts if the passed address is not P2pEth2Depositor\\n    /// @param _address passed address\\n    function checkP2pEth2Depositor(address _address) external view;\\n\\n    /// @notice Reverts if the passed address is neither of: 1) operator 2) owner 3) P2pEth2Depositor\\n    /// @param _address passed address\\n    function check_Operator_Owner_P2pEth2Depositor(address _address) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/assetRecovering/OwnableTokenRecoverer.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, Lido <info@lido.fi>\\n// SPDX-License-Identifier: MIT\\n\\n// https://github.com/lidofinance/lido-otc-seller/blob/master/contracts/lib/AssetRecoverer.sol\\npragma solidity 0.8.10;\\n\\nimport \\\"./TokenRecoverer.sol\\\";\\nimport \\\"../access/OwnableBase.sol\\\";\\n\\n/// @title Token Recoverer with public functions callable by assetAccessingAddress\\n/// @notice Recover ERC20, ERC721 and ERC1155 from a derived contract\\nabstract contract OwnableTokenRecoverer is TokenRecoverer, OwnableBase {\\n    // Functions\\n\\n    /**\\n     * @notice transfer an ERC20 token from this contract\\n     * @dev `SafeERC20.safeTransfer` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC20 token\\n     * @param _recipient address to transfer the tokens to\\n     * @param _amount amount of tokens to transfer\\n     */\\n    function transferERC20(\\n        address _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transferERC20(_token, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC721 token from this contract\\n     * @dev `IERC721.safeTransferFrom` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC721 token\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token\\n     */\\n    function transferERC721(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        _transferERC721(_token, _recipient, _tokenId);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC1155 token from this contract\\n     * @dev see `AssetRecoverer`\\n     * @param _token address of the ERC1155 token that is being recovered\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token to transfer\\n     * @param _amount amount of tokens to transfer\\n     * @param _data data to transfer along\\n     */\\n    function transferERC1155(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external onlyOwner {\\n        _transferERC1155(_token, _recipient, _tokenId, _amount, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/feeDistributor/IFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\n\\n/// @dev External interface of FeeDistributor declared to support ERC165 detection.\\ninterface IFeeDistributor is IERC165 {\\n\\n    /// @notice Emits once the client and the optional referrer have been set.\\n    /// @param _client address of the client.\\n    /// @param _clientBasisPoints basis points (percent * 100) of EL rewards that should go to the client\\n    /// @param _referrer address of the referrer.\\n    /// @param _referrerBasisPoints basis points (percent * 100) of EL rewards that should go to the referrer\\n    event FeeDistributor__Initialized(\\n        address indexed _client,\\n        uint96 _clientBasisPoints,\\n        address indexed _referrer,\\n        uint96 _referrerBasisPoints\\n    );\\n\\n    /// @notice Emits on successful withdrawal\\n    /// @param _serviceAmount how much wei service received\\n    /// @param _clientAmount how much wei client received\\n    /// @param _referrerAmount how much wei referrer received\\n    event FeeDistributor__Withdrawn(\\n        uint256 _serviceAmount,\\n        uint256 _clientAmount,\\n        uint256 _referrerAmount\\n    );\\n\\n    /// @notice Emits on request for a voluntary exit of validators\\n    /// @param _pubkeys pubkeys of validators\\n    event FeeDistributor__VoluntaryExit(\\n        bytes[] _pubkeys\\n    );\\n\\n    /// @notice Emits if case there was some ether left after `withdraw` and it has been sent successfully.\\n    /// @param _to destination address for ether.\\n    /// @param _amount how much wei the destination address received.\\n    event FeeDistributor__EtherRecovered(\\n        address indexed _to,\\n        uint256 _amount\\n    );\\n\\n    /// @notice Set client address.\\n    /// @dev Could not be in the constructor since it is different for different clients.\\n    /// _referrerConfig can be zero if there is no referrer.\\n    /// @param _clientConfig address and basis points (percent * 100) of the client\\n    /// @param _referrerConfig address and basis points (percent * 100) of the referrer.\\n    function initialize(\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) external;\\n\\n    /// @notice Increase the number of deposited validators.\\n    /// @dev Should be called when a new ETH2 deposit has been made\\n    /// @param _validatorCountToAdd number of newly deposited validators\\n    function increaseDepositedCount(\\n        uint32 _validatorCountToAdd\\n    ) external;\\n\\n    /// @notice Request a voluntary exit of validators\\n    /// @dev Should be called by the client when they want to signal P2P that certain validators need to be exited\\n    /// @param _pubkeys pubkeys of validators\\n    function voluntaryExit(\\n        bytes[] calldata _pubkeys\\n    ) external;\\n\\n    /// @notice Returns the factory address\\n    /// @return address factory address\\n    function factory() external view returns (address);\\n\\n    /// @notice Returns the service address\\n    /// @return address service address\\n    function service() external view returns (address);\\n\\n    /// @notice Returns the client address\\n    /// @return address client address\\n    function client() external view returns (address);\\n\\n    /// @notice Returns the client basis points\\n    /// @return uint256 client basis points\\n    function clientBasisPoints() external view returns (uint256);\\n\\n    /// @notice Returns the referrer address\\n    /// @return address referrer address\\n    function referrer() external view returns (address);\\n\\n    /// @notice Returns the referrer basis points\\n    /// @return uint256 referrer basis points\\n    function referrerBasisPoints() external view returns (uint256);\\n\\n    /// @notice Returns the address for ETH2 0x01 withdrawal credentials associated with this FeeDistributor\\n    /// @dev Return FeeDistributor's own address if FeeDistributor should be CL rewards recipient\\n    /// Otherwise, return the client address\\n    /// @return address address for ETH2 0x01 withdrawal credentials\\n    function eth2WithdrawalCredentialsAddress() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IOracle.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../access/IOwnable.sol\\\";\\n\\n/**\\n * @dev External interface of Oracle declared to support ERC165 detection.\\n */\\ninterface IOracle is IOwnable, IERC165 {\\n    // Events\\n\\n    /**\\n    * @notice Emits when a new oracle report (Merkle root) recorded\\n    * @param _root Merkle root\\n    */\\n    event Oracle__Reported(bytes32 indexed _root);\\n\\n    // Functions\\n\\n    /**\\n    * @notice Set a new oracle report (Merkle root)\\n    * @param _root Merkle root\\n    */\\n    function report(bytes32 _root) external;\\n\\n    /**\\n    * @notice Verify Merkle proof (that the leaf belongs to the tree)\\n    * @param _proof Merkle proof (the leaf's sibling, and each non-leaf hash that could not otherwise be calculated without additional leaf nodes)\\n    * @param _feeDistributorInstance feeDistributor instance address\\n    * @param _amountInGwei total CL rewards earned by all validators in GWei (see _validatorCount)\\n    */\\n    function verify(\\n        bytes32[] calldata _proof,\\n        address _feeDistributorInstance,\\n        uint256 _amountInGwei\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/structs/P2pStructs.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../feeDistributor/IFeeDistributor.sol\\\";\\n\\n/// @dev 256 bit struct\\n/// @member basisPoints basis points (percent * 100) of EL rewards that should go to the recipient\\n/// @member recipient address of the recipient\\nstruct FeeRecipient {\\n    uint96 basisPoints;\\n    address payable recipient;\\n}\\n\\n/// @dev 256 bit struct\\n/// @member depositedCount the number of deposited validators\\n/// @member exitedCount the number of validators requested to exit\\n/// @member collateralReturnedValue amount of ETH returned to the client to cover the collaterals\\n/// @member cooldownUntil timestamp after which it will be possible to withdraw ignoring the client's revert on ETH receive\\nstruct ValidatorData {\\n    uint32 depositedCount;\\n    uint32 exitedCount;\\n    uint112 collateralReturnedValue;\\n    uint80 cooldownUntil;\\n}\\n\\n/// @dev status of the client deposit\\n/// @member None default status indicating that no ETH is waiting to be forwarded to Beacon DepositContract\\n/// @member EthAdded client added ETH\\n/// @member BeaconDepositInProgress P2P has forwarded some (but not all) ETH to Beacon DepositContract\\n/// If all ETH has been forwarded, the status will be None.\\n/// @member ServiceRejected P2P has rejected the service for a given FeeDistributor instance\\n// The client can get a refund immediately.\\nenum ClientDepositStatus {\\n    None,\\n    EthAdded,\\n    BeaconDepositInProgress,\\n    ServiceRejected\\n}\\n\\n/// @dev 256 bit struct\\n/// @member amount amount of ETH in wei to be used for an ETH2 deposit corresponding to a particular FeeDistributor instance\\n/// @member expiration block timestamp after which the client will be able to get a refund\\n/// @member status deposit status\\n/// @member reservedForFutureUse unused space making up to 256 bit\\nstruct ClientDeposit {\\n    uint112 amount;\\n    uint40 expiration;\\n    ClientDepositStatus status;\\n    uint96 reservedForFutureUse;\\n}\\n\"\r\n    },\r\n    \"contracts/feeDistributor/BaseFeeDistributor.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"../@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"../feeDistributorFactory/IFeeDistributorFactory.sol\\\";\\nimport \\\"../assetRecovering/OwnableTokenRecoverer.sol\\\";\\nimport \\\"../access/OwnableWithOperator.sol\\\";\\nimport \\\"./IFeeDistributor.sol\\\";\\nimport \\\"./FeeDistributorErrors.sol\\\";\\nimport \\\"../structs/P2pStructs.sol\\\";\\nimport \\\"../lib/P2pAddressLib.sol\\\";\\nimport \\\"./Erc4337Account.sol\\\";\\n\\n/// @title Common logic for all FeeDistributor types\\nabstract contract BaseFeeDistributor is Erc4337Account, OwnableTokenRecoverer, OwnableWithOperator, ReentrancyGuard, ERC165, IFeeDistributor {\\n\\n    /// @notice FeeDistributorFactory address\\n    IFeeDistributorFactory internal immutable i_factory;\\n\\n    /// @notice P2P fee recipient address\\n    address payable internal immutable i_service;\\n\\n    /// @notice Client rewards recipient address and basis points\\n    FeeRecipient internal s_clientConfig;\\n\\n    /// @notice Referrer rewards recipient address and basis points\\n    FeeRecipient internal s_referrerConfig;\\n\\n    /// @notice If caller not client, revert\\n    modifier onlyClient() {\\n        address clientAddress = s_clientConfig.recipient;\\n\\n        if (clientAddress != msg.sender) {\\n            revert FeeDistributor__CallerNotClient(msg.sender, clientAddress);\\n        }\\n        _;\\n    }\\n\\n    /// @notice If caller not factory, revert\\n    modifier onlyFactory() {\\n        if (msg.sender != address(i_factory)) {\\n            revert FeeDistributor__NotFactoryCalled(msg.sender, i_factory);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Set values that are constant, common for all the clients, known at the initial deploy time.\\n    /// @param _factory address of FeeDistributorFactory\\n    /// @param _service address of the service (P2P) fee recipient\\n    constructor(\\n        address _factory,\\n        address payable _service\\n    ) {\\n        if (!ERC165Checker.supportsInterface(_factory, type(IFeeDistributorFactory).interfaceId)) {\\n            revert FeeDistributor__NotFactory(_factory);\\n        }\\n        if (_service == address(0)) {\\n            revert FeeDistributor__ZeroAddressService();\\n        }\\n\\n        i_factory = IFeeDistributorFactory(_factory);\\n        i_service = _service;\\n\\n        bool serviceCanReceiveEther = P2pAddressLib._sendValue(_service, 0);\\n        if (!serviceCanReceiveEther) {\\n            revert FeeDistributor__ServiceCannotReceiveEther(_service);\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function initialize(\\n        FeeRecipient calldata _clientConfig,\\n        FeeRecipient calldata _referrerConfig\\n    ) public virtual onlyFactory {\\n        if (_clientConfig.recipient == address(0)) {\\n            revert FeeDistributor__ZeroAddressClient();\\n        }\\n        if (_clientConfig.recipient == i_service) {\\n            revert FeeDistributor__ClientAddressEqualsService(_clientConfig.recipient);\\n        }\\n        if (s_clientConfig.recipient != address(0)) {\\n            revert FeeDistributor__ClientAlreadySet(s_clientConfig.recipient);\\n        }\\n        if (_clientConfig.basisPoints >= 10000) {\\n            revert FeeDistributor__InvalidClientBasisPoints(_clientConfig.basisPoints);\\n        }\\n\\n        if (_referrerConfig.recipient != address(0)) {// if there is a referrer\\n            if (_referrerConfig.recipient == i_service) {\\n                revert FeeDistributor__ReferrerAddressEqualsService(_referrerConfig.recipient);\\n            }\\n            if (_referrerConfig.recipient == _clientConfig.recipient) {\\n                revert FeeDistributor__ReferrerAddressEqualsClient(_referrerConfig.recipient);\\n            }\\n            if (_referrerConfig.basisPoints == 0) {\\n                revert FeeDistributor__ZeroReferrerBasisPointsForNonZeroReferrer();\\n            }\\n            if (_clientConfig.basisPoints + _referrerConfig.basisPoints > 10000) {\\n                revert FeeDistributor__ClientPlusReferralBasisPointsExceed10000(\\n                    _clientConfig.basisPoints,\\n                    _referrerConfig.basisPoints\\n                );\\n            }\\n\\n            // set referrer config\\n            s_referrerConfig = _referrerConfig;\\n\\n        } else {// if there is no referrer\\n            if (_referrerConfig.basisPoints != 0) {\\n                revert FeeDistributor__ReferrerBasisPointsMustBeZeroIfAddressIsZero(_referrerConfig.basisPoints);\\n            }\\n        }\\n\\n        // set client config\\n        s_clientConfig = _clientConfig;\\n\\n        emit FeeDistributor__Initialized(\\n            _clientConfig.recipient,\\n            _clientConfig.basisPoints,\\n            _referrerConfig.recipient,\\n            _referrerConfig.basisPoints\\n        );\\n\\n        bool clientCanReceiveEther = P2pAddressLib._sendValue(_clientConfig.recipient, 0);\\n        if (!clientCanReceiveEther) {\\n            revert FeeDistributor__ClientCannotReceiveEther(_clientConfig.recipient);\\n        }\\n        if (_referrerConfig.recipient != address(0)) {// if there is a referrer\\n            bool referrerCanReceiveEther = P2pAddressLib._sendValue(_referrerConfig.recipient, 0);\\n            if (!referrerCanReceiveEther) {\\n                revert FeeDistributor__ReferrerCannotReceiveEther(_referrerConfig.recipient);\\n            }\\n        }\\n    }\\n\\n    /// @notice Accept ether from transactions\\n    receive() external payable {\\n        // only accept ether in an instance, not in a template\\n        if (s_clientConfig.recipient == address(0)) {\\n            revert FeeDistributor__ClientNotSet();\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function increaseDepositedCount(uint32 _validatorCountToAdd) external virtual {\\n        // Do nothing by default. Can be overridden.\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function voluntaryExit(bytes[] calldata _pubkeys) public virtual onlyClient {\\n        emit FeeDistributor__VoluntaryExit(_pubkeys);\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function factory() external view returns (address) {\\n        return address(i_factory);\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function service() external view returns (address) {\\n        return i_service;\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function client() public view override(Erc4337Account, IFeeDistributor) returns (address) {\\n        return s_clientConfig.recipient;\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function clientBasisPoints() external view returns (uint256) {\\n        return s_clientConfig.basisPoints;\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function referrer() external view returns (address) {\\n        return s_referrerConfig.recipient;\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function referrerBasisPoints() external view returns (uint256) {\\n        return s_referrerConfig.basisPoints;\\n    }\\n\\n    /// @inheritdoc IFeeDistributor\\n    function eth2WithdrawalCredentialsAddress() external virtual view returns (address);\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IFeeDistributor).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IOwnable\\n    function owner() public view override(Erc4337Account, OwnableBase, Ownable) returns (address) {\\n        return i_factory.owner();\\n    }\\n\\n    /// @inheritdoc IOwnableWithOperator\\n    function operator() public view override(Erc4337Account, OwnableWithOperator) returns (address) {\\n        return super.operator();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/access/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev External interface of Ownable.\\n */\\ninterface IOwnable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/assetRecovering/TokenRecoverer.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, Lido <info@lido.fi>\\n// SPDX-License-Identifier: MIT\\n\\n// https://github.com/lidofinance/lido-otc-seller/blob/master/contracts/lib/AssetRecoverer.sol\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"../@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC721} from \\\"../@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"../@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {SafeERC20} from \\\"../@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n* @notice prevents burn for transfer functions\\n* @dev _recipient should not be a zero address\\n*/\\nerror TokenRecoverer__NoBurn();\\n\\n\\n/// @title Token Recoverer\\n/// @notice Recover ERC20, ERC721 and ERC1155 from a derived contract\\nabstract contract TokenRecoverer {\\n    using SafeERC20 for IERC20;\\n\\n    event ERC20Transferred(address indexed _token, address indexed _recipient, uint256 _amount);\\n    event ERC721Transferred(address indexed _token, address indexed _recipient, uint256 _tokenId);\\n    event ERC1155Transferred(address indexed _token, address indexed _recipient, uint256 _tokenId, uint256 _amount, bytes _data);\\n\\n    /**\\n     * @notice prevents burn for transfer functions\\n     * @dev checks for zero address and reverts if true\\n     * @param _recipient address of the transfer recipient\\n     */\\n    modifier burnDisallowed(address _recipient) {\\n        if (_recipient == address(0)) {\\n            revert TokenRecoverer__NoBurn();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice transfer an ERC20 token from this contract\\n     * @dev `SafeERC20.safeTransfer` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC20 token\\n     * @param _recipient address to transfer the tokens to\\n     * @param _amount amount of tokens to transfer\\n     */\\n    function _transferERC20(\\n        address _token,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal virtual burnDisallowed(_recipient) {\\n        IERC20(_token).safeTransfer(_recipient, _amount);\\n        emit ERC20Transferred(_token, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC721 token from this contract\\n     * @dev `IERC721.safeTransferFrom` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC721 token\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token\\n     */\\n    function _transferERC721(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId\\n    ) internal virtual burnDisallowed(_recipient) {\\n        IERC721(_token).transferFrom(address(this), _recipient, _tokenId);\\n        emit ERC721Transferred(_token, _recipient, _tokenId);\\n    }\\n\\n    /**\\n     * @notice transfer an ERC1155 token from this contract\\n     * @dev `IERC1155.safeTransferFrom` doesn't always return a bool\\n     * as it performs an internal `require` check\\n     * @param _token address of the ERC1155 token that is being recovered\\n     * @param _recipient address to transfer the token to\\n     * @param _tokenId id of the individual token to transfer\\n     * @param _amount amount of tokens to transfer\\n     * @param _data data to transfer along\\n     */\\n    function _transferERC1155(\\n        address _token,\\n        address _recipient,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) internal virtual burnDisallowed(_recipient) {\\n        IERC1155(_token).safeTransferFrom(address(this), _recipient, _tokenId, _amount, _data);\\n        emit ERC1155Transferred(_token, _recipient, _tokenId, _amount, _data);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/OwnableBase.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n* @notice Throws if called by any account other than the owner.\\n* @param _caller address of the caller\\n* @param _owner address of the owner\\n*/\\nerror OwnableBase__CallerNotOwner(address _caller, address _owner);\\n\\n/**\\n * @dev minimalistic version of OpenZeppelin's Ownable.\\n * The owner is abstract and is not persisted in storage.\\n * Needs to be overridden in a child contract.\\n */\\nabstract contract OwnableBase is Context, IOwnable {\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        address caller = _msgSender();\\n        address currentOwner = owner();\\n\\n        if (currentOwner != caller) {\\n            revert OwnableBase__CallerNotOwner(caller, currentOwner);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     * Needs to be overridden in a child contract.\\n     */\\n    function owner() public view virtual override returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/OwnableWithOperator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ownable2Step.sol\\\";\\nimport \\\"./IOwnableWithOperator.sol\\\";\\n\\n/**\\n* @notice newOperator is the zero address\\n*/\\nerror Access__ZeroNewOperator();\\n\\n/**\\n* @notice newOperator is the same as the old one\\n*/\\nerror Access__SameOperator(address _operator);\\n\\n/**\\n* @notice caller is neither the operator nor owner\\n*/\\nerror Access__CallerNeitherOperatorNorOwner(address _caller, address _operator, address _owner);\\n\\n/**\\n* @notice address is neither the operator nor owner\\n*/\\nerror Access__AddressNeitherOperatorNorOwner(address _address, address _operator, address _owner);\\n\\n/**\\n * @dev Ownable with an additional role of operator\\n */\\nabstract contract OwnableWithOperator is Ownable2Step, IOwnableWithOperator {\\n    address private s_operator;\\n\\n    /**\\n     * @dev Emits when the operator has been changed\\n     * @param _previousOperator address of the previous operator\\n     * @param _newOperator address of the new operator\\n     */\\n    event OperatorChanged(\\n        address indexed _previousOperator,\\n        address indexed _newOperator\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the operator or the owner.\\n     */\\n    modifier onlyOperatorOrOwner() {\\n        address currentOwner = owner();\\n        address currentOperator = s_operator;\\n\\n        if (currentOperator != _msgSender() && currentOwner != _msgSender()) {\\n            revert Access__CallerNeitherOperatorNorOwner(_msgSender(), currentOperator, currentOwner);\\n        }\\n\\n        _;\\n    }\\n\\n    function checkOperatorOrOwner(address _address) public view virtual {\\n        address currentOwner = owner();\\n        address currentOperator = s_operator;\\n\\n        if (_address == address(0) || (currentOperator != _address && currentOwner != _address)) {\\n            revert Access__AddressNeitherOperatorNorOwner(_address, currentOperator, currentOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current operator.\\n     */\\n    function operator() public view virtual returns (address) {\\n        return s_operator;\\n    }\\n\\n    /**\\n     * @dev Transfers operator to a new account (`newOperator`).\\n     * Can only be called by the current owner.\\n     */\\n    function changeOperator(address _newOperator) external virtual onlyOwner {\\n        if (_newOperator == address(0)) {\\n            revert Access__ZeroNewOperator();\\n        }\\n        if (_newOperator == s_operator) {\\n            revert Access__SameOperator(_newOperator);\\n        }\\n\\n        _changeOperator(_newOperator);\\n    }\\n\\n    /**\\n     * @dev Transfers operator to a new account (`newOperator`).\\n     * Internal function without access restriction.\\n     */\\n    function _changeOperator(address _newOperator) internal virtual {\\n        address oldOperator = s_operator;\\n        s_operator = _newOperator;\\n        emit OperatorChanged(oldOperator, _newOperator);\\n    }\\n\\n    /**\\n     * @dev Dismisses the old operator without setting a new one.\\n     * Can only be called by the current owner.\\n     */\\n    function dismissOperator() external virtual onlyOwner {\\n        _changeOperator(address(0));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/feeDistributor/FeeDistributorErrors.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../feeDistributorFactory/IFeeDistributorFactory.sol\\\";\\n\\n/// @notice Should be a FeeDistributorFactory contract\\n/// @param _passedAddress passed address that does not support IFeeDistributorFactory interface\\nerror FeeDistributor__NotFactory(address _passedAddress);\\n\\n/// @notice Service address should be a secure P2P address, not zero.\\nerror FeeDistributor__ZeroAddressService();\\n\\n/// @notice Client address should be different from service address.\\n/// @param _passedAddress passed client address that equals to the service address\\nerror FeeDistributor__ClientAddressEqualsService(address _passedAddress);\\n\\n/// @notice Client address should be an actual client address, not zero.\\nerror FeeDistributor__ZeroAddressClient();\\n\\n/// @notice Client basis points should be >= 0 and <= 10000\\n/// @param _clientBasisPoints passed incorrect client basis points\\nerror FeeDistributor__InvalidClientBasisPoints(uint96 _clientBasisPoints);\\n\\n/// @notice Referrer basis points should be > 0 if the referrer exists\\nerror FeeDistributor__ZeroReferrerBasisPointsForNonZeroReferrer();\\n\\n/// @notice The sum of (Client basis points + Referral basis points) should be >= 0 and <= 10000\\n/// @param _clientBasisPoints passed client basis points\\n/// @param _referralBasisPoints passed referral basis points\\nerror FeeDistributor__ClientPlusReferralBasisPointsExceed10000(uint96 _clientBasisPoints, uint96 _referralBasisPoints);\\n\\n/// @notice Referrer address should be different from service address.\\n/// @param _passedAddress passed referrer address that equals to the service address\\nerror FeeDistributor__ReferrerAddressEqualsService(address _passedAddress);\\n\\n/// @notice Referrer address should be different from client address.\\n/// @param _passedAddress passed referrer address that equals to the client address\\nerror FeeDistributor__ReferrerAddressEqualsClient(address _passedAddress);\\n\\n/// @notice Only factory can call `initialize`.\\n/// @param _msgSender sender address.\\n/// @param _actualFactory the actual factory address that can call `initialize`.\\nerror FeeDistributor__NotFactoryCalled(address _msgSender, IFeeDistributorFactory _actualFactory);\\n\\n/// @notice `initialize` should only be called once.\\n/// @param _existingClient address of the client with which the contact has already been initialized.\\nerror FeeDistributor__ClientAlreadySet(address _existingClient);\\n\\n/// @notice Cannot call `withdraw` if the client address is not set yet.\\n/// @dev The client address is supposed to be set by the factory.\\nerror FeeDistributor__ClientNotSet();\\n\\n/// @notice basisPoints of the referrer must be zero if referrer address is empty.\\n/// @param _referrerBasisPoints basisPoints of the referrer.\\nerror FeeDistributor__ReferrerBasisPointsMustBeZeroIfAddressIsZero(uint96 _referrerBasisPoints);\\n\\n/// @notice service should be able to receive ether.\\n/// @param _service address of the service.\\nerror FeeDistributor__ServiceCannotReceiveEther(address _service);\\n\\n/// @notice client should be able to receive ether.\\n/// @param _client address of the client.\\nerror FeeDistributor__ClientCannotReceiveEther(address _client);\\n\\n/// @notice referrer should be able to receive ether.\\n/// @param _referrer address of the referrer.\\nerror FeeDistributor__ReferrerCannotReceiveEther(address _referrer);\\n\\n/// @notice zero ether balance\\nerror FeeDistributor__NothingToWithdraw();\\n\\n/// @notice Throws if called by any account other than the client.\\n/// @param _caller address of the caller\\n/// @param _client address of the client\\nerror FeeDistributor__CallerNotClient(address _caller, address _client);\\n\\n/// @notice Throws in case there was some ether left after `withdraw` and it has failed to recover.\\n/// @param _to destination address for ether.\\n/// @param _amount how much wei the destination address should have received, but didn't.\\nerror FeeDistributor__EtherRecoveryFailed(\\n    address _to,\\n    uint256 _amount\\n);\\n\\n/// @notice ETH receiver should not be a zero address\\nerror FeeDistributor__ZeroAddressEthReceiver();\\n\"\r\n    },\r\n    \"contracts/lib/P2pAddressLib.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nlibrary P2pAddressLib {\\n    /// @notice Sends amount of ETH in wei to recipient\\n    /// @param _recipient address of recipient\\n    /// @param _amount amount of ETH in wei\\n    /// @return bool whether send succeeded\\n    function _sendValue(address payable _recipient, uint256 _amount) internal returns (bool) {\\n        (bool success, ) = _recipient.call{\\n            value: _amount,\\n            gas: gasleft() / 4 // to prevent DOS, should be enough in normal cases\\n        }(\\\"\\\");\\n\\n        return success;\\n    }\\n\\n    /// @notice Sends amount of ETH in wei to recipient\\n    /// @param _recipient address of recipient\\n    /// @param _amount amount of ETH in wei\\n    /// @return bool whether send succeeded\\n    function _sendValueWithoutGasRestrictions(address payable _recipient, uint256 _amount) internal returns (bool) {\\n        (bool success, ) = _recipient.call{\\n            value: _amount\\n        }(\\\"\\\");\\n\\n        return success;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/feeDistributor/Erc4337Account.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../erc4337/IAccount.sol\\\";\\nimport \\\"../erc4337/IEntryPointStakeManager.sol\\\";\\nimport \\\"../erc4337/UserOperation.sol\\\";\\nimport \\\"../access/IOwnableWithOperator.sol\\\";\\n\\n/// @notice passed address should be a valid ERC-4337 entryPoint\\n/// @param _passedAddress passed address\\nerror Erc4337Account__NotEntryPoint(address _passedAddress);\\n\\n/// @notice data length should be at least 4 byte to be a function signature\\nerror Erc4337Account__DataTooShort();\\n\\n/// @notice only withdraw function is allowed to be called via ERC-4337 UserOperation\\nerror Erc4337Account__OnlyWithdrawIsAllowed();\\n\\n/// @notice only client, owner, and operator are allowed to withdraw from EntryPoint\\nerror Erc4337Account__NotAllowedToWithdrawFromEntryPoint();\\n\\n/// @title gasless withdraw for FeeDistributors via ERC-4337\\nabstract contract Erc4337Account is IAccount, IOwnableWithOperator {\\n    using ECDSA for bytes32;\\n\\n    /// @notice withdraw without arguments\\n    bytes4 private constant defaultWithdrawSelector = bytes4(keccak256(\\\"withdraw()\\\"));\\n\\n    /// @notice Singleton ERC-4337 entryPoint 0.6.0 used by this account\\n    address payable constant entryPoint = payable(0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789);\\n\\n    /// @inheritdoc IAccount\\n    function validateUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external override returns (uint256 validationData) {\\n        if (msg.sender != entryPoint) {\\n            revert Erc4337Account__NotEntryPoint(msg.sender);\\n        }\\n\\n        validationData = _validateSignature(userOp, userOpHash);\\n\\n        bytes4 selector = _getFunctionSelector(userOp.callData);\\n        if (selector != withdrawSelector()) {\\n            revert Erc4337Account__OnlyWithdrawIsAllowed();\\n        }\\n\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /// @notice Withdraw this contract's balance from EntryPoint back to this contract\\n    function withdrawFromEntryPoint() external {\\n        if (!(\\n            msg.sender == owner() || msg.sender == operator() || msg.sender == client()\\n        )) {\\n            revert Erc4337Account__NotAllowedToWithdrawFromEntryPoint();\\n        }\\n\\n        uint256 balance = IEntryPointStakeManager(entryPoint).balanceOf(address(this));\\n        IEntryPointStakeManager(entryPoint).withdrawTo(payable(address(this)), balance);\\n    }\\n\\n    /// @notice Validates the signature of a user operation.\\n    /// @param _userOp the operation that is about to be executed.\\n    /// @param _userOpHash hash of the user's request data. can be used as the basis for signature.\\n    /// @return validationData 0 for valid signature, 1 to mark signature failure\\n    function _validateSignature(\\n        UserOperation calldata _userOp,\\n        bytes32 _userOpHash\\n    ) private view returns (uint256 validationData)\\n    {\\n        bytes32 hash = _userOpHash.toEthSignedMessageHash();\\n        address signer = hash.recover(_userOp.signature);\\n\\n        if (\\n            signer == operator() || signer == client()\\n        ) {\\n            validationData = 0;\\n        } else {\\n            validationData = 1;\\n        }\\n    }\\n\\n    /// @notice Returns function selector (first 4 bytes of data)\\n    /// @param _data calldata (encoded signature + arguments)\\n    /// @return functionSelector function selector\\n    function _getFunctionSelector(bytes calldata _data) private pure returns (bytes4 functionSelector) {\\n        if (_data.length < 4) {\\n            revert Erc4337Account__DataTooShort();\\n        }\\n        return bytes4(_data[:4]);\\n    }\\n\\n    /// @notice sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n    /// @param _missingAccountFunds the minimum value this method should send the entrypoint.\\n    /// this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n    function _payPrefund(uint256 _missingAccountFunds) private {\\n        if (_missingAccountFunds != 0) {\\n            (bool success, ) = payable(msg.sender).call{ value: _missingAccountFunds, gas: type(uint256).max }(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n\\n    /// @notice Returns the client address\\n    /// @return address client address\\n    function client() public view virtual returns (address);\\n\\n    /// @inheritdoc IOwnable\\n    function owner() public view virtual returns (address);\\n\\n    /// @inheritdoc IOwnableWithOperator\\n    function operator() public view virtual returns (address);\\n\\n    /// @notice withdraw function selector\\n    /// @dev since withdraw function in derived contracts can have arguments, its\\n    /// signature can vary and can be overridden in derived contracts\\n    /// @return bytes4 withdraw function selector\\n    function withdrawSelector() public pure virtual returns (bytes4) {\\n        return defaultWithdrawSelector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n* @notice caller must be pendingOwner\\n*/\\nerror Ownable2Step__CallerNotNewOwner();\\n\\n/**\\n* @notice new owner address should be different from the current owner\\n*/\\nerror Ownable2Step__NewOwnerShouldNotBeCurrentOwner();\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private s_pendingOwner;\\n\\n    /**\\n     * @dev Emits in transferOwnership (start of the transfer)\\n     * @param _previousOwner address of the previous owner\\n     * @param _newOwner address of the new owner\\n     */\\n    event OwnershipTransferStarted(address indexed _previousOwner, address indexed _newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return s_pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        address currentOwner = owner();\\n        if (newOwner == currentOwner) {\\n            revert Ownable2Step__NewOwnerShouldNotBeCurrentOwner();\\n        }\\n\\n        s_pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(currentOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete s_pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert Ownable2Step__CallerNotNewOwner();\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/IOwnableWithOperator.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @dev Ownable with an additional role of operator\\n */\\ninterface IOwnableWithOperator is IOwnable {\\n    /**\\n     * @dev Returns the current operator.\\n     */\\n    function operator() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>, OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./OwnableBase.sol\\\";\\n\\n/**\\n* @notice _newOwner cannot be a zero address\\n*/\\nerror Ownable__NewOwnerIsZeroAddress();\\n\\n/**\\n * @dev OpenZeppelin's Ownable with modifier onlyOwner extracted to OwnableBase\\n * and removed `renounceOwnership`\\n */\\nabstract contract Ownable is OwnableBase {\\n\\n    /**\\n     * @dev Emits when the owner has been changed.\\n     * @param _previousOwner address of the previous owner\\n     * @param _newOwner address of the new owner\\n     */\\n    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\\n\\n    address private s_owner;\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual override returns (address) {\\n        return s_owner;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     * @param _newOwner address of the new owner\\n     */\\n    function transferOwnership(address _newOwner) external virtual onlyOwner {\\n        if (_newOwner == address(0)) {\\n            revert Ownable__NewOwnerIsZeroAddress();\\n        }\\n        _transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     * @param _newOwner address of the new owner\\n     */\\n    function _transferOwnership(address _newOwner) internal virtual {\\n        address oldOwner = s_owner;\\n        s_owner = _newOwner;\\n        emit OwnershipTransferred(oldOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc4337/IAccount.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\"\r\n    },\r\n    \"contracts/erc4337/IEntryPointStakeManager.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: 2023 P2P Validator <info@p2p.org>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\ninterface IEntryPointStakeManager {\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/erc4337/UserOperation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n * @param nonce unique value the sender uses to verify it is not a replay.\\n * @param initCode if set, the account contract will be created by this constructor/\\n * @param callData the method call to execute on this account.\\n * @param callGasLimit the gas limit passed to the callData method call.\\n * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n * @param maxFeePerGas same as EIP-1559 gas parameter.\\n * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct UserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    uint256 callGasLimit;\\n    uint256 verificationGasLimit;\\n    uint256 preVerificationGas;\\n    uint256 maxFeePerGas;\\n    uint256 maxPriorityFeePerGas;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\"\r\n    },\r\n    \"contracts/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_service\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"Access__AddressNeitherOperatorNorOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"Access__SameOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Access__ZeroNewOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Erc4337Account__DataTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Erc4337Account__NotAllowedToWithdrawFromEntryPoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"Erc4337Account__NotEntryPoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Erc4337Account__OnlyWithdrawIsAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"FeeDistributor__CallerNotClient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"FeeDistributor__ClientAddressEqualsService\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existingClient\",\"type\":\"address\"}],\"name\":\"FeeDistributor__ClientAlreadySet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"FeeDistributor__ClientCannotReceiveEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeDistributor__ClientNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_clientBasisPoints\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_referralBasisPoints\",\"type\":\"uint96\"}],\"name\":\"FeeDistributor__ClientPlusReferralBasisPointsExceed10000\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistributor__EtherRecoveryFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_clientBasisPoints\",\"type\":\"uint96\"}],\"name\":\"FeeDistributor__InvalidClientBasisPoints\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"FeeDistributor__NotFactory\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_msgSender\",\"type\":\"address\"},{\"internalType\":\"contract IFeeDistributorFactory\",\"name\":\"_actualFactory\",\"type\":\"address\"}],\"name\":\"FeeDistributor__NotFactoryCalled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeDistributor__NothingToWithdraw\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"FeeDistributor__ReferrerAddressEqualsClient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"FeeDistributor__ReferrerAddressEqualsService\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_referrerBasisPoints\",\"type\":\"uint96\"}],\"name\":\"FeeDistributor__ReferrerBasisPointsMustBeZeroIfAddressIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"FeeDistributor__ReferrerCannotReceiveEther\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_service\",\"type\":\"address\"}],\"name\":\"FeeDistributor__ServiceCannotReceiveEther\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeDistributor__ZeroAddressClient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeDistributor__ZeroAddressEthReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeDistributor__ZeroAddressService\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeDistributor__ZeroReferrerBasisPointsForNonZeroReferrer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleFeeDistributor__CannotResetClientOnlyClRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleFeeDistributor__ClientBasisPointsShouldBeHigherThan5000\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_passedAddress\",\"type\":\"address\"}],\"name\":\"OracleFeeDistributor__NotOracle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleFeeDistributor__WaitForEnoughRewardsToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable2Step__CallerNotNewOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable2Step__NewOwnerShouldNotBeCurrentOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnableBase__CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenRecoverer__NoBurn\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"ERC1155Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistributor__EtherRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_clientBasisPoints\",\"type\":\"uint96\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_referrerBasisPoints\",\"type\":\"uint96\"}],\"name\":\"FeeDistributor__Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"FeeDistributor__VoluntaryExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_serviceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_clientAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_referrerAmount\",\"type\":\"uint256\"}],\"name\":\"FeeDistributor__Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_clientOnlyClRewards\",\"type\":\"uint256\"}],\"name\":\"OracleFeeDistributor__ClientOnlyClRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkOperatorOrOwner\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"client\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clientBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clientOnlyClRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dismissOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyEtherRecoveryWithoutOracleData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth2WithdrawalCredentialsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_validatorCountToAdd\",\"type\":\"uint32\"}],\"name\":\"increaseDepositedCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"basisPoints\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct FeeRecipient\",\"name\":\"_clientConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint96\",\"name\":\"basisPoints\",\"type\":\"uint96\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct FeeRecipient\",\"name\":\"_referrerConfig\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountInGwei\",\"type\":\"uint256\"}],\"name\":\"recoverEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_clientOnlyClRewards\",\"type\":\"uint256\"}],\"name\":\"setClientOnlyClRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"voluntaryExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_amountInGwei\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromEntryPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawSelector\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OracleFeeDistributor", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004e67dff29304075a383d877f0ba760b94fe3880300000000000000000000000086a9f3e908b4658a1327952eb1ec297a4212e1bb0000000000000000000000006bb8b45a1c6ea816b70d76f83f7dc4f0f87365ff", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}