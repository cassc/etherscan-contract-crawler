{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Library/DateTime.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ncontract DateTime {\\r\\n    /*\\r\\n     *  Date and Time utilities for ethereum contracts\\r\\n     *\\r\\n     */\\r\\n    struct _DateTime {\\r\\n        uint16 year;\\r\\n        uint8 month;\\r\\n        uint8 day;\\r\\n        uint8 hour;\\r\\n        uint8 minute;\\r\\n        uint8 second;\\r\\n        uint8 weekday;\\r\\n    }\\r\\n\\r\\n    uint constant DAY_IN_SECONDS = 86400;\\r\\n    uint constant YEAR_IN_SECONDS = 31536000;\\r\\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\\r\\n\\r\\n    uint constant HOUR_IN_SECONDS = 3600;\\r\\n    uint constant MINUTE_IN_SECONDS = 60;\\r\\n\\r\\n    uint16 constant ORIGIN_YEAR = 1970;\\r\\n\\r\\n    function isLeapYear(uint16 year) public pure returns (bool) {\\r\\n        if (year % 4 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        if (year % 100 != 0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (year % 400 != 0) {\\r\\n            return false;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function leapYearsBefore(uint year) public pure returns (uint) {\\r\\n        year -= 1;\\r\\n        return year / 4 - year / 100 + year / 400;\\r\\n    }\\r\\n\\r\\n    function getDaysInMonth(\\r\\n        uint8 month,\\r\\n        uint16 year\\r\\n    ) public pure returns (uint8) {\\r\\n        if (\\r\\n            month == 1 ||\\r\\n            month == 3 ||\\r\\n            month == 5 ||\\r\\n            month == 7 ||\\r\\n            month == 8 ||\\r\\n            month == 10 ||\\r\\n            month == 12\\r\\n        ) {\\r\\n            return 31;\\r\\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\\r\\n            return 30;\\r\\n        } else if (isLeapYear(year)) {\\r\\n            return 29;\\r\\n        } else {\\r\\n            return 28;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function parseTimestamp(\\r\\n        uint timestamp\\r\\n    ) internal pure returns (_DateTime memory dt) {\\r\\n        uint secondsAccountedFor = 0;\\r\\n        uint buf;\\r\\n        uint8 i;\\r\\n\\r\\n        // Year\\r\\n        dt.year = getYear(timestamp);\\r\\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\r\\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\r\\n\\r\\n        // Month\\r\\n        uint secondsInMonth;\\r\\n        for (i = 1; i <= 12; i++) {\\r\\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\r\\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\\r\\n                dt.month = i;\\r\\n                break;\\r\\n            }\\r\\n            secondsAccountedFor += secondsInMonth;\\r\\n        }\\r\\n\\r\\n        // Day\\r\\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\\r\\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\r\\n                dt.day = i;\\r\\n                break;\\r\\n            }\\r\\n            secondsAccountedFor += DAY_IN_SECONDS;\\r\\n        }\\r\\n\\r\\n        // Hour\\r\\n        dt.hour = getHour(timestamp);\\r\\n\\r\\n        // Minute\\r\\n        dt.minute = getMinute(timestamp);\\r\\n\\r\\n        // Second\\r\\n        dt.second = getSecond(timestamp);\\r\\n\\r\\n        // Day of week.\\r\\n        dt.weekday = getWeekday(timestamp);\\r\\n    }\\r\\n\\r\\n    function getYear(uint timestamp) public pure returns (uint16) {\\r\\n        uint secondsAccountedFor = 0;\\r\\n        uint16 year;\\r\\n        uint numLeapYears;\\r\\n\\r\\n        // Year\\r\\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\r\\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\r\\n\\r\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\r\\n        secondsAccountedFor +=\\r\\n            YEAR_IN_SECONDS *\\r\\n            (year - ORIGIN_YEAR - numLeapYears);\\r\\n\\r\\n        while (secondsAccountedFor > timestamp) {\\r\\n            if (isLeapYear(uint16(year - 1))) {\\r\\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\r\\n            } else {\\r\\n                secondsAccountedFor -= YEAR_IN_SECONDS;\\r\\n            }\\r\\n            year -= 1;\\r\\n        }\\r\\n        return year;\\r\\n    }\\r\\n\\r\\n    function getMonth(uint timestamp) public pure returns (uint8) {\\r\\n        return parseTimestamp(timestamp).month;\\r\\n    }\\r\\n\\r\\n    function getDay(uint timestamp) public pure returns (uint8) {\\r\\n        return parseTimestamp(timestamp).day;\\r\\n    }\\r\\n\\r\\n    function getHour(uint timestamp) public pure returns (uint8) {\\r\\n        return uint8((timestamp / 60 / 60) % 24);\\r\\n    }\\r\\n\\r\\n    function getMinute(uint timestamp) public pure returns (uint8) {\\r\\n        return uint8((timestamp / 60) % 60);\\r\\n    }\\r\\n\\r\\n    function getSecond(uint timestamp) public pure returns (uint8) {\\r\\n        return uint8(timestamp % 60);\\r\\n    }\\r\\n\\r\\n    function getWeekday(uint timestamp) public pure returns (uint8) {\\r\\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day\\r\\n    ) public pure returns (uint timestamp) {\\r\\n        return toTimestamp(year, month, day, 0, 0, 0);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour\\r\\n    ) public pure returns (uint timestamp) {\\r\\n        return toTimestamp(year, month, day, hour, 0, 0);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour,\\r\\n        uint8 minute\\r\\n    ) public pure returns (uint timestamp) {\\r\\n        return toTimestamp(year, month, day, hour, minute, 0);\\r\\n    }\\r\\n\\r\\n    function toTimestamp(\\r\\n        uint16 year,\\r\\n        uint8 month,\\r\\n        uint8 day,\\r\\n        uint8 hour,\\r\\n        uint8 minute,\\r\\n        uint8 second\\r\\n    ) public pure returns (uint timestamp) {\\r\\n        uint16 i;\\r\\n\\r\\n        // Year\\r\\n        for (i = ORIGIN_YEAR; i < year; i++) {\\r\\n            if (isLeapYear(i)) {\\r\\n                timestamp += LEAP_YEAR_IN_SECONDS;\\r\\n            } else {\\r\\n                timestamp += YEAR_IN_SECONDS;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Month\\r\\n        uint8[12] memory monthDayCounts;\\r\\n        monthDayCounts[0] = 31;\\r\\n        if (isLeapYear(year)) {\\r\\n            monthDayCounts[1] = 29;\\r\\n        } else {\\r\\n            monthDayCounts[1] = 28;\\r\\n        }\\r\\n        monthDayCounts[2] = 31;\\r\\n        monthDayCounts[3] = 30;\\r\\n        monthDayCounts[4] = 31;\\r\\n        monthDayCounts[5] = 30;\\r\\n        monthDayCounts[6] = 31;\\r\\n        monthDayCounts[7] = 31;\\r\\n        monthDayCounts[8] = 30;\\r\\n        monthDayCounts[9] = 31;\\r\\n        monthDayCounts[10] = 30;\\r\\n        monthDayCounts[11] = 31;\\r\\n\\r\\n        for (i = 1; i < month; i++) {\\r\\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\r\\n        }\\r\\n\\r\\n        // Day\\r\\n        timestamp += DAY_IN_SECONDS * (day - 1);\\r\\n\\r\\n        // Hour\\r\\n        timestamp += HOUR_IN_SECONDS * (hour);\\r\\n\\r\\n        // Minute\\r\\n        timestamp += MINUTE_IN_SECONDS * (minute);\\r\\n\\r\\n        // Second\\r\\n        timestamp += second;\\r\\n\\r\\n        return timestamp;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/TokenSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./Library/DateTime.sol\\\";\\r\\n\\r\\ncontract TokenSale is Ownable, DateTime {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC20 public BITFtoken; // BITF Token\\r\\n    IERC20 public USDToken; // Tether USDT\\r\\n\\r\\n    uint8 public constant PRESALE_PRICE = 1; // 0.01 USDT for presale\\r\\n    uint8 public constant PRIVATE_SALE1_PRICE = 3; // 0.03 USDT for private sale#1\\r\\n    uint8 public constant PRIVATE_SALE2_PRICE = 5; // 0.05 USDT for private sale#2\\r\\n    uint8 public constant PUBLIC_SALE_PRICE = 7; // 0.07 USDT for public sale\\r\\n    uint8 public constant PRIVATE_SALE_UNLOCK_PERCENTAGE = 12; // 15% unlocked per month in private sale#1,#2\\r\\n    uint8 public constant PRESALE_BENIFIT_PERCENTAGE = 25; // 25% of Net Profit Sharing in presale\\r\\n    uint8 public constant PRIVATE_SALE1_BENIFIT_PERCENTAGE = 20; // 20% of Net Profit Sharing in private sale#1\\r\\n    uint8 public constant PRIVATE_SALE2_BENIFIT_PERCENTAGE = 15; // 15% of Net Profit Sharing in private sale#2\\r\\n    uint8 public constant PUBLIC_SALE_BENIFIT_PERCENTAGE = 10; // 10% of Net Profit Sharing in public sale\\r\\n    uint256 public constant PRESALE_MAX_USDT = 1500 * 10 ** 18; // Max contribution for presale - 1500 USDT\\r\\n    uint256 public constant PUBLIC_SALE_MAX_USDT = 750 * 10 ** 18; // Max contribution for public sale - 750 USDT\\r\\n    uint256 public constant PRIVATE_SALE1_MAX_USDT = 200000 * 10 ** 18; // Max contribution for private sale#1 - 200000 USDT\\r\\n    uint256 public constant PRIVATE_SALE2_MAX_USDT = 350000 * 10 ** 18; // Max contribution for private sale#2 - 350000 USDT\\r\\n    uint256 public constant PRESALE_DURATION = 2 * 30 days; // 2 months\\r\\n    uint256 public constant PRIVATE_SALE1_DURATION = 2 * 30 days; // 2 months\\r\\n    uint256 public constant PRIVATE_SALE2_DURATION = 1 * 30 days; // 1 month\\r\\n    uint256 public constant PRESALE_LOCK_DURATION = 6 * 30 days; // 6 months\\r\\n    uint256 public constant PRIVATE_SALE_LOCK_DURATION = 9 * 30 days; // 9 months\\r\\n    uint256 public constant PRESALE_AMOUNT = 60000000 * 10 ** 18; // PRE SALE Token amount\\r\\n    uint256 public constant PRIVATE_SALE1_AMOUNT = 80000000 * 10 ** 18; // Private Sale#1 Token amount\\r\\n    uint256 public constant PRIVATE_SALE2_AMOUNT = 100000000 * 10 ** 18; // Public Sale#2 Token amount\\r\\n    uint256 public constant PUBLIC_SALE_AMOUNT = 10000000 * 10 ** 18; // Public Sale Token amount\\r\\n\\r\\n    uint256 public presaleStartTime;\\r\\n    uint256 public privateSale1StartTime;\\r\\n    uint256 public privateSale2StartTime;\\r\\n    uint256 public publicSaleStartTime;\\r\\n    uint256 public releaseTime;\\r\\n    uint256 public profitReleaseTime;\\r\\n    uint256 public presaleSold;\\r\\n    uint256 public privateSale1Sold;\\r\\n    uint256 public privateSale2Sold;\\r\\n    uint256 public publicSaleSold;\\r\\n\\r\\n    mapping(address => uint256) public presaleBalances;\\r\\n    mapping(address => uint256) public privateSale1Balances;\\r\\n    mapping(address => uint256) public privateSale2Balances;\\r\\n    mapping(address => uint256) public publicSaleBalances;\\r\\n    mapping(address => uint256) public privateSale1Claimed;\\r\\n    mapping(address => uint256) public privateSale2Claimed;\\r\\n\\r\\n    event PreSalePurchased(\\r\\n        address indexed buyer,\\r\\n        uint256 USDTamount,\\r\\n        uint256 BITFamount\\r\\n    );\\r\\n    event PrivateSale1Purchased(\\r\\n        address indexed buyer,\\r\\n        uint256 USDTamount,\\r\\n        uint256 BITFamount\\r\\n    );\\r\\n    event PrivateSale2Purchased(\\r\\n        address indexed buyer,\\r\\n        uint256 USDTamount,\\r\\n        uint256 BITFamount\\r\\n    );\\r\\n    event PublicSalePurchased(\\r\\n        address indexed buyer,\\r\\n        uint256 USDTamount,\\r\\n        uint256 BITFamount\\r\\n    );\\r\\n\\r\\n    event ClaimPresale(address indexed claimant, uint256 amount);\\r\\n    event ClaimPrivateSale1(address indexed claimant, uint256 amount);\\r\\n    event ClaimPrivateSale2(address indexed claimant, uint256 amount);\\r\\n    event ClaimPublicSale(address indexed claimant, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     @notice contructor of Token Sale, \\r\\n     @param _usdToken USDT Token contract address\\r\\n     */\\r\\n    constructor(address _usdToken) {\\r\\n        require(_usdToken != address(0), \\\"Invalid USDT token address\\\");\\r\\n        USDToken = IERC20(_usdToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Set BITF Token contract address\\r\\n     @dev Only Owner is accessible\\r\\n     @param _bitfToken BITF Token contract address\\r\\n     */\\r\\n    function setToken(address _bitfToken) external onlyOwner {\\r\\n        require(_bitfToken != address(0), \\\"Invalid token address\\\");\\r\\n        BITFtoken = IERC20(_bitfToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Set Pre Sale Start Time\\r\\n     @dev Only Owner is accessible\\r\\n     @param _year PRE SALE START Year\\r\\n     @param _month PRESALE START Month\\r\\n     @param _day PRE SALE START DAY\\r\\n     */\\r\\n    function setPresaleStartTime(\\r\\n        uint16 _year,\\r\\n        uint8 _month,\\r\\n        uint8 _day\\r\\n    ) external onlyOwner {\\r\\n        uint256 _presaleStartTime = toTimestamp(_year, _month, _day);\\r\\n        require(\\r\\n            _presaleStartTime > block.timestamp,\\r\\n            \\\"Invalid presale start time\\\"\\r\\n        );\\r\\n        presaleStartTime = _presaleStartTime;\\r\\n    }\\r\\n\\r\\n    function setPrivateSale1StartTime(\\r\\n        uint16 _year,\\r\\n        uint8 _month,\\r\\n        uint8 _day\\r\\n    ) external onlyOwner {\\r\\n        uint256 _privatesale1StartTime = toTimestamp(_year, _month, _day);\\r\\n        require(\\r\\n            _privatesale1StartTime > block.timestamp &&\\r\\n                _privatesale1StartTime >= presaleStartTime + PRESALE_DURATION,\\r\\n            \\\"Invalid private sale#1 start time\\\"\\r\\n        );\\r\\n        privateSale1StartTime = _privatesale1StartTime;\\r\\n    }\\r\\n\\r\\n    function setPrivateSale2StartTime(\\r\\n        uint16 _year,\\r\\n        uint8 _month,\\r\\n        uint8 _day\\r\\n    ) external onlyOwner {\\r\\n        uint256 _privatesale2StartTime = toTimestamp(_year, _month, _day);\\r\\n        require(\\r\\n            _privatesale2StartTime > block.timestamp &&\\r\\n                _privatesale2StartTime >=\\r\\n                privateSale1StartTime + PRIVATE_SALE1_DURATION,\\r\\n            \\\"Invalid private sale#2 start time\\\"\\r\\n        );\\r\\n        privateSale2StartTime = _privatesale2StartTime;\\r\\n    }\\r\\n\\r\\n    function setPublicSaleStartTime(\\r\\n        uint16 _year,\\r\\n        uint8 _month,\\r\\n        uint8 _day\\r\\n    ) external onlyOwner {\\r\\n        uint256 _publicSaleStartTime = toTimestamp(_year, _month, _day);\\r\\n        require(\\r\\n            _publicSaleStartTime > block.timestamp &&\\r\\n                _publicSaleStartTime >=\\r\\n                privateSale1StartTime + PRIVATE_SALE2_DURATION,\\r\\n            \\\"Invalid public sale start time\\\"\\r\\n        );\\r\\n        publicSaleStartTime = _publicSaleStartTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Set Release Time. Time Stamp Start date for Token release Jun 21 2024\\r\\n     @dev OnlyOwner is accessible\\r\\n     */\\r\\n    function setReleaseTime(\\r\\n        uint16 _year,\\r\\n        uint8 _month,\\r\\n        uint8 _day\\r\\n    ) external onlyOwner {\\r\\n        releaseTime = toTimestamp(_year, _month, _day);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Set Profit Release Time. Time Stamp Start date for Token release August 21 2024\\r\\n     @dev OnlyOwner is accessible\\r\\n     */\\r\\n    function setProfitReleaseTime(\\r\\n        uint16 _year,\\r\\n        uint8 _month,\\r\\n        uint8 _day\\r\\n    ) external onlyOwner {\\r\\n        profitReleaseTime = toTimestamp(_year, _month, _day);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Buy BITF tokens in Presale & Private Sale #1 & Private Sale #2 & Public Sale\\r\\n     @dev After presale starts, this function would be available.\\r\\n     @param _amount BITF token amount to buy\\r\\n     */\\r\\n    function buyBitfinder(uint256 _amount) external {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        uint256 poolBalance = BITFtoken.balanceOf(address(this));\\r\\n        uint256 usdtamount;\\r\\n        require(currentTime >= presaleStartTime, \\\"Presale has not started yet\\\");\\r\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\r\\n        require(_amount <= poolBalance, \\\"Buy token amount is exceeded\\\");\\r\\n        if (currentTime <= presaleStartTime + PRESALE_DURATION) {\\r\\n            require(\\r\\n                presaleSold + _amount <= PRESALE_AMOUNT,\\r\\n                \\\"Presale Cap reached\\\"\\r\\n            );\\r\\n            uint256 _balance;\\r\\n            _balance = presaleBalances[_msgSender()];\\r\\n            require(\\r\\n                ((_balance + _amount) * PRESALE_PRICE) / 100 <=\\r\\n                    PRESALE_MAX_USDT,\\r\\n                \\\"Reached to Max Token contribuiton of Presale\\\"\\r\\n            );\\r\\n            usdtamount = (_amount * PRESALE_PRICE) / 100;\\r\\n            USDToken.safeTransferFrom(_msgSender(), address(this), usdtamount);\\r\\n            presaleBalances[_msgSender()] += _amount;\\r\\n            presaleSold += _amount;\\r\\n            emit PreSalePurchased(_msgSender(), usdtamount, _amount);\\r\\n        } else if (\\r\\n            currentTime >= privateSale1StartTime &&\\r\\n            currentTime <= privateSale1StartTime + PRIVATE_SALE1_DURATION\\r\\n        ) {\\r\\n            require(\\r\\n                privateSale1Sold + _amount <= PRIVATE_SALE1_AMOUNT,\\r\\n                \\\"Private sale#1 Cap reached\\\"\\r\\n            );\\r\\n            uint256 _balance;\\r\\n            _balance = privateSale1Balances[_msgSender()];\\r\\n            require(\\r\\n                ((_balance + _amount) * PRIVATE_SALE1_PRICE) / 100 <=\\r\\n                    PRIVATE_SALE1_MAX_USDT,\\r\\n                \\\"Reached to Max Token contribuiton of Private sale#1\\\"\\r\\n            );\\r\\n            usdtamount = (_amount * PRIVATE_SALE1_PRICE) / 100;\\r\\n            USDToken.safeTransferFrom(_msgSender(), address(this), usdtamount);\\r\\n            privateSale1Balances[_msgSender()] += _amount;\\r\\n            privateSale1Sold += _amount;\\r\\n            emit PrivateSale1Purchased(_msgSender(), usdtamount, _amount);\\r\\n        } else if (\\r\\n            currentTime >= privateSale2StartTime &&\\r\\n            currentTime <= privateSale2StartTime + PRIVATE_SALE2_DURATION\\r\\n        ) {\\r\\n            require(\\r\\n                privateSale2Sold + _amount <= PRIVATE_SALE2_AMOUNT,\\r\\n                \\\"Private sale#2 Cap reached\\\"\\r\\n            );\\r\\n            uint256 _balance;\\r\\n            _balance = privateSale2Balances[_msgSender()];\\r\\n            require(\\r\\n                ((_balance + _amount) * PRIVATE_SALE2_PRICE) / 100 <=\\r\\n                    PRIVATE_SALE2_MAX_USDT,\\r\\n                \\\"Reached to Max Token contribuiton of Private sale#2\\\"\\r\\n            );\\r\\n            usdtamount = (_amount * PRIVATE_SALE2_PRICE) / 100;\\r\\n            USDToken.safeTransferFrom(_msgSender(), address(this), usdtamount);\\r\\n            privateSale2Balances[_msgSender()] += _amount;\\r\\n            privateSale2Sold += _amount;\\r\\n            emit PrivateSale2Purchased(_msgSender(), usdtamount, _amount);\\r\\n        } else if (currentTime >= publicSaleStartTime) {\\r\\n            require(\\r\\n                publicSaleSold + _amount <= PUBLIC_SALE_AMOUNT,\\r\\n                \\\"Public sale Cap reached\\\"\\r\\n            );\\r\\n            uint256 _balance;\\r\\n            _balance = publicSaleBalances[_msgSender()];\\r\\n            require(\\r\\n                ((_balance + _amount) * PUBLIC_SALE_PRICE) / 100 <=\\r\\n                    PUBLIC_SALE_MAX_USDT,\\r\\n                \\\"Reached to Max Token contribuiton of Public sale\\\"\\r\\n            );\\r\\n            usdtamount = (_amount * PUBLIC_SALE_PRICE) / 100;\\r\\n            USDToken.safeTransferFrom(_msgSender(), address(this), usdtamount);\\r\\n            publicSaleBalances[_msgSender()] += _amount;\\r\\n            publicSaleSold += _amount;\\r\\n            emit PublicSalePurchased(_msgSender(), usdtamount, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimPresaleToken(uint256 _amount) external {\\r\\n        require(\\r\\n            block.timestamp >= releaseTime,\\r\\n            \\\"Token is not available to release yet\\\"\\r\\n        );\\r\\n        require(\\r\\n            presaleBalances[_msgSender()] >= _amount,\\r\\n            \\\"Claim amount exceeds balance\\\"\\r\\n        );\\r\\n        BITFtoken.safeTransfer(_msgSender(), _amount);\\r\\n        presaleBalances[_msgSender()] -= _amount;\\r\\n        emit ClaimPresale(_msgSender(), _amount);\\r\\n    }\\r\\n\\r\\n    function claimPrivateSale1Token(uint256 _amount) external {\\r\\n        require(\\r\\n            block.timestamp >= releaseTime,\\r\\n            \\\"Token is not available to release yet\\\"\\r\\n        );\\r\\n        uint256 initialBalance = privateSale1Balances[_msgSender()] +\\r\\n            privateSale1Claimed[_msgSender()];\\r\\n        require(\\r\\n            getPrivateSaleClaimAmount(initialBalance) >=\\r\\n                _amount + privateSale1Claimed[_msgSender()],\\r\\n            \\\"Claim amount exceeds Available Amount\\\"\\r\\n        );\\r\\n        BITFtoken.safeTransfer(_msgSender(), _amount);\\r\\n        privateSale1Balances[_msgSender()] -= _amount;\\r\\n        privateSale1Claimed[_msgSender()] += _amount;\\r\\n        emit ClaimPrivateSale1(_msgSender(), _amount);\\r\\n    }\\r\\n\\r\\n    function claimPrivateSale2Token(uint256 _amount) external {\\r\\n        require(\\r\\n            block.timestamp >= releaseTime,\\r\\n            \\\"Token is not available to release yet\\\"\\r\\n        );\\r\\n        uint256 initialBalance = privateSale2Balances[_msgSender()] +\\r\\n            privateSale2Claimed[_msgSender()];\\r\\n        require(\\r\\n            getPrivateSaleClaimAmount(initialBalance) >=\\r\\n                _amount + privateSale2Claimed[_msgSender()],\\r\\n            \\\"Claim amount exceeds Available Amount\\\"\\r\\n        );\\r\\n        BITFtoken.safeTransfer(_msgSender(), _amount);\\r\\n        privateSale2Balances[_msgSender()] -= _amount;\\r\\n        privateSale2Claimed[_msgSender()] += _amount;\\r\\n        emit ClaimPrivateSale2(_msgSender(), _amount);\\r\\n    }\\r\\n\\r\\n    function claimPublicSaleToken(uint256 _amount) external {\\r\\n        require(\\r\\n            block.timestamp >= releaseTime,\\r\\n            \\\"Token is not available to release yet\\\"\\r\\n        );\\r\\n        require(\\r\\n            publicSaleBalances[_msgSender()] >= _amount,\\r\\n            \\\"Claim amount exceeds balance\\\"\\r\\n        );\\r\\n        BITFtoken.safeTransfer(_msgSender(), _amount);\\r\\n        publicSaleBalances[_msgSender()] -= _amount;\\r\\n        emit ClaimPublicSale(_msgSender(), _amount);\\r\\n    }\\r\\n\\r\\n    function getPrivateSaleClaimAmount(\\r\\n        uint256 balance\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 currentTimeStamp = block.timestamp;\\r\\n        require(currentTimeStamp >= block.timestamp );\\r\\n        uint16 currentYear = getYear(currentTimeStamp);\\r\\n        uint8 currentMonth = getMonth(currentTimeStamp);\\r\\n        uint16 releaseYear = getYear(releaseTime);\\r\\n        uint8 releaseMonth = getMonth(releaseTime);\\r\\n        uint256 months = (currentYear - releaseYear) * 12;\\r\\n        if(releaseMonth > currentMonth) {\\r\\n            months -= (releaseMonth - currentMonth);\\r\\n        } else {\\r\\n            months += (currentMonth - releaseMonth);\\r\\n        }\\r\\n        uint256 amount = balance\\r\\n            .mul(PRIVATE_SALE_UNLOCK_PERCENTAGE)\\r\\n            .div(100)\\r\\n            .mul(months);\\r\\n        if (amount > balance) return balance;\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    function withdrawToken() external onlyOwner {\\r\\n        uint256 balance = BITFtoken.balanceOf(address(this));\\r\\n        require(balance > 0, \\\"No USDT tokens to withdraw\\\");\\r\\n        BITFtoken.safeTransfer(owner(), balance);\\r\\n    }\\r\\n\\r\\n    function withdrawUSDT() external onlyOwner {\\r\\n        uint256 balance = USDToken.balanceOf(address(this));\\r\\n        require(balance > 0, \\\"No tokens to withdraw\\\");\\r\\n        USDToken.safeTransfer(owner(), balance);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPrivateSale1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPrivateSale2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPublicSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BITFamount\",\"type\":\"uint256\"}],\"name\":\"PreSalePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BITFamount\",\"type\":\"uint256\"}],\"name\":\"PrivateSale1Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BITFamount\",\"type\":\"uint256\"}],\"name\":\"PrivateSale2Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"USDTamount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"BITFamount\",\"type\":\"uint256\"}],\"name\":\"PublicSalePurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BITFtoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_BENIFIT_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_MAX_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRESALE_PRICE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE1_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE1_BENIFIT_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE1_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE1_MAX_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE1_PRICE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE2_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE2_BENIFIT_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE2_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE2_MAX_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE2_PRICE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE_UNLOCK_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_BENIFIT_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_MAX_USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PUBLIC_SALE_PRICE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyBitfinder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimPresaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimPrivateSale1Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimPrivateSale2Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimPublicSaleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDay\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getHour\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"getPrivateSaleClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getSecond\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getWeekday\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getYear\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSale1Balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSale1Claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSale1Sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSale1StartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSale2Balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateSale2Claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSale2Sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSale2StartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"publicSaleBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setPresaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setPrivateSale1StartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setPrivateSale2StartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setProfitReleaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setPublicSaleStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setReleaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bitfToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"second\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}