{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/LpNftStakingFarm.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./ERC20Interface.sol\\\";\\nimport \\\"./Calculator.sol\\\";\\nimport \\\"./erc1155/ERC1155TokenReceiver.sol\\\";\\n\\n/**\\n * lp nft staking farm\\n */\\ncontract LpNftStakingFarm is\\n    Context,\\n    Ownable,\\n    ReentrancyGuard,\\n    Pausable,\\n    ERC1155TokenReceiver\\n{\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using Calculator for uint256;\\n\\n    /**\\n     * Emitted when a user store farming rewards(ERC20 token).\\n     * @param sender User address.\\n     * @param amount Current store amount.\\n     * @param timestamp The time when store farming rewards.\\n     */\\n    event ContractFunded(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Emitted when a user stakes tokens(ERC20 token).\\n     * @param sender User address.\\n     * @param balance Current user balance.\\n     * @param timestamp The time when stake tokens.\\n     */\\n    event Staked(address indexed sender, uint256 balance, uint256 timestamp);\\n\\n    /**\\n     * Emitted when a user unstakes erc20 tokens.\\n     * @param sender User address.\\n     * @param apy The apy of user.\\n     * @param balance The balance of user.\\n     * @param umiInterest The amount of interest(umi token).\\n     * @param timePassed TimePassed seconds.\\n     * @param timestamp The time when unstake tokens.\\n     */\\n    event Unstaked(\\n        address indexed sender,\\n        uint256 apy,\\n        uint256 balance,\\n        uint256 umiInterest,\\n        uint256 timePassed,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Emitted when a new BASE_APY value is set.\\n     * @param value A new APY value.\\n     * @param sender The owner address at the moment of BASE_APY changing.\\n     */\\n    event BaseApySet(uint256 value, address sender);\\n\\n    /**\\n     * Emitted when a new nft apy value is set.\\n     * @param nftAddress The address of nft contract.\\n     * @param nftId The nft id.\\n     * @param value A new APY value.\\n     * @param sender The owner address at the moment of apy changing.\\n     */\\n    event NftApySet(address indexed nftAddress, uint256 nftId, uint256 value, address sender);\\n\\n    /**\\n     * Emitted when a user stakes nft token.\\n     * @param sender User address.\\n     * @param nftAddress The address of nft contract.\\n     * @param nftId The nft id.\\n     * @param amount The amount of nft id.\\n     * @param timestamp The time when stake nft.\\n     */\\n    event NftStaked(\\n        address indexed sender,\\n        address indexed nftAddress,\\n        uint256 nftId,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Emitted when a user batch stakes nft token.\\n     * @param sender User address.\\n     * @param nftAddress The address of nft contract.\\n     * @param nftIds The nft id.\\n     * @param amounts The amount of nft id.\\n     * @param timestamp The time when batch stake nft.\\n     */\\n    event NftsBatchStaked(\\n        address indexed sender,\\n        address indexed nftAddress,\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Emitted when a user unstake nft token.\\n     * @param sender User address.\\n     * @param nftAddress The address of nft contract.\\n     * @param nftId The nft id.\\n     * @param amount The amount of nft id.\\n     * @param timestamp The time when unstake nft.\\n     */\\n    event NftUnstaked(\\n        address indexed sender,\\n        address indexed nftAddress,\\n        uint256 nftId,\\n        uint256 amount,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * Emitted when a user batch unstake nft token.\\n     * @param sender User address.\\n     * @param nftAddress The address of nft contract.\\n     * @param nftIds The nft id array.\\n     * @param amounts The amount array of nft id.\\n     * @param timestamp The time when batch unstake nft.\\n     */\\n    event NftsBatchUnstaked(\\n        address indexed sender,\\n        address indexed nftAddress,\\n        uint256[] nftIds,\\n        uint256[] amounts,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev Emitted when a user withdraw interest only.\\n     * @param sender User address.\\n     * @param principal The principal of user.\\n     * @param interest The amount of interest.\\n     * @param claimTimestamp claim timestamp.\\n     */\\n    event Claimed(\\n        address indexed sender,\\n        uint256 principal,\\n        uint256 interest,\\n        uint256 claimTimestamp\\n    );\\n\\n    // lp token\\n    ERC20Interface public lpToken;\\n    // rewards token(umi token now)\\n    ERC20Interface public umiToken;\\n\\n    // lp token about\\n    // The stake balances of users, it will contains interest(user address->amount), input token is umi\\n    mapping(address => uint256) public balances;\\n    // The dates of users' stakes(user address->timestamp)\\n    mapping(address => uint256) public stakeDates;\\n    // The total staked amount\\n    uint256 public totalStaked;\\n\\n    // umi token about\\n    // The farming rewards of users(address => total amount)\\n    mapping(address => uint256) public funding;\\n    // The total farming rewards for users\\n    uint256 public totalFunding;\\n\\n    // ERC1155 about\\n    // Store each nft apy(nft address->(ntfId->apy))\\n    mapping(address => mapping(uint256 => uint8)) public nftApys;\\n    // Nft balance of users(user address->(nft contract address -> (nftId->amount)))\\n    mapping(address => mapping(address => mapping(uint256 => uint256))) public nftBalances;\\n    // Store user's nft ids(user address -> (nft contract address -> NftSet))\\n    mapping(address => mapping(address => NftSet)) userNftIds;\\n    // The total nft staked amount\\n    uint256 public totalNftStaked;\\n    // To store user's nft ids, it is more convenient to know if nft id of user exists\\n    struct NftSet {\\n        // user's nft id array\\n        uint256[] ids;\\n        // nft id -> bool, if nft id exist\\n        mapping(uint256 => bool) isIn;\\n    }\\n    // the nft contracts address which supported\\n    address[] public nftAddresses;\\n    // if nft address supported\\n    mapping(address => bool) public isNftSupported;\\n    address private firstNft = 0xd194f079Cc291Fe9DB7Dad95444eEc1246413636;\\n    address private secondNft = 0x90ad78735BC59a5dCb6a038728684c484CD5860D;\\n\\n    // other constants\\n    // base APY when staking just lp token is 18%, only contract owner can modify it\\n    uint256 public BASE_APY = 18; // stand for 18%\\n\\n    constructor(address _umiAddress, address _lpAddress) {\\n        require(\\n            _umiAddress.isContract() && _lpAddress.isContract(),\\n            \\\"must use contract address\\\"\\n        );\\n        umiToken = ERC20Interface(_umiAddress);\\n        lpToken = ERC20Interface(_lpAddress);\\n        \\n        nftAddresses.push(firstNft);\\n        nftAddresses.push(secondNft);\\n        isNftSupported[firstNft] = true;\\n        isNftSupported[secondNft] = true;\\n        \\n\\n    }\\n\\n    /**\\n     * Store farming rewards to UmiStakingFarm contract, in order to pay the user interest later.\\n     *\\n     * Note: _amount should be more than 0\\n     * @param _amount The amount to funding contract.\\n     */\\n    function fundingContract(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"_amount should be more than 0\\\");\\n        funding[msg.sender] += _amount;\\n        // increase total funding\\n        totalFunding += _amount;\\n        require(\\n            umiToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"transferFrom failed\\\"\\n        );\\n        // send event\\n        emit ContractFunded(msg.sender, _amount, _now());\\n    }\\n\\n    /**\\n     * Only owner can set base apy.\\n     *\\n     * Note: If you want to set apy 12%, just pass 12\\n     *\\n     * @param _APY annual percentage yield\\n     */\\n    function setBaseApy(uint256 _APY) public onlyOwner {\\n        BASE_APY = _APY;\\n        emit BaseApySet(BASE_APY, msg.sender);\\n    }\\n\\n    /**\\n     * This method is used to stake tokens(input token is LpToken).\\n     * Note: It calls another internal \\\"_stake\\\" method. See its description.\\n     * @param _amount The amount to stake.\\n     */\\n    function stake(uint256 _amount) public whenNotPaused nonReentrant {\\n        _stake(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * Increases the user's balance, totalStaked and updates the stake date.\\n     * @param _sender The address of the sender.\\n     * @param _amount The amount to stake.\\n     */\\n    function _stake(address _sender, uint256 _amount) internal {\\n        require(_amount > 0, \\\"stake amount should be more than 0\\\");\\n        // calculate rewards of umi token\\n        uint256 umiInterest = calculateUmiTokenRewards(_sender);\\n\\n        // increase balances\\n        balances[_sender] = balances[_sender].add(_amount);\\n        // increase totalStaked\\n        totalStaked = totalStaked.add(_amount);\\n        uint256 stakeTimestamp = _now();\\n        stakeDates[_sender] = stakeTimestamp;\\n        // send staked event\\n        emit Staked(_sender, _amount, stakeTimestamp);\\n        // transfer lp token to contract\\n        require(\\n            lpToken.transferFrom(_sender, address(this), _amount),\\n            \\\"transfer failed\\\"\\n        );\\n        // Transfer umiToken interest to user\\n        transferUmiInterest(_sender, umiInterest);\\n    }\\n    \\n    /**\\n     * Transfer umiToken interest to user.\\n     */ \\n    function transferUmiInterest(address recipient, uint256 amount) internal {\\n        if (amount <= 0) {\\n            return;\\n        }\\n        // reduce total funding\\n        totalFunding = totalFunding.sub(amount);\\n        require(\\n                umiToken.transfer(recipient, amount),\\n                \\\"transfer umi interest failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * This method is used to unstake all the amount of lp token.\\n     * Note: It calls another internal \\\"_unstake\\\" method. See its description.\\n     * Note: unstake lp token.\\n     */\\n    function unstake() external whenNotPaused nonReentrant {\\n        _unstake(msg.sender);\\n    }\\n\\n    /**\\n     * Call internal \\\"calculateRewardsAndTimePassed\\\" method to calculate user's latest balance,\\n     * and then transfer tokens to the sender.\\n     *\\n     * @param _sender The address of the sender.\\n     */\\n    function _unstake(address _sender) internal {\\n        // get lp token balance of current user\\n        uint256 balance = balances[msg.sender];\\n        require(balance > 0, \\\"insufficient funds\\\");\\n        // calculate total balance with interest(the interest is umi token)\\n        (uint256 totalWithInterest, uint256 timePassed) =\\n            calculateRewardsAndTimePassed(_sender, 0);\\n        require(\\n            totalWithInterest > 0 && timePassed > 0,\\n            \\\"totalWithInterest<=0 or timePassed<=0\\\"\\n        );\\n        // update balance of user to 0\\n        balances[_sender] = 0;\\n        // update date of stake\\n        stakeDates[_sender] = 0;\\n        // update totalStaked of lpToken\\n        totalStaked = totalStaked.sub(balance);\\n\\n        // interest to be paid, rewards is umi token\\n        uint256 interest = totalWithInterest.sub(balance);\\n        uint256 umiInterestAmount = 0;\\n        if (interest > 0 && totalFunding >= interest) {\\n            // interest > 0 and total funding is enough to pay interest\\n            umiInterestAmount = interest;\\n            // reduce total funding\\n            totalFunding = totalFunding.sub(interest);\\n        }\\n        // total funding is not enough to pay interest, the contract's UMI has been completely drained. make sure users can unstake their lp tokens.\\n        // 1. rewards are paid in more umi\\n        if (umiInterestAmount > 0) {\\n            require(\\n                umiToken.transfer(_sender, umiInterestAmount),\\n                \\\"_unstake umi transfer failed\\\"\\n            );\\n        }\\n        // 2. unstake lp token of user\\n        require(\\n            lpToken.transfer(_sender, balance),\\n            \\\"_unstake: lp transfer failed\\\"\\n        );\\n        // send event\\n        emit Unstaked(\\n            _sender,\\n            getTotalApyOfUser(_sender),\\n            balance,\\n            umiInterestAmount,\\n            timePassed,\\n            _now()\\n        );\\n    }\\n\\n    /**\\n     * stake nft token to this contract.\\n     * Note: It calls another internal \\\"_stakeNft\\\" method. See its description.\\n     * \\n     * @param nftAddress The address of nft contract.\\n     */\\n    function stakeNft(\\n        address nftAddress,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external whenNotPaused nonReentrant {\\n        require(isInWhitelist(nftAddress, id), \\\"stakeNft: nft id not in whitelist\\\");\\n        _stakeNft(msg.sender, address(this), nftAddress, id, value, data);\\n    }\\n\\n    /**\\n     * Transfers `_value` tokens of token type `_id` from `_from` to `_to`.\\n     *\\n     * Note: when nft staked, apy will changed, should recalculate balance.\\n     * update nft balance, nft id, totalNftStaked.\\n     *\\n     * @param _from The address of the sender.\\n     * @param _to The address of the receiver.\\n     * @param _nftAddress The address of nft contract.\\n     * @param _id The nft id.\\n     * @param _value The amount of nft token.\\n     */\\n    function _stakeNft(\\n        address _from,\\n        address _to,\\n        address _nftAddress,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) internal {\\n        // calculate rewards of umi token\\n        uint256 umiInterest = calculateUmiTokenRewards(_from);\\n        // update stakeDate of user\\n        stakeDates[_from] = balances[_from] > 0 ?  _now() : 0;\\n\\n        // modify nftBalances of user\\n        nftBalances[_from][_nftAddress][_id] = nftBalances[_from][_nftAddress][_id].add(_value);\\n        // modify user's nft id array\\n        setUserNftIds(_from, _nftAddress, _id);\\n        totalNftStaked = totalNftStaked.add(_value);\\n\\n        // transfer nft token to this contract\\n        getERC1155(_nftAddress).safeTransferFrom(_from, _to, _id, _value, _data);\\n        // Transfer umiToken interest to user\\n        transferUmiInterest(_from, umiInterest);\\n        // send event\\n        emit NftStaked(_from, _nftAddress, _id, _value, _now());\\n    }\\n\\n    /**\\n     * Batch stake nft token to this contract.\\n     *\\n     * Note: It calls another internal \\\"_batchStakeNfts\\\" method. See its description.\\n     *       Reverts if ids and values length mismatch.\\n     * \\n     * @param nftAddress The address of nft contract.\\n     * @param ids The nft id array to be staked.\\n     * @param values The nft amount array.\\n     */\\n    function batchStakeNfts(\\n        address nftAddress,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external whenNotPaused nonReentrant {\\n        require(\\n            ids.length == values.length,\\n            \\\"ids and values length mismatch\\\"\\n        );\\n        _batchStakeNfts(msg.sender, address(this), nftAddress, ids, values, data);\\n    }\\n\\n    /**\\n     * Batch transfers `_values` tokens of token type `_ids` from `_from` to `_to`.\\n     *\\n     * Note: when nft staked, apy will changed, should recalculate balance.\\n     * update nft balance, nft id and totalNftStaked.\\n     *\\n     * @param _from The address of sender.\\n     * @param _to The address of receiver.\\n     * @param _nftAddress The address of nft contract.\\n     * @param _ids The nft id array to be staked.\\n     * @param _values The nft amount array.\\n     */\\n    function _batchStakeNfts(\\n        address _from,\\n        address _to,\\n        address _nftAddress,\\n        uint256[] memory _ids,\\n        uint256[] memory _values,\\n        bytes calldata _data\\n    ) internal {\\n        // calculate rewards of umi token\\n        uint256 umiInterest = calculateUmiTokenRewards(_from);\\n        // update stakeDate of user\\n        stakeDates[_from] = balances[_from] > 0 ?  _now() : 0;\\n\\n        // update data\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            // get nft id from id array\\n            uint256 id = _ids[i];\\n            // get amount\\n            uint256 value = _values[i];\\n\\n            require(isInWhitelist(_nftAddress, id), \\\"nft id not in whitelist\\\");\\n\\n            // increase nft balance of user\\n            nftBalances[_from][_nftAddress][id] = nftBalances[_from][_nftAddress][id].add(value);\\n            // update user's nft id array\\n            setUserNftIds(_from, _nftAddress, id);\\n            // increase total nft amount\\n            totalNftStaked = totalNftStaked.add(value);\\n        }\\n\\n        // batch transfer nft tokens\\n        getERC1155(_nftAddress).safeBatchTransferFrom(_from, _to, _ids, _values, _data);\\n        // Transfer umiToken interest to user\\n        transferUmiInterest(msg.sender, umiInterest);\\n        // send event\\n        emit NftsBatchStaked(_from, _nftAddress, _ids, _values, _now());\\n    }\\n\\n    /**\\n     * Unstake nft token from this contract.\\n     *\\n     * Note: It calls another internal \\\"_unstakeNft\\\" method. See its description.\\n     *\\n     * @param nftAddress The address of nft contract.\\n     * @param id The nft id.\\n     * @param value The amount of nft id.\\n     */\\n    function unstakeNft(\\n        address nftAddress,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external whenNotPaused nonReentrant {\\n        _unstakeNft(nftAddress, id, value, data);\\n    }\\n\\n    /**\\n     * Unstake nft token with sufficient balance.\\n     *\\n     * Note: when nft unstaked, apy will changed, should recalculate balance.\\n     * update nft balance, nft id and totalNftStaked.\\n     *\\n     * @param _nftAddress The address of nft contract.\\n     * @param _id The nft id.\\n     * @param _value The amount of nft id.\\n     */\\n    function _unstakeNft(\\n        address _nftAddress,\\n        uint256 _id,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) internal {\\n        // calculate rewards of umi token\\n        uint256 umiInterest = calculateUmiTokenRewards(msg.sender);\\n        // update stakeDate of user\\n        stakeDates[msg.sender] = balances[msg.sender] > 0 ?  _now() : 0;\\n\\n        uint256 nftBalance = nftBalances[msg.sender][_nftAddress][_id];\\n        require(\\n            nftBalance >= _value,\\n            \\\"insufficient balance for unstake\\\"\\n        );\\n\\n        // reduce nft balance\\n        nftBalances[msg.sender][_nftAddress][_id] = nftBalance.sub(_value);\\n        // reduce total nft amount\\n        totalNftStaked = totalNftStaked.sub(_value);\\n        if (nftBalances[msg.sender][_nftAddress][_id] == 0) {\\n            // if balance of the nft id is 0, remove nft id and set flag=false\\n            removeUserNftId(_nftAddress, _id);\\n        }\\n\\n        // transfer nft token from this contract\\n        getERC1155(_nftAddress).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            _id,\\n            _value,\\n            _data\\n        );\\n        // Transfer umiToken interest to user\\n        transferUmiInterest(msg.sender, umiInterest);\\n        // send event\\n        emit NftUnstaked(msg.sender, _nftAddress, _id, _value, _now());\\n    }\\n\\n    /**\\n     * Batch unstake nft token from this contract.\\n     *\\n     * Note: It calls another internal \\\"_batchUnstakeNfts\\\" method. See its description.\\n     *       Reverts if ids and values length mismatch.\\n     *\\n     * @param nftAddress The address of nft contract.\\n     * @param ids The nft id array to be staked.\\n     * @param values The nft amount array.\\n     */\\n    function batchUnstakeNfts(\\n        address nftAddress,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external whenNotPaused nonReentrant {\\n        require(\\n            ids.length == values.length,\\n            \\\"ids and values length mismatch\\\"\\n        );\\n        _batchUnstakeNfts(address(this), msg.sender, nftAddress, ids, values, data);\\n    }\\n\\n    /**\\n     * Batch unstake nft token from this contract.\\n     *\\n     * Note: when nft unstaked, apy will changed, should recalculate balance.\\n     * update nft balance, nft id and totalNftStaked.\\n     *\\n     * @param _from The address of sender.\\n     * @param _to The address of receiver.\\n     * @param _nftAddress The address of nft contract.\\n     * @param _ids The nft id array to be unstaked.\\n     * @param _values The nft amount array.\\n     */\\n    function _batchUnstakeNfts(\\n        address _from,\\n        address _to,\\n        address _nftAddress,\\n        uint256[] calldata _ids,\\n        uint256[] calldata _values,\\n        bytes calldata _data\\n    ) internal {\\n        // calculate rewards of umi token\\n        uint256 umiInterest = calculateUmiTokenRewards(_from);\\n        // update stakeDate of user\\n        stakeDates[_from] = balances[_from] > 0 ?  _now() : 0;\\n\\n        // update data\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            // get nft id\\n            uint256 id = _ids[i];\\n            // get amount of nft id\\n            uint256 value = _values[i];\\n\\n            uint256 nftBalance = nftBalances[msg.sender][_nftAddress][id];\\n            require(\\n                nftBalance >= value,\\n                \\\"insufficient nft balance for unstake\\\"\\n            );\\n            nftBalances[msg.sender][_nftAddress][id] = nftBalance.sub(value);\\n            totalNftStaked = totalNftStaked.sub(value);\\n            if (nftBalances[msg.sender][_nftAddress][id] == 0) {\\n                // if balance of the nft id is 0, remove nft id and set flag=false\\n                removeUserNftId(_nftAddress, id);\\n            }\\n        }\\n\\n        // transfer nft token from this contract\\n        getERC1155(_nftAddress).safeBatchTransferFrom(_from, _to, _ids, _values, _data);\\n        // Transfer umiToken interest to user\\n        transferUmiInterest(msg.sender, umiInterest);\\n        // send event\\n        emit NftsBatchUnstaked(msg.sender, _nftAddress, _ids, _values, _now());\\n    }\\n\\n    /**\\n    * Withdraws the interest only of user, and updates the stake date, balance and etc..\\n    */\\n    function claim() external whenNotPaused nonReentrant {\\n        uint256 balance = balances[msg.sender];\\n        require(balance > 0, \\\"balance should more than 0\\\");\\n        // calculate total balance with interest\\n        (uint256 totalWithInterest, uint256 timePassed) = calculateRewardsAndTimePassed(msg.sender, 0);\\n        require(\\n            totalWithInterest > 0 && timePassed >= 0,\\n            \\\"calculate rewards and TimePassed error\\\"\\n        );\\n        // interest to be paid\\n        uint256 interest = totalWithInterest.sub(balance);\\n        require(interest > 0, \\\"claim interest must more than 0\\\");\\n        require(totalFunding >= interest, \\\"total funding not enough to pay interest\\\");\\n        // enough to pay interest\\n        // reduce total funding\\n        totalFunding = totalFunding.sub(interest);\\n        uint256 claimTimestamp = _now();\\n        // update stake date\\n        stakeDates[msg.sender] = claimTimestamp;\\n        // transfer interest to user\\n        require(\\n            umiToken.transfer(msg.sender, interest),\\n            \\\"claim: transfer failed\\\"\\n        );\\n        // send claim event\\n        emit Claimed(msg.sender, balance, interest, claimTimestamp);\\n    }\\n\\n    /**\\n     * Calculate user's umiToken rewards.\\n     *\\n     * @param _from User address.\\n     */\\n    function calculateUmiTokenRewards(address _from) public view returns(uint256) {\\n        // if lpToken balance>0, pass time > 1 seconds, should calculate rewards of umiToken.\\n        // get current lp token balance\\n        uint256 balance = balances[_from];\\n        if (balance <= 0) {\\n            // stake first time, balance is 0, donot need to calculate rewards.\\n            return 0;\\n        }\\n        // calculate total balance with interest\\n        (uint256 totalWithInterest, uint256 timePassed) =\\n            calculateRewardsAndTimePassed(_from, 0);\\n        require(\\n            totalWithInterest > 0 && timePassed >= 0,\\n            \\\"calculate rewards and TimePassed error\\\"\\n        );\\n        // return rewards amount\\n        return totalWithInterest.sub(balance);\\n    }\\n\\n    /**\\n     * Calculate interest and time passed.\\n     *\\n     * @param _user User's address.\\n     * @param _amount Amount based on which interest is calculated. When 0, current stake balance is used.\\n     * @return Return total with interest and time passed.\\n     */\\n    function calculateRewardsAndTimePassed(address _user, uint256 _amount)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        uint256 currentBalance = balances[_user];\\n        uint256 amount = _amount == 0 ? currentBalance : _amount;\\n        uint256 stakeDate = stakeDates[_user];\\n        // seconds\\n        uint256 timePassed = _now().sub(stakeDate);\\n        if (timePassed < 1 seconds) {\\n            // if timePassed less than one second, rewards will be 0\\n            return (amount, timePassed);\\n        }\\n        // get total apy of user\\n        uint256 totalApy = getTotalApyOfUser(_user);\\n        uint256 totalWithInterest =\\n            Calculator.calculator(amount, timePassed, totalApy);\\n        return (totalWithInterest, timePassed);\\n    }\\n\\n    /**\\n     * Get umi token balance by address.\\n     * @param addr The address of the account that needs to check the balance.\\n     * @return Return balance of umi token.\\n     */\\n    function getUmiBalance(address addr) public view returns (uint256) {\\n        return umiToken.balanceOf(addr);\\n    }\\n    \\n    /**\\n     * Get erc1155 token instance by address.\\n     */\\n    function getERC1155(address _nftAddress) internal pure returns(IERC1155) {\\n       IERC1155 nftContract = IERC1155(_nftAddress);\\n       return nftContract;\\n    }\\n\\n    /**\\n     * Get lp token balance by address.\\n     * @param addr The address of the account that needs to check the balance\\n     * @return Return balance of lp token.\\n     */\\n    function getLpBalance(address addr) public view returns (uint256) {\\n        return lpToken.balanceOf(addr);\\n    }\\n\\n    /**\\n     * Get nft balance by user address and nft id.\\n     *\\n     * @param user The address of user.\\n     * @param nftAddress The address of nft contract.\\n     * @param id The nft id.\\n     */\\n    function getNftBalance(address user, address nftAddress, uint256 id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return getERC1155(nftAddress).balanceOf(user, id);\\n    }\\n\\n    /**\\n     * Get user's nft ids array.\\n     * @param user The address of user.\\n     * @param nftAddress The address of nft contract.\\n     */\\n    function getUserNftIds(address user, address nftAddress)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return userNftIds[user][nftAddress].ids;\\n    }\\n\\n    /**\\n     * Get length of user's nft id array.\\n     * @param user The address of user.\\n     * @param nftAddress The address of nft contract.\\n     */\\n    function getUserNftIdsLength(address user, address nftAddress) public view returns (uint256) {\\n        return userNftIds[user][nftAddress].ids.length;\\n    }\\n\\n    /**\\n     * Check whether user have certain nft or not.\\n     * @param user The address of user.\\n     * @param nftAddress The address of nft contract.\\n     * @param nftId The nft id of user.\\n     */\\n    function isNftIdExist(address user, address nftAddress, uint256 nftId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        NftSet storage nftSet = userNftIds[user][nftAddress];\\n        mapping(uint256 => bool) storage isIn = nftSet.isIn;\\n        return isIn[nftId];\\n    }\\n\\n    /**\\n     * Set user's nft id.\\n     *\\n     * Note: when nft id donot exist, the nft id will be added to ids array, and the idIn flag will be setted true;\\n     * otherwise do nothing.\\n     *\\n     * @param user The address of user.\\n     * @param nftAddress The address of nft contract.\\n     * @param nftId The nft id of user.\\n     */\\n    function setUserNftIds(address user, address nftAddress, uint256 nftId) internal {\\n        NftSet storage nftSet = userNftIds[user][nftAddress];\\n        uint256[] storage ids = nftSet.ids;\\n        mapping(uint256 => bool) storage isIn = nftSet.isIn;\\n        if (!isIn[nftId]) {\\n            ids.push(nftId);\\n            isIn[nftId] = true;\\n        }\\n    }\\n\\n    /**\\n     * Remove nft id of user.\\n     *\\n     * Note: when user's nft id amount=0, remove it from nft ids array, and set flag=false\\n     * \\n     * @param nftAddress The address of nft contract.\\n     * @param nftId The nft id of user.\\n     */\\n    function removeUserNftId(address nftAddress, uint256 nftId) internal {\\n        NftSet storage nftSet = userNftIds[msg.sender][nftAddress];\\n        uint256[] storage ids = nftSet.ids;\\n        mapping(uint256 => bool) storage isIn = nftSet.isIn;\\n        require(ids.length > 0, \\\"remove user nft ids, ids length must > 0\\\");\\n\\n        // find nftId index\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (ids[i] == nftId) {\\n                ids[i] = ids[ids.length - 1];\\n                isIn[nftId] = false;\\n                ids.pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Set apy of nft.\\n     *\\n     * Note: apy will be an integer value, 40 stands for 40%\\n     */\\n    function setApyByTokenId(address nftAddress, uint256 id, uint8 apy) public onlyOwner {\\n        require(nftAddress != address(0), \\\"nft address incorrect\\\");\\n        require(id > 0 && apy > 0, \\\"nft and apy must > 0\\\");\\n        if (!isNftSupported[nftAddress]) {\\n           // if nft address never been added\\n           nftAddresses.push(nftAddress);\\n           isNftSupported[nftAddress] = true;\\n        }\\n        nftApys[nftAddress][id] = apy;\\n        emit NftApySet(nftAddress, id, apy, msg.sender);\\n    }\\n\\n    /**\\n     * Check if nft id is in whitelist.\\n     * @param id The nft id.\\n     */\\n    function isInWhitelist(address nftAddress, uint256 id) public view returns(bool) {\\n        return nftApys[nftAddress][id] > 0;\\n    }\\n\\n    /**\\n     * Get user's total apy.\\n     *\\n     * Note: when umi token staked, base apy will be 12%; otherwise total apy will be 0.\\n     *\\n     * @param user The address of user.\\n     */\\n    function getTotalApyOfUser(address user) public view returns (uint256) {\\n        uint256 balanceOfUmi = balances[user];\\n        // if umi balance=0, the apy will be 0\\n        if (balanceOfUmi <= 0) {\\n            return 0;\\n        }\\n        // totalApy\\n        uint256 totalApy = BASE_APY;\\n        \\n        for (uint256 i = 0; i< nftAddresses.length; i++) {\\n            uint256[] memory nftIds = getUserNftIds(user, nftAddresses[i]);\\n            if (nftIds.length <= 0) {\\n                continue;\\n            }\\n            // iter nftIds and calculate total apy\\n            for (uint256 j = 0; j < nftIds.length; j++) {\\n                uint256 nftId = nftIds[j];\\n                // get user balance of nft\\n                uint256 balance = nftBalances[user][nftAddresses[i]][nftId];\\n                // get apy of certain nft id\\n                uint256 apy = nftApys[nftAddresses[i]][nftId];\\n                totalApy = totalApy.add(balance.mul(apy));\\n            }\\n        }\\n        \\n        return totalApy;\\n    }\\n\\n    /**\\n     * @return Returns current timestamp.\\n     */\\n    function _now() internal view returns (uint256) {\\n        // Note that the timestamp can have a 900-second error:\\n        // https://github.com/ethereum/wiki/blob/c02254611f218f43cbb07517ca8e5d00fd6d6d75/Block-Protocol-2.0.md\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n     * Pauses all token stake, unstake.\\n     *\\n     * See {Pausable-_pause}.\\n     *\\n     * Requirements: the caller must be the owner.\\n     */\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * Unpauses all token stake, unstake.\\n     *\\n     * See {Pausable-_unpause}.\\n     *\\n     * Requirements: the caller must be the owner.\\n     */\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * Init apys when deploy contract.\\n     */\\n    function initApys() public onlyOwner {\\n        // first nft contract\\n        // category 1(total 1)\\n        nftApys[firstNft][59] = 1;\\n        // category 2(total 3)\\n        nftApys[firstNft][18] = 2;\\n        nftApys[firstNft][19] = 2;\\n        nftApys[firstNft][20] = 2;\\n        // category 3(total 27)\\n        nftApys[firstNft][1] = 10;\\n        nftApys[firstNft][2] = 10;\\n        nftApys[firstNft][4] = 10;\\n        nftApys[firstNft][5] = 10;\\n        nftApys[firstNft][6] = 10;\\n        nftApys[firstNft][7] = 10;\\n        nftApys[firstNft][8] = 10;\\n        nftApys[firstNft][9] = 10;\\n        nftApys[firstNft][12] = 10;\\n        nftApys[firstNft][13] = 10;\\n        nftApys[firstNft][14] = 10;\\n        nftApys[firstNft][15] = 10;\\n        nftApys[firstNft][16] = 10;\\n        nftApys[firstNft][22] = 10;\\n        nftApys[firstNft][23] = 10;\\n        nftApys[firstNft][24] = 10;\\n        nftApys[firstNft][26] = 10;\\n        nftApys[firstNft][27] = 10;\\n        nftApys[firstNft][28] = 10;\\n        nftApys[firstNft][29] = 10;\\n        nftApys[firstNft][30] = 10;\\n        nftApys[firstNft][31] = 10;\\n        nftApys[firstNft][32] = 10;\\n        nftApys[firstNft][33] = 10;\\n        nftApys[firstNft][35] = 10;\\n        nftApys[firstNft][36] = 10;\\n        nftApys[firstNft][37] = 10;\\n        // category 4(total 4)\\n        nftApys[firstNft][3] = 20;\\n        nftApys[firstNft][11] = 20;\\n        nftApys[firstNft][25] = 20;\\n        nftApys[firstNft][34] = 20;\\n        // category 5(total 1)\\n        nftApys[firstNft][17] = 30;\\n        // category 6(total 7)\\n        nftApys[firstNft][38] = 40;\\n        nftApys[firstNft][39] = 40;\\n        nftApys[firstNft][40] = 40;\\n        nftApys[firstNft][41] = 40;\\n        nftApys[firstNft][42] = 40;\\n        nftApys[firstNft][43] = 40;\\n        nftApys[firstNft][44] = 40;\\n\\n        nftApys[firstNft][52] = 40;\\n        nftApys[firstNft][60] = 40;\\n        nftApys[firstNft][61] = 40;\\n        nftApys[firstNft][62] = 40;\\n        nftApys[firstNft][63] = 40;\\n        nftApys[firstNft][64] = 40;\\n        nftApys[firstNft][65] = 40;\\n        nftApys[firstNft][66] = 40;\\n        nftApys[firstNft][67] = 40;\\n        // category 7(total 6)\\n        nftApys[firstNft][45] = 80;\\n        nftApys[firstNft][46] = 80;\\n        nftApys[firstNft][47] = 80;\\n        nftApys[firstNft][48] = 80;\\n        nftApys[firstNft][49] = 80;\\n        nftApys[firstNft][50] = 80;\\n        \\n        // second nft contract\\n        // category 4(total 1)\\n        nftApys[secondNft][1] = 20;\\n        // category 8(total 20)\\n        nftApys[secondNft][2] = 102;\\n        nftApys[secondNft][3] = 102;\\n        nftApys[secondNft][4] = 102;\\n        nftApys[secondNft][5] = 102;\\n        nftApys[secondNft][6] = 102;\\n        nftApys[secondNft][7] = 102;\\n        nftApys[secondNft][8] = 102;\\n        nftApys[secondNft][9] = 102;\\n        nftApys[secondNft][10] = 102;\\n        nftApys[secondNft][12] = 102;\\n        nftApys[secondNft][13] = 102;\\n        nftApys[secondNft][14] = 102;\\n        nftApys[secondNft][15] = 102;\\n        nftApys[secondNft][16] = 102;\\n        nftApys[secondNft][18] = 102;\\n        nftApys[secondNft][19] = 102;\\n        nftApys[secondNft][20] = 102;\\n        nftApys[secondNft][21] = 102;\\n        nftApys[secondNft][22] = 102;\\n        nftApys[secondNft][23] = 102;\\n    }\\n    \\n}\"\r\n    },\r\n    \"/contracts/erc1155/ERC1155TokenReceiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\nimport \\\"./CommonConstants.sol\\\";\\n\\nabstract contract ERC1155TokenReceiver is ERC1155Receiver, CommonConstants {\\n\\n    /**\\n     * ERC1155Receiver hook for single transfer.\\n     * @dev Reverts if the caller is not the whitelisted NFT contract.\\n     */\\n    function onERC1155Received(\\n        address, /*operator*/\\n        address, /*from _msgSender*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external virtual override returns (bytes4) {\\n        return ERC1155_ACCEPTED;\\n    }\\n\\n    /**\\n     * ERC1155Receiver hook for batch transfer.\\n     * @dev Reverts if the caller is not the whitelisted NFT contract.\\n     */\\n    function onERC1155BatchReceived(\\n        address, /*operator*/\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*value*/\\n        bytes calldata /*data*/\\n    ) external virtual override returns (bytes4) {\\n        return ERC1155_BATCH_ACCEPTED;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/erc1155/CommonConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\n\\n/**\\n    Note: Simple contract to use as base for const vals\\n*/\\ncontract CommonConstants {\\n\\n    bytes4 constant internal ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\n    bytes4 constant internal ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\n}\\n\"\r\n    },\r\n    \"/contracts/abdk-libraries/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"/contracts/ERC20Interface.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface ERC20Interface {\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\\n    function balanceOf(address _account) external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\\n    function approve(address spender, uint tokens) external returns (bool success);\\n\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\n}\"\r\n    },\r\n    \"/contracts/Calculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.3;\\nimport \\\"./abdk-libraries/ABDKMath64x64.sol\\\";\\n\\n/**\\n * Tools for calculating rewards.\\n * Calculation formula: F=P*(1+i)^n\\n */\\nlibrary Calculator {\\n    /*\\n     * calculate rewards\\n     * steps\\n     * 1. Calculate rewards by apy\\n     * 2. Get principal and rewards\\n     * @param principal principal amount\\n     * @param n periods for calculating interest,  one second eq to one period\\n     * @param apy annual percentage yield\\n     * @return sum of principal and rewards\\n     */\\n  function calculator(\\n        uint256 principal,\\n        uint256 n,\\n        uint256 apy\\n   ) internal pure returns (uint256 amount) {\\n        int128 div = ABDKMath64x64.divu(apy, 36500 * 1 days); // second rate\\n        int128 sum = ABDKMath64x64.add(ABDKMath64x64.fromInt(1), div);\\n        int128 pow = ABDKMath64x64.pow(sum, n);\\n        uint256 res = ABDKMath64x64.mulu(pow, principal);\\n        return res;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_umiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"BaseApySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTimestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContractFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NftApySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NftStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NftUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NftsBatchStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NftsBatchUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"umiInterest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timePassed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchStakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchUnstakeNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"calculateUmiTokenRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"funding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getLpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNftBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalApyOfUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getUmiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"getUserNftIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"getUserNftIdsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initApys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isInWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"isNftIdExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isNftSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftApys\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"apy\",\"type\":\"uint8\"}],\"name\":\"setApyByTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_APY\",\"type\":\"uint256\"}],\"name\":\"setBaseApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"stakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFunding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNftStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"umiToken\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"unstakeNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LpNftStakingFarm", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000061107a409fffe1965126aa456af679719695c69c00000000000000000000000061107a409fffe1965126aa456af679719695c69c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}