{"SourceCode": "pragma solidity ^0.4.16;\r\n\r\n//Base class of token-owner\r\ncontract Ownable {\r\n\taddress public owner;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//owner's address\r\n\r\n\tfunction Ownable() public \r\n\t{\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\t/*\r\n\t*\tFuntion: Transfer owner's authority \r\n\t*\tType:Public and onlyOwner\r\n\t*\tParameters:\r\n\t\t\t@newOwner:\taddress of newOwner\r\n\t*/\r\n\tfunction transferOwnership(address newOwner) onlyOwner public{\r\n\t\tif (newOwner != address(0)) {\r\n\t\towner = newOwner;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction kill() onlyOwner public{\r\n\t\tselfdestruct(owner);\r\n\t}\r\n}\r\n\r\n//Announcement of an interface for recipient approving\r\ninterface tokenRecipient { \r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData)public; \r\n}\r\n\r\n\r\ncontract AAAToken is Ownable{\r\n\t\r\n\t//===================public variables definition start==================\r\n    string public name;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Name of your Token\r\n    string public symbol;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Symbol of your Token\r\n    uint8 public decimals;\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Decimals of your Token\r\n    uint256 public totalSupply;\t\t\t\t\t\t\t\t\t\t\t\t\t//Maximum amount of Token supplies\r\n\r\n    //define dictionaries of balance\r\n    mapping (address => uint256) public balanceOf;\t\t\t\t\t\t\t\t//Announce the dictionary of account's balance\r\n    mapping (address => mapping (address => uint256)) public allowance;\t\t\t//Announce the dictionary of account's available balance\r\n\t//===================public variables definition end==================\r\n\r\n\t\r\n\t//===================events definition start==================    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\t//Event on blockchain which notify client\r\n\t//===================events definition end==================\r\n\t\r\n\t\r\n\t//===================Contract Initialization Sequence Definition start===================\r\n    function AAAToken () public {\r\n\t\tdecimals=10;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//Assignment of Token's decimals\r\n\t\ttotalSupply = 21000000000 * 10 ** uint256(decimals);  \t\t\t\t//Assignment of Token's total supply with decimals\r\n        balanceOf[owner] = totalSupply;                \t\t\t\t\t\t//Assignment of Token's creator initial tokens\r\n        name = \"App Alliance Association\";                                   \t\t\t\t\t//Set the name of Token\r\n        symbol = \"AAA\";                               \t\t\t\t\t\t//Set the symbol of  Token\r\n        \r\n    }\r\n\t//===================Contract Initialization Sequence definition end===================\r\n\t\r\n\t//===================Contract behavior & funtions definition start===================\r\n\t\r\n\t/*\r\n\t*\tFuntion: Transfer funtions\r\n\t*\tType:Internal\r\n\t*\tParameters:\r\n\t\t\t@_from:\taddress of sender's account\r\n\t\t\t@_to:\taddress of recipient's account\r\n\t\t\t@_value:transaction amount\r\n\t*/\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\t\t//Fault-tolerant processing\r\n\t\trequire(_to != 0x0);\t\t\t\t\t\t//\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n        //Execute transaction\r\n\t\tuint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n\t\t\r\n\t\t//Verify transaction\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\t\r\n\t\r\n\t/*\r\n\t*\tFuntion: Transfer tokens\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_to:\taddress of recipient's account\r\n\t\t\t@_value:transaction amount\r\n\t*/\r\n    function transfer(address _to, uint256 _value) public {\r\n\t\t\r\n        _transfer(msg.sender, _to, _value);\r\n    }\t\r\n\t\r\n\t/*\r\n\t*\tFuntion: Transfer tokens from other address\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_from:\taddress of sender's account\r\n\t\t\t@_to:\taddress of recipient's account\r\n\t\t\t@_value:transaction amount\r\n\t*/\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public \r\n\treturns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     \t\t\t\t\t//Allowance verification\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n\t/*\r\n\t*\tFuntion: Approve usable amount for an account\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_spender:\taddress of spender's account\r\n\t\t\t@_value:\tapprove amount\r\n\t*/\r\n    function approve(address _spender, uint256 _value) public \r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n        }\r\n\r\n\t/*\r\n\t*\tFuntion: Approve usable amount for other address and then notify the contract\r\n\t*\tType:Public\r\n\t*\tParameters:\r\n\t\t\t@_spender:\taddress of other account\r\n\t\t\t@_value:\tapprove amount\r\n\t\t\t@_extraData:additional information to send to the approved contract\r\n\t*/\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public \r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    /*\r\n\t*\tFuntion: Transfer owner's authority and account balance\r\n\t*\tType:Public and onlyOwner\r\n\t*\tParameters:\r\n\t\t\t@newOwner:\taddress of newOwner\r\n\t*/\r\n    function transferOwnershipWithBalance(address newOwner) onlyOwner public{\r\n\t\tif (newOwner != address(0)) {\r\n\t\t    _transfer(owner,newOwner,balanceOf[owner]);\r\n\t\t    owner = newOwner;\r\n\t\t}\r\n\t}\r\n   //===================Contract behavior & funtions definition end===================\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipWithBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "AAAToken", "CompilerVersion": "v0.4.19+commit.c4cbbb05", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://edebfbf276e03e09b6312a024af2728e84fa8dc5a94aa3586edad6e03e263811"}