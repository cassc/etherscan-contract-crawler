{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ABAI.sol\": {\r\n      \"content\": \"\\n// TG: https://t.me/AlphaBetsAI\\n// Twitter: https://twitter.com/AlphaBetsAI\\n// Docs: https://alphabets-ai.gitbook.io/alphabets-ai/\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        return c;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract ABAI is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) private _buyerMap;\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\n    mapping(address => bool) internal _isAdmin;\\n    mapping(address => bool) private _isBot;\\n\\n    address payable private _taxWallet;\\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    uint256 private _initialBuyTax = 20;\\n    uint256 private _initialSellTax = 20;\\n    uint256 public _finalTax = 5;\\n\\n    uint256 private _blockAtLaunch;\\n    uint256 private _blockRemoveLimits = 10;\\n\\n    uint8 private constant _decimals = 18;\\n    uint256 private constant _tTotal = 10_000_000 * 10 ** _decimals;\\n    string private constant _name = unicode\\\"AlphaBetsAI\\\";\\n    string private constant _symbol = unicode\\\"ABAI\\\";\\n    uint256 public _maxWalletSize = (_tTotal * 50) / 10000; // 0.5% of total supply\\n    uint256 public _maxLittleWalletSize = (_tTotal * 30) / 10000; // 0.3% of total supply\\n    uint256 private swapThreshold = (_tTotal * 50) / 10000; // 0.5% of total supply\\n\\n    IUniswapV2Router02 private router;\\n    address public pair;\\n    bool public tradingOpen = false;\\n    bool private inSwap = false;\\n    bool private swapEnabled = false;\\n\\n    modifier lockTheSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(address[] memory addresses) {\\n        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        pair = IUniswapV2Factory(router.factory()).createPair(\\n            address(this),\\n            router.WETH()\\n        );\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            _isAdmin[addresses[i]] = true;\\n        }\\n        _isAdmin[owner()] = true;\\n\\n        _taxWallet = payable(_msgSender());\\n        _balances[_msgSender()] = _tTotal;\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[_taxWallet] = true;\\n\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\n    }\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _tTotal;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    // Launch limits functions\\n\\n    /** @dev Remove wallet cap.\\n     * @notice Can only be called by the current owner.\\n     */\\n    function removeLimits() external onlyOwner {\\n        _maxWalletSize = _tTotal;\\n    }\\n\\n    /** @dev Enable trading.\\n     * @notice Can only be called by the current owner.\\n     * @notice Can only be called once.\\n     */\\n    function openTrading() external onlyOwner {\\n        require(!tradingOpen, \\\"trading is already open\\\");\\n        swapEnabled = true;\\n        tradingOpen = true;\\n        _blockAtLaunch = block.number;\\n    }\\n\\n    function manageBot(address account, bool a) external onlyOwner {\\n        _isBot[account] = a;\\n    }\\n\\n    // Transfer functions\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(!_isBot[msg.sender], \\\"You are a bot\\\");\\n        if (msg.sender == pair) {\\n            return _transferFrom(msg.sender, recipient, amount);\\n        } else {\\n            return _basicTransfer(msg.sender, recipient, amount);\\n        }\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        require(!_isBot[msg.sender], \\\"You are a bot\\\");\\n        require(\\n            _allowances[sender][_msgSender()] >= amount,\\n            \\\"ERC20: transfer amount exceeds allowance\\\"\\n        );\\n        _transferFrom(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - amount\\n        );\\n\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(\\n            _isExcludedFromFee[sender] ||\\n                _isExcludedFromFee[recipient] ||\\n                _isAdmin[sender] ||\\n                _isAdmin[recipient] ||\\n                tradingOpen,\\n            \\\"Not authorized to trade yet\\\"\\n        );\\n\\n        uint256 blockSinceLaunch = block.number - _blockAtLaunch;\\n        uint256 _limit = _maxWalletSize;\\n\\n        // Checks max transaction limit\\n        if (sender != owner() && recipient != owner() && recipient != DEAD) {\\n            if (recipient != pair) {\\n                if (blockSinceLaunch <= _blockRemoveLimits) {\\n                    _limit = _maxLittleWalletSize;\\n                } else if (\\n                    blockSinceLaunch > _blockRemoveLimits && _blockAtLaunch != 0\\n                ) {\\n                    _limit = _maxWalletSize;\\n                }\\n                require(\\n                    _isExcludedFromFee[recipient] ||\\n                        (_balances[recipient] + amount <= _limit),\\n                    \\\"Transfer amount exceeds the MaxWallet size.\\\"\\n                );\\n            }\\n        }\\n\\n        //shouldSwapBack\\n        if (shouldSwapBack() && recipient == pair) {\\n            swapBack();\\n        }\\n\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        //Check if should Take Fee\\n        uint256 amountReceived = (!shouldTakeFee(sender) ||\\n            !shouldTakeFee(recipient))\\n            ? amount\\n            : takeFee(sender, recipient, amount);\\n        _balances[recipient] = _balances[recipient] + (amountReceived);\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + (amount);\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\n        return !_isExcludedFromFee[sender];\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        uint256 feeAmount = 0;\\n        uint256 blockSinceLaunch = block.number - _blockAtLaunch;\\n        uint256 tax;\\n\\n        if (blockSinceLaunch >= _blockRemoveLimits) {\\n            tax = _finalTax;\\n        } else {\\n            if (sender == pair && recipient != pair) {\\n                tax = _initialBuyTax;\\n            } else if (sender != pair && recipient == pair) {\\n                tax = _initialSellTax;\\n            }\\n        }\\n\\n        feeAmount = (amount * tax) / 100;\\n\\n        if (feeAmount > 0) {\\n            _balances[address(this)] += feeAmount;\\n            emit Transfer(sender, address(this), feeAmount);\\n        }\\n\\n        return amount - feeAmount;\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return\\n            msg.sender != pair &&\\n            !inSwap &&\\n            swapEnabled &&\\n            balanceOf(address(this)) >= swapThreshold;\\n    }\\n\\n    function swapBack() internal lockTheSwap {\\n        uint256 amountToSwap = swapThreshold;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        _approve(address(this), address(router), amountToSwap);\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountETHDev = address(this).balance;\\n\\n        if (amountETHDev > 0) {\\n            bool tmpSuccess;\\n            (tmpSuccess, ) = payable(_taxWallet).call{\\n                value: amountETHDev,\\n                gas: 30000\\n            }(\\\"\\\");\\n        }\\n    }\\n\\n    // Threshold management functions\\n\\n    /** @dev Set a new threshold to trigger swapBack.\\n     * @notice Can only be called by the current owner.\\n     */\\n    function setSwapThreshold(uint256 newTax) external onlyOwner {\\n        swapThreshold = newTax;\\n    }\\n\\n    // Internal functions\\n\\n    function sendETHToFee(uint256 amount) private {\\n        _taxWallet.transfer(amount);\\n    }\\n\\n    receive() external payable {}\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n\\n    function isContract(address account) private view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_finalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxLittleWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"manageBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ABAI", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000af3a0ba00099067098ab3adba34fd6059d74f9400000000000000000000000001bb9c7911b3998332b710a9d47e4a7bccdd669110000000000000000000000000c1a3e4e1c3da4c89582dfa1afa87a1853d7f78f000000000000000000000000d203cd6aa342d124a451e337da22577bea66ec02000000000000000000000000a80fe48e9d1217d33006b92dd4a51c86dcfaeab3000000000000000000000000815237e10ee00533729dd9fadb1ef454ace6d79700000000000000000000000038f82e5881835ca39e4ad06a04beaa8f98e6a7d900000000000000000000000058d363e7c2a0a7c5eaf17d8aa4b7b0d13846b654000000000000000000000000d25294b1c33670c916b6703057d62a3af6e307c80000000000000000000000001d20d526b211ac720a7d4d65282422b057ed1bf2000000000000000000000000a45b31458b378c9955c7ab43371b6767042d03f4000000000000000000000000121fdfc8b5b3c76a5edc9d6f148ee12fcfdcddef00000000000000000000000021a758f06544e411e14d544f3b8c07bd6e5a2a660000000000000000000000005d7a856b03118c262e20b3e4de17a1a3868b1bfb0000000000000000000000001bb9c7911b3998332b710a9d47e4a7bccdd6691100000000000000000000000038f82e5881835ca39e4ad06a04beaa8f98e6a7d9000000000000000000000000a80fe48e9d1217d33006b92dd4a51c86dcfaeab30000000000000000000000001ebd6887bdd3f5d93c687b46ec4df4406ef6c0a70000000000000000000000007fbceaa76d7cb61262ce2e4986726e23d3b9d977000000000000000000000000d25294b1c33670c916b6703057d62a3af6e307c80000000000000000000000000a03cd784f1531f8b4d78fbe619ef494c816d6a70000000000000000000000003caee8761865e1ca05975ab391a3dde700eb578c000000000000000000000000ca7706d7d048dd07ec1489b5412290027d19bffd000000000000000000000000f28fd95375477f49fab4d0bc8fc96fcc194d0c7b000000000000000000000000d203cd6aa342d124a451e337da22577bea66ec020000000000000000000000001599a3d793d710a996a2e4c80536f8466bf57a9d000000000000000000000000be906f9934d071217bcfed5d7f925ceec2111d0d000000000000000000000000f588b1fde5b8796ce0505869ddfc1f8f9f502aa100000000000000000000000058d363e7c2a0a7c5eaf17d8aa4b7b0d13846b6540000000000000000000000007d92cacb01b4ba1019fb82ec2bb7055159539a660000000000000000000000003f9becb212d437177fbef73d35c180cc338a095e000000000000000000000000838ef42677581c83f87d7fdab74761c1e3b8046a0000000000000000000000004c0986bc29d4196fa3a159429f6f4910ab89a29700000000000000000000000015e4381c0375e4c638b7da15bc751e4443ad95a5000000000000000000000000cbb48e6d1594e36c88b5dbd14179f2017530012d0000000000000000000000001e484cb7bfaefc67dc336af7ab39aa1cda12f30b000000000000000000000000daaa6a54d1dc5acc488e5f38e7a756c16048da8f000000000000000000000000aa61a58830996a2b54902bac0913641ccd36282800000000000000000000000052cf7555249a995cb828876096eee6f7a793ad09000000000000000000000000244bb28879d7bb7e4886fbb2b83fb1b2ae6d1f8d000000000000000000000000c188cfedc8d4685b62c414ee3ebc976a24df05ba0000000000000000000000004d7801ad31ce87789b0e43e47ea6629a675460ab0000000000000000000000004f9932d8945c9ef345f6495eb417bae0e9268d6900000000000000000000000026c76df2abdc0255b82d3dd48d2a748aee81bb9e0000000000000000000000005f2f7708b325f032df1a7631ca7b3e06eee21cab000000000000000000000000fefea9427bef554cc572bc4e887a0b9642fd8f4e000000000000000000000000a3bb3f1de6e76588ecb82be1d87df793d1e3bb97000000000000000000000000d878bab7393d4efe7e9b72684922d2f42eb0706c0000000000000000000000000d2f0b80b440eed55a176e78fc3da12d4cabe2ad00000000000000000000000051d643768dedb50a13e0cfe44f42302a4420bcd30000000000000000000000005aa33b716566da4d8c2b117ef0c0675db3ff5fe5000000000000000000000000dd50df750c222f18fac10d47682327e205acffe40000000000000000000000006e5f98cfeb80083ffffe20f4da9edbcfcb99e80b0000000000000000000000009575b4de68a1c168f3d55d75530b4ee3a0b70c1b00000000000000000000000025ad7f0cd43ca47e6c4fc96790c6c904833f010a000000000000000000000000e3424f9a53fd6e74bf0729b893dcfc75d2e6f280000000000000000000000000d6ca84c87fe90ebd16423162767fb0a05a4046ba00000000000000000000000098b5a355284b42903a7a6d31fc130e5f2e7d7301000000000000000000000000732422a4afde3dae61657f0731ac1101b061918b000000000000000000000000a97693631cf67a6b3b7e6f1f82dc7b78b398da59", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}