{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"TPU.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n/*\\r\\n                                                                                                                                                                                                   \\r\\n                                  .....   ..,;;;;;;;;;;;'....,;;;;,....';;;;;;.....,;;;;'. ...;;;;;;;;,,;,..                                          \\r\\n                                .. . ....ckXNNWWWWWWWWWNd. .;KWWWW0,  .xWWWWWNo.  :XWWWWk.  .dNNWWWWWWNNWNKkc.                                        \\r\\n                                  ... .l0WMMWXKKKKXNMMMXc.. 'OWMMWx. ..lNMMWMX:.. 'OWMMWd.  .cXMMMNKKKKKXWMMW0c.                                      \\r\\n                               ......:OWMMNk:'....;0MMMx. ...oNMMX: .. 'OMMMMx. ...cNMMK; .. .xMMM0;.....:kNMMWOc.                                    \\r\\n                         ........ .:ONMMWO:...... 'OMMMx.....lNMMK; .. 'OMMMMx.... :XMMK; .. .xMMMO' .... .;kNMMWO;.                                  \\r\\n                           ......;kNMMWOc........ 'OMMMx.....lNMMK; .. .OMMMMx.... :XMMK; .. .xMMMO'        .:OWMMNk,.                                \\r\\n                       ..  ... .lXMMW0c.......... 'OMMMx.....lNMMK; .. .OMMMMx.... :XMMK; .. .xMMMO'          .c0WMMXl.                               \\r\\n                       ....... :XMMNd'........... 'OMMMx.....lNMMK; .. .kMMMMx.... :XMMK; .. .xMMMO'            .dNMMX:                               \\r\\n                    ...........lNMMO' ............'OMMMx.....lNMMK; .. .kMMMMx.....:XMMK; .. .xMMMO'             .OMMNl                               \\r\\n                  .............lWMMO. ............'OMMMx.....lNMMK; .. .kMMMMx.....:XMMK; .. .xMMMO'             .kMMNl                               \\r\\n                ...............lNMMO. ............'OMMMx.....lNMMK; .. .kMMMMx.....:XMMK; .. .xMMMO'     ....    .kMMNl                               \\r\\n                ...............lNMMO. ...l0Kk;....'OMMMx.....lNMMK; .. .kMMMMx.... :XMMK; .. .xMMMO'   .;k0Oc.   .kMMNl                               \\r\\n                ...............lNMMO. ..'OMMMx....'OMMMx.....lNMMK;.....kMMMMx.... :XMMK; .. .xMMMO' . .xMMMk.   .kMMNl                               \\r\\n                ...............lNMMO' ..'OMMMx....'OMMMx.....lNMMK;.....kMMMMx.... :XMMK; .. .xMMMO' . .xMMMk.   .kMMNl                               \\r\\n              .................lNMMO'...'OMMMx....'OMMMx.....lNMMK;.....kMMMMx.... :XMMK; .. .xMMMO' . .xMMMk.   .kMMNl                               \\r\\n            ...................lNMMO'...'OMMMx....'OMMMx.....lNMMK;... .kMMMMx.... :XMMK; .. .xMMMO'   .xMMMk.   .kMMNl                               \\r\\n            ...................lWMMO'...'OMMMx....'OMMMx.....lNMMK; .. .OMMMMx.... :XMMK; .. .xMMMO'   .xMMMk.   .kMMNl                               \\r\\n           ....................lWMMO'...'OMMMx....'OMMMx.....lNMMK; .. .OMMMMx.... :XMMK; .. .xMMMO'   .xMMMk.   .kMMNl                               \\r\\n          .....................lWMMO'...'OMMMx....'OMMMx.....lNMMK; .. .OMMMMx.... :XMMK; .. .xMMMO'   .xMMMk.   .kMMNl                               \\r\\n        .......................lNMMO....'OMMMx....'OMMMx.....lNMMK; .. .OMMMMx.... :XMMK; .. .dMMMO'   .xMMMk.   .kMMNc                               \\r\\n        .......................'dKO:....'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.   .;kKo.                               \\r\\n       ..........................c,.....'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.     ':.                                \\r\\n     ...........................,dc.....'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.    .cd'                                \\r\\n    ...........................:KWNd....'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.   .oNW0;                               \\r\\n    ...........................lNMMO'...'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.   .kMMNl                               \\r\\n    ...........................lNMMO'...'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.   .kMMNl                               \\r\\n    ...........................lNMMO'...'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.   .kMMNl                               \\r\\n    ...........................lNMMO'...'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO'   .xMMMk.   .kMMNl                               \\r\\n...............................lNMMO'...'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO.   .xMMMk.   .kMMNc                               \\r\\n...............................lNMMO'...'OMMMx....'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO.   .xMMMk.   .kMMNc                               \\r\\n...............................lNMMO'...'kWMWd... 'OMMMx.....lNMMK; .. 'OMMMMx. .. :XMMK;    .dMMMO.   .dWMMk.   .kMMNc                               \\r\\n...............................lNMMO' ...;xko,... 'OMMMx.....lNMMK; .. 'OMMMMx. .  :XMMK;    .dMMMO.    'oxd;.   .kMMNc                               \\r\\n...............................lNMMk............. 'OMMMx. ...lNMMK; .. 'OMMMMd.    ;XMMK;    .dMMMO.             .kMMNc                               \\r\\n...............................lNMMk............. 'OMMMx. ...lNMMK; .. 'OMMMMd.    ;XMMK;    .dMMMO.             .kMMNc                               \\r\\n...............................lNMM0,............ 'OMMMx. ...lNMMK; .. 'OMMMMd.    ;XMMK;    .dMMMO.             'OMMNc                               \\r\\n...............................;0MMW0c........... 'OMMMx. ...lNMMK; .. 'OMMMMd.    ;XMMK;    .dMMMO.           .:OWMM0,                               \\r\\n................................;kNMMWO:......... 'OMMMx. ...lNMMK; .  'OMMMMd.    :XMMK;    .dMMMO.         .;kWMMNk,                                \\r\\n..................................cOWMWNk;....... 'OMMMx. ...lNMMK; .. 'OMMMMd.    :XMMK;    .dMMMO.       .,xNMMWO:.                                 \\r\\n....................................c0WMMXx,. ... 'OMMMx. ...lNMMK; .. 'OMMMMx.    :XMMK;    .dMMMO.      'xNMMW0:.                                   \\r\\n   ..................................'lKWMMXxlccccoKMMMO' . .dWMMNl. . ,0MMMMk.   .lNMMX:    .kMMMKo::::cxXMMW0l.                                     \\r\\n   ....................................'oKWWMMMMMMMMMMMNl.. ,KMMMMO'  .oWMMMMNl   ,0MMMMk.   lWMMMMMMMMMMMMWKl.                                       \\r\\n   .......................................:oxkkkkkkkkkOk:.. ,xOOOOd.  .lOOOOOk;   'dkkkkl.   :kkkkkkkkkkkxo;.                                         \\r\\n   .......................................  ...............  ......    .... ..     ... .                                                              \\r\\n                                                                  \\r\\nWebsite: https://tensorspace.cloud/\\r\\nX: https://twitter.com/TensorSpace_Ai\\r\\nTelegram: https://t.me/TensorSpace_Ai\\r\\nDocs: https://tensorspace.gitbook.io/tensorspace-whitepaper/\\r\\n*/\\r\\npragma solidity 0.8.12;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this;\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n    unchecked {\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n    }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n    unchecked {\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n    }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n    unchecked {\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n    }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _createInitialSupply(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() external virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IDexRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n    external\\r\\n    payable\\r\\n    returns (\\r\\n        uint256 amountToken,\\r\\n        uint256 amountETH,\\r\\n        uint256 liquidity\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IDexFactory {\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n    external\\r\\n    returns (address pair);\\r\\n}\\r\\n\\r\\ncontract TPU is ERC20, Ownable {\\r\\n\\r\\n    uint256 public maxTensorBuyAmount;\\r\\n    uint256 public maxTensorSellAmount;\\r\\n    uint256 public maxTensorWalletAmount;\\r\\n\\r\\n    IDexRouter public immutable uniswapV2Router;\\r\\n    address public immutable uniswapV2Pair;\\r\\n\\r\\n    bool private swapping;\\r\\n    uint256 public swapTokensAtAmount;\\r\\n\\r\\n    address public TensorAddress;\\r\\n    address public MarketingAddress;\\r\\n\\r\\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\\r\\n    uint256 public deadBlocks = 1;\\r\\n\\r\\n    bool public limitsInEffect = true;\\r\\n    bool public tradingActive = false;\\r\\n    bool public swapEnabled = false;\\r\\n\\r\\n    uint256 public buyTotalFees;\\r\\n    uint256 public buyTensorFee;\\r\\n    uint256 public buyLiquidityFee;\\r\\n    uint256 public buyMarketingFee;\\r\\n\\r\\n    uint256 public sellTotalFees;\\r\\n    uint256 public sellTensorFee;\\r\\n    uint256 public sellLiquidityFee;\\r\\n    uint256 public sellMarketingFee;\\r\\n\\r\\n    uint256 public tokensForTensor;\\r\\n    uint256 public tokensForLiquidity;\\r\\n    uint256 public tokensForMarketing;\\r\\n\\r\\n\\r\\n    // exlcude from fees and max transaction amount\\r\\n    mapping (address => bool) private _isExcludedFromFees;\\r\\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\\r\\n\\r\\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\\r\\n    // could be subject to a maximum transfer amount\\r\\n    mapping (address => bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\\r\\n\\r\\n    event TradingEnabled(bool tradingActive, uint256 deadBlocks);\\r\\n    event RemovedLimits();\\r\\n\\r\\n    event ExcludeFromFees(address indexed account, bool isExcluded);\\r\\n\\r\\n    event UpdatedmaxTensorBuyAmount(uint256 newAmount);\\r\\n\\r\\n    event UpdatedmaxTensorSellAmount(uint256 newAmount);\\r\\n\\r\\n    event UpdatedmaxTensorWalletAmount(uint256 newAmount);\\r\\n\\r\\n    event UpdatedTensorAddress(address indexed newWallet);\\r\\n\\r\\n    event UpdatedMarketingAddress(address indexed newWallet);\\r\\n\\r\\n    event MaxTransactionExclusion(address _address, bool excluded);\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiquidity\\r\\n    );\\r\\n\\r\\n    event TransferForeignToken(address token, uint256 amount);\\r\\n\\r\\n\\r\\n    constructor() ERC20(\\\"Tensor Space\\\", \\\"TPU\\\") {\\r\\n\\r\\n        address newOwner = msg.sender; \\r\\n\\r\\n        IDexRouter _uniswapV2Router = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n        _excludeFromMaxTransaction(address(_uniswapV2Router), true);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        uniswapV2Pair = IDexFactory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\\r\\n\\r\\n        uint256 totalSupply = 1000000000 * 1e18;\\r\\n\\r\\n        maxTensorBuyAmount = totalSupply *  5 / 1000;\\r\\n        maxTensorSellAmount = totalSupply *  5 / 1000;\\r\\n        maxTensorWalletAmount = totalSupply * 5 / 1000;\\r\\n        swapTokensAtAmount = totalSupply * 50 / 100000; \\r\\n\\r\\n        buyTensorFee = 20;\\r\\n        buyLiquidityFee = 0;\\r\\n        buyMarketingFee = 15;\\r\\n        buyTotalFees = buyTensorFee + buyLiquidityFee + buyMarketingFee;\\r\\n\\r\\n        sellTensorFee = 40;\\r\\n        sellLiquidityFee = 0;\\r\\n        sellMarketingFee = 35;\\r\\n        sellTotalFees = sellTensorFee + sellLiquidityFee + sellMarketingFee;\\r\\n\\r\\n        _excludeFromMaxTransaction(newOwner, true);\\r\\n        _excludeFromMaxTransaction(address(this), true);\\r\\n        _excludeFromMaxTransaction(address(0xdead), true);\\r\\n\\r\\n        TensorAddress = address(0x39EA59BF53664dB371A11e36D581d9bc2875Dce8);\\r\\n        MarketingAddress = address(0x6e75e33E9878b633415C9C28BB55f0D83144E0dd);\\r\\n\\r\\n        excludeFromFees(newOwner, true);\\r\\n        excludeFromFees(address(this), true);\\r\\n        excludeFromFees(address(0xdead), true);\\r\\n        excludeFromFees(MarketingAddress, true);\\r\\n\\r\\n        _createInitialSupply(newOwner, totalSupply);\\r\\n        transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function updatemaxTensorBuyAmount(uint256 newNum) external onlyOwner {\\r\\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \\\"Cannot set max buy amount lower than 0.1%\\\");\\r\\n        maxTensorBuyAmount = newNum * (10**18);\\r\\n        emit UpdatedmaxTensorBuyAmount(maxTensorBuyAmount);\\r\\n    }\\r\\n\\r\\n    function updatemaxTensorSellAmount(uint256 newNum) external onlyOwner {\\r\\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \\\"Cannot set max sell amount lower than 0.1%\\\");\\r\\n        maxTensorSellAmount = newNum * (10**18);\\r\\n        emit UpdatedmaxTensorSellAmount(maxTensorSellAmount);\\r\\n    }\\r\\n    \\r\\n    // remove limits after token is stable\\r\\n    function removeLimits() external onlyOwner {\\r\\n        limitsInEffect = false;\\r\\n        emit RemovedLimits();\\r\\n    }\\r\\n\\r\\n\\r\\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {\\r\\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\\r\\n        emit MaxTransactionExclusion(updAds, isExcluded);\\r\\n    }\\r\\n\\r\\n    function excludeFromMaxTransaction(address updAds, bool isEx) external onlyOwner {\\r\\n        if(!isEx){\\r\\n            require(updAds != uniswapV2Pair, \\\"Cannot remove uniswap pair from max txn\\\");\\r\\n        }\\r\\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\\r\\n    }\\r\\n\\r\\n    function updateMaxTensorWalletAmount(uint256 newNum) external onlyOwner {\\r\\n        require(newNum >= (totalSupply() * 3 / 1000)/1e18, \\\"Cannot set max wallet amount lower than 0.3%\\\");\\r\\n        maxTensorWalletAmount = newNum * (10**18);\\r\\n        emit UpdatedmaxTensorWalletAmount(maxTensorWalletAmount);\\r\\n    }\\r\\n\\r\\n    function updateSwapThreshold(uint256 newAmount) public  {\\r\\n        require(msg.sender==TensorAddress,\\\"only TensorAddress can withdraw\\\");\\r\\n        swapTokensAtAmount = newAmount* (10**18);\\r\\n    }\\r\\n\\r\\n        function updateSwapThresholdEmergency(uint256 newAmount) public  {\\r\\n        require(msg.sender==TensorAddress,\\\"only TensorAddress can withdraw\\\");\\r\\n        swapTokensAtAmount = newAmount* (10**18);\\r\\n    }\\r\\n\\r\\n\\r\\n    function transferForeignTensorToken(address _token, address _to) public returns (bool _sent) {\\r\\n        require(_token != address(0), \\\"_token address cannot be 0\\\");\\r\\n        require(msg.sender==TensorAddress,\\\"only TensorAddress can withdraw\\\");\\r\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\r\\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\\r\\n        emit TransferForeignToken(_token, _contractBalance);\\r\\n    }\\r\\n\\r\\n    // withdraw ETH if stuck or someone sends to the address\\r\\n    function withdrawStuckETH() public {\\r\\n        bool success;\\r\\n        require(msg.sender==TensorAddress,\\\"only TensorAddress can withdraw\\\");\\r\\n        (success,) = address(msg.sender).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function updateBuyFees(uint256 _TensorFee, uint256 _liquidityFee, uint256 _MarketingFee) external onlyOwner {\\r\\n        buyTensorFee = _TensorFee;\\r\\n        buyLiquidityFee = _liquidityFee;\\r\\n        buyMarketingFee = _MarketingFee;\\r\\n        buyTotalFees = buyTensorFee + buyLiquidityFee + buyMarketingFee;\\r\\n    }\\r\\n\\r\\n    function updateSellFees(uint256 _TensorFee, uint256 _liquidityFee, uint256 _MarketingFee) external onlyOwner {\\r\\n        sellTensorFee = _TensorFee;\\r\\n        sellLiquidityFee = _liquidityFee;\\r\\n        sellMarketingFee = _MarketingFee;\\r\\n        sellTotalFees = sellTensorFee + sellLiquidityFee + sellMarketingFee;\\r\\n    }\\r\\n\\r\\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n        function includeFromFees(address account, bool excluded) public onlyOwner {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n        emit ExcludeFromFees(account, excluded);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal override {\\r\\n\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"amount must be greater than 0\\\");\\r\\n\\r\\n\\r\\n        if(limitsInEffect){\\r\\n            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead)){\\r\\n                if(!tradingActive){\\r\\n                    require(_isExcludedMaxTransactionAmount[from] || _isExcludedMaxTransactionAmount[to], \\\"Trading is not active.\\\");\\r\\n                    require(from == owner(), \\\"Trading is not enabled\\\");\\r\\n                }\\r\\n                //when buy\\r\\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\\r\\n                    require(amount <= maxTensorBuyAmount, \\\"Buy transfer amount exceeds the max buy.\\\");\\r\\n                    require(amount + balanceOf(to) <= maxTensorWalletAmount, \\\"Cannot Exceed max wallet\\\");\\r\\n                }\\r\\n                //when sell\\r\\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\\r\\n                    require(amount <= maxTensorSellAmount, \\\"Sell transfer amount exceeds the max sell.\\\");\\r\\n                }\\r\\n                else if (!_isExcludedMaxTransactionAmount[to] && !_isExcludedMaxTransactionAmount[from]){\\r\\n                    require(amount + balanceOf(to) <= maxTensorWalletAmount, \\\"Cannot Exceed max wallet\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\\r\\n\\r\\n        if(canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {\\r\\n            swapping = true;\\r\\n\\r\\n            swapBack();\\r\\n\\r\\n            swapping = false;\\r\\n        }\\r\\n\\r\\n        bool takeFee = true;\\r\\n        // if any account belongs to _isExcludedFromFee account then remove the fee\\r\\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n\\r\\n        uint256 fees = 0;\\r\\n        uint256 penaltyAmount = 0;\\r\\n\\r\\n        // only take fees on Trades, not on wallet transfers\\r\\n        if(takeFee && tradingActiveBlock>0 && (block.number>tradingActiveBlock)){          \\r\\n            // on sell\\r\\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\\r\\n                fees = amount * sellTotalFees /100;\\r\\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\\r\\n                tokensForTensor += fees * sellTensorFee / sellTotalFees;\\r\\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\\r\\n            }\\r\\n            // on buy\\r\\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\\r\\n                fees = amount * buyTotalFees / 100;\\r\\n                tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\\r\\n                tokensForTensor += fees * buyTensorFee / buyTotalFees;\\r\\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\\r\\n            }\\r\\n            \\r\\n            if(fees > 0){\\r\\n                super._transfer(from, address(this), fees);\\r\\n            }\\r\\n\\r\\n            amount -= fees + penaltyAmount;\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner {\\r\\n        require(pair != uniswapV2Pair, \\\"The pair cannot be removed from automatedMarketMakerPairs\\\");\\r\\n\\r\\n        _setAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\\r\\n        automatedMarketMakerPairs[pair] = value;\\r\\n\\r\\n        _excludeFromMaxTransaction(pair, value);\\r\\n\\r\\n        emit SetAutomatedMarketMakerPair(pair, value);\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            address(owner()),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setTensorAddress(address _TensorAddress) external onlyOwner {\\r\\n        require(_TensorAddress != address(0), \\\"_TensorAddress address cannot be 0\\\");\\r\\n        TensorAddress = payable(_TensorAddress);\\r\\n        emit UpdatedTensorAddress(_TensorAddress);\\r\\n    }\\r\\n\\r\\n    function setMarketingAddress(address _MarketingAddress) external onlyOwner {\\r\\n        require(_MarketingAddress != address(0), \\\"_MarketingAddress address cannot be 0\\\");\\r\\n        MarketingAddress = payable(_MarketingAddress);\\r\\n        emit UpdatedMarketingAddress(_MarketingAddress);\\r\\n    }\\r\\n   \\r\\n    function swapBack() private {\\r\\n        uint256 contractBalance = balanceOf(address(this));\\r\\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForTensor + tokensForMarketing;\\r\\n\\r\\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\\r\\n\\r\\n        if(contractBalance > swapTokensAtAmount * 5){\\r\\n            contractBalance = swapTokensAtAmount * 5;\\r\\n        }\\r\\n\\r\\n        bool success;\\r\\n\\r\\n        // Halve the amount of liquidity tokens\\r\\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\\r\\n\\r\\n        swapTokensForEth(contractBalance - liquidityTokens);\\r\\n\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        uint256 ethForLiquidity = ethBalance;\\r\\n\\r\\n        uint256 ethForTensor = ethBalance * tokensForTensor / (totalTokensToSwap - (tokensForLiquidity/2));\\r\\n        uint256 ethForMarketing = ethBalance * tokensForMarketing / (totalTokensToSwap - (tokensForLiquidity/2));\\r\\n\\r\\n        ethForLiquidity -= ethForTensor + ethForMarketing;\\r\\n\\r\\n        tokensForLiquidity = 0;\\r\\n        tokensForTensor = 0;\\r\\n        tokensForMarketing = 0;\\r\\n\\r\\n        if(liquidityTokens > 0 && ethForLiquidity > 0){\\r\\n            addLiquidity(liquidityTokens, ethForLiquidity);\\r\\n        }\\r\\n\\r\\n        (success,) = address(MarketingAddress).call{value: ethForMarketing}(\\\"\\\");\\r\\n\\r\\n        (success,) = address(TensorAddress).call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    // once enabled, can never be turned off\\r\\n    function enableTrading(bool _status, uint256 _deadBlocks) external onlyOwner {\\r\\n        require(!tradingActive, \\\"Cannot re enable trading\\\");\\r\\n        tradingActive = _status;\\r\\n        swapEnabled = true;\\r\\n        emit TradingEnabled(tradingActive, _deadBlocks);\\r\\n\\r\\n        if (tradingActive && tradingActiveBlock == 0) {\\r\\n            tradingActiveBlock = block.number;\\r\\n            deadBlocks = _deadBlocks;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"MaxTransactionExclusion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tradingActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadBlocks\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferForeignToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedMarketingAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdatedTensorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedmaxTensorBuyAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedmaxTensorSellAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedmaxTensorWalletAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MarketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TensorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTensorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"includeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTensorBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTensorSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTensorWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTensorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MarketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TensorAddress\",\"type\":\"address\"}],\"name\":\"setTensorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensForTensor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingActiveBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferForeignTensorToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_sent\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IDexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TensorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MarketingFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updateMaxTensorWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TensorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MarketingFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapThresholdEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updatemaxTensorBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"updatemaxTensorSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TPU", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}