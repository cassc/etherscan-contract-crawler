{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n// Copyright (C) 2021 Dai Foundation\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n// VoteDelegate - delegate your vote\r\npragma solidity 0.6.12;\r\n\r\ninterface TokenLike {\r\n    function approve(address, uint256) external returns (bool);\r\n    function pull(address, uint256) external;\r\n    function push(address, uint256) external;\r\n}\r\n\r\ninterface ChiefLike {\r\n    function GOV() external view returns (TokenLike);\r\n    function IOU() external view returns (TokenLike);\r\n    function lock(uint256) external;\r\n    function free(uint256) external;\r\n    function vote(address[] calldata) external returns (bytes32);\r\n    function vote(bytes32) external;\r\n}\r\n\r\ninterface PollingLike {\r\n    function withdrawPoll(uint256) external;\r\n    function vote(uint256, uint256) external;\r\n    function withdrawPoll(uint256[] calldata) external;\r\n    function vote(uint256[] calldata, uint256[] calldata) external;\r\n}\r\n\r\ncontract VoteDelegate {\r\n    mapping(address => uint256) public stake;\r\n    address     public immutable delegate;\r\n    TokenLike   public immutable gov;\r\n    TokenLike   public immutable iou;\r\n    ChiefLike   public immutable chief;\r\n    PollingLike public immutable polling;\r\n    uint256     public immutable expiration;\r\n\r\n    event Lock(address indexed usr, uint256 wad);\r\n    event Free(address indexed usr, uint256 wad);\r\n\r\n    constructor(address _chief, address _polling, address _delegate) public {\r\n        chief = ChiefLike(_chief);\r\n        polling = PollingLike(_polling);\r\n        delegate = _delegate;\r\n        expiration = block.timestamp + 365 days;\r\n\r\n        TokenLike _gov = gov = ChiefLike(_chief).GOV();\r\n        TokenLike _iou = iou = ChiefLike(_chief).IOU();\r\n\r\n        _gov.approve(_chief, type(uint256).max);\r\n        _iou.approve(_chief, type(uint256).max);\r\n    }\r\n\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"VoteDelegate/add-overflow\");\r\n    }\r\n\r\n    modifier delegate_auth() {\r\n        require(msg.sender == delegate, \"VoteDelegate/sender-not-delegate\");\r\n        _;\r\n    }\r\n\r\n    modifier live() {\r\n        require(block.timestamp < expiration, \"VoteDelegate/delegation-contract-expired\");\r\n        _;\r\n    }\r\n\r\n    function lock(uint256 wad) external live {\r\n        stake[msg.sender] = add(stake[msg.sender], wad);\r\n        gov.pull(msg.sender, wad);\r\n        chief.lock(wad);\r\n        iou.push(msg.sender, wad);\r\n\r\n        emit Lock(msg.sender, wad);\r\n    }\r\n\r\n    function free(uint256 wad) external {\r\n        require(stake[msg.sender] >= wad, \"VoteDelegate/insufficient-stake\");\r\n\r\n        stake[msg.sender] -= wad;\r\n        iou.pull(msg.sender, wad);\r\n        chief.free(wad);\r\n        gov.push(msg.sender, wad);\r\n\r\n        emit Free(msg.sender, wad);\r\n    }\r\n\r\n    function vote(address[] memory yays) external delegate_auth live returns (bytes32 result) {\r\n        result = chief.vote(yays);\r\n    }\r\n\r\n    function vote(bytes32 slate) external delegate_auth live {\r\n        chief.vote(slate);\r\n    }\r\n\r\n    // Polling vote\r\n    function votePoll(uint256 pollId, uint256 optionId) external delegate_auth live {\r\n        polling.vote(pollId, optionId);\r\n    }\r\n\r\n    function votePoll(uint256[] calldata pollIds, uint256[] calldata optionIds) external delegate_auth live {\r\n        polling.vote(pollIds, optionIds);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chief\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_polling\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Free\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chief\",\"outputs\":[{\"internalType\":\"contract ChiefLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iou\",\"outputs\":[{\"internalType\":\"contract TokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polling\",\"outputs\":[{\"internalType\":\"contract PollingLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slate\",\"type\":\"bytes32\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"yays\",\"type\":\"address[]\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pollIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"optionIds\",\"type\":\"uint256[]\"}],\"name\":\"votePoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optionId\",\"type\":\"uint256\"}],\"name\":\"votePoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VoteDelegate", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a3f6849f78076aefadf113f5bed87720274ddc0000000000000000000000000d3a9fe267852281a1e6307a1c37cdfd76d39b133000000000000000000000000dc1f98682f4f8a5c6d54f345f448437b83f5e432", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://50aec0f24081032eeea71f5eb8e1b14b320c7acf1fc482c4b3803efa91704fc9"}