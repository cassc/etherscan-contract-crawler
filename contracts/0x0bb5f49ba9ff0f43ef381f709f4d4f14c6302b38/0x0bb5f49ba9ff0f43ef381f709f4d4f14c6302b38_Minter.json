{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 5000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@layerzerolabs/lz-evm-oapp-v2/contracts/standards/oft/interfaces/IOFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport {MessagingFee, MessagingReceipt} from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n// @dev unable to inherit ERC20 because the OFTAdapter needs to use this interface as well\\ninterface IOFT {\\n    struct SendParam {\\n        bytes32 to;\\n        uint amountLD;\\n        uint minAmountLD;\\n        uint32 dstEid;\\n    }\\n\\n    error LDMinusSD();\\n    error AmountSlippage(uint _amountLDSend, uint256 _minAmountLD);\\n\\n    event SetInspector(address _inspector);\\n    event SendOFT(bytes32 indexed _guid, address indexed _fromAddress, uint _amountLD, bytes _composeMsg);\\n    event ReceiveOFT(bytes32 indexed _guid, address indexed _toAddress, uint _amountLD);\\n\\n    function token() external view returns (address);\\n\\n    function quoteSendFee(\\n        SendParam calldata _send,\\n        bytes calldata _options,\\n        bool _useLZToken,\\n        bytes calldata _composeMsg\\n    ) external view returns (uint nativeFee, uint lzTokenFee);\\n\\n    function send(\\n        SendParam calldata _send,\\n        bytes calldata _options,\\n        MessagingFee calldata _msgFee,\\n        address payable _refundAddress,\\n        bytes calldata _composeMsg\\n    ) external payable returns (MessagingReceipt memory);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/MessagingStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nstruct PacketForQuote {\\n    address sender;\\n    uint32 dstEid;\\n    bytes message;\\n}\\n\\nstruct Packet {\\n    uint64 nonce;\\n    uint32 srcEid;\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes32 guid;\\n    bytes message;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IMessageLibManager.sol\\\";\\nimport \\\"./IMessagingComposer.sol\\\";\\nimport \\\"./IMessagingChannel.sol\\\";\\nimport \\\"./IMessagingContext.sol\\\";\\nimport {Origin} from \\\"../MessagingStructs.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint nativeFee;\\n    uint lzTokenFee;\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketDelivered(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketReceived(Origin origin, address receiver);\\n\\n    event LzReceiveFailed(Origin origin, address receiver, bytes reason);\\n\\n    event LayerZeroTokenSet(address token);\\n\\n    function quote(\\n        address _sender,\\n        uint32 _dstEid,\\n        bytes calldata _message,\\n        bool _payInLzToken,\\n        bytes calldata _options\\n    ) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function sendWithAlt(\\n        MessagingParams calldata _params,\\n        uint _lzTokenFee,\\n        uint _altTokenFee\\n    ) external returns (MessagingReceipt memory);\\n\\n    function deliver(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function deliverable(Origin calldata _origin, address _receiveLib, address _receiver) external view returns (bool);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are delivered in order\\n    function clear(Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLayerZeroToken(address _layerZeroToken) external;\\n\\n    function layerZeroToken() external view returns (address);\\n\\n    function altFeeToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimoutSet(address receiver, uint32 eid, address oldLib, uint timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function defaultConfig(address _lib, uint32 _eid, uint32 _configType) external view returns (bytes memory);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(uint32 _eid, address _newLib, uint _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(uint32 _eid, address _lib, uint _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint expiry);\\n\\n    function setConfig(address _lib, uint32 _eid, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config, bool isDefault);\\n\\n    function snapshotConfig(address _lib, uint32[] calldata _eids) external;\\n\\n    function resetConfig(address _lib, uint32[] calldata _eids) external;\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message can not be delivered for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n\\n    function hasPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposedMessageDelivered(address receiver, address composer, bytes32 guid, bytes message);\\n    event ComposedMessageReceived(address receiver, address composer, bytes32 guid);\\n    event LzComposeFailed(address receiver, address composer, bytes32 guid, bytes reason);\\n\\n    function deliverComposedMessage(address _composer, bytes32 _guid, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _receiver,\\n        address _composer,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable returns (bool, bytes memory);\\n}\\n\"\r\n    },\r\n    \"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32, address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/integration/mm/Minter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/standards/oft/interfaces/IOFT.sol\\\";\\n\\nimport {IUSDV} from \\\"../../usdv/interfaces/IUSDV.sol\\\";\\nimport {IMinter} from \\\"./interfaces/IMinter.sol\\\";\\nimport {IMinterProxy} from \\\"./interfaces/IMinterProxy.sol\\\";\\nimport {IToSTBTLp} from \\\"./interfaces/IToSTBTLp.sol\\\";\\nimport {IVaultManager} from \\\"../../vault/interfaces/IVaultManager.sol\\\";\\n\\ncontract Minter is IMinter, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint8 internal constant USDV_DECIMALS = 6;\\n\\n    IVaultManager public immutable vault;\\n    address public immutable minterProxy;\\n    uint public immutable usdv2stbtRate;\\n\\n    address public immutable stbt;\\n    address public immutable usdv;\\n\\n    mapping(address toSTBTLp => mapping(address fromToken => bool)) public approved;\\n    mapping(address => bool) public blacklisted;\\n\\n    uint32 public color;\\n    uint16 public rewardToUserBps;\\n\\n    constructor(uint32 _color, address _stbt, address _vault, address _minterProxy) {\\n        stbt = _stbt;\\n        usdv = IMinterProxy(_minterProxy).usdv();\\n\\n        IUSDV(usdv).setDefaultColor(address(this), _color);\\n        color = _color;\\n\\n        minterProxy = _minterProxy;\\n\\n        vault = IVaultManager(_vault);\\n        IERC20(_stbt).safeApprove(_vault, type(uint).max); // to support mint\\n        (, usdv2stbtRate, ) = vault.assetInfoOf(_stbt);\\n    }\\n\\n    // ------------------ modifier ------------------\\n    modifier onlyMinterProxy() {\\n        if (msg.sender != minterProxy) revert OnlyMinterProxy();\\n        _;\\n    }\\n\\n    modifier notBlacklisted(address _user) {\\n        if (blacklisted[_user]) revert Blacklisted();\\n        _;\\n    }\\n\\n    // ------------------ onlyOwner ------------------\\n    /// @dev to support swapToSTBT, only max approves\\n    function approve(address _toSTBTLp, address[] calldata _tokens) external onlyOwner {\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (!approved[_toSTBTLp][token]) {\\n                approved[_toSTBTLp][token] = true;\\n                IERC20(token).safeApprove(_toSTBTLp, type(uint).max);\\n                emit ApprovedToken(_toSTBTLp, token);\\n            }\\n        }\\n    }\\n\\n    function disapprove(address _toSTBTLp, address[] calldata _tokens) external onlyOwner {\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            if (approved[_toSTBTLp][token]) {\\n                approved[_toSTBTLp][token] = false;\\n                IERC20(token).safeApprove(_toSTBTLp, 0);\\n                emit DisapprovedToken(_toSTBTLp, token);\\n            }\\n        }\\n    }\\n\\n    function blacklist(address _user, bool _isBlacklisted) external onlyOwner {\\n        blacklisted[_user] = _isBlacklisted;\\n        emit BlacklistedUser(_user, _isBlacklisted);\\n    }\\n\\n    function setRewardToUserBps(uint16 _rewardToUserBps) external onlyOwner {\\n        rewardToUserBps = _rewardToUserBps;\\n        emit SetRewardToUserBps(_rewardToUserBps);\\n    }\\n\\n    function withdrawToken(address _token, address _to, uint _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(_to, _amount);\\n        emit WithdrawToken(_token, _to, _amount);\\n    }\\n\\n    // ------------------ external ------------------\\n    function swapToUSDV(\\n        address _sender,\\n        address _toSTBTLp,\\n        SwapParam calldata _param,\\n        address _usdvReceiver\\n    ) external notBlacklisted(_sender) onlyMinterProxy returns (uint usdvOut) {\\n        usdvOut = _swapToUSDV(_toSTBTLp, _param.fromToken, _param.fromTokenAmount, _param.minUSDVOut, _usdvReceiver);\\n    }\\n\\n    function swapToUSDVAndSend(\\n        address _sender,\\n        address _toSTBTLp,\\n        SwapParam calldata _param,\\n        bytes32 _usdvReceiver,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        MessagingFee calldata _msgFee,\\n        address payable _refundAddress\\n    ) external payable notBlacklisted(_sender) onlyMinterProxy returns (uint usdvOut) {\\n        usdvOut = _swapToUSDV(_toSTBTLp, _param.fromToken, _param.fromTokenAmount, _param.minUSDVOut, address(this));\\n        IUSDV(usdv).send{value: msg.value}(\\n            IOFT.SendParam(_usdvReceiver, usdvOut, usdvOut, _dstEid),\\n            _extraOptions,\\n            _msgFee,\\n            _refundAddress,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    // ------------------ view ------------------\\n    /// @dev get supported tokens of lpToSTBT and filter out unapproved tokens\\n    function getSupportedFromTokens(address _toSTBTLp) external view returns (address[] memory tokens) {\\n        tokens = IToSTBTLp(_toSTBTLp).getSupportedTokens();\\n\\n        uint index = 0;\\n        for (uint i = 0; i < tokens.length; i++) {\\n            if (approved[_toSTBTLp][tokens[i]]) {\\n                tokens[index++] = tokens[i]; // index strictly smaller or equals to i, in place update\\n            }\\n        }\\n        assembly {\\n            mstore(tokens, index)\\n        }\\n    }\\n\\n    function getSwapToUSDVAmountOut(\\n        address _toSTBTLp,\\n        address _fromToken,\\n        uint _fromTokenAmount\\n    ) external view returns (uint usdvOut) {\\n        // get requested and reward amount\\n        (uint stbtOut, uint rewardOut) = IToSTBTLp(_toSTBTLp).getSwapToSTBTAmountOut(_fromToken, _fromTokenAmount);\\n        // apply reward\\n        if (rewardOut > 0) {\\n            uint rewardToUser = (rewardOut * rewardToUserBps) / 10000; // e.g. get 5bps reward. if push 1bps to users, the rewardToUserBps = 2000\\n            stbtOut += rewardToUser;\\n        }\\n        // convert to usdv\\n        usdvOut = stbtOut / usdv2stbtRate;\\n        if (usdvOut > type(uint64).max) revert ExceedsUInt64();\\n    }\\n\\n    function getSwapToUSDVAmountOutVerbose(\\n        address _toSTBTLp,\\n        address _fromToken,\\n        uint _fromTokenAmount\\n    ) external view returns (uint usdvOut, uint fee, uint reward) {\\n        uint8 tokenDecimals = IERC20Metadata(_fromToken).decimals();\\n        require(tokenDecimals >= USDV_DECIMALS, \\\"BridgeRecolor: token decimals must >= 6\\\");\\n        uint usdvRequested = _fromTokenAmount / (10 ** (tokenDecimals - USDV_DECIMALS));\\n\\n        // get swapped and reward amount\\n        (uint requestedSTBTOut, uint rewardSTBTOut) = IToSTBTLp(_toSTBTLp).getSwapToSTBTAmountOut(\\n            _fromToken,\\n            _fromTokenAmount\\n        );\\n        usdvOut = requestedSTBTOut / usdv2stbtRate;\\n        // fee charged by lp\\n        fee = usdvRequested - usdvOut;\\n\\n        // apply reward\\n        if (rewardSTBTOut > 0) {\\n            reward = (rewardSTBTOut * rewardToUserBps) / 10000 / usdv2stbtRate; // reward to user\\n            usdvOut += reward; // e.g. get 5bps reward. if push 1bps to users, the rewardToUserBps = 2000\\n        }\\n        if (usdvOut > type(uint64).max) revert ExceedsUInt64();\\n    }\\n\\n    // ------------------ internal ------------------\\n    function _swapToUSDV(\\n        address _toSTBTLp,\\n        address _fromToken,\\n        uint _fromTokenAmount,\\n        uint64 _minUSDVOut,\\n        address _usdvReceiver\\n    ) internal returns (uint usdvOut) {\\n        if (!approved[_toSTBTLp][_fromToken]) revert TokenNotSupported();\\n\\n        uint minSTBTOut = _minUSDVOut * usdv2stbtRate;\\n        // get requested and reward amount\\n        (uint stbtOut, uint rewardOut) = IToSTBTLp(_toSTBTLp).swapToSTBT(_fromToken, _fromTokenAmount, minSTBTOut);\\n        // apply reward\\n        if (rewardOut > 0) {\\n            uint rewardToUser = (rewardOut * rewardToUserBps) / 10000; // e.g. get 5bps reward. if push 1bps to users, the rewardToUserBps = 2000\\n            stbtOut += rewardToUser;\\n        }\\n        // check slippage\\n        if (stbtOut < minSTBTOut) revert SlippageTooHigh();\\n        // convert to usdv\\n        usdvOut = stbtOut / usdv2stbtRate;\\n        if (usdvOut > type(uint64).max) revert ExceedsUInt64();\\n        // mint requested to user and leave stbt reward in vault\\n        vault.mint(stbt, _usdvReceiver, uint64(usdvOut), color, \\\"\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/integration/mm/interfaces/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport {MessagingFee} from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\ninterface IMinter {\\n    struct SwapParam {\\n        address fromToken;\\n        uint fromTokenAmount;\\n        uint64 minUSDVOut;\\n    }\\n\\n    error OnlyMinterProxy();\\n    error SlippageTooHigh();\\n    error ExceedsUInt64();\\n    error Blacklisted();\\n    error TokenNotSupported();\\n\\n    event ApprovedToken(address toSTBTLp, address token);\\n    event DisapprovedToken(address toSTBTLp, address token);\\n    event BlacklistedUser(address user, bool blacklisted);\\n    event SetRewardToUserBps(uint16 bps);\\n    event WithdrawToken(address token, address to, uint amount);\\n\\n    function swapToUSDV(\\n        address _sender,\\n        address _toSTBTLp,\\n        SwapParam calldata _param,\\n        address _usdvReceiver\\n    ) external returns (uint usdvOut);\\n\\n    function swapToUSDVAndSend(\\n        address _sender,\\n        address _toSTBTLp,\\n        SwapParam calldata _param,\\n        bytes32 _usdvReceiver,\\n        uint32 _dstEid,\\n        bytes calldata _extraOptions,\\n        MessagingFee calldata _msgFee,\\n        address payable _refundAddress\\n    ) external payable returns (uint usdvOut);\\n\\n    function getSwapToUSDVAmountOut(\\n        address _toSTBTLp,\\n        address _fromToken,\\n        uint _fromTokenAmount\\n    ) external view returns (uint usdvOut);\\n\\n    function getSwapToUSDVAmountOutVerbose(\\n        address _toSTBTLp,\\n        address _fromToken,\\n        uint _fromTokenAmount\\n    ) external view returns (uint usdvOut, uint fee, uint reward);\\n\\n    function getSupportedFromTokens(address _lp) external view returns (address[] memory tokens);\\n\\n    function color() external view returns (uint32);\\n\\n    function minterProxy() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/integration/mm/interfaces/IMinterProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMinterProxy {\\n    error InvalidMinter();\\n    error MinterAlreadyRegistered();\\n    error MinterNotRegistered(uint32 color);\\n    error HashExists();\\n    error HashNotExists();\\n\\n    event RegisteredMinter(address minter, uint32 color);\\n    event UnregisteredMinter(address minter, uint32 color);\\n    event SetToSTBTLp(address toSTBTLp);\\n    event AddedMinterCodeHash(uint hash);\\n    event RemovedMinterCodeHash(uint hash);\\n\\n    function isRegistered(address _addr) external view returns (bool);\\n\\n    function toSTBTLp() external view returns (address);\\n\\n    function usdv() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/integration/mm/interfaces/IToSTBTLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// lp contract for converting other stable coins to STBT\\ninterface IToSTBTLp {\\n    function getSupportedTokens() external view returns (address[] memory tokens);\\n\\n    function swapToSTBT(\\n        address _fromToken,\\n        uint _fromTokenAmount,\\n        uint _minStbtOut\\n    ) external returns (uint requestedOut, uint rewardOut);\\n\\n    function getSwapToSTBTAmountOut(\\n        address _fromToken,\\n        uint _fromTokenAmount\\n    ) external view returns (uint requestedOut, uint rewardOut);\\n}\\n\"\r\n    },\r\n    \"contracts/usdv/interfaces/IUSDV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/standards/oft/interfaces/IOFT.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nstruct Delta {\\n    uint32 color;\\n    int64 amount;\\n}\\n\\nstruct State {\\n    uint32 color;\\n    uint64 balance;\\n    // config\\n    bool blacklisted;\\n    uint32 defaultColor;\\n}\\n\\nenum Role {\\n    OWNER,\\n    OPERATOR,\\n    VAULT,\\n    MESSAGING,\\n    FOUNDATION\\n}\\n\\ninterface IUSDV is IOFT, IERC20Upgradeable {\\n    error Unauthorized();\\n    error InvalidUser();\\n    error InvalidArgument();\\n    error NotImplemented();\\n    error InsufficientBalance();\\n    error Paused();\\n    error Blacklisted();\\n    error FeeTooHigh();\\n\\n    // role assigment\\n    event SetRole(Role role, address addr);\\n    event SetColorer(address indexed caller, address indexed user, address colorer);\\n    event SetDefaultColor(address indexed caller, address indexed user, uint32 defaultColor);\\n    // governance state\\n    event SetBlacklist(address indexed user, bool isBlacklisted);\\n    event SetPause(bool paused);\\n    // cross-chain events\\n    event Synced(bytes32 guid, Delta[] deltas);\\n\\n    function mint(address _receiver, uint64 _amount, uint32 _color) external;\\n\\n    function burn(address _from, uint64 _amount, uint32[] calldata _delta) external returns (Delta[] memory deltas);\\n\\n    /// -------- coloring interfaces --------\\n    function setColorer(address _user, address _colorer) external;\\n\\n    function setDefaultColor(address _user, uint32 _defaultColor) external;\\n\\n    /// -------- governance interfaces --------\\n    function setPause(bool _pause) external;\\n\\n    function setRole(Role _role, address _addr) external;\\n\\n    /// -------- cross-chain interfaces (non-OFT) --------\\n    function sendAck(bytes32 _guid, address _receiver, uint32 _color, uint64 _amount, uint64 _theta) external;\\n\\n    function syncDelta(\\n        uint32 _dstEid,\\n        uint64 _theta,\\n        uint32[] calldata _deficits,\\n        uint64 _feeCap,\\n        bytes calldata _extraOptions,\\n        MessagingFee calldata _msgFee,\\n        address payable _refundAddress\\n    ) external payable returns (MessagingReceipt memory msgReceipt);\\n\\n    function syncDeltaAck(Delta[] calldata _deltas) external;\\n\\n    function quoteSyncDeltaFee(\\n        uint32 _dstEid,\\n        uint32 _numDeficits,\\n        bytes calldata _extraOptions,\\n        bool _useLzToken\\n    ) external view returns (uint nativeFee, uint lzTokenFee);\\n\\n    function userStates(\\n        address _user\\n    ) external view returns (uint32 color, uint64 balance, bool blacklisted, uint32 defaultColor);\\n}\\n\"\r\n    },\r\n    \"contracts/vault/interfaces/IVaultManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport {Delta} from \\\"../../usdv/interfaces/IUSDV.sol\\\";\\nimport \\\"../libs/Asset.sol\\\";\\n\\nenum Role {\\n    OWNER,\\n    OPERATOR,\\n    FOUNDATION,\\n    LIQUIDITY_PROVIDER,\\n    DONOR\\n}\\n\\ninterface IVaultManager {\\n    error InvalidAmount();\\n    error NotDeltaZero();\\n    error WrongSign();\\n    error InvalidArgument();\\n    error InvalidColor(uint32 color);\\n    error ColorPaused();\\n    error Unauthorized();\\n\\n    event DistributedReward(address[] token, uint[] amounts);\\n    event Minted(address indexed receiver, uint32 indexed color, uint64 amount, bytes32 memo);\\n    event Redeemed(address indexed redeemer, uint64 amount);\\n    event PendingRemint(Delta[] deltas);\\n    event WithdrewReward(address caller, address receiver, uint32 color, uint64 rewards);\\n    event WithdrewFees(address caller, address receiver, uint64 fees);\\n    event RegisteredAsset(address asset);\\n    event EnabledAsset(bool enabled);\\n    event SetRole(Role role, address addr);\\n    event SetFeeBpsCap(Role role, uint16 cap);\\n    event SetFeeBps(Role role, uint16 bps);\\n    event SetRateLimiter(address limiter);\\n    event PausedColor(uint32 color, bool paused);\\n    event SetMinter(address minter, uint32 color);\\n\\n    function assetInfoOf(\\n        address _token\\n    ) external view returns (bool enabled, uint usdvToTokenRate, uint collateralized);\\n\\n    function mint(address _token, address _receiver, uint64 _amount, uint32 _color, bytes32 _memo) external;\\n\\n    function remint(Delta[] calldata _deltas, uint64 _remintFee) external;\\n\\n    function redeem(\\n        address _token,\\n        address _receiver,\\n        uint64 _amount,\\n        uint64 _minAmount,\\n        uint32[] calldata _deficits\\n    ) external returns (uint amountAfterFee);\\n\\n    function redeemOut(address _token, uint64 _amount) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/vault/libs/Asset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Governance} from \\\"./Governance.sol\\\";\\n\\nlibrary Asset {\\n    using SafeERC20 for IERC20;\\n    using Governance for Governance.Info;\\n\\n    struct Info {\\n        IERC20 token;\\n        bool registered;\\n        bool enabled; // to allow minting\\n        uint usdvToTokenRate;\\n        // all the following values are in token amount\\n        uint collateralized;\\n    }\\n\\n    error TokenDecimalInvalid(uint provided, uint min);\\n    error Disabled();\\n    error AlreadyRegistered();\\n    error SlippageTooHigh();\\n    error NotRegistered();\\n\\n    modifier onlyRegistered(Info storage _self) {\\n        if (!_self.registered) revert NotRegistered();\\n        _;\\n    }\\n\\n    function initialize(Info storage _self, address _token, uint8 _shareDecimals) internal {\\n        if (_self.registered) revert AlreadyRegistered();\\n\\n        // set token\\n        _self.token = IERC20(_token);\\n        _self.enabled = true;\\n        _self.registered = true;\\n\\n        // set conversion rate\\n        uint8 tokenDecimals = IERC20Metadata(_token).decimals();\\n        if (_shareDecimals > tokenDecimals) {\\n            revert TokenDecimalInvalid(tokenDecimals, _shareDecimals);\\n        }\\n        _self.usdvToTokenRate = 10 ** (tokenDecimals - _shareDecimals);\\n    }\\n\\n    // @dev if _newFund is true, _from must approve the token transfer\\n    // @dev if internal mint such as turning yield into collateral, _newFund should be false\\n    function credit(Info storage _self, address _from, uint64 _usdvAmount, bool _newFund) internal {\\n        // assert the asset is enabled\\n        if (!_self.enabled) revert Disabled();\\n\\n        uint tokenAmount = _usdv2Token(_self, _usdvAmount);\\n        _self.collateralized += tokenAmount;\\n\\n        if (_newFund) {\\n            _self.token.safeTransferFrom(_from, address(this), tokenAmount);\\n        }\\n    }\\n\\n    function redeem(\\n        Info storage _self,\\n        Governance.Info storage _govInfo,\\n        address _receiver,\\n        uint64 _usdvAmount,\\n        uint64 _minUsdvAmount\\n    ) internal onlyRegistered(_self) returns (uint amountAfterFee) {\\n        uint tokenAmount = _usdv2Token(_self, _usdvAmount);\\n        _self.collateralized -= tokenAmount;\\n        // pay redemption fee\\n        amountAfterFee = _govInfo.payRedemptionFee(_self.token, tokenAmount);\\n        if (amountAfterFee < _usdv2Token(_self, _minUsdvAmount)) revert SlippageTooHigh();\\n\\n        // transfer collateral to receiver\\n        _self.token.safeTransfer(_receiver, amountAfterFee);\\n    }\\n\\n    function setEnabled(Info storage _self, bool _enabled) internal onlyRegistered(_self) {\\n        _self.enabled = _enabled;\\n    }\\n\\n    // ========================= View =========================\\n    /// @return reward in usdv\\n    function distributable(Info storage _self) internal view returns (uint) {\\n        uint rebasedFunds = _self.token.balanceOf(address(this)) - _self.collateralized;\\n        return rebasedFunds / _self.usdvToTokenRate;\\n    }\\n\\n    function redeemOutput(\\n        Info storage _self,\\n        Governance.Info storage _govInfo,\\n        uint64 _shares\\n    ) internal view returns (uint) {\\n        uint tokenAmount = _usdv2Token(_self, _shares);\\n        return tokenAmount - _govInfo.getRedemptionFee(tokenAmount);\\n    }\\n\\n    // ========================= Internal =========================\\n    function _usdv2Token(Info storage _self, uint64 _shares) private view returns (uint) {\\n        return _shares * _self.usdvToTokenRate;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vault/libs/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LZBL-1.1\\n// Copyright 2023 LayerZero Labs Ltd.\\n// You may obtain a copy of the License at\\n// https://github.com/LayerZero-Labs/license/blob/main/LICENSE-LZBL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Role} from \\\"../interfaces/IVaultManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary Governance {\\n    using SafeERC20 for IERC20;\\n\\n    uint16 internal constant ONE_HUNDRED_PERCENT = 10000; // 100%\\n    uint16 internal constant RESERVE_FEE_BPS_CAP = 300; // 3%\\n    // A % fee is applicable on yield distribution for the vault service.\\n    uint16 internal constant REDEMPTION_FEE_BPS_CAP_MIN = 10; //0.1%\\n\\n    struct Fee {\\n        uint16 bps;\\n        uint16 cap;\\n    }\\n\\n    struct Info {\\n        mapping(Role => Fee) fees;\\n        mapping(Role => address) roles;\\n        uint operatorLastPing; // timestamp\\n    }\\n\\n    event PaidRedemptionFee(address indexed to, uint amount);\\n\\n    // ========================= Operator =========================\\n    function ping(Info storage _self) internal {\\n        _self.operatorLastPing = block.timestamp;\\n    }\\n\\n    // ========================= Fees =========================\\n    function getRedemptionFee(Info storage _self, uint _amount) internal view returns (uint fee) {\\n        return (_amount * _self.fees[Role.FOUNDATION].bps) / ONE_HUNDRED_PERCENT;\\n    }\\n\\n    function payRedemptionFee(Info storage _self, IERC20 _token, uint _amount) internal returns (uint) {\\n        uint fee = getRedemptionFee(_self, _amount);\\n        // pay redemption fee to operator\\n        address _to = _self.roles[Role.OPERATOR];\\n        _token.safeTransfer(_to, fee);\\n        emit PaidRedemptionFee(_to, fee);\\n\\n        return _amount - fee;\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_color\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_stbt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minterProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Blacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsUInt64\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMinterProxy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toSTBTLp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ApprovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"BlacklistedUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toSTBTLp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"DisapprovedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"name\":\"SetRewardToUserBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toSTBTLp\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSTBTLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"}],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisted\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"color\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toSTBTLp\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"disapprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toSTBTLp\",\"type\":\"address\"}],\"name\":\"getSupportedFromTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toSTBTLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapToUSDVAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdvOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toSTBTLp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromTokenAmount\",\"type\":\"uint256\"}],\"name\":\"getSwapToUSDVAmountOutVerbose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdvOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToUserBps\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_rewardToUserBps\",\"type\":\"uint16\"}],\"name\":\"setRewardToUserBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stbt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toSTBTLp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"minUSDVOut\",\"type\":\"uint64\"}],\"internalType\":\"struct IMinter.SwapParam\",\"name\":\"_param\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_usdvReceiver\",\"type\":\"address\"}],\"name\":\"swapToUSDV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdvOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toSTBTLp\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"minUSDVOut\",\"type\":\"uint64\"}],\"internalType\":\"struct IMinter.SwapParam\",\"name\":\"_param\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_usdvReceiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_extraOptions\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"_msgFee\",\"type\":\"tuple\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"swapToUSDVAndSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdvOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdv2stbtRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVaultManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Minter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000530824da86689c9c17cdc2871ff29b058345b44a0000000000000000000000002a30e3c5c9daf417663dd3903144b394a82c999b0000000000000000000000003c6ce18afde845635a32a69d0a7721b0db84118e", "EVMVersion": "paris", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}