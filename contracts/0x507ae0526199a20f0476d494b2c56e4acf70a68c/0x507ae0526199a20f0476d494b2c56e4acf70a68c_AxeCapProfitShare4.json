{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AxeCapProfitShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AxeCapProfitShare4 {\\n    uint256 immutable public REVENUE_AMOUNT;\\n    address public owner;\\n    uint256 public totalSnapshotTokens;\\n    uint256 public snapshotTime;\\n    bool public isSnapshotLocked;\\n    bool public isFreezed; \\n\\n    mapping(address => uint256) public snapshotBalances;\\n    mapping(address => bool) public hasClaimed;\\n\\n    event AxeSnapshotLock();\\n    event AxeSnapshotUnlock();\\n    event EthClaim(address indexed claimer, uint256 amount);\\n    event AdminWithdraw(uint256 amount);\\n\\n    constructor () payable {\\n        owner = msg.sender;\\n        REVENUE_AMOUNT = msg.value;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n//  \\n    modifier after3Days() {\\n        require(block.timestamp > snapshotTime + 3 days , \\\"Can only call after 3 days of snapshot\\\");\\n        _;\\n    }\\n\\n    function uploadSnapshot(address[] calldata users, uint256[] calldata balances) external onlyOwner {\\n        require(users.length == balances.length, \\\"Arrays must be of equal length\\\");\\n        // require(users.length <= 125, \\\"Can only upload up to 125 addresses at a time\\\");\\n\\n        // note: should not have more than one user value\\n        for (uint256 i = 0; i < users.length; i++) {\\n            snapshotBalances[users[i]] += balances[i];\\n            totalSnapshotTokens += balances[i];\\n        }\\n    }\\n\\n    function lockSnapshot() external onlyOwner {\\n        require(!isSnapshotLocked, \\\"snapshot already locked\\\");\\n\\n        snapshotTime = block.timestamp;\\n        isSnapshotLocked = true;\\n\\n        emit AxeSnapshotLock();\\n    }\\n\\n    function freeze() external onlyOwner {\\n        require(!isFreezed, \\\"Contract is already frozen\\\");\\n\\n        isFreezed = true;\\n\\n        emit AxeSnapshotUnlock();\\n    }\\n\\n    function claimETH() external {\\n        require(!isFreezed, \\\"Contract is frozen\\\");\\n        require(isSnapshotLocked, \\\"Snapshot not yet locked\\\");\\n        require(!hasClaimed[msg.sender], \\\"You have already claimed your ETH\\\");\\n        require(snapshotBalances[msg.sender] > 0, \\\"You do not have any AXE tokens in the snapshot\\\");\\n\\n        uint256 claimableAmount = (REVENUE_AMOUNT * snapshotBalances[msg.sender]) / totalSnapshotTokens;\\n\\n        // prevent reentrancy\\n        hasClaimed[msg.sender] = true;\\n\\n        // see https://ethereum.stackexchange.com/questions/78124/is-transfer-still-safe-after-the-istanbul-update\\n        (bool isSuccess,) = msg.sender.call{value: claimableAmount}(\\\"\\\");\\n        require(isSuccess, \\\"Claim amount tranfer failed\\\");\\n\\n        emit EthClaim(msg.sender, claimableAmount);\\n    }\\n\\n    // Function to withdraw unclaimed ETH after 7 days\\n    function withdrawUnclaimedETH() public onlyOwner after3Days {\\n        uint256 amount = address(this).balance;\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Withdraw failed\\\");\\n        emit AdminWithdraw(amount);\\n    }\\n\\n    receive() external payable {}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AxeSnapshotLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AxeSnapshotUnlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthClaim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REVENUE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreezed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSnapshotLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"snapshotBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSnapshotTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"name\":\"uploadSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnclaimedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AxeCapProfitShare4", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}