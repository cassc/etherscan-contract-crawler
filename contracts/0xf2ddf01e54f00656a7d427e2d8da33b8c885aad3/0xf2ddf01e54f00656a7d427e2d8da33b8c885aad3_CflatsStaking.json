{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dapp-game/CflatsDappRequirements.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"./errors/CflatsDatabaseErrors.sol\\\";\\r\\nimport \\\"./ICflatsDappRequirements.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract CflatsDappRequirements is ICflatsDappRequirements, Context\\r\\n{\\r\\n    bytes32 private constant _DEFAULT_ADMIN_ROLE = 0x00;\\r\\n    ICflatsDatabase private immutable _DATABASE;\\r\\n    constructor(ICflatsDatabase database)\\r\\n    {\\r\\n        _DATABASE = database;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getDatabase() public view returns (ICflatsDatabase)\\r\\n    {\\r\\n        return _DATABASE;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    modifier onlyNotBlacklisted()\\r\\n    {\\r\\n        _requireNotBlacklisted(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin()\\r\\n    {\\r\\n        _requireNotBlacklisted(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator()\\r\\n    {\\r\\n        _requireOperator(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDeveloper()\\r\\n    {\\r\\n        _requireDeveloper(_msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function _requireAdmin(address user) private view\\r\\n    {\\r\\n        _requireNotBlacklisted(user);\\r\\n        \\r\\n        if(IAccessControl(address(_DATABASE)).hasRole(_DEFAULT_ADMIN_ROLE, user) != true)\\r\\n        {\\r\\n            revert OnlyOperatorCanCallThisFunction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireOperator(address user) private view\\r\\n    {\\r\\n        _requireNotBlacklisted(user);\\r\\n        \\r\\n        if(IAccessControl(address(_DATABASE)).hasRole(_DATABASE.OPERATOR_ROLE(), user) != true)\\r\\n        {\\r\\n            revert OnlyOperatorCanCallThisFunction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireDeveloper(address user) private view\\r\\n    {\\r\\n        _requireNotBlacklisted(user);\\r\\n        \\r\\n        if(IAccessControl(address(_DATABASE)).hasRole(_DATABASE.DEVELOPER_ROLE(), user) != true)\\r\\n        {\\r\\n            revert OnlyOperatorCanCallThisFunction();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _requireNotBlacklisted(address user) private view \\r\\n    {\\r\\n        if(_DATABASE.isBlacklisted(user))\\r\\n        {\\r\\n            revert BlacklistedError();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dapp-game/database/ICflatsDatabase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title The interface for implementing the CflatsDatabase smart contract \\r\\n/// with a full description of each function and their implementation \\r\\n/// is presented to your attention.\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICflatsDatabase \\r\\n{\\r\\n    /// @dev Emitted when new user is added\\r\\n    ///`user` is the address of account that should be added\\r\\n    event UserInserted(address indexed user);\\r\\n\\r\\n\\r\\n    /// @dev Emitted when user is removed\\r\\n    /// `user` is the address of account that should be removed\\r\\n    event UserRemoved(address indexed user);\\r\\n\\r\\n\\r\\n    /// @dev Emitted when user is added in blacklist\\r\\n    /// `user` is the address of account that should be added in blacklist\\r\\n    event UserBlacklisted(address indexed user);\\r\\n\\r\\n\\r\\n    /// @dev Emitted when user is removed from blacklist\\r\\n    /// `user` is the address of account that should be removed from blacklist\\r\\n    event UserRemovedFromBlacklist(address indexed user);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev Table cell of default user data in database\\r\\n    ///\\r\\n    /// `_account` is the address of oae also account address is an id of user\\r\\n    /// `_role` is the current role for user, by default is USER_ROLE\\r\\n    ///\\r\\n    /// There are four types of roles:\\r\\n    /// `DEFAULT_ADMIN_ROLE` - role granted only for admin of database\\r\\n    /// `USER_ROLE` - default role for any user added in database\\r\\n    /// `OPERATOR_ROLE` - role for special mechanisms/bots that should autamatically do\\r\\n    /// special intermediate calls that are not allowed for USER_ROLE\\r\\n    /// `DEVELOPER_ROLE` - the same accessibility role as OPERATOR_ROLE the difference is\\r\\n    /// that this role is intended exclusively for tests on the testnet and \\r\\n    /// should not be used in the mainnet network\\r\\n    struct User\\r\\n    {\\r\\n        address _account;\\r\\n        bytes32 _role;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //************************* startregion: VARIABLES  *************************//\\r\\n\\r\\n    /// @dev OAE wallet for team\\r\\n    ///\\r\\n    /// This wallet is used as a collection of fees, funds, \\r\\n    /// donations, to support the project development team\\r\\n    /// @return address of team wallet\\r\\n    function TEAM_WALLET() external view returns (address);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev This role is given to all users who, for whatever reason,\\r\\n    /// violate the rules of the project, scammers, fraudsters\\r\\n    /// @return 0x000000000000000000000000000000000000000000000000000000000000dead\\r\\n    function BLACKLISTED_ROLE() external view returns (bytes32);\\r\\n\\r\\n\\r\\n    /// @dev The role is given to bots to automate some processes or \\r\\n    /// to be used as intermediaries between the user and the contract\\r\\n    /// \\r\\n    /// NOTE: OPERATOR_ROLE can be granted for other contracts as well as for\\r\\n    /// intermediate parties as bots\\r\\n    ///\\r\\n    /// @return 0x0000000000000000000000000000000000000000000000000000000000000001\\r\\n    function OPERATOR_ROLE() external view returns (bytes32);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev The role is intended only for tests on the testnet,\\r\\n    /// to check the correct operability of the contract\\r\\n    ///\\r\\n    /// NOTE: should be only used on testnet\\r\\n    ///\\r\\n    /// @return 0x0000000000000000000000000000000000000000000000000000000000000002\\r\\n    function DEVELOPER_ROLE() external view returns (bytes32);\\r\\n\\r\\n\\r\\n    \\r\\n    /// @dev Default role for any user added in database\\r\\n    /// @return 0x0000000000000000000000000000000000000000000000000000000000000003\\r\\n    function USER_ROLE() external view returns (bytes32);\\r\\n\\r\\n    //************************* endregion: VARIABLES  *************************//\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //************************* startregion: CALLABLE FUNCTIONS  *************************//\\r\\n\\r\\n    /// @dev Returns true for account that is added is blacklist  \\r\\n    /// @param user - account address of user saved in db\\r\\n    /// @return false if user not registered in db or not blacklisted\\r\\n    function isBlacklisted(address user) external view returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Returns true if user was added in database and not removed\\r\\n    /// @param user - account address of user saved in db\\r\\n    /// @return false if user is not registered in db\\r\\n    function userExists(address user) external view returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Returns table cell of user by it's account address\\r\\n    /// @param user - account address of user saved in db\\r\\n    /// @return table cell with user data\\r\\n    function getUserByAccountAddress(address user) external view returns (User memory);\\r\\n\\r\\n\\r\\n    /// @dev Returns count of all users that was added in database table\\r\\n    function getUsersCount() external view returns (uint256);\\r\\n    \\r\\n    //************************* startregion: CALLABLE FUNCTIONS  *************************//\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //************************* startregion: SEND FUNCTIONS  *************************//\\r\\n    \\r\\n    /// @dev Adds user by account address\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    /// Also only never added accounts will be added without dubbing\\r\\n    ///\\r\\n    /// @return true if transaction is successfull or user \\r\\n    /// has never been added in database before\\r\\n    function addUser(address user) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Adds many users by account addresses\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    /// Also only never added accounts will be added without dubbing\\r\\n    /// \\r\\n    /// @return true if transaction is successfull\\r\\n    function addUsersBatch(address[] calldata users) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Remove user by account address\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    /// @custom:requires user to be existed in database otherwise it will revert with\\r\\n    /// error UserDoesNotExistsError(address user)\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    /// Only existed users can be removed from database\\r\\n    ///\\r\\n    /// @return true if transaction is successfull or user is unique in database\\r\\n    function removeUser(address user) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Remove many users from database\\r\\n    /// @custom:accessibility DEFAULT_ADMIN_ROLE\\r\\n    /// @custom:requires user to be existed in database otherwise it will revert with\\r\\n    /// error UserDoesNotExistsError(address user)\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via DEFAULT_ADMIN_ROLE\\r\\n    /// Only existed users can be removed from database\\r\\n    ///\\r\\n    /// @return true if transaction is successfull or user is unique in database\\r\\n    function removeUsersBatch(address[] memory users) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Adds the user to the blacklist, thereby blocking and severely \\r\\n    /// restricting the user from calling most functions\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    ///\\r\\n    /// @return true if user has never been added in blacklist before\\r\\n    function addUserInBlacklist(address user) external returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Removes user from the blacklist\\r\\n    /// @custom:accessibility OPERATOR_ROLE\\r\\n    ///\\r\\n    /// NOTE: it's highly access function callable only via OPERATOR_ROLE\\r\\n    ///\\r\\n    /// @return true if user ever been added in blacklist before\\r\\n    function removeUserFromBlacklist(address user) external returns (bool);\\r\\n\\r\\n    //************************* startregion: SEND FUNCTIONS  *************************//\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dapp-game/discount/IDiscountable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title Generalized interface for discounts\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IDiscountable\\r\\n{\\r\\n    /// @dev Interface function for dicounts\\r\\n    /// @param account address of user\\r\\n    /// @return tuple of boolean value and uint8\\r\\n    /// Boolean - returns true if account has discount, false by default\\r\\n    /// Uint8 - percentage amount of discount (Ex: 20%, 30%), zero by default\\r\\n    function hasDiscount(address account) external view returns (bool, uint8);\\r\\n}\"\r\n    },\r\n    \"contracts/dapp-game/errors/CflatsDatabaseErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title Error constants for CflatsDatabase contract\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./Errors.sol\\\";\\r\\n\\r\\nerror BlacklistedError();\\r\\nerror OnlyOperatorCanCallThisFunction();\\r\\nerror UserDoesNotExistsError(address user);\\r\\nerror UsersToDeleteExceedAmountOfDatabaseInsertedUsers();\"\r\n    },\r\n    \"contracts/dapp-game/errors/CflatsStakingErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title Error constants for CflatsStaking contract\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./Errors.sol\\\";\\r\\n\\r\\nerror TerritoryNotBoughtError();\\r\\nerror NftPassNotBoughtError();\\r\\nerror UnstakePeriodHasntBeenCompletedError();\\r\\nerror MaxGenSupplyOverflow();\\r\\nerror NftPassNotSettedByAdmin();\\r\\nerror ZeroStakerBalanceForCurrentRarity(uint8 rarity);\"\r\n    },\r\n    \"contracts/dapp-game/errors/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title Error constants for Cflats project\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nerror ZeroAddress();\\r\\nerror ThisContractAddress();\\r\\nerror NotErc721();\\r\\nerror InvalidCurrentDate();\"\r\n    },\r\n    \"contracts/dapp-game/errors/StakingErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title Error constants for StakingNFT contract\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./Errors.sol\\\";\\r\\n\\r\\nerror ZeroStakerBalance();\\r\\nerror StakeTokenAlredyRemovedOrWasNotAdded();\\r\\nerror TokenIsNotAvailableToStake();\\r\\nerror TransferAmountExceedsStakerBalance();\\r\\nerror ClaimAmountExceedBalance();\\r\\nerror StakerIsNotOwnerOf(address stakeToken, uint256 tokenId);\"\r\n    },\r\n    \"contracts/dapp-game/ICflatsDappRequirements.sol\": {\r\n      \"content\": \"/**\\r\\n* @author NiceArti (https://github.com/NiceArti) \\r\\n* To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n* @title The interface for implementing the CryptoFlatsNft smart contract \\r\\n* with a full description of each function and their implementation \\r\\n* is presented to your attention.\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./database/ICflatsDatabase.sol\\\";\\r\\n\\r\\ninterface ICflatsDappRequirements\\r\\n{\\r\\n    function getDatabase() external view returns (ICflatsDatabase);\\r\\n}\"\r\n    },\r\n    \"contracts/dapp-game/staking/CflatsStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\r\\nimport \\\"../database/ICflatsDatabase.sol\\\";\\r\\nimport \\\"../../interfaces/ICryptoflatsNFT.sol\\\";\\r\\nimport \\\"../../harvest/Harvest.sol\\\";\\r\\nimport \\\"../errors/CflatsStakingErrors.sol\\\";\\r\\nimport \\\"../discount/IDiscountable.sol\\\";\\r\\nimport \\\"../territory/ICflatsTerritory.sol\\\";\\r\\nimport \\\"../CflatsDappRequirements.sol\\\";\\r\\nimport \\\"./ICflatsStaking.sol\\\";\\r\\nimport \\\"./StakingNFT.sol\\\";\\r\\n\\r\\n\\r\\ncontract CflatsStaking is ICflatsStaking, IDiscountable, StakingNFT, CflatsDappRequirements, Harvest\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    //***************************** startregion: CONSTANTS *****************************//\\r\\n    // Profit constants //\\r\\n    // Gen 1\\r\\n    uint256 public constant PROFIT_FIRST_GEN_STANDARD = 3000;\\r\\n    uint256 public constant PROFIT_FIRST_GEN_SILVER = 4000;\\r\\n    uint256 public constant PROFIT_FIRST_GEN_GOLD = 5000;\\r\\n    uint256 public constant PROFIT_FIRST_GEN_DIAMOND = 6000;\\r\\n\\r\\n    // Gen 2\\r\\n    uint256 public constant PROFIT_SECOND_GEN_STANDARD = 4000;\\r\\n    uint256 public constant PROFIT_SECOND_GEN_SILVER = 5000;\\r\\n    uint256 public constant PROFIT_SECOND_GEN_GOLD = 6500;\\r\\n    uint256 public constant PROFIT_SECOND_GEN_DIAMOND = 8000;\\r\\n    \\r\\n    // Gen 3\\r\\n    uint256 public constant PROFIT_THIRD_GEN_STANDARD = 5000;\\r\\n    uint256 public constant PROFIT_THIRD_GEN_SILVER = 6000;\\r\\n    uint256 public constant PROFIT_THIRD_GEN_GOLD = 7000;\\r\\n    uint256 public constant PROFIT_THIRD_GEN_DIAMOND = 8000;\\r\\n\\r\\n    // Gen 4\\r\\n    uint256 public constant PROFIT_FOURTH_GEN_STANDARD = 6000;\\r\\n    uint256 public constant PROFIT_FOURTH_GEN_SILVER = 8500;\\r\\n    uint256 public constant PROFIT_FOURTH_GEN_GOLD = 10000;\\r\\n    uint256 public constant PROFIT_FOURTH_GEN_DIAMOND = 12500;\\r\\n\\r\\n    // Gen 5\\r\\n    uint256 public constant PROFIT_FIFTH_GEN = 15000;\\r\\n\\r\\n    // One day in seconds\\r\\n    uint256 private constant _ONE_DAY = 86_400;\\r\\n    \\r\\n    // Five days in seconds\\r\\n    uint256 private constant _FIVE_DAYS = _ONE_DAY * 5;\\r\\n    \\r\\n\\r\\n    // Get address of token by gen\\r\\n    address[6] private _tokensByGen;\\r\\n\\r\\n    //***************************** endregion: CONSTANTS *****************************//\\r\\n\\r\\n\\r\\n    // address of territory for buying some nft\\r\\n    ICflatsTerritory private immutable _TERRITORY;\\r\\n\\r\\n\\r\\n    // mapping for setting up or extract highest rarity staked by owner\\r\\n    mapping(address staker =>\\r\\n        mapping(address stakeToken => CflatsRarity rarity)\\r\\n    ) private _upperStakedRarityOf;\\r\\n\\r\\n\\r\\n    // mapping for setting up or extract lock time\\r\\n    mapping(address stakeToken => \\r\\n        mapping(uint256 tokenId => uint256 unlockTimestamp)\\r\\n    ) private _nftLocker;\\r\\n\\r\\n\\r\\n    // @notice mapping for setting up or extract balance by it's rarity\\r\\n    mapping(address staker => \\r\\n        mapping(address stakeToken => \\r\\n        mapping(CflatsRarity rarity => uint256 stakeBalance)\\r\\n    )) private _stakeBalanceByRarity;\\r\\n\\r\\n\\r\\n    // @notice mappings for showing statistics of users by staked gen\\r\\n    mapping(address stakeToken => \\r\\n        mapping(CflatsRarity rarity => uint16 stakers)\\r\\n    ) private _cflatsStatisticsByRarity;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    constructor(\\r\\n        address rewardToken,\\r\\n        ICflatsTerritory territory,\\r\\n        ICflatsDatabase database\\r\\n    ) \\r\\n        StakingNFT(rewardToken)\\r\\n        CflatsDappRequirements(database)\\r\\n    {\\r\\n        _TERRITORY = territory;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: external functions *****************************//\\r\\n\\r\\n    /// @notice Since in the functionality of the Dapp game there is an opportunity\\r\\n    /// for some users \\\"fraudsters\\\" to take part of the profits of others for some charge, \\r\\n    /// there is a special bot that regulates the events of the function call, and\\r\\n    /// allows \\\"fraudster\\\" to call the function of transferring reward tokens to the\\r\\n    /// balance of the fraudster through the CflatsDapp contract. The function also\\r\\n    /// works in the opposite direction, the \\\"victim\\\" can return his/her tokens with a\\r\\n    /// certain percentage\\r\\n    /// @param from: victim\\r\\n    /// @param to: fraudster\\r\\n    /// @param amount: uint256\\r\\n    /// @return True if transaction was successfully done\\r\\n    function transferRewards(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) \\r\\n        external\\r\\n        onlyOperator\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transferRewards(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice this function allows the administrator to add authorized \\r\\n    /// NFT addresses for staking (gen-0, gen-1, gen-2, gen-3, gen-4, gen-5)\\r\\n    /// @param newStakeToken: address\\r\\n    /// @return True if transaction was successfully done\\r\\n    function addStakeToken(address newStakeToken) \\r\\n        external\\r\\n        onlyOperator\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 gen = _getGen(newStakeToken);\\r\\n        if(_tokensByGen.length < gen)\\r\\n        {\\r\\n            revert MaxGenSupplyOverflow();\\r\\n        }\\r\\n\\r\\n        _tokensByGen[gen] = newStakeToken;\\r\\n\\r\\n        _addStakeToken(newStakeToken);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getAddedStakeTokens() external view returns(address[6] memory){\\r\\n        return _tokensByGen;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice this function allows the administrator to remove \\r\\n    /// NFT addresses if it was added by mistake\\r\\n    /// @param stakeToken: address\\r\\n    /// @return True if transaction was successfully done\\r\\n    function removeStakeToken(address stakeToken) \\r\\n        external\\r\\n        onlyOperator\\r\\n        returns(bool)\\r\\n    {\\r\\n        uint256 gen = _getGen(stakeToken);\\r\\n        if(_tokensByGen.length < gen)\\r\\n        {\\r\\n            revert MaxGenSupplyOverflow();\\r\\n        }\\r\\n\\r\\n        delete _tokensByGen[gen];\\r\\n\\r\\n        _removeStakeToken(stakeToken);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getStatisticsByRarity(address stakeToken) \\r\\n        external\\r\\n        view\\r\\n        returns(uint16, uint16, uint16, uint16)\\r\\n    {\\r\\n        return (\\r\\n            _cflatsStatisticsByRarity[stakeToken][CflatsRarity.Standart],\\r\\n            _cflatsStatisticsByRarity[stakeToken][CflatsRarity.Silver],\\r\\n            _cflatsStatisticsByRarity[stakeToken][CflatsRarity.Gold],\\r\\n            _cflatsStatisticsByRarity[stakeToken][CflatsRarity.Diamond]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //***************************** endregion: external functions *****************************//\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: public functions *****************************//\\r\\n\\r\\n    /// @notice shows upper token rarity staked by user\\r\\n    /// @param staker: address\\r\\n    /// @param stakeToken: address\\r\\n    /// @return Highest staked rarity\\r\\n    function getUpperStakedRarityOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) public view returns (CflatsRarity)\\r\\n    {\\r\\n        uint256 diamondBalance = _stakeBalanceByRarity[staker][stakeToken][CflatsRarity.Diamond];\\r\\n        \\r\\n        if(diamondBalance > 0)\\r\\n        {\\r\\n            return CflatsRarity.Diamond;\\r\\n        }\\r\\n\\r\\n        uint256 goldBalance = _stakeBalanceByRarity[staker][stakeToken][CflatsRarity.Gold];\\r\\n        if(goldBalance > 0)\\r\\n        {\\r\\n            return CflatsRarity.Gold;\\r\\n        }\\r\\n\\r\\n        uint256 silverBalance = _stakeBalanceByRarity[staker][stakeToken][CflatsRarity.Silver];\\r\\n        if(silverBalance > 0)\\r\\n        {\\r\\n            return CflatsRarity.Silver;\\r\\n        }\\r\\n\\r\\n        return CflatsRarity.Standart;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    /// @notice shows rewards that can be received for staking specific gen and rarity\\r\\n    /// @param stakeToken: address\\r\\n    /// @param tokenId: address\\r\\n    /// @return Rewards \\r\\n    function getRewardsForStakeToken(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) public view returns(uint256)\\r\\n    {\\r\\n        uint256 gen = _getGen(stakeToken);\\r\\n        uint256 profit = PROFIT_FIFTH_GEN;\\r\\n        CflatsRarity rarity = ICflatsNftRarity(stakeToken).getNFTType(tokenId);\\r\\n\\r\\n        if(gen == 0)\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n        else if(gen == 1)\\r\\n        {\\r\\n            if(rarity == CflatsRarity.Standart)\\r\\n            {\\r\\n                profit = PROFIT_FIRST_GEN_STANDARD;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Silver)\\r\\n            {\\r\\n                profit = PROFIT_FIRST_GEN_SILVER;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Gold)\\r\\n            {\\r\\n                profit = PROFIT_FIRST_GEN_GOLD;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                profit = PROFIT_FIRST_GEN_DIAMOND;\\r\\n            }\\r\\n        }\\r\\n        else if(gen == 2)\\r\\n        {\\r\\n            if(rarity == CflatsRarity.Standart)\\r\\n            {\\r\\n                profit = PROFIT_SECOND_GEN_STANDARD;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Silver)\\r\\n            {\\r\\n                profit = PROFIT_SECOND_GEN_SILVER;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Gold)\\r\\n            {\\r\\n                profit = PROFIT_SECOND_GEN_GOLD;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                profit = PROFIT_SECOND_GEN_DIAMOND;\\r\\n            }\\r\\n        }\\r\\n        else if(gen == 3)\\r\\n        {\\r\\n            if(rarity == CflatsRarity.Standart)\\r\\n            {\\r\\n                profit = PROFIT_THIRD_GEN_STANDARD;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Silver)\\r\\n            {\\r\\n                profit = PROFIT_THIRD_GEN_SILVER;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Gold)\\r\\n            {\\r\\n                profit = PROFIT_THIRD_GEN_GOLD;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                profit = PROFIT_THIRD_GEN_DIAMOND;\\r\\n            }\\r\\n        }\\r\\n        else if(gen == 4)\\r\\n        {\\r\\n            if(rarity == CflatsRarity.Standart)\\r\\n            {\\r\\n                profit = PROFIT_FOURTH_GEN_STANDARD;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Silver)\\r\\n            {\\r\\n                profit = PROFIT_FOURTH_GEN_SILVER;\\r\\n            }\\r\\n            else if(rarity == CflatsRarity.Gold)\\r\\n            {\\r\\n                profit = PROFIT_FOURTH_GEN_GOLD;\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                profit = PROFIT_FOURTH_GEN_DIAMOND;\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return profit * 10**IERC20Metadata(getRewardToken()).decimals();\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows discount of user if he/she has nft pass staked and diamond token rarity\\r\\n    /// @param staker: address\\r\\n    /// @return Discount in boolean and percentage \\r\\n    function hasDiscount(\\r\\n        address staker\\r\\n    ) public view returns (bool, uint8)\\r\\n    {\\r\\n        if(hasNftPassStaked(staker) == false)\\r\\n        {\\r\\n            return (false, 0);\\r\\n        }\\r\\n\\r\\n        if(getUpperStakedRarityOf(staker, _tokensByGen[0]) == CflatsRarity.Diamond)\\r\\n        {\\r\\n            return (true, 20);\\r\\n        }\\r\\n\\r\\n        return (true, 10);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows true if user has nft pass in it's wallet\\r\\n    /// @param staker: address\\r\\n    /// @return Boolean\\r\\n    function hasNftPass(\\r\\n        address staker\\r\\n    ) public view returns (bool)\\r\\n    {\\r\\n        address nftPass = _tokensByGen[0];\\r\\n        if(nftPass == address(0))\\r\\n        {\\r\\n            revert NftPassNotSettedByAdmin();\\r\\n        }\\r\\n\\r\\n        return IERC20Metadata(nftPass).balanceOf(staker) > 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows true if user staked nft pass\\r\\n    /// @param staker: address\\r\\n    /// @return Boolean\\r\\n    function hasNftPassStaked(\\r\\n        address staker\\r\\n    ) public view returns (bool)\\r\\n    {\\r\\n        address nftPass = _tokensByGen[0];\\r\\n        if(nftPass == address(0))\\r\\n        {\\r\\n            revert NftPassNotSettedByAdmin();\\r\\n        }\\r\\n\\r\\n        return stakedBalanceOf(staker, nftPass) > 0;\\r\\n    }\\r\\n\\r\\n    //***************************** endregion: public functions *****************************//\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: internal overriden functions *****************************//\\r\\n\\r\\n    function _beforeStake(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) internal onlyNotBlacklisted override \\r\\n    {\\r\\n        _requireStakeToken(stakeToken);\\r\\n\\r\\n        getDatabase().addUser(staker);\\r\\n\\r\\n        // check if user has territory\\r\\n        uint256 gen = _getGen(stakeToken);\\r\\n        if(gen > 1)\\r\\n        {\\r\\n            if(_TERRITORY.hasTerritoryForGen(staker, gen) == false)\\r\\n            {\\r\\n                revert TerritoryNotBoughtError();\\r\\n            }\\r\\n\\r\\n            // if user wants to stake gen5 it required to\\r\\n            // has nft pass on wallet balance or staking balance\\r\\n            if(gen == 5 && hasNftPass(staker) != true  && hasNftPassStaked(staker) != true)\\r\\n            {\\r\\n                revert NftPassNotBoughtError();\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        CflatsRarity currentTokenRarity = ICflatsNftRarity(stakeToken).getNFTType(tokenId);\\r\\n        \\r\\n        // updating upper token rarity \\r\\n        _increaseCflatsStatisticsByRarity(staker, stakeToken, currentTokenRarity);\\r\\n        _increaseUpperStakeTokenRarity(staker, stakeToken, currentTokenRarity);\\r\\n\\r\\n        // lock tokens for five days\\r\\n        _lockForFiveDays(stakeToken, tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _afterUnstake(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) internal override \\r\\n    {\\r\\n        if(_isLocked(stakeToken, tokenId) != false)\\r\\n        {\\r\\n            revert UnstakePeriodHasntBeenCompletedError();\\r\\n        }\\r\\n\\r\\n        CflatsRarity rarity = ICflatsNftRarity(stakeToken).getNFTType(tokenId);\\r\\n        _decreaseUpperStakeTokenRarity(staker, stakeToken, rarity);\\r\\n        _decreaseCflatsStatisticsByRarity(staker, stakeToken, rarity);\\r\\n        \\r\\n        // claim some rewards staked by user imediately after unstake\\r\\n        _updateRewards(staker, stakeToken);\\r\\n\\r\\n        uint256 stakedBalance = stakedBalanceOf(staker, stakeToken);\\r\\n        if(stakedBalance > 0)\\r\\n        {\\r\\n            uint256 stakerRewardsPartion = rewardsOf(staker) / stakedBalance;\\r\\n\\r\\n            // user can unstake NFT's but can't claim rewards\\r\\n            if(stakerRewardsPartion > 0 && getDatabase().isBlacklisted(staker) == false)\\r\\n            {\\r\\n                _claimRewards(\\r\\n                    staker,\\r\\n                    stakeToken,\\r\\n                    stakerRewardsPartion \\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _claimRewards(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 amount\\r\\n    ) internal onlyNotBlacklisted override\\r\\n    {\\r\\n        super._claimRewards(staker, stakeToken, amount);\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    function _rewardsCalculatedHook(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) \\r\\n        internal\\r\\n        view\\r\\n        override\\r\\n        returns(uint256)\\r\\n    {\\r\\n        uint256 balance = stakedBalanceOf(staker, stakeToken);\\r\\n        uint256[] memory stakeTokenIds = stakedTokensOf(staker, stakeToken);\\r\\n\\r\\n        // skip all calcualtions if nothing is staked\\r\\n        if(balance == 0)\\r\\n        {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n\\r\\n        uint256 rewards = 0;\\r\\n        if(balance == 1)\\r\\n        {\\r\\n            rewards = getRewardsForStakeToken(stakeToken, stakeTokenIds[0]);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            uint256 stakeTokensReward = 0;\\r\\n            for(uint256 i = 0; i < balance;)\\r\\n            {\\r\\n                stakeTokensReward += getRewardsForStakeToken(stakeToken, stakeTokenIds[i]);\\r\\n                unchecked{ ++i; }\\r\\n            }\\r\\n            rewards = stakeTokensReward;\\r\\n        }\\r\\n\\r\\n        // check if user has nft pass so he/she can get additional prizes\\r\\n        (bool nftPassStaked, uint8 addPercent) = hasDiscount(staker);\\r\\n        if(nftPassStaked == true)\\r\\n        {\\r\\n            // add 10% if Golden pass or 20% if Diamond pass\\r\\n            rewards += rewards * addPercent / 100;\\r\\n        }\\r\\n\\r\\n        return rewards;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _updateRewards(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) internal override\\r\\n    {\\r\\n        if(stakeToken != _tokensByGen[0])\\r\\n        {\\r\\n            super._updateRewards(staker, stakeToken);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //***************************** endregion: internal overriden functions *****************************//\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: private functions *****************************//\\r\\n    function _increaseUpperStakeTokenRarity(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        CflatsRarity rarity\\r\\n    ) private\\r\\n    {\\r\\n        unchecked\\r\\n        {\\r\\n            ++_stakeBalanceByRarity[staker][stakeToken][rarity];\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _decreaseUpperStakeTokenRarity(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        CflatsRarity rarity\\r\\n    ) private\\r\\n    {\\r\\n        uint256 stakeBalanceByRarity = _stakeBalanceByRarity[staker][stakeToken][rarity];\\r\\n        if(stakeBalanceByRarity == 0)\\r\\n        {\\r\\n            revert ZeroStakerBalanceForCurrentRarity(uint8(rarity));\\r\\n        }\\r\\n        unchecked\\r\\n        {\\r\\n            --_stakeBalanceByRarity[staker][stakeToken][rarity];\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _increaseCflatsStatisticsByRarity(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        CflatsRarity rarity\\r\\n    ) private\\r\\n    {\\r\\n        if(_stakeBalanceByRarity[staker][stakeToken][rarity] > 0)\\r\\n        {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        unchecked\\r\\n        {\\r\\n            ++_cflatsStatisticsByRarity[stakeToken][rarity];\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _decreaseCflatsStatisticsByRarity(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        CflatsRarity rarity\\r\\n    ) private\\r\\n    {\\r\\n        if(_stakeBalanceByRarity[staker][stakeToken][rarity] > 0)\\r\\n        {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        unchecked\\r\\n        {\\r\\n            --_cflatsStatisticsByRarity[stakeToken][rarity];\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function _lockForFiveDays(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) private \\r\\n    {\\r\\n        _nftLocker[stakeToken][tokenId] = block.timestamp + _FIVE_DAYS;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _isLocked(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) private view returns(bool)\\r\\n    {\\r\\n        return _nftLocker[stakeToken][tokenId] > block.timestamp;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _getGen(address stakeToken) private view returns(uint256)\\r\\n    {\\r\\n        (bool success, bytes memory data) = stakeToken.staticcall(\\r\\n            abi.encodeWithSelector(ICflatsNftGenSelector.gen.selector)\\r\\n        );\\r\\n        require(success && data.length >= 32);\\r\\n        return abi.decode(data, (uint256));\\r\\n    }\\r\\n\\r\\n\\r\\n    //***************************** endregion: private functions *****************************//\\r\\n}\"\r\n    },\r\n    \"contracts/dapp-game/staking/ICflatsStaking.sol\": {\r\n      \"content\": \"/**\\r\\n* @author NiceArti (https://github.com/NiceArti) \\r\\n* To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n* @title The interface for implementing the CryptoFlatsNft smart contract \\r\\n* with a full description of each function and their implementation \\r\\n* is presented to your attention.\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"./IStakingNFT.sol\\\";\\r\\n\\r\\nenum CflatsRarity { Standart, Silver, Gold, Diamond }\\r\\n\\r\\ninterface ICflatsNftRarity \\r\\n{\\r\\n    function getNFTType(uint256 tokenId) external view returns (CflatsRarity);\\r\\n}\\r\\n\\r\\ninterface ICflatsNftGenSelector\\r\\n{\\r\\n    /**\\r\\n    * @notice current genesis of Cryptoflats NFT\\r\\n    * @return uint256\\r\\n    */ \\r\\n    function gen()\\r\\n        external\\r\\n        view\\r\\n        returns(uint256);\\r\\n}\\r\\n\\r\\n\\r\\ninterface ICflatsStaking is IStakingNFT\\r\\n{\\r\\n    event RarityChanged(address indexed stakeToken, uint256 tokenId);\\r\\n\\r\\n\\r\\n    // Infor for gen1 - gen5\\r\\n    struct CflatsNftInfo \\r\\n    {\\r\\n        uint256 _profitIncome;\\r\\n        CflatsRarity _rarity;\\r\\n    }\\r\\n\\r\\n\\r\\n    function getUpperStakedRarityOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) external view returns (CflatsRarity);\\r\\n\\r\\n    function getRewardsForStakeToken(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) external view returns(uint256);\\r\\n\\r\\n    \\r\\n    function hasNftPass(address staker) external view returns (bool);\\r\\n    function hasNftPassStaked(address staker) external view returns (bool);\\r\\n\\r\\n    \\r\\n\\r\\n    function addStakeToken(address newStakeToken) \\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function removeStakeToken(address newStakeToken) \\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function transferRewards(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/dapp-game/staking/IStakingNFT.sol\": {\r\n      \"content\": \"/**\\r\\n* @author NiceArti (https://github.com/NiceArti) \\r\\n* To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n* @title The interface for implementing the CryptoFlatsNft smart contract \\r\\n* with a full description of each function and their implementation \\r\\n* is presented to your attention.\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IStakingNFT\\r\\n{\\r\\n    event ReceivedNFT(address indexed operator, address indexed owner, uint256 indexed tokenId, bytes data);\\r\\n    event StakedNFT(address indexed owner, address indexed stakeToken, uint256 id);\\r\\n    event UnstakedNFT(address indexed owner, address indexed stakeToken, uint256 id);\\r\\n    event RewardsClaimed(address indexed owner, uint256 rewards);\\r\\n    event RewardsTransferred(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n\\r\\n    struct StakedInfoNFT\\r\\n    {\\r\\n        // time when current nft was staked\\r\\n        uint256 timestamp;\\r\\n\\r\\n        // NFT ids of user\\r\\n        uint256[] ids;\\r\\n\\r\\n        // save id positions for gas saving\\r\\n        mapping(uint256 => uint256) idPos;\\r\\n    }\\r\\n\\r\\n\\r\\n    function isStakerOf(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) \\r\\n        external\\r\\n        view \\r\\n        returns (bool);\\r\\n\\r\\n    function isStakeToken(address stakeToken) \\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function getRewardToken() external view returns (address);\\r\\n    function getUpdatePeriod() external pure returns (uint256);\\r\\n\\r\\n    function stakedBalanceOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function stakedTimestampOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function rewardsOf(address staker)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function stakedTokensOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) \\r\\n        external \\r\\n        view \\r\\n        returns (uint256[] memory);\\r\\n\\r\\n    function claimRewards(\\r\\n        address stakeToken,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    \\r\\n    function stake(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) external returns (bool);\\r\\n\\r\\n\\r\\n    function unstake(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function updateRewards(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) external;\\r\\n\\r\\n    function batchUpdateRewards(\\r\\n        address staker,\\r\\n        address[] memory stakeTokens\\r\\n    ) external;\\r\\n\\r\\n    \\r\\n    function batchStake(\\r\\n        address[] memory stakeTokens,\\r\\n        uint256[] memory tokenIds,\\r\\n        uint256[] memory tokenIdsLength\\r\\n    ) external returns (bool);\\r\\n\\r\\n\\r\\n    function batchUnstake(\\r\\n        address[] memory stakeTokens,\\r\\n        uint256[] memory tokenIds,\\r\\n        uint256[] memory tokenIdsLength\\r\\n    ) external returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/dapp-game/staking/StakingNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\r\\nimport \\\"../errors/StakingErrors.sol\\\";\\r\\nimport \\\"./IStakingNFT.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract StakingNFT is IStakingNFT, IERC721Receiver, Context\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Token that will be used as a reward for staking\\r\\n    // It can be as ERC20 or ERC721 token or other\\r\\n    address private immutable _REWARD_TOKEN;\\r\\n\\r\\n\\r\\n    // mapping for setting up or extract boolean for stake token\\r\\n    mapping(address stakeToken => bool isStakeToken) private _isStakeToken;\\r\\n\\r\\n\\r\\n    // mapping for setting up or extract rewards of staker\\r\\n    mapping(address staker => uint256 rewards) private _rewardsOf;\\r\\n\\r\\n\\r\\n    // mapping for setting up or extract info of staked NFT\\r\\n    mapping(address staker => \\r\\n        mapping(address stakeToken => StakedInfoNFT stakedInfo)\\r\\n    ) private _stakedInfoOf;\\r\\n\\r\\n\\r\\n    // mapping for setting up or extract staker of  token\\r\\n    mapping(address staker => \\r\\n        mapping(address stakeToken => \\r\\n        mapping(uint256 tokenId => bool isStaker)\\r\\n    )) private _isStakerOf;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    constructor(address rewardToken_)\\r\\n    {\\r\\n        _REWARD_TOKEN = rewardToken_;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    modifier onlyStakeToken(address stakeToken)\\r\\n    {\\r\\n        _requireStakeToken(stakeToken);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: external overrided functions *****************************//\\r\\n\\r\\n    /// @notice overrided ERC721 receiver\\r\\n    /// @dev function used to allow this contract to receive ERC721 from any\\r\\n    /// @param operator: address\\r\\n    /// @param from: address\\r\\n    /// @param tokenId: uint256\\r\\n    /// @param data: bytes\\r\\n    /// @return bytes4\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) \\r\\n        external\\r\\n        virtual\\r\\n        override\\r\\n        returns (bytes4)\\r\\n    {\\r\\n        emit ReceivedNFT(operator, from, tokenId, data);\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice stake function\\r\\n    /// @dev takes arguments to stake ERC721 tokens\\r\\n    /// @param stakeToken: address\\r\\n    /// @param tokenId: uint256\\r\\n    /// @return True if transaction is successfull\\r\\n    function stake(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) external returns (bool)\\r\\n    {\\r\\n        _safeStake(_msgSender(), stakeToken, tokenId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice unstake function\\r\\n    /// @dev takes arguments to stake ERC721 tokens\\r\\n    /// @param stakeToken: address\\r\\n    /// @param tokenId: uint256\\r\\n    /// @return True if transaction is successfull\\r\\n    function unstake(\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) external returns (bool)\\r\\n    {\\r\\n        _safeUnstake(_msgSender(), stakeToken, tokenId);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //***************************** endregion: external overrided functions *****************************//\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: public functions *****************************//\\r\\n\\r\\n    /// @notice shows address of reward token\\r\\n    /// @dev reward token cannot be zero address\\r\\n    /// @custom:require ERC20 token to be added\\r\\n    /// @return reward token address\\r\\n    function getRewardToken() public virtual view returns (address)\\r\\n    {\\r\\n        return _REWARD_TOKEN;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows period in which reward balance will be updated\\r\\n    /// @return Time in seconds when reward balance can be updated\\r\\n    function getUpdatePeriod() public virtual pure returns (uint256)\\r\\n    {\\r\\n        return 86_400;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows balance of staked tokens\\r\\n    /// @param staker: address\\r\\n    /// @param stakeToken: address\\r\\n    /// @return balance of staked tokens for it's owner\\r\\n    function stakedBalanceOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) public view returns (uint256)\\r\\n    {\\r\\n        return _stakedInfoOf[staker][stakeToken].ids.length;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows time when first time ERC721 token was staked\\r\\n    /// @param staker: address\\r\\n    /// @param stakeToken: address\\r\\n    /// @return Time in seconds when first time ERC721 token was staked\\r\\n    function stakedTimestampOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) public view returns (uint256)\\r\\n    {\\r\\n        return _stakedInfoOf[staker][stakeToken].timestamp;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows rewards collected by staker\\r\\n    /// @param staker: address\\r\\n    /// @return Collected staker rewards\\r\\n    function rewardsOf(address staker)\\r\\n        public\\r\\n        virtual\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _rewardsOf[staker];\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows rewards collected by staker\\r\\n    /// @param staker: address\\r\\n    /// @param stakeToken: address\\r\\n    /// @return Collected staker rewards\\r\\n    function stakedTokensOf(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) \\r\\n        public \\r\\n        virtual \\r\\n        view \\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        return _stakedInfoOf[staker][stakeToken].ids;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows if token is added by owner\\r\\n    /// @param stakeToken: address\\r\\n    /// @return True if token is allowed\\r\\n    function isStakeToken(address stakeToken) \\r\\n        public\\r\\n        virtual\\r\\n        override\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _isStakeToken[stakeToken];\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice shows staker of ERC721 token\\r\\n    /// @param staker: address\\r\\n    /// @param stakeToken: address\\r\\n    /// @param tokenId: uint256\\r\\n    /// @return True if token by it's id is staked by staker\\r\\n    function isStakerOf(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) public view returns (bool)\\r\\n    {\\r\\n        return _isStakerOf[staker][stakeToken][tokenId];\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice transfers collected rewards to it's owner wallet\\r\\n    /// @notice caller can claim only it's rewards\\r\\n    /// @param stakeToken: address\\r\\n    /// @return True if transaction is successfull\\r\\n    function claimRewards(address stakeToken, uint256 amount) public virtual returns (bool)\\r\\n    {\\r\\n        _claimRewards(_msgSender(), stakeToken, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice stakes multiple tokens\\r\\n    /// @param stakeTokens: address[]\\r\\n    /// @param tokenIds: uint256[]\\r\\n    /// @param tokenIdsLength: uint256[] - for gas saving\\r\\n    /// it is used to set length of ids belonging to a specific stake token address\\r\\n    /// otherwise it will revert \\r\\n    /// @return True if transaction is successfull\\r\\n    function batchStake(\\r\\n        address[] memory stakeTokens,\\r\\n        uint256[] memory tokenIds,\\r\\n        uint256[] memory tokenIdsLength\\r\\n    ) public virtual returns (bool)\\r\\n    {\\r\\n        uint256 currentIndex = 0;\\r\\n        address currentStakeToken = stakeTokens[0];\\r\\n        uint256 nextStakeTokenStartsFrom = tokenIdsLength[0] - 1;\\r\\n        \\r\\n        for(uint256 i = 0; i < tokenIds.length;)\\r\\n        {\\r\\n            if(i > nextStakeTokenStartsFrom)\\r\\n            {\\r\\n                unchecked { ++currentIndex; }\\r\\n                nextStakeTokenStartsFrom = i + tokenIdsLength[currentIndex] - 1;\\r\\n                currentStakeToken = stakeTokens[currentIndex];\\r\\n            }\\r\\n\\r\\n            _safeStake(_msgSender(), currentStakeToken, tokenIds[i]);\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice unstakes multiple tokens\\r\\n    /// @param stakeTokens: address[]\\r\\n    /// @param tokenIds: uint256[]\\r\\n    /// @param tokenIdsLength: uint256[] - for gas saving\\r\\n    /// it is used to set length of ids belonging to a specific stake token address\\r\\n    /// otherwise it will revert \\r\\n    /// @return True if transaction is successfull\\r\\n    function batchUnstake(\\r\\n        address[] memory stakeTokens,\\r\\n        uint256[] memory tokenIds,\\r\\n        uint256[] memory tokenIdsLength\\r\\n    ) public virtual returns (bool)\\r\\n    {\\r\\n        uint256 currentIndex = 0;\\r\\n        address currentStakeToken = stakeTokens[0];\\r\\n        uint256 nextStakeTokenStartsFrom = tokenIdsLength[0] - 1;\\r\\n        \\r\\n        for(uint256 i = 0; i < tokenIds.length;)\\r\\n        {\\r\\n            if(i > nextStakeTokenStartsFrom)\\r\\n            {\\r\\n                unchecked { ++currentIndex; }\\r\\n                nextStakeTokenStartsFrom = i + tokenIdsLength[currentIndex] - 1;\\r\\n                currentStakeToken = stakeTokens[currentIndex];\\r\\n            }\\r\\n\\r\\n            _safeUnstake(_msgSender(), currentStakeToken, tokenIds[i]);\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice updates rewards of staker by specific stakeToken\\r\\n    /// @param staker: address\\r\\n    /// @param stakeToken: uint256\\r\\n    function updateRewards(address staker, address stakeToken) public\\r\\n    {\\r\\n        _updateRewards(staker, stakeToken);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice updates rewards of staker by specific many stake tokens\\r\\n    /// @param staker: address\\r\\n    /// @param stakeTokens: uint256[]\\r\\n    function batchUpdateRewards(address staker, address[] memory stakeTokens) public\\r\\n    {\\r\\n        for(uint256 i = 0; i < stakeTokens.length;)\\r\\n        {\\r\\n            _updateRewards(staker, stakeTokens[i]);\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //***************************** endregion: public functions *****************************//\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: internal centralization functions *****************************//\\r\\n\\r\\n    function _addStakeToken(address newStakeToken) internal virtual\\r\\n    {\\r\\n        if(_isERC721Token(newStakeToken) != true)\\r\\n        {\\r\\n            if(newStakeToken == address(0))\\r\\n            {\\r\\n                revert ZeroAddress();\\r\\n            }\\r\\n            else if(newStakeToken == address(this))\\r\\n            {\\r\\n                revert ThisContractAddress();\\r\\n            }\\r\\n\\r\\n            revert NotErc721();\\r\\n        }\\r\\n\\r\\n        _isStakeToken[newStakeToken] = true;\\r\\n    }\\r\\n\\r\\n    function _removeStakeToken(address stakeToken) internal virtual\\r\\n    {\\r\\n        if(_isStakeToken[stakeToken] == false)\\r\\n        {\\r\\n            revert StakeTokenAlredyRemovedOrWasNotAdded();\\r\\n        }\\r\\n\\r\\n        delete _isStakeToken[stakeToken];\\r\\n    }\\r\\n\\r\\n    function _transferRewards(address from, address to, uint256 amount) internal \\r\\n    {\\r\\n        if(rewardsOf(from) < amount)\\r\\n        {\\r\\n            revert TransferAmountExceedsStakerBalance();\\r\\n        }\\r\\n\\r\\n        unchecked\\r\\n        {\\r\\n            _rewardsOf[from] -= amount;\\r\\n            _rewardsOf[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit RewardsTransferred(from, to, amount);\\r\\n    }\\r\\n\\r\\n    //***************************** endregion: internal centralization functions *****************************//\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: internal hooks *****************************//\\r\\n\\r\\n    function _safeStake(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) internal\\r\\n    {\\r\\n        // Stake token should be ERC721 token\\r\\n        bool isSupportingERC721 = _isERC721Token(stakeToken);\\r\\n\\r\\n        if(staker == address(0))\\r\\n        {\\r\\n            revert ZeroAddress();\\r\\n        }\\r\\n        if(isSupportingERC721 != true)\\r\\n        {\\r\\n            revert NotErc721();\\r\\n        }\\r\\n\\r\\n\\r\\n        // Hook is used for additional checks or actions\\r\\n        _beforeStake(staker, stakeToken, tokenId);\\r\\n\\r\\n        _isStakerOf[staker][stakeToken][tokenId] = true;\\r\\n\\r\\n        // update info about staker\\r\\n        _incrementUserBalance(_stakedInfoOf[staker][stakeToken], tokenId);\\r\\n\\r\\n        // Send NFT from owner to this contract\\r\\n        IERC721(stakeToken).safeTransferFrom(staker, address(this), tokenId);\\r\\n\\r\\n        // Hook is used for additional checks or actions\\r\\n        _afterStake(staker, stakeToken, tokenId);\\r\\n\\r\\n\\r\\n        emit StakedNFT(staker, stakeToken, tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _safeUnstake(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 tokenId\\r\\n    ) internal\\r\\n    {\\r\\n        StakedInfoNFT storage userStakingInfo = _stakedInfoOf[staker][stakeToken];\\r\\n        uint256 currentBalance = userStakingInfo.ids.length;\\r\\n\\r\\n        if(currentBalance == 0)\\r\\n        {\\r\\n            revert ZeroStakerBalance();\\r\\n        }\\r\\n        if(isStakerOf(staker, stakeToken, tokenId) == false)\\r\\n        {\\r\\n            revert StakerIsNotOwnerOf(stakeToken, tokenId);\\r\\n        }\\r\\n\\r\\n\\r\\n        // Hook is used for additional checks or actions\\r\\n        _beforeUnstake(staker, stakeToken, tokenId);\\r\\n\\r\\n        _isStakerOf[staker][stakeToken][tokenId] = false;\\r\\n\\r\\n        // update user balance once if balance will be zero\\r\\n        // so user can release his/her rewards without loosing any\\r\\n        if(currentBalance - 1 == 0)\\r\\n        {\\r\\n            _updateRewards(staker, stakeToken);\\r\\n        }\\r\\n\\r\\n        // update info about staker\\r\\n        _decrementUserBalance(userStakingInfo, tokenId);\\r\\n\\r\\n        // Send NFT from owner to this contract\\r\\n        IERC721(stakeToken).safeTransferFrom(address(this), staker, tokenId);\\r\\n        \\r\\n        // Hook is used for additional checks or actions\\r\\n        _afterUnstake(staker, stakeToken, tokenId);\\r\\n\\r\\n        emit UnstakedNFT(staker, stakeToken, tokenId);\\r\\n    }\\r\\n\\r\\n    function _rewardsCalculatedHook(\\r\\n        address staker,\\r\\n        address stakeToken\\r\\n    ) \\r\\n        internal\\r\\n        virtual\\r\\n        view\\r\\n        returns(uint256)\\r\\n    {\\r\\n        uint256 balance = _stakedInfoOf[staker][stakeToken].ids.length;\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    function _timeLeft(\\r\\n        uint256 currentTimestamp,\\r\\n        uint256 lastTimestamp\\r\\n    ) internal pure returns(uint256)\\r\\n    {\\r\\n        if(lastTimestamp > currentTimestamp)\\r\\n        {\\r\\n            revert InvalidCurrentDate();\\r\\n        }\\r\\n\\r\\n        return (currentTimestamp - lastTimestamp) / getUpdatePeriod();\\r\\n    }\\r\\n\\r\\n    function _requireStakeToken(address stakeToken) internal view \\r\\n    {\\r\\n        if(_isStakeToken[stakeToken] == false)\\r\\n        {\\r\\n            revert TokenIsNotAvailableToStake();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _updateRewards(address staker, address stakeToken) internal virtual\\r\\n    {\\r\\n        StakedInfoNFT storage userStakingInfo = _stakedInfoOf[staker][stakeToken];\\r\\n        \\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n\\r\\n        // skip if timestamp less than next period\\r\\n        if(currentTimestamp <= userStakingInfo.timestamp + getUpdatePeriod())\\r\\n        {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 balance = userStakingInfo.ids.length;\\r\\n\\r\\n        // skip update if balance is 0\\r\\n        if(balance == 0)\\r\\n        {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        _rewardsOf[staker] += _rewardsCalculatedHook(staker, stakeToken) * _timeLeft(currentTimestamp, userStakingInfo.timestamp);\\r\\n        \\r\\n        userStakingInfo.timestamp = currentTimestamp;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _claimRewards(\\r\\n        address staker,\\r\\n        address stakeToken,\\r\\n        uint256 amount\\r\\n    ) internal virtual\\r\\n    {\\r\\n        // Update staker balance to last actual\\r\\n        _updateRewards(staker, stakeToken);\\r\\n\\r\\n        uint256 stakerRewards = rewardsOf(staker);\\r\\n\\r\\n        // Anulate user stake balance greather then zero and \\r\\n        // transfer tokens to staker or do nothing otherwise\\r\\n        if(stakerRewards < amount)\\r\\n        {\\r\\n            revert ClaimAmountExceedBalance();\\r\\n        }\\r\\n        \\r\\n        _rewardsOf[staker] -= amount;\\r\\n        IERC20(_REWARD_TOKEN).safeTransfer(staker, amount);\\r\\n        \\r\\n        // emit event only when rewards can be claimed\\r\\n        emit RewardsClaimed(staker, stakerRewards);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _beforeStake(address staker, address stakeToken, uint256 tokenId) internal virtual {}\\r\\n    \\r\\n\\r\\n    function _afterStake(address staker, address stakeToken, uint256 tokenId) internal virtual {}\\r\\n\\r\\n\\r\\n    function _beforeUnstake(address staker, address stakeToken, uint256 tokenId) internal virtual {}\\r\\n    \\r\\n\\r\\n    function _afterUnstake(address staker, address stakeToken, uint256 tokenId) internal virtual {}\\r\\n\\r\\n    //***************************** endregion: internal hooks *****************************//\\r\\n\\r\\n\\r\\n\\r\\n    //***************************** startregion: private functions *****************************//\\r\\n\\r\\n    function _incrementUserBalance(\\r\\n        StakedInfoNFT storage userStakingInfo,\\r\\n        uint256 tokenId\\r\\n    ) private \\r\\n    {\\r\\n        if(userStakingInfo.ids.length == 0)\\r\\n        {\\r\\n            userStakingInfo.timestamp = block.timestamp;\\r\\n        }\\r\\n\\r\\n        userStakingInfo.idPos[tokenId] = userStakingInfo.ids.length;\\r\\n        userStakingInfo.ids.push(tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _decrementUserBalance(\\r\\n        StakedInfoNFT storage userStakingInfo,\\r\\n        uint256 tokenId\\r\\n    ) private\\r\\n    {\\r\\n        uint256 lastIdPos = userStakingInfo.ids.length - 1;\\r\\n        \\r\\n        if(userStakingInfo.ids[lastIdPos] == tokenId)\\r\\n        {\\r\\n            userStakingInfo.ids.pop();\\r\\n        }\\r\\n        \\r\\n        // as we don't know where exactly our elements are in array\\r\\n        // so as we save all arr positions in mapping we can use it here\\r\\n        // to exctract exact pos and save gas skipping for each search\\r\\n        else\\r\\n        {\\r\\n            uint256 currentElemPos = userStakingInfo.idPos[tokenId];\\r\\n\\r\\n            // do swap between current elements and last to pop from array\\r\\n            uint256 tmp = userStakingInfo.ids[currentElemPos];\\r\\n            userStakingInfo.ids[currentElemPos] = userStakingInfo.ids[lastIdPos];\\r\\n            userStakingInfo.ids[lastIdPos] = tmp;\\r\\n            \\r\\n            // delete current id from array\\r\\n            userStakingInfo.ids.pop();\\r\\n        }\\r\\n\\r\\n\\r\\n        // if current user balance is zero anulate timestamp\\r\\n        if(userStakingInfo.ids.length == 0)\\r\\n        {\\r\\n            delete userStakingInfo.timestamp;\\r\\n        }\\r\\n\\r\\n        delete userStakingInfo.idPos[tokenId];\\r\\n    }\\r\\n\\r\\n\\r\\n    function _isERC721Token(address stakeToken) private view returns (bool)\\r\\n    {\\r\\n        bytes4 IERC721Id = type(IERC721).interfaceId;\\r\\n        ERC165Checker.supportsInterface(stakeToken, IERC721Id);\\r\\n        return ERC165Checker.supportsInterface(stakeToken, IERC721Id);\\r\\n    }\\r\\n\\r\\n\\r\\n    //***************************** endregion: private functions *****************************//\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/dapp-game/territory/ICflatsTerritory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/// @author Tient Technologies (Twitter:https://twitter.com/tient_tech | Github:https://github.com/Tient-Technologies | | LinkedIn:https://www.linkedin.com/company/tient-technologies/)\\r\\n/// @dev NiceArti (https://github.com/NiceArti)\\r\\n/// To maintain developer you can also donate to this address - 0xDc3d3fA1aEbd13fF247E5F5D84A08A495b3215FB\\r\\n/// @title The interface for implementing the CflatsTerritory smart contract \\r\\n/// with a full description of each function and their implementation \\r\\n/// is presented to your attention.\\r\\n\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface ICflatsTerritory \\r\\n{\\r\\n    /// @dev Emitted when user buys territory\\r\\n    /// `from` is the address that transfers terrotory to recepient\\r\\n    /// `to` is the address of account that bought territory\\r\\n    /// `gen` is the gen number of territory that relates to Cflats NFT\\r\\n    event TerritoryTransfer(address indexed from, address indexed to, uint256 gen);\\r\\n\\r\\n\\r\\n    /// @dev Shows address of utility token\\r\\n    function utilityToken() external view returns(address);\\r\\n\\r\\n\\r\\n    /// @dev Shows the amount of territories that users owns\\r\\n    function balanceOf(address owner, uint256 gen) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /// @dev Shows if `owner` has territory for staking NFT gen\\r\\n    /// @param owner is an account address of user\\r\\n    /// @param gen is a number of gen that is allowed to stake token\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function hasTerritoryForGen(\\r\\n        address owner,\\r\\n        uint256 gen\\r\\n    ) external view returns (bool);\\r\\n\\r\\n\\r\\n    /// @dev Shows the price for buying territory for special `gen`\\r\\n    /// @param gen is a number of gen that is allowed to stake token\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function getPriceForGen(uint256 gen) external view returns (uint256);\\r\\n\\r\\n\\r\\n    /// @dev Allows user to buy territory using $CFLAT tokens  \\r\\n    /// @param gen is a number of NFT gen\\r\\n    /// @param amount of $CFLAT for buing territory\\r\\n    /// \\r\\n    /// @custom:requires amount to be greather than or equal to price of territory\\r\\n    ///\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function buy(uint256 gen, uint256 amount) external returns (bool);\\r\\n    \\r\\n    \\r\\n    /// @dev Allows user to transfer territory to anyone  \\r\\n    /// @param recipient the address who will receive territory\\r\\n    /// @param gen is a number of NFT gen\\r\\n    /// \\r\\n    /// @custom:requires `owner` balance to be at least two\\r\\n    ///\\r\\n    /// @return true if `owner` has territory for special `gen`\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 gen\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/harvest/Harvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./IHarvest.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract Harvest is IHarvest\\r\\n{\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // TEAM_WALLET\\r\\n    address private constant _HARVEST_ADDRESS = 0x1d6B3E373B947319a4B76A851bb17C1dEcCADb1D;\\r\\n\\r\\n\\r\\n    receive() external payable \\r\\n    {\\r\\n        emit Thanks(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// the function of collecting tokens that got accidentally\\r\\n    /// or specifically into a smart contract and were not recorded\\r\\n    /// in storage\\r\\n    /// NOTE: this function does not take user's funds from the contract,\\r\\n    /// but will withdraw those funds that are considered to be\\r\\n    /// donation and receiving funds!\\r\\n    function collect(address token) public virtual returns (bool)\\r\\n    {\\r\\n        uint256 harvestAmount = _getHarvest(token);\\r\\n\\r\\n        if(harvestAmount == 0)\\r\\n        {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        if(token == address(0))\\r\\n        {\\r\\n            (bool sent, ) = payable(_HARVEST_ADDRESS).call{value: harvestAmount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether!\\\");\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            IERC20(token).safeTransfer(_HARVEST_ADDRESS, harvestAmount);\\r\\n        }\\r\\n\\r\\n        emit HarvestCollected();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// The main idea is to collect all funds that were sent in contract\\r\\n    /// accidently or as donation, not to stole a whole contract balance\\r\\n    /// NOTE: any funds received for a smart contract and not recorded\\r\\n    /// in the storage are regarded as a donation that the team can take\\r\\n    function _getHarvest(address token) internal view returns (uint256)\\r\\n    {\\r\\n        if(token == address(0))\\r\\n        {\\r\\n            return address(this).balance;\\r\\n        }\\r\\n\\r\\n        return IERC20Metadata(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    function _extractDonationPercentage(uint256 fullAmount, uint16 percentage) internal pure returns (uint256)\\r\\n    {\\r\\n        // accuracy up to two characters\\r\\n        // 10000 = 100.00\\r\\n        return fullAmount * percentage / 10000;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/harvest/IHarvest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\ninterface IHarvest\\r\\n{\\r\\n    event Thanks(address indexed donator, uint256 donation);\\r\\n    event HarvestCollected();\\r\\n\\r\\n    /// the function of collecting tokens that got accidentally\\r\\n    /// or specifically into a smart contract and were not recorded\\r\\n    /// in storage\\r\\n    /// NOTE: this function does not take user's funds from the contract,\\r\\n    /// but will withdraw those funds that are considered to be\\r\\n    /// donation funds!\\r\\n    function collect(address token) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ICryptoflatsNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nenum Type {\\n    Standart,\\n    Silver,\\n    Gold,\\n    Diamond\\n}\\n\\ninterface ICryptoflatsNFT is IERC721 \\n{\\n    function getNFTType(uint256 _tokenId) external view returns (Type);\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract ICflatsTerritory\",\"name\":\"territory\",\"type\":\"address\"},{\"internalType\":\"contract ICflatsDatabase\",\"name\":\"database\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BlacklistedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimAmountExceedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrentDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxGenSupplyOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftPassNotBoughtError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftPassNotSettedByAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotErc721\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOperatorCanCallThisFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeTokenAlredyRemovedOrWasNotAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"StakerIsNotOwnerOf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TerritoryNotBoughtError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThisContractAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsNotAvailableToStake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferAmountExceedsStakerBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnstakePeriodHasntBeenCompletedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroStakerBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"rarity\",\"type\":\"uint8\"}],\"name\":\"ZeroStakerBalanceForCurrentRarity\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"HarvestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RarityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ReceivedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"StakedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"Thanks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"UnstakedNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PROFIT_FIFTH_GEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FIRST_GEN_DIAMOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FIRST_GEN_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FIRST_GEN_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FIRST_GEN_STANDARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FOURTH_GEN_DIAMOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FOURTH_GEN_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FOURTH_GEN_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_FOURTH_GEN_STANDARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_SECOND_GEN_DIAMOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_SECOND_GEN_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_SECOND_GEN_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_SECOND_GEN_STANDARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_THIRD_GEN_DIAMOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_THIRD_GEN_GOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_THIRD_GEN_SILVER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_THIRD_GEN_STANDARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakeToken\",\"type\":\"address\"}],\"name\":\"addStakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakeTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsLength\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakeTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdsLength\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"stakeTokens\",\"type\":\"address[]\"}],\"name\":\"batchUpdateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddedStakeTokens\",\"outputs\":[{\"internalType\":\"address[6]\",\"name\":\"\",\"type\":\"address[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDatabase\",\"outputs\":[{\"internalType\":\"contract ICflatsDatabase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRewardsForStakeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"getStatisticsByRarity\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpdatePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"getUpperStakedRarityOf\",\"outputs\":[{\"internalType\":\"enum CflatsRarity\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"hasDiscount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"hasNftPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"hasNftPassStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"isStakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isStakerOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"removeStakeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"stakedTimestampOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"stakedTokensOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CflatsStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "1200", "ConstructorArguments": "00000000000000000000000042b5a36f9a6bb2686824df4f5106ff3aa5d52ac8000000000000000000000000bfcf8110bd0038159a8107ad403a761307a924b00000000000000000000000001632d6e5d3b9203250678a0e2e397b06745b9686", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}