{"SourceCode": "pragma solidity ^0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    constructor() public\r\n    {\r\n       owner = msg.sender;\r\n    }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract BaconCoin is BurnableToken, Ownable {\r\n\r\n    string public constant name = \"BaconCoin\";\r\n    string public constant symbol = \"BAK\";\r\n    uint public constant decimals = 8;\r\n    uint256 public constant initialSupply = 2200000000 * (10 ** uint256(decimals));\r\n\r\n    // use Nonce for stop replay-attack\r\n    struct Wallet {\r\n        uint256 balance;\r\n        uint256 tokenBalance;\r\n        mapping(address => bool) authed;   \r\n        uint64 seedNonce;\r\n        uint64 withdrawNonce;\r\n    }\r\n    \r\n    address[] public admins;\r\n\r\n    mapping(bytes32 => Wallet) private wallets;\r\n    mapping(address => bool) private isAdmin;\r\n\r\n    uint256 private agentBalance;\r\n    uint256 private agentTokenBalance;\r\n    \r\n    modifier onlyAdmin {\r\n        require(isAdmin[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRootAdmin {\r\n        require(msg.sender == admins[0]);\r\n        _;\r\n    }\r\n\r\n    event Auth(\r\n        bytes32 indexed walletID,\r\n        address indexed agent\r\n    );\r\n\r\n    event Withdraw(\r\n        bytes32 indexed walletID,\r\n        uint256 indexed nonce,\r\n        uint256 indexed value,\r\n        address recipient\r\n    );\r\n    \r\n    event Deposit(\r\n        bytes32 indexed walletID,\r\n        address indexed sender,\r\n        uint256 indexed value\r\n    );\r\n\r\n    event Seed(\r\n        bytes32 indexed walletID,\r\n        uint256 indexed nonce,\r\n        uint256 indexed value\r\n    );\r\n\r\n    event Gain(\r\n        bytes32 indexed walletID,\r\n        uint256 indexed requestID,\r\n        uint256 indexed value\r\n    );\r\n\r\n    event DepositToken(\r\n        bytes32 indexed walletID,\r\n        address indexed sender, \r\n        uint256 indexed amount\r\n    );\r\n    \r\n    event WithdrawToken(\r\n        bytes32 indexed walletID,\r\n        uint256 indexed nonce,\r\n        uint256 indexed amount,\r\n        address recipient\r\n    );\r\n    \r\n    event SeedToken(\r\n        bytes32 indexed walletID,\r\n        uint256 indexed nonce,\r\n        uint256 indexed amount\r\n    );\r\n\r\n    event GainToken(\r\n        bytes32 indexed walletID,\r\n        uint256 indexed requestID,\r\n        uint256 indexed amount\r\n    );\r\n    \r\n    constructor() public\r\n    {\r\n        totalSupply = initialSupply;\r\n        balances[msg.sender] = initialSupply; \r\n\r\n        admins.push(msg.sender);\r\n        isAdmin[msg.sender] = true;\r\n    }\r\n\r\n    function auth(\r\n        bytes32[] walletIDs,\r\n        bytes32[] nameIDs,\r\n        address[] agents,\r\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\r\n    {\r\n        require(\r\n            walletIDs.length == nameIDs.length &&\r\n            walletIDs.length == agents.length &&\r\n            walletIDs.length == v.length &&\r\n            walletIDs.length == r.length &&\r\n            walletIDs.length == s.length\r\n        );\r\n\r\n        for (uint i = 0; i < walletIDs.length; i++) {\r\n            bytes32 walletID = walletIDs[i];\r\n            address agent = agents[i];\r\n\r\n            address signer = getMessageSigner(\r\n                getAuthDigest(walletID, agent), v[i], r[i], s[i]\r\n            );\r\n\r\n            Wallet storage wallet = wallets[walletID];\r\n\r\n            if (wallet.authed[signer] || walletID == getWalletDigest(nameIDs[i], signer)) {\r\n                wallet.authed[agent] = true;\r\n\r\n                emit Auth(walletID, agent);\r\n            }\r\n        }\r\n    }\r\n\r\n    function deposit( bytes32 walletID) payable public\r\n    {\r\n        wallets[walletID].balance += msg.value;\r\n\r\n        emit Deposit(walletID, msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(\r\n        bytes32[] walletIDs,\r\n        address[] receivers,\r\n        uint256[] values,\r\n        uint64[] nonces,\r\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\r\n    {\r\n        require(\r\n            walletIDs.length == receivers.length &&\r\n            walletIDs.length == values.length &&\r\n            walletIDs.length == nonces.length &&\r\n            walletIDs.length == v.length &&\r\n            walletIDs.length == r.length &&\r\n            walletIDs.length == s.length\r\n        );\r\n\r\n        for (uint i = 0; i < walletIDs.length; i++) {\r\n            bytes32 walletID = walletIDs[i];\r\n            address receiver = receivers[i];\r\n            uint256 value = values[i];\r\n            uint64 nonce = nonces[i];\r\n\r\n            address signer = getMessageSigner(\r\n                getWithdrawDigest(walletID, receiver, value, nonce), v[i], r[i], s[i]\r\n            );\r\n\r\n            Wallet storage wallet = wallets[walletID];\r\n\r\n            if (\r\n                wallet.withdrawNonce < nonce &&\r\n                wallet.balance >= value &&\r\n                wallet.authed[signer] &&\r\n                receiver.send(value)\r\n            ) {\r\n                wallet.withdrawNonce = nonce;\r\n                wallet.balance -= value;\r\n\r\n                emit Withdraw(walletID, nonce, value, receiver);\r\n            }\r\n        }\r\n    }\r\n\r\n    function seed(\r\n        bytes32[] walletIDs,\r\n        uint256[] values,\r\n        uint64[] nonces,\r\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\r\n    {\r\n        require(\r\n            walletIDs.length == values.length &&\r\n            walletIDs.length == nonces.length &&\r\n            walletIDs.length == v.length &&\r\n            walletIDs.length == r.length &&\r\n            walletIDs.length == s.length\r\n        );\r\n\r\n        uint256 addition = 0;\r\n\r\n        for (uint i = 0; i < walletIDs.length; i++) {\r\n            bytes32 walletID = walletIDs[i];\r\n            uint256 value = values[i];\r\n            uint64 nonce = nonces[i];\r\n\r\n            address signer = getMessageSigner(\r\n                getSeedDigest(walletID, value, nonce), v[i], r[i], s[i]\r\n            );\r\n\r\n            Wallet storage wallet = wallets[walletID];\r\n\r\n            if (\r\n                wallet.seedNonce < nonce &&\r\n                wallet.balance >= value &&\r\n                wallet.authed[signer]\r\n            ) {\r\n                wallet.seedNonce = nonce;\r\n                wallet.balance -= value;\r\n\r\n                emit Seed(walletID, nonce, value);\r\n\r\n                addition += value;\r\n            }\r\n        }\r\n\r\n        agentBalance += addition;\r\n    }\r\n\r\n\r\n    function gain(\r\n        bytes32[] walletIDs,\r\n        uint256[] recordIDs,\r\n        uint256[] values) onlyAdmin public\r\n    {\r\n        require(\r\n            walletIDs.length == recordIDs.length &&\r\n            walletIDs.length == values.length\r\n        );\r\n\r\n        uint256 remaining = agentBalance;\r\n\r\n        for (uint i = 0; i < walletIDs.length; i++) {\r\n            bytes32 walletID = walletIDs[i];\r\n            uint256 value = values[i];\r\n\r\n            require(value <= remaining);\r\n\r\n            wallets[walletID].balance += value;\r\n            remaining -= value;\r\n\r\n            emit Gain(walletID, recordIDs[i], value);\r\n        }\r\n\r\n        agentBalance = remaining;\r\n    }\r\n\r\n    function getMessageSigner(\r\n        bytes32 message,\r\n        uint8 v, bytes32 r, bytes32 s) public pure returns(address)\r\n    {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\r\n        bytes32 prefixedMessage = keccak256(\r\n            abi.encodePacked(prefix, message)\r\n        );\r\n        return ecrecover(prefixedMessage, v, r, s);\r\n    }\r\n\r\n    function getNameDigest(\r\n        string myname) public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(myname));\r\n    }\r\n\r\n    function getWalletDigest(\r\n        bytes32 myname,\r\n        address root) public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\r\n            myname, root\r\n        ));\r\n    }\r\n\r\n    function getAuthDigest(\r\n        bytes32 walletID,\r\n        address agent) public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\r\n            walletID, agent\r\n        ));\r\n    }\r\n\r\n    function getSeedDigest(\r\n        bytes32 walletID,\r\n        uint256 value,\r\n        uint64 nonce) public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\r\n            walletID, value, nonce\r\n        ));\r\n    }\r\n\r\n    function getWithdrawDigest(\r\n        bytes32 walletID,\r\n        address receiver,\r\n        uint256 value,\r\n        uint64 nonce) public pure returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\r\n            walletID, receiver, value, nonce\r\n        ));\r\n    }\r\n\r\n    function getSeedNonce(\r\n        bytes32 walletID) public view returns (uint256)\r\n    {\r\n        return wallets[walletID].seedNonce + 1;\r\n    }\r\n\r\n    function getWithdrawNonce(\r\n        bytes32 walletID) public view returns (uint256)\r\n    {\r\n        return wallets[walletID].withdrawNonce + 1;\r\n    }\r\n\r\n    function getAuthStatus(\r\n        bytes32 walletID,\r\n        address member) public view returns (bool)\r\n    {\r\n        return wallets[walletID].authed[member];\r\n    }\r\n\r\n    function getBalance(\r\n        bytes32 walletID) public view returns (uint256)\r\n    {\r\n        return wallets[walletID].balance;\r\n    }\r\n    \r\n    function gettokenBalance(\r\n        bytes32 walletID) public view returns (uint256)\r\n    {\r\n        return wallets[walletID].tokenBalance;\r\n    }\r\n\r\n    function getagentBalance() public view returns (uint256)\r\n    {\r\n      return agentBalance;\r\n    }\r\n\r\n    function getagentTokenBalance() public view returns (uint256)\r\n    {\r\n      return agentTokenBalance;\r\n    }\r\n    \r\n    function removeAdmin(\r\n        address oldAdmin) onlyRootAdmin public\r\n    {\r\n        require(isAdmin[oldAdmin] && admins[0] != oldAdmin);\r\n\r\n        bool found = false;\r\n        for (uint i = 1; i < admins.length - 1; i++) {\r\n            if (!found && admins[i] == oldAdmin) {\r\n                found = true;\r\n            }\r\n            if (found) {\r\n                admins[i] = admins[i + 1];\r\n            }\r\n        }\r\n\r\n        admins.length--;\r\n        isAdmin[oldAdmin] = false;\r\n    }\r\n\r\n    function changeRootAdmin(\r\n        address newRootAdmin) onlyRootAdmin public\r\n    {\r\n        if (isAdmin[newRootAdmin] && admins[0] != newRootAdmin) {\r\n            removeAdmin(newRootAdmin);\r\n        }\r\n        admins[0] = newRootAdmin;\r\n        isAdmin[newRootAdmin] = true;\r\n    }\r\n\r\n    function addAdmin(\r\n        address newAdmin) onlyRootAdmin public\r\n    {\r\n        require(!isAdmin[newAdmin]);\r\n\r\n        isAdmin[newAdmin] = true;\r\n        admins.push(newAdmin);\r\n    }\r\n    \r\n    function depositToken(bytes32 walletID, uint256 amount) public returns (bool)\r\n    {\r\n        require(amount > 0);\r\n        require(approve(msg.sender, amount+1));\r\n   \r\n        uint256 _allowance = allowed[msg.sender][msg.sender];\r\n        balances[msg.sender] = balances[msg.sender].sub(amount);\r\n\r\n        wallets[walletID].tokenBalance = wallets[walletID].tokenBalance.add(amount);\r\n        allowed[msg.sender][msg.sender] = _allowance.sub(amount);\r\n\r\n        emit DepositToken(walletID, msg.sender, amount);\r\n        return true;\r\n    }\r\n  \r\n    function withdrawToken(\r\n        bytes32[] walletIDs,\r\n        address[] receivers,\r\n        uint256[] amounts,\r\n        uint64[] nonces,\r\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public returns (bool)\r\n    {\r\n        require(\r\n            walletIDs.length == receivers.length &&\r\n            walletIDs.length == amounts.length &&\r\n            walletIDs.length == nonces.length &&\r\n            walletIDs.length == v.length &&\r\n            walletIDs.length == r.length &&\r\n            walletIDs.length == s.length\r\n        );\r\n\r\n        for (uint i = 0; i < walletIDs.length; i++) {\r\n            bytes32 walletID = walletIDs[i];\r\n            address receiver = receivers[i];\r\n            uint256 amount = amounts[i];\r\n            uint64 nonce = nonces[i];\r\n            \r\n            address signer = getMessageSigner(\r\n                getWithdrawDigest(walletID, receiver, amount, nonce), v[i], r[i], s[i]\r\n            );\r\n            Wallet storage wallet = wallets[walletID];\r\n            if (\r\n                wallet.withdrawNonce < nonce &&\r\n                wallet.tokenBalance >= amount &&\r\n                wallet.authed[signer]\r\n            ) \r\n            {\r\n                wallet.withdrawNonce = nonce;\r\n                wallet.tokenBalance = wallet.tokenBalance.sub(amount);\r\n\t\t        balances[receiver] = balances[receiver].add(amount);\r\n\t\t       \r\n                emit WithdrawToken(walletID, nonce, amount, receiver);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function seedToken(\r\n        bytes32[] walletIDs,\r\n        uint256[] amounts,\r\n        uint64[] nonces,\r\n        uint8[] v, bytes32[] r, bytes32[] s) onlyAdmin public\r\n    {\r\n        require(\r\n            walletIDs.length == amounts.length &&\r\n            walletIDs.length == nonces.length &&\r\n            walletIDs.length == v.length &&\r\n            walletIDs.length == r.length &&\r\n            walletIDs.length == s.length\r\n        );\r\n        \r\n        uint256 addition = 0;\r\n\r\n        for (uint i = 0; i < walletIDs.length; i++) {\r\n            bytes32 walletID = walletIDs[i];\r\n            uint256 amount = amounts[i];\r\n            uint64 nonce = nonces[i];\r\n\r\n            address signer = getMessageSigner(\r\n                getSeedDigest(walletID, amount, nonce), v[i], r[i], s[i]\r\n            );\r\n\r\n            Wallet storage wallet = wallets[walletID];\r\n            if (\r\n                wallet.seedNonce < nonce &&\r\n                wallet.tokenBalance >= amount &&\r\n                wallet.authed[signer]\r\n            ) {\r\n                wallet.seedNonce = nonce;\r\n                wallet.tokenBalance = wallet.tokenBalance.sub(amount);\r\n                emit SeedToken(walletID, nonce, amount);\r\n                addition += amount;\r\n            }\r\n        }\r\n\r\n        agentTokenBalance += addition;\r\n    }\r\n\r\n\r\n    function gainToken(\r\n        bytes32[] walletIDs,\r\n        uint256[] recordIDs,\r\n        uint256[] amounts) onlyAdmin public\r\n    {\r\n        require(\r\n            walletIDs.length == recordIDs.length &&\r\n            walletIDs.length == amounts.length\r\n        );\r\n\r\n        uint256 remaining = agentTokenBalance;\r\n        \r\n        \r\n        for (uint i = 0; i < walletIDs.length; i++) {\r\n            bytes32 walletID = walletIDs[i];\r\n            uint256 amount = amounts[i];\r\n            \r\n            Wallet storage wallet = wallets[walletID];\r\n            require(amount <= remaining);\r\n\r\n            wallet.tokenBalance = wallet.tokenBalance.add(amount);\r\n            remaining = remaining.sub(amount);\r\n\r\n            emit GainToken(walletID, recordIDs[i], amount);\r\n        }\r\n\r\n        agentTokenBalance = remaining;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"oldAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"message\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"getMessageSigner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"getSeedDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"recordIDs\",\"type\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"gain\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"recordIDs\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"gainToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"myname\",\"type\":\"string\"}],\"name\":\"getNameDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newRootAdmin\",\"type\":\"address\"}],\"name\":\"changeRootAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"getWithdrawDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"myname\",\"type\":\"bytes32\"},{\"name\":\"root\",\"type\":\"address\"}],\"name\":\"getWalletDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getAuthDigest\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"seed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getagentTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"getSeedNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getagentBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint64[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"seedToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"gettokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"}],\"name\":\"getWithdrawNonce\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"walletID\",\"type\":\"bytes32\"},{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getAuthStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"walletIDs\",\"type\":\"bytes32[]\"},{\"name\":\"nameIDs\",\"type\":\"bytes32[]\"},{\"name\":\"agents\",\"type\":\"address[]\"},{\"name\":\"v\",\"type\":\"uint8[]\"},{\"name\":\"r\",\"type\":\"bytes32[]\"},{\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"auth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"Auth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Seed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Gain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SeedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"walletID\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"requestID\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GainToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "BaconCoin", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://bc558167c65b7541831e577d49e86d3f8ed22b7d15afef79012d144f6b180cbb"}