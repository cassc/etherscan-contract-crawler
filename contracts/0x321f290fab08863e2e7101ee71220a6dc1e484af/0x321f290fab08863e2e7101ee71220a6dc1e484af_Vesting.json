{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Vesting.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\n\\nimport \\\"IVesting.sol\\\";\\n\\ncontract Vesting is Ownable, IVesting {\\n\\n\\tstruct Vehicule {\\n\\t\\tbool \\tupdateable;\\n\\t\\tuint256 start;\\n\\t\\tuint256 end;\\n\\t\\tuint256 upfront;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 claimed;\\n\\t\\tuint256 claimedUpfront;\\n\\t}\\n\\n\\taddress public override co;\\n\\n\\tmapping(address => mapping(uint256 => Vehicule)) public override vehicules;\\n\\tmapping(address => uint256) public override vehiculeCount;\\n\\n\\tevent TokensClaimed(address indexed user, uint256 amount);\\n\\tevent VehiculeCreated(address indexed user, uint256 id, uint256 amount, uint256 start, uint256 end);\\n\\n\\tconstructor(address _co) {\\n\\t\\trequire(_co != address(0));\\n\\t\\tco = _co;\\n\\t}\\n\\n\\tfunction min(uint256 a, uint256 b) pure private returns(uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n\\n\\tfunction max(uint256 a, uint256 b) pure private returns(uint256) {\\n\\t\\treturn a > b ? a : b;\\n\\t}\\n\\n\\tfunction createVehicule(address _user, uint256 _amount, uint256 _upfront, uint256 _start, uint256 _end, bool _updateable) external onlyOwner returns(uint256){\\n\\t\\trequire(_end > _start, \\\"Vesting: wrong vehicule parametres\\\");\\n\\t\\trequire(_start > 0, \\\"Vesting: start cannot be 0\\\");\\n\\n\\t\\tuint256 counter = vehiculeCount[_user];\\n\\t\\tvehicules[_user][counter] = Vehicule(_updateable, _start, _end, _upfront, _amount, 0, 0);\\n\\t\\tvehiculeCount[_user]++;\\n\\t\\temit VehiculeCreated(_user, counter, _amount + _upfront, _start, _end);\\n\\t}\\n\\n\\tfunction killVehicule(address _user, uint256 _index) external onlyOwner {\\n\\t\\trequire(vehicules[_user][_index].updateable, \\\"Vesting: Can't kill\\\");\\n\\t\\tdelete vehicules[_user][_index];\\n\\t}\\n\\n\\tfunction endVehicule(address _user, uint256 _index) external onlyOwner {\\n\\t\\tVehicule storage vehicule = vehicules[_user][_index];\\n\\t\\trequire(vehicule.updateable, \\\"Vesting: Cannot end\\\");\\n\\t\\tuint256 _now = block.timestamp;\\n\\t\\tuint256 start = vehicule.start;\\n\\t\\tif (start == 0)\\n\\t\\t\\trevert(\\\"Vesting: vehicule does not exist\\\");\\n\\t\\tuint256 end = vehicule.end;\\n\\t\\tuint256 elapsed = min(end, max(_now, vehicule.start)) - start;\\n\\t\\tuint256 maxDelta = end - start;\\n\\t\\tuint256 unlocked = vehicule.amount * elapsed / maxDelta;\\n\\t\\tif (_now > start) {\\n\\t\\t\\tvehicule.amount = unlocked;\\n\\t\\t\\tvehicule.end = min(vehicule.end, _now);\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tvehicule.upfront = 0;\\n\\t\\t\\tvehicule.amount = 0;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fetchTokens(uint256 _amount) external onlyOwner {\\n\\t\\tIERC20(co).transfer(msg.sender, _amount);\\n\\t}\\n\\n\\tfunction claim(uint256 _index) external override {\\n\\t\\tuint256 _now = block.timestamp;\\n\\t\\t\\n\\t\\tVehicule storage vehicule = vehicules[msg.sender][_index];\\n\\n\\t\\tuint256 upfront = _claimUpfront(vehicule);\\n\\t\\tuint256 start = vehicule.start;\\n\\t\\tif (start == 0)\\n\\t\\t\\trevert(\\\"Vesting: vehicule does not exist\\\");\\n\\t\\trequire(_now > start, \\\"Vesting: cliff !started\\\");\\n\\t\\tuint256 end = vehicule.end;\\n\\t\\tuint256 elapsed = min(end, _now) - start;\\n\\t\\tuint256 maxDelta = end - start;\\n\\t\\t// yield = amount * delta / vest_duration - claimed_amount\\n\\t\\tuint256 yield = (vehicule.amount * elapsed / maxDelta) - vehicule.claimed;\\n\\t\\tvehicule.claimed += yield;\\n\\t\\tIERC20(co).transfer(msg.sender, yield + upfront);\\n\\t\\temit TokensClaimed(msg.sender, yield);\\n\\t}\\n\\n\\tfunction _claimUpfront(Vehicule storage vehicule) private returns(uint256) {\\n\\t\\tuint256 upfront = vehicule.upfront;\\n\\t\\tif (upfront > 0) {\\n\\t\\t\\tvehicule.upfront = 0;\\n\\t\\t\\tvehicule.claimedUpfront = upfront;\\n\\t\\t\\treturn upfront;\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction balanceOf(address _user) external view returns(uint256 totalVested) {\\n\\t\\tuint256 vehiculeCount = vehiculeCount[_user];\\n\\t\\tfor (uint256 i = 0; i < vehiculeCount; i++) {\\n\\t\\t\\tVehicule memory vehicule = vehicules[_user][i];\\n\\t\\t\\ttotalVested += totalVested + pendingReward(_user, i);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pendingReward(address _user, uint256 _index) public override view returns(uint256) {\\n\\t\\tVehicule memory vehicule = vehicules[_user][_index];\\n\\t\\tuint256 elapsed = min(vehicule.end, block.timestamp) - vehicule.start;\\n\\t\\tuint256 maxDelta = vehicule.end - vehicule.start;\\n\\t\\treturn vehicule.amount * elapsed / maxDelta - vehicule.claimed + vehicule.upfront;\\n\\t}\\n\\n\\tfunction claimed(address _user, uint256 _index) external view override returns(uint256) {\\n\\t\\tVehicule memory vehicule = vehicules[_user][_index];\\n\\t\\treturn vehicule.claimed + vehicule.claimedUpfront;\\n\\t}\\n}\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"IVesting.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\n\\ninterface IVesting {\\n\\tfunction co() external view returns(address);\\n\\n\\tfunction vehicules(address _user, uint256 _index) external view returns (\\n\\t\\tbool \\tupdateable,\\n\\t\\tuint256 start,\\n\\t\\tuint256 end,\\n\\t\\tuint256 upfront,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 claimed,\\n\\t\\tuint256 claimedUpfront);\\n\\tfunction vehiculeCount(address _user) external view returns (uint256);\\n\\tfunction claim(uint256 _index) external;\\n\\tfunction pendingReward(address _user, uint256 _index) external view returns(uint256);\\n\\tfunction claimed(address _user, uint256 _index) external view returns(uint256);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_co\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"VehiculeCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"co\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upfront\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_updateable\",\"type\":\"bool\"}],\"name\":\"createVehicule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"endVehicule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fetchTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"killVehicule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vehiculeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vehicules\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updateable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upfront\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedUpfront\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f828ba501b108fbc6c88ebdff81c401bb6b94848", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}