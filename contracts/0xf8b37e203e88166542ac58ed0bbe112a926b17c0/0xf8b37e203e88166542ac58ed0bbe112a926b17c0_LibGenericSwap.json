{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/RevertReasonForwarder.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAggregationExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n/// @title Interface for making arbitrary calls during swap\\ninterface IAggregationExecutor {\\n\\t/// @notice Make calls on `msgSender` with specified data\\n\\tfunction callBytes(address msgSender, bytes calldata data) external payable; // 0x2636f7f8\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDaiLikePermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\n/// @title Interface for DAI-style permits\\ninterface IDaiLikePermit {\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Simple.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC20Simple {\\n    function balanceOf(address account) external view returns (uint256);\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n    function balanceOf(address account) external view returns(uint256);\\n\\n\\tfunction transfer(address to, uint value) external returns (bool);\\n\\n\\tfunction withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MarginalFunctionality.sol\\\";\\nimport \\\"./LibUnitConverter.sol\\\";\\nimport \\\"./LibValidator.sol\\\";\\nimport \\\"./SafeTransferHelper.sol\\\";\\n\\nlibrary LibExchange {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t//  Flags for updateOrders\\n\\t//      All flags are explicit\\n\\tuint8 public constant kSell = 0;\\n\\tuint8 public constant kBuy = 1; //  if 0 - then sell\\n\\tuint8 public constant kCorrectMatcherFeeByOrderAmount = 2;\\n\\n\\tevent NewTrade(\\n\\t\\taddress indexed buyer,\\n\\t\\taddress indexed seller,\\n\\t\\taddress baseAsset,\\n\\t\\taddress quoteAsset,\\n\\t\\tuint64 filledPrice,\\n\\t\\tuint192 filledAmount,\\n\\t\\tuint192 amountQuote\\n\\t);\\n\\n\\tfunction _updateBalance(\\n\\t\\taddress user,\\n\\t\\taddress asset,\\n\\t\\tint amount,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal returns (uint tradeType) {\\n\\t\\t// 0 - in contract, 1 - from wallet\\n\\t\\tint beforeBalance = int(assetBalances[user][asset]);\\n\\t\\tint afterBalance = beforeBalance + amount;\\n\\t\\trequire((amount >= 0 && afterBalance >= beforeBalance) || (amount < 0 && afterBalance < beforeBalance), \\\"E11\\\");\\n\\n\\t\\tif (amount > 0 && beforeBalance < 0) {\\n\\t\\t\\tMarginalFunctionality.updateLiability(\\n\\t\\t\\t\\tuser,\\n\\t\\t\\t\\tasset,\\n\\t\\t\\t\\tliabilities,\\n\\t\\t\\t\\tuint112(uint256(amount)),\\n\\t\\t\\t\\tint192(afterBalance)\\n\\t\\t\\t);\\n\\t\\t} else if (beforeBalance >= 0 && afterBalance < 0) {\\n\\t\\t\\tif (asset != address(0)) {\\n\\t\\t\\t\\tafterBalance += int(_tryDeposit(asset, uint(-1 * afterBalance), user));\\n\\t\\t\\t}\\n\\n\\t\\t\\t// If we failed to deposit balance is still negative then we move user into liability\\n\\t\\t\\tif (afterBalance < 0) {\\n\\t\\t\\t\\tsetLiability(user, asset, int192(afterBalance), liabilities);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttradeType = beforeBalance > 0 ? 0 : 1;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (beforeBalance != afterBalance) {\\n\\t\\t\\trequire(afterBalance >= type(int192).min && afterBalance <= type(int192).max, \\\"E11\\\");\\n\\t\\t\\tassetBalances[user][asset] = int192(afterBalance);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to add liability\\n\\t * @param user - user which created liability\\n\\t * @param asset - liability asset\\n\\t * @param balance - current negative balance\\n\\t */\\n\\tfunction setLiability(\\n\\t\\taddress user,\\n\\t\\taddress asset,\\n\\t\\tint192 balance,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal {\\n\\t\\tliabilities[user].push(\\n\\t\\t\\tMarginalFunctionality.Liability({\\n\\t\\t\\t\\tasset: asset,\\n\\t\\t\\t\\ttimestamp: uint64(block.timestamp),\\n\\t\\t\\t\\toutstandingAmount: uint192(-balance)\\n\\t\\t\\t})\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _tryDeposit(address asset, uint amount, address user) internal returns (uint) {\\n\\t\\tuint256 amountInBase = uint256(LibUnitConverter.decimalToBaseUnit(asset, amount));\\n\\n\\t\\t// Query allowance before trying to transferFrom\\n\\t\\tif (\\n\\t\\t\\tIERC20(asset).balanceOf(user) >= amountInBase &&\\n\\t\\t\\tIERC20(asset).allowance(user, address(this)) >= amountInBase\\n\\t\\t) {\\n\\t\\t\\tSafeERC20.safeTransferFrom(IERC20(asset), user, address(this), amountInBase);\\n\\t\\t\\treturn amount;\\n\\t\\t} else {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction creditUserAssets(\\n\\t\\tuint tradeType,\\n\\t\\taddress user,\\n\\t\\tint amount,\\n\\t\\taddress asset,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal {\\n\\t\\tint beforeBalance = int(assetBalances[user][asset]);\\n\\t\\tint remainingAmount = amount + beforeBalance;\\n\\t\\trequire(\\n\\t\\t\\t(amount >= 0 && remainingAmount >= beforeBalance) || (amount < 0 && remainingAmount < beforeBalance),\\n\\t\\t\\t\\\"E11\\\"\\n\\t\\t);\\n\\t\\tint sentAmount = 0;\\n\\n\\t\\tif (tradeType == 0 && asset == address(0) && user.balance < 1e16) {\\n\\t\\t\\ttradeType = 1;\\n\\t\\t}\\n\\n\\t\\tif (tradeType == 1 && amount > 0 && remainingAmount > 0) {\\n\\t\\t\\tuint amountInBase = uint(LibUnitConverter.decimalToBaseUnit(asset, uint(amount)));\\n\\t\\t\\tuint contractBalance = asset == address(0) ? address(this).balance : IERC20(asset).balanceOf(address(this));\\n\\t\\t\\tif (contractBalance >= amountInBase) {\\n\\t\\t\\t\\tSafeTransferHelper.safeTransferTokenOrETH(asset, user, amountInBase);\\n\\t\\t\\t\\tsentAmount = amount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tint toUpdate = amount - sentAmount;\\n\\t\\tif (toUpdate != 0) {\\n\\t\\t\\t_updateBalance(user, asset, toUpdate, assetBalances, liabilities);\\n\\t\\t}\\n\\t}\\n\\n\\tstruct SwapBalanceChanges {\\n\\t\\tint amountOut;\\n\\t\\taddress assetOut;\\n\\t\\tint amountIn;\\n\\t\\taddress assetIn;\\n\\t}\\n\\n\\t/**\\n\\t *  @notice update user balances and send matcher fee\\n\\t *  @param flags uint8, see constants for possible flags of order\\n\\t */\\n\\tfunction updateOrderBalanceDebit(\\n\\t\\tLibValidator.Order memory order,\\n\\t\\tuint112 amountBase,\\n\\t\\tuint112 amountQuote,\\n\\t\\tuint8 flags,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => MarginalFunctionality.Liability[]) storage liabilities\\n\\t) internal returns (uint tradeType, int actualIn) {\\n\\t\\tbool isSeller = (flags & kBuy) == 0;\\n\\n\\t\\t{\\n\\t\\t\\t//  Stack too deep\\n\\t\\t\\tbool isCorrectFee = ((flags & kCorrectMatcherFeeByOrderAmount) != 0);\\n\\n\\t\\t\\tif (isCorrectFee) {\\n\\t\\t\\t\\t// matcherFee: u64, filledAmount u128 => matcherFee*filledAmount fit u256\\n\\t\\t\\t\\t// result matcherFee fit u64\\n\\t\\t\\t\\torder.matcherFee = uint64((uint256(order.matcherFee) * amountBase) / order.amount); //rewrite in memory only\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (amountBase > 0) {\\n\\t\\t\\tSwapBalanceChanges memory swap;\\n\\n\\t\\t\\t(swap.amountOut, swap.amountIn) = isSeller\\n\\t\\t\\t\\t? (-1 * int(uint(amountBase)), int(uint(amountQuote)))\\n\\t\\t\\t\\t: (-1 * int(uint(amountQuote)), int(uint(amountBase)));\\n\\n\\t\\t\\t(swap.assetOut, swap.assetIn) = isSeller\\n\\t\\t\\t\\t? (order.baseAsset, order.quoteAsset)\\n\\t\\t\\t\\t: (order.quoteAsset, order.baseAsset);\\n\\n\\t\\t\\tuint feeTradeType = 1;\\n\\t\\t\\tif (order.matcherFeeAsset == swap.assetOut) {\\n\\t\\t\\t\\tswap.amountOut -= int(uint(order.matcherFee));\\n\\t\\t\\t} else if (order.matcherFeeAsset == swap.assetIn) {\\n\\t\\t\\t\\tswap.amountIn -= int(uint(order.matcherFee));\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfeeTradeType = _updateBalance(\\n\\t\\t\\t\\t\\torder.senderAddress,\\n\\t\\t\\t\\t\\torder.matcherFeeAsset,\\n\\t\\t\\t\\t\\t-1 * int256(uint256(order.matcherFee)),\\n\\t\\t\\t\\t\\tassetBalances,\\n\\t\\t\\t\\t\\tliabilities\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\ttradeType =\\n\\t\\t\\t\\tfeeTradeType &\\n\\t\\t\\t\\t_updateBalance(order.senderAddress, swap.assetOut, swap.amountOut, assetBalances, liabilities);\\n\\n\\t\\t\\tactualIn = swap.amountIn;\\n\\n\\t\\t\\t_updateBalance(\\n\\t\\t\\t\\torder.matcherAddress,\\n\\t\\t\\t\\torder.matcherFeeAsset,\\n\\t\\t\\t\\tint256(uint256(order.matcherFee)),\\n\\t\\t\\t\\tassetBalances,\\n\\t\\t\\t\\tliabilities\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibGenericSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./LibValidator.sol\\\";\\nimport \\\"./LibExchange.sol\\\";\\nimport \\\"../interfaces/IAggregationExecutor.sol\\\";\\nimport \\\"../utils/Errors.sol\\\";\\n\\nlibrary LibGenericSwap {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeTransferHelper for IERC20;\\n\\n\\tevent OrionPoolSwap(\\n\\t\\taddress sender,\\n\\t\\taddress st,\\n\\t\\taddress rt,\\n\\t\\tuint256 st_r,\\n\\t\\tuint256 st_a,\\n\\t\\tuint256 rt_r,\\n\\t\\tuint256 rt_a,\\n\\t\\taddress f\\n\\t);\\n\\n\\terror ZeroMinReturn();\\n\\terror ZeroReturnAmount();\\n\\terror EthDepositRejected();\\n\\terror InsufficientReturnAmount();\\n\\terror InsufficientBalance();\\n\\n\\tfunction fillThroughPools(\\n\\t\\taddress senderAddress,\\n\\t\\tIAggregationExecutor executor,\\n\\t\\tLibValidator.SwapDescription memory desc,\\n\\t\\tbytes calldata permit,\\n\\t\\tbytes calldata data,\\n\\t\\taddress weth\\n\\t) external {\\n\\t\\t(uint256 returnAmount, uint256 spentAmount, ) = swap(senderAddress, executor, desc, permit, data, weth);\\n\\n\\t\\tuint112 filledAmount = LibUnitConverter.baseUnitToDecimal(address(desc.srcToken), spentAmount);\\n\\t\\tuint112 quoteAmount = LibUnitConverter.baseUnitToDecimal(address(desc.dstToken), returnAmount);\\n\\t\\tuint64 filledPrice = uint64((quoteAmount * 1e8) / filledAmount);\\n\\n\\t\\temit LibExchange.NewTrade(\\n\\t\\t\\tsenderAddress,\\n\\t\\t\\taddress(this),\\n\\t\\t\\taddress(desc.srcToken),\\n\\t\\t\\taddress(desc.dstToken),\\n\\t\\t\\tfilledPrice,\\n\\t\\t\\tfilledAmount,\\n\\t\\t\\tquoteAmount\\n\\t\\t);\\n\\t}\\n\\n\\tfunction swap(\\n\\t\\taddress sender,\\n\\t\\tIAggregationExecutor executor,\\n\\t\\tLibValidator.SwapDescription memory desc,\\n\\t\\tbytes calldata permit,\\n\\t\\tbytes calldata data,\\n\\t\\taddress weth\\n\\t) public returns (uint256 returnAmount, uint256 spentAmount, uint256 gasLeft) {\\n\\t\\tif (desc.minReturnAmount == 0) revert ZeroMinReturn();\\n\\n\\t\\t(desc.amount, desc.minReturnAmount) = (\\n\\t\\t\\tLibUnitConverter.decimalToBaseUnit(address(desc.srcToken), desc.amount),\\n\\t\\t\\tLibUnitConverter.decimalToBaseUnit(address(desc.dstToken), desc.minReturnAmount)\\n\\t\\t);\\n\\t\\tbool srcETH = SafeTransferHelper.isETH(desc.srcToken);\\n\\t\\tif (msg.value != (srcETH ? desc.amount : 0)) revert Errors.InvalidMsgValue();\\n\\n\\t\\tif (!srcETH) {\\n\\t\\t\\tif (permit.length > 0) {\\n\\t\\t\\t\\tdesc.srcToken.safePermit(permit);\\n\\t\\t\\t}\\n\\t\\t\\tdesc.srcToken.safeTransferFrom(sender, desc.srcReceiver, desc.amount);\\n\\t\\t} else {\\n\\t\\t\\tIWETH(weth).deposit{value: desc.amount}();\\n\\t\\t\\tassert(IWETH(weth).transfer(desc.srcReceiver, desc.amount));\\n\\t\\t}\\n\\t\\tif (SafeTransferHelper.isETH(desc.dstToken)) {\\n\\t\\t\\treturnAmount = IERC20(weth).uniBalanceOf(address(this));\\n\\t\\t} else {\\n\\t\\t\\treturnAmount = desc.dstToken.uniBalanceOf(address(this));\\n\\t\\t}\\n\\t\\t_execute(sender, executor, data);\\n\\t\\tspentAmount = desc.amount;\\n\\t\\tif (SafeTransferHelper.isETH(desc.dstToken)) {\\n\\t\\t\\treturnAmount = IERC20(weth).uniBalanceOf(address(this)) - returnAmount;\\n\\t\\t} else {\\n\\t\\t\\treturnAmount = desc.dstToken.uniBalanceOf(address(this)) - returnAmount;\\n\\t\\t}\\n\\t\\tif (returnAmount == 0) revert ZeroReturnAmount();\\n\\t\\tunchecked {\\n\\t\\t\\treturnAmount--;\\n\\t\\t}\\n\\t\\tif (returnAmount < desc.minReturnAmount) revert InsufficientReturnAmount();\\n\\n\\t\\taddress payable dstReceiver = (desc.dstReceiver == address(0)) ? payable(sender) : desc.dstReceiver;\\n\\t\\tSafeTransferHelper.safeAutoTransferTo(weth, address(desc.dstToken), dstReceiver, returnAmount);\\n\\n\\t\\tgasLeft = gasleft();\\n\\n\\t\\temit OrionPoolSwap(\\n\\t\\t\\tsender,\\n\\t\\t\\taddress(desc.srcToken),\\n\\t\\t\\taddress(desc.dstToken),\\n\\t\\t\\tspentAmount,\\n\\t\\t\\tspentAmount,\\n\\t\\t\\treturnAmount,\\n\\t\\t\\treturnAmount,\\n\\t\\t\\taddress(0xA6E4Ce17474d790fb25E779F9317c55963D2cbdf)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _execute(address srcTokenOwner, IAggregationExecutor executor, bytes calldata data) private {\\n\\t\\tbytes4 callBytesSelector = executor.callBytes.selector;\\n\\t\\tassembly {\\n\\t\\t\\t// solhint-disable-line no-inline-assembly\\n\\t\\t\\tlet ptr := mload(0x40)\\n\\t\\t\\tmstore(ptr, callBytesSelector)\\n\\t\\t\\tmstore(add(ptr, 0x04), srcTokenOwner)\\n\\t\\t\\tcalldatacopy(add(ptr, 0x24), data.offset, data.length)\\n\\n\\t\\t\\tif iszero(call(gas(), executor, 0, ptr, add(0x24, data.length), 0, 0)) {\\n\\t\\t\\t\\treturndatacopy(ptr, 0, returndatasize())\\n\\t\\t\\t\\trevert(ptr, returndatasize())\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibUnitConverter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IERC20Simple.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary LibUnitConverter {\\n\\tusing SafeMath for uint;\\n\\n\\t/**\\n        @notice convert asset amount from8 decimals (10^8) to its base unit\\n     */\\n\\tfunction decimalToBaseUnit(address assetAddress, uint amount) internal view returns (uint112 baseValue) {\\n\\t\\tuint256 result;\\n\\n\\t\\tif (assetAddress == address(0)) {\\n\\t\\t\\tresult = amount.mul(1 ether).div(10 ** 8); // 18 decimals\\n\\t\\t} else {\\n\\t\\t\\tuint decimals = IERC20Simple(assetAddress).decimals();\\n\\n\\t\\t\\tresult = amount.mul(10 ** decimals).div(10 ** 8);\\n\\t\\t}\\n\\n\\t\\trequire(result < uint112(type(int112).max), \\\"E3U\\\");\\n\\t\\tbaseValue = uint112(result);\\n\\t}\\n\\n\\t/**\\n        @notice convert asset amount from its base unit to 8 decimals (10^8)\\n     */\\n\\tfunction baseUnitToDecimal(address assetAddress, uint amount) internal view returns (uint112 decimalValue) {\\n\\t\\tuint256 result;\\n\\n\\t\\tif (assetAddress == address(0)) {\\n\\t\\t\\tresult = amount.mul(10 ** 8).div(1 ether);\\n\\t\\t} else {\\n\\t\\t\\tuint decimals = IERC20Simple(assetAddress).decimals();\\n\\n\\t\\t\\tresult = amount.mul(10 ** 8).div(10 ** decimals);\\n\\t\\t}\\n\\t\\trequire(result < uint112(type(int112).max), \\\"E3U\\\");\\n\\t\\tdecimalValue = uint112(result);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nlibrary LibValidator {\\n\\tusing ECDSA for bytes32;\\n\\n\\tstring public constant DOMAIN_NAME = \\\"Orion Exchange\\\";\\n\\tstring public constant DOMAIN_VERSION = \\\"1\\\";\\n\\tuint256 public constant CHAIN_ID = 1;\\n\\tbytes32 public constant DOMAIN_SALT = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a557;\\n\\n\\tbytes32 public constant EIP712_DOMAIN_TYPEHASH =\\n\\t\\tkeccak256(abi.encodePacked(\\\"EIP712Domain(string name,string version,uint256 chainId,bytes32 salt)\\\"));\\n\\tbytes32 public constant ORDER_TYPEHASH =\\n\\t\\tkeccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"Order(address senderAddress,address matcherAddress,address baseAsset,address quoteAsset,address matcherFeeAsset,uint64 amount,uint64 price,uint64 matcherFee,uint64 nonce,uint64 expiration,uint8 buySide)\\\"\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\tbytes32 public constant DOMAIN_SEPARATOR =\\n\\t\\tkeccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tEIP712_DOMAIN_TYPEHASH,\\n\\t\\t\\t\\tkeccak256(bytes(DOMAIN_NAME)),\\n\\t\\t\\t\\tkeccak256(bytes(DOMAIN_VERSION)),\\n\\t\\t\\t\\tCHAIN_ID,\\n\\t\\t\\t\\tDOMAIN_SALT\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\tstruct Order {\\n\\t\\taddress senderAddress;\\n\\t\\taddress matcherAddress;\\n\\t\\taddress baseAsset;\\n\\t\\taddress quoteAsset;\\n\\t\\taddress matcherFeeAsset;\\n\\t\\tuint64 amount;\\n\\t\\tuint64 price;\\n\\t\\tuint64 matcherFee;\\n\\t\\tuint64 nonce;\\n\\t\\tuint64 expiration;\\n\\t\\tuint8 buySide; // buy or sell\\n\\t\\tbool isPersonalSign;\\n\\t\\tbytes signature;\\n\\t}\\n\\n    struct SwapDescription {\\n\\t\\tIERC20 srcToken;\\n\\t\\tIERC20 dstToken;\\n\\t\\taddress payable srcReceiver;\\n\\t\\taddress payable dstReceiver;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 minReturnAmount;\\n\\t\\tuint256 flags;\\n\\t}\\n\\n\\t/**\\n\\t * @dev validate order signature\\n\\t */\\n\\tfunction validateV3(Order memory order) public pure returns (bool) {\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, getTypeValueHash(order)));\\n\\n\\t\\treturn digest.recover(order.signature) == order.senderAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @return hash order\\n\\t */\\n\\tfunction getTypeValueHash(Order memory _order) internal pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tORDER_TYPEHASH,\\n\\t\\t\\t\\t\\t_order.senderAddress,\\n\\t\\t\\t\\t\\t_order.matcherAddress,\\n\\t\\t\\t\\t\\t_order.baseAsset,\\n\\t\\t\\t\\t\\t_order.quoteAsset,\\n\\t\\t\\t\\t\\t_order.matcherFeeAsset,\\n\\t\\t\\t\\t\\t_order.amount,\\n\\t\\t\\t\\t\\t_order.price,\\n\\t\\t\\t\\t\\t_order.matcherFee,\\n\\t\\t\\t\\t\\t_order.nonce,\\n\\t\\t\\t\\t\\t_order.expiration,\\n\\t\\t\\t\\t\\t_order.buySide\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev basic checks of matching orders against each other\\n\\t */\\n\\tfunction checkOrdersInfo(\\n\\t\\tOrder memory buyOrder,\\n\\t\\tOrder memory sellOrder,\\n\\t\\taddress sender,\\n\\t\\tuint256 filledAmount,\\n\\t\\tuint256 filledPrice,\\n\\t\\tuint256 currentTime,\\n\\t\\taddress allowedMatcher\\n\\t) public pure {\\n\\t\\tbuyOrder.isPersonalSign ? require(validatePersonal(buyOrder), \\\"E2BP\\\") : require(validateV3(buyOrder), \\\"E2B\\\");\\n\\t\\tsellOrder.isPersonalSign ? require(validatePersonal(sellOrder), \\\"E2SP\\\") : require(validateV3(sellOrder), \\\"E2S\\\");\\n\\n\\t\\t// Same matcher address\\n\\t\\trequire(buyOrder.matcherAddress == sender && sellOrder.matcherAddress == sender, \\\"E3M\\\");\\n\\n\\t\\tif (allowedMatcher != address(0)) {\\n\\t\\t\\trequire(buyOrder.matcherAddress == allowedMatcher, \\\"E3M2\\\");\\n\\t\\t}\\n\\n\\t\\t// Check matching assets\\n\\t\\trequire(buyOrder.baseAsset == sellOrder.baseAsset && buyOrder.quoteAsset == sellOrder.quoteAsset, \\\"E3As\\\");\\n\\n\\t\\t// Check order amounts\\n\\t\\trequire(filledAmount <= buyOrder.amount, \\\"E3AmB\\\");\\n\\t\\trequire(filledAmount <= sellOrder.amount, \\\"E3AmS\\\");\\n\\n\\t\\t// Check Price values\\n\\t\\trequire(filledPrice <= buyOrder.price, \\\"E3\\\");\\n\\t\\trequire(filledPrice >= sellOrder.price, \\\"E3\\\");\\n\\n\\t\\t// Check Expiration Time. Convert to seconds first\\n\\t\\trequire(buyOrder.expiration / 1000 >= currentTime, \\\"E4B\\\");\\n\\t\\trequire(sellOrder.expiration / 1000 >= currentTime, \\\"E4S\\\");\\n\\n\\t\\trequire(buyOrder.buySide == 1 && sellOrder.buySide == 0, \\\"E3D\\\");\\n\\t}\\n\\n\\tfunction getEthSignedOrderHash(Order memory _order) public pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\\"order\\\",\\n\\t\\t\\t\\t\\t_order.senderAddress,\\n\\t\\t\\t\\t\\t_order.matcherAddress,\\n\\t\\t\\t\\t\\t_order.baseAsset,\\n\\t\\t\\t\\t\\t_order.quoteAsset,\\n\\t\\t\\t\\t\\t_order.matcherFeeAsset,\\n\\t\\t\\t\\t\\t_order.amount,\\n\\t\\t\\t\\t\\t_order.price,\\n\\t\\t\\t\\t\\t_order.matcherFee,\\n\\t\\t\\t\\t\\t_order.nonce,\\n\\t\\t\\t\\t\\t_order.expiration,\\n\\t\\t\\t\\t\\t_order.buySide\\n\\t\\t\\t\\t)\\n\\t\\t\\t).toEthSignedMessageHash();\\n\\t}\\n\\n\\tfunction validatePersonal(Order memory order) public pure returns (bool) {\\n\\t\\tbytes32 digest = getEthSignedOrderHash(order);\\n\\t\\treturn digest.recover(order.signature) == order.senderAddress;\\n\\t}\\n\\n\\tfunction checkOrderSingleMatch(\\n\\t\\tOrder memory order,\\n        SwapDescription memory desc,\\n\\t\\tuint256 filledAmount,\\n\\t\\tuint256 currentTime\\n\\t) internal pure {\\n\\t\\torder.isPersonalSign ? require(validatePersonal(order), \\\"E2BP\\\") : require(validateV3(order), \\\"E2B\\\");\\n\\n        uint256 amountQuote = uint256(filledAmount) * order.price / 10**8;\\n\\n        uint256 amount_spend;\\n        uint256 amount_receive;\\n\\t\\tif (order.buySide == 1) {\\n\\t\\t\\trequire(order.quoteAsset == address(desc.srcToken) && order.baseAsset == address(desc.dstToken), \\\"E3As\\\");\\n            (amount_spend, amount_receive) = (amountQuote, filledAmount);\\n\\t\\t} else {\\n\\t\\t\\trequire(order.baseAsset == address(desc.srcToken) && order.quoteAsset == address(desc.dstToken), \\\"E3As\\\");\\n            (amount_spend, amount_receive) = (filledAmount, amountQuote);\\n\\t\\t}\\n\\n        require(order.senderAddress == desc.dstReceiver, \\\"IncorrectReceiver\\\");\\n        require(amount_spend == desc.amount, \\\"IncorrectAmount\\\");\\n        require(amount_receive >= desc.minReturnAmount, \\\"IncorrectAmount\\\");\\n\\t\\trequire(filledAmount <= order.amount, \\\"E3AmB\\\");\\n\\t\\trequire(order.expiration / 1000 >= currentTime, \\\"E4B\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/MarginalFunctionality.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\npragma experimental ABIEncoderV2;\\nimport \\\"../PriceOracleInterface.sol\\\";\\n\\nlibrary MarginalFunctionality {\\n\\t// We have the following approach: when liability is created we store\\n\\t// timestamp and size of liability. If the subsequent trade will deepen\\n\\t// this liability or won't fully cover it timestamp will not change.\\n\\t// However once outstandingAmount is covered we check whether balance on\\n\\t// that asset is positive or not. If not, liability still in the place but\\n\\t// time counter is dropped and timestamp set to `now`.\\n\\tstruct Liability {\\n\\t\\taddress asset;\\n\\t\\tuint64 timestamp;\\n\\t\\tuint192 outstandingAmount;\\n\\t}\\n\\n\\tenum PositionState {\\n\\t\\tPOSITIVE,\\n\\t\\tNEGATIVE, // weighted position below 0\\n\\t\\tOVERDUE, // liability is not returned for too long\\n\\t\\tNOPRICE, // some assets has no price or expired\\n\\t\\tINCORRECT // some of the basic requirements are not met: too many liabilities, no locked stake, etc\\n\\t}\\n\\n\\tstruct Position {\\n\\t\\tPositionState state;\\n\\t\\tint256 weightedPosition; // sum of weighted collateral minus liabilities\\n\\t\\tint256 totalPosition; // sum of unweighted (total) collateral minus liabilities\\n\\t\\tint256 totalLiabilities; // total liabilities value\\n\\t}\\n\\n\\t// Constants from Exchange contract used for calculations\\n\\tstruct UsedConstants {\\n\\t\\taddress user;\\n\\t\\taddress _oracleAddress;\\n\\t\\taddress _orionTokenAddress;\\n\\t\\tuint64 positionOverdue;\\n\\t\\tuint64 priceOverdue;\\n\\t\\tuint8 stakeRisk;\\n\\t\\tuint8 liquidationPremium;\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to multiply numbers with uint8 based percent numbers\\n\\t */\\n\\tfunction uint8Percent(int192 _a, uint8 _b) internal pure returns (int192 c) {\\n\\t\\tint a = int256(_a);\\n\\t\\tint b = int256(uint256(_b));\\n\\t\\tint d = 255;\\n\\t\\tc = int192((a > 65536) ? (a / d) * b : (a * b) / d);\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to fetch asset prices in ORN tokens\\n\\t */\\n\\tfunction getAssetPrice(address asset, address oracle) internal view returns (uint64 price, uint64 timestamp) {\\n\\t\\tPriceOracleInterface.PriceDataOut memory assetPriceData = PriceOracleInterface(oracle).assetPrices(asset);\\n\\t\\t(price, timestamp) = (assetPriceData.price, assetPriceData.timestamp);\\n\\t}\\n\\n\\t/**\\n     * @dev method to calc weighted and absolute collateral value\\n     * @notice it only count for assets in collateralAssets list, all other\\n               assets will add 0 to position.\\n     * @return outdated whether any price is outdated\\n     * @return weightedPosition in ORN\\n     * @return totalPosition in ORN\\n     */\\n\\tfunction calcAssets(\\n\\t\\taddress[] storage collateralAssets,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => uint8) storage assetRisks,\\n\\t\\taddress user,\\n\\t\\taddress orionTokenAddress,\\n\\t\\taddress oracleAddress,\\n\\t\\tuint64 priceOverdue\\n\\t) internal view returns (bool outdated, int192 weightedPosition, int192 totalPosition) {\\n\\t\\tuint256 collateralAssetsLength = collateralAssets.length;\\n\\t\\tfor (uint256 i = 0; i < collateralAssetsLength; i++) {\\n\\t\\t\\taddress asset = collateralAssets[i];\\n\\t\\t\\tif (assetBalances[user][asset] < 0) continue; // will be calculated in calcLiabilities\\n\\t\\t\\t(uint64 price, uint64 timestamp) = (1e8, 0xfffffff000000000);\\n\\n\\t\\t\\tif (asset != orionTokenAddress) {\\n\\t\\t\\t\\t(price, timestamp) = getAssetPrice(asset, oracleAddress);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// balance: i192, price u64 => balance*price fits i256\\n\\t\\t\\t// since generally balance <= N*maxInt112 (where N is number operations with it),\\n\\t\\t\\t// assetValue <= N*maxInt112*maxUInt64/1e8.\\n\\t\\t\\t// That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n\\n\\t\\t\\tuint8 specificRisk = assetRisks[asset];\\n\\t\\t\\tint192 balance = assetBalances[user][asset];\\n\\t\\t\\tint256 _assetValue = (int256(balance) * int256(uint256(price))) / 1e8;\\n\\t\\t\\tint192 assetValue = int192(_assetValue);\\n\\n\\t\\t\\t// Overflows logic holds here as well, except that N is the number of\\n\\t\\t\\t// operations for all assets\\n\\n\\t\\t\\tif (assetValue > 0) {\\n\\t\\t\\t\\tweightedPosition += uint8Percent(assetValue, specificRisk);\\n\\t\\t\\t\\ttotalPosition += assetValue;\\n\\t\\t\\t\\toutdated = outdated || ((timestamp + priceOverdue) < block.timestamp);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn (outdated, weightedPosition, totalPosition);\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to calc liabilities\\n\\t * @return outdated whether any price is outdated\\n\\t * @return overdue whether any liability is overdue\\n\\t * @return weightedPosition weightedLiability == totalLiability in ORN\\n\\t * @return totalPosition totalLiability in ORN\\n\\t */\\n\\tfunction calcLiabilities(\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\taddress user,\\n\\t\\taddress oracleAddress,\\n\\t\\tuint64 positionOverdue,\\n\\t\\tuint64 priceOverdue\\n\\t) internal view returns (bool outdated, bool overdue, int192 weightedPosition, int192 totalPosition) {\\n\\t\\tuint256 liabilitiesLength = liabilities[user].length;\\n\\n\\t\\tfor (uint256 i = 0; i < liabilitiesLength; i++) {\\n\\t\\t\\tLiability storage liability = liabilities[user][i];\\n\\t\\t\\tint192 balance = assetBalances[user][liability.asset];\\n\\t\\t\\t(uint64 price, uint64 timestamp) = getAssetPrice(liability.asset, oracleAddress);\\n\\t\\t\\t// balance: i192, price u64 => balance*price fits i256\\n\\t\\t\\t// since generally balance <= N*maxInt112 (where N is number operations with it),\\n\\t\\t\\t// assetValue <= N*maxInt112*maxUInt64/1e8.\\n\\t\\t\\t// That is if N<= 2**17 *1e8 = 1.3e13  we can neglect overflows here\\n\\n\\t\\t\\tint192 liabilityValue = int192((int256(balance) * int256(uint256(price))) / 1e8);\\n\\t\\t\\tweightedPosition += liabilityValue; //already negative since balance is negative\\n\\t\\t\\ttotalPosition += liabilityValue;\\n\\t\\t\\toverdue = overdue || ((liability.timestamp + positionOverdue) < block.timestamp);\\n\\t\\t\\toutdated = outdated || ((timestamp + priceOverdue) < block.timestamp);\\n\\t\\t}\\n\\n\\t\\treturn (outdated, overdue, weightedPosition, totalPosition);\\n\\t}\\n\\n\\t/**\\n\\t * @dev method to calc Position\\n\\t * @return result position structure\\n\\t */\\n\\tfunction calcPosition(\\n\\t\\taddress[] storage collateralAssets,\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => uint8) storage assetRisks,\\n\\t\\tUsedConstants memory constants\\n\\t) public view returns (Position memory result) {\\n\\t\\t(bool outdatedPrice, int192 weightedPosition, int192 totalPosition) = calcAssets(\\n\\t\\t\\tcollateralAssets,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tassetRisks,\\n\\t\\t\\tconstants.user,\\n\\t\\t\\tconstants._orionTokenAddress,\\n\\t\\t\\tconstants._oracleAddress,\\n\\t\\t\\tconstants.priceOverdue\\n\\t\\t);\\n\\n\\t\\t(bool _outdatedPrice, bool overdue, int192 _weightedPosition, int192 _totalPosition) = calcLiabilities(\\n\\t\\t\\tliabilities,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tconstants.user,\\n\\t\\t\\tconstants._oracleAddress,\\n\\t\\t\\tconstants.positionOverdue,\\n\\t\\t\\tconstants.priceOverdue\\n\\t\\t);\\n\\n\\t\\tweightedPosition += _weightedPosition;\\n\\t\\ttotalPosition += _totalPosition;\\n\\t\\toutdatedPrice = outdatedPrice || _outdatedPrice;\\n\\t\\tif (_totalPosition < 0) {\\n\\t\\t\\tresult.totalLiabilities = _totalPosition;\\n\\t\\t}\\n\\t\\tif (weightedPosition < 0) {\\n\\t\\t\\tresult.state = PositionState.NEGATIVE;\\n\\t\\t}\\n\\t\\tif (outdatedPrice) {\\n\\t\\t\\tresult.state = PositionState.NOPRICE;\\n\\t\\t}\\n\\t\\tif (overdue) {\\n\\t\\t\\tresult.state = PositionState.OVERDUE;\\n\\t\\t}\\n\\t\\tresult.weightedPosition = weightedPosition;\\n\\t\\tresult.totalPosition = totalPosition;\\n\\t}\\n\\n\\t/**\\n\\t * @dev method removes liability\\n\\t */\\n\\tfunction removeLiability(address user, address asset, mapping(address => Liability[]) storage liabilities) public {\\n\\t\\tuint256 length = liabilities[user].length;\\n\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\tif (liabilities[user][i].asset == asset) {\\n\\t\\t\\t\\tif (length > 1) {\\n\\t\\t\\t\\t\\tliabilities[user][i] = liabilities[user][length - 1];\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tliabilities[user].pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev method update liability\\n\\t * @notice implement logic for outstandingAmount (see Liability description)\\n\\t */\\n\\tfunction updateLiability(\\n\\t\\taddress user,\\n\\t\\taddress asset,\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tuint112 depositAmount,\\n\\t\\tint192 currentBalance\\n\\t) internal {\\n\\t\\tif (currentBalance >= 0) {\\n\\t\\t\\tremoveLiability(user, asset, liabilities);\\n\\t\\t} else {\\n\\t\\t\\tuint256 i;\\n\\t\\t\\tuint256 liabilitiesLength = liabilities[user].length;\\n\\t\\t\\tfor (; i < liabilitiesLength - 1; i++) {\\n\\t\\t\\t\\tif (liabilities[user][i].asset == asset) break;\\n\\t\\t\\t}\\n\\t\\t\\tLiability storage liability = liabilities[user][i];\\n\\t\\t\\tif (depositAmount >= liability.outstandingAmount) {\\n\\t\\t\\t\\tliability.outstandingAmount = uint192(-currentBalance);\\n\\t\\t\\t\\tliability.timestamp = uint64(block.timestamp);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tliability.outstandingAmount -= depositAmount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n     * @dev partially liquidate, that is cover some asset liability to get\\n            ORN from misbehavior broker\\n     */\\n\\tfunction partiallyLiquidate(\\n\\t\\taddress[] storage collateralAssets,\\n\\t\\tmapping(address => Liability[]) storage liabilities,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tmapping(address => uint8) storage assetRisks,\\n\\t\\tUsedConstants memory constants,\\n\\t\\taddress redeemedAsset,\\n\\t\\tuint112 amount\\n\\t) public {\\n\\t\\t//Note: constants.user - is broker who will be liquidated\\n\\t\\tPosition memory initialPosition = calcPosition(\\n\\t\\t\\tcollateralAssets,\\n\\t\\t\\tliabilities,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tassetRisks,\\n\\t\\t\\tconstants\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tinitialPosition.state == PositionState.NEGATIVE || initialPosition.state == PositionState.OVERDUE,\\n\\t\\t\\t\\\"E7\\\"\\n\\t\\t);\\n\\t\\taddress liquidator = msg.sender;\\n\\t\\trequire(assetBalances[liquidator][redeemedAsset] >= int192(uint192(amount)), \\\"E8\\\");\\n\\t\\trequire(assetBalances[constants.user][redeemedAsset] < 0, \\\"E15\\\");\\n\\t\\tassetBalances[liquidator][redeemedAsset] -= int192(uint192(amount));\\n\\t\\tassetBalances[constants.user][redeemedAsset] += int192(uint192(amount));\\n\\n\\t\\tif (assetBalances[constants.user][redeemedAsset] >= 0)\\n\\t\\t\\tremoveLiability(constants.user, redeemedAsset, liabilities);\\n\\n\\t\\t(uint64 price, uint64 timestamp) = getAssetPrice(redeemedAsset, constants._oracleAddress);\\n\\t\\trequire((timestamp + constants.priceOverdue) > block.timestamp, \\\"E9\\\"); //Price is outdated\\n\\n\\t\\treimburseLiquidator(\\n\\t\\t\\tamount,\\n\\t\\t\\tprice,\\n\\t\\t\\tliquidator,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tconstants.liquidationPremium,\\n\\t\\t\\tconstants.user,\\n\\t\\t\\tconstants._orionTokenAddress\\n\\t\\t);\\n\\n\\t\\tPosition memory finalPosition = calcPosition(\\n\\t\\t\\tcollateralAssets,\\n\\t\\t\\tliabilities,\\n\\t\\t\\tassetBalances,\\n\\t\\t\\tassetRisks,\\n\\t\\t\\tconstants\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tuint(finalPosition.state) < 3 && //POSITIVE,NEGATIVE or OVERDUE\\n\\t\\t\\t\\t(finalPosition.weightedPosition > initialPosition.weightedPosition),\\n\\t\\t\\t\\\"E10\\\"\\n\\t\\t); //Incorrect state position after liquidation\\n\\t\\tif (finalPosition.state == PositionState.POSITIVE)\\n\\t\\t\\trequire(finalPosition.weightedPosition < 10e8, \\\"Can not liquidate to very positive state\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev reimburse liquidator with ORN: first from stake, than from broker balance\\n\\t */\\n\\tfunction reimburseLiquidator(\\n\\t\\tuint112 amount,\\n\\t\\tuint64 price,\\n\\t\\taddress liquidator,\\n\\t\\tmapping(address => mapping(address => int192)) storage assetBalances,\\n\\t\\tuint8 liquidationPremium,\\n\\t\\taddress user,\\n\\t\\taddress orionTokenAddress\\n\\t) internal {\\n\\t\\tint192 _orionAmount = int192((int256(uint256(amount)) * int256(uint256(price))) / 1e8);\\n\\t\\t_orionAmount += uint8Percent(_orionAmount, liquidationPremium); //Liquidation premium\\n\\t\\t// There is only 100m Orion tokens, fits i64\\n\\t\\trequire(_orionAmount == int64(_orionAmount), \\\"E11\\\");\\n\\t\\tint192 onBalanceOrion = assetBalances[user][orionTokenAddress];\\n\\n\\t\\trequire(onBalanceOrion >= _orionAmount, \\\"E10\\\");\\n\\t\\tassetBalances[user][orionTokenAddress] -= _orionAmount;\\n\\t\\tassetBalances[liquidator][orionTokenAddress] += _orionAmount;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeTransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../helpers/RevertReasonForwarder.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\n\\n\\nlibrary SafeTransferHelper {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\terror InsufficientBalance();\\n\\terror ForceApproveFailed();\\n\\terror ApproveCalledOnETH();\\n\\terror NotEnoughValue();\\n\\terror FromIsNotSender();\\n\\terror ToIsNotThis();\\n\\terror ETHTransferFailed();\\n\\terror SafePermitBadLength();\\n\\n\\tuint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\tIERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\tIERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\\n\\n\\t/// @dev Returns true if `token` is ETH.\\n\\tfunction isETH(IERC20 token) internal pure returns (bool) {\\n\\t\\treturn (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n\\t}\\n\\n\\t/// @dev Returns `account` ERC20 `token` balance.\\n\\tfunction uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n\\t\\tif (isETH(token)) {\\n\\t\\t\\treturn account.balance;\\n\\t\\t} else {\\n\\t\\t\\treturn token.balanceOf(account);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev `token` transfer `to` `amount`.\\n\\t/// Note that this function does nothing in case of zero amount.\\n\\t/// @dev `token` transfer `to` `amount`.\\n\\t/// Note that this function does nothing in case of zero amount.\\n\\tfunction uniTransfer(IERC20 token, address payable to, uint256 amount) internal {\\n\\t\\tif (amount > 0) {\\n\\t\\t\\tif (isETH(token)) {\\n\\t\\t\\t\\tif (address(this).balance < amount) revert InsufficientBalance();\\n\\t\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\t\\t(bool success, ) = to.call{value: amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) revert ETHTransferFailed();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttoken.safeTransfer(to, amount);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev Reverts if `token` is ETH, otherwise performs ERC20 forceApprove.\\n\\tfunction uniApprove(IERC20 token, address to, uint256 amount) internal {\\n\\t\\tif (isETH(token)) revert ApproveCalledOnETH();\\n\\n\\t\\tforceApprove(token, to, amount);\\n\\t}\\n\\n\\t/// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n\\tfunction forceApprove(IERC20 token, address spender, uint256 value) internal {\\n\\t\\tif (!_makeCall(token, token.approve.selector, spender, value)) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\t!_makeCall(token, token.approve.selector, spender, 0) ||\\n\\t\\t\\t\\t!_makeCall(token, token.approve.selector, spender, value)\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert ForceApproveFailed();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safeAutoTransferFrom(address weth, address token, address from, address to, uint value) internal {\\n\\t\\tif (isETH(IERC20(token))) {\\n\\t\\t\\trequire(from == address(this), \\\"TransferFrom: this\\\");\\n\\t\\t\\tIWETH(weth).deposit{value: value}();\\n\\t\\t\\tassert(IWETH(weth).transfer(to, value));\\n\\t\\t} else {\\n\\t\\t\\tif (from == address(this)) {\\n\\t\\t\\t\\tSafeERC20.safeTransfer(IERC20(token), to, value);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tSafeERC20.safeTransferFrom(IERC20(token), from, to, value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safeAutoTransferTo(address weth, address token, address to, uint value) internal {\\n\\t\\tif (address(this) != to) {\\n\\t\\t\\tif (isETH(IERC20(token))) {\\n\\t\\t\\t\\tIWETH(weth).withdraw(value);\\n\\t\\t\\t\\tAddress.sendValue(payable(to), value);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tSafeERC20.safeTransfer(IERC20(token), to, value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safeTransferTokenOrETH(address token, address to, uint value) internal {\\n\\t\\tif (value > 0) {\\n\\t\\t\\tif (isETH(IERC20(token))) {\\n\\t\\t\\t\\tif (address(this).balance < value) revert InsufficientBalance();\\n\\t\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\t\\t(bool success, ) = to.call{value: value, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n\\t\\t\\t\\tif (!success) revert ETHTransferFailed();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tIERC20(token).safeTransfer(to, value);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction safePermit(IERC20 token, bytes calldata permit) internal {\\n\\t\\tbool success;\\n\\t\\tif (permit.length == 32 * 7) {\\n\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\tsuccess = _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\\n\\t\\t} else if (permit.length == 32 * 8) {\\n\\t\\t\\t// solhint-disable-next-line avoid-low-level-calls\\n\\t\\t\\tsuccess = _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\\n\\t\\t} else {\\n\\t\\t\\trevert SafePermitBadLength();\\n\\t\\t}\\n\\n\\t\\tif (!success) {\\n\\t\\t\\tRevertReasonForwarder.reRevert();\\n\\t\\t}\\n\\t}\\n\\n    function _makeCall(IERC20 token, bytes4 selector, address to, uint256 amount) private returns (bool success) {\\n\\t\\tassembly (\\\"memory-safe\\\") {\\n\\t\\t\\t// solhint-disable-line no-inline-assembly\\n\\t\\t\\tlet data := mload(0x40)\\n\\n\\t\\t\\tmstore(data, selector)\\n\\t\\t\\tmstore(add(data, 0x04), to)\\n\\t\\t\\tmstore(add(data, 0x24), amount)\\n\\t\\t\\tsuccess := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n\\t\\t\\tif success {\\n\\t\\t\\t\\tswitch returndatasize()\\n\\t\\t\\t\\tcase 0 {\\n\\t\\t\\t\\t\\tsuccess := gt(extcodesize(token), 0)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdefault {\\n\\t\\t\\t\\t\\tsuccess := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _makeCalldataCall(IERC20 token, bytes4 selector, bytes calldata args) private returns (bool done) {\\n\\t\\t/// @solidity memory-safe-assembly\\n\\t\\tassembly {\\n\\t\\t\\t// solhint-disable-line no-inline-assembly\\n\\t\\t\\tlet len := add(4, args.length)\\n\\t\\t\\tlet data := mload(0x40)\\n\\n\\t\\t\\tmstore(data, selector)\\n\\t\\t\\tcalldatacopy(add(data, 0x04), args.offset, args.length)\\n\\t\\t\\tlet success := call(gas(), token, 0, data, len, 0x0, 0x20)\\n\\t\\t\\tdone := and(success, or(iszero(returndatasize()), and(gt(returndatasize(), 31), eq(mload(0), 1))))\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/PriceOracleDataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface PriceOracleDataTypes {\\n\\tstruct PriceDataOut {\\n\\t\\tuint64 price;\\n\\t\\tuint64 timestamp;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/PriceOracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PriceOracleDataTypes.sol\\\";\\n\\ninterface PriceOracleInterface is PriceOracleDataTypes {\\n\\tfunction assetPrices(address) external view returns (PriceDataOut memory);\\n\\n\\tfunction givePrices(address[] calldata assetAddresses) external view returns (PriceDataOut[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\npragma abicoder v1;\\n\\nlibrary Errors {\\n\\terror ReturnAmountIsNotEnough();\\n\\terror InvalidMsgValue();\\n\\terror ERC20TransferFailed();\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientReturnAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafePermitBadLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMinReturn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroReturnAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"st\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"st_r\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"st_a\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rt_r\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rt_a\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"}],\"name\":\"OrionPoolSwap\",\"type\":\"event\"}]", "ContractName": "LibGenericSwap", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}