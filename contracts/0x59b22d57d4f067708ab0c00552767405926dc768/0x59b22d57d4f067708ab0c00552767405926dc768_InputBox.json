{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/common/CanonicalMachine.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Canonical Machine Constants Library\\n///\\n/// @notice Defines several constants related to the reference implementation\\n/// of the RISC-V machine that runs Linux, also known as the \\\"Cartesi Machine\\\".\\nlibrary CanonicalMachine {\\n    /// @notice Base-2 logarithm of number of bytes.\\n    type Log2Size is uint64;\\n\\n    /// @notice Machine word size (8 bytes).\\n    Log2Size constant WORD_LOG2_SIZE = Log2Size.wrap(3);\\n\\n    /// @notice Machine address space size (2^64 bytes).\\n    Log2Size constant MACHINE_LOG2_SIZE = Log2Size.wrap(64);\\n\\n    /// @notice Keccak-256 output size (32 bytes).\\n    Log2Size constant KECCAK_LOG2_SIZE = Log2Size.wrap(5);\\n\\n    /// @notice Maximum input size (~2 megabytes).\\n    /// @dev The offset and size fields use up the extra 64 bytes.\\n    uint256 constant INPUT_MAX_SIZE = (1 << 21) - 64;\\n\\n    /// @notice Maximum voucher metadata memory range (2 megabytes).\\n    Log2Size constant VOUCHER_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum notice metadata memory range (2 megabytes).\\n    Log2Size constant NOTICE_METADATA_LOG2_SIZE = Log2Size.wrap(21);\\n\\n    /// @notice Maximum epoch voucher memory range (128 megabytes).\\n    Log2Size constant EPOCH_VOUCHER_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Maximum epoch notice memory range (128 megabytes).\\n    Log2Size constant EPOCH_NOTICE_LOG2_SIZE = Log2Size.wrap(37);\\n\\n    /// @notice Unwrap `s` into its underlying uint64 value.\\n    /// @param s Base-2 logarithm of some number of bytes\\n    function uint64OfSize(Log2Size s) internal pure returns (uint64) {\\n        return Log2Size.unwrap(s);\\n    }\\n\\n    /// @notice Return the position of an intra memory range on a memory range\\n    ///         with contents with the same size.\\n    /// @param index Index of intra memory range\\n    /// @param log2Size Base-2 logarithm of intra memory range size\\n    function getIntraMemoryRangePosition(\\n        uint64 index,\\n        Log2Size log2Size\\n    ) internal pure returns (uint64) {\\n        return index << Log2Size.unwrap(log2Size);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/inputs/IInputBox.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\n/// @title Input Box interface\\ninterface IInputBox {\\n    /// @notice Emitted when an input is added to a DApp's input box.\\n    /// @param dapp The address of the DApp\\n    /// @param inputIndex The index of the input in the input box\\n    /// @param sender The address that sent the input\\n    /// @param input The contents of the input\\n    /// @dev MUST be triggered on a successful call to `addInput`.\\n    event InputAdded(\\n        address indexed dapp,\\n        uint256 indexed inputIndex,\\n        address sender,\\n        bytes input\\n    );\\n\\n    /// @notice Add an input to a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _input The contents of the input\\n    /// @return The hash of the input plus some extra metadata\\n    /// @dev MUST fire an `InputAdded` event accordingly.\\n    ///      Input larger than machine limit will raise `InputSizeExceedsLimit` error.\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external returns (bytes32);\\n\\n    /// @notice Get the number of inputs in a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @return Number of inputs in the DApp's input box\\n    function getNumberOfInputs(address _dapp) external view returns (uint256);\\n\\n    /// @notice Get the hash of an input in a DApp's input box.\\n    /// @param _dapp The address of the DApp\\n    /// @param _index The index of the input in the DApp's input box\\n    /// @return The hash of the input at the provided index in the DApp's input box\\n    /// @dev `_index` MUST be in the interval `[0,n)` where `n` is the number of\\n    ///      inputs in the DApp's input box. See the `getNumberOfInputs` function.\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/inputs/InputBox.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {IInputBox} from \\\"./IInputBox.sol\\\";\\nimport {LibInput} from \\\"../library/LibInput.sol\\\";\\n\\n/// @title Input Box\\n///\\n/// @notice Trustless and permissionless contract that receives arbitrary blobs\\n/// (called \\\"inputs\\\") from anyone and adds a compound hash to an append-only list\\n/// (called \\\"input box\\\"). Each DApp has its own input box.\\n///\\n/// The hash that is stored on-chain is composed by the hash of the input blob,\\n/// the block number and timestamp, the input sender address, and the input index.\\n///\\n/// Data availability is guaranteed by the emission of `InputAdded` events\\n/// on every successful call to `addInput`. This ensures that inputs can be\\n/// retrieved by anyone at any time, without having to rely on centralized data\\n/// providers.\\n///\\n/// From the perspective of this contract, inputs are encoding-agnostic byte\\n/// arrays. It is up to the DApp to interpret, validate and act upon inputs.\\ncontract InputBox is IInputBox {\\n    /// @notice Mapping from DApp address to list of input hashes.\\n    /// @dev See the `getNumberOfInputs`, `getInputHash` and `addInput` functions.\\n    mapping(address => bytes32[]) internal inputBoxes;\\n\\n    function addInput(\\n        address _dapp,\\n        bytes calldata _input\\n    ) external override returns (bytes32) {\\n        bytes32[] storage inputBox = inputBoxes[_dapp];\\n        uint256 inputIndex = inputBox.length;\\n\\n        bytes32 inputHash = LibInput.computeInputHash(\\n            msg.sender,\\n            block.number,\\n            block.timestamp,\\n            _input,\\n            inputIndex\\n        );\\n\\n        // add input to the input box\\n        inputBox.push(inputHash);\\n\\n        // block.number and timestamp can be retrieved by the event metadata itself\\n        emit InputAdded(_dapp, inputIndex, msg.sender, _input);\\n\\n        return inputHash;\\n    }\\n\\n    function getNumberOfInputs(\\n        address _dapp\\n    ) external view override returns (uint256) {\\n        return inputBoxes[_dapp].length;\\n    }\\n\\n    function getInputHash(\\n        address _dapp,\\n        uint256 _index\\n    ) external view override returns (bytes32) {\\n        return inputBoxes[_dapp][_index];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/LibInput.sol\": {\r\n      \"content\": \"// (c) Cartesi and individual authors (see AUTHORS)\\n// SPDX-License-Identifier: Apache-2.0 (see LICENSE)\\n\\npragma solidity ^0.8.8;\\n\\nimport {CanonicalMachine} from \\\"../common/CanonicalMachine.sol\\\";\\n\\n/// @title Input Library\\nlibrary LibInput {\\n    using CanonicalMachine for CanonicalMachine.Log2Size;\\n\\n    /// @notice Raised when input is larger than the machine limit.\\n    error InputSizeExceedsLimit();\\n\\n    /// @notice Summarize input data in a single hash.\\n    /// @param sender `msg.sender`\\n    /// @param blockNumber `block.number`\\n    /// @param blockTimestamp `block.timestamp`\\n    /// @param input The input blob\\n    /// @param inputIndex The index of the input in the input box\\n    /// @return The input hash\\n    function computeInputHash(\\n        address sender,\\n        uint256 blockNumber,\\n        uint256 blockTimestamp,\\n        bytes calldata input,\\n        uint256 inputIndex\\n    ) internal pure returns (bytes32) {\\n        if (input.length > CanonicalMachine.INPUT_MAX_SIZE) {\\n            revert InputSizeExceedsLimit();\\n        }\\n\\n        bytes32 keccakMetadata = keccak256(\\n            abi.encode(\\n                sender,\\n                blockNumber,\\n                blockTimestamp,\\n                0, //TODO decide how to deal with epoch index\\n                inputIndex // input index in the input box\\n            )\\n        );\\n\\n        bytes32 keccakInput = keccak256(input);\\n\\n        return keccak256(abi.encode(keccakMetadata, keccakInput));\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"InputSizeExceedsLimit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dapp\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"InputAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"addInput\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInputHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dapp\",\"type\":\"address\"}],\"name\":\"getNumberOfInputs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InputBox", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": ""}