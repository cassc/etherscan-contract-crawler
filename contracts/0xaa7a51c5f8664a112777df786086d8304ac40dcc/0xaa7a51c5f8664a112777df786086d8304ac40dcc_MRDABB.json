{"SourceCode": "/*\r\n  Mister DABB | $MRDABB\r\n  \r\n  The most powerful deflationary token on Ethereum Blockchain.\r\n\r\n  https://t.me/MisterDABBerc20\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface for the Buy Back Reward contract that can be used to build\r\n * custom logic to elevate user rewards\r\n */\r\ninterface IConditional {\r\n  /**\r\n   * @dev Returns whether a wallet passes the test.\r\n   */\r\n  function passesTest(address wallet) external view returns (bool);\r\n}\r\n\r\ncontract MRDABB is Context, IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n  using Address for address;\r\n\r\n  address payable public treasuryWallet =\r\n    payable(0x0462D2a67821E00F1377de44d5EDFbC32BABBB9A);\r\n  address public constant deadAddress =\r\n    0x000000000000000000000000000000000000dEaD;\r\n\r\n  mapping(address => uint256) private _rOwned;\r\n  mapping(address => uint256) private _tOwned;\r\n  mapping(address => mapping(address => uint256)) private _allowances;\r\n  mapping(address => bool) private _isSniper;\r\n  address[] private _confirmedSnipers;\r\n\r\n  uint256 public rewardsClaimTimeSeconds = 60 * 60 * 6; // 6 hours\r\n\r\n  mapping(address => uint256) private _rewardsLastClaim;\r\n\r\n  mapping(address => bool) private _isExcludedFee;\r\n  mapping(address => bool) private _isExcludedReward;\r\n  address[] private _excluded;\r\n\r\n  string private constant _name = 'Mister DABB';\r\n  string private constant _symbol = 'MRDABB';\r\n  uint8 private constant _decimals = 9;\r\n\r\n  uint256 private constant MAX = ~uint256(0);\r\n  uint256 private constant _tTotal = 1e5 * 10**_decimals;\r\n  uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n  uint256 private _tFeeTotal;\r\n\r\n  uint256 public reflectionFee = 0;\r\n  uint256 private _previousReflectFee = reflectionFee;\r\n\r\n  uint256 public treasuryFee = 3;\r\n  uint256 private _previousTreasuryFee = treasuryFee;\r\n\r\n  uint256 public ethRewardsFee = 0;\r\n  uint256 private _previousETHRewardsFee = ethRewardsFee;\r\n  uint256 public ethRewardsBalance;\r\n\r\n  uint256 public buybackFee = 3;\r\n  uint256 private _previousBuybackFee = buybackFee;\r\n  address public buybackReceiver = address(this);\r\n  uint256 public buybackUpperLimit = 500000000000000000; //0.5 ETH\r\n  uint256 public buybackEthBalance;\r\n\r\n  uint256 buyBackDivisor = 5;\r\n\r\n  bool public buyBackEnabled = true;\r\n  event BuyBackEnabledUpdated(bool enabled);\r\n\r\n  uint256 public feeSellMultiplier = 1;\r\n  uint256 public feeRate = 10;\r\n  uint256 public launchTime;\r\n\r\n  uint256 public boostRewardsPercent = 50;\r\n\r\n  address public boostRewardsContract;\r\n  address public feeExclusionContract;\r\n\r\n  IUniswapV2Router02 public uniswapV2Router;\r\n  address public uniswapV2Pair;\r\n  mapping(address => bool) private _isUniswapPair;\r\n\r\n  // PancakeSwap: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n  // Uniswap V2: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n  address private constant _uniswapRouterAddress =\r\n    0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n  bool private _inSwapAndLiquify;\r\n  bool private _isSelling;\r\n  bool private _tradingOpen = false;\r\n  bool private _isMaxBuyActivated = true;\r\n\r\n  uint256 public _maxTxAmount = _tTotal.mul(2).div(100); // 2.0%\r\n  uint256 public _maxWalletSize = _tTotal.mul(2).div(100); // 2.0%\r\n  uint256 public _maximumBuyAmount = _tTotal.mul(2).div(100); // 2.0%\r\n\r\n  event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n  event MaxWalletSizeUpdated(uint256 _maxWalletSize);\r\n  event SendETHRewards(address to, uint256 amountETH);\r\n  event SendTokenRewards(address to, address token, uint256 amount);\r\n  event SwapETHForTokens(uint256 amountIn, address[] path);\r\n  event SwapTokensForETH(uint256 amountIn, address[] path);\r\n  event SwapAndLiquify(\r\n    uint256 tokensSwappedForEth,\r\n    uint256 ethAddedForLp,\r\n    uint256 tokensAddedForLp\r\n  );\r\n\r\n  modifier lockTheSwap() {\r\n    _inSwapAndLiquify = true;\r\n    _;\r\n    _inSwapAndLiquify = false;\r\n  }\r\n\r\n  constructor() {\r\n    _rOwned[_msgSender()] = _rTotal;\r\n    emit Transfer(address(0), _msgSender(), _tTotal);\r\n  }\r\n\r\n  function initContract() external onlyOwner {\r\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n      _uniswapRouterAddress\r\n    );\r\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\r\n      address(this),\r\n      _uniswapV2Router.WETH()\r\n    );\r\n\r\n    uniswapV2Router = _uniswapV2Router;\r\n\r\n    _isExcludedFee[owner()] = true;\r\n    _isExcludedFee[address(this)] = true;\r\n    _isExcludedFee[treasuryWallet] = true;\r\n  }\r\n\r\n  function openTrading() external onlyOwner {\r\n    treasuryFee = _previousTreasuryFee;\r\n    ethRewardsFee = _previousETHRewardsFee;\r\n    reflectionFee = _previousReflectFee;\r\n    buybackFee = _previousBuybackFee;\r\n    _tradingOpen = true;\r\n    launchTime = block.timestamp;\r\n  }\r\n\r\n  function name() external pure returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() external pure returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() external pure returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() external pure override returns (uint256) {\r\n    return _tTotal;\r\n  }\r\n\r\n  function MaxTXAmount() external view returns (uint256) {\r\n    return _maxTxAmount;\r\n  }\r\n\r\n  function MaxWalletSize() external view returns (uint256) {\r\n    return _maxWalletSize;\r\n  }\r\n\r\n  function balanceOf(address account) public view override returns (uint256) {\r\n    if (_isExcludedReward[account]) return _tOwned[account];\r\n    return tokenFromReflection(_rOwned[account]);\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256)\r\n  {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount)\r\n    external\r\n    override\r\n    returns (bool)\r\n  {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(\r\n      sender,\r\n      _msgSender(),\r\n      _allowances[sender][_msgSender()].sub(\r\n        amount,\r\n        'ERC20: transfer amount exceeds allowance'\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    external\r\n    virtual\r\n    returns (bool)\r\n  {\r\n    _approve(\r\n      _msgSender(),\r\n      spender,\r\n      _allowances[_msgSender()][spender].sub(\r\n        subtractedValue,\r\n        'ERC20: decreased allowance below zero'\r\n      )\r\n    );\r\n    return true;\r\n  }\r\n\r\n  function setMaxTxnAmount(uint256 maxTxAmountPercetange) external onlyOwner{\r\n    require(maxTxAmountPercetange < 1000, \"Maximum amount per transaction must be lower than 100%\");\r\n    require(maxTxAmountPercetange > 5, \"Maximum amount per transaction must be higher than 0.5%\");\r\n    _maxTxAmount = _tTotal.mul(maxTxAmountPercetange).div(1000);\r\n    emit MaxTxAmountUpdated(_maxTxAmount);\r\n  }\r\n\r\n  function setMaxWalletSize(uint256 maxWalletSizePercentage) external onlyOwner{\r\n    require(maxWalletSizePercentage < 1000, \"Maximum wallet size must be lower than 100%\");\r\n    require(maxWalletSizePercentage > 20, \"Maximum wallet size must be higher than 2%\");\r\n    _maxWalletSize = _tTotal.mul(maxWalletSizePercentage).div(1000);\r\n    emit MaxWalletSizeUpdated(_maxWalletSize);\r\n  }\r\n\r\n  function getLastETHRewardsClaim(address wallet)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _rewardsLastClaim[wallet];\r\n  }\r\n\r\n  function totalFees() external view returns (uint256) {\r\n    return _tFeeTotal;\r\n  }\r\n\r\n  function deliver(uint256 tAmount) external {\r\n    address sender = _msgSender();\r\n    require(\r\n      !_isExcludedReward[sender],\r\n      'Excluded addresses cannot call this function'\r\n    );\r\n    (uint256 rAmount, , , , , ) = _getValues(sender, tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rTotal = _rTotal.sub(rAmount);\r\n    _tFeeTotal = _tFeeTotal.add(tAmount);\r\n  }\r\n\r\n  function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(tAmount <= _tTotal, 'Amount must be less than supply');\r\n    if (!deductTransferFee) {\r\n      (uint256 rAmount, , , , , ) = _getValues(address(0), tAmount);\r\n      return rAmount;\r\n    } else {\r\n      (, uint256 rTransferAmount, , , , ) = _getValues(address(0), tAmount);\r\n      return rTransferAmount;\r\n    }\r\n  }\r\n\r\n  function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n    require(rAmount <= _rTotal, 'Amount must be less than total reflections');\r\n    uint256 currentRate = _getRate();\r\n    return rAmount.div(currentRate);\r\n  }\r\n\r\n  function excludeFromReward(address account) external onlyOwner {\r\n    require(!_isExcludedReward[account], 'Account is already excluded');\r\n    if (_rOwned[account] > 0) {\r\n      _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n    }\r\n    _isExcludedReward[account] = true;\r\n    _excluded.push(account);\r\n  }\r\n\r\n  function includeInReward(address account) external onlyOwner {\r\n    require(_isExcludedReward[account], 'Account is already included');\r\n    for (uint256 i = 0; i < _excluded.length; i++) {\r\n      if (_excluded[i] == account) {\r\n        _excluded[i] = _excluded[_excluded.length - 1];\r\n        _tOwned[account] = 0;\r\n        _isExcludedReward[account] = false;\r\n        _excluded.pop();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _approve(\r\n    address owner,\r\n    address spender,\r\n    uint256 amount\r\n  ) private {\r\n    require(owner != address(0), 'ERC20: approve from the zero address');\r\n    require(spender != address(0), 'ERC20: approve to the zero address');\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) private {\r\n    require(from != address(0), 'ERC20: transfer from the zero address');\r\n    require(to != address(0), 'ERC20: transfer to the zero address');\r\n    require(amount > 0, 'Transfer amount must be greater than zero');\r\n    require(!_isSniper[to], 'Stop sniping!');\r\n    require(!_isSniper[from], 'Stop sniping!');\r\n    require(!_isSniper[_msgSender()], 'Stop sniping!');\r\n\r\n    //check transaction amount only when selling\r\n    if (\r\n      (to == uniswapV2Pair || _isUniswapPair[to]) && \r\n      from != address(uniswapV2Router) &&\r\n      !isExcludedFromFee(to) &&\r\n      !isExcludedFromFee(from)\r\n    ) {\r\n        require(amount <= _maxTxAmount, \"TOKEN: Max Transaction Limit\");\r\n    }\r\n\r\n    if (\r\n      to != uniswapV2Pair &&\r\n      !_isUniswapPair[to] &&\r\n      !isExcludedFromFee(to) && \r\n      !isExcludedFromFee(from)\r\n      ) {\r\n      require(balanceOf(to) + amount < _maxWalletSize, \"TOKEN: Balance exceeds wallet size!\");\r\n      if (_isMaxBuyActivated) {\r\n        if (block.timestamp <= launchTime + 30 minutes) {\r\n          require(amount <= _maximumBuyAmount, \"Amount too much\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // reset receiver's timer to prevent users buying and\r\n    // immmediately transferring to buypass timer\r\n    _rewardsLastClaim[to] = block.timestamp;\r\n\r\n    bool excludedFromFee = false;\r\n\r\n    // buy\r\n    if (\r\n      (from == uniswapV2Pair || _isUniswapPair[from]) &&\r\n      to != address(uniswapV2Router)\r\n    ) {\r\n      // normal buy, check for snipers\r\n      if (!isExcludedFromFee(to)) {\r\n        require(_tradingOpen, 'Trading not yet enabled.');\r\n\r\n        // antibot\r\n        if (block.timestamp == launchTime) {\r\n          _isSniper[to] = true;\r\n          _confirmedSnipers.push(to);\r\n        }\r\n        _rewardsLastClaim[from] = block.timestamp;\r\n      } else {\r\n        // set excluded flag for takeFee below since buyer is excluded\r\n        excludedFromFee = true;\r\n      }\r\n    }\r\n\r\n    // sell\r\n    if (\r\n      !_inSwapAndLiquify &&\r\n      _tradingOpen &&\r\n      (to == uniswapV2Pair || _isUniswapPair[to])\r\n    ) {\r\n      uint256 _contractTokenBalance = balanceOf(address(this));\r\n      if (_contractTokenBalance > 0) {\r\n        if (\r\n          _contractTokenBalance > balanceOf(uniswapV2Pair).mul(feeRate).div(100)\r\n        ) {\r\n          _contractTokenBalance = balanceOf(uniswapV2Pair).mul(feeRate).div(\r\n            100\r\n          );\r\n        }\r\n        _swapTokens(_contractTokenBalance);\r\n      }\r\n\r\n      if (buyBackEnabled && buybackEthBalance >= buybackUpperLimit) {\r\n        uint256 buybackAmount = buybackEthBalance.div(buyBackDivisor);\r\n        _buyBackTokens(buybackAmount);\r\n        buybackEthBalance -= buybackAmount;\r\n     }\r\n      _rewardsLastClaim[from] = block.timestamp;\r\n      _isSelling = true;\r\n      excludedFromFee = isExcludedFromFee(from);\r\n    }\r\n\r\n    bool takeFee = false;\r\n\r\n    // take fee only on swaps\r\n    if (\r\n      (from == uniswapV2Pair ||\r\n        to == uniswapV2Pair ||\r\n        _isUniswapPair[to] ||\r\n        _isUniswapPair[from]) && !excludedFromFee\r\n    ) {\r\n      takeFee = true;\r\n    }\r\n\r\n    _tokenTransfer(from, to, amount, takeFee);\r\n    _isSelling = false;\r\n  }\r\n\r\n  function _swapTokens(uint256 _contractTokenBalance) private lockTheSwap {\r\n    uint256 ethBalanceBefore = address(this).balance;\r\n    _swapTokensForEth(_contractTokenBalance);\r\n    uint256 ethBalanceAfter = address(this).balance;\r\n    uint256 ethBalanceUpdate = ethBalanceAfter.sub(ethBalanceBefore);\r\n    uint256 _liquidityFeeTotal = _liquidityFeeAggregate(address(0));\r\n\r\n    ethRewardsBalance += ethBalanceUpdate.mul(ethRewardsFee).div(\r\n      _liquidityFeeTotal\r\n    );\r\n\r\n    // send ETH to treasury address\r\n    uint256 treasuryETHBalance = ethBalanceUpdate.mul(treasuryFee).div(\r\n      _liquidityFeeTotal\r\n    );\r\n    if (treasuryETHBalance > 0) {\r\n      _sendETHToTreasury(treasuryETHBalance);\r\n    }\r\n\r\n    // buy back\r\n    uint256 buybackETHShare = ethBalanceUpdate.mul(buybackFee).div(\r\n      _liquidityFeeTotal\r\n    );\r\n\r\n    if(buybackETHShare > 0) {\r\n        buybackEthBalance += buybackETHShare;\r\n    }\r\n\r\n  }\r\n\r\n  function _sendETHToTreasury(uint256 amount) private {\r\n    treasuryWallet.call{ value: amount }('');\r\n  }\r\n\r\n  function _buyBackTokens(uint256 amount) private lockTheSwap {\r\n    // generate the uniswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = uniswapV2Router.WETH();\r\n    path[1] = address(this);\r\n\r\n    // make the swap\r\n    uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n      value: amount\r\n    }(\r\n      0, // accept any amount of tokens\r\n      path,\r\n      deadAddress,\r\n      block.timestamp\r\n    );\r\n\r\n    emit SwapETHForTokens(amount, path);\r\n  }\r\n\r\n  function _swapTokensForEth(uint256 tokenAmount) private {\r\n    // generate the uniswap pair path of token -> weth\r\n    address[] memory path = new address[](2);\r\n    path[0] = address(this);\r\n    path[1] = uniswapV2Router.WETH();\r\n\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // make the swap\r\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      tokenAmount,\r\n      0, // accept any amount of ETH\r\n      path,\r\n      address(this), // the contract\r\n      block.timestamp\r\n    );\r\n\r\n    emit SwapTokensForETH(tokenAmount, path);\r\n  }\r\n\r\n  function _tokenTransfer(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount,\r\n    bool takeFee\r\n  ) private {\r\n    if (!takeFee) _removeAllFee();\r\n\r\n    if (_isExcludedReward[sender] && !_isExcludedReward[recipient]) {\r\n      _transferFromExcluded(sender, recipient, amount);\r\n    } else if (!_isExcludedReward[sender] && _isExcludedReward[recipient]) {\r\n      _transferToExcluded(sender, recipient, amount);\r\n    } else if (_isExcludedReward[sender] && _isExcludedReward[recipient]) {\r\n      _transferBothExcluded(sender, recipient, amount);\r\n    } else {\r\n      _transferStandard(sender, recipient, amount);\r\n    }\r\n\r\n    if (!takeFee) _restoreAllFee();\r\n  }\r\n\r\n  function _transferStandard(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(sender, tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferToExcluded(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(sender, tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferFromExcluded(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(sender, tAmount);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _transferBothExcluded(\r\n    address sender,\r\n    address recipient,\r\n    uint256 tAmount\r\n  ) private {\r\n    (\r\n      uint256 rAmount,\r\n      uint256 rTransferAmount,\r\n      uint256 rFee,\r\n      uint256 tTransferAmount,\r\n      uint256 tFee,\r\n      uint256 tLiquidity\r\n    ) = _getValues(sender, tAmount);\r\n    _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n    _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n    _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n    _takeLiquidity(tLiquidity);\r\n    _reflectFee(rFee, tFee);\r\n    emit Transfer(sender, recipient, tTransferAmount);\r\n  }\r\n\r\n  function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n    _rTotal = _rTotal.sub(rFee);\r\n    _tFeeTotal = _tFeeTotal.add(tFee);\r\n  }\r\n\r\n  function _getValues(address seller, uint256 tAmount)\r\n    private\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(\r\n      seller,\r\n      tAmount\r\n    );\r\n    (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n      tAmount,\r\n      tFee,\r\n      tLiquidity,\r\n      _getRate()\r\n    );\r\n    return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n  }\r\n\r\n  function _getTValues(address seller, uint256 tAmount)\r\n    private\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 tFee = _calculateReflectFee(tAmount);\r\n    uint256 tLiquidity = _calculateLiquidityFee(seller, tAmount);\r\n    uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n    return (tTransferAmount, tFee, tLiquidity);\r\n  }\r\n\r\n  function _getRValues(\r\n    uint256 tAmount,\r\n    uint256 tFee,\r\n    uint256 tLiquidity,\r\n    uint256 currentRate\r\n  )\r\n    private\r\n    pure\r\n    returns (\r\n      uint256,\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 rAmount = tAmount.mul(currentRate);\r\n    uint256 rFee = tFee.mul(currentRate);\r\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n    uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n    return (rAmount, rTransferAmount, rFee);\r\n  }\r\n\r\n  function _getRate() private view returns (uint256) {\r\n    (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n    return rSupply.div(tSupply);\r\n  }\r\n\r\n  function _getCurrentSupply() private view returns (uint256, uint256) {\r\n    uint256 rSupply = _rTotal;\r\n    uint256 tSupply = _tTotal;\r\n    for (uint256 i = 0; i < _excluded.length; i++) {\r\n      if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply)\r\n        return (_rTotal, _tTotal);\r\n      rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n      tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n    }\r\n    if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n    return (rSupply, tSupply);\r\n  }\r\n\r\n  function _takeLiquidity(uint256 tLiquidity) private {\r\n    uint256 currentRate = _getRate();\r\n    uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n    _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n    if (_isExcludedReward[address(this)])\r\n      _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n  }\r\n\r\n  function _calculateReflectFee(uint256 _amount)\r\n    private\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _amount.mul(reflectionFee).div(10**2);\r\n  }\r\n\r\n  function _liquidityFeeAggregate(address seller)\r\n    private\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint256 feeMultiplier = _isSelling && !canClaimRewards(seller)\r\n      ? feeSellMultiplier\r\n      : 1;\r\n    return (treasuryFee.add(ethRewardsFee).add(buybackFee)).mul(feeMultiplier);\r\n  }\r\n\r\n  function _calculateLiquidityFee(address seller, uint256 _amount)\r\n    private\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _amount.mul(_liquidityFeeAggregate(seller)).div(10**2);\r\n  }\r\n\r\n  function _removeAllFee() private {\r\n    if (\r\n      reflectionFee == 0 &&\r\n      treasuryFee == 0 &&\r\n      ethRewardsFee == 0 &&\r\n      buybackFee == 0\r\n    ) return;\r\n\r\n    _previousReflectFee = reflectionFee;\r\n    _previousTreasuryFee = treasuryFee;\r\n    _previousETHRewardsFee = ethRewardsFee;\r\n    _previousBuybackFee = buybackFee;\r\n\r\n    reflectionFee = 0;\r\n    treasuryFee = 0;\r\n    ethRewardsFee = 0;\r\n    buybackFee = 0;\r\n  }\r\n\r\n  function _restoreAllFee() private {\r\n    reflectionFee = _previousReflectFee;\r\n    treasuryFee = _previousTreasuryFee;\r\n    ethRewardsFee = _previousETHRewardsFee;\r\n    buybackFee = _previousBuybackFee;\r\n  }\r\n\r\n  function getSellSlippage(address seller) external view returns (uint256) {\r\n    uint256 feeAgg = treasuryFee.add(ethRewardsFee).add(buybackFee);\r\n    return\r\n      isExcludedFromFee(seller) ? 0 : !canClaimRewards(seller)\r\n        ? feeAgg.mul(feeSellMultiplier)\r\n        : feeAgg;\r\n  }\r\n\r\n  function isUniswapPair(address _pair) external view returns (bool) {\r\n    if (_pair == uniswapV2Pair) return true;\r\n    return _isUniswapPair[_pair];\r\n  }\r\n\r\n  function eligibleForRewardBooster(address wallet) public view returns (bool) {\r\n    return\r\n      boostRewardsContract != address(0) &&\r\n      IConditional(boostRewardsContract).passesTest(wallet);\r\n  }\r\n\r\n  function isExcludedFromFee(address account) public view returns (bool) {\r\n    return\r\n      _isExcludedFee[account] ||\r\n      (feeExclusionContract != address(0) &&\r\n        IConditional(feeExclusionContract).passesTest(account));\r\n  }\r\n\r\n  function isExcludedFromReward(address account) external view returns (bool) {\r\n    return _isExcludedReward[account];\r\n  }\r\n\r\n  function excludeFromFee(address account) external onlyOwner {\r\n    _isExcludedFee[account] = true;\r\n  }\r\n\r\n  function includeInFee(address account) external onlyOwner {\r\n    _isExcludedFee[account] = false;\r\n  }\r\n\r\n  function setRewardsClaimTimeSeconds(uint256 _seconds) external onlyOwner {\r\n    require(_seconds >= 0 &&_seconds <= 60 * 60 * 24 * 7, 'claim time delay must be greater or equal to 0 seconds and less than or equal to 7 days');\r\n    rewardsClaimTimeSeconds = _seconds;\r\n  }\r\n  \r\n  // tax cannot be raised more than 7% on buy and sell\r\n  function setNewFeesPercentages(uint256 _reflectionNewFee, uint256 _treasuryNewFee, uint256 _ethRewardsNewFee, uint256 _buybackRewardsNewFee) external onlyOwner {\r\n    require(_reflectionNewFee + _treasuryNewFee + _ethRewardsNewFee + _buybackRewardsNewFee <= 7, 'Tax cannot be higher than 7%');\r\n    reflectionFee = _reflectionNewFee;\r\n    treasuryFee = _treasuryNewFee;\r\n    ethRewardsFee = _ethRewardsNewFee;\r\n    buybackFee = _buybackRewardsNewFee;\r\n  }\r\n\r\n  function setFeeSellMultiplier(uint256 multiplier) external onlyOwner {\r\n    require(multiplier <= 2, 'must be less than or equal to 2');\r\n    feeSellMultiplier = multiplier;\r\n  }\r\n\r\n  function setTreasuryAddress(address _treasuryWallet) external onlyOwner {\r\n    treasuryWallet = payable(_treasuryWallet);\r\n    _isExcludedFee[treasuryWallet] = true;\r\n  }\r\n\r\n  function setIsMaxBuyActivated(bool _value) public onlyOwner {\r\n    _isMaxBuyActivated = _value;\r\n  }\r\n\r\n  function setBuybackReceiver(address _receiver) external onlyOwner {\r\n    buybackReceiver = _receiver;\r\n  }\r\n\r\n  function addUniswapPair(address _pair) external onlyOwner {\r\n    _isUniswapPair[_pair] = true;\r\n  }\r\n\r\n  function removeUniswapPair(address _pair) external onlyOwner {\r\n    _isUniswapPair[_pair] = false;\r\n  }\r\n\r\n  function setBoostRewardsPercent(uint256 perc) external onlyOwner {\r\n    boostRewardsPercent = perc;\r\n  }\r\n\r\n  function setBoostRewardsContract(address _contract) external onlyOwner {\r\n    if (_contract != address(0)) {\r\n      IConditional _contCheck = IConditional(_contract);\r\n      // allow setting to zero address to effectively turn off check logic\r\n      require(\r\n        _contCheck.passesTest(address(0)) == true ||\r\n          _contCheck.passesTest(address(0)) == false,\r\n        'contract does not implement interface'\r\n      );\r\n    }\r\n    boostRewardsContract = _contract;\r\n  }\r\n\r\n  function setFeeExclusionContract(address _contract) external onlyOwner {\r\n    if (_contract != address(0)) {\r\n      IConditional _contCheck = IConditional(_contract);\r\n      // allow setting to zero address to effectively turn off check logic\r\n      require(\r\n        _contCheck.passesTest(address(0)) == true ||\r\n          _contCheck.passesTest(address(0)) == false,\r\n        'contract does not implement interface'\r\n      );\r\n    }\r\n    feeExclusionContract = _contract;\r\n  }\r\n\r\n  function isRemovedSniper(address account) external view returns (bool) {\r\n    return _isSniper[account];\r\n  }\r\n\r\n  function removeSniper(address account) external onlyOwner {\r\n    require(account != _uniswapRouterAddress, 'We can not blacklist Uniswap');\r\n    require(!_isSniper[account], 'Account is already blacklisted');\r\n    _isSniper[account] = true;\r\n    _confirmedSnipers.push(account);\r\n  }\r\n\r\n  function amnestySniper(address account) external onlyOwner {\r\n    require(_isSniper[account], 'Account is not blacklisted');\r\n    for (uint256 i = 0; i < _confirmedSnipers.length; i++) {\r\n      if (_confirmedSnipers[i] == account) {\r\n        _confirmedSnipers[i] = _confirmedSnipers[_confirmedSnipers.length - 1];\r\n        _isSniper[account] = false;\r\n        _confirmedSnipers.pop();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  function calculateETHRewards(address wallet) public view returns (uint256) {\r\n    uint256 baseRewards = ethRewardsBalance.mul(balanceOf(wallet)).div(\r\n      _tTotal.sub(balanceOf(deadAddress)) // circulating supply\r\n    );\r\n    uint256 rewardsWithBooster = eligibleForRewardBooster(wallet)\r\n      ? baseRewards.add(baseRewards.mul(boostRewardsPercent).div(10**2))\r\n      : baseRewards;\r\n    return\r\n      rewardsWithBooster > ethRewardsBalance ? baseRewards : rewardsWithBooster;\r\n  }\r\n\r\n  function calculateTokenRewards(address wallet, address tokenAddress)\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    IERC20 token = IERC20(tokenAddress);\r\n    uint256 contractTokenBalance = token.balanceOf(address(this));\r\n    uint256 baseRewards = contractTokenBalance.mul(balanceOf(wallet)).div(\r\n      _tTotal.sub(balanceOf(deadAddress)) // circulating supply\r\n    );\r\n    uint256 rewardsWithBooster = eligibleForRewardBooster(wallet)\r\n      ? baseRewards.add(baseRewards.mul(boostRewardsPercent).div(10**2))\r\n      : baseRewards;\r\n    return\r\n      rewardsWithBooster > contractTokenBalance\r\n        ? baseRewards\r\n        : rewardsWithBooster;\r\n  }\r\n\r\n  function claimETHRewards() external {\r\n    require(\r\n      balanceOf(_msgSender()) > 0,\r\n      'You must have a balance to claim ETH rewards'\r\n    );\r\n    require(\r\n      canClaimRewards(_msgSender()),\r\n      'Must wait claim period before claiming rewards'\r\n    );\r\n    _rewardsLastClaim[_msgSender()] = block.timestamp;\r\n\r\n    uint256 rewardsSent = calculateETHRewards(_msgSender());\r\n    ethRewardsBalance -= rewardsSent;\r\n    _msgSender().call{ value: rewardsSent }('');\r\n    emit SendETHRewards(_msgSender(), rewardsSent);\r\n  }\r\n\r\n  function canClaimRewards(address user) public view returns (bool) {\r\n    if (_rewardsLastClaim[user] == 0) {\r\n      return\r\n        block.timestamp > launchTime.add(rewardsClaimTimeSeconds);\r\n    }\r\n    else {\r\n      return\r\n        block.timestamp > _rewardsLastClaim[user].add(rewardsClaimTimeSeconds);\r\n    }\r\n  }\r\n\r\n  function claimTokenRewards(address token) external {\r\n    require(\r\n      balanceOf(_msgSender()) > 0,\r\n      'You must have a balance to claim rewards'\r\n    );\r\n    require(\r\n      IERC20(token).balanceOf(address(this)) > 0,\r\n      'We must have a token balance to claim rewards'\r\n    );\r\n    require(\r\n      canClaimRewards(_msgSender()),\r\n      'Must wait claim period before claiming rewards'\r\n    );\r\n    _rewardsLastClaim[_msgSender()] = block.timestamp;\r\n\r\n    uint256 rewardsSent = calculateTokenRewards(_msgSender(), token);\r\n    IERC20(token).transfer(_msgSender(), rewardsSent);\r\n    emit SendTokenRewards(_msgSender(), token, rewardsSent);\r\n  }\r\n\r\n  function setFeeRate(uint256 _rate) external onlyOwner {\r\n    feeRate = _rate;\r\n  }\r\n\r\n  function manualswap(uint256 amount) external onlyOwner {\r\n    require(amount <= balanceOf(address(this)) && amount > 0, \"Wrong amount\");\r\n    _swapTokens(amount);\r\n  }\r\n\r\n  function emergencyWithdraw() external onlyOwner {\r\n    payable(owner()).transfer(address(this).balance);\r\n  }\r\n\r\n  function setBuyBackEnabled(bool _enabled) public onlyOwner {\r\n        buyBackEnabled = _enabled;\r\n        emit BuyBackEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function updateBuybackUpperLimit(uint256 _amount) public onlyOwner {\r\n      buybackUpperLimit = _amount;\r\n    }\r\n\r\n    function setBuyBackDivisor(uint256 _newValue) external onlyOwner() {\r\n        require(_newValue > 0, \"cannot be set as zero\");\r\n        buyBackDivisor = _newValue;\r\n    }\r\n\r\n  // to recieve ETH from uniswapV2Router when swaping\r\n  receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"BuyBackEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxWalletSize\",\"type\":\"uint256\"}],\"name\":\"MaxWalletSizeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"SendETHRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendTokenRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwappedForEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAddedForLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAddedForLp\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MaxTXAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"amnestySniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostRewardsContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostRewardsPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackUpperLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"calculateETHRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"calculateTokenRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimETHRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimTokenRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"eligibleForRewardBooster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExclusionContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSellMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getLastETHRewardsClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isRemovedSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"isUniswapPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"removeUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsClaimTimeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setBoostRewardsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"}],\"name\":\"setBoostRewardsPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newValue\",\"type\":\"uint256\"}],\"name\":\"setBuyBackDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBuyBackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setBuybackReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setFeeExclusionContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"setFeeSellMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsMaxBuyActivated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmountPercetange\",\"type\":\"uint256\"}],\"name\":\"setMaxTxnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletSizePercentage\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionNewFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryNewFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethRewardsNewFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackRewardsNewFee\",\"type\":\"uint256\"}],\"name\":\"setNewFeesPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setRewardsClaimTimeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateBuybackUpperLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MRDABB", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://481548ed1cf27c806f96327f520be9aed594182f5892203e7f8dfa2a4636571c"}