{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"remappings\": []\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Generator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { Pair } from \\\"./Pair.sol\\\";\\nimport { Factory } from \\\"./Factory.sol\\\";\\nimport { TransferHelper } from \\\"./libraries/TransferHelper.sol\\\";\\nimport { Lib } from \\\"./libraries/Lib.sol\\\";\\nimport { Math } from \\\"./libraries/Math.sol\\\";\\nimport { IToken } from \\\"./interfaces/IToken.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\nimport { IPair } from \\\"./interfaces/IPair.sol\\\";\\nimport { IFactory } from \\\"./interfaces/IFactory.sol\\\";\\nimport { Router } from \\\"./abstract/Router.sol\\\";\\nimport { IRouter } from \\\"./interfaces/IRouter.sol\\\";\\nimport { IGenerator } from \\\"./interfaces/IGenerator.sol\\\";\\nimport { IBorrower } from \\\"./interfaces/IBorrower.sol\\\";\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\nimport { IAllocator } from \\\"./interfaces/IAllocator.sol\\\";\\n\\n\\ncontract Generator is IGenerator, Router {\\n\\n    event FactoryCreated(address indexed factory, address owner);\\n    event OwnerChanged(address indexed factory, address owner);\\n    event LabFeesSet(uint16 lab, uint16 borrow, uint16 refer);\\n    event FeesChanged(address indexed factory, address indexed teamAddress, uint16 teamFee, address burnToken, uint16 burnFee, uint16 lpFee, address indexed referrer, uint16 referFee, uint16 labFee);\\n    event PairFeeSet(address indexed factory, address indexed pair, uint16 teamFee, uint16 burnFee, uint16 lpFee);\\n    event FeeCollected(address indexed f, address indexed t, uint a);\\n    event ToggledStable(address indexed token, bool stable);\\n    event AllocatorCreated(address indexed factory, address indexed allocator);\\n\\n    struct Fee {\\n        uint16 burnFee;\\n        uint16 teamFee;\\n        uint16 lpFee;\\n        bool useFee;\\n    }\\n\\n    address public immutable PAIR_LOGIC;\\n    address public immutable FACTORY_LOGIC;\\n    address public immutable ALLOCATOR_LOGIC;\\n    uint256 public CREATION_FEE = 10 ** 17 * 3;\\n    uint16 public borrowFee;\\n    bool public allowLoans = true;\\n    uint16 public REFER_FEE = maxFeeRefer(5); // .05%\\n    uint16 public LAB_FEE = maxFeeLab(15); // .15%\\n    uint16 public constant FEE_DENOMINATOR = 10000; // \\n    mapping(address => address[]) _tokens; // \\n    mapping(address => address[]) _pairs; // \\n    mapping(address => mapping(address => bool)) hasToken;\\n    mapping(address => Fee) _pairFees;\\n    mapping(address => bool) public stables;\\n    mapping(address => bool) public isPair;\\n    address[] public factories;\\n    address[] public allocators;\\n    mapping(address => bool) public isFactory;\\n    mapping(address => mapping(address => mapping(address => address))) public pairs;\\n    mapping(address => Info) _factoryInfo;\\n    address public LAUNCHER;\\n    function factoryInfo(address f) external view returns (Info memory) {\\n        return _factoryInfo[f];\\n    }\\n\\n    modifier onlyCreator(address f) {\\n        if (_factoryInfo[f].owner != msg.sender) revert();\\n        _;\\n    }\\n\\n    modifier onlyOwner {\\n        if (msg.sender != _factoryInfo[address(this)].owner) revert();\\n        _;\\n    }\\n\\n    modifier onlyPair {\\n        if (!isPair[msg.sender]) revert();\\n        _;\\n    }\\n\\n    modifier onlyInternal {\\n        if (!isFactory[msg.sender] && !isPair[msg.sender]) revert();\\n        _;\\n    }\\n\\n    modifier validFees(uint16 t, uint16 b, uint16 l) {\\n        require(t + b + l <= 100); // Max Possible factory fees are 1%\\n        _;\\n    }\\n\\n    constructor(address _weth, address _allocator, address _pair, address _factory) {\\n        WETH = _weth;\\n        LAUNCHER = msg.sender;\\n        router = address(this);\\n        generator = address(this);\\n        PAIR_LOGIC = _pair;\\n        FACTORY_LOGIC = _factory;\\n        ALLOCATOR_LOGIC = _allocator;\\n        isFactory[address(this)] = true;\\n        _factoryInfo[address(this)].owner = msg.sender;\\n        _factoryInfo[address(this)].lpFee = 17;\\n        _factoryInfo[address(this)].teamFee = 8;\\n        _tokens[FACTORY_LOGIC].push(_weth);\\n        hasToken[FACTORY_LOGIC][_weth] = true;\\n        address allocator = createAllocator(address(this));\\n        _factoryInfo[address(this)].teamAddress = allocator;\\n    }\\n\\n    function initialize(address) external override {}\\n\\n    function WRAPPED_ETH() external view override returns (address) {\\n        return WETH;\\n    }\\n\\n    /**\\n     * @dev  Returns the fees for `pair` if they have been set or the fees for `factory`.\\n     * The fee for a pair being set is indicated by the setter not being address(0)\\n     */\\n    function pairFees(address pair) external view returns(Info memory fInfo) {\\n        address f = IPair(pair).factory();\\n        Fee memory pFee = _pairFees[pair];\\n        fInfo = _factoryInfo[f];\\n        if (pFee.useFee) {\\n            fInfo.lpFee = pFee.lpFee;\\n            fInfo.burnFee = pFee.burnFee;\\n            fInfo.teamFee = pFee.teamFee;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of factories.\\n     */\\n    function totalFactories() external view returns (uint) {\\n        return factories.length;\\n    }\\n\\n    /**\\n     * @dev returns array of tokens associated with `f`.\\n     */\\n    function tokens(address f) public view returns (address[] memory) {\\n        uint l = _tokens[(f == address(this)) ? FACTORY_LOGIC : f].length;\\n        address[] memory __tokens = new address[](l);\\n        for (uint i; i < l; i++) {\\n            __tokens[i] = _tokens[(f == address(this)) ? FACTORY_LOGIC : f][i];\\n        }\\n        return __tokens;\\n    }\\n\\n    /**\\n     * @dev Returns the address for a pair that has `tokenA` and `tokenB` and factory `f`.\\n     */\\n    function computePairAddress(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair) {\\n        (address token0, address token1) = Lib.sortsBefore(tokenA, tokenB);\\n        bytes32 salt = keccak256(abi.encodePacked(factory, token0, token1));\\n        pair = Lib.predictDeterministicAddress(PAIR_LOGIC, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns and array of pairs that for the tokens in `path`.\\n     * The array will be of length `path.length - 1`.\\n     * The first pair will be the pair for the first two tokens in `path`.\\n     * The second pair will be the pair for the second and third tokens in `path`.\\n     */\\n    function getPairs(address[] calldata path) public view override(Router, IGenerator) returns (address[] memory __pairs){\\n        address f = ((address(this) != msg.sender) && isFactory[msg.sender]) ? msg.sender : address(this);\\n        __pairs = new address[](path.length - 1);\\n        for (uint i; i < path.length - 1; i++) {\\n            __pairs[i] = pairs[f][path[i]][path[i + 1]];\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the factory fees and where they are distributed for `f`.\\n     */\\n    function setFactoryFees(address f, uint16 burnFee, address burnAddress, uint16 teamFee, address teamAddress, uint16 lpFee) external onlyCreator(f) validFees(burnFee, teamFee, lpFee) {\\n        address t = teamAddress == address(0) ? _factoryInfo[f].teamAddress : teamAddress;\\n        _factoryInfo[f].burnFee = burnFee;\\n        _factoryInfo[f].burnToken = burnAddress;\\n        _factoryInfo[f].teamFee = teamFee;\\n        _factoryInfo[f].teamAddress = t;\\n        _factoryInfo[f].lpFee = lpFee;\\n        emit FeesChanged(f, t, teamFee, burnAddress, burnFee, lpFee, _factoryInfo[f].referrer, _factoryInfo[f].referFee, _factoryInfo[f].labFee);\\n    }\\n    /**\\n     * @dev Set the fees for a pair\\n     * only callable by the creator of `f` on a pair created by `f`.\\n     */\\n    function setPairFees(address f, address pair, uint16 burnFee, uint16 teamFee, uint16 lpFee, bool useFee) external onlyCreator(f) validFees(burnFee, teamFee, lpFee) {\\n        if (IPair(pair).factory() != f) revert();\\n        _pairFees[pair] = Fee(burnFee, teamFee, lpFee, useFee);\\n        emit PairFeeSet(f, pair, teamFee, burnFee, lpFee);\\n    }\\n\\n    /**\\n     * @dev Sets the creator for `f` to `_owner`.\\n     * only callable by the creator of `f`.\\n     */\\n    function transferOwnership(address f, address _owner) external onlyCreator(f) {\\n        _factoryInfo[f].owner = _owner;\\n       emit OwnerChanged(f, _owner);\\n    }\\n\\n    function toggleLoans() external onlyOwner {\\n        allowLoans = !allowLoans;\\n    }\\n\\n    /* \\n     * @dev Sets the referrer and referFee and labFee for `f`.\\n     * only callable by the owner of Generator.\\n      */\\n    function setReferFees(address f, uint16 l, uint16 rf) external onlyOwner {\\n        _factoryInfo[f].referFee = maxFeeRefer(rf);\\n        _factoryInfo[f].labFee = maxFeeLab(l);\\n        emit FeesChanged(f, _factoryInfo[f].teamAddress, _factoryInfo[f].teamFee, _factoryInfo[f].burnToken, _factoryInfo[f].burnFee, _factoryInfo[f].lpFee, _factoryInfo[f].referrer, _factoryInfo[f].referFee, _factoryInfo[f].labFee);\\n    }\\n\\n    function maxFeeLab(uint16 f) internal pure returns (uint16 m) {\\n        m = uint16(Math.min(f, 25)); // Max Possible fee is .25%\\n    }\\n\\n    function maxFeeRefer(uint16 f) internal pure returns(uint16 m) {\\n        m = uint16(Math.min(f, 25)); // Max Possible fee is .25%\\n    }\\n\\n    function maxSwap2Fee(uint16 f) external pure returns (uint16 m) {\\n        m = uint16(Math.min(f, 3000)); // Max Possible fee is 30%\\n    }\\n\\n    /**\\n     * @dev Sets the default fees for creating a factory, borrowing tokens, referring, and the lab.\\n     */\\n    function setFees(uint _cF, uint16 _lF, uint16 _bF, uint16 _rF) external onlyOwner {\\n        CREATION_FEE = _cF; // Can be any amount\\n        LAB_FEE = maxFeeLab(_lF);\\n        borrowFee = uint16(Math.min(_bF, 100)); // Max Possible is 1%\\n        REFER_FEE = maxFeeRefer(_rF);\\n        emit LabFeesSet(LAB_FEE, borrowFee, REFER_FEE);\\n    }\\n\\n    function setLauncher(address launcher) external onlyOwner {\\n        LAUNCHER = launcher; // Only address allowed to dynamically set referral fee while creating a factory.\\n    }\\n\\n    /**\\n     * @dev Sets a token as a stable coin.\\n    * Stable coins are preferred for collecting fees from pairs.\\n     */\\n    function toggleStable(address t) external onlyOwner {\\n        stables[t] = !stables[t];\\n        emit ToggledStable(t, stables[t]);\\n    }\\n\\n    function createAllocator(address _factory) internal returns (address allocator) {\\n        bytes32 salt = keccak256(abi.encodePacked(allocators.length));\\n        allocator = Lib.cloneDeterministic(ALLOCATOR_LOGIC, salt);\\n        IAllocator(allocator).initialize(_factory, (_factory == address(this) ? address(this) : address(0)));\\n        allocators.push(allocator);\\n    }\\n    /**\\n     * @dev Creates a new factory and sets the fees to the current defaults.\\n     */\\n    function createFactory(address owner, address referrer, uint16 referFee) external payable returns (address created) {\\n        uint fee = CREATION_FEE;\\n        uint v = msg.value;\\n        if (v < fee) revert();\\n        if (v > fee) {\\n            uint a = v - fee;\\n            TransferHelper.safeTransferETH(msg.sender, a);\\n            v -= a;\\n            assert(v == fee);\\n        }\\n        address weth = WETH;\\n        IWETH(weth).deposit{value: v}();\\n        TransferHelper.safeTransfer(weth, _factoryInfo[address(this)].owner, v);\\n        emit FeeCollected(address(this), weth, v);\\n        bytes32 salt = keccak256(abi.encodePacked(factories.length));\\n        created = Lib.cloneDeterministic(FACTORY_LOGIC, salt);\\n        IFactory(created).initialize(address(this));\\n        factories.push(created);\\n        isFactory[created] = true;\\n        uint16 rf = LAUNCHER == msg.sender ? maxFeeRefer(referFee) : REFER_FEE;\\n        _factoryInfo[created] = Info(owner, 8, address(0), 0, address(0), 17, referrer == address(0) ? _factoryInfo[address(this)].teamAddress : referrer, rf, LAB_FEE);\\n        emit FactoryCreated(created, msg.sender);\\n        address allocator = createAllocator(created);\\n        emit AllocatorCreated(created, allocator);\\n        _factoryInfo[created].teamAddress = allocator;\\n        emit FeesChanged(created, allocator, 8, address(0), 0, 17, referrer, rf, LAB_FEE);\\n    }\\n\\n    /**\\n     * @dev Associates a token with an address\\n     */\\n    function addToken(address s, address t) internal {\\n        if (!hasToken[s][t]) {\\n            hasToken[s][t] = true;\\n            _tokens[s].push(t);\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates a pair and associates it with `f`.\\n     */\\n    function _createPair(address f, address token0, address token1, address feeTaker, address takeFeeIn) internal returns (address created) {\\n        bytes32 salt = keccak256(abi.encodePacked(f, token0, token1));\\n        created = Lib.cloneDeterministic(PAIR_LOGIC, salt);\\n        IPair(created).initialize(f, token0, token1, feeTaker, takeFeeIn);\\n        pairs[f][token0][token1] = created;\\n        pairs[f][token1][token0] = created;\\n        address referrer = _factoryInfo[f].referrer;\\n        if (referrer != address(0)) {\\n            _pairs[referrer].push(created);\\n            addToken(referrer, token0);\\n            addToken(referrer, token1);\\n        }\\n        addToken(FACTORY_LOGIC, token0);\\n        addToken(FACTORY_LOGIC, token1);\\n        addToken(f, token0);\\n        addToken(f, token1);\\n        _pairs[f].push(created);\\n        _pairs[FACTORY_LOGIC].push(created);\\n        isPair[created] = true;\\n        if (feeTaker != address(0)) IToken(feeTaker).addPair(created, takeFeeIn);\\n    }\\n\\n    function cp(address tA, address tB) internal view returns (address f, address token0, address token1) {\\n        if (tA == tB || tA == address(0) || tB == address(0)) revert();\\n        (token0, token1) = Lib.sortsBefore(tA, tB);\\n        f = ((address(this) != msg.sender) && isFactory[msg.sender]) ? msg.sender : address(this);\\n        require(pairs[f][token0][token1] == address(0), \\\"E\\\");\\n    }\\n\\n    /**\\n     * @dev Create a pair for `tokenA` and `tokenB`.\\n     */\\n    function createPair(\\n        address tokenA, \\n        address tokenB\\n    ) external override (IFactory, IGenerator) returns (address pair) {\\n        (address f, address token0, address token1) = cp(tokenA, tokenB);\\n        pair = _createPair(f, token0, token1, address(0), address(0));\\n        if (f == address(this)) {\\n            allPairs.push(pair);\\n            emit PairCreated(token0, token1, pair, allPairs.length);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Create a pair that utilizes a fee taker.\\n     */\\n    function createSwap2Pair(\\n        address tokenA, \\n        address tokenB,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair) {\\n        (address f, address token0, address token1) = cp(tokenA, tokenB);\\n        pair = _createPair(f, token0, token1, feeTaker, takeFeeIn);\\n        if (f == address(this)) {\\n            allPairs.push(pair);\\n            emit PairCreated(token0, token1, pair, allPairs.length);\\n        }\\n    }\\n\\n    /**\\n     * @dev Create a pair and add liquidity to it. The pair may utilize a fee taker.\\n     */\\n    function createPairWithLiquidity(\\n        address tokenA, \\n        address tokenB,\\n        uint amountA,\\n        uint amountB,\\n        address to,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair) {\\n        (address f, address token0, address token1) = cp(tokenA, tokenB);\\n        pair = _createPair(f, token0, token1, feeTaker, takeFeeIn);\\n        if (f == address(this)) {\\n            allPairs.push(pair);\\n            emit PairCreated(token0, token1, pair, allPairs.length);\\n            TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n            TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n            IPair(pair).mint(to);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform a swap using `__pairs`.\\n     * `__pairs` is an array of pairs that will be used to perform the swap.\\n    * The first pair should already have been sent the input amount.\\n    * This function is only callable by a pair or factory.\\n     */\\n    function swapInternal(\\n        address[] calldata __pairs, \\n        address caller,\\n        address to\\n    ) external onlyInternal returns (uint256 amountOut) {\\n        uint l = __pairs.length;\\n        for (uint i; i < l; i++) {\\n            address _to = i == l - 1 ? to : __pairs[i + 1];\\n            amountOut = IPair(__pairs[i]).swap(_to, caller, msg.sender);\\n        }\\n    }\\n\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IAllocator {\\n    function initialize(address, address) external;\\n    function distribute(address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IERC20 {\\n\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n    \\n}\"\r\n    },\r\n    \"contracts/interfaces/IBorrower.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IBorrower {\\n    function onLoan(address token, uint amount, uint16 fee, bytes calldata data) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGenerator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n\\ninterface IGenerator {\\n    struct Info {\\n        address owner;\\n        uint16 burnFee;\\n        address burnToken;\\n        uint16 teamFee;\\n        address teamAddress;\\n        uint16 lpFee;\\n        address referrer;\\n        uint16 referFee;\\n        uint16 labFee;\\n    }\\n    function allowLoans() external view returns (bool);\\n    function isPair(address) external view returns (bool);\\n    function borrowFee() external view returns (uint16);\\n    function factoryInfo(address) external view returns (Info memory);\\n    function pairFees(address pair) external view returns (Info memory);\\n    function LAB_FEE() external view returns (uint16);\\n    function FEE_DENOMINATOR() external view returns (uint16);\\n    function stables(address) external view returns (bool);\\n    function pairs(address factory, address token0, address token1) external view returns (address);\\n    function getPairs(address[] calldata path) external  view returns (address[] memory _pairs);\\n    function maxSwap2Fee(uint16 f) external view returns (uint16);\\n    function swapInternal(\\n        address[] calldata _pairs,\\n        address caller,\\n        address to\\n    ) external returns (uint256 amountOut);\\n    function WRAPPED_ETH() external view returns (address);\\n    function createPair(\\n        address tokenA, \\n        address tokenB\\n    ) external returns (address pair);\\n     function createSwap2Pair(\\n        address tokenA, \\n        address tokenB,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair);\\n    function createPairWithLiquidity(\\n        address tokenA, \\n        address tokenB,\\n        uint amountA,\\n        uint amountB,\\n        address to,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair);\\n    function isFactory(address) external returns (bool);\\n    function tokens(address) external returns (address[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n\\ninterface IRouter {\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swap(\\n        address input,\\n        uint amountIn,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function getPair(address, address) external returns (address);\\n}\"\r\n    },\r\n    \"contracts/abstract/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IGenerator } from \\\"../interfaces/IGenerator.sol\\\";\\nimport { IPair } from \\\"../interfaces/IPair.sol\\\";\\nimport { IFactory } from \\\"../interfaces/IFactory.sol\\\";\\nimport { IRouter } from \\\"../interfaces/IRouter.sol\\\";\\nimport { TransferHelper } from \\\"../libraries/TransferHelper.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { IWETH } from \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract Router is IFactory, IRouter {\\n\\n    address public router;\\n    address public generator;\\n    address public WETH;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n    \\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, \\\"E\\\");\\n        _;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n    \\n    address[] public allPairs;\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function getPair(address tokenA, address tokenB) public view override(IFactory, IRouter) returns (address) {\\n        return IGenerator(generator).pairs(address(this), tokenA, tokenB);\\n    }\\n\\n    function getPairs(address[] calldata path) public view virtual returns (address[] memory _pairs) {\\n        return IGenerator(generator).getPairs(path);\\n    }\\n\\n    /**\\n     * @dev Gets the amounts that will be returned by pairs created by this contract given an `amountIn` and `caller`.\\n     */\\n    function getAmountsOut(\\n        uint amountIn, \\n        address[] memory path,\\n        address caller\\n    ) external view returns (\\n        uint[] memory\\n    ) {\\n        uint[] memory amounts = new uint[](path.length - 1);\\n        uint l = path.length - 1;\\n        for (uint i; i < l; i++) {\\n            address pair = getPair(path[i],path[i + 1]);\\n            amounts[i] = uint(IPair(pair).amountOut(path[i], i == 0 ? amountIn : amounts[i-1], caller));\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @dev Gets the amounts that will be required by pairs created by this contract given an `amountOut` and `caller`.\\n     */\\n    function getAmountsIn(\\n        uint amountOut, \\n        address[] memory path,\\n        address caller\\n    ) public view returns (\\n        uint[] memory\\n    ) {\\n        uint[] memory amounts = new uint[](path.length - 1);\\n        for (uint i = path.length; i > 1; i--) {\\n            address pair = getPair(path[i - 2],path[i-1]);\\n            amounts[i-2] = uint(IPair(pair).amountIn(path[i-1], i == path.length ? amountOut : amounts[i-1], caller));\\n        }\\n        return amounts;\\n    }\\n\\n    /**\\n     * @dev Add liquidity to a pair created by this contract. If the pair does not exist, it will be created.\\n     */\\n     function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) returns (\\n        uint amountA, \\n        uint amountB, \\n        uint liquidity\\n    ) {\\n        IGenerator gen = IGenerator(generator);\\n        address pair = gen.pairs(address(this), tokenA,tokenB);\\n        if (pair == address(0)) pair = IFactory(address(this)).createPair(tokenA, tokenB);\\n        IPair ipair = IPair(pair);\\n        address token0 = ipair.token0();\\n        (uint reserve0, uint reserve1,) = ipair.getReserves();\\n        (uint reserveA, uint reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        bool hasLiquidity = (reserve0 > 0) || (reserve1 > 0);\\n        amountA = hasLiquidity ? amountBDesired * reserveA / reserveB : amountADesired;\\n        amountB = hasLiquidity ? amountADesired * reserveB / reserveA : amountBDesired;\\n        require(amountA <= amountADesired, \\\"IA\\\");\\n        require(amountB <= amountBDesired, \\\"IB\\\");\\n        require(amountA >= amountAMin, \\\"IAA\\\");\\n        require(amountB >= amountBMin, \\\"IBA\\\"); \\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        liquidity = ipair.mint(to);\\n    }\\n\\n    /**\\n     * @dev Add liquidity to a pair created by this contract with ETH. If the pair does not exist, it will be created.\\n     */\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) returns (\\n        uint amountA, \\n        uint amountB, \\n        uint liquidity\\n    ) {\\n        IGenerator gen = IGenerator(generator);\\n        uint amountADesired = amountTokenDesired;\\n        uint amountAMin = amountTokenMin;\\n        uint amountBDesired = msg.value;\\n        uint amountBMin = amountETHMin;\\n        address pair = gen.pairs(address(this), token, WETH);\\n        if (pair == address(0)) pair = IFactory(address(this)).createPair(WETH, token);\\n        IPair ipair = IPair(pair);\\n        address token0 = ipair.token0();\\n        (uint reserve0, uint reserve1,) = ipair.getReserves();\\n        (uint reserveA, uint reserveB) = token == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        bool hasLiquidity = (reserve0 > 0) || (reserve1 > 0);\\n        amountA = hasLiquidity ? amountBDesired * reserveA / reserveB : amountADesired;\\n        amountB = hasLiquidity ? amountADesired * reserveB / reserveA : amountBDesired;\\n        require(amountA <= amountADesired, \\\"IA\\\");\\n        require(amountB <= amountBDesired, \\\"IB\\\");\\n        require(amountA >= amountAMin, \\\"IAA\\\");\\n        require(amountB >= amountBMin, \\\"IBA\\\");\\n        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountA);\\n        IWETH(WETH).deposit{value: amountB}();\\n        TransferHelper.safeTransfer(WETH, pair, amountB);\\n        liquidity = ipair.mint(to);\\n        if (msg.value > amountB) TransferHelper.safeTransferETH(msg.sender, msg.value - amountB);\\n    }\\n\\n    /**\\n     * @dev Remove liquidity from a pair created by this contract.\\n     */\\n     function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = getPair(tokenA, tokenB);\\n        require(pair != address(0), \\\"F:NE\\\");\\n        TransferHelper.safeTransferFrom(pair, msg.sender, pair, liquidity); // send liquidity to pair\\n        IPair ipair = IPair(pair);\\n        (uint amount0, uint amount1) = ipair.burn(to);\\n        address token0 = ipair.token0();\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, \\\"F:IAA\\\");\\n        require(amountB >= amountBMin, \\\"F:IBA\\\");\\n    }\\n\\n    /**\\n     * @dev Remove liquidity from a pair created by this contract and receive ETH.\\n     */\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WETH,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(token, to, amountToken);\\n        IWETH(WETH).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n\\n\\n    /**\\n     * @dev Internal swap function used by the public swap functions.\\n     */\\n    function _swap(address[] memory pairs, address caller, address to) internal returns (uint) {\\n        return IGenerator(generator).swapInternal(pairs, caller, to);\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) {\\n        address[] memory _pairs = getPairs(path);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint amountOut = _swap(_pairs, msg.sender, to);\\n        require(amountOut >= amountOutMin, \\\"IO\\\");\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) {\\n        address[] memory _pairs = getPairs(path);\\n        uint amountIn = getAmountsIn(amountOut, path, msg.sender)[0];\\n        require(amountIn <= amountInMax, \\\"EI\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint _amountOut = _swap(_pairs, msg.sender, to);\\n        require(_amountOut >= amountOut, \\\"IO\\\");\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        if (path[1] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        uint amountIn = getAmountsIn(amountOut, path, msg.sender)[0];\\n        require(amountIn <= amountInMax, \\\"EI\\\");\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint _amountOut = _swap(_pairs, msg.sender, address(this));\\n        require(_amountOut >= amountOut, \\\"IO\\\");\\n        IWETH(WETH).withdraw(_amountOut);\\n        TransferHelper.safeTransferETH(to, _amountOut);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) public ensure(deadline) {\\n        if (path[1] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        TransferHelper.safeTransferFrom(path[0], msg.sender, _pairs[0], amountIn);\\n        uint amountOut = _swap(_pairs, msg.sender, address(this));\\n        require(amountOut >= amountOutMin, \\\"IO\\\");\\n        IWETH(WETH).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) public payable ensure(deadline) {\\n        _swapExactETHForTokens(amountOutMin, path, to);\\n    }\\n\\n    function _swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to) internal {\\n        if (path[0] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        uint value = msg.value;\\n        IWETH(WETH).deposit{value: value}();\\n        TransferHelper.safeTransfer(path[0], _pairs[0], value);\\n        uint amountOut = _swap(_pairs, msg.sender, to);\\n        require(amountOut >= amountOutMin, \\\"IO\\\");\\n    }\\n\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable ensure(deadline) {\\n        if (path[0] != WETH) revert();\\n        address[] memory _pairs = getPairs(path);\\n        uint amountIn = getAmountsIn(amountOut, path, msg.sender)[0];\\n        require(msg.value >= amountIn, \\\"EI\\\");\\n        IWETH(WETH).deposit{value: amountIn}();\\n        TransferHelper.safeTransfer(path[0], _pairs[0], amountIn);\\n        if (msg.value > amountIn) TransferHelper.safeTransferETH(msg.sender, msg.value - amountIn);\\n        uint _amountOut = _swap(_pairs, msg.sender, to);\\n        require(_amountOut >= amountOut, \\\"IO\\\");\\n    }\\n\\n     function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n     function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) {\\n        _swapExactETHForTokens(amountOutMin, path, to);\\n    }\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        swapExactTokensForETH(amountIn, amountOutMin, path, to, deadline);\\n    }\\n\\n     function swapTokensForExactTokensSupportingFeeOnTransferTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        swapTokensForExactTokens(amountOut, amountInMax, path, to, deadline);\\n    }\\n\\n    /**\\n     * @dev Swap tokens for tokens.\\n     * Supports multiple pairs.\\n     */\\n    function swap(\\n        address input,\\n        uint amountIn,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        IPair pair = IPair(__pairs[0]);\\n        bool z = pair.token0() == input;\\n        if (!z && pair.token1() != input) revert(\\\"II\\\");\\n        TransferHelper.safeTransferFrom(input, msg.sender, __pairs[0], amountIn);\\n        uint amountOut = _swap(__pairs, msg.sender, to);\\n        require(amountOut >= minOutput, \\\"IO\\\");\\n    }\\n\\n    /**\\n     * @dev Swap tokens for tokens.\\n     * Supports multiple pairs.\\n     */\\n    function swapWithETH(\\n        address input,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external payable ensure(deadline) {\\n        uint amountIn = msg.value;\\n        address weth = WETH;\\n        require(input == weth, \\\"EO\\\");\\n        IPair pair = IPair(__pairs[0]);\\n        bool z = pair.token0() == input;\\n        if (!z && pair.token1() != input) revert(\\\"II\\\");\\n        IWETH(weth).deposit{value: amountIn}();\\n        TransferHelper.safeTransfer(input, __pairs[0], amountIn);\\n        uint amountOut = _swap(__pairs, msg.sender, to);\\n        require(amountOut >= minOutput, \\\"IO\\\");\\n    }\\n\\n    /**\\n     * @dev Swap tokens for tokens.\\n     * Supports multiple pairs.\\n     */\\n    function swapForETH(\\n        address input,\\n        uint amountIn,\\n        uint minOutput,\\n        address[] calldata __pairs,\\n        address to,\\n        uint deadline\\n    ) external ensure(deadline) {\\n        IPair pair = IPair(__pairs[0]);\\n        bool z = pair.token0() == input;\\n        if (!z && pair.token1() != input) revert(\\\"II\\\");\\n        address weth = WETH;\\n        pair = IPair(__pairs[__pairs.length - 1]);\\n        z = pair.token0() == weth;\\n        if (!z && pair.token1() != weth) revert(\\\"EO\\\");\\n        TransferHelper.safeTransferFrom(input, msg.sender, __pairs[0], amountIn);\\n        uint amountOut = _swap(__pairs, msg.sender, address(this));\\n        require(amountOut >= minOutput, \\\"IO\\\");\\n        IWETH(weth).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IFactory {\\n    function router() external view returns (address);\\n    function initialize(address) external;\\n    function allPairs(uint) external view returns (address);\\n    function getPair(address tokenA, address tokenB) external view returns (address);\\n    function allPairsLength() external view returns (uint);\\n    function createPair(\\n        address tokenA, \\n        address tokenB\\n    ) external returns (address pair);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    struct Fees {\\n        uint amount0;\\n        uint amount1;\\n    }\\n    function collect(address, address) external;\\n    function feeBalances(address) external view returns (Fees memory);\\n    function initialize(address factory, address token0, address token1, address _feeTaker, address _takeFeeIn) external;\\n    function amountIn(address output, uint _amountOut, address caller) external view returns (uint _amountIn);\\n    function amountOut(address input, uint _amountIn, address caller) external view returns (uint _amountOut);\\n    function swap(\\n        address to,\\n        address caller,\\n        address factory\\n    ) external returns (uint);\\n    function borrow(address to, uint _amountOut, bool isToken0, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (\\n        uint112 _reserve0, \\n        uint112 _reserve1, \\n        uint32 _blockTimestampLast\\n    );\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function factory() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n    function balanceOf(address account) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IToken {\\n    function addPair(address pair, address token) external;\\n    function handleFee() external;\\n    function getTotalFee(address) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n/// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function muldiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = muldiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// a library for performing various math operations\\n\\nlibrary Lib {\\n    function sortsBefore(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint256 value\\n) internal {\\n    // bytes4(keccak256(bytes('approve(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper::safeApprove: approve failed\\\"\\n    );\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint256 value\\n) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper::safeTransfer: transfer failed\\\"\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 value\\n) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)\\\")));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      \\\"TransferHelper: transferFrom failed\\\"\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value:value}(\\\"\\\");\\n    require(success, \\\"Transfer failed.\\\");\\n  }\\n}\"\r\n    },\r\n    \"contracts/Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { Lib } from \\\"./libraries/Lib.sol\\\";\\nimport { TransferHelper } from \\\"./libraries/TransferHelper.sol\\\";\\nimport { IToken } from \\\"./interfaces/IToken.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\nimport { IFactory } from \\\"./interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"./interfaces/IPair.sol\\\";\\nimport { Router } from \\\"./abstract/Router.sol\\\";\\nimport { IGenerator } from \\\"./interfaces/IGenerator.sol\\\";\\n\\ncontract Factory is Initializable, Router {\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n    * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n    * `onlyInitializing` functions can be used to initialize parent contracts.\\n    * Called only by the Router contract during the creation of the Factory.\\n     */\\n    function initialize(address _generator) external initializer() {\\n        require(_generator != address(0), \\\"F:IA\\\");\\n        generator = _generator;\\n        router = _generator;\\n        WETH = IGenerator(_generator).WRAPPED_ETH();\\n    }\\n\\n    /**\\n     * @dev Create a new pair for two tokens.\\n     */\\n    function createPair(\\n        address tokenA, \\n        address tokenB\\n    ) external returns (address pair) {\\n        pair = IGenerator(generator).createPair(tokenA, tokenB);\\n        allPairs.push(pair);\\n        (address token0, address token1) = Lib.sortsBefore(tokenA, tokenB);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n    \\n    /**\\n     * @dev create a new pair for two tokens with a fee taker.\\n     */\\n    function createSwap2Pair(\\n        address tokenA, \\n        address tokenB,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair) {\\n        pair = IGenerator(generator).createSwap2Pair(tokenA, tokenB, feeTaker, takeFeeIn);\\n        allPairs.push(pair);\\n        (address token0, address token1) = Lib.sortsBefore(tokenA, tokenB);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n    }\\n\\n    /**\\n     * @dev Create a new pair for two tokens with liquidity. The pair may be created with a fee taker.\\n     */\\n    function createPairWithLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountA,\\n        uint amountB,\\n        address to,\\n        address feeTaker,\\n        address takeFeeIn\\n    ) external returns (address pair) {\\n        IGenerator gen = IGenerator(generator);\\n        pair = gen.createPairWithLiquidity(tokenA, tokenB, amountA, amountB, to, feeTaker, takeFeeIn);\\n        allPairs.push(pair);\\n        (address token0, address token1) = Lib.sortsBefore(tokenA, tokenB);\\n        emit PairCreated(token0, token1, pair, allPairs.length);\\n        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n        IPair(pair).mint(to);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport { Math } from \\\"./libraries/Math.sol\\\";\\nimport { UQ112x112 } from \\\"./libraries/UQ112x112.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\nimport { IGenerator } from \\\"./interfaces/IGenerator.sol\\\";\\nimport { IFactory } from \\\"./interfaces/IFactory.sol\\\";\\nimport { IPair } from \\\"./interfaces/IPair.sol\\\";\\nimport { IBorrower } from \\\"./interfaces/IBorrower.sol\\\";\\nimport { IToken } from \\\"./interfaces/IToken.sol\\\";\\n\\ncontract Pair is IERC20, Initializable, IPair {\\n    \\n    string public constant override name = \\\"P\\\";\\n    string public constant override symbol = \\\"LP\\\";\\n    uint8 public constant override decimals = 18;\\n    uint public override totalSupply;\\n    mapping(address => uint) public override balanceOf;\\n    mapping(address => mapping(address => uint)) public override allowance;\\n\\n    function approve(address spender, uint value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint value) external override returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\\n        if (allowance[from][msg.sender] < value) revert();\\n        allowance[from][msg.sender] -= value;\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    function _mint(address to, uint value) internal {\\n        totalSupply += value;\\n        balanceOf[to] += value;\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint value) internal {\\n        balanceOf[from] -= value;\\n        totalSupply -= value;\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    function _approve(address owner, address spender, uint value) internal {\\n        allowance[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _transfer(address from, address to, uint value) internal {\\n        if (balanceOf[from] < value) revert();\\n        balanceOf[from] -= value;\\n        balanceOf[to] += value;\\n        emit Transfer(from, to, value);\\n    }\\n\\n    address public router;\\n    address public factory;\\n    address public token0;\\n    address public token1;\\n    uint112 private reserve0;\\n    uint112 private reserve1;\\n    uint32 private blockTimestampLast;\\n    uint public price0CumulativeLast;\\n    uint public price1CumulativeLast;\\n    uint16 public constant FEE_DENOMINATOR = 10000;\\n    address public baseToken;\\n    address public feeTaker;\\n    mapping(address => Fees) _fees;\\n    Fees public totalOwed;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n    event FeeCollected(address indexed f, address indexed t, uint a);\\n    event Collected(address indexed f, address indexed t, uint a);\\n    event BuyBack(address indexed f, address indexed t, uint a);\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == factory);\\n        _;\\n    }\\n    \\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n    * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n    * `onlyInitializing` functions can be used to initialize parent contracts.\\n    * Called only by the Router contract during the creation of the Pair.\\n     */\\n    function initialize(address _factory, address _token0, address _token1,  address _feeTaker, address _takeFeeIn) external initializer() {\\n        require(_factory != address(0) && _token0 != address(0) && _token1 != address(0) && (_feeTaker == address(0) ? _takeFeeIn == address(0) : _takeFeeIn != address(0)), \\\"IV\\\");\\n        factory = _factory;\\n        token0 = _token0;\\n        token1 = _token1;\\n        baseToken = _takeFeeIn;\\n        feeTaker = _feeTaker;\\n        router = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Accepts tokens in exchange for liquidity tokens.\\n     * Only callable by the Factory contract for this pair.\\n     */\\n    function mint(address to) external onlyFactory returns (uint liquidity) {\\n        uint112 _reserve0 = reserve0;\\n        uint112 _reserve1 = reserve1;\\n        IERC20 t0 = IERC20(token0);\\n        IERC20 t1 = IERC20(token1);\\n        uint balance0 = t0.balanceOf(address(this)) - totalOwed.amount0;\\n        uint balance1 = t1.balanceOf(address(this)) - totalOwed.amount1;\\n        uint amount0 = _takeFees(true, true, balance0 - _reserve0, factory, false);\\n        uint amount1 = _takeFees(false, true, balance1 - _reserve1, factory, false);\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(amount0 * amount1) - 10**3;\\n            _mint(address(0), 10**3); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(\\n                Math.muldiv(amount0, _totalSupply, _reserve0), \\n                Math.muldiv(amount1, _totalSupply, _reserve1)\\n            );\\n        }\\n        require(liquidity > 0, \\\"IM\\\");\\n        _mint(to, liquidity);\\n        balance0 = t0.balanceOf(address(this)) - totalOwed.amount0;\\n        balance1 = t1.balanceOf(address(this)) - totalOwed.amount1;\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n\\n    /**\\n     * @dev Accepts liquidity tokens in exchange for tokens.\\n    * Only callable by the Factory contract for this pair.\\n     */\\n    function burn(address to) external onlyFactory returns (uint amount0, uint amount1) {\\n        require(totalSupply != 0, \\\"ZS\\\");\\n        uint112 _reserve0 = reserve0;\\n        uint112 _reserve1 = reserve1;\\n        uint liquidity = balanceOf[address(this)];\\n        uint _totalSupply = totalSupply;\\n        amount0 = _takeFees(true, true, Math.muldiv(liquidity, _reserve0, _totalSupply), factory, false); // using balances ensures pro-rata distribution\\n        amount1 = _takeFees(false, true, Math.muldiv(liquidity, _reserve1, _totalSupply), factory, false); // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"IB\\\");\\n        _burn(address(this), liquidity);\\n        _safeTransfer(token0, to, amount0);\\n        _safeTransfer(token1, to, amount1);\\n        uint balance0 = IERC20(token0).balanceOf(address(this)) - totalOwed.amount0;\\n        uint balance1 = IERC20(token1).balanceOf(address(this)) - totalOwed.amount1;\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    /**\\n     * @dev Borrow tokens from the pair and return them with a fee in the same transaction.\\n     */\\n    function borrow(address to, uint a, bool z, bytes calldata data) external {\\n        uint112 _reserve0 = reserve0;\\n        uint112 _reserve1 = reserve1;\\n        IERC20 token = IERC20(z ? token0 : token1);\\n        _safeTransfer(address(token), to, a);\\n        IGenerator r = IGenerator(router);\\n        require(r.allowLoans());\\n        uint16 borrowFee = r.borrowFee();\\n        IBorrower(to).onLoan(address(token), a, borrowFee, data);\\n        if (borrowFee > 0) _takeFees(z, false, Math.muldiv(a, borrowFee, FEE_DENOMINATOR), address(0), true);\\n        uint balance0 = IERC20(token0).balanceOf(address(this)) - totalOwed.amount0;\\n        uint balance1 = IERC20(token1).balanceOf(address(this)) - totalOwed.amount1;\\n        if (balance0 != _reserve0 || balance1 != _reserve1) revert();\\n    }\\n\\n    /**\\n     * @dev Total fees taken by the feeTaker for a given address on swap.\\n     */\\n    function totalFee(address caller) public view returns (uint16) {\\n        return feeTaker == address(0) ? 0 : IGenerator(router).maxSwap2Fee(IToken(feeTaker).getTotalFee(caller));\\n    }\\n\\n    /**\\n     * @dev Swap tokens for tokens.\\n     */\\n    function swap(\\n        address to,\\n        address caller,\\n        address f\\n    ) external returns (uint256 _amountOut) {\\n        if (msg.sender != router) caller = msg.sender;\\n        uint112 _reserve0 = reserve0;\\n        uint112 _reserve1 = reserve1;\\n        IERC20 tok0 = IERC20(token0);\\n        IERC20 tok1 = IERC20(token1);\\n        uint balance0 = tok0.balanceOf(address(this)) - totalOwed.amount0;\\n        uint balance1 = tok1.balanceOf(address(this)) - totalOwed.amount1;\\n        uint amount0In = balance0 - _reserve0;\\n        uint amount1In = balance1 - _reserve1;\\n        bool isToken0 = amount1In > 0;\\n        uint _amountIn = isToken0 ? amount1In : amount0In;\\n        require(_amountIn > 0, \\\"IIO\\\");\\n        address input = isToken0 ? address(tok1) : address(tok0);\\n        address token = routerFeeIn();\\n        address base = baseToken;\\n        address _feeTaker = feeTaker;\\n        uint16 denominator = FEE_DENOMINATOR;\\n        uint16 lpFee = IGenerator(router).pairFees(address(this)).lpFee;\\n        if (input == token) _amountIn = _takeFees(address(tok0) == token, false, _amountIn, f, false);\\n        if (_feeTaker != address(0) && (base == input)) {\\n            uint fee = Math.muldiv(_amountIn, totalFee(caller), denominator);\\n            if (fee > 0) {\\n                _safeApprove(base, _feeTaker, fee);\\n                IToken(_feeTaker).handleFee();\\n                _safeApprove(base, _feeTaker, 0);\\n                _amountIn -= fee;\\n            }\\n        }\\n        (uint reserveIn, uint reserveOut) = !isToken0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n        _amountOut = Math.muldiv(_amountIn, reserveOut, (reserveIn + _amountIn));\\n        require(_amountOut > 0 && _amountOut <= reserveOut, \\\"IL\\\");\\n        uint lpAmount = Math.muldiv(_amountOut, lpFee, denominator);\\n        if (_feeTaker != address(0) && (baseToken == (isToken0 ? address(tok0) : address(tok1)))) {\\n            uint16 tokenFee = totalFee(caller);\\n            uint fee = Math.muldiv(_amountOut, tokenFee + lpFee,denominator);\\n            _amountOut -= fee;\\n            fee -= lpAmount; // leave lpAmount in pool\\n            if (fee > 0) {\\n                _safeApprove(base, _feeTaker, fee);\\n                IToken(_feeTaker).handleFee();\\n                _safeApprove(base, _feeTaker, 0);\\n                _amountIn -= fee;\\n            }\\n        } else {\\n            _amountOut -= lpAmount; // leave lpAmount in pool\\n        }\\n        if ((isToken0 && (token == token0)) || (!isToken0 && (token == token1))) _amountOut = _takeFees(token0 == token, false, _amountOut, f, false);\\n        IERC20 tok = isToken0 ? tok0 : tok1;\\n        uint balBefore = tok.balanceOf(to);\\n        _safeTransfer(address(tok), to, _amountOut);\\n        _amountOut = tok.balanceOf(to) - balBefore;\\n        balance0 = tok0.balanceOf(address(this)) - totalOwed.amount0;\\n        balance1 = tok1.balanceOf(address(this)) - totalOwed.amount1;\\n        if (((balance0 - (isToken0 ? lpAmount : 0)) * (balance1 - (!isToken0 ? lpAmount : 0))) < uint(_reserve0) * _reserve1) revert();\\n        _update(balance0, balance1, _reserve0, _reserve1);\\n        emit Swap(caller, !isToken0 ? _amountIn : 0, isToken0 ? _amountIn : 0, isToken0 ? _amountOut : 0, !isToken0 ? _amountOut : 0, to);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens that would be received for a given amount of tokens.\\n     */\\n    function amountOut(address input, uint _amountIn, address caller) external view returns (uint _amountOut) {\\n        uint _reserve0 = reserve0;\\n        uint _reserve1 = reserve1;\\n        address token = routerFeeIn();\\n        address output = input == token0 ? token1 : token0;\\n        uint16 tokenFee = totalFee(caller);\\n        IGenerator gen = IGenerator(router);\\n        IGenerator.Info memory fInfo = gen.pairFees(address(this));\\n        IGenerator.Info memory eInfo = gen.factoryInfo((msg.sender == factory || msg.sender == router) ? address(0) : msg.sender);\\n        uint16 denom = FEE_DENOMINATOR;\\n        uint16 tf = fInfo.teamFee + fInfo.burnFee + fInfo.referFee + fInfo.labFee + eInfo.teamFee + eInfo.referFee;\\n        if (input == token) _amountIn -= Math.muldiv(_amountIn, tf, denom);\\n        if (feeTaker != address(0) && input == baseToken) _amountIn -= Math.muldiv(_amountIn,tokenFee, denom);\\n        (uint reserveIn, uint reserveOut) = input == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n        _amountOut = Math.muldiv(_amountIn, reserveOut, reserveIn + _amountIn);\\n        if (feeTaker != address(0) && output == baseToken) {\\n            uint fee = Math.muldiv(_amountOut, tokenFee + fInfo.lpFee, denom);\\n            _amountOut = _amountOut - fee;\\n        } else {\\n            _amountOut -= Math.muldiv(_amountOut, fInfo.lpFee, denom);\\n        }\\n        if (input != token) _amountOut -= Math.muldiv(_amountOut, tf, denom);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens that would be required to swap for a given amount of tokens.\\n     */\\n    function amountIn(address output, uint _amountOut, address caller) external view returns (uint _amountIn) {\\n        uint _reserve0 = reserve0;\\n        uint _reserve1 = reserve1;\\n        IGenerator gen = IGenerator(router);\\n        IGenerator.Info memory fInfo = gen.pairFees(address(this));\\n        IGenerator.Info memory eInfo = gen.factoryInfo((msg.sender == factory || msg.sender == router) ? address(0) : msg.sender);\\n        uint16 tf = fInfo.teamFee + fInfo.burnFee + fInfo.referFee + fInfo.labFee + eInfo.teamFee + eInfo.referFee;\\n        address input = output == token0 ? token1 : token0;\\n        uint16 tokenFee = totalFee(caller);\\n        address token = routerFeeIn();\\n        uint16 denom = FEE_DENOMINATOR;\\n        (uint reserveIn, uint reserveOut) = input == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n        if (input != token) _amountOut = Math.mulDivRoundingUp(_amountOut, denom, (denom - tf));\\n        _amountOut = Math.mulDivRoundingUp(_amountOut, denom, (denom - fInfo.lpFee + ((feeTaker != address(0) && output == baseToken) ? tokenFee : 0)));\\n        _amountIn = Math.mulDivRoundingUp(_amountOut, reserveIn, reserveOut - _amountOut);\\n        if (feeTaker != address(0) && input == baseToken) _amountIn = Math.mulDivRoundingUp(_amountIn, denom, (denom - tokenFee));\\n        if (input == token) _amountIn = Math.mulDivRoundingUp(_amountIn, denom, (denom - tf));\\n    }\\n\\n    /**\\n     * @dev Returns the address for the token that fees will be taken in.\\n     */\\n    function routerFeeIn() public view returns (address) {\\n        IGenerator routerInterface = IGenerator(router);\\n        address WETH = routerInterface.WRAPPED_ETH();\\n        return token0 == WETH ? token0 : token1 == WETH ? token1 : routerInterface.stables(token0) ? token0 : routerInterface.stables(token1) ? token1 : token0;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens that have been collected as fees for a given address.\\n     */\\n    function feeBalances(address f) external view returns (Fees memory) {\\n        return _fees[f];\\n    }\\n\\n    /**\\n     * @dev Adds fees to a given address.\\n     */\\n    function _addFee(bool z, address f, uint a) internal {\\n          if (z) {\\n            _fees[f].amount0 += a;\\n            totalOwed.amount0 += a;\\n        } else {\\n            _fees[f].amount1 += a;\\n            totalOwed.amount1 += a;\\n        }\\n        emit FeeCollected(f, z ? token0 : token1, a);\\n    }\\n\\n    /**\\n     * @dev Takes fees\\n     * @param z Whether the input token is token0.\\n    * @param lp Whether the fees are for liquidity provision.\\n    * @param a The amount of tokens to take fees on.\\n    * @param f An additional address to accept fees for that is not the router or factory.\\n     */\\n    function _takeFees(bool z, bool lp, uint a, address f, bool l) internal returns (uint) {\\n        IGenerator gen = IGenerator(router);\\n        IGenerator.Info memory fInfo = gen.pairFees(address(this));\\n        IGenerator.Info memory eInfo = gen.factoryInfo((l || f == factory || f == address(gen)) ? address(0) : f);\\n        uint16 eFee = eInfo.teamFee + eInfo.referFee;\\n        uint16 tf = (lp ? fInfo.lpFee : (fInfo.teamFee + fInfo.burnFee)) + fInfo.referFee + fInfo.labFee + eFee;\\n        uint _totalFee = l ? a : Math.muldiv(a, tf, FEE_DENOMINATOR);\\n        if (!l) {\\n            if (_totalFee == 0) return a;\\n            a -=_totalFee;\\n        }\\n        if (eFee > 0) {\\n            uint b = Math.muldiv(_totalFee, eFee, tf);\\n            _totalFee -= b;\\n            if (eInfo.referrer != address(0) && eInfo.referFee > 0) {\\n                uint r = Math.muldiv(b, eInfo.referFee, eFee);\\n                _addFee(z, eInfo.referrer, r);\\n                b -= r;\\n            }\\n            if (b > 0) _addFee(z, eInfo.teamAddress, b);\\n        }\\n        if (factory == address(gen)) {\\n            _addFee(z, address(gen), _totalFee);\\n        } else {\\n            if (fInfo.labFee > 0) {\\n                uint lab = Math.muldiv(_totalFee, fInfo.labFee, tf);\\n                _addFee(z, address(gen), lab);\\n                _totalFee -= lab;\\n            }\\n            if (_totalFee > 0 && fInfo.referFee > 0) {\\n                uint refer = Math.muldiv(_totalFee, fInfo.referFee, tf);\\n                if (refer > 0) {\\n                    _addFee(z, fInfo.referrer, refer);\\n                    _totalFee -= refer;\\n                }\\n            }\\n            if (_totalFee > 0) {\\n                _addFee(z, factory, _totalFee);\\n            }\\n        }\\n        return a;\\n    }\\n\\n    /**\\n     * @dev Collects fees for a given address and token.\\n     */\\n    function collect(address f, address t) external {\\n        bool isZ = t == token0;\\n        uint _bal = isZ ? _fees[f].amount0 : _fees[f].amount1;\\n        if (_bal == 0) return;\\n        if (isZ) {\\n            _fees[f].amount0 = 0;\\n            totalOwed.amount0 -= _bal;\\n        } else {\\n            _fees[f].amount1 = 0;\\n            totalOwed.amount1 -= _bal;\\n        }\\n        if (f != router && f != factory) {\\n            _safeTransfer(t, f, _bal);\\n            emit Collected(f, t, _bal);\\n            return;\\n        }\\n        IGenerator gen = IGenerator(router);\\n        IGenerator.Info memory fInfo = gen.pairFees(address(this));\\n        if (fInfo.teamFee > 0) {\\n            uint teamDistribution = Math.muldiv(_bal, fInfo.teamFee, (fInfo.teamFee + fInfo.burnFee));\\n            _safeTransfer(t, fInfo.teamAddress, teamDistribution);\\n            emit Collected(f, t, teamDistribution);\\n            _bal -= teamDistribution;\\n        }\\n        if (_bal > 0 && fInfo.burnToken != address(0)) {\\n            if (t != fInfo.burnToken) {\\n                address pair = gen.pairs(f,t, fInfo.burnToken);\\n                if (pair == address(this)) {\\n                    uint112 _reserve0 = reserve0;\\n                    uint112 _reserve1 = reserve1;\\n                    (uint reserveInput, uint reserveOutput) = t == token0 ? (_reserve0, _reserve1) : (_reserve1, _reserve0);\\n                    _bal = Math.muldiv(_bal, reserveOutput, reserveInput + _bal);\\n                    _safeTransfer(fInfo.burnToken, 0x000000000000000000000000000000000000dEaD, _bal);\\n                    emit Collected(f, t, _bal);\\n                    emit BuyBack(f, t, _bal);\\n                    uint balance0 = IERC20(token0).balanceOf(address(this)) - totalOwed.amount0;\\n                    uint balance1 = IERC20(token1).balanceOf(address(this)) - totalOwed.amount1;\\n                    _update(balance0, balance1, _reserve0, _reserve1);\\n                } else if (pair != address(0)) {\\n                    address[] memory pairs = new address[](1);\\n                    pairs[0] = pair;\\n                    _safeTransfer(t, pair, _bal);\\n                    emit Collected(f, t, _bal);\\n                    uint256 amount = gen.swapInternal(pairs, address(this), 0x000000000000000000000000000000000000dEaD);\\n                    emit BuyBack(f, t, amount);\\n                    assert(amount > 0);\\n                } else {\\n                    _safeTransfer(t, fInfo.teamAddress, _bal);\\n                    emit Collected(f, t, _bal);\\n                }\\n            } else {\\n                _safeTransfer(t, 0x000000000000000000000000000000000000dEaD, _bal);\\n                emit Collected(f, t, _bal);\\n                emit BuyBack(f, t, _bal);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the reserves of token0, token1, and the block timestamp of the last update.\\n     */\\n    function getReserves() external view returns (\\n        uint112 _reserve0, \\n        uint112 _reserve1, \\n        uint32 _blockTimestampLast\\n    ) {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint value) internal {\\n        if(value == 0) return;\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"transfer(address,uint256)\\\"))), to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TF\\\");\\n    }\\n\\n    function _safeApprove(address token, address to, uint amount) internal {\\n        if(amount == 0) return;\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(bytes4(keccak256(bytes(\\\"approve(address,uint256)\\\"))), to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"SA\\\");\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) internal {\\n        require(balance0 <= type(uint112).max && balance1 <= type(uint112).max, \\\"M\\\");\\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            // * never overflows, and + overflow is desired\\n            price0CumulativeLast += uint(UQ112x112.uqdiv(UQ112x112.encode(_reserve1), _reserve0)) * timeElapsed;\\n            price1CumulativeLast += uint(UQ112x112.uqdiv(UQ112x112.encode(_reserve0), _reserve1)) * timeElapsed;\\n        }\\n        reserve0 = uint112(balance0);\\n        reserve1 = uint112(balance1);\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n \\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/UQ112x112.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n    uint224 constant private Q112 = 2**112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 y) internal pure returns (uint224 z) {\\n        z = uint224(y) * Q112; // never overflows\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n        z = x / uint224(y);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"}],\"name\":\"AllocatorCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FactoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"teamFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lpFee\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"labFee\",\"type\":\"uint16\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lab\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"borrow\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"refer\",\"type\":\"uint16\"}],\"name\":\"LabFeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"teamFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lpFee\",\"type\":\"uint16\"}],\"name\":\"PairFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"ToggledStable\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALLOCATOR_LOGIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CREATION_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_LOGIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAB_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAUNCHER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAIR_LOGIC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFER_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allocators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowLoans\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"computePairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referFee\",\"type\":\"uint16\"}],\"name\":\"createFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"created\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFeeIn\",\"type\":\"address\"}],\"name\":\"createPairWithLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFeeIn\",\"type\":\"address\"}],\"name\":\"createSwap2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"}],\"name\":\"factoryInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"teamFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"lpFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"labFee\",\"type\":\"uint16\"}],\"internalType\":\"struct IGenerator.Info\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"f\",\"type\":\"uint16\"}],\"name\":\"maxSwap2Fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"m\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"pairFees\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"teamFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"lpFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"labFee\",\"type\":\"uint16\"}],\"internalType\":\"struct IGenerator.Info\",\"name\":\"fInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"teamFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"teamAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"lpFee\",\"type\":\"uint16\"}],\"name\":\"setFactoryFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cF\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_lF\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_bF\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_rF\",\"type\":\"uint16\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launcher\",\"type\":\"address\"}],\"name\":\"setLauncher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"burnFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"teamFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"lpFee\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"useFee\",\"type\":\"bool\"}],\"name\":\"setPairFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"l\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rf\",\"type\":\"uint16\"}],\"name\":\"setReferFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stables\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapInternal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"input\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"__pairs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLoans\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"t\",\"type\":\"address\"}],\"name\":\"toggleStable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFactories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"f\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Generator", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000007a9810e3087d047d848c81f411a38f1cb05cba80000000000000000000000004387cc7e32369d339b956ae9a902d3f5618ea34400000000000000000000000020df3fb57659a6dc2fd32239f60271e223fc9178", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d106b4b9e82d65858013b54f544623c58f222994968b9abf90c3a47644ad975"}