{"SourceCode": "pragma solidity ^0.4.16;\r\n\r\n/// @title SafeMath\r\n/// @dev Math operations with safety checks that throw on error\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/// @title ERC20 Standard Token interface\r\ncontract IERC20Token {\r\n    function name() public constant returns (string) { name; }\r\n    function symbol() public constant returns (string) { symbol; }\r\n    function decimals() public constant returns (uint8) { decimals; }\r\n    function totalSupply() public constant returns (uint256) { totalSupply; }\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n}\r\n\r\n/// @title ERC20 Standard Token implementation\r\ncontract ERC20Token is IERC20Token {\r\n    using SafeMath for uint256;\r\n\r\n    string public standard = 'Token 0.1';\r\n    string public name = '';\r\n    string public symbol = '';\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply = 0;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    function ERC20Token(string _name, string _symbol, uint8 _decimals) {\r\n        require(bytes(_name).length > 0 && bytes(_symbol).length > 0);\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public validAddress(_to) returns (bool) {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public validAddress(_to) returns (bool) {\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public validAddress(_spender) returns (bool) {\r\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract IOwned {\r\n    function owner() public constant returns (address) { owner; }\r\n    function transferOwnership(address _newOwner) public;\r\n}\r\n\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    function Owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) validAddress(_newOwner) onlyOwner {\r\n        require(_newOwner != owner);\r\n        \r\n        owner = _newOwner;\r\n    }\r\n}\r\n\r\n/// @title B2BX contract interface\r\ncontract ISmartToken {\r\n    function initialSupply() public constant returns (uint256) { initialSupply; }\r\n\r\n    function totalSoldTokens() public constant returns (uint256) { totalSoldTokens; }\r\n    function totalProjectToken() public constant returns (uint256) { totalProjectToken; }\r\n\r\n    function fundingEnabled() public constant returns (bool) { fundingEnabled; }\r\n    function transfersEnabled() public constant returns (bool) { transfersEnabled; }\r\n}\r\n\r\n/// @title B2BX contract - crowdfunding code for B2BX Project\r\ncontract SmartToken is ISmartToken, ERC20Token, Owned {\r\n    using SafeMath for uint256;\r\n \r\n    // The current initial token supply.\r\n    uint256 public initialSupply = 50000000 ether;\r\n\r\n    // Cold wallet for distribution of tokens.\r\n    address public fundingWallet;\r\n\r\n    // The flag indicates if the B2BX contract is in Funding state.\r\n    bool public fundingEnabled = true;\r\n\r\n    // The maximum tokens available for sale.\r\n    uint256 public maxSaleToken;\r\n\r\n    // Total number of tokens sold.\r\n    uint256 public totalSoldTokens;\r\n    // Total number of tokens for B2BX Project.\r\n    uint256 public totalProjectToken;\r\n    uint256 private totalLockToken;\r\n\r\n    // The flag indicates if the B2BX contract is in eneble / disable transfers.\r\n    bool public transfersEnabled = true; \r\n\r\n    // Wallets, which allowed the transaction during the crowdfunding.\r\n    mapping (address => bool) private fundingWallets;\r\n    // Wallets B2BX Project, which will be locked the tokens\r\n    mapping (address => allocationLock) public allocations;\r\n\r\n    struct allocationLock {\r\n        uint256 value;\r\n        uint256 end;\r\n        bool locked;\r\n    }\r\n\r\n    event Finalize(address indexed _from, uint256 _value);\r\n    event Lock(address indexed _from, address indexed _to, uint256 _value, uint256 _end);\r\n    event Unlock(address indexed _from, address indexed _to, uint256 _value);\r\n    event DisableTransfers(address indexed _from);\r\n\r\n    /// @notice B2BX Project - Initializing crowdfunding.\r\n    /// @dev Constructor.\r\n    function SmartToken() ERC20Token(\"B2BX\", \"B2BX\", 18) {\r\n        // The main, cold wallet for the distribution of tokens.\r\n        fundingWallet = msg.sender; \r\n\r\n        // Initializing 80% of tokens for sale.\r\n        // maxSaleToken = initialSupply * 80 / 100 (80% this is maxSaleToken & 100% this is initialSupply)\r\n        // totalProjectToken will be calculated in function finalize()\r\n        // \r\n        // |------------maxSaleToken------totalProjectToken|\r\n        // |================80%================|====20%====|\r\n        // |-----------------initialSupply-----------------|\r\n        maxSaleToken = initialSupply.mul(80).div(100);\r\n\r\n        balanceOf[fundingWallet] = maxSaleToken;\r\n        totalSupply = initialSupply;\r\n\r\n        fundingWallets[fundingWallet] = true;\r\n        fundingWallets[0xEF02E1a87c91435349437f035F85F5a85f6b39ae] = true;\r\n        fundingWallets[0xb0e5E17B43dAEcE47ABe3e81938063432A8D683d] = true;\r\n        fundingWallets[0x67805701A5045092882cB4c7b066FF78Bb365938] = true;\r\n        fundingWallets[0x80CD4388E7C54758aB2B3f1c810630aa653Ac932] = true;\r\n        fundingWallets[0xfE51555Aea91768F0aA2fCb55705bd1C330Fb973] = true;\r\n    }\r\n\r\n    // Validates an address - currently only checks that it isn't null.\r\n    modifier validAddress(address _address) {\r\n        require(_address != 0x0);\r\n        _;\r\n    }\r\n\r\n    modifier transfersAllowed(address _address) {\r\n        if (fundingEnabled) {\r\n            require(fundingWallets[_address]);\r\n        }\r\n\r\n        require(transfersEnabled);\r\n        _;\r\n    }\r\n\r\n    /// @notice This function is disabled during the crowdfunding.\r\n    /// @dev Send tokens.\r\n    /// @param _to address      The address of the tokens recipient.\r\n    /// @param _value _value    The amount of token to be transferred.\r\n    function transfer(address _to, uint256 _value) public validAddress(_to) transfersAllowed(msg.sender) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    /// @notice This function is disabled during the crowdfunding.\r\n    /// @dev Send from tokens.\r\n    /// @param _from address    The address of the sender of the token\r\n    /// @param _to address      The address of the tokens recipient.\r\n    /// @param _value _value    The amount of token to be transferred.\r\n    function transferFrom(address _from, address _to, uint256 _value) public validAddress(_to) transfersAllowed(_from) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice This function can accept for blocking no more than \"totalProjectToken\".\r\n    /// @dev Lock tokens to a specified address.\r\n    /// @param _to address      The address to lock tokens to.\r\n    /// @param _value uint256   The amount of tokens to be locked.\r\n    /// @param _end uint256     The end of the lock period.\r\n    function lock(address _to, uint256 _value, uint256 _end) internal validAddress(_to) onlyOwner returns (bool) {\r\n        require(_value > 0);\r\n\r\n        assert(totalProjectToken > 0);\r\n\r\n        // Check that this lock doesn't exceed the total amount of tokens currently available for totalProjectToken.\r\n        totalLockToken = totalLockToken.add(_value);\r\n        assert(totalProjectToken >= totalLockToken);\r\n\r\n        // Make sure that a single address can be locked tokens only once.\r\n        require(allocations[_to].value == 0);\r\n\r\n        // Assign a new lock.\r\n        allocations[_to] = allocationLock({\r\n            value: _value,\r\n            end: _end,\r\n            locked: true\r\n        });\r\n\r\n        Lock(this, _to, _value, _end);\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Only the owner of a locked wallet can unlock the tokens.\r\n    /// @dev Unlock tokens at the address to the caller function.\r\n    function unlock() external {\r\n        require(allocations[msg.sender].locked);\r\n        require(now >= allocations[msg.sender].end);\r\n        \r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(allocations[msg.sender].value);\r\n\r\n        allocations[msg.sender].locked = false;\r\n\r\n        Transfer(this, msg.sender, allocations[msg.sender].value);\r\n        Unlock(this, msg.sender, allocations[msg.sender].value);\r\n    }\r\n\r\n    /// @notice B2BX Allocation - finalize crowdfunding & time-locked vault of tokens allocated\r\n    /// to B2BX company, developers and bounty program.\r\n    function finalize() external onlyOwner {\r\n        require(fundingEnabled);\r\n\r\n        // Get total sold tokens on the fundingWallet.\r\n        // totalSoldTokens is 80% of the total number of tokens.\r\n        totalSoldTokens = maxSaleToken.sub(balanceOf[fundingWallet]);\r\n\r\n        // totalProjectToken = totalSoldTokens * 20 / 80 (20% this is B2BX Project & 80% this is totalSoldTokens)\r\n        //\r\n        // |----------totalSoldTokens-----totalProjectToken|\r\n        // |================80%================|====20%====|\r\n        // |totalSupply=(totalSoldTokens+totalProjectToken)|\r\n        totalProjectToken = totalSoldTokens.mul(20).div(80);\r\n\r\n        totalSupply = totalSoldTokens.add(totalProjectToken);\r\n\r\n        // B2BX Prodject allocations tokens.\r\n        // 40% of the totalProjectToken tokens (== 10% totalSupply) go to B2BX Company.\r\n        lock(0x324044e0fB93A2D0274345Eba0E604B6F35826d2, totalProjectToken.mul(50).div(100), now);\r\n        // 40% of the totalProjectToken tokens (== 8% totalSupply) go to developers.\r\n        lock(0x6653f5e04ED6Ec6f004D345868f47f4CebAA095e, totalProjectToken.mul(40).div(100), (now + 6 * 30 days));\r\n        // 10% of the totalProjectToken tokens (== 2% totalSupply) go to bounty program.\r\n        lock(0x591e7CF52D6b3ccC452Cd435E3eA88c1032b0DE3, totalProjectToken.mul(10).div(100), now);\r\n        \r\n        // Zeroing a cold wallet.\r\n        balanceOf[fundingWallet] = 0;\r\n\r\n        // End of crowdfunding.\r\n        fundingEnabled = false;\r\n\r\n        // End of crowdfunding.\r\n        Transfer(this, fundingWallet, 0);\r\n        Finalize(msg.sender, totalSupply);\r\n    }\r\n\r\n    /// @notice Disable all transfers in case of a vulnerability found in the contract or other systems.\r\n    /// @dev Disable transfers in B2BX contract.\r\n    function disableTransfers() external onlyOwner {\r\n        require(transfersEnabled);\r\n\r\n        transfersEnabled = false;\r\n\r\n        DisableTransfers(msg.sender);\r\n    }\r\n\r\n    /// @dev Disable the hot wallets for transfers.\r\n    /// @param _address address Address in fundingWallets[]\r\n    function disableFundingWallets(address _address) external onlyOwner {\r\n        require(fundingEnabled);\r\n        require(fundingWallet != _address);\r\n        require(fundingWallets[_address]);\r\n\r\n        fundingWallets[_address] = false;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTransfers\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"locked\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalProjectToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxSaleToken\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"disableFundingWallets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transfersEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSoldTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundingEnabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Finalize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"DisableTransfers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "SmartToken", "CompilerVersion": "v0.4.16+commit.d7661dd9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f97aae096f5a994c9b5ccdca6eba9005659a16ce948ced9fd51c5158e31d6cc9"}