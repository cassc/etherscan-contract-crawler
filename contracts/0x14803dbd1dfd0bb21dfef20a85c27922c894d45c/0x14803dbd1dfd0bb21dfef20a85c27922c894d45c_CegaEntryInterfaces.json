{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"inliner\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": true,\r\n        \"peephole\": true,\r\n        \"yul\": true,\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\",\r\n          \"stackAllocation\": true\r\n        }\r\n      },\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/cega-entry/CegaEntryInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n/******************************************************************************\\\\\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { ICegaEntryInterfaces } from \\\"./interfaces/ICegaEntryInterfaces.sol\\\";\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\nimport { CegaEntryLib } from \\\"./lib/CegaEntryLib.sol\\\";\\n\\n// The EIP-2535 Diamond standard requires these functions.\\n\\ncontract CegaEntryInterfaces is ICegaEntryInterfaces, IERC165 {\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    // Facet == Implementtion\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Implementation\\n    function facets()\\n        external\\n        view\\n        override\\n        returns (Implementation[] memory facets_)\\n    {\\n        CegaEntryLib.ProxyStorage storage ds = CegaEntryLib.proxyStorage();\\n        uint256 numFacets = ds.implementationAddresses.length;\\n        facets_ = new Implementation[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.implementationAddresses[i];\\n            facets_[i].implAddress = facetAddress_;\\n            facets_[i].functionSelectors = ds\\n                .implementationFunctionSelectors[facetAddress_]\\n                .functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) external view override returns (bytes4[] memory facetFunctionSelectors_) {\\n        CegaEntryLib.ProxyStorage storage ds = CegaEntryLib.proxyStorage();\\n        facetFunctionSelectors_ = ds\\n            .implementationFunctionSelectors[_facet]\\n            .functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory facetAddresses_)\\n    {\\n        CegaEntryLib.ProxyStorage storage ds = CegaEntryLib.proxyStorage();\\n        facetAddresses_ = ds.implementationAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(\\n        bytes4 _functionSelector\\n    ) external view override returns (address facetAddress_) {\\n        CegaEntryLib.ProxyStorage storage ds = CegaEntryLib.proxyStorage();\\n        facetAddress_ = ds\\n            .selectorToImplAndPosition[_functionSelector]\\n            .implAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) external view override returns (bool) {\\n        CegaEntryLib.ProxyStorage storage ds = CegaEntryLib.proxyStorage();\\n\\n        return (type(ICegaEntryInterfaces).interfaceId == _interfaceId ||\\n            ds.supportedInterfaces[_interfaceId]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/cega-entry/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/cega-entry/interfaces/ICegaEntry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/******************************************************************************\\\\\\n* EIP-2535: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface ICegaEntry {\\n    enum ProxyImplementationAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct ProxyImplementation {\\n        address implAddress;\\n        ProxyImplementationAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _implementationParams Contains the implementation addresses and function selectors\\n    /// @param _init The address of the contract or implementation to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        ProxyImplementation[] calldata _implementationParams,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(\\n        ProxyImplementation[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/cega-entry/interfaces/ICegaEntryInterfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// interfaces that are compatible with Diamond proxy loupe functions\\ninterface ICegaEntryInterfaces {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Implementation {\\n        address implAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Implementation\\n    function facets() external view returns (Implementation[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(\\n        bytes4 _functionSelector\\n    ) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/cega-entry/lib/CegaEntryLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/******************************************************************************\\\\\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nimport { ICegaEntry } from \\\"../interfaces/ICegaEntry.sol\\\";\\n\\nlibrary CegaEntryLib {\\n    bytes32 constant PROXY_STORAGE_POSITION =\\n        bytes32(uint256(keccak256(\\\"cega.proxy.implementation.storage\\\")) - 1);\\n\\n    struct ImplementationAddressAndPosition {\\n        address implAddress;\\n        uint96 functionSelectorPosition; // position in implementationFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct ImplementationFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 implementationAddressPosition; // position of implAddress in implementationAddresses array\\n    }\\n\\n    struct ProxyStorage {\\n        // maps function selector to the implementation address and\\n        // the position of the selector in the implementationFunctionSelectors.selectors array\\n        mapping(bytes4 => ImplementationAddressAndPosition) selectorToImplAndPosition;\\n        // maps implementation addresses to function selectors\\n        mapping(address => ImplementationFunctionSelectors) implementationFunctionSelectors;\\n        // implementation addresses\\n        address[] implementationAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function proxyStorage() internal pure returns (ProxyStorage storage ds) {\\n        bytes32 position = PROXY_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        ProxyStorage storage ds = proxyStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = proxyStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == proxyStorage().contractOwner,\\n            \\\"CegaEntry: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        ICegaEntry.ProxyImplementation[] _implementationData,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function updateImplementation(\\n        ICegaEntry.ProxyImplementation[] memory _implementationData,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 implIndex;\\n            implIndex < _implementationData.length;\\n            implIndex++\\n        ) {\\n            ICegaEntry.ProxyImplementationAction action = _implementationData[\\n                implIndex\\n            ].action;\\n            if (action == ICegaEntry.ProxyImplementationAction.Add) {\\n                addFunctions(\\n                    _implementationData[implIndex].implAddress,\\n                    _implementationData[implIndex].functionSelectors\\n                );\\n            } else if (action == ICegaEntry.ProxyImplementationAction.Replace) {\\n                replaceFunctions(\\n                    _implementationData[implIndex].implAddress,\\n                    _implementationData[implIndex].functionSelectors\\n                );\\n            } else if (action == ICegaEntry.ProxyImplementationAction.Remove) {\\n                removeFunctions(\\n                    _implementationData[implIndex].implAddress,\\n                    _implementationData[implIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"CegaEntry: Incorrect ProxyImplementationAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_implementationData, _init, _calldata);\\n        initializeImplementation(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _implementationAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"CegaEntry: No selectors in implementation to cut\\\"\\n        );\\n        ProxyStorage storage ds = proxyStorage();\\n        require(\\n            _implementationAddress != address(0),\\n            \\\"CegaEntry: Add implementation can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors\\n                .length\\n        );\\n        // add new implementation address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _implementationAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldImplementationAddress = ds\\n                .selectorToImplAndPosition[selector]\\n                .implAddress;\\n            require(\\n                oldImplementationAddress == address(0),\\n                \\\"CegaEntry: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _implementationAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _implementationAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"CegaEntry: No selectors in implementation to cut\\\"\\n        );\\n        ProxyStorage storage ds = proxyStorage();\\n        require(\\n            _implementationAddress != address(0),\\n            \\\"CegaEntry: Replace implementation can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors\\n                .length\\n        );\\n        // add new implementation address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _implementationAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldImplementationAddress = ds\\n                .selectorToImplAndPosition[selector]\\n                .implAddress;\\n            require(\\n                oldImplementationAddress != _implementationAddress,\\n                \\\"CegaEntry: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldImplementationAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _implementationAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _implementationAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"CegaEntry: No selectors in implementation to cut\\\"\\n        );\\n        ProxyStorage storage ds = proxyStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _implementationAddress == address(0),\\n            \\\"CegaEntry: Remove implementation address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldImplementationAddress = ds\\n                .selectorToImplAndPosition[selector]\\n                .implAddress;\\n            removeFunction(ds, oldImplementationAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(\\n        ProxyStorage storage ds,\\n        address _implementationAddress\\n    ) internal {\\n        enforceHasContractCode(\\n            _implementationAddress,\\n            \\\"CegaEntry: New implementation has no code\\\"\\n        );\\n        ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .implementationAddressPosition = ds.implementationAddresses.length;\\n        ds.implementationAddresses.push(_implementationAddress);\\n    }\\n\\n    function addFunction(\\n        ProxyStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _implementationAddress\\n    ) internal {\\n        ds\\n            .selectorToImplAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .functionSelectors\\n            .push(_selector);\\n        ds\\n            .selectorToImplAndPosition[_selector]\\n            .implAddress = _implementationAddress;\\n    }\\n\\n    function removeFunction(\\n        ProxyStorage storage ds,\\n        address _implementationAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _implementationAddress != address(0),\\n            \\\"CegaEntry: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a cegaEntry\\n        require(\\n            _implementationAddress != address(this),\\n            \\\"CegaEntry: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToImplAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .functionSelectors[selectorPosition] = lastSelector;\\n            ds\\n                .selectorToImplAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds\\n            .implementationFunctionSelectors[_implementationAddress]\\n            .functionSelectors\\n            .pop();\\n        delete ds.selectorToImplAndPosition[_selector];\\n\\n        // if no more selectors for implementation address then delete the implementation address\\n        if (lastSelectorPosition == 0) {\\n            // replace implementation address with last implementation address and delete last implementation address\\n            uint256 lastImplementationAddressPosition = ds\\n                .implementationAddresses\\n                .length - 1;\\n            uint256 implementationAddressPosition = ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .implementationAddressPosition;\\n            if (\\n                implementationAddressPosition !=\\n                lastImplementationAddressPosition\\n            ) {\\n                address lastImplementationAddress = ds.implementationAddresses[\\n                    lastImplementationAddressPosition\\n                ];\\n                ds.implementationAddresses[\\n                    implementationAddressPosition\\n                ] = lastImplementationAddress;\\n                ds\\n                    .implementationFunctionSelectors[lastImplementationAddress]\\n                    .implementationAddressPosition = implementationAddressPosition;\\n            }\\n            ds.implementationAddresses.pop();\\n            delete ds\\n                .implementationFunctionSelectors[_implementationAddress]\\n                .implementationAddressPosition;\\n        }\\n    }\\n\\n    function initializeImplementation(\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        if (_init == address(0)) {\\n            require(\\n                _calldata.length == 0,\\n                \\\"CegaEntry: _init is address(0) but _calldata is not empty\\\"\\n            );\\n        } else {\\n            require(\\n                _calldata.length > 0,\\n                \\\"CegaEntry: _calldata is empty but _init is not address(0)\\\"\\n            );\\n            if (_init != address(this)) {\\n                enforceHasContractCode(\\n                    _init,\\n                    \\\"CegaEntry: _init address has no code\\\"\\n                );\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    assembly {\\n                        revert(add(error, 0x20), mload(error))\\n                    }\\n                } else {\\n                    revert(\\\"CegaEntry: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        require(_contract.code.length > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"implAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct ICegaEntryInterfaces.Implementation[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CegaEntryInterfaces", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}