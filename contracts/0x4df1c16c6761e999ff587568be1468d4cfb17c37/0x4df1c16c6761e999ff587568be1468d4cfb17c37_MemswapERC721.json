{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract EIP712 {\\n    // --- Public fields ---\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    // --- Constructor ---\\n\\n    constructor(bytes memory name, bytes memory version) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(\\\"\\n                    \\\"string name,\\\"\\n                    \\\"string version,\\\"\\n                    \\\"uint256 chainId,\\\"\\n                    \\\"address verifyingContract\\\"\\n                    \\\")\\\"\\n                ),\\n                keccak256(name),\\n                keccak256(version),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    // --- Internal methods ---\\n\\n    /**\\n     * @dev Get the EIP712 hash of a struct hash\\n     *\\n     * @param structHash Struct hash to get the EIP712 hash for\\n     *\\n     * @return eip712Hash The resulting EIP712 hash\\n     */\\n    function _getEIP712Hash(\\n        bytes32 structHash\\n    ) internal view returns (bytes32 eip712Hash) {\\n        eip712Hash = keccak256(\\n            abi.encodePacked(hex\\\"1901\\\", DOMAIN_SEPARATOR, structHash)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IEIP2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IEIP2612 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IPermit2 {\\n    event Permit(\\n        address indexed owner,\\n        address indexed token,\\n        address indexed spender,\\n        uint160 amount,\\n        uint48 expiration,\\n        uint48 nonce\\n    );\\n\\n    struct PermitDetails {\\n        address token;\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    struct PermitSingle {\\n        PermitDetails details;\\n        address spender;\\n        uint256 sigDeadline;\\n    }\\n\\n    function permit(\\n        address owner,\\n        PermitSingle memory permitSingle,\\n        bytes calldata signature\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint160 amount,\\n        address token\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/PermitExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IPermit2} from \\\"./interfaces/IPermit2.sol\\\";\\nimport {IEIP2612} from \\\"./interfaces/IEIP2612.sol\\\";\\n\\ncontract PermitExecutor {\\n    // --- Structs and enums ---\\n\\n    enum Kind {\\n        EIP2612,\\n        PERMIT2\\n    }\\n\\n    struct Permit {\\n        Kind kind;\\n        bytes data;\\n    }\\n\\n    // --- Public fields ---\\n\\n    address public immutable permit2 =\\n        0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n\\n    // --- Modifiers ---\\n\\n    /**\\n     * @dev Execute permits\\n     *\\n     * @param permits Permits to execute\\n     */\\n    modifier executePermits(Permit[] calldata permits) {\\n        unchecked {\\n            uint256 permitsLength = permits.length;\\n            for (uint256 i; i < permitsLength; i++) {\\n                Permit calldata permit = permits[i];\\n                if (permit.kind == Kind.EIP2612) {\\n                    (\\n                        address token,\\n                        address owner,\\n                        address spender,\\n                        uint256 value,\\n                        uint256 deadline,\\n                        uint8 v,\\n                        bytes32 r,\\n                        bytes32 s\\n                    ) = abi.decode(\\n                            permit.data,\\n                            (\\n                                address,\\n                                address,\\n                                address,\\n                                uint256,\\n                                uint256,\\n                                uint8,\\n                                bytes32,\\n                                bytes32\\n                            )\\n                        );\\n\\n                    IEIP2612(token).permit(\\n                        owner,\\n                        spender,\\n                        value,\\n                        deadline,\\n                        v,\\n                        r,\\n                        s\\n                    );\\n                } else {\\n                    (\\n                        address owner,\\n                        IPermit2.PermitSingle memory permitSingle,\\n                        bytes memory signature\\n                    ) = abi.decode(\\n                            permit.data,\\n                            (address, IPermit2.PermitSingle, bytes)\\n                        );\\n\\n                    IPermit2(permit2).permit(owner, permitSingle, signature);\\n                }\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    // --- Internal methods ---\\n\\n    function _permit2TransferFrom(\\n        address from,\\n        address to,\\n        uint160 amount,\\n        address token\\n    ) internal {\\n        IPermit2(permit2).transferFrom(from, to, amount, token);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SignatureVerification.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\n\\n// Copied from Seaport's source code\\nabstract contract SignatureVerification is EIP712 {\\n    // --- Errors ---\\n\\n    error InvalidSignature();\\n\\n    // --- Virtual methods ---\\n\\n    function _lookupBulkOrderTypehash(\\n        uint256 treeHeight\\n    ) internal pure virtual returns (bytes32 typeHash);\\n\\n    // --- Internal methods ---\\n\\n    function _verifySignature(\\n        bytes32 intentHash,\\n        address signer,\\n        bytes memory signature\\n    ) internal view {\\n        // Skip signature verification if the signer is the caller\\n        if (signer == msg.sender) {\\n            return;\\n        }\\n\\n        bytes32 originalDigest = _getEIP712Hash(intentHash);\\n        uint256 originalSignatureLength = signature.length;\\n\\n        bytes32 digest;\\n        if (_isValidBulkOrderSize(originalSignatureLength)) {\\n            (intentHash) = _computeBulkOrderProof(signature, intentHash);\\n            digest = _getEIP712Hash(intentHash);\\n        } else {\\n            digest = originalDigest;\\n        }\\n\\n        _assertValidSignature(\\n            signer,\\n            digest,\\n            originalDigest,\\n            originalSignatureLength,\\n            signature\\n        );\\n    }\\n\\n    function _isValidBulkOrderSize(\\n        uint256 signatureLength\\n    ) internal pure returns (bool validLength) {\\n        // Utilize assembly to validate the length:\\n        // (64 + x) + 3 + 32y where (0 <= x <= 1) and (1 <= y <= 24)\\n        assembly {\\n            validLength := and(\\n                lt(sub(signatureLength, 0x63), 0x2e2),\\n                lt(and(add(signatureLength, 0x1d), 0x1f), 0x2)\\n            )\\n        }\\n    }\\n\\n    function _computeBulkOrderProof(\\n        bytes memory proofAndSignature,\\n        bytes32 leaf\\n    ) internal pure returns (bytes32 bulkOrderHash) {\\n        // Declare arguments for the root hash and the height of the proof\\n        bytes32 root;\\n        uint256 height;\\n\\n        // Utilize assembly to efficiently derive the root hash using the proof\\n        assembly {\\n            // Retrieve the length of the proof, key, and signature combined\\n            let fullLength := mload(proofAndSignature)\\n\\n            // If proofAndSignature has odd length, it is a compact signature with 64 bytes\\n            let signatureLength := sub(65, and(fullLength, 1))\\n\\n            // Derive height (or depth of tree) with signature and proof length\\n            height := shr(0x5, sub(fullLength, signatureLength))\\n\\n            // Update the length in memory to only include the signature\\n            mstore(proofAndSignature, signatureLength)\\n\\n            // Derive the pointer for the key using the signature length\\n            let keyPtr := add(proofAndSignature, add(0x20, signatureLength))\\n\\n            // Retrieve the three-byte key using the derived pointer\\n            let key := shr(0xe8, mload(keyPtr))\\n\\n            // Retrieve pointer to first proof element by applying a constant for the key size to the derived key pointer\\n            let proof := add(keyPtr, 0x3)\\n\\n            // Compute level 1\\n            let scratchPtr1 := shl(0x5, and(key, 1))\\n            mstore(scratchPtr1, leaf)\\n            mstore(xor(scratchPtr1, 0x20), mload(proof))\\n\\n            // Compute remaining proofs\\n            for {\\n                let i := 1\\n            } lt(i, height) {\\n                i := add(i, 1)\\n            } {\\n                proof := add(proof, 0x20)\\n                let scratchPtr := shl(0x5, and(shr(i, key), 1))\\n                mstore(scratchPtr, keccak256(0, 0x40))\\n                mstore(xor(scratchPtr, 0x20), mload(proof))\\n            }\\n\\n            // Compute root hash\\n            root := keccak256(0, 0x40)\\n        }\\n\\n        // Retrieve appropriate typehash constant based on height.\\n        bytes32 rootTypeHash = _lookupBulkOrderTypehash(height);\\n\\n        // Use the typehash and the root hash to derive final bulk order hash\\n        assembly {\\n            mstore(0, rootTypeHash)\\n            mstore(0x20, root)\\n            bulkOrderHash := keccak256(0, 0x40)\\n        }\\n    }\\n\\n    function _assertValidSignature(\\n        address signer,\\n        bytes32 digest,\\n        bytes32 originalDigest,\\n        uint256 originalSignatureLength,\\n        bytes memory signature\\n    ) internal view {\\n        // Declare value for ecrecover equality or 1271 call success status\\n        bool success;\\n\\n        // Utilize assembly to perform optimized signature verification check\\n        assembly {\\n            // Ensure that first word of scratch space is empty\\n            mstore(0, 0)\\n\\n            // Get the length of the signature.\\n            let signatureLength := mload(signature)\\n\\n            // Get the pointer to the value preceding the signature length\\n            // This will be used for temporary memory overrides - either the signature head for isValidSignature or the digest for ecrecover\\n            let wordBeforeSignaturePtr := sub(signature, 0x20)\\n\\n            // Cache the current value behind the signature to restore it later\\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\\n\\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure\\n            {\\n                // Take the difference between the max ECDSA signature length and the actual signature length (overflow desired for any values > 65)\\n                // If the diff is not 0 or 1, it is not a valid ECDSA signature - move on to EIP1271 check\\n                let lenDiff := sub(65, signatureLength)\\n\\n                // Declare variable for recovered signer\\n                let recoveredSigner\\n\\n                // If diff is 0 or 1, it may be an ECDSA signature\\n                // Try to recover signer\\n                if iszero(gt(lenDiff, 1)) {\\n                    // Read the signature `s` value\\n                    let originalSignatureS := mload(add(signature, 0x40))\\n\\n                    // Read the first byte of the word after `s`\\n                    // If the signature is 65 bytes, this will be the real `v` value\\n                    // If not, it will need to be modified - doing it this way saves an extra condition.\\n                    let v := byte(0, mload(add(signature, 0x60)))\\n\\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA\\n                    if lenDiff {\\n                        // Extract yParity from highest bit of vs and add 27 to get v\\n                        v := add(shr(0xff, originalSignatureS), 27)\\n\\n                        // Extract canonical s from vs, all but the highest bit\\n                        // Temporarily overwrite the original `s` value in the signature\\n                        mstore(\\n                            add(signature, 0x40),\\n                            and(\\n                                originalSignatureS,\\n                                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n                            )\\n                        )\\n                    }\\n                    // Temporarily overwrite the signature length with `v` to conform to the expected input for ecrecover\\n                    mstore(signature, v)\\n\\n                    // Temporarily overwrite the word before the length with `digest` to conform to the expected input for ecrecover\\n                    mstore(wordBeforeSignaturePtr, digest)\\n\\n                    // Attempt to recover the signer for the given signature\\n                    // Do not check the call status as ecrecover will return a null address if the signature is invalid\\n                    pop(\\n                        staticcall(\\n                            gas(),\\n                            0x1, // Call ecrecover precompile\\n                            wordBeforeSignaturePtr, // Use data memory location\\n                            0x80, // Size of digest, v, r, and s\\n                            0, // Write result to scratch space\\n                            0x20 // Provide size of returned result\\n                        )\\n                    )\\n\\n                    // Restore cached word before signature\\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\n\\n                    // Restore cached signature length\\n                    mstore(signature, signatureLength)\\n\\n                    // Restore cached signature `s` value\\n                    mstore(add(signature, 0x40), originalSignatureS)\\n\\n                    // Read the recovered signer from the buffer given as return space for ecrecover\\n                    recoveredSigner := mload(0)\\n                }\\n\\n                // Set success to true if the signature provided was a valid\\n                // ECDSA signature and the signer is not the null address\\n                // Use gt instead of direct as success is used outside of assembly\\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\\n            }\\n\\n            // If the signature was not verified with ecrecover, try EIP1271\\n            if iszero(success) {\\n                // Reset the original signature length\\n                mstore(signature, originalSignatureLength)\\n\\n                // Temporarily overwrite the word before the signature length and use it as the\\n                // head of the signature input to `isValidSignature`, which has a value of 64\\n                mstore(wordBeforeSignaturePtr, 0x40)\\n\\n                // Get pointer to use for the selector of `isValidSignature`\\n                let selectorPtr := sub(signature, 0x44)\\n\\n                // Cache the value currently stored at the selector pointer\\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\\n\\n                // Cache the value currently stored at the digest pointer\\n                let cachedWordOverwrittenByDigest := mload(sub(signature, 0x40))\\n\\n                // Write the selector first, since it overlaps the digest\\n                mstore(selectorPtr, 0x44)\\n\\n                // Next, write the original digest\\n                mstore(sub(signature, 0x40), originalDigest)\\n\\n                // Call signer with `isValidSignature` to validate signature\\n                success := staticcall(\\n                    gas(),\\n                    signer,\\n                    selectorPtr,\\n                    add(originalSignatureLength, 0x64),\\n                    0,\\n                    0x20\\n                )\\n\\n                // Determine if the signature is valid on successful calls\\n                if success {\\n                    // If first word of scratch space does not contain EIP-1271 signature selector, revert\\n                    if iszero(\\n                        eq(\\n                            mload(0),\\n                            0x1626ba7e00000000000000000000000000000000000000000000000000000000\\n                        )\\n                    ) {\\n                        success := 0\\n                    }\\n                }\\n\\n                // Restore the cached values overwritten by selector, digest and signature head\\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\\n                mstore(sub(signature, 0x40), cachedWordOverwrittenByDigest)\\n            }\\n        }\\n\\n        if (!success) {\\n            revert InvalidSignature();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/ISolutionERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {MemswapERC721} from \\\"../MemswapERC721.sol\\\";\\n\\ninterface ISolutionERC721 {\\n    function callback(\\n        MemswapERC721.Intent memory intent,\\n        MemswapERC721.TokenDetails[] memory tokenDetailsToFill,\\n        bytes memory data\\n    ) external;\\n\\n    function refund() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/MemswapERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {EIP712} from \\\"../common/EIP712.sol\\\";\\nimport {PermitExecutor} from \\\"../common/PermitExecutor.sol\\\";\\nimport {SignatureVerification} from \\\"../common/SignatureVerification.sol\\\";\\nimport {MemswapAlphaNFT} from \\\"../nft/MemswapAlphaNFT.sol\\\";\\n\\nimport {ISolutionERC721} from \\\"./interfaces/ISolutionERC721.sol\\\";\\n\\ncontract MemswapERC721 is\\n    Ownable,\\n    PermitExecutor,\\n    ReentrancyGuard,\\n    SignatureVerification\\n{\\n    // --- Structs and enums ---\\n\\n    struct Intent {\\n        // When isBuy = true:\\n        // amount = buy amount\\n        // endAmount = sell end amount\\n        // startAmountBps = sell start amount bps\\n        // expectedAmountBps = sell expected amount bps\\n\\n        // When isBuy = false:\\n        // amount = sell amount\\n        // endAmount = buy end amount\\n        // startAmountBps = buy start amount bps\\n        // expectedAmountBps = buy expected amount bps\\n\\n        // Exact output (isBuy = true) or exact input (isBuy = false)\\n        bool isBuy;\\n        address buyToken;\\n        address sellToken;\\n        address maker;\\n        // The address allowed to solve or authorize others to solve\\n        address solver;\\n        address source;\\n        uint16 feeBps;\\n        uint16 surplusBps;\\n        uint32 startTime;\\n        uint32 endTime;\\n        bool isPartiallyFillable;\\n        bool isSmartOrder;\\n        bool isIncentivized;\\n        bool isCriteriaOrder;\\n        uint256 tokenIdOrCriteria;\\n        uint128 amount;\\n        uint128 endAmount;\\n        uint16 startAmountBps;\\n        uint16 expectedAmountBps;\\n        bytes signature;\\n    }\\n\\n    struct IntentStatus {\\n        bool isPrevalidated;\\n        bool isCancelled;\\n        uint128 amountFilled;\\n    }\\n\\n    struct Authorization {\\n        // When isBuy = true:\\n        // fillAmountToCheck = buy amount to fill\\n        // executeAmountToCheck = maximum sell amount pulled from user\\n\\n        // When isBuy = false:\\n        // fillAmountToCheck = sell amount to fill\\n        // executeAmountToCheck = minimum buy amount pushed to user\\n\\n        uint128 fillAmountToCheck;\\n        uint128 executeAmountToCheck;\\n        uint32 blockDeadline;\\n    }\\n\\n    struct TokenDetails {\\n        uint256 tokenId;\\n        bytes32[] criteriaProof;\\n    }\\n\\n    struct Solution {\\n        // When isBuy = true:\\n        // fillTokenDetails = tokens to push to user\\n\\n        // When isBuy = false:\\n        // fillTokenDetails = tokens to pull from user\\n\\n        bytes data;\\n        TokenDetails[] fillTokenDetails;\\n    }\\n\\n    // --- Events ---\\n\\n    event IncentivizationParametersUpdated();\\n    event IntentCancelled(bytes32 indexed intentHash);\\n    event IntentPrevalidated(bytes32 indexed intentHash);\\n    event IntentSolved(\\n        bytes32 indexed intentHash,\\n        bool isBuy,\\n        address buyToken,\\n        address sellToken,\\n        address maker,\\n        address solver,\\n        uint128 amount,\\n        uint256[] tokenIds\\n    );\\n    event IntentsPosted();\\n    event NonceIncremented(address maker, uint256 newNonce);\\n\\n    // --- Errors ---\\n\\n    error AmountCheckFailed();\\n    error AuthorizationAmountMismatch();\\n    error AuthorizationIsExpired();\\n    error IntentCannotBePrevalidated();\\n    error IntentIsCancelled();\\n    error IntentIsExpired();\\n    error IntentIsFilled();\\n    error IntentIsNotPartiallyFillable();\\n    error IntentIsNotStarted();\\n    error InvalidCriteriaProof();\\n    error InvalidFillAmount();\\n    error InvalidPriorityFee();\\n    error InvalidSolution();\\n    error InvalidStartAndEndTimes();\\n    error InvalidTip();\\n    error InvalidTokenId();\\n    error MerkleTreeTooLarge();\\n    error Unauthorized();\\n    error UnsuccessfulCall();\\n\\n    // --- Fields ---\\n\\n    bytes32 public immutable AUTHORIZATION_TYPEHASH;\\n    bytes32 public immutable INTENT_TYPEHASH;\\n    address public immutable MEMSWAP_ALPHA_NFT;\\n\\n    mapping(address => uint256) public nonce;\\n    mapping(bytes32 => bytes32) public intentPrivateData;\\n    mapping(bytes32 => IntentStatus) public intentStatus;\\n    mapping(bytes32 => Authorization) public authorization;\\n\\n    // Relevant for incentivized intents\\n    uint16 public defaultSlippage;\\n    uint16 public multiplier;\\n    uint64 public requiredPriorityFee;\\n    uint64 public minTip;\\n    uint64 public maxTip;\\n\\n    // --- Constructor ---\\n\\n    constructor(address memswapAlphaNft) EIP712(\\\"MemswapERC721\\\", \\\"1.0\\\") {\\n        AUTHORIZATION_TYPEHASH = keccak256(\\n            abi.encodePacked(\\n                \\\"Authorization(\\\",\\n                \\\"bytes32 intentHash,\\\",\\n                \\\"address solver,\\\",\\n                \\\"uint128 fillAmountToCheck,\\\",\\n                \\\"uint128 executeAmountToCheck,\\\",\\n                \\\"uint32 blockDeadline\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n        INTENT_TYPEHASH = keccak256(\\n            abi.encodePacked(\\n                \\\"Intent(\\\",\\n                \\\"bool isBuy,\\\",\\n                \\\"address buyToken,\\\",\\n                \\\"address sellToken,\\\",\\n                \\\"address maker,\\\",\\n                \\\"address solver,\\\",\\n                \\\"address source,\\\",\\n                \\\"uint16 feeBps,\\\",\\n                \\\"uint16 surplusBps,\\\",\\n                \\\"uint32 startTime,\\\",\\n                \\\"uint32 endTime,\\\",\\n                \\\"uint256 nonce,\\\",\\n                \\\"bool isPartiallyFillable,\\\",\\n                \\\"bool isSmartOrder,\\\",\\n                \\\"bool isIncentivized,\\\",\\n                \\\"bool isCriteriaOrder,\\\",\\n                \\\"uint256 tokenIdOrCriteria,\\\",\\n                \\\"uint128 amount,\\\",\\n                \\\"uint128 endAmount,\\\",\\n                \\\"uint16 startAmountBps,\\\",\\n                \\\"uint16 expectedAmountBps\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n        MEMSWAP_ALPHA_NFT = memswapAlphaNft;\\n\\n        defaultSlippage = 50;\\n        multiplier = 4;\\n        requiredPriorityFee = 1 gwei;\\n        minTip = 0.05 gwei * 500000;\\n        maxTip = 1.5 gwei * 500000;\\n    }\\n\\n    // Fallback\\n\\n    receive() external payable {}\\n\\n    // Owner methods\\n\\n    function updateIncentivizationParameters(\\n        uint16 newDefaultSlippage,\\n        uint16 newMultiplier,\\n        uint64 newRequiredPriorityFee,\\n        uint64 newMinTip,\\n        uint64 newMaxTip\\n    ) external onlyOwner {\\n        defaultSlippage = newDefaultSlippage;\\n        multiplier = newMultiplier;\\n        requiredPriorityFee = newRequiredPriorityFee;\\n        minTip = newMinTip;\\n        maxTip = newMaxTip;\\n\\n        emit IncentivizationParametersUpdated();\\n    }\\n\\n    // Public methods\\n\\n    /**\\n     * @notice Authorize an address to solve particular intents\\n     *\\n     * @param intents Intents to solve\\n     * @param auths Authorizations\\n     * @param solver The address authorized to solve\\n     */\\n    function authorize(\\n        Intent[] calldata intents,\\n        Authorization[] calldata auths,\\n        address solver\\n    ) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent calldata intent = intents[i];\\n                Authorization calldata auth = auths[i];\\n\\n                if (intent.solver != msg.sender) {\\n                    revert Unauthorized();\\n                }\\n\\n                bytes32 intentHash = getIntentHash(intent);\\n                bytes32 authId = keccak256(\\n                    abi.encodePacked(intentHash, solver)\\n                );\\n                authorization[authId] = auth;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Make intents available on-chain (this method doesn't do anything\\n     *         useful - it's only used as a mechanism for intent distribution)\\n     *\\n     * @custom:param intents Intents being made available\\n     */\\n    function post(\\n        /**\\n         * @custom:name intents\\n         */\\n        Intent[] calldata\\n    ) external {\\n        emit IntentsPosted();\\n    }\\n\\n    /**\\n     * @notice Pre-validate an arbitrary number of intents (the signature of each\\n     *         intent will be checked, thus resulting in skipping verification on\\n     *         further attempts to solve the intent, unless the intent explicitly\\n     *         enforces checking the signature on every fill)\\n     *\\n     * @param intents Intents to validate\\n     */\\n    function prevalidate(Intent[] calldata intents) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent calldata intent = intents[i];\\n                if (intent.isSmartOrder) {\\n                    revert IntentCannotBePrevalidated();\\n                }\\n\\n                bytes32 intentHash = getIntentHash(intent);\\n\\n                _prevalidateIntent(\\n                    intentHash,\\n                    intent.maker,\\n                    intent.isSmartOrder,\\n                    intent.signature\\n                );\\n                emit IntentPrevalidated(intentHash);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancel an arbitrary number of intents\\n     *\\n     * @param intents Intents to cancel\\n     */\\n    function cancel(Intent[] calldata intents) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent calldata intent = intents[i];\\n                if (intent.maker != msg.sender) {\\n                    revert Unauthorized();\\n                }\\n\\n                bytes32 intentHash = getIntentHash(intent);\\n                IntentStatus memory status = intentStatus[intentHash];\\n                status.isPrevalidated = false;\\n                status.isCancelled = true;\\n\\n                intentStatus[intentHash] = status;\\n                emit IntentCancelled(intentHash);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Increment the nonce for `msg.sender`. This will result in\\n     *         the invalidation of any intents signed with a lower nonce\\n     *         than the latest value.\\n     */\\n    function incrementNonce() external {\\n        unchecked {\\n            uint256 newNonce = nonce[msg.sender] + 1;\\n            nonce[msg.sender] = newNonce;\\n            emit NonceIncremented(msg.sender, newNonce);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reveal intents by making available data assumed to not be publicly\\n     *         available (maker + signature prefix). This method should be called\\n     *         right before the solution transaction, ideally bundled, so that no\\n     *         details are revealed sooner than it should be.\\n     *\\n     * @param intents Intents to reveal\\n     */\\n    function reveal(Intent[] memory intents) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent memory intent = intents[i];\\n\\n                // Ensure the intent is valid\\n                bytes32 intentHash = getIntentHash(intent);\\n                _verifySignature(intentHash, intent.maker, intent.signature);\\n\\n                // Extract the private data (intent + signature prefix)\\n                address maker = intent.maker;\\n                bytes12 signaturePrefix = bytes12(intent.signature);\\n\\n                // Override the maker with the zero address to get the correct partial intent hash\\n                intent.maker = address(0);\\n\\n                // Store the private data (intent + signature prefix)\\n                bytes32 partialIntentHash = getIntentHash(intent);\\n                intentPrivateData[partialIntentHash] = bytes32(\\n                    abi.encodePacked(maker, signaturePrefix)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve intent\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution\\n     * @param permits Permits to execute prior to the solution\\n     */\\n    function solve(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external payable nonReentrant executePermits(permits) {\\n        // Make any private data available\\n        _includePrivateData(intent);\\n\\n        // Check authorization\\n        if (intent.solver != address(0) && intent.solver != msg.sender) {\\n            revert Unauthorized();\\n        }\\n\\n        // Solve\\n        _solve(intent, solution, intent.isBuy ? type(uint128).max : 0);\\n    }\\n\\n    /**\\n     * @notice Solve intent with authorization. Compared to the regular `solve`,\\n     *         this method allows solving intents of a different solver, as long\\n     *         as there's a valid authorization in-place for the current caller.\\n     *         The authorization will be checked via a storage slot.\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution\\n     * @param permits Permits to execute prior to the solution\\n     */\\n    function solveWithOnChainAuthorizationCheck(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external payable nonReentrant executePermits(permits) {\\n        // Make any private data available\\n        _includePrivateData(intent);\\n\\n        // Check authorization\\n        bytes32 intentHash = getIntentHash(intent);\\n        bytes32 authId = keccak256(abi.encodePacked(intentHash, msg.sender));\\n        Authorization memory auth = authorization[authId];\\n        _checkAuthorization(auth, uint128(solution.fillTokenDetails.length));\\n\\n        // Solve\\n        _solve(intent, solution, auth.executeAmountToCheck);\\n    }\\n\\n    /**\\n     * @notice Solve intent with authorization. Compared to the regular `solve`,\\n     *         this method allows solving intents of a different solver, as long\\n     *         as there's a valid authorization in-place for the current caller.\\n     *         The authorization will be checked via a signature.\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution for the intent\\n     * @param auth Authorization\\n     * @param authSignature Authorization signature\\n     * @param permits Permits to execute prior to the solution\\n     */\\n    function solveWithSignatureAuthorizationCheck(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        Authorization calldata auth,\\n        bytes calldata authSignature,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external payable nonReentrant executePermits(permits) {\\n        // Make any private data available\\n        _includePrivateData(intent);\\n\\n        // Check authorization\\n        bytes32 intentHash = getIntentHash(intent);\\n        bytes32 authorizationHash = getAuthorizationHash(\\n            intentHash,\\n            msg.sender,\\n            auth\\n        );\\n        bytes32 digest = _getEIP712Hash(authorizationHash);\\n        _assertValidSignature(\\n            intent.solver,\\n            digest,\\n            digest,\\n            authSignature.length,\\n            authSignature\\n        );\\n        _checkAuthorization(auth, uint128(solution.fillTokenDetails.length));\\n\\n        // Solve\\n        _solve(intent, solution, auth.executeAmountToCheck);\\n    }\\n\\n    // View methods\\n\\n    /**\\n     * @notice Get the EIP712 struct hash for an authorization\\n     *\\n     * @param intentHash Intent EIP712 struct hash to authorize\\n     * @param solver Solver to authorize\\n     * @param auth Authorization details/conditions\\n     *\\n     * @return authorizationHash The EIP712 struct hash of the authorization\\n     */\\n    function getAuthorizationHash(\\n        bytes32 intentHash,\\n        address solver,\\n        Authorization memory auth\\n    ) public view returns (bytes32 authorizationHash) {\\n        authorizationHash = keccak256(\\n            abi.encode(\\n                AUTHORIZATION_TYPEHASH,\\n                intentHash,\\n                solver,\\n                auth.fillAmountToCheck,\\n                auth.executeAmountToCheck,\\n                auth.blockDeadline\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the EIP712 struct hash for an intent\\n     *\\n     * @param intent Intent to compute the hash for\\n     *\\n     * @return intentHash The EIP712 struct hash of the intent\\n     */\\n    function getIntentHash(\\n        Intent memory intent\\n    ) public view returns (bytes32 intentHash) {\\n        intentHash = keccak256(\\n            bytes.concat(\\n                abi.encode(\\n                    INTENT_TYPEHASH,\\n                    intent.isBuy,\\n                    intent.buyToken,\\n                    intent.sellToken,\\n                    intent.maker,\\n                    intent.solver,\\n                    intent.source,\\n                    intent.feeBps,\\n                    intent.surplusBps,\\n                    intent.startTime,\\n                    intent.endTime,\\n                    nonce[intent.maker]\\n                ),\\n                abi.encode(\\n                    intent.isPartiallyFillable,\\n                    intent.isSmartOrder,\\n                    intent.isIncentivized,\\n                    intent.isCriteriaOrder,\\n                    intent.tokenIdOrCriteria,\\n                    intent.amount,\\n                    intent.endAmount,\\n                    intent.startAmountBps,\\n                    intent.expectedAmountBps\\n                )\\n            )\\n        );\\n    }\\n\\n    // Internal methods\\n\\n    /**\\n     * @dev Run pre-processing checks before the solution for an intent gets executed\\n     *\\n     * @param intent Intent to check\\n     * @param tokenDetailsToFill Tokens (and proofs) to fill\\n     *\\n     * @return actualTokenDetailsToFill Tokens (and proofs) to fill, adjusted to the amount available for the intent\\n     */\\n    function _preProcess(\\n        Intent memory intent,\\n        TokenDetails[] memory tokenDetailsToFill\\n    ) internal returns (TokenDetails[] memory actualTokenDetailsToFill) {\\n        bytes32 intentHash = getIntentHash(intent);\\n\\n        // Verify start and end times\\n\\n        if (intent.startTime > block.timestamp) {\\n            revert IntentIsNotStarted();\\n        }\\n\\n        if (intent.endTime < block.timestamp) {\\n            revert IntentIsExpired();\\n        }\\n\\n        if (intent.startTime >= intent.endTime) {\\n            revert InvalidStartAndEndTimes();\\n        }\\n\\n        // Verify cancellation status and signature\\n\\n        IntentStatus memory status = intentStatus[intentHash];\\n\\n        if (status.isCancelled) {\\n            revert IntentIsCancelled();\\n        }\\n\\n        if (!status.isPrevalidated) {\\n            _prevalidateIntent(\\n                intentHash,\\n                intent.maker,\\n                intent.isSmartOrder,\\n                intent.signature\\n            );\\n        }\\n\\n        // Ensure there's still some amount left to be filled\\n        uint128 amountAvailable = intent.amount - status.amountFilled;\\n        if (amountAvailable == 0) {\\n            revert IntentIsFilled();\\n        }\\n\\n        uint128 amountToFill = uint128(tokenDetailsToFill.length);\\n\\n        // Ensure non-partially-fillable intents are fully filled\\n        if (!intent.isPartiallyFillable && amountToFill < amountAvailable) {\\n            revert IntentIsNotPartiallyFillable();\\n        }\\n\\n        // Compute the actual amount to fill\\n        uint128 actualAmountToFill = amountToFill > amountAvailable\\n            ? amountAvailable\\n            : amountToFill;\\n        if (actualAmountToFill == 0) {\\n            revert InvalidFillAmount();\\n        }\\n\\n        // Update the storage\\n        intentStatus[intentHash].amountFilled += actualAmountToFill;\\n\\n        actualTokenDetailsToFill = new TokenDetails[](actualAmountToFill);\\n        unchecked {\\n            for (uint256 i; i < actualAmountToFill; i++) {\\n                actualTokenDetailsToFill[i] = tokenDetailsToFill[i];\\n            }\\n        }\\n\\n        if (intent.isBuy) {\\n            // When isBuy = true:\\n            // amount = buy amount\\n            // endAmount = sell end amount\\n            // startAmountBps = sell start amount bps\\n            // expectedAmountBps = sell expected amount bps\\n\\n            uint128 endAmount = (intent.endAmount * actualAmountToFill) /\\n                intent.amount;\\n            uint128 startAmount = endAmount -\\n                (endAmount * intent.startAmountBps) /\\n                10000;\\n\\n            //                                                      (now() - startTime)\\n            // maxAmount = startAmount + (endAmount - startAmount) ---------------------\\n            //                                                     (endTime - startTime)\\n\\n            uint128 maxAmount = startAmount +\\n                ((endAmount - startAmount) *\\n                    (uint32(block.timestamp) - intent.startTime)) /\\n                (intent.endTime - intent.startTime);\\n\\n            // Transfer inputs to solver\\n            _transferNativeOrERC20(\\n                intent.maker,\\n                msg.sender,\\n                intent.sellToken,\\n                maxAmount\\n            );\\n\\n            // Ensure the maker doesn't own any of the tokens that are being filled with\\n            unchecked {\\n                for (uint256 i; i < actualAmountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n                    try\\n                        IERC721(intent.buyToken).ownerOf(details.tokenId)\\n                    returns (address owner) {\\n                        if (owner == intent.maker) {\\n                            revert InvalidSolution();\\n                        }\\n                    } catch {\\n                        // Skip errors (to support not-yet-minted tokens)\\n                    }\\n                }\\n            }\\n        } else {\\n            // When isBuy = false:\\n            // amount = sell amount\\n            // endAmount = buy end amount\\n            // startAmountBps = buy start amount bps\\n            // expectedAmountBps = buy expected amount bps\\n\\n            unchecked {\\n                for (uint256 i; i < actualAmountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n\\n                    if (intent.isCriteriaOrder) {\\n                        if (intent.tokenIdOrCriteria != 0) {\\n                            _verifyCriteriaProof(\\n                                details.tokenId,\\n                                intent.tokenIdOrCriteria,\\n                                details.criteriaProof\\n                            );\\n                        }\\n                    } else {\\n                        if (intent.tokenIdOrCriteria != details.tokenId) {\\n                            revert InvalidTokenId();\\n                        }\\n                    }\\n\\n                    // Transfer inputs to solver\\n                    _transferERC721(\\n                        intent.maker,\\n                        msg.sender,\\n                        intent.sellToken,\\n                        details.tokenId\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Run post-process checks after the solution for an intent was executed\\n     *\\n     * @param intent Intent to check\\n     * @param tokenDetailsToFill Tokens (and proofs) to fill\\n     * @param amountToCheck Amount received to check the solution against\\n     * @param makerBuyBalanceDiff Difference in buy token balance resulted from executing the solution\\n     * @param makerSellBalanceDiff Difference in sell token balance resulted from executing the solution\\n     * @param sourceBalanceDiff Difference in the balance of the source resulted from executing the solution\\n     *\\n     * @return requiredTip Tip for the block builder, dependent on the executed amount (only relevant for incentivized intents)\\n     */\\n    function _postProcess(\\n        Intent memory intent,\\n        TokenDetails[] memory tokenDetailsToFill,\\n        uint128 amountToCheck,\\n        uint128 makerBuyBalanceDiff,\\n        uint128 makerSellBalanceDiff,\\n        uint128 sourceBalanceDiff\\n    ) internal returns (uint256 requiredTip) {\\n        bytes32 intentHash = getIntentHash(intent);\\n\\n        uint128 amountToFill = uint128(tokenDetailsToFill.length);\\n        if (intent.isBuy) {\\n            // When isBuy = true:\\n            // amount = buy amount\\n            // endAmount = sell end amount\\n            // startAmountBps = sell start amount bps\\n            // expectedAmountBps = sell expected amount bps\\n\\n            uint128 endAmount = (intent.endAmount * amountToFill) /\\n                intent.amount;\\n            uint128 startAmount = endAmount -\\n                (endAmount * intent.startAmountBps) /\\n                10000;\\n            uint128 expectedAmount = endAmount -\\n                (endAmount * intent.expectedAmountBps) /\\n                10000;\\n\\n            //                                                      (now() - startTime)\\n            // maxAmount = startAmount + (endAmount - startAmount) ---------------------\\n            //                                                     (endTime - startTime)\\n\\n            uint128 maxAmount = startAmount +\\n                ((endAmount - startAmount) *\\n                    (uint32(block.timestamp) - intent.startTime)) /\\n                (intent.endTime - intent.startTime);\\n\\n            uint128 executeAmount = makerSellBalanceDiff;\\n\\n            // The amount to execute should be lower than the maximum allowed amount\\n            if (executeAmount > maxAmount) {\\n                revert InvalidSolution();\\n            }\\n\\n            // The amount to execute should be lower than the check amount\\n            if (executeAmount > amountToCheck) {\\n                revert AmountCheckFailed();\\n            }\\n\\n            // Compute total fees\\n            uint128 sourceFees;\\n            if (intent.source != address(0)) {\\n                // Fee\\n                if (intent.feeBps > 0) {\\n                    sourceFees += (executeAmount * intent.feeBps) / 10000;\\n                }\\n\\n                // Surplus fee\\n                if (intent.surplusBps > 0 && executeAmount < expectedAmount) {\\n                    sourceFees +=\\n                        ((expectedAmount - executeAmount) * intent.surplusBps) /\\n                        10000;\\n                }\\n            }\\n\\n            // Ensure the correct amount of fees were paid\\n            if (sourceBalanceDiff < sourceFees) {\\n                revert InvalidSolution();\\n            }\\n\\n            // Ensure the maker got the correct amount of tokens\\n            if (makerBuyBalanceDiff < amountToFill) {\\n                revert InvalidSolution();\\n            }\\n\\n            // Ensure the maker owns all tokens that are being filled with\\n            uint256[] memory filledTokenIds = new uint256[](amountToFill);\\n            unchecked {\\n                for (uint256 i; i < amountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n\\n                    if (intent.isCriteriaOrder) {\\n                        if (intent.tokenIdOrCriteria != 0) {\\n                            _verifyCriteriaProof(\\n                                details.tokenId,\\n                                intent.tokenIdOrCriteria,\\n                                details.criteriaProof\\n                            );\\n                        }\\n                    } else {\\n                        if (intent.tokenIdOrCriteria != details.tokenId) {\\n                            revert InvalidTokenId();\\n                        }\\n                    }\\n\\n                    if (\\n                        IERC721(intent.buyToken).ownerOf(details.tokenId) !=\\n                        intent.maker\\n                    ) {\\n                        revert InvalidSolution();\\n                    }\\n\\n                    filledTokenIds[i] = details.tokenId;\\n                }\\n            }\\n\\n            if (intent.isIncentivized) {\\n                uint256 priorityFee = tx.gasprice - block.basefee;\\n                if (priorityFee != requiredPriorityFee) {\\n                    revert InvalidPriorityFee();\\n                }\\n\\n                uint16 slippage = intent.expectedAmountBps;\\n                if (slippage == 0) {\\n                    slippage = defaultSlippage;\\n                }\\n\\n                uint128 slippageUnit = (slippage * expectedAmount) / 10000;\\n                uint128 minValue = expectedAmount - slippageUnit * multiplier;\\n                uint128 maxValue = expectedAmount + slippageUnit;\\n\\n                if (executeAmount >= maxValue) {\\n                    requiredTip = minTip;\\n                } else if (executeAmount <= minValue) {\\n                    requiredTip = maxTip;\\n                } else {\\n                    requiredTip =\\n                        maxTip -\\n                        ((executeAmount - minValue) * (maxTip - minTip)) /\\n                        (maxValue - minValue);\\n                }\\n\\n                uint256 balance = address(this).balance;\\n                if (balance < requiredTip) {\\n                    revert InvalidTip();\\n                } else {\\n                    block.coinbase.transfer(requiredTip);\\n                }\\n\\n                uint256 leftover = address(this).balance;\\n                if (leftover > 0) {\\n                    ISolutionERC721(msg.sender).refund{\\n                        value: address(this).balance\\n                    }();\\n                }\\n            }\\n\\n            emit IntentSolved(\\n                intentHash,\\n                intent.isBuy,\\n                intent.buyToken,\\n                intent.sellToken,\\n                intent.maker,\\n                msg.sender,\\n                executeAmount,\\n                filledTokenIds\\n            );\\n        } else {\\n            // When isBuy = false:\\n            // amount = sell amount\\n            // endAmount = buy end amount\\n            // startAmountBps = buy start amount bps\\n            // expectedAmountBps = buy expected amount bps\\n\\n            uint128 endAmount = (intent.endAmount * amountToFill) /\\n                intent.amount;\\n            uint128 startAmount = endAmount +\\n                (endAmount * intent.startAmountBps) /\\n                10000;\\n            uint128 expectedAmount = endAmount +\\n                (endAmount * intent.expectedAmountBps) /\\n                10000;\\n\\n            //                                                      (now() - startTime)\\n            // minAmount = startAmount - (startAmount - endAmount) ---------------------\\n            //                                                     (endTime - startTime)\\n\\n            uint128 minAmount = startAmount -\\n                ((startAmount - endAmount) *\\n                    (uint32(block.timestamp) - intent.startTime)) /\\n                (intent.endTime - intent.startTime);\\n\\n            uint128 executeAmount = makerBuyBalanceDiff + sourceBalanceDiff;\\n\\n            // The amount to execute should be greater than the minimum amount\\n            if (executeAmount < minAmount) {\\n                revert InvalidSolution();\\n            }\\n\\n            // The amount to execute should be greater than the check amount\\n            if (executeAmount < amountToCheck) {\\n                revert AmountCheckFailed();\\n            }\\n\\n            // Compute total fees\\n            uint128 sourceFees;\\n            if (intent.source != address(0)) {\\n                // Fee\\n                if (intent.feeBps > 0) {\\n                    sourceFees += (executeAmount * intent.feeBps) / 10000;\\n                }\\n\\n                // Surplus fee\\n                if (intent.surplusBps > 0 && executeAmount > expectedAmount) {\\n                    sourceFees +=\\n                        ((executeAmount - expectedAmount) * intent.surplusBps) /\\n                        10000;\\n                }\\n            }\\n\\n            // Ensure the correct amount of fees were paid\\n            if (sourceBalanceDiff < sourceFees) {\\n                revert InvalidSolution();\\n            }\\n\\n            // Ensure the maker spent the correct amount of tokens\\n            if (makerSellBalanceDiff < amountToFill) {\\n                revert InvalidSolution();\\n            }\\n\\n            uint256[] memory filledTokenIds = new uint256[](amountToFill);\\n            unchecked {\\n                for (uint256 i; i < amountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n                    filledTokenIds[i] = details.tokenId;\\n                }\\n            }\\n\\n            if (intent.isIncentivized) {\\n                uint256 priorityFee = tx.gasprice - block.basefee;\\n                if (priorityFee != requiredPriorityFee) {\\n                    revert InvalidPriorityFee();\\n                }\\n\\n                uint16 slippage = intent.expectedAmountBps;\\n                if (slippage == 0) {\\n                    slippage = defaultSlippage;\\n                }\\n\\n                uint128 slippageUnit = (slippage * expectedAmount) / 10000;\\n                uint128 minValue = expectedAmount - slippageUnit;\\n                uint128 maxValue = expectedAmount + slippageUnit * multiplier;\\n\\n                if (executeAmount >= maxValue) {\\n                    requiredTip = minTip;\\n                } else if (executeAmount <= minValue) {\\n                    requiredTip = maxTip;\\n                } else {\\n                    requiredTip =\\n                        minTip +\\n                        ((executeAmount - minValue) * (maxTip - minTip)) /\\n                        (maxValue - minValue);\\n                }\\n\\n                uint256 balance = address(this).balance;\\n                if (balance < requiredTip) {\\n                    revert InvalidTip();\\n                } else {\\n                    block.coinbase.transfer(requiredTip);\\n                }\\n\\n                uint256 leftover = address(this).balance;\\n                if (leftover > 0) {\\n                    ISolutionERC721(msg.sender).refund{\\n                        value: address(this).balance\\n                    }();\\n                }\\n            }\\n\\n            emit IntentSolved(\\n                intentHash,\\n                intent.isBuy,\\n                intent.buyToken,\\n                intent.sellToken,\\n                intent.maker,\\n                msg.sender,\\n                executeAmount,\\n                filledTokenIds\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Solve intent\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution for the intent\\n     * @param amountToCheck The amount to check the solution against\\n     */\\n    function _solve(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        uint128 amountToCheck\\n    ) internal {\\n        uint256 coinbaseBalanceBefore = block.coinbase.balance;\\n\\n        // Determine the token for which the amount is variable\\n        // - isBuy = true -> sellToken (exact output, variable input)\\n        // - isBuy = false -> buyToken (exact input, variable output)\\n        address relevantToken = intent.isBuy\\n            ? intent.sellToken\\n            : intent.buyToken;\\n\\n        // Fetch the balances before the solution execution\\n        uint128 makerBuyBalanceBefore = _getBalanceNativeOrERC20OrERC721(\\n            intent.buyToken,\\n            intent.maker\\n        );\\n        uint128 makerSellBalanceBefore = _getBalanceNativeOrERC20OrERC721(\\n            intent.sellToken,\\n            intent.maker\\n        );\\n        uint128 sourceBalanceBefore = _getBalanceNativeOrERC20OrERC721(\\n            relevantToken,\\n            intent.source\\n        );\\n\\n        // Pre-process\\n        TokenDetails[] memory actualTokenDetailsToFill = _preProcess(\\n            intent,\\n            solution.fillTokenDetails\\n        );\\n\\n        // Solve\\n        ISolutionERC721(msg.sender).callback(\\n            intent,\\n            actualTokenDetailsToFill,\\n            solution.data\\n        );\\n\\n        // Fetch the balances after the solution execution\\n        uint128 makerBuyBalanceAfter = _getBalanceNativeOrERC20OrERC721(\\n            intent.buyToken,\\n            intent.maker\\n        );\\n        uint128 makerSellBalanceAfter = _getBalanceNativeOrERC20OrERC721(\\n            intent.sellToken,\\n            intent.maker\\n        );\\n        uint128 sourceBalanceAfter = _getBalanceNativeOrERC20OrERC721(\\n            relevantToken,\\n            intent.source\\n        );\\n\\n        // Post-process\\n        uint256 requiredTip = _postProcess(\\n            intent,\\n            actualTokenDetailsToFill,\\n            amountToCheck,\\n            makerBuyBalanceAfter - makerBuyBalanceBefore,\\n            makerSellBalanceBefore - makerSellBalanceAfter,\\n            sourceBalanceAfter - sourceBalanceBefore\\n        );\\n\\n        MemswapAlphaNFT(MEMSWAP_ALPHA_NFT).mint(intent.maker);\\n\\n        uint256 coinbaseBalanceAfter = block.coinbase.balance;\\n        if (\\n            intent.isIncentivized &&\\n            coinbaseBalanceAfter - coinbaseBalanceBefore != requiredTip\\n        ) {\\n            revert InvalidTip();\\n        }\\n    }\\n\\n    /**\\n     * @dev Check an authorization\\n     *\\n     * @param auth Authorization to check\\n     * @param amount Amount to check the authorization against\\n     */\\n    function _checkAuthorization(\\n        Authorization memory auth,\\n        uint128 amount\\n    ) internal view {\\n        // Ensure the authorization is not expired\\n        if (auth.blockDeadline < block.number) {\\n            revert AuthorizationIsExpired();\\n        }\\n\\n        // Ensure the amount to fill matches the authorized amount\\n        if (auth.fillAmountToCheck != amount) {\\n            revert AuthorizationAmountMismatch();\\n        }\\n    }\\n\\n    /**\\n     * @dev Pre-validate an intent by checking its signature\\n     *\\n     * @param intentHash EIP712 intent struct hash to verify\\n     * @param maker The maker of the intent\\n     * @param hasDynamicSignature Whether the intent has a dynamic signature\\n     * @param signature The signature of the intent\\n     */\\n    function _prevalidateIntent(\\n        bytes32 intentHash,\\n        address maker,\\n        bool hasDynamicSignature,\\n        bytes memory signature\\n    ) internal {\\n        _verifySignature(intentHash, maker, signature);\\n\\n        // Mark the intent as validated if allowed\\n        if (!hasDynamicSignature) {\\n            intentStatus[intentHash].isPrevalidated = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Make any private data available for an intent\\n     *\\n     * @param intent Intent to make private data available for\\n     */\\n    function _includePrivateData(Intent memory intent) internal view {\\n        if (intent.maker == address(0)) {\\n            bytes32 intentHash = getIntentHash(intent);\\n            bytes32 privateData = intentPrivateData[intentHash];\\n\\n            // For byte conversions, right bits are stripped (we use `bytes20(...)`)\\n            address revealedMaker = address(uint160(bytes20(privateData)));\\n            // For numeric conversions, left bits are stripped (we use `uint96(uint256(...))`)\\n            bytes12 revealedSignaturePrefix = bytes12(\\n                uint96(uint256(privateData))\\n            );\\n\\n            // Override the maker\\n            intent.maker = revealedMaker;\\n\\n            // Override the signature prefix\\n            bytes memory signature = intent.signature;\\n            assembly {\\n                mstore(\\n                    add(signature, 0x20),\\n                    or(\\n                        and(\\n                            mload(add(signature, 0x20)),\\n                            not(shl(160, 0xFFFFFFFFFFFFFFFFFFFFFFFF))\\n                        ),\\n                        revealedSignaturePrefix\\n                    )\\n                )\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method to get the balance of native or ERC20/ERC721 tokens\\n     *\\n     * @param token Token to get the balance for (native tokens are represented by the zero address)\\n     * @param owner Wallet to get the balance of\\n     *\\n     * @return balance The amount of `token` owned by `owner`\\n     */\\n    function _getBalanceNativeOrERC20OrERC721(\\n        address token,\\n        address owner\\n    ) internal view returns (uint128 balance) {\\n        if (token == address(0)) {\\n            balance = uint128(owner.balance);\\n        } else {\\n            // Same interface for ERC20 and ERC721\\n            balance = uint128(IERC20(token).balanceOf(owner));\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method for transferring native and ERC20 tokens\\n     *\\n     * @param from Transfer from this address\\n     * @param to Transfer to this address\\n     * @param token Token to transfer (native tokens are represented by the zero address)\\n     * @param amount Amonut to transfer\\n     */\\n    function _transferNativeOrERC20(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n        if (address(token) == address(0)) {\\n            (success, ) = to.call{value: amount}(\\\"\\\");\\n        } else {\\n            // First, attempt to transfer directly\\n            try IERC20(token).transferFrom(from, to, amount) {\\n                success = true;\\n            } catch {\\n                // Secondly, attempt to transfer via permit2\\n                _permit2TransferFrom(from, to, uint160(amount), token);\\n                success = true;\\n            }\\n        }\\n\\n        if (!success) {\\n            revert UnsuccessfulCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method for transferring ERC721 tokens\\n     *\\n     * @param from Transfer from this address\\n     * @param to Transfer to this address\\n     * @param token Token to transfer\\n     * @param tokenId Token id to transfer\\n     */\\n    function _transferERC721(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 tokenId\\n    ) internal {\\n        IERC721(token).transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Verify a merkle proof\\n     *      Taken from: https://github.com/ProjectOpenSea/seaport/blob/dfce06d02413636f324f73352b54a4497d63c310/contracts/lib/CriteriaResolution.sol#L243-L247\\n     *\\n     * @param leaf Leaf to verify\\n     * @param root Merkle root\\n     * @param criteriaProof Merkle proof for the inclusion of `leaf` in `root`\\n     */\\n    function _verifyCriteriaProof(\\n        uint256 leaf,\\n        uint256 root,\\n        bytes32[] memory criteriaProof\\n    ) internal pure {\\n        bool isValid;\\n\\n        assembly {\\n            // Store the leaf at the beginning of scratch space\\n            mstore(0, leaf)\\n\\n            // Derive the hash of the leaf to use as the initial proof element\\n            let computedHash := keccak256(0, 0x20)\\n            // Get memory start location of the first element in proof array\\n            let data := add(criteriaProof, 0x20)\\n\\n            for {\\n                // Left shift by 5 is equivalent to multiplying by 0x20\\n                let end := add(data, shl(5, mload(criteriaProof)))\\n            } lt(data, end) {\\n                // Increment by one word at a time\\n                data := add(data, 0x20)\\n            } {\\n                // Get the proof element\\n                let loadedData := mload(data)\\n\\n                // Sort proof elements and place them in scratch space\\n                let scratch := shl(5, gt(computedHash, loadedData))\\n                mstore(scratch, computedHash)\\n                mstore(xor(scratch, 0x20), loadedData)\\n\\n                // Derive the updated hash\\n                computedHash := keccak256(0, 0x40)\\n            }\\n\\n            isValid := eq(computedHash, root)\\n        }\\n\\n        if (!isValid) {\\n            revert InvalidCriteriaProof();\\n        }\\n    }\\n\\n    // --- Overridden methods ---\\n\\n    function _lookupBulkOrderTypehash(\\n        uint256 treeHeight\\n    ) internal pure override returns (bytes32 typeHash) {\\n        // keccak256(\\\"BatchIntent(Intent[2]...[2] tree)Intent(bool isBuy,address buyToken,address sellToken,address maker,address solver,address source,uint16 feeBps,uint16 surplusBps,uint32 startTime,uint32 endTime,uint256 nonce,bool isPartiallyFillable,bool isSmartOrder,bool isIncentivized,bool isCriteriaOrder,uint256 tokenIdOrCriteria,uint128 amount,uint128 endAmount,uint16 startAmountBps,uint16 expectedAmountBps)\\\")\\n        if (treeHeight == 1) {\\n            typeHash = 0xe2f9470ce56204b03b7f6a5da488bc405af34f9420fea7d23b9caa0e9f13b34b;\\n        } else if (treeHeight == 2) {\\n            typeHash = 0x38f007c7b676c4e3c06780a2eb36358363d4dbba803a413335dac32c672faf5c;\\n        } else if (treeHeight == 3) {\\n            typeHash = 0xaebed864141699427ffecf19db72b18a6519621259be5ad00bc0cd844551e7fb;\\n        } else if (treeHeight == 4) {\\n            typeHash = 0xb4f25ef2f5b34b8c0b2db30279b8b106d127c64b562153796fd3b9b826e08094;\\n        } else if (treeHeight == 5) {\\n            typeHash = 0xed14a836400793f5936eecd4130e39ee9d8d69c4815012477a72d0d8ccacb560;\\n        } else if (treeHeight == 6) {\\n            typeHash = 0xd51da1ce6fb4cad122d966c4939bfbe48df609c2321c0aa5ad45f30d93c5bce4;\\n        } else if (treeHeight == 7) {\\n            typeHash = 0x7f233ad630dc1877c45a371e9b3c2e9b0bf2d2a42d50f3ce4f6f548f50a4ce7b;\\n        } else if (treeHeight == 8) {\\n            typeHash = 0x075e03a4af0aeb0971b0a23187d89b336494d815e4007aed2a282b2ff023dea8;\\n        } else {\\n            revert MerkleTreeTooLarge();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/nft/MemswapAlphaNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract MemswapAlphaNFT is ERC1155, Ownable {\\n    using Strings for uint256;\\n\\n    // --- Errors ---\\n\\n    error Unauthorized();\\n\\n    // --- Fields ---\\n\\n    // Public\\n\\n    string public name;\\n    string public symbol;\\n\\n    string public contractURI;\\n    mapping(address => bool) public isAllowedToMint;\\n\\n    // Private\\n\\n    uint256 private constant TOKEN_ID = 0;\\n\\n    // --- Constructor ---\\n\\n    constructor(\\n        address _owner,\\n        string memory _tokenURI,\\n        string memory _contractURI\\n    ) ERC1155(_tokenURI) {\\n        name = \\\"Memswap Alpha NFT\\\";\\n        symbol = \\\"MEM\\\";\\n\\n        contractURI = _contractURI;\\n\\n        _transferOwnership(_owner);\\n    }\\n\\n    // --- Public methods ---\\n\\n    function mint(address recipient) external {\\n        if (!isAllowedToMint[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n\\n        _mint(recipient, TOKEN_ID, 1, \\\"\\\");\\n    }\\n\\n    // --- View methods ---\\n\\n    function uri(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        return string(abi.encodePacked(super.uri(tokenId), tokenId.toString()));\\n    }\\n\\n    // --- Owner methods ---\\n\\n    function updateTokenURI(string memory newTokenURI) external onlyOwner {\\n        _setURI(newTokenURI);\\n    }\\n\\n    function updateContractURI(\\n        string memory newContractURI\\n    ) external onlyOwner {\\n        contractURI = newContractURI;\\n    }\\n\\n    function setIsAllowedToMint(\\n        address[] calldata minters,\\n        bool[] calldata allowed\\n    ) external onlyOwner {\\n        unchecked {\\n            for (uint256 i; i < minters.length; i++) {\\n                isAllowedToMint[minters[i]] = allowed[i];\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"memswapAlphaNft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountCheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuthorizationAmountMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuthorizationIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntentCannotBePrevalidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntentIsCancelled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntentIsExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntentIsFilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntentIsNotPartiallyFillable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IntentIsNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCriteriaProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFillAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPriorityFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSolution\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartAndEndTimes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTip\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsuccessfulCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IncentivizationParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"name\":\"IntentCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"name\":\"IntentPrevalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"IntentSolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"IntentsPosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTENT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MEMSWAP_ALPHA_NFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"authorization\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"fillAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"executeAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockDeadline\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent[]\",\"name\":\"intents\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"fillAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"executeAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockDeadline\",\"type\":\"uint32\"}],\"internalType\":\"struct MemswapERC721.Authorization[]\",\"name\":\"auths\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent[]\",\"name\":\"intents\",\"type\":\"tuple[]\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultSlippage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"fillAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"executeAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockDeadline\",\"type\":\"uint32\"}],\"internalType\":\"struct MemswapERC721.Authorization\",\"name\":\"auth\",\"type\":\"tuple\"}],\"name\":\"getAuthorizationHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"authorizationHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"}],\"name\":\"getIntentHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"intentHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"intentPrivateData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"intentStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPrevalidated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCancelled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"amountFilled\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"name\":\"post\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent[]\",\"name\":\"intents\",\"type\":\"tuple[]\"}],\"name\":\"prevalidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredPriorityFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent[]\",\"name\":\"intents\",\"type\":\"tuple[]\"}],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MemswapERC721.TokenDetails[]\",\"name\":\"fillTokenDetails\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MemswapERC721.Solution\",\"name\":\"solution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PermitExecutor.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitExecutor.Permit[]\",\"name\":\"permits\",\"type\":\"tuple[]\"}],\"name\":\"solve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MemswapERC721.TokenDetails[]\",\"name\":\"fillTokenDetails\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MemswapERC721.Solution\",\"name\":\"solution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PermitExecutor.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitExecutor.Permit[]\",\"name\":\"permits\",\"type\":\"tuple[]\"}],\"name\":\"solveWithOnChainAuthorizationCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isIncentivized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MemswapERC721.TokenDetails[]\",\"name\":\"fillTokenDetails\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MemswapERC721.Solution\",\"name\":\"solution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"fillAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"executeAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockDeadline\",\"type\":\"uint32\"}],\"internalType\":\"struct MemswapERC721.Authorization\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum PermitExecutor.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitExecutor.Permit[]\",\"name\":\"permits\",\"type\":\"tuple[]\"}],\"name\":\"solveWithSignatureAuthorizationCheck\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newDefaultSlippage\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"newMultiplier\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"newRequiredPriorityFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newMinTip\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newMaxTip\",\"type\":\"uint64\"}],\"name\":\"updateIncentivizationParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MemswapERC721", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003a420aa01d1029e4a08e5171affa40e705fa73a9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}