{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"marketplace-contracts-dev/contracts/Hotpot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {IHotpot} from \\\"./interface/IHotpot.sol\\\";\\nimport {VRFV2WrapperConsumerBase} from \\\"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\\\";\\n\\ncontract Hotpot is IHotpot, OwnableUpgradeable, PausableUpgradeable, VRFV2WrapperConsumerBase {\\n    uint256 public potLimit;\\n    uint256 public currentPotSize;\\n    uint256 public raffleTicketCost;\\n    mapping(address => Prize) public claimablePrizes;\\n    mapping(uint256 => RequestStatus) public chainlinkRequests;\\n    mapping(uint16 => uint32[]) public winningTicketIds;\\n    mapping(uint16 => uint128) public prizeAmounts;  // winner id => prize amount. For example, first winner gets 5ETH, second winner - 1 ETH, etc.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n    uint128 private claimWindow;\\n    uint16 public numberOfWinners;\\n    uint16 public fee; // 100 = 1%, 10000 = 100%;\\n    uint16 public tradeFee; // the percent of a trade amount that goes to the pot as pure ether\\n    uint32 public lastRaffleTicketId;\\n    uint32 public potTicketIdStart; // start of current pot ticket range\\n    uint32 public potTicketIdEnd; // end of current pot ticket range\\n    uint32 public nextPotTicketIdStart;\\n    uint16 public currentPotId;\\n    address public marketplace;\\n    address public operator;\\n    address public airdrop; // airdrop contract\\n    uint32 private callbackGasLimit;\\n    uint256 constant MULTIPLIER = 10000;\\n\\n    modifier onlyMarketplace() {\\n        require(msg.sender == marketplace, \\\"Caller is not the marketplace contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(msg.sender == operator, \\\"Caller must be the operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyAirdrop() {\\n        require(msg.sender == airdrop, \\\"Anauthorized call - not an airdrop contract\\\");\\n        _;\\n    }\\n\\n    constructor(address _link, address _vrfV2Wrapper) VRFV2WrapperConsumerBase(_link, _vrfV2Wrapper) {\\n        _disableInitializers();\\n    }\\n    \\n    function initialize(address _owner, InitializeParams calldata params) external initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        transferOwnership(_owner);\\n\\n        potLimit = params.potLimit;\\n        raffleTicketCost = params.raffleTicketCost;\\n        claimWindow = params.claimWindow;\\n        numberOfWinners = params.numberOfWinners;\\n        fee = params.fee;\\n        tradeFee = params.tradeFee;\\n        lastRaffleTicketId = 1;\\n        potTicketIdStart = 1;\\n        potTicketIdEnd = 1;\\n        lastRequestId = 1;\\n        currentPotId = 1;\\n        nextPotTicketIdStart = 2; // first ticket of the first pot\\n        marketplace = params.marketplace;\\n        operator = params.operator;\\n    }\\n\\n    function executeTrade(\\n        uint256 _amountInWei, \\n        address _buyer, \\n        address _seller, \\n        uint256 _buyerPendingAmount, \\n        uint256 _sellerPendingAmount\\n    ) external payable onlyMarketplace whenNotPaused {\\n\\t\\trequire(msg.value > 0, \\\"No trade fee transferred (msg.value)\\\");\\n        uint256 potValueDelta = msg.value * (MULTIPLIER - fee) / MULTIPLIER;\\n        uint256 _currentPotSize = currentPotSize;\\n\\t\\tuint256 _potLimit = potLimit;\\n\\t\\tuint256 _raffleTicketCost = raffleTicketCost;\\n        uint32 _lastRaffleTicketIdBefore = lastRaffleTicketId;\\n\\n        _executeTrade(\\n            _amountInWei,\\n            _buyer,\\n            _seller,\\n            _buyerPendingAmount,\\n            _sellerPendingAmount,\\n            _raffleTicketCost\\n        );\\n\\n        /*\\n            Request Chainlink random winners if the Pot is filled \\n         */\\n\\t\\tif(_currentPotSize + potValueDelta >= _potLimit) {\\n            _finishRaffle(\\n                potValueDelta, \\n                _lastRaffleTicketIdBefore,\\n                _potLimit,\\n                _currentPotSize\\n            );\\n        }\\n\\t\\telse {\\n\\t\\t\\tcurrentPotSize += potValueDelta;\\n\\t\\t}\\n    }\\n\\n    function batchExecuteTrade(\\n        address buyer,\\n        BatchTradeParams[] memory trades,\\n        address[] memory sellers \\n    ) external payable onlyMarketplace whenNotPaused {\\n        require(msg.value > 0, \\\"No trade fee transferred (msg.value)\\\");\\n        uint256 potValueDelta = msg.value * (MULTIPLIER - fee) / MULTIPLIER;\\n        uint256 _currentPotSize = currentPotSize;\\n\\t\\tuint256 _potLimit = potLimit;\\n\\t\\tuint256 _raffleTicketCost = raffleTicketCost;\\n        uint32 _lastRaffleTicketIdBefore = lastRaffleTicketId;\\n        uint256 trades_n = trades.length;\\n\\n        /* \\n            Pending amounts might change during trades,\\n            so we update them locally to pass to the next\\n            trade\\n         */\\n        uint256[] memory sellersPendingAmounts = new uint256[](sellers.length);\\n        uint256 buyerPendingAmount = trades[0]._buyerPendingAmount;\\n\\n        // set initial pending amounts\\n        for (uint256 i = 0; i < trades_n; i++) {\\n            BatchTradeParams memory trade = trades[i];\\n            sellersPendingAmounts[trade._sellerIndex] = trade._sellerPendingAmount;\\n        }\\n        \\n        /* \\n            Execute trades, \\n            while updating local pending amounts\\n         */\\n        {\\n            for(uint256 i = 0; i < trades_n; i++) {\\n                BatchTradeParams memory trade = trades[i];\\n                uint16 sellerIndex = trade._sellerIndex;\\n\\n                (\\n                    buyerPendingAmount, \\n                    sellersPendingAmounts[sellerIndex]\\n                ) = _executeTrade(\\n                        trade._amountInWei,\\n                        buyer,\\n                        sellers[sellerIndex],\\n                        buyerPendingAmount,\\n                        sellersPendingAmounts[sellerIndex],\\n                        _raffleTicketCost\\n                );\\n            }\\n        }\\n        \\n\\n        /*\\n            Request Chainlink random winners if the Pot is filled \\n         */\\n\\t\\tif(_currentPotSize + potValueDelta >= _potLimit) {\\n            _finishRaffle(\\n                potValueDelta, \\n                _lastRaffleTicketIdBefore,\\n                _potLimit,\\n                _currentPotSize\\n            );\\n        }\\n\\t\\telse {\\n\\t\\t\\tcurrentPotSize += potValueDelta;\\n\\t\\t}\\n    }\\n\\n    function executeRaffle(\\n        address[] calldata _winners\\n    ) external onlyOperator {\\n        uint _potLimit = potLimit;\\n        require(_winners.length == numberOfWinners, \\\"Must be equal to numberofWinners\\\");\\n        require(address(this).balance >= _potLimit, \\\"The pot is not filled\\\");\\n\\n        uint sum = 0;\\n        for(uint16 i; i < _winners.length; i++) {\\n            uint128 _prizeAmount = prizeAmounts[i];\\n            Prize storage userPrize = claimablePrizes[_winners[i]];\\n            userPrize.deadline = uint128(block.timestamp + claimWindow);\\n            userPrize.amount = userPrize.amount + _prizeAmount;\\n            sum += _prizeAmount;\\n        }\\n        require(sum <= _potLimit);\\n\\n        emit WinnersAssigned(_winners);\\n    }\\n\\n    function claim() external whenNotPaused {\\n        address payable user = payable(msg.sender);\\n        Prize memory prize = claimablePrizes[user];\\n        require(prize.amount > 0, \\\"No available winnings\\\");\\n        require(block.timestamp < prize.deadline, \\\"Claim window is closed\\\");\\n\\n        claimablePrizes[user].amount = 0; \\n        user.transfer(prize.amount);\\n        emit Claim(user, prize.amount);\\n    }\\n\\n    function canClaim(address user) external view returns(bool) {\\n        Prize memory prize = claimablePrizes[user];\\n        return prize.amount > 0 && block.timestamp < prize.deadline;\\n    }\\n\\n    function getWinningTicketIds(uint16 _potId) external view returns(uint32[] memory) {\\n        return winningTicketIds[_potId];\\n    }\\n\\n    function claimAirdropTickets(\\n        address user,\\n        uint32 tickets\\n    ) external onlyAirdrop {\\n        if (tickets == 0) {\\n            return;\\n        }\\n        uint32 ticketIdStart = lastRaffleTicketId + 1;\\n        uint32 ticketIdEnd = ticketIdStart + tickets - 1;\\n        lastRaffleTicketId = ticketIdEnd;\\n        emit GenerateAirdropTickets(\\n            user,\\n            ticketIdStart,\\n            ticketIdEnd\\n        );\\n    }\\n\\n    /* \\n\\n        ***\\n        SETTERS\\n        ***\\n\\n     */\\n\\n    function setMarketplace(address _newMarketplace) external onlyOwner {\\n        require(marketplace != _newMarketplace, \\\"Address didn't change\\\");\\n        marketplace = _newMarketplace;\\n        emit MarketplaceUpdated(_newMarketplace);\\n    }\\n\\n    function setOperator(address _newOperator) external onlyMarketplace {\\n        operator = _newOperator;\\n    }\\n\\n    function setAirdropContract(address _newAirdropContract) external onlyOwner {\\n        require(airdrop != _newAirdropContract, \\\"Address didn't change\\\");\\n        airdrop = _newAirdropContract;\\n        emit AirdropAddressUpdated(_newAirdropContract);\\n    }\\n\\n    function setRaffleTicketCost(uint256 _newRaffleTicketCost) external onlyOwner {\\n        require(raffleTicketCost != _newRaffleTicketCost, \\\"Cost must be different\\\");\\n        require(_newRaffleTicketCost > 0, \\\"Raffle cost must be non-zero\\\");\\n        raffleTicketCost = _newRaffleTicketCost;\\n    }\\n\\n    function setPotLimit(uint256 _newPotLimit) external onlyOwner {\\n        require(potLimit != _newPotLimit, \\\"Pot limit must be different\\\");\\n        potLimit = _newPotLimit;\\n    }\\n\\n    function setTradeFee(uint16 _newTradeFee) external onlyMarketplace {\\n        tradeFee = _newTradeFee;\\n    }\\n\\n    function setChainlinkGasLimit(\\n        uint32 _callbackGasLimit\\n    ) external onlyOwner {\\n        callbackGasLimit = _callbackGasLimit;\\n        emit CallbackGasLimitUpdated(_callbackGasLimit);\\n    }\\n\\n    function updateNumberOfWinners(uint16 _nOfWinners) \\n        external \\n        onlyOwner \\n    {\\n        require(numberOfWinners != _nOfWinners, \\n            \\\"Number of winners is currently the same\\\");\\n        numberOfWinners = _nOfWinners;\\n        emit NumberOfWinnersUpdated(_nOfWinners);\\n    }\\n\\n    function updatePrizeAmounts(uint128[] memory _newPrizeAmounts)\\n        external \\n        onlyOwner \\n    {\\n        require(_newPrizeAmounts.length == numberOfWinners, \\n            \\\"Array length doesnt match the number of winners\\\");\\n        for (uint16 i = 0; i < _newPrizeAmounts.length; i++) {\\n            if (prizeAmounts[i] != _newPrizeAmounts[i]) {\\n                prizeAmounts[i] = _newPrizeAmounts[i];\\n            }\\n        }\\n        emit PrizeAmountsUpdated(_newPrizeAmounts);\\n    }\\n\\n    /* \\n\\n            ***\\n            INTERNAL\\n            ***\\n     */\\n\\n    function _executeTrade(\\n        uint256 _amountInWei, \\n        address _buyer, \\n        address _seller, \\n        uint256 _buyerPendingAmount, \\n        uint256 _sellerPendingAmount,\\n        uint256 _raffleTicketCost\\n    ) internal returns(\\n        uint256 _newBuyerPendingAmount,\\n        uint256 _newSellerPendingAmount\\n    ) {\\n        require(_buyer != _seller, \\\"Buyer and seller must be different\\\");\\n        uint32 buyerTickets = uint32((_buyerPendingAmount + _amountInWei) / _raffleTicketCost);\\n\\t\\tuint32 sellerTickets = uint32((_sellerPendingAmount + _amountInWei) / _raffleTicketCost);\\n\\t\\t_newBuyerPendingAmount = (_buyerPendingAmount + _amountInWei) % _raffleTicketCost;\\n\\t\\t_newSellerPendingAmount = (_sellerPendingAmount + _amountInWei) % _raffleTicketCost;\\n        \\n        _generateTickets(_buyer, _seller, buyerTickets, sellerTickets,\\n            _newBuyerPendingAmount, _newSellerPendingAmount);\\n    }\\n    \\n    function _generateTickets(\\n        address _buyer,\\n        address _seller,\\n        uint32 buyerTickets, \\n        uint32 sellerTickets,\\n        uint256 _newBuyerPendingAmount,\\n        uint256 _newSellerPendingAmount\\n    ) internal {\\n        uint32 buyerTicketIdStart;\\n        uint32 buyerTicketIdEnd;\\n        uint32 sellerTicketIdStart;\\n        uint32 sellerTicketIdEnd;\\n\\n        /*\\n            Assigning newly generated ticket ranges \\n        */\\n        if(buyerTickets > 0) {\\n            buyerTicketIdStart = lastRaffleTicketId + 1;\\n            buyerTicketIdEnd = buyerTicketIdStart + buyerTickets - 1; \\n        }\\n        if (sellerTickets > 0) {\\n            bool buyerGetsNewTickets = buyerTicketIdEnd > 0;\\n            sellerTicketIdStart = buyerGetsNewTickets ? \\n                buyerTicketIdEnd + 1 : lastRaffleTicketId + 1;\\n            sellerTicketIdEnd = sellerTicketIdStart + sellerTickets - 1;\\n        }\\n        lastRaffleTicketId += buyerTickets + sellerTickets;\\n\\n        emit GenerateRaffleTickets(\\n\\t\\t\\t_buyer, \\n\\t\\t\\t_seller, \\n\\t\\t\\tbuyerTicketIdStart, \\n\\t\\t\\tbuyerTicketIdEnd,\\n            sellerTicketIdStart,\\n            sellerTicketIdEnd,\\n\\t\\t\\t_newBuyerPendingAmount,\\n\\t\\t\\t_newSellerPendingAmount\\n\\t\\t);\\n    }\\n\\n    function _calculateTicketIdEnd(\\n        uint32 _lastRaffleTicketIdBefore\\n    ) internal view returns(uint32 _ticketIdEnd) {\\n\\t\\tuint256 _raffleTicketCost = raffleTicketCost;\\n        uint256 _ethDeltaNeededToFillPot = (potLimit - currentPotSize) * MULTIPLIER / (MULTIPLIER - fee);\\n        uint256 _tradeAmountNeededToFillPot = _ethDeltaNeededToFillPot * MULTIPLIER / tradeFee;\\n        // First calculate tickets needed to fill the pot\\n        uint32 ticketsNeeded = uint32(_tradeAmountNeededToFillPot / _raffleTicketCost) * 2;\\n        \\n        if(_tradeAmountNeededToFillPot % _raffleTicketCost > 0) {\\n            ticketsNeeded += 1;\\n        }\\n        \\n        return _lastRaffleTicketIdBefore + ticketsNeeded;\\n    }\\n\\n    function _finishRaffle(\\n        uint256 potValueDelta,\\n        uint32 _lastRaffleTicketIdBefore,\\n        uint256 _potLimit,\\n        uint256 _currentPotSize\\n    ) internal {\\n        uint32 _potTicketIdEnd = _calculateTicketIdEnd(_lastRaffleTicketIdBefore);\\n        potTicketIdEnd = _potTicketIdEnd;\\n        potTicketIdStart = nextPotTicketIdStart; \\n        nextPotTicketIdStart = _potTicketIdEnd + 1; // starting ticket of the next Pot\\n        // The remainder goes to the next pot\\n        currentPotSize = (_currentPotSize + potValueDelta) % _potLimit; \\n        _requestRandomWinners();\\n    }\\n\\n    function _requestRandomWinners() internal {\\n        uint32 _gasLimit = callbackGasLimit;\\n        require(_gasLimit > 0, \\\"Gas limit not specified\\\");\\n        uint256 requestId = requestRandomness(_gasLimit, 3, 1); // TODO if you deploy on Polygon, increase confirmation blocks (check out reorgs)\\n        chainlinkRequests[requestId].exists = true;\\n        lastRequestId = requestId;\\n        requestIds.push(requestId);\\n        emit RandomWordRequested(requestId, potTicketIdStart, potTicketIdEnd);\\n    }\\n\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n        uint256 randomWord = _randomWords[0];\\n        uint32 rangeFrom = potTicketIdStart;\\n        uint32 rangeTo = potTicketIdEnd;\\n\\n        chainlinkRequests[_requestId] = RequestStatus({\\n            fullfilled: true,\\n            exists: true,\\n            randomWord: randomWord\\n        });\\n\\n        uint256 n_winners = numberOfWinners;\\n        uint32[] memory derivedRandomWords = new uint32[](n_winners);\\n        derivedRandomWords[0] = _normalizeValueToRange(randomWord, rangeFrom, rangeTo);\\n        uint256 nextRandom;\\n        uint32 nextRandomNormalized;\\n        for (uint256 i = 1; i < n_winners; i++) {\\n            nextRandom = uint256(keccak256(abi.encode(randomWord, i)));\\n            nextRandomNormalized = _normalizeValueToRange(nextRandom, rangeFrom, rangeTo);\\n            derivedRandomWords[i] = _incrementRandomValueUntilUnique(\\n                nextRandomNormalized,\\n                derivedRandomWords,\\n                rangeFrom,\\n                rangeTo\\n            );\\n        }\\n\\n        winningTicketIds[currentPotId] = derivedRandomWords;\\n        emit RandomnessFulfilled(currentPotId, randomWord);\\n        currentPotId++;\\n    }\\n\\n    function _normalizeValueToRange(\\n        uint256 _value, uint32 _rangeFrom, uint32 _rangeTo\\n    ) internal pure returns(uint32 _scaledValue) {\\n        _scaledValue = uint32(_value) % (_rangeTo - _rangeFrom) + _rangeFrom; // from <= x <= to\\n    }\\n\\n    function _incrementRandomValueUntilUnique(\\n        uint32 _random, \\n        uint32[] memory _randomWords, \\n        uint32 _rangeFrom,\\n        uint32 _rangeTo\\n    ) internal pure returns(uint32 _uniqueRandom) {\\n        _uniqueRandom = _random;\\n        for(uint i = 0; i < _randomWords.length;) {\\n            if(_uniqueRandom == _randomWords[i]) {\\n                unchecked {\\n                    _uniqueRandom = _normalizeValueToRange(\\n                        _uniqueRandom + 1,\\n                        _rangeFrom,\\n                        _rangeTo\\n                    );\\n                    i = 0;\\n                }\\n            }\\n            else {\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"marketplace-contracts-dev/contracts/interface/IHotpot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IHotpot {\\r\\n    struct Prize {\\r\\n        uint128 amount;\\r\\n        uint128 deadline;\\r\\n    }\\r\\n\\r\\n    struct InitializeParams {\\r\\n        uint256 potLimit;\\r\\n        uint256 raffleTicketCost;\\r\\n        uint128 claimWindow;\\r\\n        uint16 numberOfWinners;\\r\\n        uint16 fee;\\r\\n        uint16 tradeFee;\\r\\n        address marketplace;\\r\\n        address operator;\\r\\n    }\\r\\n\\r\\n    struct RequestStatus {\\r\\n        bool fullfilled;\\r\\n        bool exists;\\r\\n        uint256 randomWord;\\r\\n    }\\r\\n\\r\\n    struct BatchTradeParams {\\r\\n        uint256 _amountInWei; \\r\\n        uint16 _sellerIndex;\\r\\n        uint256 _buyerPendingAmount; \\r\\n        uint256 _sellerPendingAmount;\\r\\n    }\\r\\n\\r\\n\\tevent GenerateRaffleTickets(\\r\\n\\t\\taddress indexed _buyer,\\r\\n\\t\\taddress indexed _seller, \\r\\n\\t\\tuint32 _buyerTicketIdStart,\\r\\n\\t\\tuint32 _buyerTicketIdEnd,\\r\\n\\t\\tuint32 _sellerTicketIdStart,\\r\\n\\t\\tuint32 _sellerTicketIdEnd,\\r\\n\\t\\tuint256 _buyerPendingAmount,\\r\\n\\t\\tuint256 _sellerPendingAmount\\r\\n\\t);\\r\\n    event WinnersAssigned(address[] _winners);\\r\\n    event RandomWordRequested(\\r\\n        uint256 requestId, \\r\\n        uint32 fromTicketId, \\r\\n        uint32 toTicketId \\r\\n    );\\r\\n    event RandomnessFulfilled(\\r\\n        uint16 indexed potId, \\r\\n        uint256 randomWord\\r\\n    );\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n    event MarketplaceUpdated(address _newMarketplace);\\r\\n    event OperatorUpdated(address _newOperator);\\r\\n    event AirdropAddressUpdated(address _newAidrop);\\r\\n    event PrizeAmountsUpdated(uint128[] _newPrizeAmounts);\\r\\n    event NumberOfWinnersUpdated(uint16 _nOfWinners);\\r\\n    event GenerateAirdropTickets(\\r\\n        address indexed user, \\r\\n        uint32 ticketIdStart,\\r\\n        uint32 ticketIdEnd\\r\\n    );\\r\\n    event CallbackGasLimitUpdated(uint32 _callbackGasLimit);\\r\\n\\r\\n    function initialize(address _owner, InitializeParams calldata params) external;\\r\\n\\r\\n    function executeTrade(\\r\\n        uint256 _amount, \\r\\n        address _buyer, \\r\\n        address _seller, \\r\\n        uint256 _buyerPendingAmount, \\r\\n        uint256 _sellerPendingAmount\\r\\n    ) external payable;\\r\\n\\r\\n    function batchExecuteTrade(\\r\\n        address buyer,\\r\\n        BatchTradeParams[] memory trades,\\r\\n        address[] memory sellers\\r\\n    ) external payable;\\r\\n\\r\\n    function executeRaffle(address[] calldata _winners) external;\\r\\n\\r\\n    function claim() external;\\r\\n    function claimAirdropTickets(address user, uint32 tickets) external;\\r\\n    function setTradeFee(uint16 _newTradeFee) external;\\r\\n    function setOperator(address _newOperator) external;\\r\\n    function updatePrizeAmounts(uint128[] memory _newPrizeAmounts) external;\\r\\n    function marketplace() external returns(address);\\r\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFV2WrapperConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  LinkTokenInterface internal immutable LINK;\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfV2Wrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAidrop\",\"type\":\"address\"}],\"name\":\"AirdropAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"CallbackGasLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ticketIdStart\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"ticketIdEnd\",\"type\":\"uint32\"}],\"name\":\"GenerateAirdropTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_buyerTicketIdStart\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_buyerTicketIdEnd\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_sellerTicketIdStart\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_sellerTicketIdEnd\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyerPendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellerPendingAmount\",\"type\":\"uint256\"}],\"name\":\"GenerateRaffleTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMarketplace\",\"type\":\"address\"}],\"name\":\"MarketplaceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_nOfWinners\",\"type\":\"uint16\"}],\"name\":\"NumberOfWinnersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"OperatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"_newPrizeAmounts\",\"type\":\"uint128[]\"}],\"name\":\"PrizeAmountsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fromTicketId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"toTicketId\",\"type\":\"uint32\"}],\"name\":\"RandomWordRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"potId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"name\":\"RandomnessFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"name\":\"WinnersAssigned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_amountInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_sellerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_buyerPendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellerPendingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IHotpot.BatchTradeParams[]\",\"name\":\"trades\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"sellers\",\"type\":\"address[]\"}],\"name\":\"batchExecuteTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainlinkRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fullfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"tickets\",\"type\":\"uint32\"}],\"name\":\"claimAirdropTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimablePrizes\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deadline\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPotId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPotSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"name\":\"executeRaffle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyerPendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellerPendingAmount\",\"type\":\"uint256\"}],\"name\":\"executeTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_potId\",\"type\":\"uint16\"}],\"name\":\"getWinningTicketIds\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"potLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleTicketCost\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"claimWindow\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"numberOfWinners\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"tradeFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"marketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"internalType\":\"struct IHotpot.InitializeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRaffleTicketId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPotTicketIdStart\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potTicketIdEnd\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potTicketIdStart\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"prizeAmounts\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raffleTicketCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAirdropContract\",\"type\":\"address\"}],\"name\":\"setAirdropContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setChainlinkGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketplace\",\"type\":\"address\"}],\"name\":\"setMarketplace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPotLimit\",\"type\":\"uint256\"}],\"name\":\"setPotLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRaffleTicketCost\",\"type\":\"uint256\"}],\"name\":\"setRaffleTicketCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newTradeFee\",\"type\":\"uint16\"}],\"name\":\"setTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_nOfWinners\",\"type\":\"uint16\"}],\"name\":\"updateNumberOfWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"_newPrizeAmounts\",\"type\":\"uint128[]\"}],\"name\":\"updatePrizeAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winningTicketIds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Hotpot", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000514910771af9ca656af840dff83e8264ecf986ca0000000000000000000000005a861794b927983406fce1d062e00b9368d97df6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}