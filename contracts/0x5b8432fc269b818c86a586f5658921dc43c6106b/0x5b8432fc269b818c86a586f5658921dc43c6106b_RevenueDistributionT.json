{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\n/// @title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.\\r\\ninterface IERC20 {\\r\\n\\r\\n    /**************/\\r\\n    /*** Events ***/\\r\\n    /**************/\\r\\n\\r\\n    /**\\r\\n     *  @dev   Emitted when one account has set the allowance of another account over their tokens.\\r\\n     *  @param owner_   Account that tokens are approved from.\\r\\n     *  @param spender_ Account that tokens are approved for.\\r\\n     *  @param amount_  Amount of tokens that have been approved.\\r\\n     */\\r\\n    event Approval(address indexed owner_, address indexed spender_, uint256 amount_);\\r\\n\\r\\n    /**\\r\\n     *  @dev   Emitted when tokens have moved from one account to another.\\r\\n     *  @param owner_     Account that tokens have moved from.\\r\\n     *  @param recipient_ Account that tokens have moved to.\\r\\n     *  @param amount_    Amount of tokens that have been transferred.\\r\\n     */\\r\\n    event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);\\r\\n\\r\\n    /**************************/\\r\\n    /*** External Functions ***/\\r\\n    /**************************/\\r\\n\\r\\n    /**\\r\\n     *  @dev    Function that allows one account to set the allowance of another account over their tokens.\\r\\n     *          Emits an {Approval} event.\\r\\n     *  @param  spender_ Account that tokens are approved for.\\r\\n     *  @param  amount_  Amount of tokens that have been approved.\\r\\n     *  @return success_ Boolean indicating whether the operation succeeded.\\r\\n     */\\r\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Function that allows one account to decrease the allowance of another account over their tokens.\\r\\n     *          Emits an {Approval} event.\\r\\n     *  @param  spender_          Account that tokens are approved for.\\r\\n     *  @param  subtractedAmount_ Amount to decrease approval by.\\r\\n     *  @return success_          Boolean indicating whether the operation succeeded.\\r\\n     */\\r\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external returns (bool success_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Function that allows one account to increase the allowance of another account over their tokens.\\r\\n     *          Emits an {Approval} event.\\r\\n     *  @param  spender_     Account that tokens are approved for.\\r\\n     *  @param  addedAmount_ Amount to increase approval by.\\r\\n     *  @return success_     Boolean indicating whether the operation succeeded.\\r\\n     */\\r\\n    function increaseAllowance(address spender_, uint256 addedAmount_) external returns (bool success_);\\r\\n\\r\\n    /**\\r\\n     *  @dev   Approve by signature.\\r\\n     *  @param owner_    Owner address that signed the permit.\\r\\n     *  @param spender_  Spender of the permit.\\r\\n     *  @param amount_   Permit approval spend limit.\\r\\n     *  @param deadline_ Deadline after which the permit is invalid.\\r\\n     *  @param v_        ECDSA signature v component.\\r\\n     *  @param r_        ECDSA signature r component.\\r\\n     *  @param s_        ECDSA signature s component.\\r\\n     */\\r\\n    function permit(address owner_, address spender_, uint amount_, uint deadline_, uint8 v_, bytes32 r_, bytes32 s_) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev    Moves an amount of tokens from `msg.sender` to a specified account.\\r\\n     *          Emits a {Transfer} event.\\r\\n     *  @param  recipient_ Account that receives tokens.\\r\\n     *  @param  amount_    Amount of tokens that are transferred.\\r\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\r\\n     */\\r\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\\r\\n     *          Emits a {Transfer} event.\\r\\n     *          Emits an {Approval} event.\\r\\n     *  @param  owner_     Account that tokens are moving from.\\r\\n     *  @param  recipient_ Account that receives tokens.\\r\\n     *  @param  amount_    Amount of tokens that are transferred.\\r\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\r\\n     */\\r\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\r\\n\\r\\n    /**********************/\\r\\n    /*** View Functions ***/\\r\\n    /**********************/\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the allowance that one account has given another over their tokens.\\r\\n     *  @param  owner_     Account that tokens are approved from.\\r\\n     *  @param  spender_   Account that tokens are approved for.\\r\\n     *  @return allowance_ Allowance that one account has given another over their tokens.\\r\\n     */\\r\\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the amount of tokens owned by a given account.\\r\\n     *  @param  account_ Account that owns the tokens.\\r\\n     *  @return balance_ Amount of tokens owned by a given account.\\r\\n     */\\r\\n    function balanceOf(address account_) external view returns (uint256 balance_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the decimal precision used by the token.\\r\\n     *  @return decimals_ The decimal precision used by the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8 decimals_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the signature domain separator.\\r\\n     *  @return domainSeparator_ The signature domain separator.\\r\\n     */\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the name of the token.\\r\\n     *  @return name_ The name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory name_);\\r\\n\\r\\n    /**\\r\\n      *  @dev    Returns the nonce for the given owner.\\r\\n      *  @param  owner_  The address of the owner account.\\r\\n      *  @return nonce_ The nonce for the given owner.\\r\\n     */\\r\\n    function nonces(address owner_) external view returns (uint256 nonce_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the permit type hash.\\r\\n     *  @return permitTypehash_ The permit type hash.\\r\\n     */\\r\\n    function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the symbol of the token.\\r\\n     *  @return symbol_ The symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory symbol_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the total amount of tokens in existence.\\r\\n     *  @return totalSupply_ The total amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256 totalSupply_);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Like.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\n/// @title Interface of the ERC20 standard as needed by ERC20Helper.\\r\\ninterface IERC20Like {\\r\\n\\r\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\r\\n\\r\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\r\\n\\r\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\r\\n\\r\\n/// @title A standard for tokenized Vaults with a single underlying ERC-20 token.\\r\\ninterface IERC4626 is IERC20 {\\r\\n\\r\\n    /**************/\\r\\n    /*** Events ***/\\r\\n    /**************/\\r\\n\\r\\n    /**\\r\\n     *  @dev   `caller_` has exchanged `assets_` for `shares_` and transferred them to `owner_`.\\r\\n     *         MUST be emitted when assets are deposited via the `deposit` or `mint` methods.\\r\\n     *  @param caller_ The caller of the function that emitted the `Deposit` event.\\r\\n     *  @param owner_  The owner of the shares.\\r\\n     *  @param assets_ The amount of assets deposited.\\r\\n     *  @param shares_ The amount of shares minted.\\r\\n     */\\r\\n    event Deposit(address indexed caller_, address indexed owner_, uint256 assets_, uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev   `caller_`\u00a0has exchanged\u00a0`shares_`, owned by\u00a0`owner_`, for\u00a0`assets_`, and transferred them\u00a0to\u00a0`receiver_`.\\r\\n     *         MUST be emitted when assets are withdrawn via the\u00a0`withdraw`\u00a0or\u00a0`redeem`\u00a0methods.\\r\\n     *  @param caller_   The caller of the function that emitted the `Withdraw` event.\\r\\n     *  @param receiver_ The receiver of the assets.\\r\\n     *  @param owner_    The owner of the shares.\\r\\n     *  @param assets_   The amount of assets withdrawn.\\r\\n     *  @param shares_   The amount of shares burned.\\r\\n     */\\r\\n    event Withdraw(address indexed caller_, address indexed receiver_, address indexed owner_, uint256 assets_, uint256 shares_);\\r\\n\\r\\n    /***********************/\\r\\n    /*** State Variables ***/\\r\\n    /***********************/\\r\\n\\r\\n    /**\\r\\n     *  @dev    The address of the underlying asset used by the Vault.\\r\\n     *          MUST be a contract that implements the ERC-20 standard.\\r\\n     *          MUST NOT revert.\\r\\n     *  @return asset_ The address of the underlying asset.\\r\\n     */\\r\\n    function asset() external view returns (address asset_);\\r\\n\\r\\n    /********************************/\\r\\n    /*** State Changing Functions ***/\\r\\n    /********************************/\\r\\n\\r\\n    /**\\r\\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\\r\\n     *          MUST emit the {Deposit} event.\\r\\n     *          MUST revert if all of the assets cannot be deposited (due to insufficient approval, deposit limits, slippage, etc).\\r\\n     *  @param  assets_   The amount of assets to deposit.\\r\\n     *  @param  receiver_ The receiver of the shares.\\r\\n     *  @return shares_   The amount of shares minted.\\r\\n     */\\r\\n    function deposit(uint256 assets_, address receiver_) external returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Mints `shares_` to `receiver_` by depositing `assets_` into the Vault.\\r\\n     *          MUST emit the {Deposit} event.\\r\\n     *          MUST revert if all of shares cannot be minted (due to insufficient approval, deposit limits, slippage, etc).\\r\\n     *  @param  shares_   The amount of shares to mint.\\r\\n     *  @param  receiver_ The receiver of the shares.\\r\\n     *  @return assets_   The amount of assets deposited.\\r\\n     */\\r\\n    function mint(uint256 shares_, address receiver_) external returns (uint256 assets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Burns\u00a0`shares_`\u00a0from\u00a0`owner_`\u00a0and sends\u00a0`assets_` to\u00a0`receiver_`.\\r\\n     *          MUST emit the\u00a0{Withdraw}\u00a0event.\\r\\n     *          MUST revert if all of\u00a0the shares\u00a0cannot be redeemed (due to insufficient shares, withdrawal limits, slippage, etc).\\r\\n     *  @param  shares_   The amount of shares to redeem.\\r\\n     *  @param  receiver_ The receiver of the assets.\\r\\n     *  @param  owner_    The owner of the shares.\\r\\n     *  @return assets_   The amount of assets sent to the receiver.\\r\\n     */\\r\\n    function redeem(uint256 shares_, address receiver_, address owner_) external returns (uint256 assets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Burns\u00a0`shares_`\u00a0from\u00a0`owner_`\u00a0and sends `assets_`\u00a0to `receiver_`.\\r\\n     *          MUST emit the\u00a0{Withdraw}\u00a0event.\\r\\n     *          MUST revert if all of\u00a0the assets\u00a0cannot be withdrawn (due to insufficient assets, withdrawal limits, slippage, etc).\\r\\n     *  @param  assets_   The amount of assets to withdraw.\\r\\n     *  @param  receiver_ The receiver of the assets.\\r\\n     *  @param  owner_    The owner of the assets.\\r\\n     *  @return shares_   The amount of shares burned from the owner.\\r\\n     */\\r\\n    function withdraw(uint256 assets_, address receiver_, address owner_) external returns (uint256 shares_);\\r\\n\\r\\n    /**********************/\\r\\n    /*** View Functions ***/\\r\\n    /**********************/\\r\\n\\r\\n    /**\\r\\n     *  @dev    The amount of `assets_` the `shares_` are currently equivalent to.\\r\\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\r\\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\\r\\n     *          MUST NOT show any variations depending on the caller.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  shares_ The amount of shares to convert.\\r\\n     *  @return assets_ The amount of equivalent assets.\\r\\n     */\\r\\n    function convertToAssets(uint256 shares_) external view returns (uint256 assets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    The amount of `shares_` the `assets_` are currently equivalent to.\\r\\n     *          MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\r\\n     *          MUST NOT reflect slippage or other on-chain conditions when performing the actual exchange.\\r\\n     *          MUST NOT show any variations depending on the caller.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  assets_ The amount of assets to convert.\\r\\n     *  @return shares_ The amount of equivalent shares.\\r\\n     */\\r\\n    function convertToShares(uint256 assets_) external view returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Maximum amount of `assets_` that can be deposited on behalf of the `receiver_` through a `deposit` call.\\r\\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  receiver_ The receiver of the assets.\\r\\n     *  @return assets_   The maximum amount of assets that can be deposited.\\r\\n     */\\r\\n    function maxDeposit(address receiver_) external view returns (uint256 assets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Maximum amount of `shares_` that can be minted on behalf of the `receiver_` through a `mint` call.\\r\\n     *          MUST return a limited value if the receiver is subject to any limits, or the maximum value otherwise.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  receiver_ The receiver of the shares.\\r\\n     *  @return shares_   The maximum amount of shares that can be minted.\\r\\n     */\\r\\n    function maxMint(address receiver_) external view returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Maximum amount of `shares_` that can be redeemed from the\u00a0`owner_` through a\u00a0`redeem`\u00a0call.\\r\\n     *          MUST return a limited value if\u00a0the owner\u00a0is subject to any limits, or the total amount of owned shares otherwise.\\r\\n     *          MUST\u00a0NOT\u00a0revert.\\r\\n     *  @param  owner_  The owner of the shares.\\r\\n     *  @return shares_ The maximum amount of shares that can be redeemed.\\r\\n     */\\r\\n    function maxRedeem(address owner_) external view returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Maximum amount of `assets_` that can be withdrawn from the `owner_` through a `withdraw` call.\\r\\n     *          MUST return a limited value if the owner is subject to any limits, or the total amount of owned assets otherwise.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  owner_  The owner of the assets.\\r\\n     *  @return assets_ The maximum amount of assets that can be withdrawn.\\r\\n     */\\r\\n    function maxWithdraw(address owner_) external view returns (uint256 assets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\\r\\n     *          MUST return as close to and no more than the exact amount of shares that would be minted in a `deposit` call in the same transaction.\\r\\n     *          MUST NOT account for deposit limits like those returned from `maxDeposit` and should always act as though the deposit would be accepted.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  assets_ The amount of assets to deposit.\\r\\n     *  @return shares_ The amount of shares that would be minted.\\r\\n     */\\r\\n    function previewDeposit(uint256 assets_) external view returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\\r\\n     *          MUST return as close to and no fewer than the exact amount of assets that would be deposited in a `mint` call in the same transaction.\\r\\n     *          MUST NOT account for mint limits like those returned from `maxMint` and should always act as though the minting would be accepted.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  shares_ The amount of shares to mint.\\r\\n     *  @return assets_ The amount of assets that would be deposited.\\r\\n     */\\r\\n    function previewMint(uint256 shares_) external view returns (uint256 assets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.\\r\\n     *          MUST return as close to and no more than the exact amount of assets that would be withdrawn in a\u00a0`redeem`\u00a0call in the same transaction.\\r\\n     *          MUST NOT account for redemption limits like those returned from `maxRedeem` and should always act as though the redemption would be accepted.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  shares_ The amount of shares to redeem.\\r\\n     *  @return assets_ The amount of assets that would be withdrawn.\\r\\n     */\\r\\n    function previewRedeem(uint256 shares_) external view returns (uint256 assets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.\\r\\n     *          MUST return as close to and no fewer than the exact amount of shares that would be burned in a\u00a0`withdraw`\u00a0call in the same transaction.\\r\\n     *          MUST NOT account for withdrawal limits like those returned from `maxWithdraw` and should always act as though the withdrawal would be accepted.\\r\\n     *          MUST NOT revert.\\r\\n     *  @param  assets_ The amount of assets to withdraw.\\r\\n     *  @return shares_ The amount of shares that would be redeemed.\\r\\n     */\\r\\n    function previewWithdraw(uint256 assets_) external view returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Total amount of the underlying asset that is managed by the Vault.\\r\\n     *          SHOULD include compounding that occurs from any yields.\\r\\n     *          MUST NOT revert.\\r\\n     *  @return totalAssets_ The total amount of assets the Vault manages.\\r\\n     */\\r\\n    function totalAssets() external view returns (uint256 totalAssets_);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IRevenueDistributionToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { IERC20 } from \\\"./IERC20.sol\\\";\\r\\n\\r\\nimport { IERC4626 } from \\\"./IERC4626.sol\\\";\\r\\n\\r\\n/// @title A token that represents ownership of future revenues distributed linearly over time.\\r\\ninterface IRevenueDistributionToken is IERC20, IERC4626 {\\r\\n\\r\\n    /**************/\\r\\n    /*** Events ***/\\r\\n    /**************/\\r\\n\\r\\n    /**\\r\\n     *  @dev   Issuance parameters have been updated after a `_mint` or `_burn`.\\r\\n     *  @param freeAssets_   Resulting `freeAssets` (y-intercept) value after accounting update.\\r\\n     *  @param issuanceRate_ The new issuance rate of `asset` until `vestingPeriodFinish_`.\\r\\n     */\\r\\n    event IssuanceParamsUpdated(uint256 freeAssets_, uint256 issuanceRate_);\\r\\n\\r\\n    /**\\r\\n     *  @dev   `newOwner_` has accepted the transferral of RDT ownership from `previousOwner_`.\\r\\n     *  @param previousOwner_ The previous RDT owner.\\r\\n     *  @param newOwner_      The new RDT owner.\\r\\n     */\\r\\n    event OwnershipAccepted(address indexed previousOwner_, address indexed newOwner_);\\r\\n\\r\\n    /**\\r\\n     *  @dev   `owner_` has set the new pending owner of RDT to `pendingOwner_`.\\r\\n     *  @param owner_        The current RDT owner.\\r\\n     *  @param pendingOwner_ The new pending RDT owner.\\r\\n     */\\r\\n    event PendingOwnerSet(address indexed owner_, address indexed pendingOwner_);\\r\\n\\r\\n    /**\\r\\n     *  @dev   `owner_` has updated the RDT vesting schedule to end at `vestingPeriodFinish_`.\\r\\n     *  @param owner_               The current RDT owner.\\r\\n     *  @param vestingPeriodFinish_ When the unvested balance will finish vesting.\\r\\n     */\\r\\n    event VestingScheduleUpdated(address indexed owner_, uint256 vestingPeriodFinish_);\\r\\n\\r\\n    /***********************/\\r\\n    /*** State Variables ***/\\r\\n    /***********************/\\r\\n\\r\\n    /**\\r\\n     *  @dev The total amount of the underlying asset that is currently unlocked and is not time-dependent.\\r\\n     *       Analogous to the y-intercept in a linear function.\\r\\n     */\\r\\n    function freeAssets() external view returns (uint256 freeAssets_);\\r\\n\\r\\n    /**\\r\\n     *  @dev The rate of issuance of the vesting schedule that is currently active.\\r\\n     *       Denominated as the amount of underlying assets vesting per second.\\r\\n     */\\r\\n    function issuanceRate() external view returns (uint256 issuanceRate_);\\r\\n\\r\\n    /**\\r\\n     *  @dev The timestamp of when the linear function was last recalculated.\\r\\n     *       Analogous to t0 in a linear function.\\r\\n     */\\r\\n    function lastUpdated() external view returns (uint256 lastUpdated_);\\r\\n\\r\\n    /**\\r\\n     *  @dev The address of the account that is allowed to update the vesting schedule.\\r\\n     */\\r\\n    function owner() external view returns (address owner_);\\r\\n\\r\\n    /**\\r\\n     *  @dev The next owner, nominated by the current owner.\\r\\n     */\\r\\n    function pendingOwner() external view returns (address pendingOwner_);\\r\\n\\r\\n    /**\\r\\n     *  @dev The precision at which the issuance rate is measured.\\r\\n     */\\r\\n    function precision() external view returns (uint256 precision_);\\r\\n\\r\\n    /**\\r\\n     *  @dev The end of the current vesting schedule.\\r\\n     */\\r\\n    function vestingPeriodFinish() external view returns (uint256 vestingPeriodFinish_);\\r\\n\\r\\n    /********************************/\\r\\n    /*** Administrative Functions ***/\\r\\n    /********************************/\\r\\n\\r\\n    /**\\r\\n     *  @dev Sets the pending owner as the new owner.\\r\\n     *       Can be called only by the pending owner, and only after their nomination by the current owner.\\r\\n     */\\r\\n    function acceptOwnership() external;\\r\\n\\r\\n    /**\\r\\n     *  @dev   Sets a new address as the pending owner.\\r\\n     *  @param pendingOwner_ The address of the next potential owner.\\r\\n     */\\r\\n    function setPendingOwner(address pendingOwner_) external;\\r\\n\\r\\n    /**\\r\\n     *  @dev    Updates the current vesting formula based on the amount of total unvested funds in the contract and the new `vestingPeriod_`.\\r\\n     *  @param  vestingPeriod_ The amount of time over which all currently unaccounted underlying assets will be vested over.\\r\\n     *  @return issuanceRate_  The new issuance rate.\\r\\n     *  @return freeAssets_    The new amount of underlying assets that are unlocked.\\r\\n     */\\r\\n    function updateVestingSchedule(uint256 vestingPeriod_) external returns (uint256 issuanceRate_, uint256 freeAssets_);\\r\\n\\r\\n    /************************/\\r\\n    /*** Staker Functions ***/\\r\\n    /************************/\\r\\n\\r\\n    /**\\r\\n     *  @dev    Does a ERC4626 `deposit` with a ERC-2612 `permit`.\\r\\n     *  @param  assets_   The amount of `asset` to deposit.\\r\\n     *  @param  receiver_ The receiver of the shares.\\r\\n     *  @param  deadline_ The timestamp after which the `permit` signature is no longer valid.\\r\\n     *  @param  v_        ECDSA signature v component.\\r\\n     *  @param  r_        ECDSA signature r component.\\r\\n     *  @param  s_        ECDSA signature s component.\\r\\n     *  @return shares_   The amount of shares minted.\\r\\n     */\\r\\n    function depositWithPermit(uint256 assets_, address receiver_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     *  @dev    Does a ERC4626 `mint` with a ERC-2612 `permit`.\\r\\n     *  @param  shares_    The amount of `shares` to mint.\\r\\n     *  @param  receiver_  The receiver of the shares.\\r\\n     *  @param  maxAssets_ The maximum amount of assets that can be taken, as per the permit.\\r\\n     *  @param  deadline_  The timestamp after which the `permit` signature is no longer valid.\\r\\n     *  @param  v_         ECDSA signature v component.\\r\\n     *  @param  r_         ECDSA signature r component.\\r\\n     *  @param  s_         ECDSA signature s component.\\r\\n     *  @return assets_    The amount of shares deposited.\\r\\n     */\\r\\n    function mintWithPermit(uint256 shares_, address receiver_, uint256 maxAssets_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external returns (uint256 assets_);\\r\\n\\r\\n\\r\\n    /**********************/\\r\\n    /*** View Functions ***/\\r\\n    /**********************/\\r\\n\\r\\n    /**\\r\\n     *  @dev    Returns the amount of underlying assets owned by the specified account.\\r\\n     *  @param  account_ Address of the account.\\r\\n     *  @return assets_  Amount of assets owned.\\r\\n     */\\r\\n    function balanceOfAssets(address account_) external view returns (uint256 assets_);\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\r\\n\\r\\n/*\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551          \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551\\r\\n    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551         \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\r\\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\\r\\n*/\\r\\n\\r\\n/**\\r\\n *  @title Modern ERC-20 implementation.\\r\\n *  @dev   Acknowledgements to Solmate, OpenZeppelin, and DSS for inspiring this code.\\r\\n */\\r\\ncontract ERC20 is IERC20 {\\r\\n\\r\\n    /**************/\\r\\n    /*** ERC-20 ***/\\r\\n    /**************/\\r\\n\\r\\n    string public override name;\\r\\n    string public override symbol;\\r\\n\\r\\n    uint8 public immutable override decimals;\\r\\n\\r\\n    uint256 public override totalSupply;\\r\\n\\r\\n    mapping(address => uint256) public override balanceOf;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public override allowance;\\r\\n\\r\\n    /****************/\\r\\n    /*** ERC-2612 ***/\\r\\n    /****************/\\r\\n\\r\\n    // PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n\\r\\n    mapping(address => uint256) public override nonces;\\r\\n\\r\\n    /**\\r\\n     *  @param name_     The name of the token.\\r\\n     *  @param symbol_   The symbol of the token.\\r\\n     *  @param decimals_ The decimal precision used by the token.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        name     = name_;\\r\\n        symbol   = symbol_;\\r\\n        decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**************************/\\r\\n    /*** External Functions ***/\\r\\n    /**************************/\\r\\n\\r\\n    function approve(address spender_, uint256 amount_) external override returns (bool success_) {\\r\\n        _approve(msg.sender, spender_, amount_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external override returns (bool success_) {\\r\\n        _decreaseAllowance(msg.sender, spender_, subtractedAmount_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender_, uint256 addedAmount_) external override returns (bool success_) {\\r\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedAmount_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\\r\\n        require(deadline_ >= block.timestamp, \\\"ERC20:P:EXPIRED\\\");\\r\\n\\r\\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\r\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\\r\\n        require(\\r\\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\\r\\n            (v_ == 27 || v_ == 28),\\r\\n            \\\"ERC20:P:MALLEABLE\\\"\\r\\n        );\\r\\n\\r\\n        // Nonce realistically cannot overflow.\\r\\n        unchecked {\\r\\n            bytes32 digest = keccak256(\\r\\n                abi.encodePacked(\\r\\n                    \\\"\\\\x19\\\\x01\\\",\\r\\n                    DOMAIN_SEPARATOR(),\\r\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\\r\\n                )\\r\\n            );\\r\\n\\r\\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\\r\\n\\r\\n            require(recoveredAddress == owner_ && owner_ != address(0), \\\"ERC20:P:INVALID_SIGNATURE\\\");\\r\\n        }\\r\\n\\r\\n        _approve(owner_, spender_, amount_);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient_, uint256 amount_) external override returns (bool success_) {\\r\\n        _transfer(msg.sender, recipient_, amount_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\\r\\n        _decreaseAllowance(owner_, msg.sender, amount_);\\r\\n        _transfer(owner_, recipient_, amount_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**********************/\\r\\n    /*** View Functions ***/\\r\\n    /**********************/\\r\\n\\r\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32 domainSeparator_) {\\r\\n        return keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n                keccak256(bytes(name)),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                block.chainid,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**************************/\\r\\n    /*** Internal Functions ***/\\r\\n    /**************************/\\r\\n\\r\\n    function _approve(address owner_, address spender_, uint256 amount_) internal {\\r\\n        emit Approval(owner_, spender_, allowance[owner_][spender_] = amount_);\\r\\n    }\\r\\n\\r\\n    function _burn(address owner_, uint256 amount_) internal {\\r\\n        balanceOf[owner_] -= amount_;\\r\\n\\r\\n        // Cannot underflow because a user's balance will never be larger than the total supply.\\r\\n        unchecked { totalSupply -= amount_; }\\r\\n\\r\\n        emit Transfer(owner_, address(0), amount_);\\r\\n    }\\r\\n\\r\\n    function _decreaseAllowance(address owner_, address spender_, uint256 subtractedAmount_) internal {\\r\\n        uint256 spenderAllowance = allowance[owner_][spender_];  // Cache to memory.\\r\\n\\r\\n        if (spenderAllowance != type(uint256).max) {\\r\\n            _approve(owner_, spender_, spenderAllowance - subtractedAmount_);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mint(address recipient_, uint256 amount_) internal {\\r\\n        totalSupply += amount_;\\r\\n\\r\\n        // Cannot overflow because totalSupply would first overflow in the statement above.\\r\\n        unchecked { balanceOf[recipient_] += amount_; }\\r\\n\\r\\n        emit Transfer(address(0), recipient_, amount_);\\r\\n    }\\r\\n\\r\\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal {\\r\\n        balanceOf[owner_] -= amount_;\\r\\n\\r\\n        // Cannot overflow because minting prevents overflow of totalSupply, and sum of user balances == totalSupply.\\r\\n        unchecked { balanceOf[recipient_] += amount_; }\\r\\n\\r\\n        emit Transfer(owner_, recipient_, amount_);\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/tokens/ERC20Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport { IERC20Like } from \\\"../interfaces/IERC20Like.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Small Library to standardize erc20 token interactions.\\r\\n */\\r\\nlibrary ERC20Helper {\\r\\n\\r\\n    /**************************/\\r\\n    /*** Internal Functions ***/\\r\\n    /**************************/\\r\\n\\r\\n    function transfer(address token_, address to_, uint256 amount_) internal returns (bool success_) {\\r\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transfer.selector, to_, amount_));\\r\\n    }\\r\\n\\r\\n    function transferFrom(address token_, address from_, address to_, uint256 amount_) internal returns (bool success_) {\\r\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.transferFrom.selector, from_, to_, amount_));\\r\\n    }\\r\\n\\r\\n    function approve(address token_, address spender_, uint256 amount_) internal returns (bool success_) {\\r\\n        // If setting approval to zero fails, return false.\\r\\n        if (!_call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, uint256(0)))) return false;\\r\\n\\r\\n        // If `amount_` is zero, return true as the previous step already did this.\\r\\n        if (amount_ == uint256(0)) return true;\\r\\n\\r\\n        // Return the result of setting the approval to `amount_`.\\r\\n        return _call(token_, abi.encodeWithSelector(IERC20Like.approve.selector, spender_, amount_));\\r\\n    }\\r\\n\\r\\n    function _call(address token_, bytes memory data_) private returns (bool success_) {\\r\\n        if (token_.code.length == uint256(0)) return false;\\r\\n\\r\\n        bytes memory returnData;\\r\\n        ( success_, returnData ) = token_.call(data_);\\r\\n\\r\\n        return success_ && (returnData.length == uint256(0) || abi.decode(returnData, (bool)));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.8.18;\\r\\n\\r\\nimport { ERC20 }       from \\\"./tokens/ERC20.sol\\\";\\r\\nimport { ERC20Helper } from \\\"./tokens/ERC20Helper.sol\\\";\\r\\n\\r\\nimport { IRevenueDistributionToken } from \\\"./interfaces/IRevenueDistributionToken.sol\\\";\\r\\n\\r\\n/*\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\\r\\n    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\\r\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\r\\n    \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551   \u2588\u2588\u2551\\r\\n    \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d   \u2588\u2588\u2551\\r\\n    \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u255d\\r\\n*/\\r\\n\\r\\ncontract RevenueDistributionToken is IRevenueDistributionToken, ERC20 {\\r\\n\\r\\n    uint256 public immutable override precision;  // Precision of rates, equals max deposit amounts before rounding errors occur\\r\\n\\r\\n    address public override asset;  // Underlying ERC-20 asset used by ERC-4626 functionality.\\r\\n\\r\\n    address public override owner;         // Current owner of the contract, able to update the vesting schedule.\\r\\n    address public override pendingOwner;  // Pending owner of the contract, able to accept ownership.\\r\\n\\r\\n    uint256 public override freeAssets;           // Amount of assets unlocked regardless of time passed.\\r\\n    uint256 public override issuanceRate;         // asset/second rate dependent on aggregate vesting schedule.\\r\\n    uint256 public override lastUpdated;          // Timestamp of when issuance equation was last updated.\\r\\n    uint256 public override vestingPeriodFinish;  // Timestamp when current vesting schedule ends.\\r\\n\\r\\n    uint256 private locked = 1;  // Used in reentrancy check.\\r\\n\\r\\n    /*****************/\\r\\n    /*** Modifiers ***/\\r\\n    /*****************/\\r\\n\\r\\n    modifier nonReentrant() {\\r\\n        require(locked == 1, \\\"RDT:LOCKED\\\");\\r\\n\\r\\n        locked = 2;\\r\\n\\r\\n        _;\\r\\n\\r\\n        locked = 1;\\r\\n    }\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, address owner_, address asset_, uint256 precision_)\\r\\n        ERC20(name_, symbol_, ERC20(asset_).decimals())\\r\\n    {\\r\\n        require((owner = owner_) != address(0), \\\"RDT:C:OWNER_ZERO_ADDRESS\\\");\\r\\n\\r\\n        asset     = asset_;  // Don't need to check zero address as ERC20(asset_).decimals() will fail in ERC20 constructor.\\r\\n        precision = precision_;\\r\\n    }\\r\\n\\r\\n    /********************************/\\r\\n    /*** Administrative Functions ***/\\r\\n    /********************************/\\r\\n\\r\\n    function acceptOwnership() external virtual override {\\r\\n        require(msg.sender == pendingOwner, \\\"RDT:AO:NOT_PO\\\");\\r\\n\\r\\n        emit OwnershipAccepted(owner, msg.sender);\\r\\n\\r\\n        owner        = msg.sender;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    function setPendingOwner(address pendingOwner_) external virtual override {\\r\\n        require(msg.sender == owner, \\\"RDT:SPO:NOT_OWNER\\\");\\r\\n\\r\\n        pendingOwner = pendingOwner_;\\r\\n\\r\\n        emit PendingOwnerSet(msg.sender, pendingOwner_);\\r\\n    }\\r\\n\\r\\n    function updateVestingSchedule(uint256 vestingPeriod_) external virtual override returns (uint256 issuanceRate_, uint256 freeAssets_) {\\r\\n        require(msg.sender == owner, \\\"RDT:UVS:NOT_OWNER\\\");\\r\\n        require(totalSupply != 0,    \\\"RDT:UVS:ZERO_SUPPLY\\\");\\r\\n\\r\\n        // Update \\\"y-intercept\\\" to reflect current available asset.\\r\\n        freeAssets_ = freeAssets = totalAssets();\\r\\n\\r\\n        // Calculate slope.\\r\\n        issuanceRate_ = issuanceRate = ((ERC20(asset).balanceOf(address(this)) - freeAssets_) * precision) / vestingPeriod_;\\r\\n\\r\\n        // Update timestamp and period finish.\\r\\n        vestingPeriodFinish = (lastUpdated = block.timestamp) + vestingPeriod_;\\r\\n\\r\\n        emit IssuanceParamsUpdated(freeAssets_, issuanceRate_);\\r\\n        emit VestingScheduleUpdated(msg.sender, vestingPeriodFinish);\\r\\n    }\\r\\n\\r\\n    /************************/\\r\\n    /*** Staker Functions ***/\\r\\n    /************************/\\r\\n\\r\\n    function deposit(uint256 assets_, address receiver_) external virtual override nonReentrant returns (uint256 shares_) {\\r\\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\\r\\n    }\\r\\n\\r\\n    function depositWithPermit(\\r\\n        uint256 assets_,\\r\\n        address receiver_,\\r\\n        uint256 deadline_,\\r\\n        uint8   v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    )\\r\\n        external virtual override nonReentrant returns (uint256 shares_)\\r\\n    {\\r\\n        ERC20(asset).permit(msg.sender, address(this), assets_, deadline_, v_, r_, s_);\\r\\n        _mint(shares_ = previewDeposit(assets_), assets_, receiver_, msg.sender);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 shares_, address receiver_) external virtual override nonReentrant returns (uint256 assets_) {\\r\\n        _mint(shares_, assets_ = previewMint(shares_), receiver_, msg.sender);\\r\\n    }\\r\\n\\r\\n    function mintWithPermit(\\r\\n        uint256 shares_,\\r\\n        address receiver_,\\r\\n        uint256 maxAssets_,\\r\\n        uint256 deadline_,\\r\\n        uint8   v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    )\\r\\n        external virtual override nonReentrant returns (uint256 assets_)\\r\\n    {\\r\\n        require((assets_ = previewMint(shares_)) <= maxAssets_, \\\"RDT:MWP:INSUFFICIENT_PERMIT\\\");\\r\\n\\r\\n        ERC20(asset).permit(msg.sender, address(this), maxAssets_, deadline_, v_, r_, s_);\\r\\n                    (shares_, assets_, receiver_, msg.sender);\\r\\n    }\\r\\n\\r\\n    function redeem(uint256 shares_, address receiver_, address owner_) external virtual override nonReentrant returns (uint256 assets_) {\\r\\n        _burn(shares_, assets_ = previewRedeem(shares_), receiver_, owner_, msg.sender);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 assets_, address receiver_, address owner_) external virtual override nonReentrant returns (uint256 shares_) {\\r\\n        _burn(shares_ = previewWithdraw(assets_), assets_, receiver_, owner_, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**************************/\\r\\n    /*** Internal Functions ***/\\r\\n    /**************************/\\r\\n\\r\\n    function _mint(uint256 shares_, uint256 assets_, address receiver_, address caller_) internal {\\r\\n        require(receiver_ != address(0), \\\"RDT:M:ZERO_RECEIVER\\\");\\r\\n        require(shares_   != uint256(0), \\\"RDT:M:ZERO_SHARES\\\");\\r\\n        require(assets_   != uint256(0), \\\"RDT:M:ZERO_ASSETS\\\");\\r\\n\\r\\n        _mint(receiver_, shares_);\\r\\n\\r\\n        uint256 freeAssetsCache = freeAssets = totalAssets() + assets_;\\r\\n\\r\\n        uint256 issuanceRate_ = _updateIssuanceParams();\\r\\n\\r\\n        emit Deposit(caller_, receiver_, assets_, shares_);\\r\\n        emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);\\r\\n\\r\\n        require(ERC20Helper.transferFrom(asset, caller_, address(this), assets_), \\\"RDT:M:TRANSFER_FROM\\\");\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 shares_, uint256 assets_, address receiver_, address owner_, address caller_) internal {\\r\\n        require(receiver_ != address(0), \\\"RDT:B:ZERO_RECEIVER\\\");\\r\\n        require(shares_   != uint256(0), \\\"RDT:B:ZERO_SHARES\\\");\\r\\n        require(assets_   != uint256(0), \\\"RDT:B:ZERO_ASSETS\\\");\\r\\n\\r\\n        if (caller_ != owner_) {\\r\\n            _decreaseAllowance(owner_, caller_, shares_);\\r\\n        }\\r\\n\\r\\n        _burn(owner_, shares_);\\r\\n\\r\\n        uint256 freeAssetsCache = freeAssets = totalAssets() - assets_;\\r\\n\\r\\n        uint256 issuanceRate_ = _updateIssuanceParams();\\r\\n\\r\\n        emit Withdraw(caller_, receiver_, owner_, assets_, shares_);\\r\\n        emit IssuanceParamsUpdated(freeAssetsCache, issuanceRate_);\\r\\n\\r\\n        require(ERC20Helper.transfer(asset, receiver_, assets_), \\\"RDT:B:TRANSFER\\\");\\r\\n    }\\r\\n\\r\\n    function _updateIssuanceParams() internal returns (uint256 issuanceRate_) {\\r\\n        return issuanceRate = (lastUpdated = block.timestamp) > vestingPeriodFinish ? 0 : issuanceRate;\\r\\n    }\\r\\n\\r\\n    /**********************/\\r\\n    /*** View Functions ***/\\r\\n    /**********************/\\r\\n\\r\\n    function balanceOfAssets(address account_) public view virtual override returns (uint256 balanceOfAssets_) {\\r\\n        return convertToAssets(balanceOf[account_]);\\r\\n    }\\r\\n\\r\\n    function convertToAssets(uint256 shares_) public view virtual override returns (uint256 assets_) {\\r\\n        uint256 supply = totalSupply;  // Cache to stack.\\r\\n\\r\\n        assets_ = supply == 0 ? shares_ : (shares_ * totalAssets()) / supply;\\r\\n    }\\r\\n\\r\\n    function convertToShares(uint256 assets_) public view virtual override returns (uint256 shares_) {\\r\\n        uint256 supply = totalSupply;  // Cache to stack.\\r\\n\\r\\n        shares_ = supply == 0 ? assets_ : (assets_ * supply) / totalAssets();\\r\\n    }\\r\\n\\r\\n    function maxDeposit(address receiver_) external pure virtual override returns (uint256 maxAssets_) {\\r\\n        receiver_;  // Silence warning\\r\\n        maxAssets_ = type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function maxMint(address receiver_) external pure virtual override returns (uint256 maxShares_) {\\r\\n        receiver_;  // Silence warning\\r\\n        maxShares_ = type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function maxRedeem(address owner_) external view virtual override returns (uint256 maxShares_) {\\r\\n        maxShares_ = balanceOf[owner_];\\r\\n    }\\r\\n\\r\\n    function maxWithdraw(address owner_) external view virtual override returns (uint256 maxAssets_) {\\r\\n        maxAssets_ = balanceOfAssets(owner_);\\r\\n    }\\r\\n\\r\\n    function previewDeposit(uint256 assets_) public view virtual override returns (uint256 shares_) {\\r\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\r\\n        // it should round DOWN if it\u2019s calculating the amount of shares to issue to a user, given an amount of assets provided.\\r\\n        shares_ = convertToShares(assets_);\\r\\n    }\\r\\n\\r\\n    function previewMint(uint256 shares_) public view virtual override returns (uint256 assets_) {\\r\\n        uint256 supply = totalSupply;  // Cache to stack.\\r\\n\\r\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\r\\n        // it should round UP if it\u2019s calculating the amount of assets a user must provide, to be issued a given amount of shares.\\r\\n        assets_ = supply == 0 ? shares_ : _divRoundUp(shares_ * totalAssets(), supply);\\r\\n    }\\r\\n\\r\\n    function previewRedeem(uint256 shares_) public view virtual override returns (uint256 assets_) {\\r\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\r\\n        // it should round DOWN if it\u2019s calculating the amount of assets to send to a user, given amount of shares returned.\\r\\n        assets_ = convertToAssets(shares_);\\r\\n    }\\r\\n\\r\\n    function previewWithdraw(uint256 assets_) public view virtual override returns (uint256 shares_) {\\r\\n        uint256 supply = totalSupply;  // Cache to stack.\\r\\n\\r\\n        // As per https://eips.ethereum.org/EIPS/eip-4626#security-considerations,\\r\\n        // it should round UP if it\u2019s calculating the amount of shares a user must return, to be sent a given amount of assets.\\r\\n        shares_ = supply == 0 ? assets_ : _divRoundUp(assets_ * supply, totalAssets());\\r\\n    }\\r\\n\\r\\n    function totalAssets() public view virtual override returns (uint256 totalManagedAssets_) {\\r\\n        uint256 issuanceRate_ = issuanceRate;\\r\\n\\r\\n        if (issuanceRate_ == 0) return freeAssets;\\r\\n\\r\\n        uint256 vestingPeriodFinish_ = vestingPeriodFinish;\\r\\n        uint256 lastUpdated_         = lastUpdated;\\r\\n\\r\\n        uint256 vestingTimePassed =\\r\\n            block.timestamp > vestingPeriodFinish_ ?\\r\\n                vestingPeriodFinish_ - lastUpdated_ :\\r\\n                block.timestamp - lastUpdated_;\\r\\n\\r\\n        return ((issuanceRate_ * vestingTimePassed) / precision) + freeAssets;\\r\\n    }\\r\\n\\r\\n    /**************************/\\r\\n    /*** Internal Functions ***/\\r\\n    /**************************/\\r\\n\\r\\n    function _divRoundUp(uint256 numerator_, uint256 divisor_) internal pure returns (uint256 result_) {\\r\\n       return (numerator_ / divisor_) + (numerator_ % divisor_ > 0 ? 1 : 0);\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"precision_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeAssets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"issuanceRate_\",\"type\":\"uint256\"}],\"name\":\"IssuanceParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"PendingOwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriodFinish_\",\"type\":\"uint256\"}],\"name\":\"VestingScheduleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"balanceOfAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAssets_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"mintWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner_\",\"type\":\"address\"}],\"name\":\"setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingPeriod_\",\"type\":\"uint256\"}],\"name\":\"updateVestingSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"issuanceRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freeAssets_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RevenueDistributionToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000a8c2111fa095d07facc7d963cc752c253504c2de000000000000000000000000caa79bf8b1d00bf3d4f6dbec6221955871c04618000000000000000000000000000000000000000c9f2c9cd04674edea40000000000000000000000000000000000000000000000000000000000000000000000a43524f43205661756c740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057843524f43000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}