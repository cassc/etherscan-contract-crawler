{"SourceCode": "pragma solidity 0.6.11;\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface Token {\r\n    function approve(address, uint) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ninterface OldIERC20 {\r\n    function transfer(address, uint) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n  function name() external pure returns (string memory);\r\n  function symbol() external pure returns (string memory);\r\n  function decimals() external pure returns (uint8);\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address owner) external view returns (uint);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n\r\n  function approve(address spender, uint value) external returns (bool);\r\n  function transfer(address to, uint value) external returns (bool);\r\n  function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n  function nonces(address owner) external view returns (uint);\r\n\r\n  function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n  event Mint(address indexed sender, uint amount0, uint amount1);\r\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n  event Swap(\r\n      address indexed sender,\r\n      uint amount0In,\r\n      uint amount1In,\r\n      uint amount0Out,\r\n      uint amount1Out,\r\n      address indexed to\r\n  );\r\n  event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n  function factory() external view returns (address);\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n  function price0CumulativeLast() external view returns (uint);\r\n  function price1CumulativeLast() external view returns (uint);\r\n  function kLast() external view returns (uint);\r\n\r\n  function mint(address to) external returns (uint liquidity);\r\n  function burn(address to) external returns (uint amount0, uint amount1);\r\n  function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n  function skim(address to) external;\r\n  function sync() external;\r\n}\r\n\r\n/**\r\n * @dev Staking Smart Contract\r\n * \r\n *  - Users stake Uniswap LP Tokens to receive WETH and DYP Tokens as Rewards\r\n * \r\n *  - Reward Tokens (DYP) are added to contract balance upon deployment by deployer\r\n * \r\n *  - After Adding the DYP rewards, admin is supposed to transfer ownership to Governance contract\r\n * \r\n *  - Users deposit Set (Predecided) Uniswap LP Tokens and get a share of the farm\r\n * \r\n *  - The smart contract disburses `disburseAmount` DYP as rewards over `disburseDuration`\r\n * \r\n *  - A swap is attempted periodically at atleast a set delay from last swap\r\n * \r\n *  - The swap is attempted according to SWAP_PATH for difference deployments of this contract\r\n * \r\n *  - For 4 different deployments of this contract, the SWAP_PATH will be:\r\n *      - DYP-WETH\r\n *      - DYP-WBTC-WETH (assumes appropriate liquidity is available in WBTC-WETH pair)\r\n *      - DYP-USDT-WETH (assumes appropriate liquidity is available in USDT-WETH pair)\r\n *      - DYP-USDC-WETH (assumes appropriate liquidity is available in USDC-WETH pair)\r\n * \r\n *  - Any swap may not have a price impact on DYP price of more than approx ~2.49% for the related DYP pair\r\n *      DYP-WETH swap may not have a price impact of more than ~2.49% on DYP price in DYP-WETH pair\r\n *      DYP-WBTC-WETH swap may not have a price impact of more than ~2.49% on DYP price in DYP-WBTC pair\r\n *      DYP-USDT-WETH swap may not have a price impact of more than ~2.49% on DYP price in DYP-USDT pair\r\n *      DYP-USDC-WETH swap may not have a price impact of more than ~2.49% on DYP price in DYP-USDC pair\r\n * \r\n *  - After the swap,converted WETH is distributed to stakers at pro-rata basis, according to their share of the staking pool\r\n *    on the moment when the WETH distribution is done. And remaining DYP is added to the amount to be distributed or burnt.\r\n *    The remaining DYP are also attempted to be swapped to WETH in the next swap if the price impact is ~2.49% or less\r\n * \r\n *  - At a set delay from last execution, Governance contract (owner) may execute disburse or burn features\r\n * \r\n *  - Burn feature should send the DYP tokens to set BURN_ADDRESS\r\n * \r\n *  - Disburse feature should disburse the DYP \r\n *    (which would have a max price impact ~2.49% if it were to be swapped, at disburse time \r\n *    - remaining DYP are sent to BURN_ADDRESS) \r\n *    to stakers at pro-rata basis according to their share of\r\n *    the staking pool at the moment the disburse is done\r\n * \r\n *  - Users may claim their pending WETH and DYP anytime\r\n * \r\n *  - Pending rewards are auto-claimed on any deposit or withdraw\r\n * \r\n *  - Users need to wait `cliffTime` duration since their last deposit before withdrawing any LP Tokens\r\n * \r\n *  - Owner may not transfer out LP Tokens from this contract anytime\r\n * \r\n *  - Owner may transfer out WETH and DYP Tokens from this contract once `adminClaimableTime` is reached\r\n * \r\n *  - CONTRACT VARIABLES must be changed to appropriate values before live deployment\r\n */\r\ncontract FarmProRata is Ownable {\r\n    using SafeMath for uint;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n    \r\n    // Contracts are not allowed to deposit, claim or withdraw\r\n    modifier noContractsAllowed() {\r\n        require(!(address(msg.sender).isContract()) && tx.origin == msg.sender, \"No Contracts Allowed!\");\r\n        _;\r\n    }\r\n\r\n    event RewardsTransferred(address holder, uint amount);\r\n    event EthRewardsTransferred(address holder, uint amount);\r\n    \r\n    event RewardsDisbursed(uint amount);\r\n    event EthRewardsDisbursed(uint amount);\r\n    \r\n    // ============ START CONTRACT VARIABLES ==========================\r\n\r\n    // deposit token contract address and reward token contract address\r\n    // these contracts (and uniswap pair & router) are \"trusted\" \r\n    // and checked to not contain re-entrancy pattern\r\n    // to safely avoid checks-effects-interactions where needed to simplify logic\r\n    address public constant trustedDepositTokenAddress = 0xBa7872534a6C9097d805d8BEE97e030f4e372e54;\r\n    address public constant trustedRewardTokenAddress = 0x961C8c0B1aaD0c0b10a51FeF6a867E3091BCef17; \r\n    \r\n    // Make sure to double-check BURN_ADDRESS\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    // cliffTime - withdraw is not possible within cliffTime of deposit\r\n    uint public constant cliffTime = 90 days;\r\n\r\n    // Amount of tokens\r\n    uint public constant disburseAmount = 1200000e18;\r\n    // To be disbursed continuously over this duration\r\n    uint public constant disburseDuration = 365 days;\r\n    \r\n    // If there are any undistributed or unclaimed tokens left in contract after this time\r\n    // Admin can claim them\r\n    uint public constant adminCanClaimAfter = 395 days;\r\n    \r\n    // delays between attempted swaps\r\n    uint public constant swapAttemptPeriod = 1 days;\r\n    // delays between attempted burns or token disbursement\r\n    uint public constant burnOrDisburseTokensPeriod = 7 days;\r\n\r\n    \r\n\r\n    // do not change this => disburse 100% rewards over `disburseDuration`\r\n    uint public constant disbursePercentX100 = 100e2;\r\n    \r\n    uint public constant MAGIC_NUMBER = 6289308176100628;\r\n    \r\n    // slippage tolerance\r\n    uint public constant SLIPPAGE_TOLERANCE_X_100 = 100;\r\n    \r\n    //  ============ END CONTRACT VARIABLES ==========================\r\n\r\n    uint public contractDeployTime;\r\n    uint public adminClaimableTime;\r\n    uint public lastDisburseTime;\r\n    uint public lastSwapExecutionTime;\r\n    uint public lastBurnOrTokenDistributeTime;\r\n    \r\n    IUniswapV2Router02 public uniswapRouterV2;\r\n    IUniswapV2Pair public uniswapV2Pair;\r\n    address[] public SWAP_PATH;\r\n    \r\n    constructor(address[] memory swapPath) public {\r\n        contractDeployTime = now;\r\n        adminClaimableTime = contractDeployTime.add(adminCanClaimAfter);\r\n        lastDisburseTime = contractDeployTime;\r\n        lastSwapExecutionTime = lastDisburseTime;\r\n        lastBurnOrTokenDistributeTime = lastDisburseTime;\r\n        \r\n        uniswapRouterV2 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Pair(trustedDepositTokenAddress);\r\n        SWAP_PATH = swapPath;\r\n    }\r\n\r\n    uint public totalClaimedRewards = 0;\r\n    uint public totalClaimedRewardsEth = 0;\r\n\r\n    EnumerableSet.AddressSet private holders;\r\n\r\n    mapping (address => uint) public depositedTokens;\r\n    mapping (address => uint) public depositTime;\r\n    mapping (address => uint) public lastClaimedTime;\r\n    mapping (address => uint) public totalEarnedTokens;\r\n    mapping (address => uint) public totalEarnedEth;\r\n    mapping (address => uint) public lastDivPoints;\r\n    mapping (address => uint) public lastEthDivPoints;\r\n\r\n    uint public contractBalance = 0;\r\n\r\n    uint public totalDivPoints = 0;\r\n    uint public totalEthDivPoints = 0;\r\n    uint public totalTokens = 0;\r\n    \r\n    uint public tokensToBeDisbursedOrBurnt = 0;\r\n    uint public tokensToBeSwapped = 0;\r\n\r\n    uint internal constant pointMultiplier = 1e18;\r\n\r\n    // To be executed by admin after deployment to add DYP to contract\r\n    function addContractBalance(uint amount) public onlyOwner {\r\n        require(Token(trustedRewardTokenAddress).transferFrom(msg.sender, address(this), amount), \"Cannot add balance!\");\r\n        contractBalance = contractBalance.add(amount);\r\n    }\r\n\r\n    \r\n    // Private function to update account information and auto-claim pending rewards\r\n    function updateAccount(address account) private {\r\n        disburseTokens();\r\n        attemptSwap();\r\n        uint pendingDivs = getPendingDivs(account);\r\n        if (pendingDivs > 0) {\r\n            require(Token(trustedRewardTokenAddress).transfer(account, pendingDivs), \"Could not transfer tokens.\");\r\n            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\r\n            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\r\n            emit RewardsTransferred(account, pendingDivs);\r\n        }\r\n        \r\n        uint pendingDivsEth = getPendingDivsEth(account);\r\n        if (pendingDivsEth > 0) {\r\n            require(Token(uniswapRouterV2.WETH()).transfer(account, pendingDivsEth), \"Could not transfer WETH!\");\r\n            totalEarnedEth[account] = totalEarnedEth[account].add(pendingDivsEth);\r\n            totalClaimedRewardsEth = totalClaimedRewardsEth.add(pendingDivsEth);\r\n            emit EthRewardsTransferred(account, pendingDivsEth);\r\n        }\r\n        \r\n        lastClaimedTime[account] = now;\r\n        lastDivPoints[account] = totalDivPoints;\r\n        lastEthDivPoints[account] = totalEthDivPoints;\r\n    }\r\n\r\n    // view function to check last updated DYP pending rewards\r\n    function getPendingDivs(address _holder) public view returns (uint) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (depositedTokens[_holder] == 0) return 0;\r\n\r\n        uint newDivPoints = totalDivPoints.sub(lastDivPoints[_holder]);\r\n\r\n        uint depositedAmount = depositedTokens[_holder];\r\n\r\n        uint pendingDivs = depositedAmount.mul(newDivPoints).div(pointMultiplier);\r\n\r\n        return pendingDivs;\r\n    }\r\n    \r\n    // view function to check last updated WETH pending rewards\r\n    function getPendingDivsEth(address _holder) public view returns (uint) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (depositedTokens[_holder] == 0) return 0;\r\n\r\n        uint newDivPoints = totalEthDivPoints.sub(lastEthDivPoints[_holder]);\r\n\r\n        uint depositedAmount = depositedTokens[_holder];\r\n\r\n        uint pendingDivs = depositedAmount.mul(newDivPoints).div(pointMultiplier);\r\n\r\n        return pendingDivs;\r\n    }\r\n\r\n    \r\n    // view functon to get number of stakers\r\n    function getNumberOfHolders() public view returns (uint) {\r\n        return holders.length();\r\n    }\r\n\r\n\r\n    // deposit function to stake LP Tokens\r\n    function deposit(uint amountToDeposit) public noContractsAllowed {\r\n        require(amountToDeposit > 0, \"Cannot deposit 0 Tokens\");\r\n\r\n        updateAccount(msg.sender);\r\n\r\n        require(Token(trustedDepositTokenAddress).transferFrom(msg.sender, address(this), amountToDeposit), \"Insufficient Token Allowance\");\r\n\r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountToDeposit);\r\n        totalTokens = totalTokens.add(amountToDeposit);\r\n\r\n        if (!holders.contains(msg.sender)) {\r\n            holders.add(msg.sender);\r\n        }\r\n        depositTime[msg.sender] = now;\r\n    }\r\n\r\n    // withdraw function to unstake LP Tokens\r\n    function withdraw(uint amountToWithdraw) public noContractsAllowed {\r\n        require(amountToWithdraw > 0, \"Cannot withdraw 0 Tokens!\");\r\n\r\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \"Invalid amount to withdraw\");\r\n        require(now.sub(depositTime[msg.sender]) > cliffTime, \"You recently deposited, please wait before withdrawing.\");\r\n        \r\n        updateAccount(msg.sender);\r\n\r\n        require(Token(trustedDepositTokenAddress).transfer(msg.sender, amountToWithdraw), \"Could not transfer tokens.\");\r\n\r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\r\n        totalTokens = totalTokens.sub(amountToWithdraw);\r\n\r\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\r\n            holders.remove(msg.sender);\r\n        }\r\n    }\r\n\r\n    // withdraw without caring about Rewards\r\n    function emergencyWithdraw(uint amountToWithdraw) public noContractsAllowed {\r\n        require(amountToWithdraw > 0, \"Cannot withdraw 0 Tokens!\");\r\n\r\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \"Invalid amount to withdraw\");\r\n        require(now.sub(depositTime[msg.sender]) > cliffTime, \"You recently deposited, please wait before withdrawing.\");\r\n        \r\n        // manual update account here without withdrawing pending rewards\r\n        disburseTokens();\r\n        // do not attempt swap here\r\n        lastClaimedTime[msg.sender] = now;\r\n        lastDivPoints[msg.sender] = totalDivPoints;\r\n        lastEthDivPoints[msg.sender] = totalEthDivPoints;\r\n\r\n        require(Token(trustedDepositTokenAddress).transfer(msg.sender, amountToWithdraw), \"Could not transfer tokens.\");\r\n\r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\r\n        totalTokens = totalTokens.sub(amountToWithdraw);\r\n\r\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\r\n            holders.remove(msg.sender);\r\n        }\r\n    }\r\n    \r\n    // claim function to claim pending rewards\r\n    function claim() public noContractsAllowed {\r\n        updateAccount(msg.sender);\r\n    }\r\n    \r\n    // private function to distribute DYP rewards\r\n    function distributeDivs(uint amount) private {\r\n        require(amount > 0 && totalTokens > 0, \"distributeDivs failed!\");\r\n        totalDivPoints = totalDivPoints.add(amount.mul(pointMultiplier).div(totalTokens));\r\n        emit RewardsDisbursed(amount);\r\n    }\r\n    \r\n    // private function to distribute WETH rewards\r\n    function distributeDivsEth(uint amount) private {\r\n        require(amount > 0 && totalTokens > 0, \"distributeDivsEth failed!\");\r\n        totalEthDivPoints = totalEthDivPoints.add(amount.mul(pointMultiplier).div(totalTokens));\r\n        emit EthRewardsDisbursed(amount);\r\n    }\r\n\r\n    // private function to allocate DYP to be disbursed calculated according to time passed\r\n    function disburseTokens() private {\r\n        uint amount = getPendingDisbursement();\r\n\r\n        if (contractBalance < amount) {\r\n            amount = contractBalance;\r\n        }\r\n        if (amount == 0 || totalTokens == 0) return;\r\n\r\n        tokensToBeSwapped = tokensToBeSwapped.add(amount);        \r\n\r\n        contractBalance = contractBalance.sub(amount);\r\n        lastDisburseTime = now;\r\n    }\r\n    \r\n    function attemptSwap() private {\r\n        doSwap();\r\n    }\r\n    \r\n    function doSwap() private {\r\n        // do not attemptSwap if no one has staked\r\n        if (totalTokens == 0) {\r\n            return;\r\n        }\r\n        \r\n        // Cannot execute swap so quickly\r\n        if (now.sub(lastSwapExecutionTime) < swapAttemptPeriod) {\r\n            return;\r\n        }\r\n    \r\n        // force reserves to match balances\r\n        uniswapV2Pair.sync();\r\n    \r\n        uint _tokensToBeSwapped = tokensToBeSwapped.add(tokensToBeDisbursedOrBurnt);\r\n        \r\n        uint maxSwappableAmount = getMaxSwappableAmount();\r\n        \r\n        // don't proceed if no liquidity\r\n        if (maxSwappableAmount == 0) return;\r\n    \r\n        if (maxSwappableAmount < tokensToBeSwapped) {\r\n            \r\n            uint diff = tokensToBeSwapped.sub(maxSwappableAmount);\r\n            _tokensToBeSwapped = tokensToBeSwapped.sub(diff);\r\n            tokensToBeDisbursedOrBurnt = tokensToBeDisbursedOrBurnt.add(diff);\r\n            tokensToBeSwapped = 0;\r\n    \r\n        } else if (maxSwappableAmount < _tokensToBeSwapped) {\r\n    \r\n            uint diff = _tokensToBeSwapped.sub(maxSwappableAmount);\r\n            _tokensToBeSwapped = _tokensToBeSwapped.sub(diff);\r\n            tokensToBeDisbursedOrBurnt = diff;\r\n            tokensToBeSwapped = 0;\r\n    \r\n        } else {\r\n            tokensToBeSwapped = 0;\r\n            tokensToBeDisbursedOrBurnt = 0;\r\n        }\r\n    \r\n        // don't execute 0 swap tokens\r\n        if (_tokensToBeSwapped == 0) {\r\n            return;\r\n        }\r\n    \r\n        // cannot execute swap at insufficient balance\r\n        if (Token(trustedRewardTokenAddress).balanceOf(address(this)) < _tokensToBeSwapped) {\r\n            return;\r\n        }\r\n    \r\n        require(Token(trustedRewardTokenAddress).approve(address(uniswapRouterV2), _tokensToBeSwapped), 'approve failed!');\r\n    \r\n        uint oldWethBalance = Token(uniswapRouterV2.WETH()).balanceOf(address(this));\r\n                \r\n        uint amountOutMin;\r\n        \r\n        uint estimatedAmountOut = uniswapRouterV2.getAmountsOut(_tokensToBeSwapped, SWAP_PATH)[SWAP_PATH.length.sub(1)];\r\n        amountOutMin = estimatedAmountOut.mul(uint(100e2).sub(SLIPPAGE_TOLERANCE_X_100)).div(100e2);\r\n        \r\n        uniswapRouterV2.swapExactTokensForTokens(_tokensToBeSwapped, amountOutMin, SWAP_PATH, address(this), block.timestamp);\r\n    \r\n        uint newWethBalance = Token(uniswapRouterV2.WETH()).balanceOf(address(this));\r\n        uint wethReceived = newWethBalance.sub(oldWethBalance);\r\n        require(wethReceived >= amountOutMin, \"Invalid SWAP!\");\r\n        \r\n        if (wethReceived > 0) {\r\n            distributeDivsEth(wethReceived);    \r\n        }\r\n\r\n        lastSwapExecutionTime = now;\r\n    }\r\n    \r\n    // Owner is supposed to be a Governance Contract\r\n    function disburseRewardTokens() public onlyOwner {\r\n        require(now.sub(lastBurnOrTokenDistributeTime) > burnOrDisburseTokensPeriod, \"Recently executed, Please wait!\");\r\n        \r\n        // force reserves to match balances\r\n        uniswapV2Pair.sync();\r\n        \r\n        uint maxSwappableAmount = getMaxSwappableAmount();\r\n        \r\n        uint _tokensToBeDisbursed = tokensToBeDisbursedOrBurnt;\r\n        uint _tokensToBeBurnt;\r\n        \r\n        if (maxSwappableAmount < _tokensToBeDisbursed) {\r\n            _tokensToBeBurnt = _tokensToBeDisbursed.sub(maxSwappableAmount);\r\n            _tokensToBeDisbursed = maxSwappableAmount;\r\n        }\r\n        \r\n        distributeDivs(_tokensToBeDisbursed);\r\n        if (_tokensToBeBurnt > 0) {\r\n            require(Token(trustedRewardTokenAddress).transfer(BURN_ADDRESS, _tokensToBeBurnt), \"disburseRewardTokens: burn failed!\");\r\n        }\r\n        tokensToBeDisbursedOrBurnt = 0;\r\n        lastBurnOrTokenDistributeTime = now;\r\n    }\r\n    \r\n    \r\n    // Owner is suposed to be a Governance Contract\r\n    function burnRewardTokens() public onlyOwner {\r\n        require(now.sub(lastBurnOrTokenDistributeTime) > burnOrDisburseTokensPeriod, \"Recently executed, Please wait!\");\r\n        require(Token(trustedRewardTokenAddress).transfer(BURN_ADDRESS, tokensToBeDisbursedOrBurnt), \"burnRewardTokens failed!\");\r\n        tokensToBeDisbursedOrBurnt = 0;\r\n        lastBurnOrTokenDistributeTime = now;\r\n    }\r\n    \r\n    \r\n    // get token amount which has a max price impact of 2.5% for sells\r\n    // !!IMPORTANT!! => Any functions using return value from this\r\n    // MUST call `sync` on the pair before calling this function!\r\n    function getMaxSwappableAmount() public view returns (uint) {\r\n        uint tokensAvailable = Token(trustedRewardTokenAddress).balanceOf(trustedDepositTokenAddress);\r\n        uint maxSwappableAmount = tokensAvailable.mul(MAGIC_NUMBER).div(1e18);\r\n        return maxSwappableAmount;\r\n    }\r\n\r\n    // view function to calculate amount of DYP pending to be allocated since `lastDisburseTime` \r\n    function getPendingDisbursement() public view returns (uint) {\r\n        uint timeDiff;\r\n        uint _now = now;\r\n        uint _stakingEndTime = contractDeployTime.add(disburseDuration);\r\n        if (_now > _stakingEndTime) {\r\n            _now = _stakingEndTime;\r\n        }\r\n        if (lastDisburseTime >= _now) {\r\n            timeDiff = 0;\r\n        } else {\r\n            timeDiff = _now.sub(lastDisburseTime);\r\n        }\r\n\r\n        uint pendingDisburse = disburseAmount\r\n                                    .mul(disbursePercentX100)\r\n                                    .mul(timeDiff)\r\n                                    .div(disburseDuration)\r\n                                    .div(10000);\r\n        return pendingDisburse;\r\n    }\r\n\r\n    // view function to get depositors list\r\n    function getDepositorsList(uint startIndex, uint endIndex)\r\n        public\r\n        view\r\n        returns (address[] memory stakers,\r\n            uint[] memory stakingTimestamps,\r\n            uint[] memory lastClaimedTimeStamps,\r\n            uint[] memory stakedTokens) {\r\n        require (startIndex < endIndex);\r\n\r\n        uint length = endIndex.sub(startIndex);\r\n        address[] memory _stakers = new address[](length);\r\n        uint[] memory _stakingTimestamps = new uint[](length);\r\n        uint[] memory _lastClaimedTimeStamps = new uint[](length);\r\n        uint[] memory _stakedTokens = new uint[](length);\r\n\r\n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\r\n            address staker = holders.at(i);\r\n            uint listIndex = i.sub(startIndex);\r\n            _stakers[listIndex] = staker;\r\n            _stakingTimestamps[listIndex] = depositTime[staker];\r\n            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\r\n            _stakedTokens[listIndex] = depositedTokens[staker];\r\n        }\r\n\r\n        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\r\n    }\r\n\r\n\r\n    // function to allow owner to claim *other* modern ERC20 tokens sent to this contract\r\n    function transferAnyERC20Token(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        require(_tokenAddr != trustedDepositTokenAddress, \"Admin cannot transfer out deposit tokens from this vault!\");\r\n        require((_tokenAddr != trustedRewardTokenAddress && _tokenAddr != uniswapRouterV2.WETH()) || (now > adminClaimableTime), \"Admin cannot Transfer out Reward Tokens or WETH Yet!\");\r\n        require(Token(_tokenAddr).transfer(_to, _amount), \"Could not transfer out tokens!\");\r\n    }\r\n\r\n    // function to allow owner to claim *other* legacy ERC20 tokens sent to this contract\r\n    function transferAnyOldERC20Token(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n       \r\n        require(_tokenAddr != trustedDepositTokenAddress, \"Admin cannot transfer out deposit tokens from this vault!\");\r\n        require((_tokenAddr != trustedRewardTokenAddress && _tokenAddr != uniswapRouterV2.WETH()) || (now > adminClaimableTime), \"Admin cannot Transfer out Reward Tokens or WETH Yet!\");\r\n\r\n        OldIERC20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRewardsDisbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRewardsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDisbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAGIC_NUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLIPPAGE_TOLERANCE_X_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SWAP_PATH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCanClaimAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminClaimableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnOrDisburseTokensPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDeployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disbursePercentX100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getDepositorsList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaimedTimeStamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSwappableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingDisbursement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingDivsEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnOrTokenDistributeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDisburseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEthDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSwapExecutionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAttemptPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToBeDisbursedOrBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensToBeSwapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewardsEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyOldERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedDepositTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedRewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouterV2\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FarmProRata", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000961c8c0b1aad0c0b10a51fef6a867e3091bcef17000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1ed9c0490c14da9d9b525be1ef1f05b0b532190780f9f035fd18a274e240816d"}