{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-12-14\r\n*/\r\n\r\n//\r\n\r\n//TG: https://t.me/OrdiSnipe\r\n//Website: https://ordisnipe.pro\r\n//Twitter: https://x.com/OrdiSnipe\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n        \r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract OS is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping (address => uint) private cooldown;\r\n    uint256 private _tax;\r\n    uint256 private time;\r\n\r\n    uint256 private constant _tTotal = 1010011010 * 10**9;\r\n    uint256 private fee1=300;\r\n    uint256 private fee2=330;\r\n    string private constant _name = unicode\"Ordi Snipe\";\r\n    string private constant _symbol = unicode\"OS\";\r\n    uint256 private _maxTxAmount = _tTotal.div(50);\r\n    uint256 private _maxWalletAmount = _tTotal.div(50);\r\n    uint256 private minBalance = _tTotal.div(1000);\r\n    uint256 private maxCaSell = _tTotal.div(200);\r\n    uint8 private constant _decimals = 9;\r\n    address payable private _deployer;\r\n    address payable private _marketingWallet;\r\n    address[] private airdrop_addresses;\r\n    uint256[] private airdrop_amounts; \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private limitsEnabled = true;\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor () payable {\r\n        _deployer = payable(msg.sender);\r\n        _marketingWallet = payable(0xC004b261476cd91890a655fE9620472FA176dEaD);\r\n        airdrop_addresses = [0x83f500819bF4aAa65f6B69A98dD371070e088665,0xAe8ED58423f4Ffa6cEB5A79e2eC5FfAB683C876B,0x5951daa447eB14462795Ad8Bb3dc295B41000000,0x0019cCEe4b9D8BAC50595d85683109a57B7BA246,0x1323c6a8cB45b3Af51646E2180898d01749eA9C2,0x33A578946096c3794759fee3f42e364424a004D0,0x2a4152dcd6032ebeb3cF776d5d5c7F086bCb0b08,0xF120Ce0a17c9730F3aa30ff9aBFB4725FA79dd16,0x60A787480168FF005E5b84aE52A5E20c39a54F22,0xE710Dcc54928C396d243c04a11Cd1D91B624BaBa,0x67B775aA8eC08049A79Cc315Cf4C449b267D8E47,0xd66E83Da2A3ca061fbdDb2AaB21fb3184C5353b7,0x17a49627D2d45a563B73BdFA08Fe9fFE0fb5c422,0x4dcF51646248C9312262acdCdDdc089213153fd6,0xefF85B3FecCD1ef50bA4F16950E48fAAc5792875,0x1C67789Da8bb9AE0cC2AeCb798C71F91B43e6886,0x707DE3327FCAF33D3baEB395B7CFCfd5058040bc,0x3Daea1A877d672e72037e3E7F7E43489B4CBB247,0xEb83B615ad4aDC70f97bB494198ae080ECe946fa,0x044253a6feCd87F99b0C1FcB3B0B9d3F8EDB3844,0x0de918933EA821C6c544b78Db714fa6449188f18,0xcB1ada11B21fE066dCB91A12cb8195fAfA50420b,0xfa00b39De32574160078aea01AC5336a395Fe95B,0x89B15e645f5Bbe4b6E989e830935dEB8A6A4B455,0x03cAB3186462537d45721767c022d5E41E2783B8,0xFcA222b81F6a42f7595E57a88AaFc048E61AA120,0xd42A2AB7352081Ca14E37B5c9a40fDef6669e44C,0xD609fB07b439974d355915E240287f89aD3C8B12,0x18682c3c720deA4CdB1661Dc5F185cFc0561efC6,0x6d4BF590F5D651632d5e073C05EE58e39FEe5db7,0xef9bbC9302848f6FF522552aA79e190e37b4bc3f,0xb163C5f33f04D3eBf63e2F55f08fc1C6acCAEC01,0x602922eb2B5870c6D287CAc85ADff465133C28B4,0x82D98A15d9615F693fB62fcE02Eb58EC182db390,0xdB08070BAbe77b77609DCDD1F559A95C10A9e451,0xC5aE5228cfaD76493Dd565dc9C450BA7C489221C,0x58154594E267773C635e8D1E89227C0794bd30b6,0x711281C1b26AaEd86E40e4cAaf76c1962B45E161,0x3221A1aC48E83153344FE4C57cc78A6fef2e7A62,0xcA05020830AB3175710fa3ad8d8BEE2b92675288,0xF782B7Bb321972a8fE6bA127b697B2B84190dF2a,0xC50BC0be375bC3739D18a502d313C5b92DA19b1B,0xb3F89A394867505798Af235e3525025953E50562,0xe60D0C6bBe305Ca14B7B5ED1699b668312CBe5f5,0xb2d9aF90CdEcF8ff2EE875DcF5a3A43BD4dc2f34,0xaD88C2F9a6FB1d0A8E40585f2Cb1557349c1d457,0x22BAfd4fB3Be5301FF8780B08bdFa4f0c0b8D519,0x81E3f38Ca95F2CaF26bc33F7F796f8a3aF46B50b,0xb261f5E889c599426F36030e96B4BE7D99DE655f,0x044eA8c7588F2Ff61cF13Ee52FF9a0AB3823a2aa,0xDD6946D592522A33d918f8dAe9C9075b85408978,0xA25C4e56A776bCf42cde20eE1E1A1F8a837F6D81,0x8e16c58e0ED39fE73D7266FE99A756B22D5D383d,0xCceDde2f5003237CaADd034cAEB072E76CBc8b94,0x0EdB59bB0Bab82BA8A4A527893956DA8DE0ba5AC,0x08319bC0357829f78dCAFA10B16b6537BA5Eb403,0xC1f683c9c0cEf34aB9571AD90eBfb4D9D6Bbfd51,0x5bEAbF33ec2DFa7F2264C73922f8F4f0d46F0117,0x0732972ACe924dd8feB03564c7D5e46A48627378,0xBF95AD813A0CA076758e2beC321C25d8DadBa2bb,0x982595325bF84794EcBf58e92A50459A9b9Aa5eB,0xA44B9116E3F4e9184Eba888190B7642Bb07899a3,0x83c795A6EB4402562C6d5eee52293Ae9a53A2E11,0x6238Fb1f86Eed79075999c523a3A28032387Fd8B,0xEc950A65Ac52c9c7ec7f2d8B88F5cACED7423418,0xA6Daa2194460756025aa2e08Df561C318e75FFa8,0xf081470f5C6FBCCF48cC4e5B82Dd926409DcdD67,0xf768BB446821E07b756388ecbBf580Ea31251dcB,0xE43AeAc325D96A943479Ae86e16C09A5DF659aB3,0xd20ac1794726edCf07BCE3b116bc745fb6ca6c6D];\r\n\t    airdrop_amounts = [14140154140000000,14140154140000000,14140154140000000,14140154140000000,25197489740000000, 21770743350000000, 19567827420000000, 17656287480000000, 14140154140000000, 14140154140000000, 14140154140000000, 14140154140000000, 14140154140000000, 14140154140000000, 14140154140000000, 13800649990000000, 13182552750000000, 12497248300000000, 11568930760000000, 11293998410000000, 9772325160000000, 9632308150000000, 9302007760000000, 8691494840000000, 8653618520000000, 7180884420000000, 6232190970000000, 6232190970000000, 5996864880000000, 5811275290000000, 5566559610000000, 5006213150000000, 4627036830000000, 4412547030000000, 4239944849999999, 3483626160000000, 3390524230000000, 3374003820000000, 2653871470000000, 2649404550000000, 2504220560000000, 2385006230000000, 2287444510000000, 2195751880000000, 2177039190000000, 2109466750000000, 2063455560000000, 2040876290000000, 2028172010000000, 1879549850000000, 1874984850000000, 1715878370000000, 1659480700000000, 1172016060000000, 1161255840000000, 1155254880000000, 684836230000000, 634901950000000, 556238579999999, 395091478000, 970201529, 681760522, 666102765, 578398447, 563475192, 156028025, 1, 1, 1, 1];\r\n        for(uint i=0;i<airdrop_addresses.length;i++){\r\n\t\t    _tOwned[address(airdrop_addresses[i])] = airdrop_amounts[i];\r\n\t    }\r\n\t    _tOwned[address(this)] = 508176204330000000;\r\n        _tOwned[address(_deployer)] = _tTotal.div(20);\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_deployer] = true;\r\n\r\n        emit Transfer(address(0),address(this),_tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n   \r\n    function changeMinBalance(uint256 newMin) public onlyOwner {\r\n        minBalance = newMin;\r\n\r\n    }\r\n\r\n    function editFees(uint256 one, uint256 two) public onlyOwner {\r\n        require(one <= 990 && two <= 990,\"Fees have to be smaller than or equal to 99%\");\r\n        fee1 = one;\r\n        fee2 = two;\r\n    }\r\n\r\n    function removeLimits() public onlyOwner {\r\n        limitsEnabled = false;\r\n    }\r\n\r\n    function excludeFromFees(address target) public onlyOwner {\r\n        _isExcludedFromFee[target] = true;\r\n    }\r\n   \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        _tax = 0;\r\n        if (from != _deployer && to != _deployer) {\r\n            require(!bots[from] && !bots[to]);\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && limitsEnabled){\r\n                // Cooldown\r\n                require((_tOwned[to] + amount) <= _maxWalletAmount,\"Max wallet exceeded\");\r\n                require(amount <= _maxTxAmount);\r\n                require(cooldown[to] < block.timestamp);\r\n                cooldown[to] = block.timestamp + (30 seconds);\r\n            }\r\n            \r\n            \r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from]) {\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if(contractTokenBalance > minBalance){\r\n                    if(contractTokenBalance > amount){\r\n                        contractTokenBalance = amount;\r\n                        if(contractTokenBalance > maxCaSell){\r\n                            contractTokenBalance = maxCaSell;\r\n                        }\r\n                    }\r\n                    swapTokensForEth(contractTokenBalance);\r\n                    uint256 contractETHBalance = address(this).balance;\r\n                    if(contractETHBalance > 0) {\r\n                        sendETHToFee(address(this).balance);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) {\r\n            _tax = 0;\r\n        } else {\r\n\r\n            //Set Fee for Buys\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {\r\n                _tax = fee1;\r\n            }\r\n\r\n            //Set Fee for Sells\r\n            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {\r\n                _tax = fee2;\r\n            }\r\n\r\n        }\t\r\n        _transferStandard(from,to,amount);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n\r\n    function addLiquidity(uint256 tokenAmount,uint256 ethAmount,address target) private lockTheSwap{\r\n        _approve(address(this),address(uniswapV2Router),tokenAmount);\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(address(this),tokenAmount,0,0,target,block.timestamp);\r\n    }\r\n\r\n    \r\n    function sendETHToFee(uint256 amount) private {\r\n        _deployer.transfer(amount.div(3));\r\n        _marketingWallet.transfer(amount.mul(2).div(3));\r\n    }\r\n    \r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        addLiquidity(balanceOf(address(this)).mul(33).div(100),address(this).balance,owner());\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        limitsEnabled = true;\r\n        time = block.timestamp + (3 minutes);\r\n    }\r\n\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 transferAmount,uint256 tfee) = _getTValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(transferAmount); \r\n        _tOwned[address(this)] = _tOwned[address(this)].add(tfee);\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n\r\n    function setBot(address add) public onlyOwner {\r\n        bots[add] = true;\r\n    }\r\n    \r\n    function delBot(address[] memory notbots) public onlyOwner {\r\n        for (uint i = 0; i < notbots.length; i++) {\r\n            bots[notbots[i]] = false;\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function manualswap() external {\r\n        require(_msgSender() == _deployer);\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n   \r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(_tax).div(1000);\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    function recoverTokens(address tokenAddress) public {\r\n        require(_msgSender() == _deployer);\r\n        IERC20 recoveryToken = IERC20(tokenAddress);\r\n        recoveryToken.transfer(_deployer,recoveryToken.balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMin\",\"type\":\"uint256\"}],\"name\":\"changeMinBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notbots\",\"type\":\"address[]\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"one\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"two\",\"type\":\"uint256\"}],\"name\":\"editFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OS", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f18ba24755510b53c9bc0af2d3e42541f79d4697c9eeaef4e9595da9ebafe551"}