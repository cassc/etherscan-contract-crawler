{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2020-03-26\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2020-03-26\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath{\r\n      /**\r\n     * Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n     function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n      /**\r\n     * Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"ERC20: Required Owner !\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require (newOwner != address(0),\"ERC20 New Owner cannot be zero address\");\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient {  function receiveApproval(address _from, uint256 _value, address _token, bytes calldata  _extraData) external ; }\r\n\r\ncontract TOKENERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    event TransferEnabled (bool);\r\n    event TransferDisabled (bool);\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n\r\n   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Mint(address indexed from, uint256 value);\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n       \r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        TransferAllowed = true;\r\n    }\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) private _allowance;\r\n    mapping (address => bool) public LockList;\r\n    mapping (address => uint256) public LockedTokens;\r\n      bool public TransferAllowed;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        uint256 stage;\r\n        \r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");       // Prevent transfer to 0x0 address. Use burn() instead\r\n\r\n        require (LockList[msg.sender] == false,\"ERC20: Caller Locked !\");            // Check if msg.sender is locked or not\r\n        require (LockList[_from] == false, \"ERC20: Sender Locked !\");\r\n        require (LockList[_to] == false,\"ERC20: Receipient Locked !\");\r\n        require (TransferAllowed == true,\"ERC20: Transfer enabled false !\");\r\n\r\n       // Check if sender balance is locked \r\n        stage=balanceOf[_from].sub(_value, \"ERC20: transfer amount exceeds balance\");\r\n        require (stage >= LockedTokens[_from],\"ERC20: transfer amount exceeds Senders Locked Amount\");\r\n        \r\n        //Deduct and add balance\r\n        balanceOf[_from]=stage;\r\n        balanceOf[_to]=balanceOf[_to].add(_value,\"ERC20: Addition overflow\");\r\n\r\n        //emit Transfer event\r\n        emit Transfer(_from, _to, _value);\r\n\r\n    }\r\n    \r\n    /**\r\n     *  Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address _spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowance[owner][_spender] = amount;\r\n        emit Approval(owner, _spender, amount);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns(bool){\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n   \r\n\r\n    function burn(uint256 _value) public returns(bool){\r\n        require (LockList[msg.sender] == false,\"ERC20: User Locked !\");    \r\n        \r\n        uint256 stage;\r\n        stage=balanceOf[msg.sender].sub(_value, \"ERC20: transfer amount exceeds balance\");\r\n        require (stage >= LockedTokens[msg.sender],\"ERC20: transfer amount exceeds Senders Locked Amount\");\r\n        \r\n        balanceOf[msg.sender]=balanceOf[msg.sender].sub(_value,\"ERC20: Burn amount exceeds balance.\");\r\n        totalSupply=totalSupply.sub(_value,\"ERC20: Burn amount exceeds total supply\");\r\n        \r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n     /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param Account address\r\n     *\r\n     * @param _value the amount of money to burn\r\n     * \r\n     * Safely check if total supply is not overdrawn\r\n     */\r\n    function burnFrom(address Account, uint256 _value) public returns (bool success) {\r\n        require (LockList[msg.sender] == false,\"ERC20: User Locked !\");    \r\n        require (LockList[Account] == false,\"ERC20: Owner Locked !\");    \r\n        uint256 stage;\r\n        require(Account != address(0), \"ERC20: Burn from the zero address\");\r\n        \r\n        _approve(Account, msg.sender, _allowance[Account][msg.sender].sub(_value,\"ERC20: burn amount exceeds allowance\"));\r\n        \r\n        //Do not allow burn if Accounts tokens are locked.\r\n        stage=balanceOf[Account].sub(_value,\"ERC20: Transfer amount exceeds allowance\");\r\n        require(stage>=LockedTokens[Account],\"ERC20: Burn amount exceeds accounts locked amount\");\r\n        balanceOf[Account] =stage ;            // Subtract from the sender\r\n        \r\n        //Deduct burn amount from totalSupply\r\n        totalSupply=totalSupply.sub(_value,\"ERC20: Burn Amount exceeds totalSupply\");\r\n       \r\n        emit Burn(Account, _value);\r\n        emit Transfer(Account, address(0), _value);\r\n\r\n        return true;\r\n    }\r\n    \r\n    \r\n /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` on behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        \r\n        _transfer(_from, _to, _value);\r\n        _approve(_from,msg.sender,_allowance[_from][msg.sender].sub(_value,\"ERC20: transfer amount exceeds allowance\"));\r\n        \r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     * Emits Approval Event\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        uint256 unapprovbal;\r\n\r\n        // Do not allow approval if amount exceeds locked amount\r\n        unapprovbal=balanceOf[msg.sender].sub(_value,\"ERC20: Allowance exceeds balance of approver\");\r\n        require(unapprovbal>=LockedTokens[msg.sender],\"ERC20: Approval amount exceeds locked amount \");\r\n       \r\n       \r\n        _allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    function allowance(address _owner,address _spender) public view returns(uint256){\r\n        return _allowance[_owner][_spender];\r\n    }\r\n   \r\n}\r\n\r\n\r\n\r\ncontract BASID is owned, TOKENERC20 {\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor () TOKENERC20(\r\n        10000000000 * 1 ** uint256(decimals),\r\n    \"BASID\",\r\n    \"BASID\") public {\r\n    }\r\n    \r\n   \r\n     /**\r\n     * User Lock\r\n     *\r\n     * @param Account the address of account to lock for transaction\r\n     *\r\n     * @param mode true or false for lock mode\r\n     * \r\n     */\r\n    function UserLock(address Account, bool mode) onlyOwner public {\r\n        LockList[Account] = mode;\r\n    }\r\n     /**\r\n     * Lock tokens\r\n     *\r\n     * @param Account the address of account to lock\r\n     * \r\n     * @param amount the amount of money to lock\r\n     * \r\n     * \r\n     */\r\n   function LockTokens(address Account, uint256 amount) onlyOwner public{\r\n       LockedTokens[Account]=amount;\r\n   }\r\n   \r\n    function UnLockTokens(address Account) onlyOwner public{\r\n       LockedTokens[Account]=0;\r\n   }\r\n   \r\n    /**\r\n     * Mintable, Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n     \r\n    function mint(uint256 _value) onlyOwner public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value); \r\n        require(balanceOf[msg.sender] != 0x0);  // Check if the sender has enough\r\n        balanceOf[msg.sender]=balanceOf[msg.sender].add(_value,\"ERC20: Addition overflow\");            // Subtract from the sender\r\n        totalSupply=totalSupply.add(_value,\"ERC20: totalSupply increased \");\r\n        emit Mint(msg.sender, _value);\r\n        return true;\r\n    } \r\n\r\n\r\n  /**\r\n     * Airdrop tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount with decimals(18)\r\n     *\r\n     */\r\n    mapping (address => uint256) public airDropHistory;\r\n    event AirDrop(address _receiver, uint256 _amount);\r\n\r\n  function dropToken(address[] memory receivers, uint256[] memory values) onlyOwner public {\r\n    require(receivers.length != 0);\r\n    require(receivers.length == values.length);\r\n\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      address receiver = receivers[i];\r\n      uint256 amount = values[i];\r\n\r\n      transfer(receiver, amount);\r\n      airDropHistory[receiver] += amount;\r\n\r\n      emit AirDrop(receiver, amount);\r\n    }\r\n  }\r\n  \r\n      /// Set whether transfer is enabled or disabled\r\n    \r\n  \r\n\r\n    function enableTokenTransfer() onlyOwner public {\r\n        TransferAllowed = true;\r\n        emit TransferEnabled (true);\r\n    }\r\n\r\n    function disableTokenTransfer() onlyOwner public {\r\n        TransferAllowed = false;\r\n        emit TransferDisabled (true);\r\n    }\r\n    \r\n   \r\n  \r\n\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Account\",\"type\":\"address\"},{\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"UserLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LockList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enableTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Account\",\"type\":\"address\"}],\"name\":\"UnLockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TransferAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"Account\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"LockedTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receivers\",\"type\":\"address[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"dropToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"airDropHistory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"TransferEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"bool\"}],\"name\":\"TransferDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]", "ContractName": "BASID", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://7e977b47fd54912a55b7fd71b41ff231a8652effd93ff495994d9b8daa8e201a"}