{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/deca-collections/libraries/MintStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Recipient} from \\\"../../interfaces/internal/IDecaCollection.sol\\\";\\n\\n/**\\n * @title MintStructs\\n */\\nlibrary MintStructs {\\n  /**\\n   * @notice BidInfo is the struct that provides info about a bid on a Deca Collection item.\\n   * @dev Token ids are globally unique across all DecaCollections. Contract address is not part of the bid\\n   *      struct so that creators can move a token's collection before minting it, after receiving a bid\\n   * @param nonce Global user order nonce for maker orders\\n   * @param tokenId Id of the token to mint\\n   * @param expiresAt Timestamp bid expires at\\n   * @param priceInWei Bid price in wei\\n   * @param bidderAddress Maker address\\n   */\\n  struct BidInfo {\\n    uint256 nonce;\\n    uint256 tokenId;\\n    uint256 expiresAt;\\n    uint256 priceInWei;\\n    address bidderAddress;\\n  }\\n\\n  /**\\n   * @notice Payslip is the struct for a payout on settlement.\\n   * @dev Payslips are paid out in order, if there is not enough balance to pay out the next payslip, the settlement fails.\\n   * @param amountInWei Amount to pay out in wei\\n   * @param recipient Address to pay out to\\n   */\\n  struct Payslip {\\n    uint256 amountInWei;\\n    address recipient;\\n  }\\n\\n  /**\\n   * @notice AcceptanceInfo is the struct for a taker ask/bid order. It contains the parameters required for a direct purchase.\\n   * @dev AcceptanceInfo struct is matched against a BidInfo struct at the protocol level during settlement.\\n   * @param nonce Nonce to ensure acceptance signature is not re-used\\n   * @param bidSignatureHash BidInfo hash signed by taker\\n   * @param creatorAddress Address of the creator accepting the bid\\n   * @param collectionAddress Address to mint the token on\\n   * @param payslips Array of payslips to be paid out on settlement\\n   */\\n  struct AcceptanceInfo {\\n    uint256 nonce;\\n    bytes32 bidSignatureHash;\\n    address creatorAddress;\\n    address collectionAddress;\\n    Payslip[] payslips;\\n  }\\n\\n  /**\\n   * @notice To enable gasless cancellation of bids, we provide a fast expiring signature that is required during settlement and acts as an off-chain mint pass.\\n   *        If a user tells Deca they want to cancel their bid, we mark it as cancelled internally and refuse to provide a signature for settlement.\\n   *        In case a user wants to cancel their bid without going through Deca in case the expiry time isn't short enough, they can do so on chain.\\n   * @dev bidSignatureHash and acceptanceSignature hashes act as nonces, if either has already been used settlement fails.\\n   * @param expiresAt Timestamp signature expires at\\n   * @param bidSignatureHash BidInfo is the struct that provides info about a bid on a Deca Collection item.\\n   * @param acceptanceSignatureHash AcceptanceInfo struct is matched against a BidInfo struct at the protocol level during settlement.\\n   * @param signer Address owned by Deca used to sign the message\\n   */\\n  struct MintPass {\\n    uint256 expiresAt;\\n    bytes32 bidSignatureHash;\\n    bytes32 acceptanceSignatureHash;\\n    address signer;\\n  }\\n\\n  /**\\n   * @notice A summary of the settlement data required to mint on demand.\\n   * @param bidSignature Signature for the bid info\\n   * @param acceptanceSignature Signature for the acceptance info\\n   * @param mintPassSignature Signature for the mint pass\\n   * @param bidInfo BidInfo struct, signed by bidder\\n   * @param acceptanceInfo AcceptanceInfo struct, signed by creator\\n   * @param mintPass MintPass struct, signed by Deca\\n   */\\n  struct Settlement {\\n    bytes bidSignature;\\n    bytes acceptanceSignature;\\n    bytes mintPassSignature;\\n    BidInfo bidInfo;\\n    AcceptanceInfo acceptanceInfo;\\n    MintPass mintPass;\\n  }\\n\\n  /**\\n   * @notice CollectionInfo is the struct that provides info about a collection being created.\\n   * @param signer Address owned by Deca used to sign the message\\n   * @param nonce Nonce for the collection, used to generate the collection address\\n   * @param collectionName Name of the collection being created\\n   * @param collectionSymbol Symbol of the collection being created\\n   * @param royaltyRecipients Array of secondary market royalty recipients\\n   */\\n  struct CollectionInfo {\\n    address signer;\\n    uint96 nonce;\\n    string collectionName;\\n    string collectionSymbol;\\n    Recipient[] royaltyRecipients;\\n  }\\n\\n  /**\\n   * @notice This is the type hash constant used to compute the maker order hash.\\n   */\\n  bytes32 internal constant _BIDINFO_TYPEHASH =\\n    keccak256(\\n      \\\"BidInfo(\\\"\\n      \\\"uint256 nonce,\\\"\\n      \\\"uint256 tokenId,\\\"\\n      \\\"address bidderAddress,\\\"\\n      \\\"uint256 expiresAt,\\\"\\n      \\\"uint256 priceInWei\\\"\\n      \\\")\\\"\\n    );\\n\\n  /**\\n   * @dev This is the type hash constant used to compute the taker order hash.\\n   */\\n  bytes32 internal constant _ACCEPTANCEINFO_TYPEHASH =\\n    keccak256(\\n      \\\"AcceptanceInfo(\\\"\\n      \\\"uint256 nonce,\\\"\\n      \\\"address creatorAddress,\\\"\\n      \\\"address collectionAddress,\\\"\\n      \\\"bytes32 bidSignatureHash,\\\"\\n      \\\"Payslip[] payslips\\\"\\n      \\\")\\\"\\n      \\\"Payslip(address recipient,uint256 amountInWei)\\\"\\n    );\\n\\n  /**\\n   * @dev This is the type hash constant used to compute the payslip hash.\\n   */\\n  bytes32 internal constant _PAYSLIP_TYPEHASH =\\n    keccak256(\\n      \\\"Payslip(\\\"\\n      \\\"address recipient,\\\"\\n      \\\"uint256 amountInWei\\\"\\n      \\\")\\\"\\n    );\\n\\n  /**\\n   * @dev This is the type hash constant used to compute the mint pass hash.\\n   */\\n  bytes32 internal constant _MINTPASS_TYPEHASH =\\n    keccak256(\\n      \\\"MintPass(\\\"\\n      \\\"address signer,\\\"\\n      \\\"uint256 expiresAt,\\\"\\n      \\\"bytes32 bidSignatureHash,\\\"\\n      \\\"bytes32 acceptanceSignatureHash\\\"\\n      \\\")\\\"\\n    );\\n\\n  /**\\n   * @dev This is the type hash constant used to compute the collection info hash.\\n   */\\n  bytes32 internal constant _COLLECTIONINFO_TYPEHASH =\\n    keccak256(\\n      \\\"CollectionInfo(\\\"\\n      \\\"string collectionName,\\\"\\n      \\\"string collectionSymbol,\\\"\\n      \\\"uint96 nonce,\\\"\\n      \\\"address signer,\\\"\\n      \\\"Recipient[] royaltyRecipients\\\"\\n      \\\")\\\"\\n      \\\"Recipient(address recipient,uint16 bps)\\\"\\n    );\\n\\n  /**\\n   * @dev This is the type hash constant used to compute the recipient hash.\\n   */\\n  bytes32 internal constant _RECIPIENT_TYPEHASH =\\n    keccak256(\\n      \\\"Recipient(\\\"\\n      \\\"address recipient,\\\"\\n      \\\"uint16 bps\\\"\\n      \\\")\\\"\\n    );\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for a BidInfo struct.\\n   * @param bidInfo BidInfo struct\\n   * @return bidInfoHash Hash of the BidInfo struct\\n   */\\n  function hash(BidInfo memory bidInfo) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          _BIDINFO_TYPEHASH,\\n          bidInfo.nonce,\\n          bidInfo.tokenId,\\n          bidInfo.bidderAddress,\\n          bidInfo.expiresAt,\\n          bidInfo.priceInWei\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for an AcceptanceInfo struct.\\n   * @param acceptanceInfo AcceptanceInfo struct\\n   * @return acceptanceInfoHash Hash of the AcceptanceInfo struct\\n   */\\n  function hash(AcceptanceInfo memory acceptanceInfo) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          _ACCEPTANCEINFO_TYPEHASH,\\n          acceptanceInfo.nonce,\\n          acceptanceInfo.creatorAddress,\\n          acceptanceInfo.collectionAddress,\\n          acceptanceInfo.bidSignatureHash,\\n          _encodePayslips(acceptanceInfo.payslips)\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for a Payslip struct.\\n   * @param payslip Payslip struct\\n   * @return payslipHash Hash of the Payslip struct\\n   */\\n  function _encodePayslip(Payslip memory payslip) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_PAYSLIP_TYPEHASH, payslip.recipient, payslip.amountInWei));\\n  }\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for an array of Payslip structs.\\n   * @param payslips Array of Payslip structs\\n   * @return payslipsHash Hash of the Payslip structs\\n   */\\n  function _encodePayslips(Payslip[] memory payslips) internal pure returns (bytes32) {\\n    bytes32[] memory encodedPayslips = new bytes32[](payslips.length);\\n    for (uint256 i = 0; i < payslips.length; i++) {\\n      encodedPayslips[i] = _encodePayslip(payslips[i]);\\n    }\\n\\n    return keccak256(abi.encodePacked(encodedPayslips));\\n  }\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for a MintPass struct.\\n   * @param mintPass MintPass struct\\n   * @return mintPassHash Hash of the MintPass struct\\n   */\\n  function hash(MintPass memory mintPass) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          _MINTPASS_TYPEHASH,\\n          mintPass.signer,\\n          mintPass.expiresAt,\\n          mintPass.bidSignatureHash,\\n          mintPass.acceptanceSignatureHash\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for a CollectionInfo struct.\\n   * @param collectionInfo CollectionInfo struct\\n   * @return collectionInfoHash Hash of the CollectionInfo struct\\n   */\\n  function hash(CollectionInfo memory collectionInfo) internal pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encode(\\n          _COLLECTIONINFO_TYPEHASH,\\n          keccak256(bytes(collectionInfo.collectionName)),\\n          keccak256(bytes(collectionInfo.collectionSymbol)),\\n          collectionInfo.nonce,\\n          collectionInfo.signer,\\n          _encodeRecipients(collectionInfo.royaltyRecipients)\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for a Recipient struct.\\n   * @param recipient Recipient struct\\n   * @return recipientHash Hash of the Recipient struct\\n   */\\n  function _encodeRecipient(Recipient memory recipient) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_RECIPIENT_TYPEHASH, recipient.recipient, recipient.bps));\\n  }\\n\\n  /**\\n   * @notice This function is used to compute the EIP712 hash for an array of Recipient structs.\\n   * @param recipients Array of Recipient structs\\n   * @return recipientsHash Hash of the Recipient structs\\n   */\\n  function _encodeRecipients(Recipient[] memory recipients) internal pure returns (bytes32) {\\n    bytes32[] memory encodedRecipients = new bytes32[](recipients.length);\\n    for (uint256 i = 0; i < recipients.length; i++) {\\n      encodedRecipients[i] = _encodeRecipient(recipients[i]);\\n    }\\n\\n    return keccak256(abi.encodePacked(encodedRecipients));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/deca-collections/SettlementValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport {IDecaCollection} from \\\"../interfaces/internal/IDecaCollection.sol\\\";\\nimport {IRoleAuthority} from \\\"../interfaces/internal/IRoleAuthority.sol\\\";\\n\\nimport {MintStructs} from \\\"./libraries/MintStructs.sol\\\";\\nimport {ISettlementValidator} from \\\"../interfaces/internal/ISettlementValidator.sol\\\";\\n\\n/**\\n * @notice Validates EIP712 off-chain signatures for mint on demand DecaCollection NFTs\\n * @author 0x-jj, j6i\\n */\\ncontract SettlementValidator is ISettlementValidator {\\n  using MintStructs for MintStructs.BidInfo;\\n  using MintStructs for MintStructs.AcceptanceInfo;\\n  using MintStructs for MintStructs.MintPass;\\n  using MintStructs for MintStructs.CollectionInfo;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice RoleAuthority contract to determine whether an address has some admin role.\\n   */\\n  IRoleAuthority public immutable roleAuthority;\\n\\n  /**\\n   * @notice The chain id of the network this contract is deployed on.\\n   */\\n  uint256 public immutable chainId;\\n\\n  /**\\n   * @notice The EIP-712 domain separator.\\n   */\\n  bytes32 public immutable domainSeparator;\\n\\n  /**\\n   * @notice A mapping of bid info hashes to whether they have been used.\\n   */\\n  mapping(bytes32 => bool) public usedBidInfoHashes;\\n\\n  /**\\n   * @notice A mapping of acceptance info hashes to whether they have been used.\\n   */\\n  mapping(bytes32 => bool) public usedAcceptanceInfoHashes;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n  constructor(address _roleAuthority, string memory name, string memory version) {\\n    /* \\n      There is no way to update the domain separator, as the contract has no owner or admin.\\n\\n      If there is a network fork that changes the chain id, a new contract needs to be deployed\\n      and minting ability of the old one must be revoked.\\n\\n      In case of a new contract deployment, the version of the new contract MUST be updated,\\n      so that filled orders from past versions are not valid.  \\n    */\\n    domainSeparator = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(bytes(name)),\\n        keccak256(bytes(version)),\\n        block.chainid,\\n        address(this)\\n      )\\n    );\\n    chainId = block.chainid;\\n    roleAuthority = IRoleAuthority(_roleAuthority);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 EXTERNAL\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Used to invalidate a bid on chain.\\n   * @dev Can only be called by the bidder.\\n   * @param bidInfo Bid info struct.\\n   */\\n  function invalidateBid(MintStructs.BidInfo calldata bidInfo) external {\\n    if (bidInfo.bidderAddress != msg.sender) {\\n      revert NotAuthorized();\\n    }\\n\\n    usedBidInfoHashes[bidInfo.hash()] = true;\\n  }\\n\\n  /**\\n   * @notice Validates a settlement using the bid info, acceptance info, and mint pass\\n   * @param settlement Contains all the info required to validate and execute settlement on chain.\\n   * @param msgValue The amount of ETH sent with the transaction.\\n   * @param msgSender The address of the sender of the transaction.\\n   * @return bidHash The hash of the bid info.\\n   */\\n  function validateSettlement(\\n    MintStructs.Settlement calldata settlement,\\n    uint256 msgValue,\\n    address msgSender\\n  ) external returns (bytes32 bidHash) {\\n    if (!roleAuthority.is721Minter(msg.sender)) {\\n      revert NotAuthorized();\\n    }\\n\\n    if (settlement.bidInfo.bidderAddress != msgSender) {\\n      revert NonBidderSettle();\\n    }\\n\\n    if (msgValue < settlement.bidInfo.priceInWei) {\\n      revert BidPriceNotMet();\\n    }\\n\\n    IDecaCollection collection = IDecaCollection(settlement.acceptanceInfo.collectionAddress);\\n\\n    bidHash = settlement.bidInfo.hash();\\n    bytes32 acceptanceHash = settlement.acceptanceInfo.hash();\\n\\n    // Check bid info hash and acceptance info hash haven't been used\\n    if (usedBidInfoHashes[bidHash] || usedAcceptanceInfoHashes[acceptanceHash]) {\\n      revert SignatureRepeated();\\n    }\\n\\n    // Mark bid info hash and acceptance info hash as used\\n    usedBidInfoHashes[bidHash] = true;\\n    usedAcceptanceInfoHashes[acceptanceHash] = true;\\n\\n    // Check token id hasn't been created already\\n    if (collection.mintTimestamps(settlement.bidInfo.tokenId) > 0) {\\n      revert TokenAlreadyCreated();\\n    }\\n\\n    // Check creator of the collection is the same as the address signing the acceptance info\\n    if (collection.creator() != settlement.acceptanceInfo.creatorAddress) {\\n      revert UnauthorizedAcceptanceSigner();\\n    }\\n\\n    // Check bid not expired\\n    if (settlement.bidInfo.expiresAt < block.timestamp) {\\n      revert BidExpired();\\n    }\\n\\n    // Check mint pass signature has not expired\\n    if (settlement.mintPass.expiresAt < block.timestamp) {\\n      revert MintPassExpired();\\n    }\\n\\n    // Check mint pass signer is actually allowed to sign\\n    if (!roleAuthority.isMintPassSigner(settlement.mintPass.signer)) {\\n      revert UnauthorizedMintPassSigner();\\n    }\\n\\n    // Check that the provided bid signature matches the one in the acceptance info\\n    if (!(keccak256(settlement.bidSignature) == settlement.acceptanceInfo.bidSignatureHash)) {\\n      revert BidSignatureMismatch();\\n    }\\n\\n    // Check that the provided acceptance signature matches the one in the mint pass\\n    if (!(keccak256(settlement.acceptanceSignature) == settlement.mintPass.acceptanceSignatureHash)) {\\n      revert AcceptanceSignatureMismatch();\\n    }\\n\\n    // Check that the bid info has been signed by the expected address\\n    if (!_verifySignature(bidHash, settlement.bidSignature, settlement.bidInfo.bidderAddress)) {\\n      revert BidSignatureInvalid();\\n    }\\n\\n    // Check that the acceptance info has been signed by the expected address\\n    if (!_verifySignature(acceptanceHash, settlement.acceptanceSignature, settlement.acceptanceInfo.creatorAddress)) {\\n      revert AcceptanceSignatureInvalid();\\n    }\\n\\n    // Check mint pass signature has been signed by the expected address\\n    if (!_verifySignature(settlement.mintPass.hash(), settlement.mintPassSignature, settlement.mintPass.signer)) {\\n      revert MintPassSignatureInvalid();\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 EXTERNAL VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Validates a collection info struct\\n   * @param collectionInfo Contains all the collection info\\n   * @param signature Signature used to sign the collection info\\n   */\\n  function validateCollectionInfo(\\n    MintStructs.CollectionInfo calldata collectionInfo,\\n    bytes calldata signature\\n  ) external view {\\n    if (!roleAuthority.is721Minter(msg.sender)) {\\n      revert NotAuthorized();\\n    }\\n\\n    bytes32 collectionInfoHash = collectionInfo.hash();\\n\\n    // Check mint pass signer is actually allowed to sign\\n    if (!roleAuthority.isMintPassSigner(collectionInfo.signer)) {\\n      revert UnauthorizedCollectionInfoSigner();\\n    }\\n\\n    if (!_verifySignature(collectionInfoHash, signature, collectionInfo.signer)) {\\n      revert CollectionInfoSignatureInvalid();\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////\\n                                 INTERNAL VIEW\\n    //////////////////////////////////////////////////////////////*/\\n\\n  /**\\n   * @notice Used to verify the chain id, compute the digest, and verify the signature.\\n   * @dev If chainId is not equal to the cached chain id, it would revert.\\n   * @param computedHash Hash of order (maker bid or maker ask) or merkle root\\n   * @param signature Signature of the maker\\n   * @param signer Signer address\\n   */\\n  function _verifySignature(\\n    bytes32 computedHash,\\n    bytes calldata signature,\\n    address signer\\n  ) internal view returns (bool) {\\n    if (chainId == block.chainid) {\\n      return\\n        SignatureChecker.isValidSignatureNow(signer, ECDSA.toTypedDataHash(domainSeparator, computedHash), signature);\\n    } else {\\n      revert ChainIdInvalid();\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/IDecaCollection.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nstruct Recipient {\\n  address payable recipient;\\n  uint16 bps;\\n}\\n\\ninterface IDecaCollection {\\n  error InvalidTokenId();\\n  error OnlyCreator();\\n  error OnlyMinterOrCreator();\\n  error NotTokenOwnerOrApproved();\\n  error ERC20SplitFailed();\\n  error TotalBpsMustBe10000();\\n  error EthTransferFailed();\\n\\n  /**\\n   * @notice Emitted when ETH is transferred.\\n   * @param account The address of the account which received the ETH.\\n   * @param amount The amount of ETH transferred.\\n   */\\n  event ETHTransferred(address indexed account, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when an ERC20 token is transferred.\\n   * @param erc20Contract The address of the ERC20 contract.\\n   * @param account The address of the account which received the ERC20.\\n   * @param amount The amount of ERC20 transferred.\\n   */\\n  event ERC20Transferred(address indexed erc20Contract, address indexed account, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when the token URI is set on a token.\\n   * @param tokenId The id of the token.\\n   * @param tokenURI The token URI of the token.\\n   */\\n  event TokenUriSet(uint256 indexed tokenId, string tokenURI);\\n\\n  /**\\n   * @notice Emitted when the treasury address is updated.\\n   * @param treasury The address of the new treasury.\\n   */\\n  event TreasuryUpdated(address indexed treasury);\\n\\n  /**\\n   * @notice Emitted when the royalty bps is updated.\\n   * @param royaltyBps The royalty bps.\\n   */\\n  event RoyaltyBpsUpdated(uint256 royaltyBps);\\n\\n  function initialize(\\n    address factory_,\\n    address creator_,\\n    address roleAuthority_,\\n    string calldata name_,\\n    string calldata symbol_,\\n    Recipient[] calldata recipients\\n  ) external;\\n\\n  function creator() external view returns (address);\\n\\n  function exists(uint256 tokenId) external view returns (bool);\\n\\n  function mint(address to, uint256 tokenId) external;\\n\\n  function burn(uint256 tokenId) external;\\n\\n  function mintTimestamps(uint256 tokenId) external view returns (uint256);\\n\\n  function setRecipients(Recipient[] calldata recipients) external;\\n\\n  function setTreasuryAddress(address treasury_) external;\\n\\n  function setRoyaltyBps(uint256 royaltyBps_) external;\\n\\n  function getRecipients() external view returns (Recipient[] memory);\\n\\n  function royaltyInfo(uint256, uint256 _salePrice) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/IRoleAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\ninterface IRoleAuthority {\\n  function isOperator(address _address) external view returns (bool);\\n\\n  function is721Minter(address _address) external view returns (bool);\\n\\n  function isMintPassSigner(address _address) external view returns (bool);\\n\\n  function isPosterMinter(address _address) external view returns (bool);\\n\\n  function isPosterSigner(address _address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/internal/ISettlementValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport {MintStructs} from \\\"../../deca-collections/libraries/MintStructs.sol\\\";\\n\\ninterface ISettlementValidator {\\n  error ChainIdInvalid();\\n  error SignatureRepeated();\\n  error BidSignatureMismatch();\\n  error AcceptanceSignatureMismatch();\\n  error BidExpired();\\n  error MintPassExpired();\\n  error UnauthorizedMintPassSigner();\\n  error UnauthorizedAcceptanceSigner();\\n  error MintPassSignatureInvalid();\\n  error BidSignatureInvalid();\\n  error AcceptanceSignatureInvalid();\\n  error NotAuthorized();\\n  error TokenAlreadyCreated();\\n  error BidPriceNotMet();\\n  error NonBidderSettle();\\n  error UnauthorizedCollectionInfoSigner();\\n  error CollectionInfoSignatureInvalid();\\n\\n  function usedBidInfoHashes(bytes32 _hash) external view returns (bool);\\n\\n  function usedAcceptanceInfoHashes(bytes32 _hash) external view returns (bool);\\n\\n  function invalidateBid(MintStructs.BidInfo calldata bidInfo) external;\\n\\n  function validateSettlement(\\n    MintStructs.Settlement calldata settlement,\\n    uint256 msgValue,\\n    address msgSender\\n  ) external returns (bytes32 hash);\\n\\n  function validateCollectionInfo(\\n    MintStructs.CollectionInfo calldata collectionInfo,\\n    bytes calldata signature\\n  ) external view;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roleAuthority\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AcceptanceSignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AcceptanceSignatureMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidPriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidSignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BidSignatureMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainIdInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionInfoSignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintPassExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintPassSignatureInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonBidderSettle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureRepeated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAcceptanceSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCollectionInfoSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedMintPassSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"}],\"internalType\":\"struct MintStructs.BidInfo\",\"name\":\"bidInfo\",\"type\":\"tuple\"}],\"name\":\"invalidateBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleAuthority\",\"outputs\":[{\"internalType\":\"contract IRoleAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedAcceptanceInfoHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedBidInfoHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"bps\",\"type\":\"uint16\"}],\"internalType\":\"struct Recipient[]\",\"name\":\"royaltyRecipients\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MintStructs.CollectionInfo\",\"name\":\"collectionInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateCollectionInfo\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"bidSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"acceptanceSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"mintPassSignature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidderAddress\",\"type\":\"address\"}],\"internalType\":\"struct MintStructs.BidInfo\",\"name\":\"bidInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"bidSignatureHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct MintStructs.Payslip[]\",\"name\":\"payslips\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MintStructs.AcceptanceInfo\",\"name\":\"acceptanceInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"bidSignatureHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"acceptanceSignatureHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"internalType\":\"struct MintStructs.MintPass\",\"name\":\"mintPass\",\"type\":\"tuple\"}],\"internalType\":\"struct MintStructs.Settlement\",\"name\":\"settlement\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"validateSettlement\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"bidHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SettlementValidator", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "0000000000000000000000007bcbbb69272937edd5b7b5bdd4a8ccd159c5dfbd000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000001744656361536574746c656d656e7456616c696461746f720000000000000000000000000000000000000000000000000000000000000000000000000000000005312e302e30000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}