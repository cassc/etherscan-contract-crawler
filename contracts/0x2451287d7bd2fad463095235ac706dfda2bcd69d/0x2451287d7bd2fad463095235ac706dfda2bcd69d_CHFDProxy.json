{"SourceCode": "pragma solidity ^0.7.6;\r\n\r\n// SPDX-License-Identifier: MIT\r\n// Source code: https://github.com/DeCash-Official/smart-contracts\r\n\r\ninterface DeCashProxyInterface {\r\n    function initialize(string memory _tokenName, address _tokenAddr) external;\r\n\r\n    function upgrade(address _new) external;\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface DeCashStorageInterface {\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n\r\n    function getUint(bytes32 _key) external view returns (uint256);\r\n\r\n    function getString(bytes32 _key) external view returns (string memory);\r\n\r\n    function getBytes(bytes32 _key) external view returns (bytes memory);\r\n\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n\r\n    function getInt(bytes32 _key) external view returns (int256);\r\n\r\n    function getBytes32(bytes32 _key) external view returns (bytes32);\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n\r\n    function setUint(bytes32 _key, uint256 _value) external;\r\n\r\n    function setString(bytes32 _key, string calldata _value) external;\r\n\r\n    function setBytes(bytes32 _key, bytes calldata _value) external;\r\n\r\n    function setBool(bytes32 _key, bool _value) external;\r\n\r\n    function setInt(bytes32 _key, int256 _value) external;\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value) external;\r\n\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n\r\n    function deleteUint(bytes32 _key) external;\r\n\r\n    function deleteString(bytes32 _key) external;\r\n\r\n    function deleteBytes(bytes32 _key) external;\r\n\r\n    function deleteBool(bytes32 _key) external;\r\n\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    function deleteBytes32(bytes32 _key) external;\r\n}\r\n\r\n/// @title Base settings / modifiers for each contract in DeCash Token (Credits David Rugendyke/Rocket Pool)\r\n/// @author Fabrizio Amodio (ZioFabry)\r\n\r\nabstract contract DeCashBase {\r\n    // Version of the contract\r\n    uint8 public version;\r\n\r\n    // The main storage contract where primary persistant storage is maintained\r\n    DeCashStorageInterface internal _decashStorage = DeCashStorageInterface(0);\r\n\r\n    /**\r\n     * @dev Throws if called by any sender that doesn't match one of the supplied contract or is the latest version of that contract\r\n     */\r\n    modifier onlyLatestContract(\r\n        string memory _contractName,\r\n        address _contractAddress\r\n    ) {\r\n        require(\r\n            _contractAddress ==\r\n                _getAddress(\r\n                    keccak256(\r\n                        abi.encodePacked(\"contract.address\", _contractName)\r\n                    )\r\n                ),\r\n            \"Invalid or outdated contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_isOwner(msg.sender), \"Account is not the owner\");\r\n        _;\r\n    }\r\n    modifier onlyAdmin() {\r\n        require(_isAdmin(msg.sender), \"Account is not an admin\");\r\n        _;\r\n    }\r\n    modifier onlySuperUser() {\r\n        require(_isSuperUser(msg.sender), \"Account is not a super user\");\r\n        _;\r\n    }\r\n    modifier onlyDelegator(address _address) {\r\n        require(_isDelegator(_address), \"Account is not a delegator\");\r\n        _;\r\n    }\r\n    modifier onlyFeeRecipient(address _address) {\r\n        require(_isFeeRecipient(_address), \"Account is not a fee recipient\");\r\n        _;\r\n    }\r\n    modifier onlyRole(string memory _role) {\r\n        require(_roleHas(_role, msg.sender), \"Account does not match the role\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Set the main DeCash Storage address\r\n    constructor(address _decashStorageAddress) {\r\n        // Update the contract address\r\n        _decashStorage = DeCashStorageInterface(_decashStorageAddress);\r\n    }\r\n\r\n    function isOwner(address _address) external view returns (bool) {\r\n        return _isOwner(_address);\r\n    }\r\n\r\n    function isAdmin(address _address) external view returns (bool) {\r\n        return _isAdmin(_address);\r\n    }\r\n\r\n    function isSuperUser(address _address) external view returns (bool) {\r\n        return _isSuperUser(_address);\r\n    }\r\n\r\n    function isDelegator(address _address) external view returns (bool) {\r\n        return _isDelegator(_address);\r\n    }\r\n\r\n    function isFeeRecipient(address _address) external view returns (bool) {\r\n        return _isFeeRecipient(_address);\r\n    }\r\n\r\n    function isBlacklisted(address _address) external view returns (bool) {\r\n        return _isBlacklisted(_address);\r\n    }\r\n\r\n    /// @dev Get the address of a network contract by name\r\n    function _getContractAddress(string memory _contractName)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        // Get the current contract address\r\n        address contractAddress =\r\n            _getAddress(\r\n                keccak256(abi.encodePacked(\"contract.address\", _contractName))\r\n            );\r\n        // Check it\r\n        require(contractAddress != address(0x0), \"Contract not found\");\r\n        // Return\r\n        return contractAddress;\r\n    }\r\n\r\n    /// @dev Get the name of a network contract by address\r\n    function _getContractName(address _contractAddress)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        // Get the contract name\r\n        string memory contractName =\r\n            _getString(\r\n                keccak256(abi.encodePacked(\"contract.name\", _contractAddress))\r\n            );\r\n        // Check it\r\n        require(\r\n            keccak256(abi.encodePacked(contractName)) !=\r\n                keccak256(abi.encodePacked(\"\")),\r\n            \"Contract not found\"\r\n        );\r\n        // Return\r\n        return contractName;\r\n    }\r\n\r\n    /// @dev Role Management\r\n    function _roleHas(string memory _role, address _address)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            _getBool(\r\n                keccak256(abi.encodePacked(\"access.role\", _role, _address))\r\n            );\r\n    }\r\n\r\n    function _isOwner(address _address) internal view returns (bool) {\r\n        return _roleHas(\"owner\", _address);\r\n    }\r\n\r\n    function _isAdmin(address _address) internal view returns (bool) {\r\n        return _roleHas(\"admin\", _address);\r\n    }\r\n\r\n    function _isSuperUser(address _address) internal view returns (bool) {\r\n        return _roleHas(\"admin\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isDelegator(address _address) internal view returns (bool) {\r\n        return _roleHas(\"delegator\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isFeeRecipient(address _address) internal view returns (bool) {\r\n        return _roleHas(\"fee\", _address) || _isOwner(_address);\r\n    }\r\n\r\n    function _isBlacklisted(address _address) internal view returns (bool) {\r\n        return _roleHas(\"blacklisted\", _address) && !_isOwner(_address);\r\n    }\r\n\r\n    /// @dev Storage get methods\r\n    function _getAddress(bytes32 _key) internal view returns (address) {\r\n        return _decashStorage.getAddress(_key);\r\n    }\r\n\r\n    function _getUint(bytes32 _key) internal view returns (uint256) {\r\n        return _decashStorage.getUint(_key);\r\n    }\r\n\r\n    function _getString(bytes32 _key) internal view returns (string memory) {\r\n        return _decashStorage.getString(_key);\r\n    }\r\n\r\n    function _getBytes(bytes32 _key) internal view returns (bytes memory) {\r\n        return _decashStorage.getBytes(_key);\r\n    }\r\n\r\n    function _getBool(bytes32 _key) internal view returns (bool) {\r\n        return _decashStorage.getBool(_key);\r\n    }\r\n\r\n    function _getInt(bytes32 _key) internal view returns (int256) {\r\n        return _decashStorage.getInt(_key);\r\n    }\r\n\r\n    function _getBytes32(bytes32 _key) internal view returns (bytes32) {\r\n        return _decashStorage.getBytes32(_key);\r\n    }\r\n\r\n    function _getAddressS(string memory _key) internal view returns (address) {\r\n        return _decashStorage.getAddress(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getUintS(string memory _key) internal view returns (uint256) {\r\n        return _decashStorage.getUint(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getStringS(string memory _key)\r\n        internal\r\n        view\r\n        returns (string memory)\r\n    {\r\n        return _decashStorage.getString(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBytesS(string memory _key)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return _decashStorage.getBytes(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBoolS(string memory _key) internal view returns (bool) {\r\n        return _decashStorage.getBool(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getIntS(string memory _key) internal view returns (int256) {\r\n        return _decashStorage.getInt(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _getBytes32S(string memory _key) internal view returns (bytes32) {\r\n        return _decashStorage.getBytes32(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    /// @dev Storage set methods\r\n    function _setAddress(bytes32 _key, address _value) internal {\r\n        _decashStorage.setAddress(_key, _value);\r\n    }\r\n\r\n    function _setUint(bytes32 _key, uint256 _value) internal {\r\n        _decashStorage.setUint(_key, _value);\r\n    }\r\n\r\n    function _setString(bytes32 _key, string memory _value) internal {\r\n        _decashStorage.setString(_key, _value);\r\n    }\r\n\r\n    function _setBytes(bytes32 _key, bytes memory _value) internal {\r\n        _decashStorage.setBytes(_key, _value);\r\n    }\r\n\r\n    function _setBool(bytes32 _key, bool _value) internal {\r\n        _decashStorage.setBool(_key, _value);\r\n    }\r\n\r\n    function _setInt(bytes32 _key, int256 _value) internal {\r\n        _decashStorage.setInt(_key, _value);\r\n    }\r\n\r\n    function _setBytes32(bytes32 _key, bytes32 _value) internal {\r\n        _decashStorage.setBytes32(_key, _value);\r\n    }\r\n\r\n    function _setAddressS(string memory _key, address _value) internal {\r\n        _decashStorage.setAddress(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setUintS(string memory _key, uint256 _value) internal {\r\n        _decashStorage.setUint(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setStringS(string memory _key, string memory _value) internal {\r\n        _decashStorage.setString(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBytesS(string memory _key, bytes memory _value) internal {\r\n        _decashStorage.setBytes(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBoolS(string memory _key, bool _value) internal {\r\n        _decashStorage.setBool(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setIntS(string memory _key, int256 _value) internal {\r\n        _decashStorage.setInt(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    function _setBytes32S(string memory _key, bytes32 _value) internal {\r\n        _decashStorage.setBytes32(keccak256(abi.encodePacked(_key)), _value);\r\n    }\r\n\r\n    /// @dev Storage delete methods\r\n    function _deleteAddress(bytes32 _key) internal {\r\n        _decashStorage.deleteAddress(_key);\r\n    }\r\n\r\n    function _deleteUint(bytes32 _key) internal {\r\n        _decashStorage.deleteUint(_key);\r\n    }\r\n\r\n    function _deleteString(bytes32 _key) internal {\r\n        _decashStorage.deleteString(_key);\r\n    }\r\n\r\n    function _deleteBytes(bytes32 _key) internal {\r\n        _decashStorage.deleteBytes(_key);\r\n    }\r\n\r\n    function _deleteBool(bytes32 _key) internal {\r\n        _decashStorage.deleteBool(_key);\r\n    }\r\n\r\n    function _deleteInt(bytes32 _key) internal {\r\n        _decashStorage.deleteInt(_key);\r\n    }\r\n\r\n    function _deleteBytes32(bytes32 _key) internal {\r\n        _decashStorage.deleteBytes32(_key);\r\n    }\r\n\r\n    function _deleteAddressS(string memory _key) internal {\r\n        _decashStorage.deleteAddress(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteUintS(string memory _key) internal {\r\n        _decashStorage.deleteUint(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteStringS(string memory _key) internal {\r\n        _decashStorage.deleteString(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBytesS(string memory _key) internal {\r\n        _decashStorage.deleteBytes(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBoolS(string memory _key) internal {\r\n        _decashStorage.deleteBool(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteIntS(string memory _key) internal {\r\n        _decashStorage.deleteInt(keccak256(abi.encodePacked(_key)));\r\n    }\r\n\r\n    function _deleteBytes32S(string memory _key) internal {\r\n        _decashStorage.deleteBytes32(keccak256(abi.encodePacked(_key)));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\r\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\r\n * be specified by overriding the virtual {_implementation} function.\r\n *\r\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\r\n * different contract through the {_delegate} function.\r\n *\r\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable {\r\n        _fallback();\r\n    }\r\n\r\n    /**\r\n     * @dev Delegates the current call to `implementation`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _delegate(address implementation) internal {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(\r\n                gas(),\r\n                implementation,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n                // delegatecall returns 0 on error.\r\n                case 0 {\r\n                    revert(0, returndatasize())\r\n                }\r\n                default {\r\n                    return(0, returndatasize())\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\r\n     * and {_fallback} should delegate.\r\n     */\r\n    function _implementation() internal view virtual returns (address);\r\n\r\n    /**\r\n     * @dev Delegates the current call to the address returned by `_implementation()`.\r\n     *\r\n     * This function does not return to its internall call site, it will return directly to the external caller.\r\n     */\r\n    function _fallback() internal {\r\n        _beforeFallback();\r\n        _delegate(_implementation());\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\r\n     * call, or as part of the Solidity `fallback` or `receive` functions.\r\n     *\r\n     * If overriden should call `super._beforeFallback()`.\r\n     */\r\n    function _beforeFallback() internal virtual {}\r\n}\r\n\r\n/// @title DeCash Proxy Contract\r\n/// @author Fabrizio Amodio (ZioFabry)\r\n\r\ncontract DeCashProxy is DeCashBase, Proxy {\r\n    bytes32 private constant _IMPLEMENTATION_SLOT =\r\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    event ProxyInitiated(address indexed implementation);\r\n    event ProxyUpgraded(address indexed implementation);\r\n\r\n    // Construct\r\n    constructor(address _decashStorageAddress)\r\n        DeCashBase(_decashStorageAddress)\r\n    {\r\n        assert(\r\n            _IMPLEMENTATION_SLOT ==\r\n                bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1)\r\n        );\r\n        version = 1;\r\n    }\r\n\r\n    function upgrade(address _address)\r\n        public\r\n        onlyLatestContract(\"upgrade\", msg.sender)\r\n    {\r\n        _setImplementation(_address);\r\n\r\n        emit ProxyUpgraded(_address);\r\n    }\r\n\r\n    function initialize(address _address) external onlyOwner {\r\n        require(\r\n            !_getBool(keccak256(abi.encodePacked(\"proxy.init\", address(this)))),\r\n            \"Proxy already initialized\"\r\n        );\r\n\r\n        _setImplementation(_address);\r\n        _setBool(keccak256(abi.encodePacked(\"proxy.init\", address(this))), true);\r\n\r\n        emit ProxyInitiated(_address);\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address _address) private {\r\n        require(Address.isContract(_address), \"address is not a contract\");\r\n\r\n        bytes32 slot = _IMPLEMENTATION_SLOT;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, _address)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _implementation() internal view override returns (address impl) {\r\n        bytes32 slot = _IMPLEMENTATION_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n}\r\n\r\ncontract CHFDProxy is DeCashProxy {\r\n    constructor(address _storage) DeCashProxy(_storage) {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ProxyInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ProxyUpgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isDelegator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFeeRecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isSuperUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CHFDProxy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000096ef11f704044ed3e0b6fb40276c118f419df531", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0xd12cadc1cdf334338b71a606eebde373ac836662", "SwarmSource": "ipfs://f72565993599e2034297f5b6578c29314c120c4d8f1817b6c280c0318cb4e6e0"}