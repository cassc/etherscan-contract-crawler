{"SourceCode": "pragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\tfunction mul(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a * b;\r\n\t\tassert(a == 0 || c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction safeSub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\tfunction div(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b > 0);\r\n\t\tuint c = a / b;\r\n\t\tassert(a == b * c + a % b);\r\n\t\treturn c;\r\n\t}\r\n\tfunction sub(uint a, uint b) internal returns (uint) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\tfunction add(uint a, uint b) internal returns (uint) {\r\n\t\tuint c = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n\tfunction max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\tfunction min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\tfunction max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\tfunction min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\tfunction assert(bool assertion) internal {\r\n\t\tif (!assertion) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) throw;\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n\tbool public stopped;\r\n\tmodifier stopInEmergency {\r\n\t\tif (stopped) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyInEmergency {\r\n\t\tif (!stopped) {\r\n\t\t  throw;\r\n\t\t}\r\n\t_;\r\n\t}\r\n\t// called by the owner on emergency, triggers stopped state\r\n\tfunction emergencyStop() external onlyOwner {\r\n\t\tstopped = true;\r\n\t}\r\n\t// called by the owner on end of emergency, returns to normal state\r\n\tfunction release() external onlyOwner onlyInEmergency {\r\n\t\tstopped = false;\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title PullPayment\r\n * @dev Base contract supporting async send for pull payments. Inherit from this\r\n * contract and use asyncSend instead of send.\r\n */\r\ncontract PullPayment {\r\n\tusing SafeMath for uint;\r\n\r\n\tmapping(address => uint) public payments;\r\n\tevent LogRefundETH(address to, uint value);\r\n\t/**\r\n\t*  Store sent amount as credit to be pulled, called by payer \r\n\t**/\r\n\tfunction asyncSend(address dest, uint amount) internal {\r\n\t\tpayments[dest] = payments[dest].add(amount);\r\n\t}\r\n\t// withdraw accumulated balance, called by payee\r\n\tfunction withdrawPayments() {\r\n\t\taddress payee = msg.sender;\r\n\t\tuint payment = payments[payee];\r\n\r\n\t\tif (payment == 0) {\r\n\t\t\tthrow;\r\n\t\t}\r\n\t\tif (this.balance < payment) {\r\n\t\t    throw;\r\n\t\t}\r\n\t\tpayments[payee] = 0;\r\n\t\tif (!payee.send(payment)) {\r\n\t\t    throw;\r\n\t\t}\r\n\t\tLogRefundETH(payee,payment);\r\n\t}\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n\tuint public totalSupply;\r\n\tfunction balanceOf(address who) constant returns (uint);\r\n\tfunction transfer(address to, uint value);\r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n\tfunction allowance(address owner, address spender) constant returns (uint);\r\n\tfunction transferFrom(address from, address to, uint value);\r\n\tfunction approve(address spender, uint value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  \r\n\tusing SafeMath for uint;\r\n\r\n\tmapping(address => uint) balances;\r\n\r\n\t/*\r\n\t* Fix for the ERC20 short address attack  \r\n\t*/\r\n\tmodifier onlyPayloadSize(uint size) {\r\n\t   if(msg.data.length < size + 4) {\r\n\t     throw;\r\n\t   }\r\n\t _;\r\n\t}\r\n\tfunction transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\r\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tTransfer(msg.sender, _to, _value);\r\n\t}\r\n\tfunction balanceOf(address _owner) constant returns (uint balance) {\r\n\t\treturn balances[_owner];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken, ERC20 {\r\n\tmapping (address => mapping (address => uint)) allowed;\r\n\tfunction transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\r\n\t\tvar _allowance = allowed[_from][msg.sender];\r\n\t\tbalances[_to] = balances[_to].add(_value);\r\n\t\tbalances[_from] = balances[_from].sub(_value);\r\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\r\n\t\tTransfer(_from, _to, _value);\r\n    }\r\n\tfunction approve(address _spender, uint _value) {\r\n\t\tif ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\r\n\t\tallowed[msg.sender][_spender] = _value;\r\n\t\tApproval(msg.sender, _spender, _value);\r\n\t}\r\n\tfunction allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n\t\treturn allowed[_owner][_spender];\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n *  ClusterToken presale contract.\r\n */\r\ncontract ClusterToken is StandardToken, PullPayment, Ownable, Pausable {\r\n\t\r\n  using SafeMath for uint;\r\n  \r\n  struct Backer {\r\n        address buyer;\r\n        uint contribution;\r\n        uint withdrawnAtSegment;\r\n        uint withdrawnAtCluster;\r\n        bool state;\r\n    }\r\n    \r\n    /**\r\n     * Variables\r\n    */\r\n    string public constant name = \"ClusterToken\";\r\n    string public constant symbol = \"CLRT\";\r\n    uint256 public constant decimals = 18;\r\n    uint256 private buyPriceEth = 10000000000000000;\r\n    \r\n    uint256 public initialBlockCount;\r\n    uint256 private testBlockEnd;\r\n    uint256 public contributors;\r\n    \r\n    uint256 private minedBlocks;\r\n    uint256 private ClusterCurrent;\r\n    uint256 private SegmentCurrent;\r\n    uint256 private UnitCurrent;\r\n  \r\n  \r\n    mapping(address => Backer) public backers;\r\n    \r\n   \r\n    /**\r\n     * @dev Contract constructor\r\n     */ \r\n    function ClusterToken() {\r\n    totalSupply = 750000000000000000000;\r\n    balances[msg.sender] = totalSupply;\r\n    \r\n    initialBlockCount = 4086356;\r\n\r\n    contributors = 0;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return Returns the current amount of CLUSTERS\r\n     */ \r\n    function currentCluster() constant returns (uint256 currentCluster)\r\n    {\r\n    \tuint blockCount = block.number - initialBlockCount;\r\n    \tuint result = blockCount.div(1000000);\r\n    \treturn result;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return Returns the current amount of SEGMENTS\r\n     */ \r\n    function currentSegment() constant returns (uint256 currentSegment)\r\n    {\r\n    \tuint blockCount = block.number - initialBlockCount;\r\n    \tuint newSegment = currentCluster().mul(1000);\r\n    \tuint result = blockCount.div(1000).sub(newSegment);\r\n\r\n    \treturn result;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return Returns the current amount of UNITS\r\n     */ \r\n    function currentUnit() constant returns (uint256 currentUnit)\r\n    {\r\n    \tuint blockCount = block.number - initialBlockCount;\r\n    \tuint getClusters = currentCluster().mul(1000000);\r\n        uint newUnit = currentSegment().mul(1000);\r\n    \treturn blockCount.sub(getClusters).sub(newUnit);      \r\n    \t\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @return Returns the current network block\r\n     */ \r\n    function currentBlock() constant returns (uint256 blockNumber)\r\n    {\r\n    \treturn block.number - initialBlockCount;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Allows users to buy CLUSTER and receive their tokens at once.\r\n     * @return The amount of CLUSTER bought by sender.\r\n     */ \r\n    function buyClusterToken() payable returns (uint amount) {\r\n        \r\n        if (balances[this] < amount) throw;                          \r\n        amount = msg.value.mul(buyPriceEth).div(1 ether);\r\n        balances[msg.sender] += amount;\r\n        balances[this] -= amount;\r\n        Transfer(this, msg.sender, amount);\r\n        \r\n        Backer backer = backers[msg.sender];\r\n        backer.contribution = backer.contribution.add(amount);\r\n        backer.withdrawnAtSegment = backer.withdrawnAtSegment.add(0);\r\n        backer.withdrawnAtCluster = backer.withdrawnAtCluster.add(0);\r\n        backer.state = backer.state = true;\r\n        \r\n        contributors++;\r\n        \r\n        return amount;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Allows users to claim CLUSTER every 1000 SEGMENTS (1.000.000 blocks).\r\n     * @return The amount of CLUSTER claimed by sender.\r\n     */\r\n    function claimClusters() public returns (uint amount) {\r\n        \r\n        if (currentSegment() == 0) throw;\r\n        if (!backers[msg.sender].state) throw; \r\n        \r\n        uint previousWithdraws = backers[msg.sender].withdrawnAtCluster;\r\n        uint entitledToClusters = currentCluster().sub(previousWithdraws);\r\n        \r\n        if (entitledToClusters == 0) throw;\r\n        if (!isEntitledForCluster(msg.sender)) throw;\r\n        \r\n        uint userShares = backers[msg.sender].contribution.div(1 finney);\r\n        uint amountForPayout = buyPriceEth.div(contributors);\r\n        \r\n        amount =  amountForPayout.mul(userShares).mul(1000);                           \r\n        \r\n        balances[msg.sender] += amount;\r\n        balances[this] -= amount;\r\n        Transfer(this, msg.sender, amount);\r\n        \r\n        backers[msg.sender].withdrawnAtCluster = currentCluster(); \r\n        \r\n        return amount;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Allows users to claim segments every 1000 UNITS (blocks).\r\n     * @dev NOTE: Users claiming SEGMENTS instead of CLUSTERS get only half of the reward.\r\n     * @return The amount of SEGMENTS claimed by sender.\r\n     */\r\n    function claimSegments() public returns (uint amount) {\r\n        \r\n        if (currentSegment() == 0) throw;\r\n        if (!backers[msg.sender].state) throw;  \r\n        \r\n        \r\n        uint previousWithdraws = currentCluster().add(backers[msg.sender].withdrawnAtSegment);\r\n        uint entitledToSegments = currentCluster().add(currentSegment().sub(previousWithdraws));\r\n        \r\n        if (entitledToSegments == 0 ) throw;\r\n        \r\n        uint userShares = backers[msg.sender].contribution.div(1 finney);\r\n        uint amountForPayout = buyPriceEth.div(contributors);\r\n        \r\n        amount =  amountForPayout.mul(userShares).div(10).div(2);                           \r\n        \r\n        balances[msg.sender] += amount;\r\n        balances[this] -= amount;\r\n        Transfer(this, msg.sender, amount);\r\n        \r\n        backers[msg.sender].withdrawnAtSegment = currentSegment(); \r\n        \r\n        return amount;\r\n    }\r\n\r\n    \r\n    /**\r\n     * @dev Function if users send funds to this contract, call the buy function.\r\n     */ \r\n    function() payable {\r\n        if (msg.sender != owner) {\r\n            buyClusterToken();\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Allows owner to withdraw funds from the account.\r\n     */ \r\n    function Drain() onlyOwner public {\r\n        if(this.balance > 0) {\r\n            if (!owner.send(this.balance)) throw;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n    *  Burn away the specified amount of ClusterToken tokens.\r\n    * @return Returns success boolean.\r\n    */\r\n    function burn(uint _value) onlyOwner returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Transfer(msg.sender, 0x0, _value);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * @dev Internal check to see if at least 1000 segments passed without withdrawal prior to rewarding a cluster\r\n     */ \r\n    function isEntitledForCluster(address _sender) private constant returns (bool) {\r\n        \r\n        uint t1 = currentCluster().mul(1000).add(currentSegment()); \r\n        uint t2 = backers[_sender].withdrawnAtSegment;      \r\n\r\n        if (t1.sub(t2) >= 1000) { return true; }\r\n        return false;\r\n        \r\n    }\r\n    \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentUnit\",\"outputs\":[{\"name\":\"currentUnit\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPayments\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimSegments\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyClusterToken\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":true,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentSegment\",\"outputs\":[{\"name\":\"currentSegment\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentCluster\",\"outputs\":[{\"name\":\"currentCluster\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"backers\",\"outputs\":[{\"name\":\"buyer\",\"type\":\"address\"},{\"name\":\"contribution\",\"type\":\"uint256\"},{\"name\":\"withdrawnAtSegment\",\"type\":\"uint256\"},{\"name\":\"withdrawnAtCluster\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimClusters\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"Drain\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentBlock\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialBlockCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"payable\":true,\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRefundETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "ClusterToken", "CompilerVersion": "v0.4.11+commit.68ef5810", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5921529dc31cd98e5e6a10fc52c855ecb617f657ff728146f6ee2109a24c92d3"}