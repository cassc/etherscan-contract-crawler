{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Fibswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport \\\"./interfaces/IWrapped.sol\\\";\\r\\nimport \\\"./interfaces/IFibswap.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Extended.sol\\\";\\r\\n\\r\\nimport {IDiscountStrategy} from \\\"./interfaces/IDiscountStrategy.sol\\\";\\r\\nimport {IExecutor, Executor} from \\\"./interpreters/Executor.sol\\\";\\r\\nimport {RouterPermissionsManager} from \\\"./RouterPermissionsManager.sol\\\";\\r\\nimport {OwnerPausableUpgradeable} from \\\"./OwnerPausableUpgradeable.sol\\\";\\r\\n\\r\\nimport {FibswapUtils} from \\\"./lib/Fibswap/FibswapUtils.sol\\\";\\r\\n\\r\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\r\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport {EnumerableSetUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\r\\n\\r\\ncontract Fibswap is\\r\\n  UUPSUpgradeable,\\r\\n  OwnerPausableUpgradeable,\\r\\n  ReentrancyGuardUpgradeable,\\r\\n  RouterPermissionsManager,\\r\\n  IFibswap\\r\\n{\\r\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\r\\n\\r\\n  // ========== Custom Errors ===========\\r\\n  error Fibswap__removeAssetId_notAdded();\\r\\n  error Fibswap__removeLiquidity_recipientEmpty();\\r\\n  error Fibswap__removeLiquidity_amountIsZero();\\r\\n  error Fibswap__removeLiquidity_insufficientFunds();\\r\\n  error Fibswap__xcall_notSupportedAsset();\\r\\n  error Fibswap__xcall_wrongDomain();\\r\\n  error Fibswap__xcall_emptyToOrRecovery();\\r\\n  error Fibswap__xcall_notGasFee();\\r\\n  error Fibswap__xcall_notApprovedRouter();\\r\\n  error Fibswap__xcall_invalidSwapRouer();\\r\\n  error Fibswap__xcall_tooSmallLocalAmount();\\r\\n  error Fibswap__xcall_tooBigSlippage();\\r\\n  error Fibswap__xcall_notAllowedAsset();\\r\\n  error Fibswap__execute_unapprovedRouter();\\r\\n  error Fibswap__execute_invalidRouterSignature();\\r\\n  error Fibswap__execute_alreadyExecuted();\\r\\n  error Fibswap__execute_incorrectDestination();\\r\\n  error Fibswap__addLiquidityForRouter_routerEmpty();\\r\\n  error Fibswap__addLiquidityForRouter_amountIsZero();\\r\\n  error Fibswap__addLiquidityForRouter_badRouter();\\r\\n  error Fibswap__addLiquidityForRouter_badAsset();\\r\\n  error Fibswap__addAssetId_alreadyAdded();\\r\\n  error Fibswap__addAssetIds_invalidArgs();\\r\\n  error Fibswap__decrementLiquidity_notEmpty();\\r\\n  error Fibswap__addSwapRouter_invalidArgs();\\r\\n  error Fibswap__addSwapRouter_invalidSwapRouterAddress();\\r\\n  error Fibswap__addSwapRouter_alreadyApproved();\\r\\n  error Fibswap__removeSwapRouter_invalidArgs();\\r\\n  error Fibswap__removeSwapRouter_alreadyRemoved();\\r\\n  error Fibswap__addStrategy_invalidAddress();\\r\\n  error Fibswap__removeStrategy_invalidAddress();\\r\\n  error Fibswap__xcall_forbidden();\\r\\n  error Fibswap__addAllowedAssetId_alreadyAdded();\\r\\n  error Fibswap__addAllowedAssetIds_invalidArgs();\\r\\n  error Fibswap__disableAssetId_notAdded();\\r\\n\\r\\n  // ============ Constants =============\\r\\n\\r\\n  bytes32 internal constant EMPTY = hex\\\"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\\\";\\r\\n\\r\\n  /// @dev Normal Service Fee percent\\r\\n  uint256 public constant PERCENTS_DIVIDER = 10000;\\r\\n\\r\\n  // ============ Properties ============\\r\\n\\r\\n  uint256 public chainId;\\r\\n  uint256 public nonce;\\r\\n  uint256 public feePercent;\\r\\n\\r\\n  // max allowed slippage\\r\\n  uint256 public maxAllowSlippage;\\r\\n\\r\\n  IWrapped public wrapper;\\r\\n  IExecutor public executor;\\r\\n\\r\\n  // swap router address => approved?\\r\\n  mapping(address => bool) public swapRouters;\\r\\n  // local assetId => approved?\\r\\n  mapping(address => bool) public approvedAssets;\\r\\n  // rotuer address => local assetId => balance\\r\\n  mapping(address => mapping(address => uint256)) public routerBalances;\\r\\n  // transferId => processed?\\r\\n  mapping(bytes32 => bool) public processed;\\r\\n  // discount strategies\\r\\n  EnumerableSetUpgradeable.AddressSet private discountStrategies;\\r\\n  // allowed assets\\r\\n  mapping(address => bool) public allowedAssets;\\r\\n\\r\\n  // ============ Modifiers ============\\r\\n\\r\\n  // ========== Initializer ============\\r\\n\\r\\n  function initialize(uint256 _chainId, address _wrapper) public override initializer {\\r\\n    __ReentrancyGuard_init();\\r\\n    __RouterPermissionsManager_init();\\r\\n    __OwnerPausable_init();\\r\\n\\r\\n    nonce = 0;\\r\\n    chainId = _chainId;\\r\\n    wrapper = IWrapped(_wrapper);\\r\\n\\r\\n    feePercent = 250; // 2.5%\\r\\n    maxAllowSlippage = 30; // 0.3%\\r\\n  }\\r\\n\\r\\n  function _authorizeUpgrade(address) internal override onlyOwner {}\\r\\n\\r\\n  // ============ Owner Functions ============\\r\\n  /**\\r\\n   * @notice Owner can set  normal fee percent\\r\\n   * @param _percent normal fee percentage\\r\\n   **/\\r\\n  function setFeePercent(uint256 _percent) external onlyOwner {\\r\\n    require(_percent < PERCENTS_DIVIDER / 5, \\\"too big fee\\\");\\r\\n\\r\\n    feePercent = _percent;\\r\\n\\r\\n    // Emit event\\r\\n    emit NewFeePercent(_percent, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Owner can set max allowed slippage\\r\\n   * @param _percent percentage\\r\\n   **/\\r\\n  function setMaxAllowSlippage(uint256 _percent) external onlyOwner {\\r\\n    require(_percent < PERCENTS_DIVIDER / 5, \\\"too big\\\");\\r\\n\\r\\n    maxAllowSlippage = _percent;\\r\\n\\r\\n    // Emit event\\r\\n    emit NewMaxAllowSlippage(_percent, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Owner can set  executor\\r\\n   * @param _executor new executor address\\r\\n   **/\\r\\n  function setExecutor(address _executor) external onlyOwner {\\r\\n    require(AddressUpgradeable.isContract(_executor), \\\"!contract\\\");\\r\\n\\r\\n    executor = IExecutor(_executor);\\r\\n\\r\\n    // Emit event\\r\\n    emit NewExecutor(_executor, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to set router initial properties\\r\\n   * @param router Router address to setup\\r\\n   * @param owner Initial Owner of router\\r\\n   * @param recipient Initial Recipient of router\\r\\n   */\\r\\n  function setupRouter(\\r\\n    address router,\\r\\n    address owner,\\r\\n    address recipient\\r\\n  ) external onlyOwner {\\r\\n    _setupRouter(router, owner, recipient);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to remove routers that can transact crosschain\\r\\n   * @param router Router address to remove\\r\\n   */\\r\\n  function removeRouter(address router) external override onlyOwner {\\r\\n    _removeRouter(router);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice set swap routers\\r\\n   */\\r\\n  function addSwapRouter(address[] memory routers) external onlyOwner {\\r\\n    if (routers.length == 0) revert Fibswap__addSwapRouter_invalidArgs();\\r\\n    for (uint256 i; i < routers.length; ) {\\r\\n      _addSwapRouter(routers[i]);\\r\\n      unchecked {\\r\\n        ++i;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice remove swap router\\r\\n   */\\r\\n  function removeSwapRouter(address _swapRouter) external onlyOwner {\\r\\n    if (_swapRouter == address(0)) revert Fibswap__removeSwapRouter_invalidArgs();\\r\\n    if (!swapRouters[_swapRouter]) revert Fibswap__removeSwapRouter_alreadyRemoved();\\r\\n\\r\\n    swapRouters[_swapRouter] = false;\\r\\n\\r\\n    emit SwapRouterUpdated(_swapRouter, false, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add supported assets. This is an admin only function\\r\\n   * @param localAssets - The assets to add\\r\\n   */\\r\\n  function addAssetIds(address[] memory localAssets) external onlyOwner {\\r\\n    if (localAssets.length == 0) revert Fibswap__addAssetIds_invalidArgs();\\r\\n    for (uint256 i; i < localAssets.length; ) {\\r\\n      _addAssetId(localAssets[i]);\\r\\n\\r\\n      unchecked {\\r\\n        ++i;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to remove assets from the whitelist\\r\\n   * @param localAssetId - Corresponding local asset to remove\\r\\n   */\\r\\n  function removeAssetId(address localAssetId) external override onlyOwner {\\r\\n    // Sanity check: already approval\\r\\n    if (!approvedAssets[localAssetId]) revert Fibswap__removeAssetId_notAdded();\\r\\n\\r\\n    // Update mapping\\r\\n    delete approvedAssets[localAssetId];\\r\\n\\r\\n    // Emit event\\r\\n    emit AssetRemoved(localAssetId, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add supported adopted assets. This is an admin only function\\r\\n   * @param assets - The assets to add\\r\\n   */\\r\\n  function allowAssetIds(address[] memory assets) external onlyOwner {\\r\\n    if (assets.length == 0) revert Fibswap__addAssetIds_invalidArgs();\\r\\n    for (uint256 i; i < assets.length; ) {\\r\\n      _addAllowedAssetId(assets[i]);\\r\\n\\r\\n      unchecked {\\r\\n        ++i;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to remove assets from the whitelist\\r\\n   * @param assetId - Corresponding adopted asset to remove\\r\\n   */\\r\\n  function disableAssetId(address assetId) external onlyOwner {\\r\\n    // Sanity check: already approval\\r\\n    if (!allowedAssets[assetId]) revert Fibswap__disableAssetId_notAdded();\\r\\n\\r\\n    // Update mapping\\r\\n    delete allowedAssets[assetId];\\r\\n\\r\\n    // Emit event\\r\\n    emit AssetDisabled(assetId, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to update wapped token address\\r\\n   * @param _wrapped - Wrapped asset address\\r\\n   */\\r\\n  function setWrapped(address _wrapped) external onlyOwner {\\r\\n    if (!AddressUpgradeable.isContract(_wrapped)) revert();\\r\\n\\r\\n    wrapper = IWrapped(_wrapped);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Add discount strategy\\r\\n   */\\r\\n  function addDiscountStrategy(address _strategy) external onlyOwner {\\r\\n    if (!AddressUpgradeable.isContract(_strategy)) revert Fibswap__addStrategy_invalidAddress();\\r\\n    if (discountStrategies.contains(_strategy)) revert Fibswap__addStrategy_invalidAddress();\\r\\n\\r\\n    discountStrategies.add(_strategy);\\r\\n    emit StrategyAdded(_strategy, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Remove discount strategy\\r\\n   */\\r\\n  function removeDiscountStrategy(address _strategy) external onlyOwner {\\r\\n    if (!discountStrategies.contains(_strategy)) revert Fibswap__removeStrategy_invalidAddress();\\r\\n\\r\\n    discountStrategies.remove(_strategy);\\r\\n    emit StrategyRemoved(_strategy, msg.sender);\\r\\n  }\\r\\n\\r\\n  // ============ Public Functions ============\\r\\n\\r\\n  /**\\r\\n   * @notice This is used by anyone to increase a router's available liquidity for a given asset.\\r\\n   * @param amount - The amount of liquidity to add for the router\\r\\n   * @param local - The address of the asset you're adding liquidity for. If adding liquidity of the\\r\\n   * native asset, routers may use `address(0)` or the wrapped asset\\r\\n   * @param router The router you are adding liquidity on behalf of\\r\\n   */\\r\\n  function addLiquidityFor(\\r\\n    uint256 amount,\\r\\n    address local,\\r\\n    address router\\r\\n  ) external payable override nonReentrant whenNotPaused {\\r\\n    _addLiquidityForRouter(amount, local, router);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This is used by any router to increase their available liquidity for a given asset.\\r\\n   * @param amount - The amount of liquidity to add for the router\\r\\n   * @param local - The address of the asset you're adding liquidity for. If adding liquidity of the\\r\\n   * native asset, routers may use `address(0)` or the wrapped asset\\r\\n   */\\r\\n  function addLiquidity(uint256 amount, address local) external payable override nonReentrant whenNotPaused {\\r\\n    _addLiquidityForRouter(amount, local, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This is used by any router to decrease their available liquidity for a given asset.\\r\\n   * @param amount - The amount of liquidity to remove for the router\\r\\n   * @param local - The address of the asset you're removing liquidity from. If removing liquidity of the\\r\\n   * native asset, routers may use `address(0)` or the wrapped asset\\r\\n   */\\r\\n  function removeLiquidity(uint256 amount, address local) external override nonReentrant whenNotPaused {\\r\\n    // transfer to specicfied recipient IF recipient not set\\r\\n    address _recipient = routerRecipients(msg.sender);\\r\\n\\r\\n    // Sanity check: to is sensible\\r\\n    if (_recipient == address(0)) revert Fibswap__removeLiquidity_recipientEmpty();\\r\\n\\r\\n    // Sanity check: nonzero amounts\\r\\n    if (amount == 0) revert Fibswap__removeLiquidity_amountIsZero();\\r\\n\\r\\n    uint256 routerBalance = routerBalances[msg.sender][local];\\r\\n    // Sanity check: amount can be deducted for the router\\r\\n    if (routerBalance < amount) revert Fibswap__removeLiquidity_insufficientFunds();\\r\\n\\r\\n    // Update router balances\\r\\n    unchecked {\\r\\n      routerBalances[msg.sender][local] = routerBalance - amount;\\r\\n    }\\r\\n\\r\\n    // Transfer from contract to specified to\\r\\n    FibswapUtils.transferAssetFromContract(local, _recipient, amount, false, wrapper);\\r\\n\\r\\n    // Emit event\\r\\n    emit LiquidityRemoved(msg.sender, _recipient, local, amount, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This function is called by a user who is looking to bridge funds\\r\\n   * @dev This contract must have approval to transfer the transacting assets. They are then swapped to\\r\\n   * the local assets via the configured AMM and sent over the bridge router.\\r\\n   * @param _args - The XCallArgs\\r\\n   * @return The transfer id of the crosschain transfer\\r\\n   */\\r\\n  function xcall(XCallArgs calldata _args) external override nonReentrant whenNotPaused returns (bytes32) {\\r\\n    _xcallSanityChecks(_args);\\r\\n\\r\\n    // Transfer funds to the contract\\r\\n    (address _transactingAssetId, uint256 _amount) = FibswapUtils.handleIncomingAsset(\\r\\n      _args.transactingAssetId,\\r\\n      _args.amount,\\r\\n      _args.relayerFee,\\r\\n      _args.params.router,\\r\\n      wrapper\\r\\n    );\\r\\n\\r\\n    // Swap to the local asset from the adopted\\r\\n    address localAsset = _args.params.orgLocalAsset;\\r\\n    if (localAsset != _transactingAssetId) {\\r\\n      if (!swapRouters[_args.params.orgParam.to]) {\\r\\n        revert Fibswap__xcall_invalidSwapRouer();\\r\\n      }\\r\\n\\r\\n      _amount = FibswapUtils.swapToLocalAssetIfNeeded(localAsset, _transactingAssetId, _amount, _args.params.orgParam);\\r\\n    }\\r\\n\\r\\n    // check min Local Amount without Fee\\r\\n    uint256 localAmount = _args.localAmount;\\r\\n    uint256 underlyingAmount = _handleIncomingAsset(_amount, localAmount, localAsset);\\r\\n\\r\\n    // send fee\\r\\n    FibswapUtils.transferAssetFromContract(\\r\\n      localAsset,\\r\\n      routerRecipients(_args.params.router),\\r\\n      _amount - localAmount,\\r\\n      true,\\r\\n      wrapper\\r\\n    );\\r\\n\\r\\n    // increase router balance\\r\\n    routerBalances[_args.params.router][localAsset] += localAmount;\\r\\n\\r\\n    // Compute the transfer id\\r\\n    bytes32 _transferId = FibswapUtils.getTransferId(nonce, msg.sender, _args.params, underlyingAmount);\\r\\n\\r\\n    // Emit event\\r\\n    emit XCalled(\\r\\n      _transferId,\\r\\n      _args.params,\\r\\n      _transactingAssetId,\\r\\n      _args.amount,\\r\\n      localAmount,\\r\\n      underlyingAmount,\\r\\n      nonce,\\r\\n      _args.relayerFee,\\r\\n      msg.sender\\r\\n    );\\r\\n\\r\\n    // Update nonce\\r\\n    nonce++;\\r\\n\\r\\n    // Return the transfer id\\r\\n    return _transferId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice This function is called on the destination chain when the bridged asset should be swapped\\r\\n   * into the adopted asset and the external call executed. Can be used before reconcile (when providing\\r\\n   * fast liquidity) or after reconcile (when using liquidity from the bridge)\\r\\n   * @dev Will store the `ExecutedTransfer` if fast liquidity is provided, or assert the hash of the\\r\\n   * `ReconciledTransfer` when using bridge liquidity\\r\\n   * @param _args - The `ExecuteArgs` for the transfer\\r\\n   * @return bytes32 The transfer id of the crosschain transfer\\r\\n   */\\r\\n  function execute(ExecuteArgs calldata _args) external override nonReentrant whenNotPaused returns (bytes32) {\\r\\n    // Calculate the transfer id\\r\\n    (bytes32 _transferId, address localAsset, uint256 localAmount) = _executeSanityChecks(_args);\\r\\n\\r\\n    processed[_transferId] = true;\\r\\n\\r\\n    // Handle liquidity as needed\\r\\n    _decrementLiquidity(localAmount, localAsset, _args.params.router);\\r\\n\\r\\n    address transactingAsset = localAsset;\\r\\n    if (keccak256(_args.params.dstParam.data) == EMPTY) {\\r\\n      // Send funds to the user\\r\\n      transactingAsset = FibswapUtils.transferAssetFromContract(\\r\\n        localAsset,\\r\\n        _args.params.dstParam.to,\\r\\n        localAmount,\\r\\n        _args.params.isEth,\\r\\n        wrapper\\r\\n      );\\r\\n    } else {\\r\\n      // Send funds to executor\\r\\n      transactingAsset = FibswapUtils.transferAssetFromContract(\\r\\n        localAsset,\\r\\n        address(executor),\\r\\n        localAmount,\\r\\n        _args.params.isEth,\\r\\n        wrapper\\r\\n      );\\r\\n      executor.execute(\\r\\n        _transferId,\\r\\n        localAmount,\\r\\n        payable(_args.params.dstParam.to),\\r\\n        payable(_args.params.recovery),\\r\\n        transactingAsset,\\r\\n        _args.params.dstParam.data\\r\\n      );\\r\\n    }\\r\\n\\r\\n    // Emit event\\r\\n    emit Executed(\\r\\n      _transferId,\\r\\n      _args.params,\\r\\n      transactingAsset,\\r\\n      localAmount,\\r\\n      _args.amount,\\r\\n      _args.routerSignature,\\r\\n      _args.originSender,\\r\\n      _args.nonce,\\r\\n      msg.sender\\r\\n    );\\r\\n\\r\\n    return _transferId;\\r\\n  }\\r\\n\\r\\n  // ============ Private functions ============\\r\\n\\r\\n  /**\\r\\n   * @notice Contains the logic to verify + increment a given routers liquidity\\r\\n   * @dev The liquidity will be held in the local asset\\r\\n   * @param _amount - The amount of liquidity to add for the router\\r\\n   * @param _local - The address of the local asset\\r\\n   * @param _router - The router you are adding liquidity on behalf of\\r\\n   */\\r\\n  function _addLiquidityForRouter(\\r\\n    uint256 _amount,\\r\\n    address _local,\\r\\n    address _router\\r\\n  ) internal {\\r\\n    // Sanity check: router is sensible\\r\\n    if (_router == address(0)) revert Fibswap__addLiquidityForRouter_routerEmpty();\\r\\n\\r\\n    // Sanity check: nonzero amounts\\r\\n    if (_amount == 0) revert Fibswap__addLiquidityForRouter_amountIsZero();\\r\\n\\r\\n    // Router is approved\\r\\n    if (!approvedRouters(_router)) revert Fibswap__addLiquidityForRouter_badRouter();\\r\\n\\r\\n    // Transfer funds to coethWithErcTransferact\\r\\n    (address _assetId, uint256 _received) = FibswapUtils.handleIncomingAsset(_local, _amount, 0, _router, wrapper);\\r\\n\\r\\n    // Asset is approved\\r\\n    if (!approvedAssets[_assetId]) revert Fibswap__addLiquidityForRouter_badAsset();\\r\\n\\r\\n    // Update the router balances. Happens after pulling funds to account for\\r\\n    // the fee on transfer tokens\\r\\n    routerBalances[_router][_assetId] += _received;\\r\\n\\r\\n    // Emit event\\r\\n    emit LiquidityAdded(_router, _assetId, _received, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add assets on same chain as contract that can be transferred.\\r\\n   * @param _localAsset - The used asset id (i.e. USDC, USDT, WETH, ETH)\\r\\n   */\\r\\n  function _addAssetId(address _localAsset) internal {\\r\\n    // Sanity check: needs approval\\r\\n    if (approvedAssets[_localAsset]) revert Fibswap__addAssetId_alreadyAdded();\\r\\n\\r\\n    // Update approved assets mapping\\r\\n    approvedAssets[_localAsset] = true;\\r\\n\\r\\n    // Update allowed assets mapping\\r\\n    allowedAssets[_localAsset] = true;\\r\\n\\r\\n    // Emit event\\r\\n    emit AssetAdded(_localAsset, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add an AMM for assets\\r\\n   * @param _swapRouter - The address of the amm to add\\r\\n   */\\r\\n  function _addSwapRouter(address _swapRouter) internal {\\r\\n    if (!AddressUpgradeable.isContract(_swapRouter)) revert Fibswap__addSwapRouter_invalidSwapRouterAddress();\\r\\n    if (swapRouters[_swapRouter]) revert Fibswap__addSwapRouter_alreadyApproved();\\r\\n\\r\\n    swapRouters[_swapRouter] = true;\\r\\n\\r\\n    emit SwapRouterUpdated(_swapRouter, true, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Used to add assets on same chain as contract that can be transferred.\\r\\n   * @param _asset - The adopted asset id (i.e. USDC, USDT, WETH, ETH)\\r\\n   */\\r\\n  function _addAllowedAssetId(address _asset) internal {\\r\\n    // Sanity check: needs approval\\r\\n    if (allowedAssets[_asset]) revert Fibswap__addAllowedAssetId_alreadyAdded();\\r\\n\\r\\n    // Update approved assets mapping\\r\\n    allowedAssets[_asset] = true;\\r\\n\\r\\n    // Emit event\\r\\n    emit AssetAllowed(_asset, msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Calculates transfer amount without Fee.\\r\\n   * @param _amount Transfer amount\\r\\n   * @param _liquidityFeeNum Liquidity fee numerator\\r\\n   * @param _liquidityFeeDen Liquidity fee denominator\\r\\n   */\\r\\n  function _getTransferAmountWithoutFee(\\r\\n    uint256 _amount,\\r\\n    uint256 _liquidityFeeNum,\\r\\n    uint256 _liquidityFeeDen\\r\\n  ) private pure returns (uint256) {\\r\\n    return (_amount * _liquidityFeeNum) / _liquidityFeeDen;\\r\\n  }\\r\\n\\r\\n  function _handleIncomingAsset(\\r\\n    uint256 _amount,\\r\\n    uint256 _localAmount,\\r\\n    address _localAsset\\r\\n  ) internal view returns (uint256) {\\r\\n    uint256 discount;\\r\\n    uint256 strategyLength = discountStrategies.length();\\r\\n    if (strategyLength > 0) {\\r\\n      for (uint256 i; i < strategyLength; ) {\\r\\n        discount += IDiscountStrategy(discountStrategies.at(i)).getDiscountPercent(msg.sender);\\r\\n        unchecked {\\r\\n          ++i;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n    uint256 bridgedAmount = _getTransferAmountWithoutFee(\\r\\n      _amount,\\r\\n      discount >= feePercent ? PERCENTS_DIVIDER : PERCENTS_DIVIDER + discount - feePercent,\\r\\n      PERCENTS_DIVIDER\\r\\n    );\\r\\n    if (bridgedAmount < _localAmount) revert Fibswap__xcall_tooSmallLocalAmount();\\r\\n    if (bridgedAmount >= (_localAmount * (maxAllowSlippage + PERCENTS_DIVIDER)) / PERCENTS_DIVIDER)\\r\\n      revert Fibswap__xcall_tooBigSlippage();\\r\\n\\r\\n    // underlying amount = localAmount * 10 ^ (36 - decimal of local asset)\\r\\n    uint256 decimals = _localAsset == address(0) ? 18 : IERC20Extended(_localAsset).decimals();\\r\\n    return _localAmount * (10**(36 - decimals));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Decrements router liquidity for the fast-liquidity case.\\r\\n   * @dev Stores the router that supplied liquidity to credit on reconcile\\r\\n   */\\r\\n  function _decrementLiquidity(\\r\\n    uint256 _amount,\\r\\n    address _local,\\r\\n    address _router\\r\\n  ) internal {\\r\\n    // Decrement liquidity\\r\\n    routerBalances[_router][_local] -= _amount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Performs some sanity checks for `xcall`\\r\\n   * @dev Need this to prevent stack too deep\\r\\n   */\\r\\n  function _xcallSanityChecks(XCallArgs calldata _args) private view {\\r\\n    if (AddressUpgradeable.isContract(msg.sender)) revert Fibswap__xcall_forbidden();\\r\\n    if (!approvedRouters(_args.params.router)) revert Fibswap__xcall_notApprovedRouter();\\r\\n\\r\\n    // ensure this is the right domain\\r\\n    uint256 _chainId = getChainId();\\r\\n    if (_args.params.origin != _chainId || _args.params.origin == _args.params.destination) {\\r\\n      revert Fibswap__xcall_wrongDomain();\\r\\n    }\\r\\n\\r\\n    // ensure theres a recipient defined\\r\\n    if (_args.params.dstParam.to == address(0) || _args.params.recovery == address(0)) {\\r\\n      revert Fibswap__xcall_emptyToOrRecovery();\\r\\n    }\\r\\n\\r\\n    if (!allowedAssets[_args.transactingAssetId]) revert Fibswap__xcall_notAllowedAsset();\\r\\n\\r\\n    if (!approvedAssets[_args.params.orgLocalAsset]) revert Fibswap__xcall_notSupportedAsset();\\r\\n\\r\\n    if (_args.relayerFee == 0 || msg.value < _args.relayerFee) revert Fibswap__xcall_notGasFee();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Performs some sanity checks for `execute`\\r\\n   * @dev Need this to prevent stack too deep\\r\\n   */\\r\\n  function _executeSanityChecks(ExecuteArgs calldata _args)\\r\\n    private\\r\\n    returns (\\r\\n      bytes32,\\r\\n      address,\\r\\n      uint256\\r\\n    )\\r\\n  {\\r\\n    // If the sender is not approved router, revert()\\r\\n    if (!approvedRouters(msg.sender) || msg.sender != _args.params.router) {\\r\\n      revert Fibswap__execute_unapprovedRouter();\\r\\n    }\\r\\n\\r\\n    if (_args.params.destination != getChainId()) revert Fibswap__execute_incorrectDestination();\\r\\n    // get transfer id\\r\\n    bytes32 transferId = FibswapUtils.getTransferId(_args.nonce, _args.originSender, _args.params, _args.amount);\\r\\n\\r\\n    // get the payload the router should have signed\\r\\n    bytes32 routerHash = keccak256(abi.encode(transferId));\\r\\n\\r\\n    if (_args.params.router != _recoverSignature(routerHash, _args.routerSignature)) {\\r\\n      revert Fibswap__execute_invalidRouterSignature();\\r\\n    }\\r\\n\\r\\n    // require this transfer has not already been executed\\r\\n    if (processed[transferId]) {\\r\\n      revert Fibswap__execute_alreadyExecuted();\\r\\n    }\\r\\n\\r\\n    address localAsset = _args.params.dstLocalAsset;\\r\\n    uint256 decimals = (localAsset == address(0) ? 18 : IERC20Extended(localAsset).decimals());\\r\\n    uint256 localAmount = _args.amount / (10**(36 - decimals));\\r\\n\\r\\n    return (transferId, localAsset, localAmount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Holds the logic to recover the signer from an encoded payload.\\r\\n   * @dev Will hash and convert to an eth signed message.\\r\\n   * @param _signed The hash that was signed\\r\\n   * @param _sig The signature you are recovering the signer from\\r\\n   */\\r\\n  function _recoverSignature(bytes32 _signed, bytes calldata _sig) internal pure returns (address) {\\r\\n    // Recover\\r\\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(_signed), _sig);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the chainId for this contract. If not specified during init\\r\\n   *         will use the block.chainId\\r\\n   */\\r\\n  function getChainId() public view returns (uint256 _chainId) {\\r\\n    // Hold in memory to reduce sload calls\\r\\n    uint256 chain = chainId;\\r\\n    if (chain == 0) {\\r\\n      // If not provided, pull from block\\r\\n      assembly {\\r\\n        _chainId := chainid()\\r\\n      }\\r\\n    } else {\\r\\n      // Use provided override\\r\\n      _chainId = chain;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Gets the address of the discount strategy which registered\\r\\n   */\\r\\n  function getStrategy(uint256 index) public view returns (address) {\\r\\n    return discountStrategies.at(index);\\r\\n  }\\r\\n\\r\\n  // receive() external payable {}\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWrapped.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.14;\\n\\n// TODO: need a correct interface here\\ninterface IWrapped {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFibswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.14;\\r\\n\\r\\ninterface IFibswap {\\r\\n  // ============= Structs =============\\r\\n  /**\\r\\n   * @notice Contains the external call information\\r\\n   * @dev Used to create a hash to pass the external call information through the bridge\\r\\n   * @param to - The address that should receive the funds on the destination domain if no call is\\r\\n   * specified, or the fallback if an external call fails\\r\\n   * @param callData - The data to execute on the receiving chain\\r\\n   */\\r\\n  struct ExternalCall {\\r\\n    address to;\\r\\n    bytes data;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice These are the call parameters that will remain constant between the\\r\\n   * two chains. They are supplied on `xcall` and should be asserted on `execute`\\r\\n   * @property to - The account that receives funds, in the event of a crosschain call,\\r\\n   * will receive funds if the call fails.\\r\\n   * @param to - The address you are sending funds (and potentially data) to\\r\\n   * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\r\\n   * @param origin - The originating chainId (i.e. where `xcall` is called).\\r\\n   * @param destination - The final chainId (i.e. where `execute` is called).\\r\\n   */\\r\\n  struct CallParams {\\r\\n    address router;\\r\\n    ExternalCall orgParam;\\r\\n    ExternalCall dstParam;\\r\\n    address recovery;\\r\\n    uint32 origin;\\r\\n    uint32 destination;\\r\\n    address orgLocalAsset;\\r\\n    address dstLocalAsset;\\r\\n    bool isEth;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice The arguments you supply to the `xcall` function called by user on origin domain\\r\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\r\\n   * @param transactingAssetId - The asset the caller sent with the transfer. Can be the adopted, canonical,\\r\\n   * or the representational asset\\r\\n   * @param amount - The amount of transferring asset the tx called xcall with\\r\\n   */\\r\\n  struct XCallArgs {\\r\\n    CallParams params;\\r\\n    address transactingAssetId; // Could be any token or native\\r\\n    uint256 amount;\\r\\n    uint256 localAmount;\\r\\n    uint256 relayerFee;\\r\\n    bool isExactInput;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice\\r\\n   * @param params - The CallParams. These are consistent across sending and receiving chains\\r\\n   * @param local - The local asset for the transfer, will be swapped to the adopted asset if\\r\\n   * appropriate\\r\\n   * @param router - The router who you are sending the funds on behalf of\\r\\n   * @param amount - The amount of liquidity the router provided or the bridge forwarded, depending on\\r\\n   * if fast liquidity was used\\r\\n   * @param feePercentage - The amount over the BASEFEE to tip the relayer\\r\\n   */\\r\\n  struct ExecuteArgs {\\r\\n    CallParams params;\\r\\n    address transactingAssetId;\\r\\n    uint256 amount;\\r\\n    uint256 nonce;\\r\\n    bytes routerSignature;\\r\\n    address originSender;\\r\\n  }\\r\\n  // ============ Events ============\\r\\n\\r\\n  event NewExecutor(address executor, address caller);\\r\\n\\r\\n  event NewFeePercent(uint256 feePercent, address caller);\\r\\n\\r\\n  event NewMaxAllowSlippage(uint256 percent, address caller);\\r\\n  /**\\r\\n   * @notice Emitted when a new swap AMM is added\\r\\n   * @param swapRouter - The address of the AMM\\r\\n   * @param approved - approved or removed\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event SwapRouterUpdated(address swapRouter, bool approved, address caller);\\r\\n\\r\\n  event StrategyAdded(address strategy, address caller);\\r\\n\\r\\n  event StrategyRemoved(address strategy, address caller);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a new asset is added\\r\\n   * @param localAsset - The address of the local asset (USDC, USDT, WETH)\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event AssetAdded(address localAsset, address caller);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when an asset is removed from whitelists\\r\\n   * @param localAsset - The address of the local asset (USDC, USDT, WETH)\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event AssetRemoved(address localAsset, address caller);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a new asset is allowed\\r\\n   * @param asset - The address of the adopted asset (USDC, USDT, WETH)\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event AssetAllowed(address asset, address caller);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when an asset is removed from whitelists\\r\\n   * @param asset - The address of the adopted asset (USDC, USDT, WETH)\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event AssetDisabled(address asset, address caller);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a router withdraws liquidity from the contract\\r\\n   * @param router - The router you are removing liquidity from\\r\\n   * @param to - The address the funds were withdrawn to\\r\\n   * @param local - The address of the token withdrawn\\r\\n   * @param amount - The amount of liquidity withdrawn\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event LiquidityRemoved(address indexed router, address to, address local, uint256 amount, address caller);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when a router adds liquidity to the contract\\r\\n   * @param router - The address of the router the funds were credited to\\r\\n   * @param local - The address of the token added (all liquidity held in local asset)\\r\\n   * @param amount - The amount of liquidity added\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event LiquidityAdded(address indexed router, address local, uint256 amount, address caller);\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when `xcall` is called on the origin domain\\r\\n   * @param transferId - The unique identifier of the crosschain transfer\\r\\n   * @param params - The CallParams provided to the function\\r\\n   * @param transactingAsset - The asset the caller sent with the transfer. Can be the adopted, canonical,\\r\\n   * or the representational asset\\r\\n   * @param transactingAmount - The amount of transferring asset the tx xcalled with\\r\\n   * @param localAmount - The amount sent over the bridge\\r\\n   * @param underlyingAmount - The amount sent over the bridge (initialAmount with slippage) // underlying amount = localAmount * 10 ** (36 - decimals)\\r\\n   * @param nonce - The nonce of the origin domain contract. Used to create the unique identifier\\r\\n   * for the transfer\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event XCalled(\\r\\n    bytes32 indexed transferId,\\r\\n    CallParams params,\\r\\n    address transactingAsset,\\r\\n    uint256 transactingAmount,\\r\\n    uint256 localAmount,\\r\\n    uint256 underlyingAmount,\\r\\n    uint256 nonce,\\r\\n    uint256 relayerFee,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @notice Emitted when `execute` is called on the destination chain\\r\\n   * @dev `execute` may be called when providing fast liquidity *or* when processing a reconciled transfer\\r\\n   * @param transferId - The unique identifier of the crosschain transfer\\r\\n   * @param params - The CallParams provided to the function\\r\\n   * @param transactingAsset - The asset the to gets or the external call is executed with. Should be the\\r\\n   * adopted asset on that chain.\\r\\n   * @param localAmount - The amount that was provided by the bridge\\r\\n   * @param transactingAmount - The amount of transferring asset the to address receives or the external call is\\r\\n   * executed with\\r\\n   * @param caller - The account that called the function\\r\\n   */\\r\\n  event Executed(\\r\\n    bytes32 indexed transferId,\\r\\n    CallParams params,\\r\\n    address transactingAsset,\\r\\n    uint256 localAmount,\\r\\n    uint256 transactingAmount,\\r\\n    bytes routerSignature,\\r\\n    address originSender,\\r\\n    uint256 nonce,\\r\\n    address caller\\r\\n  );\\r\\n\\r\\n  // ============ Admin Functions ============\\r\\n\\r\\n  function initialize(uint256 chainId, address wrapper) external;\\r\\n\\r\\n  function setupRouter(\\r\\n    address router,\\r\\n    address owner,\\r\\n    address recipient\\r\\n  ) external;\\r\\n\\r\\n  function removeRouter(address router) external;\\r\\n\\r\\n  function removeAssetId(address localAsset) external;\\r\\n\\r\\n  // ============ Public Functions ===========\\r\\n\\r\\n  function addLiquidityFor(\\r\\n    uint256 amount,\\r\\n    address local,\\r\\n    address router\\r\\n  ) external payable;\\r\\n\\r\\n  function addLiquidity(uint256 amount, address local) external payable;\\r\\n\\r\\n  function removeLiquidity(uint256 amount, address local) external;\\r\\n\\r\\n  function xcall(XCallArgs calldata _args) external returns (bytes32);\\r\\n\\r\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Extended.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.11;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Extended {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the token decimals.\\n   */\\n  function decimals() external view returns (uint8);\\n\\n  /**\\n   * @dev Returns the token symbol.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the token name.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the bep token owner.\\n   */\\n  function getOwner() external view returns (address);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address _owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDiscountStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.14;\\n\\ninterface IDiscountStrategy {\\n  function getDiscountPercent(address _account) external view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interpreters/Executor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.14;\\n\\nimport \\\"../interfaces/IExecutor.sol\\\";\\n\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport {IERC20Upgradeable, SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title Executor\\n * @author fibswap <support@fibswap.network>\\n * @notice This library contains an `execute` function that is callabale by\\n * an associated fibswap contract. This is used to execute\\n * arbitrary calldata on a receiving chain.\\n */\\ncontract Executor is IExecutor {\\n  // ============ Properties =============\\n\\n  address private immutable fibswap;\\n\\n  // ============ Constructor =============\\n\\n  constructor(address _fibswap) {\\n    fibswap = _fibswap;\\n  }\\n\\n  // ============ Modifiers =============\\n\\n  /**\\n   * @notice Errors if the sender is not fibswap\\n   */\\n  modifier onlyFibswap() {\\n    require(msg.sender == fibswap, \\\"!fibswap\\\");\\n    _;\\n  }\\n\\n  // ============ Public Functions =============\\n\\n  /**\\n   * @notice Returns the fibswap contract address (only address that can\\n   * call the `execute` function)\\n   * @return The address of the associated fibswap contract\\n   */\\n  function getFibswap() external view override returns (address) {\\n    return fibswap;\\n  }\\n\\n  /**\\n   * @notice Executes some arbitrary call data on a given address. The\\n   * call data executes can be payable, and will have `amount` sent\\n   * along with the function (or approved to the contract). If the\\n   * call fails, rather than reverting, funds are sent directly to\\n   * some provided fallback address\\n   * @param _transferId Unique identifier of transaction id that necessitated\\n   * calldata execution\\n   * @param _amount The amount to approve or send with the call\\n   * @param _to The address to execute the calldata on\\n   * @param _assetId The assetId of the funds to approve to the contract or\\n   * send along with the call\\n   * @param _callData The data to execute\\n   */\\n  function execute(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address payable _to,\\n    address payable _recovery,\\n    address _assetId,\\n    bytes calldata _callData\\n  ) external override onlyFibswap returns (bool) {\\n    // If it is not ether, approve the callTo\\n    // We approve here rather than transfer since many external contracts\\n    // simply require an approval, and it is unclear if they can handle\\n    // funds transferred directly to them (i.e. Uniswap)\\n    bool isNative = _assetId == address(0);\\n\\n    // Check if the callTo is a contract\\n    bool success;\\n    if (!AddressUpgradeable.isContract(_to)) {\\n      _handleFailure(isNative, false, _assetId, _to, _recovery, _amount);\\n      // Emit event\\n      emit Executed(_transferId, _to, _recovery, _assetId, _amount, _callData, success);\\n      return success;\\n    }\\n\\n    bool hasValue = _amount != 0;\\n\\n    if (!isNative && hasValue) {\\n      SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_assetId), _to, 0);\\n      SafeERC20Upgradeable.safeIncreaseAllowance(IERC20Upgradeable(_assetId), _to, _amount);\\n    }\\n\\n    // Try to execute the callData\\n    // the low level call will return `false` if its execution reverts\\n    (success, ) = _to.call{value: isNative ? _amount : 0}(_callData);\\n\\n    // Handle failure cases\\n    if (!success) {\\n      _handleFailure(isNative, true, _assetId, _to, _recovery, _amount);\\n    }\\n\\n    // Emit event\\n    emit Executed(_transferId, _to, _recovery, _assetId, _amount, _callData, success);\\n    return success;\\n  }\\n\\n  function _handleFailure(\\n    bool isNative,\\n    bool hasIncreased,\\n    address _assetId,\\n    address payable _to,\\n    address payable _recovery,\\n    uint256 _amount\\n  ) private {\\n    if (_amount == 0) {\\n      return;\\n    }\\n\\n    if (!isNative) {\\n      // Decrease allowance\\n      if (hasIncreased) {\\n        SafeERC20Upgradeable.safeDecreaseAllowance(IERC20Upgradeable(_assetId), _to, _amount);\\n      }\\n      // Transfer funds\\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _recovery, _amount);\\n    } else {\\n      // Transfer funds\\n      AddressUpgradeable.sendValue(_recovery, _amount);\\n    }\\n  }\\n\\n  receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/RouterPermissionsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.14;\\n\\nimport {RouterPermissionsLogic, RouterPermissionsInfo} from \\\"./lib/Fibswap/RouterPermissionsLogic.sol\\\";\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @notice\\n * This contract is designed to manage router access, meaning it maintains the\\n * router recipients, owners, and the router whitelist itself. It does *not* manage router balances\\n * as asset management is out of scope of this contract.\\n *\\n * As a router, there are three important permissions:\\n * `router` - this is the address that will sign bids sent to the sequencer\\n * `routerRecipient` - this is the address that receives funds when liquidity is withdrawn\\n * `routerOwner` - this is the address permitted to update recipients and propose new owners\\n *\\n * In cases where the owner is not set, the caller should be the `router` itself. In cases where the\\n * `routerRecipient` is not set, the funds can be removed to anywhere.\\n *\\n * When setting a new `routerOwner`, the current owner (or router) must create a proposal, which\\n * can be accepted by the proposed owner after the delay period. If the proposed owner is the empty\\n * address, then it must be accepted by the current owner.\\n */\\nabstract contract RouterPermissionsManager is Initializable {\\n  // ============ Private storage =============\\n\\n  uint256 private _delay;\\n\\n  // ============ Public Storage =============\\n\\n  RouterPermissionsInfo internal routerInfo;\\n\\n  // ============ Initialize =============\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __RouterPermissionsManager_init() internal onlyInitializing {\\n    __RouterPermissionsManager_init_unchained();\\n  }\\n\\n  function __RouterPermissionsManager_init_unchained() internal onlyInitializing {\\n    _delay = 7 days;\\n  }\\n\\n  // ============ Public methods =============\\n\\n  function approvedRouters(address _router) public view returns (bool) {\\n    return routerInfo.approvedRouters[_router];\\n  }\\n\\n  function routerRecipients(address _router) public view returns (address) {\\n    return routerInfo.routerRecipients[_router] == address(0) ? _router : routerInfo.routerRecipients[_router];\\n  }\\n\\n  function routerOwners(address _router) public view returns (address) {\\n    return routerInfo.routerOwners[_router] == address(0) ? _router : routerInfo.routerOwners[_router];\\n  }\\n\\n  /**\\n   * @notice Sets the designated recipient for a router\\n   * @dev Router should only be able to set this once otherwise if router key compromised,\\n   * no problem is solved since attacker could just update recipient\\n   * @param router Router address to set recipient\\n   * @param recipient Recipient Address to set to router\\n   */\\n  function setRouterRecipient(address router, address recipient) external {\\n    RouterPermissionsLogic.setRouterRecipient(router, recipient, routerInfo);\\n  }\\n\\n  /**\\n   * @notice Current owner or router may propose a new router owner\\n   * @param router Router address to set recipient\\n   * @param owner Proposed owner Address to set to router\\n   */\\n  function setRouterOwner(address router, address owner) external {\\n    RouterPermissionsLogic.setRouterOwner(router, owner, routerInfo);\\n  }\\n\\n  // ============ Private methods =============\\n\\n  /**\\n   * @notice Used to set router initial properties\\n   * @param router Router address to setup\\n   * @param owner Initial Owner of router\\n   * @param recipient Initial Recipient of router\\n   */\\n  function _setupRouter(\\n    address router,\\n    address owner,\\n    address recipient\\n  ) internal {\\n    RouterPermissionsLogic.setupRouter(router, owner, recipient, routerInfo);\\n  }\\n\\n  /**\\n   * @notice Used to remove routers that can transact crosschain\\n   * @param router Router address to remove\\n   */\\n  function _removeRouter(address router) internal {\\n    RouterPermissionsLogic.removeRouter(router, routerInfo);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OwnerPausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport {ProposedOwnableUpgradeable} from \\\"./ProposedOwnable.sol\\\";\\r\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title OwnerPausable\\r\\n * @notice An ownable contract allows the owner to pause and unpause the\\r\\n * contract without a delay.\\r\\n * @dev Only methods using the provided modifiers will be paused.\\r\\n */\\r\\nabstract contract OwnerPausableUpgradeable is ProposedOwnableUpgradeable, PausableUpgradeable {\\r\\n  // ============ Upgrade Gap ============\\r\\n\\r\\n  uint256[49] private __GAP; // gap for upgrade safety\\r\\n\\r\\n  // ============ Initializer ============\\r\\n\\r\\n  function __OwnerPausable_init() internal onlyInitializing {\\r\\n    __Context_init_unchained();\\r\\n    __ProposedOwnable_init_unchained();\\r\\n    __Pausable_init_unchained();\\r\\n  }\\r\\n\\r\\n  // ============ External functions ============\\r\\n\\r\\n  /**\\r\\n   * @notice Pause the contract. Revert if already paused.\\r\\n   */\\r\\n  function pause() external onlyOwner {\\r\\n    PausableUpgradeable._pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Unpause the contract. Revert if already unpaused.\\r\\n   */\\r\\n  function unpause() external onlyOwner {\\r\\n    PausableUpgradeable._unpause();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/Fibswap/FibswapUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.14;\\n\\nimport {IFibswap} from \\\"../../interfaces/IFibswap.sol\\\";\\nimport {IWrapped} from \\\"../../interfaces/IWrapped.sol\\\";\\n\\nimport {ECDSAUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable, IERC20Upgradeable, AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nlibrary FibswapUtils {\\n  error FibswapUtils__handleIncomingAsset_notAmount();\\n  error FibswapUtils__handleIncomingAsset_ethWithErcTransfer();\\n  error FibswapUtils__transferAssetFromContract_notNative();\\n\\n  /**\\n   * @notice Gets unique identifier from nonce + domain\\n   * @param _nonce - The nonce of the contract\\n   * @param _params - The call params of the transfer\\n   * @return The transfer id\\n   */\\n  function getTransferId(\\n    uint256 _nonce,\\n    address _sender,\\n    IFibswap.CallParams calldata _params,\\n    uint256 _amount\\n  ) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_nonce, _sender, _params, _amount));\\n  }\\n\\n  /**\\n   * @notice Holds the logic to recover the signer from an encoded payload.\\n   * @dev Will hash and convert to an eth signed message.\\n   * @param _encoded The payload that was signed\\n   * @param _sig The signature you are recovering the signer from\\n   */\\n  function recoverSignature(bytes memory _encoded, bytes calldata _sig) internal pure returns (address) {\\n    // Recover\\n    return ECDSAUpgradeable.recover(ECDSAUpgradeable.toEthSignedMessageHash(keccak256(_encoded)), _sig);\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the fibswap contract.\\n   * @dev If using the native asset, will automatically wrap\\n   * @param _assetId - The address to transfer\\n   * @param _assetAmount - The specified amount to transfer. May not be the\\n   * actual amount transferred (i.e. fee on transfer tokens)\\n   * @param _relayerFee - The fee amount in native asset included as part of the transaction that\\n   * should not be considered for the transfer amount.\\n   * @return The assetId of the transferred asset\\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\\n   * if the token is a fee-on-transfer token)\\n   */\\n  function handleIncomingAsset(\\n    address _assetId,\\n    uint256 _assetAmount,\\n    uint256 _relayerFee,\\n    address _router,\\n    IWrapped _wrapper\\n  ) internal returns (address, uint256) {\\n    uint256 trueAmount = _assetAmount;\\n\\n    if (_assetId == address(0)) {\\n      if (msg.value != _assetAmount + _relayerFee) revert FibswapUtils__handleIncomingAsset_notAmount();\\n\\n      // When transferring native asset to the contract, always make sure that the\\n      // asset is properly wrapped\\n      _wrapper.deposit{value: _assetAmount}();\\n      _assetId = address(_wrapper);\\n    } else {\\n      if (msg.value != _relayerFee) revert FibswapUtils__handleIncomingAsset_ethWithErcTransfer();\\n\\n      // Transfer asset to contract\\n      trueAmount = transferAssetToContract(_assetId, _assetAmount);\\n    }\\n\\n    if (_relayerFee > 0) {\\n      AddressUpgradeable.sendValue(payable(_router), _relayerFee);\\n    }\\n\\n    return (_assetId, trueAmount);\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the fibswap contract.\\n   * @dev If using the native asset, will automatically wrap\\n   * @param _assetId - The address to transfer\\n   * @param _specifiedAmount - The specified amount to transfer. May not be the\\n   * actual amount transferred (i.e. fee on transfer tokens)\\n   * @return The amount of the asset that was seen by the contract (may not be the specifiedAmount\\n   * if the token is a fee-on-transfer token)\\n   */\\n  function transferAssetToContract(address _assetId, uint256 _specifiedAmount) internal returns (uint256) {\\n    // Validate correct amounts are transferred\\n    uint256 starting = IERC20Upgradeable(_assetId).balanceOf(address(this));\\n    SafeERC20Upgradeable.safeTransferFrom(IERC20Upgradeable(_assetId), msg.sender, address(this), _specifiedAmount);\\n    // Calculate the *actual* amount that was sent here\\n    uint256 trueAmount = IERC20Upgradeable(_assetId).balanceOf(address(this)) - starting;\\n\\n    return trueAmount;\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the fibswap contract.\\n   * @dev If using the native asset, will automatically unwrap\\n   * @param _assetId - The address to transfer\\n   * @param _to - The account that will receive the withdrawn funds\\n   * @param _amount - The amount to withdraw from contract\\n   * @param _wrapper - The address of the wrapper for the native asset on this domain\\n   * @return The address of asset received post-swap\\n   */\\n  function transferAssetFromContract(\\n    address _assetId,\\n    address _to,\\n    uint256 _amount,\\n    bool _convertToEth,\\n    IWrapped _wrapper\\n  ) internal returns (address) {\\n    // No native assets should ever be stored on this contract\\n    if (_assetId == address(0)) revert FibswapUtils__transferAssetFromContract_notNative();\\n\\n    if (_assetId == address(_wrapper) && _convertToEth) {\\n      // If dealing with wrapped assets, make sure they are properly unwrapped\\n      // before sending from contract\\n      _wrapper.withdraw(_amount);\\n      AddressUpgradeable.sendValue(payable(_to), _amount);\\n      return address(0);\\n    } else {\\n      // Transfer ERC20 asset\\n      SafeERC20Upgradeable.safeTransfer(IERC20Upgradeable(_assetId), _to, _amount);\\n      return _assetId;\\n    }\\n  }\\n\\n  /**\\n   * @notice Swaps an adopted asset to the local (representation or canonical) nomad asset\\n   * @dev Will not swap if the asset passed in is the local asset\\n   * @param _asset - The address of the adopted asset to swap into the local asset\\n   * @param _amount - The amount of the adopted asset to swap\\n   * @return The amount of local asset received from swap\\n   */\\n  function swapToLocalAssetIfNeeded(\\n    address _local,\\n    address _asset,\\n    uint256 _amount,\\n    IFibswap.ExternalCall calldata _callParam\\n  ) internal returns (uint256) {\\n    if (_local == _asset) {\\n      return _amount;\\n    }\\n\\n    // Approve pool\\n    SafeERC20Upgradeable.safeApprove(IERC20Upgradeable(_asset), _callParam.to, _amount);\\n\\n    // Swap the asset to the proper local asset\\n    IERC20Upgradeable Transit = IERC20Upgradeable(_local);\\n\\n    uint256 balanceBefore = Transit.balanceOf(address(this));\\n    AddressUpgradeable.functionCall(_callParam.to, _callParam.data);\\n\\n    uint256 balanceDif = Transit.balanceOf(address(this)) - balanceBefore;\\n\\n    return balanceDif;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.14;\\n\\ninterface IExecutor {\\n  event Executed(\\n    bytes32 indexed transferId,\\n    address indexed to,\\n    address recovery,\\n    address assetId,\\n    uint256 amount,\\n    bytes callData,\\n    bool success\\n  );\\n\\n  function getFibswap() external returns (address);\\n\\n  function execute(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address payable _to,\\n    address payable _recovery,\\n    address _assetId,\\n    bytes calldata _callData\\n  ) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Fibswap/RouterPermissionsLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.14;\\n\\n/**\\n * @notice Contains RouterPermissions related state\\n * @param approvedRouters - Mapping of whitelisted router addresses\\n * @param routerRecipients - Mapping of router withdraw recipient addresses.\\n * If set, all liquidity is withdrawn only to this address. Must be set by routerOwner\\n * (if configured) or the router itself\\n * @param routerOwners - Mapping of router owners\\n */\\nstruct RouterPermissionsInfo {\\n  mapping(address => bool) approvedRouters;\\n  mapping(address => address) routerRecipients;\\n  mapping(address => address) routerOwners;\\n}\\n\\nlibrary RouterPermissionsLogic {\\n  // ========== Custom Errors ===========\\n  error RouterPermissionsLogic__setRouterRecipient_notNewRecipient();\\n  error RouterPermissionsLogic__onlyRouterOwner_notRouterOwner();\\n  error RouterPermissionsLogic__removeRouter_routerEmpty();\\n  error RouterPermissionsLogic__removeRouter_notAdded();\\n  error RouterPermissionsLogic__setupRouter_routerEmpty();\\n  error RouterPermissionsLogic__setupRouter_alreadyApproved();\\n  error RouterPermissionsLogic__setRouterOwner_notNewOwner();\\n\\n  /**\\n   * @notice Emitted when a new router is added\\n   * @param router - The address of the added router\\n   * @param caller - The account that called the function\\n   */\\n  event RouterAdded(address indexed router, address caller);\\n\\n  /**\\n   * @notice Emitted when an existing router is removed\\n   * @param router - The address of the removed router\\n   * @param caller - The account that called the function\\n   */\\n  event RouterRemoved(address indexed router, address caller);\\n\\n  /**\\n   * @notice Emitted when the recipient of router is updated\\n   * @param router - The address of the added router\\n   * @param prevRecipient  - The address of the previous recipient of the router\\n   * @param newRecipient  - The address of the new recipient of the router\\n   */\\n  event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient);\\n\\n  /**\\n   * @notice Emitted when the owner of router is accepted\\n   * @param router - The address of the added router\\n   * @param prevOwner  - The address of the previous owner of the router\\n   * @param newOwner  - The address of the new owner of the router\\n   */\\n  event RouterOwnerUpdated(address indexed router, address indexed prevOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Asserts caller is the router owner (if set) or the router itself\\n   */\\n  function _onlyRouterOwner(address _router, address _owner) internal view {\\n    if (!((_owner == address(0) && msg.sender == _router) || _owner == msg.sender))\\n      revert RouterPermissionsLogic__onlyRouterOwner_notRouterOwner();\\n  }\\n\\n  // ============ Public methods =============\\n\\n  /**\\n   * @notice Sets the designated recipient for a router\\n   * @dev Router should only be able to set this once otherwise if router key compromised,\\n   * no problem is solved since attacker could just update recipient\\n   * @param router Router address to set recipient\\n   * @param recipient Recipient Address to set to router\\n   */\\n  function setRouterRecipient(\\n    address router,\\n    address recipient,\\n    RouterPermissionsInfo storage routerInfo\\n  ) internal {\\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\\n\\n    // Check recipient is changing\\n    address _prevRecipient = routerInfo.routerRecipients[router];\\n    if (_prevRecipient == recipient) revert RouterPermissionsLogic__setRouterRecipient_notNewRecipient();\\n\\n    // Set new recipient\\n    routerInfo.routerRecipients[router] = recipient;\\n\\n    // Emit event\\n    emit RouterRecipientSet(router, _prevRecipient, recipient);\\n  }\\n\\n  /**\\n   * @notice Current owner or router may propose a new router owner\\n   * @param router Router address to set recipient\\n   * @param owner Owner Address to set to router\\n   */\\n  function setRouterOwner(\\n    address router,\\n    address owner,\\n    RouterPermissionsInfo storage routerInfo\\n  ) internal {\\n    _onlyRouterOwner(router, routerInfo.routerOwners[router]);\\n\\n    // Check that proposed is different than current owner\\n    if (_getRouterOwner(router, routerInfo.routerOwners) == owner)\\n      revert RouterPermissionsLogic__setRouterOwner_notNewOwner();\\n\\n    // Emit event\\n    emit RouterOwnerUpdated(router, routerInfo.routerOwners[router], owner);\\n\\n    // Update the current owner\\n    routerInfo.routerOwners[router] = owner;\\n  }\\n\\n  /**\\n   * @notice Used to set router initial properties\\n   * @param router Router address to setup\\n   * @param owner Initial Owner of router\\n   * @param recipient Initial Recipient of router\\n   */\\n  function setupRouter(\\n    address router,\\n    address owner,\\n    address recipient,\\n    RouterPermissionsInfo storage routerInfo\\n  ) internal {\\n    // Sanity check: not empty\\n    if (router == address(0)) revert RouterPermissionsLogic__setupRouter_routerEmpty();\\n\\n    // Sanity check: needs approval\\n    if (routerInfo.approvedRouters[router]) revert RouterPermissionsLogic__setupRouter_alreadyApproved();\\n\\n    // Approve router\\n    routerInfo.approvedRouters[router] = true;\\n\\n    // Emit event\\n    emit RouterAdded(router, msg.sender);\\n\\n    // Update routerOwner (zero address possible)\\n    if (owner != address(0)) {\\n      routerInfo.routerOwners[router] = owner;\\n      emit RouterOwnerUpdated(router, address(0), owner);\\n    }\\n\\n    // Update router recipient\\n    if (recipient != address(0)) {\\n      routerInfo.routerRecipients[router] = recipient;\\n      emit RouterRecipientSet(router, address(0), recipient);\\n    }\\n  }\\n\\n  /**\\n   * @notice Used to remove routers that can transact crosschain\\n   * @param router Router address to remove\\n   */\\n  function removeRouter(address router, RouterPermissionsInfo storage routerInfo) internal {\\n    // Sanity check: not empty\\n    if (router == address(0)) revert RouterPermissionsLogic__removeRouter_routerEmpty();\\n\\n    // Sanity check: needs removal\\n    if (!routerInfo.approvedRouters[router]) revert RouterPermissionsLogic__removeRouter_notAdded();\\n\\n    // Update mapping\\n    routerInfo.approvedRouters[router] = false;\\n\\n    // Emit event\\n    emit RouterRemoved(router, msg.sender);\\n\\n    // Remove router owner\\n    address _owner = routerInfo.routerOwners[router];\\n    if (_owner != address(0)) {\\n      emit RouterOwnerUpdated(router, _owner, address(0));\\n      routerInfo.routerOwners[router] = address(0);\\n    }\\n\\n    // Remove router recipient\\n    address _recipient = routerInfo.routerRecipients[router];\\n    if (_recipient != address(0)) {\\n      emit RouterRecipientSet(router, _recipient, address(0));\\n      routerInfo.routerRecipients[router] = address(0);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the router owner if it is set, or the router itself if not\\n   */\\n  function _getRouterOwner(address router, mapping(address => address) storage _routerOwners)\\n    internal\\n    view\\n    returns (address)\\n  {\\n    address _owner = _routerOwners[router];\\n    return _owner == address(0) ? router : _owner;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ProposedOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.14;\\r\\n\\r\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ProposedOwnable\\r\\n * @notice Contract module which provides a basic access control mechanism,\\r\\n * where there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed via a two step process:\\r\\n * 1. Call `proposeOwner`\\r\\n * 2. Wait out the delay period\\r\\n * 3. Call `acceptOwner`\\r\\n *\\r\\n * @dev This module is used through inheritance. It will make available the\\r\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\r\\n * their use to the owner.\\r\\n *\\r\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\r\\n * contract\\r\\n *\\r\\n */\\r\\nabstract contract ProposedOwnable is IProposedOwnable {\\r\\n  // ========== Custom Errors ===========\\r\\n\\r\\n  error ProposedOwnable__onlyOwner_notOwner();\\r\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\r\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\r\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\r\\n  error ProposedOwnable__renounceOwnership_noProposal();\\r\\n  error ProposedOwnable__renounceOwnership_delayNotElapsed();\\r\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\r\\n  error ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\r\\n\\r\\n  // ============ Properties ============\\r\\n\\r\\n  address private _owner;\\r\\n\\r\\n  address private _proposed;\\r\\n  uint256 private _proposedOwnershipTimestamp;\\r\\n\\r\\n  uint256 private constant _delay = 3 days;\\r\\n\\r\\n  // ======== Getters =========\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the proposed owner.\\r\\n   */\\r\\n  function proposed() public view virtual returns (address) {\\r\\n    return _proposed;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the address of the proposed owner.\\r\\n   */\\r\\n  function proposedTimestamp() public view virtual returns (uint256) {\\r\\n    return _proposedOwnershipTimestamp;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the delay period before a new owner can be accepted.\\r\\n   */\\r\\n  function delay() public view virtual returns (uint256) {\\r\\n    return _delay;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Throws if called by any account other than the proposed owner.\\r\\n   */\\r\\n  modifier onlyProposed() {\\r\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Indicates if the ownership has been renounced() by\\r\\n   * checking if current owner is address(0)\\r\\n   */\\r\\n  function renounced() public view returns (bool) {\\r\\n    return _owner == address(0);\\r\\n  }\\r\\n\\r\\n  // ======== External =========\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\r\\n   * newly proposed owner as step 1 in a 2-step process\\r\\n   */\\r\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\r\\n    // Contract as source of truth\\r\\n    if (_proposed == newlyProposed && newlyProposed != address(0))\\r\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\r\\n\\r\\n    // Sanity check: reasonable proposal\\r\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\r\\n\\r\\n    _setProposed(newlyProposed);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Renounces ownership of the contract after a delay\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    // Ensure there has been a proposal cycle started\\r\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\r\\n\\r\\n    // Ensure delay has elapsed\\r\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\r\\n      revert ProposedOwnable__renounceOwnership_delayNotElapsed();\\r\\n\\r\\n    // Require proposed is set to 0\\r\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\r\\n\\r\\n    // Emit event, set new owner, reset timestamp\\r\\n    _setOwner(_proposed);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function acceptProposedOwner() public virtual onlyProposed {\\r\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\r\\n    // is 0-d out and this check is implicitly enforced by modifier\\r\\n\\r\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\r\\n    // the only time this would happen is if the _proposed was never\\r\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\r\\n    // above)\\r\\n\\r\\n    // Ensure delay has elapsed\\r\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\r\\n      revert ProposedOwnable__acceptProposedOwner_delayNotElapsed();\\r\\n\\r\\n    // Emit event, set new owner, reset timestamp\\r\\n    _setOwner(_proposed);\\r\\n  }\\r\\n\\r\\n  // ======== Internal =========\\r\\n\\r\\n  function _setOwner(address newOwner) internal {\\r\\n    address oldOwner = _owner;\\r\\n    _owner = newOwner;\\r\\n    _proposedOwnershipTimestamp = 0;\\r\\n    _proposed = address(0);\\r\\n    emit OwnershipTransferred(oldOwner, newOwner);\\r\\n  }\\r\\n\\r\\n  function _setProposed(address newlyProposed) private {\\r\\n    _proposedOwnershipTimestamp = block.timestamp;\\r\\n    _proposed = newlyProposed;\\r\\n    emit OwnershipProposed(newlyProposed);\\r\\n  }\\r\\n}\\r\\n\\r\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial\\r\\n   */\\r\\n  function __ProposedOwnable_init() internal onlyInitializing {\\r\\n    __ProposedOwnable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\r\\n    _setOwner(msg.sender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n   * variables without shifting down storage in the inheritance chain.\\r\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n   */\\r\\n  uint256[49] private __GAP;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProposedOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.14;\\r\\n\\r\\n/**\\r\\n * @title IProposedOwnable\\r\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\r\\n * process\\r\\n */\\r\\ninterface IProposedOwnable {\\r\\n  /**\\r\\n   * @dev This emits when change in ownership of a contract is proposed.\\r\\n   */\\r\\n  event OwnershipProposed(address indexed proposedOwner);\\r\\n\\r\\n  /**\\r\\n   * @dev This emits when ownership of a contract changes.\\r\\n   */\\r\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the owner\\r\\n   * @return owner_ The address of the owner.\\r\\n   */\\r\\n  function owner() external view returns (address owner_);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the address of the proposed owner\\r\\n   * @return proposed_ The address of the proposed.\\r\\n   */\\r\\n  function proposed() external view returns (address proposed_);\\r\\n\\r\\n  /**\\r\\n   * @notice Set the address of the proposed owner of the contract\\r\\n   * @param newlyProposed The proposed new owner of the contract\\r\\n   */\\r\\n  function proposeNewOwner(address newlyProposed) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Set the address of the proposed owner of the contract\\r\\n   */\\r\\n  function acceptProposedOwner() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"FibswapUtils__handleIncomingAsset_ethWithErcTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FibswapUtils__handleIncomingAsset_notAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FibswapUtils__transferAssetFromContract_notNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addAllowedAssetId_alreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addAllowedAssetIds_invalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addAssetId_alreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addAssetIds_invalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_badAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_badRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addLiquidityForRouter_routerEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addStrategy_invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addSwapRouter_alreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addSwapRouter_invalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__addSwapRouter_invalidSwapRouterAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__decrementLiquidity_notEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__disableAssetId_notAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_alreadyExecuted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_incorrectDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_invalidRouterSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__execute_unapprovedRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeAssetId_notAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeLiquidity_amountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeLiquidity_insufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeLiquidity_recipientEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeStrategy_invalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeSwapRouter_alreadyRemoved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__removeSwapRouter_invalidArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_emptyToOrRecovery\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_invalidSwapRouer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_notAllowedAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_notApprovedRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_notGasFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_notSupportedAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_tooBigSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_tooSmallLocalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Fibswap__xcall_wrongDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__acceptProposedOwner_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__onlyRouterOwner_notRouterOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__removeRouter_notAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__removeRouter_routerEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setRouterOwner_notNewOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setRouterRecipient_notNewRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setupRouter_alreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterPermissionsLogic__setupRouter_routerEmpty\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"localAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"routerSignature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NewExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NewFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NewMaxAllowSlippage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SwapRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transactingAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"XCalled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"localAssets\",\"type\":\"address[]\"}],\"name\":\"addAssetIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addDiscountStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"addLiquidityFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"}],\"name\":\"addSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"allowAssetIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"approvedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetId\",\"type\":\"address\"}],\"name\":\"disableAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"routerSignature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"}],\"internalType\":\"struct IFibswap.ExecuteArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"contract IExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllowSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"localAssetId\",\"type\":\"address\"}],\"name\":\"removeAssetId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeDiscountStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"removeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"removeSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"routerBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"routerOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"routerRecipients\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setRouterOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setRouterRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrapped\",\"type\":\"address\"}],\"name\":\"setWrapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setupRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapper\",\"outputs\":[{\"internalType\":\"contract IWrapped\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"orgParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IFibswap.ExternalCall\",\"name\":\"dstParam\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recovery\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"orgLocalAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstLocalAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEth\",\"type\":\"bool\"}],\"internalType\":\"struct IFibswap.CallParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"transactingAssetId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"localAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExactInput\",\"type\":\"bool\"}],\"internalType\":\"struct IFibswap.XCallArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"xcall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Fibswap", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}