{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"reward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: OSL-3.0\\t\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Rewards {\\r\\n\\r\\n   \\r\\n    address public owner;\\r\\n    IERC20 public incToken;\\r\\n\\r\\n    struct Campaign {\\r\\n        string title;\\r\\n        uint256 prizePool;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        bool active;\\r\\n        uint256 totalImpact;\\r\\n    }\\r\\n\\r\\n    struct Participant {\\r\\n        uint256 impact;\\r\\n        uint256 rewards;\\r\\n    }\\r\\n\\r\\n    // Events\\r\\n    event CampaignCreated(uint256 indexed campaignId, address indexed creator);\\r\\n    event UserRewarded(address indexed user, uint256 indexed campaignId, uint256 rewards);\\r\\n\\r\\n    // Modifiers\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only owner can perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyActiveCampaigns(uint256 campaignId) {\\r\\n        require(campaigns[campaignId].active, \\\"Campaign is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Mappings\\r\\n    mapping(uint256 => Campaign) public campaigns;\\r\\n    mapping(uint256 => mapping(address => Participant)) public participants;\\r\\n    uint256 public campaignCounter;\\r\\n\\r\\n    // Constructor\\r\\n    constructor(address _incToken) {\\r\\n        owner = msg.sender;\\r\\n        incToken = IERC20(_incToken);\\r\\n    }\\r\\n\\r\\n    function createCampaign(string memory _title, uint256 _prizePool, uint256 _duration) external onlyOwner {\\r\\n        require(incToken.balanceOf(msg.sender) >= _prizePool, \\\"Insufficient INC balance\\\");\\r\\n        incToken.transferFrom(msg.sender, address(this), _prizePool);\\r\\n\\r\\n        uint256 startTime = block.timestamp;\\r\\n        uint256 endTime = startTime + _duration;\\r\\n\\r\\n        campaigns[campaignCounter] = Campaign(_title, _prizePool, startTime, endTime, true, 0);\\r\\n        emit CampaignCreated(campaignCounter, msg.sender);\\r\\n\\r\\n        campaignCounter = campaignCounter + 1;\\r\\n    }\\r\\n\\r\\n    function participateInCampaign(uint256 campaignId, string memory content) external onlyActiveCampaigns(campaignId) {\\r\\n        \\r\\n        uint256 quality = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, content))) % 100;\\r\\n\\r\\n        updateImpact(campaignId, msg.sender, quality);\\r\\n    }\\r\\n\\r\\n    function updateImpact(uint256 campaignId, address user, uint256 impact) internal onlyActiveCampaigns(campaignId) {\\r\\n        participants[campaignId][user].impact = participants[campaignId][user].impact + impact;\\r\\n        campaigns[campaignId].totalImpact = campaigns[campaignId].totalImpact + impact;\\r\\n    }\\r\\n\\r\\n    function rewardUser(uint256 campaignId, address user) external onlyOwner onlyActiveCampaigns(campaignId) {\\r\\n        uint256 impact = participants[campaignId][user].impact;\\r\\n        uint256 rewards = calculateReward(campaignId, impact);\\r\\n\\r\\n        incToken.transfer(user, rewards);\\r\\n        participants[campaignId][user].rewards = rewards;\\r\\n        emit UserRewarded(user, campaignId, rewards);\\r\\n    }\\r\\n\\r\\n    function calculateReward(uint256 campaignId, uint256 impact) public view returns (uint256) {\\r\\n        uint256 prizePool = campaigns[campaignId].prizePool;\\r\\n        uint256 totalImpact = campaigns[campaignId].totalImpact;\\r\\n\\r\\n       \\r\\n        uint256 reward = (prizePool * impact) / totalImpact;\\r\\n        return reward;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"UserRewarded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"impact\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"impact\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"participateInCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rewardUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Rewards", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006bed776a2e90605361cc976c7f2b1c9ebb7be3b4", "EVMVersion": "Default", "Library": "", "LicenseType": "OSL-3.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://caeb1d897e9c7a786e05bb7af7aeedca20be897e28c035a7f1b6c775f5ced603"}