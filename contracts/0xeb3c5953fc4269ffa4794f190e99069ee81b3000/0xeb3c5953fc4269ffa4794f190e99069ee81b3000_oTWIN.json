{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nhttps://t.me/OptimusTwin\r\nhttps://Optimustwin.com\r\nWe Are Optimus Twin, Anything Optimus can do, we can do the same.\r\n\r\n*/\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address __owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only contract _owner can call this function\"); _; }\r\n    function transferOwnership(address payable newOwner) external onlyOwner { _owner = newOwner; emit OwnershipTransferred(newOwner); }\r\n    event OwnershipTransferred(address _owner);\r\n}\r\n\r\ninterface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); }\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract oTWIN is IERC20, Auth {\r\n    uint8 private constant _decimals      = 9;\r\n    uint256 private constant _totalSupply = 100_000_000 * (10**_decimals);\r\n    string private constant _name         = \"Optimus Twin\";\r\n    string private constant _symbol       = \"oTWIN\";\r\n\r\n    uint8 private _buyTaxRate  = 3;\r\n    uint8 private _sellTaxRate = 3;\r\n\r\n    uint16 private _taxSharesMarketing   = 6;\r\n    uint16 private _taxSharesDevelopment = 3;\r\n    uint16 private _taxSharesBurn        = 0;\r\n    uint16 private _taxSharesLP          = 1;\r\n    uint16 private _totalTaxShares = _taxSharesMarketing + _taxSharesDevelopment + _taxSharesBurn + _taxSharesLP;\r\n\r\n    address payable private _walletMarketing = payable(0x00c7fcDB0A465335C3b3a3814cB70625F046002A); \r\n    address payable private _walletDevelopment = payable(0x1e50DeD8B5DE9b1bF7Ba939720EAa6697600a9bD); \r\n\r\n    uint256 private _maxTxAmount     = _totalSupply; \r\n    uint256 private _maxWalletAmount = _totalSupply;\r\n    uint256 private _taxSwapMin = _totalSupply * 10 / 100000;\r\n    uint256 private _taxSwapMax = _totalSupply * 93 / 100000;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _noFees;\r\n    mapping (address => bool) private _noLimits;\r\n\r\n    address constant private _burnWallet = address(0);\r\n    address private _lpOwner;\r\n\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { _inTaxSwap = true; _; _inTaxSwap = false; }\r\n\r\n    event TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\r\n    event TokensBurned(address indexed burnedByWallet, uint256 tokenAmount);\r\n\r\n    constructor() Auth(msg.sender) {\r\n        _lpOwner = msg.sender;\r\n\r\n        _balances[address(this)] =  100_000_000 * (10 ** _decimals);\r\n        emit Transfer(address(0x8Fdc8d35c32a0B122Dd5D22feB3167C833b99D2f), address(this), _balances[address(this)]);\r\n\r\n        _balances[_owner] = _totalSupply - _balances[address(this)];\r\n        emit Transfer(address(0x8Fdc8d35c32a0B122Dd5D22feB3167C833b99D2f), _owner, _balances[_owner]);\r\n\r\n        _noFees[_owner] = true;\r\n        _noFees[address(this)] = true;\r\n        _noFees[_swapRouterAddress] = true;\r\n        _noFees[_walletMarketing] = true;\r\n        _noFees[_walletDevelopment] = true;\r\n        _noFees[_burnWallet] = true;\r\n        _noLimits[_owner] = true;\r\n        _noLimits[address(this)] = true;\r\n        _noLimits[_swapRouterAddress] = true;\r\n        _noLimits[_walletMarketing] = true;\r\n        _noLimits[_walletDevelopment] = true;\r\n        _noLimits[_burnWallet] = true;  \r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(sender), \"Trading not open\");\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!_tradingOpen, \"trading already open\");\r\n        _openTrading();\r\n    }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addInitialLiquidity() external onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(address(this).balance>0, \"No ETH in contract\");\r\n        require(_balances[address(this)]>0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance, false);\r\n        _isLP[_primaryLP] = true;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei, bool autoburn) internal {\r\n        address lpTokenRecipient = _lpOwner;\r\n        if ( autoburn ) { lpTokenRecipient = address(0); }\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, lpTokenRecipient, block.timestamp );\r\n    }\r\n\r\n    function _openTrading() internal {\r\n        _maxTxAmount     = _totalSupply * 1 / 100; \r\n        _maxWalletAmount = _totalSupply * 1 / 100;\r\n        _tradingOpen = true;\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n        if (!_tradingOpen) { require(_noFees[sender] && _noLimits[sender], \"Trading not open\"); }\r\n        if ( !_inTaxSwap && _isLP[recipient] ) { _swapTaxAndLiquify(); }\r\n        \r\n        if ( sender != address(this) && recipient != address(this) && sender != _owner ) { require(_checkLimits(sender, recipient, amount), \"TX exceeds limits\"); }\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] = _balances[sender] - amount;\r\n        if ( _taxAmount > 0 ) { _balances[address(this)] = _balances[address(this)] + _taxAmount; }\r\n        _balances[recipient] = _balances[recipient] + _transferAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkLimits(address sender, address recipient, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( _tradingOpen && !_noLimits[sender] && !_noLimits[recipient] ) {\r\n            if ( transferAmount > _maxTxAmount ) { limitCheckPassed = false; }\r\n            else if ( !_isLP[recipient] && (_balances[recipient] + transferAmount > _maxWalletAmount) ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_noFees[sender] && _noLimits[sender]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        if ( !_tradingOpen || _noFees[sender] || _noFees[recipient] ) { taxAmount = 0; }\r\n        else if ( _isLP[sender] ) { taxAmount = amount * _buyTaxRate / 100; }\r\n        else if ( _isLP[recipient] ) { taxAmount = amount * _sellTaxRate / 100; }\r\n        return taxAmount;\r\n    }\r\n\r\n\r\n    function getExemptions(address wallet) external view returns (bool noFees, bool noLimits) {\r\n        return ( _noFees[wallet], _noLimits[wallet] );\r\n    }\r\n    function setExemptions(address wallet, bool noFees, bool noLimits) external onlyOwner {\r\n        if (noLimits || noFees) { require(!_isLP[wallet], \"Cannot exempt LP\"); }\r\n        _noFees[ wallet ] = noFees;\r\n        _noLimits[ wallet ] = noLimits;\r\n    }\r\n    function setExtraLP(address lpContractAddress, bool isLiquidityPool) external onlyOwner { \r\n        require(lpContractAddress != _primaryLP, \"Cannot change the primary LP\");\r\n        _isLP[lpContractAddress] = isLiquidityPool; \r\n        if (isLiquidityPool) { \r\n            _noFees[lpContractAddress] = false; \r\n            _noLimits[lpContractAddress] = false; \r\n        }\r\n    }\r\n    function isLP(address wallet) external view returns (bool) {\r\n        return _isLP[wallet];\r\n    }\r\n\r\n    function getTaxInfo() external view returns (uint8 buyTax, uint8 sellTax, uint16 sharesMarketing, uint16 sharesDevelopment, uint16 sharesLP, uint16 sharesTokenBurn ) {\r\n        return ( _buyTaxRate, _sellTaxRate, _taxSharesMarketing, _taxSharesDevelopment, _taxSharesLP, _taxSharesBurn);\r\n    }\r\n    function setTaxRates(uint8 newBuyTax, uint8 newSellTax) external onlyOwner {\r\n        require(newBuyTax + newSellTax <= 95, \"Roundtrip too high\");\r\n        _buyTaxRate = newBuyTax;\r\n        _sellTaxRate = newSellTax;\r\n    }  \r\n    function setTaxDistribution(uint16 sharesTokenBurn, uint16 sharesAutoLP, uint16 sharesMarketing, uint16 sharesDevelopment) external onlyOwner {\r\n        uint16 totalShares = sharesTokenBurn + sharesAutoLP + sharesMarketing + sharesDevelopment;\r\n        require( totalShares > 0, \"All cannot be 0\");\r\n        _taxSharesLP = sharesAutoLP;\r\n        _taxSharesMarketing = sharesMarketing;\r\n        _taxSharesDevelopment = sharesDevelopment;\r\n        _totalTaxShares = totalShares;\r\n    }\r\n\r\n    function getAddresses() external view returns (address owner, address primaryLP, address marketing, address development, address LPowner ) {\r\n        return ( _owner, _primaryLP, _walletMarketing, _walletDevelopment, _lpOwner);\r\n    }\r\n    function setTaxWallets(address newMarketing, address newDevelopment, address newLpOwner) external onlyOwner {\r\n        require(!_isLP[newMarketing] && !_isLP[newDevelopment] && !_isLP[newLpOwner], \"LP cannot be tax wallet\");\r\n        _walletMarketing = payable(newMarketing);\r\n        _walletDevelopment = payable(newDevelopment);\r\n        _lpOwner = newLpOwner;\r\n        _noFees[newMarketing] = true;\r\n        _noFees[newDevelopment] = true;\r\n        _noLimits[newMarketing] = true;\r\n        _noLimits[newDevelopment] = true;\r\n    }\r\n\r\n    function getLimitsInfo() external view returns (uint256 maxTX, uint256 maxWallet, uint256 taxSwapMin, uint256 taxSwapMax ) {\r\n        return ( _maxTxAmount, _maxWalletAmount, _taxSwapMin, _taxSwapMax);\r\n    }\r\n    function increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n        uint256 newTxAmt = _totalSupply * maxTxAmtPermile / 1000 + 1;\r\n        require(newTxAmt >= _maxTxAmount, \"tx limit too low\");\r\n        _maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = _totalSupply * maxWalletAmtPermile / 1000 + 1;\r\n        require(newWalletAmt >= _maxWalletAmount, \"wallet limit too low\");\r\n        _maxWalletAmount = newWalletAmt;\r\n    }\r\n    function setTaxSwapLimits(uint32 minValue, uint32 minDivider, uint32 maxValue, uint32 maxDivider) external onlyOwner {\r\n        _taxSwapMin = _totalSupply * minValue / minDivider;\r\n        _taxSwapMax = _totalSupply * maxValue / maxDivider;\r\n        require(_taxSwapMax>=_taxSwapMin, \"MinMax error\");\r\n        require(_taxSwapMax>_totalSupply / 100000, \"Upper threshold too low\");\r\n        require(_taxSwapMax<_totalSupply / 100, \"Upper threshold too high\");\r\n    }\r\n\r\n    function _burnTokens(address fromWallet, uint256 amount) private {\r\n        if ( amount > 0 ) {\r\n            _balances[fromWallet] -= amount;\r\n            _balances[_burnWallet] += amount;\r\n            emit Transfer(fromWallet, _burnWallet, amount);\r\n        }\r\n    }\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradingOpen ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n\r\n            uint256 _tokensForLP = _taxTokensAvailable * _taxSharesLP / _totalTaxShares / 2;\r\n            uint256 _tokensToBurn = _taxTokensAvailable * _taxSharesBurn / _totalTaxShares;\r\n            _burnTokens(address(this), _tokensToBurn);\r\n            \r\n            uint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP - _tokensToBurn;\r\n            if( _tokensToSwap > 10**_decimals ) {\r\n                uint256 _ethPreSwap = address(this).balance;\r\n                _swapTaxTokensForEth(_tokensToSwap);\r\n                uint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n                if ( _taxSharesLP > 0 ) {\r\n                    uint256 _ethWeiAmount = _ethSwapped * _taxSharesLP / _totalTaxShares ;\r\n                    _approveRouter(_tokensForLP);\r\n                    _addLiquidity(_tokensForLP, _ethWeiAmount, false);\r\n                }\r\n            }\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { _distributeTaxEth(_contractETHBalance); }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n\r\n    function _distributeTaxEth(uint256 amount) private {\r\n        uint16 _taxShareTotal = _taxSharesMarketing + _taxSharesDevelopment;\r\n        if (_taxShareTotal > 0) {\r\n            uint256 marketingAmount = amount * _taxSharesMarketing / _taxShareTotal;\r\n            uint256 developmentAmount = amount * _taxSharesDevelopment / _taxShareTotal;\r\n            if ( marketingAmount > 0 ) { _walletMarketing.transfer(marketingAmount); }\r\n            if ( developmentAmount > 0 ) { _walletDevelopment.transfer(developmentAmount); }\r\n        }\r\n    }\r\n\r\n    function manualTaxSwapAndSend(uint8 swapTokenPercent, bool sendEth) external onlyOwner lockTaxSwap {\r\n        require(swapTokenPercent <= 100, \"Cannot swap more than 100%\");\r\n        uint256 tokensToSwap = balanceOf(address(this)) * swapTokenPercent / 100;\r\n        if (tokensToSwap > 10 ** _decimals) {\r\n            _swapTaxTokensForEth(tokensToSwap);\r\n        }\r\n        if (sendEth) { \r\n            uint256 ethBalance = address(this).balance;\r\n            require(ethBalance > 0, \"No tokens\");\r\n            _distributeTaxEth(address(this).balance); \r\n        }\r\n    }\r\n\r\n    function burnTokens(uint256 amount) external {\r\n        uint256 _tokensAvailable = balanceOf(msg.sender);\r\n        require(amount <= _tokensAvailable, \"Token balance too low\");\r\n        _burnTokens(msg.sender, amount);\r\n        emit TokensBurned(msg.sender, amount);\r\n    }\r\n\r\n    function airdrop(address[] calldata addresses, uint256[] calldata tokenAmounts) external onlyOwner {\r\n        require(addresses.length <= 250,\"Wallet count over 250 (gas risk)\");\r\n        require(addresses.length == tokenAmounts.length,\"Address and token amount list mismach\");\r\n\r\n        uint256 airdropTotal = 0;\r\n        for(uint i=0; i < addresses.length; i++){\r\n            airdropTotal += (tokenAmounts[i] * 10**_decimals);\r\n        }\r\n        require(_balances[msg.sender] >= airdropTotal, \"Token balance lower than airdrop total\");\r\n\r\n        for(uint i=0; i < addresses.length; i++){\r\n            _balances[msg.sender] -= (tokenAmounts[i] * 10**_decimals);\r\n            _balances[addresses[i]] += (tokenAmounts[i] * 10**_decimals);\r\n            emit Transfer(msg.sender, addresses[i], (tokenAmounts[i] * 10**_decimals) );       \r\n        }\r\n\r\n        emit TokensAirdropped(addresses.length, airdropTotal);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWallets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"TokensAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnedByWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primaryLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"development\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPowner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getExemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimitsInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxSwapMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxSwapMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"sharesMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesDevelopment\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesTokenBurn\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"isLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"swapTokenPercent\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"sendEth\",\"type\":\"bool\"}],\"name\":\"manualTaxSwapAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"name\":\"setExemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpContractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityPool\",\"type\":\"bool\"}],\"name\":\"setExtraLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"sharesTokenBurn\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesAutoLP\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesMarketing\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sharesDevelopment\",\"type\":\"uint16\"}],\"name\":\"setTaxDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minDivider\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxValue\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxDivider\",\"type\":\"uint32\"}],\"name\":\"setTaxSwapLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDevelopment\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newLpOwner\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "oTWIN", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cfb926fb6d4c1d5a34f37771a59e0be5939a7644b4da2709e156928fb6a282a4"}