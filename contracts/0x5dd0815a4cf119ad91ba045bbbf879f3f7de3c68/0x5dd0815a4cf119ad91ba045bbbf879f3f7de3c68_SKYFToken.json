{"SourceCode": "pragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SKYFChain Tokens\r\n * @dev SKYFChain Token, ERC20 implementation, contract based on Zeppelin contracts:\r\n * Ownable, BasicToken, StandardToken, ERC20Basic, Burnable\r\n*/\r\ncontract SKYFToken is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    enum State {Active, Finalized}\r\n    State public state = State.Active;\r\n\r\n\r\n    /**\r\n     * @dev ERC20 descriptor variables\r\n     */\r\n    string public constant name = \"SKYFchain\";\r\n    string public constant symbol = \"SKYFT\";\r\n    uint8 public decimals = 18;\r\n\r\n    uint256 public constant startTime = 1534334400;\r\n    uint256 public constant airdropTime = startTime + 365 days;\r\n    uint256 public constant shortAirdropTime = startTime + 182 days;\r\n    \r\n    \r\n    uint256 public totalSupply_ = 1200 * 10 ** 24;\r\n\r\n    uint256 public constant crowdsaleSupply = 528 * 10 ** 24;\r\n    uint256 public constant networkDevelopmentSupply = 180 * 10 ** 24;\r\n    uint256 public constant communityDevelopmentSupply = 120 * 10 ** 24;\r\n    uint256 public constant reserveSupply = 114 * 10 ** 24; \r\n    uint256 public constant bountySupply = 18 * 10 ** 24;\r\n    uint256 public constant teamSupply = 240 * 10 ** 24;\r\n    \r\n\r\n    address public crowdsaleWallet;\r\n    address public networkDevelopmentWallet;\r\n    address public communityDevelopmentWallet;\r\n    address public reserveWallet;\r\n    address public bountyWallet;\r\n    address public teamWallet;\r\n\r\n    address public siteAccount;\r\n\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    mapping (address => uint256) balances;\r\n    mapping (address => uint256) airdrop;\r\n    mapping (address => uint256) shortenedAirdrop;\r\n\r\n        \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Burn(address indexed burner, uint256 value);\r\n    event Airdrop(address indexed beneficiary, uint256 amount);\r\n\r\n    /**\r\n     * @dev Contract constructor\r\n     */\r\n    constructor(address _crowdsaleWallet\r\n                , address _networkDevelopmentWallet\r\n                , address _communityDevelopmentWallet\r\n                , address _reserveWallet\r\n                , address _bountyWallet\r\n                , address _teamWallet\r\n                , address _siteAccount) public {\r\n        require(_crowdsaleWallet != address(0));\r\n        require(_networkDevelopmentWallet != address(0));\r\n        require(_communityDevelopmentWallet != address(0));\r\n        require(_reserveWallet != address(0));\r\n        require(_bountyWallet != address(0));\r\n        require(_teamWallet != address(0));\r\n\r\n        require(_siteAccount != address(0));\r\n\r\n        crowdsaleWallet = _crowdsaleWallet;\r\n        networkDevelopmentWallet = _networkDevelopmentWallet;\r\n        communityDevelopmentWallet = _communityDevelopmentWallet;\r\n        reserveWallet = _reserveWallet;\r\n        bountyWallet = _bountyWallet;\r\n        teamWallet = _teamWallet;\r\n\r\n        siteAccount = _siteAccount;\r\n\r\n        // Issue 528 millions crowdsale tokens\r\n        _issueTokens(crowdsaleWallet, crowdsaleSupply);\r\n\r\n        // Issue 180 millions network development tokens\r\n        _issueTokens(networkDevelopmentWallet, networkDevelopmentSupply);\r\n\r\n        // Issue 120 millions community development tokens\r\n        _issueTokens(communityDevelopmentWallet, communityDevelopmentSupply);\r\n\r\n        // Issue 114 millions reserve tokens\r\n        _issueTokens(reserveWallet, reserveSupply);\r\n\r\n        // Issue 18 millions bounty tokens\r\n        _issueTokens(bountyWallet, bountySupply);\r\n\r\n        // Issue 240 millions team tokens\r\n        _issueTokens(teamWallet, teamSupply);\r\n\r\n        allowed[crowdsaleWallet][siteAccount] = crowdsaleSupply;\r\n        emit Approval(crowdsaleWallet, siteAccount, crowdsaleSupply);\r\n        allowed[crowdsaleWallet][owner] = crowdsaleSupply;\r\n        emit Approval(crowdsaleWallet, owner, crowdsaleSupply);\r\n    }\r\n\r\n    function _issueTokens(address _to, uint256 _amount) internal {\r\n        require(balances[_to] == 0);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        emit Transfer(address(0), _to, _amount);\r\n    }\r\n\r\n    function _airdropUnlocked(address _who) internal view returns (bool) {\r\n        return now > airdropTime\r\n        || (now > shortAirdropTime && airdrop[_who] == 0) \r\n        || !isAirdrop(_who);\r\n    }\r\n\r\n    modifier erc20Allowed() {\r\n        require(state == State.Finalized || msg.sender == owner|| msg.sender == siteAccount || msg.sender == crowdsaleWallet);\r\n        require (_airdropUnlocked(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrSiteAccount() {\r\n        require(msg.sender == owner || msg.sender == siteAccount);\r\n        _;\r\n    }\r\n    \r\n    function setSiteAccountAddress(address _address) public onlyOwner {\r\n        require(_address != address(0));\r\n\r\n        uint256 allowance = allowed[crowdsaleWallet][siteAccount];\r\n        allowed[crowdsaleWallet][siteAccount] = 0;\r\n        emit Approval(crowdsaleWallet, siteAccount, 0);\r\n        allowed[crowdsaleWallet][_address] = allowed[crowdsaleWallet][_address].add(allowance);\r\n        emit Approval(crowdsaleWallet, _address, allowed[crowdsaleWallet][_address]);\r\n        siteAccount = _address;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public erc20Allowed returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(_airdropUnlocked(_to));\r\n\r\n        \r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public erc20Allowed returns (bool) {\r\n        return _transferFrom(msg.sender, _from, _to, _value);\r\n    }\r\n\r\n    function _transferFrom(address _who, address _from, address _to, uint256 _value) internal returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_airdropUnlocked(_to) || _from == crowdsaleWallet);\r\n\r\n        uint256 _allowance = allowed[_from][_who];\r\n\r\n        require(_value <= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][_who] = _allowance.sub(_value);\r\n\r\n        _recalculateAirdrop(_to);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public erc20Allowed returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n    */\r\n    function increaseApproval(address _spender, uint256 _addedValue) public erc20Allowed returns (bool) {\r\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n    */\r\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public erc20Allowed returns (bool) {\r\n        uint256 oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public erc20Allowed {\r\n        _burn(msg.sender, _value);\r\n    }\r\n\r\n    function _burn(address _who, uint256 _value) internal {\r\n        require(_value <= balances[_who]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        balances[_who] = balances[_who].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        emit Burn(_who, _value);\r\n        emit Transfer(_who, address(0), _value);\r\n    }\r\n\r\n    function finalize() public onlyOwner {\r\n        require(state == State.Active);\r\n        require(now > startTime);\r\n        state = State.Finalized;\r\n\r\n        uint256 crowdsaleBalance = balanceOf(crowdsaleWallet);\r\n\r\n        uint256 burnAmount = networkDevelopmentSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\r\n        _burn(networkDevelopmentWallet, burnAmount);\r\n\r\n        burnAmount = communityDevelopmentSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\r\n        _burn(communityDevelopmentWallet, burnAmount);\r\n\r\n        burnAmount = reserveSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\r\n        _burn(reserveWallet, burnAmount);\r\n\r\n        burnAmount = bountySupply.mul(crowdsaleBalance).div(crowdsaleSupply);\r\n        _burn(bountyWallet, burnAmount);\r\n\r\n        burnAmount = teamSupply.mul(crowdsaleBalance).div(crowdsaleSupply);\r\n        _burn(teamWallet, burnAmount);\r\n\r\n        _burn(crowdsaleWallet, crowdsaleBalance);\r\n    }\r\n    \r\n    function addAirdrop(address _beneficiary, uint256 _amount) public onlyOwnerOrSiteAccount {\r\n        require(_beneficiary != crowdsaleWallet);\r\n        require(_beneficiary != networkDevelopmentWallet);\r\n        require(_beneficiary != communityDevelopmentWallet);\r\n        require(_beneficiary != bountyWallet);\r\n        require(_beneficiary != siteAccount);\r\n        \r\n\r\n        //Don't allow to block already bought tokens with airdrop.\r\n        require(balances[_beneficiary] == 0 || isAirdrop(_beneficiary));\r\n\r\n        if (shortenedAirdrop[_beneficiary] != 0) {\r\n            shortenedAirdrop[_beneficiary] = shortenedAirdrop[_beneficiary].add(_amount);\r\n        }\r\n        else {\r\n            airdrop[_beneficiary] = airdrop[_beneficiary].add(_amount);\r\n        }\r\n        \r\n        _transferFrom(msg.sender, crowdsaleWallet, _beneficiary, _amount);\r\n        emit Airdrop(_beneficiary, _amount);\r\n    }\r\n\r\n    function isAirdrop(address _who) public view returns (bool result) {\r\n        return airdrop[_who] > 0 || shortenedAirdrop[_who] > 0;\r\n    }\r\n\r\n    function _recalculateAirdrop(address _who) internal {\r\n        if(state == State.Active && isAirdrop(_who)) {\r\n            uint256 initialAmount = airdrop[_who];\r\n            if (initialAmount > 0) {\r\n                uint256 rate = balances[_who].div(initialAmount);\r\n                if (rate >= 4) {\r\n                    delete airdrop[_who];\r\n                } else if (rate >= 2) {\r\n                    delete airdrop[_who];\r\n                    shortenedAirdrop[_who] = initialAmount;\r\n                }\r\n            } else {\r\n                initialAmount = shortenedAirdrop[_who];\r\n                if (initialAmount > 0) {\r\n                    rate = balances[_who].div(initialAmount);\r\n                    if (rate >= 4) {\r\n                        delete shortenedAirdrop[_who];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n   \r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"reserveSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkDevelopmentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityDevelopmentSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply_\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"networkDevelopmentWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"shortAirdropTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSiteAccountAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAirdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isAirdrop\",\"outputs\":[{\"name\":\"result\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"communityDevelopmentWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountySupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"siteAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bountyWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_crowdsaleWallet\",\"type\":\"address\"},{\"name\":\"_networkDevelopmentWallet\",\"type\":\"address\"},{\"name\":\"_communityDevelopmentWallet\",\"type\":\"address\"},{\"name\":\"_reserveWallet\",\"type\":\"address\"},{\"name\":\"_bountyWallet\",\"type\":\"address\"},{\"name\":\"_teamWallet\",\"type\":\"address\"},{\"name\":\"_siteAccount\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "SKYFToken", "CompilerVersion": "v0.4.24+commit.e67f0147", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000079cee3a98afc7f46436e71b452751b8b936b712900000000000000000000000073981535a4c589fdef072d18aabd66bbe0a97be90000000000000000000000003b48862b5fa558e9397f60618eef5b97c94988b6000000000000000000000000398786bc57a6103914d9a7a7e189c7a7f3867f4b000000000000000000000000b7af6257759a3d2bfca9c1c1404b3c48ad346ef20000000000000000000000000f98b76664ecf1a3488e3c4d97017940f28e1da7000000000000000000000000930c1123ed32cdbc1cc231eab60c90c0e42bc929", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://aba4fccf134a19c1b986b116186415ec4946963de5ba9fdb6225959805341c85"}