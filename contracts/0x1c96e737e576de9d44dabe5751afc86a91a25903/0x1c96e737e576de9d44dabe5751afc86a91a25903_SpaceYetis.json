{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*  ERC721I - ERC721I (ERC721 0xInuarashi Edition) - Gas Optimized\r\n    Contributors: 0xInuarashi (Message to Martians, Anonymice), 0xBasset (Ether Orcs) */\r\n\r\ncontract ERC721I {\r\n\r\n    string public name; string public symbol;\r\n    string internal baseTokenURI; string internal baseTokenURI_EXT;\r\n    constructor(string memory name_, string memory symbol_) { name = name_; symbol = symbol_; }\r\n\r\n    uint256 public totalSupply; \r\n    mapping(uint256 => address) public ownerOf; \r\n    mapping(address => uint256) public balanceOf; \r\n\r\n    mapping(uint256 => address) public getApproved; \r\n    mapping(address => mapping(address => bool)) public isApprovedForAll; \r\n\r\n    // Events\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Mint(address indexed to, uint256 tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    // // internal write functions\r\n    // mint\r\n    function _mint(address to_, uint256 tokenId_) internal virtual {\r\n        require(to_ != address(0x0), \"ERC721I: _mint() Mint to Zero Address\");\r\n        require(ownerOf[tokenId_] == address(0x0), \"ERC721I: _mint() Token to Mint Already Exists!\");\r\n\r\n        // ERC721I Starts Here\r\n        ownerOf[tokenId_] = to_;\r\n        balanceOf[to_]++;\r\n        totalSupply++; \r\n        // ERC721I Ends Here\r\n\r\n        emit Transfer(address(0x0), to_, tokenId_);\r\n        emit Mint(to_, tokenId_);\r\n    }\r\n\r\n    // transfer\r\n    function _transfer(address from_, address to_, uint256 tokenId_) internal virtual {\r\n        require(from_ == ownerOf[tokenId_], \"ERC721I: _transfer() Transfer Not Owner of Token!\");\r\n        require(to_ != address(0x0), \"ERC721I: _transfer() Transfer to Zero Address!\");\r\n\r\n        // ERC721I Starts Here\r\n        // checks if there is an approved address clears it if there is\r\n        if (getApproved[tokenId_] != address(0x0)) { \r\n            _approve(address(0x0), tokenId_); \r\n        } \r\n\r\n        ownerOf[tokenId_] = to_; \r\n        balanceOf[from_]--;\r\n        balanceOf[to_]++;\r\n        // ERC721I Ends Here\r\n\r\n        emit Transfer(from_, to_, tokenId_);\r\n    }\r\n\r\n    // approve\r\n    function _approve(address to_, uint256 tokenId_) internal virtual {\r\n        if (getApproved[tokenId_] != to_) {\r\n            getApproved[tokenId_] = to_;\r\n            emit Approval(ownerOf[tokenId_], to_, tokenId_);\r\n        }\r\n    }\r\n    function _setApprovalForAll(address owner_, address operator_, bool approved_) internal virtual {\r\n        require(owner_ != operator_, \"ERC721I: _setApprovalForAll() Owner must not be the Operator!\");\r\n        isApprovedForAll[owner_][operator_] = approved_;\r\n        emit ApprovalForAll(owner_, operator_, approved_);\r\n    }\r\n\r\n    // token uri\r\n    function _setBaseTokenURI(string memory uri_) internal virtual {\r\n        baseTokenURI = uri_;\r\n    }\r\n    function _setBaseTokenURI_EXT(string memory ext_) internal virtual {\r\n        baseTokenURI_EXT = ext_;\r\n    }\r\n\r\n    // // Internal View Functions\r\n    // Embedded Libraries\r\n    function _toString(uint256 value_) internal pure returns (string memory) {\r\n        if (value_ == 0) { return \"0\"; }\r\n        uint256 _iterate = value_; uint256 _digits;\r\n        while (_iterate != 0) { _digits++; _iterate /= 10; } // get digits in value_\r\n        bytes memory _buffer = new bytes(_digits);\r\n        while (value_ != 0) { _digits--; _buffer[_digits] = bytes1(uint8(48 + uint256(value_ % 10 ))); value_ /= 10; } // create bytes of value_\r\n        return string(_buffer); // return string converted bytes of value_\r\n    }\r\n\r\n    // Functional Views\r\n    function _isApprovedOrOwner(address spender_, uint256 tokenId_) internal view virtual returns (bool) {\r\n        require(ownerOf[tokenId_] != address(0x0), \"ERC721I: _isApprovedOrOwner() Owner is Zero Address!\");\r\n        address _owner = ownerOf[tokenId_];\r\n        return (spender_ == _owner || spender_ == getApproved[tokenId_] || isApprovedForAll[_owner][spender_]);\r\n    }\r\n    function _exists(uint256 tokenId_) internal view virtual returns (bool) {\r\n        return ownerOf[tokenId_] != address(0x0);\r\n    }\r\n\r\n    // // public write functions\r\n    function approve(address to_, uint256 tokenId_) public virtual {\r\n        address _owner = ownerOf[tokenId_];\r\n        require(to_ != _owner, \"ERC721I: approve() Cannot approve yourself!\");\r\n        require(msg.sender == _owner || isApprovedForAll[_owner][msg.sender], \"ERC721I: Caller not owner or Approved!\");\r\n        _approve(to_, tokenId_);\r\n    }\r\n    function setApprovalForAll(address operator_, bool approved_) public virtual {\r\n        _setApprovalForAll(msg.sender, operator_, approved_);\r\n    }\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) public virtual {\r\n        require(_isApprovedOrOwner(msg.sender, tokenId_), \"ERC721I: transferFrom() _isApprovedOrOwner = false!\");\r\n        _transfer(from_, to_, tokenId_);\r\n    }\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_, bytes memory data_) public virtual {\r\n        _transfer(from_, to_, tokenId_);\r\n        if (to_.code.length != 0) {\r\n            (, bytes memory _returned) = to_.staticcall(abi.encodeWithSelector(0x150b7a02, msg.sender, from_, tokenId_, data_));\r\n            bytes4 _selector = abi.decode(_returned, (bytes4));\r\n            require(_selector == 0x150b7a02, \"ERC721I: safeTransferFrom() to_ not ERC721Receivable!\");\r\n        }\r\n    }\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_) public virtual {\r\n        safeTransferFrom(from_, to_, tokenId_, \"\");\r\n    }\r\n\r\n    // 0xInuarashi Custom Functions\r\n    function multiTransferFrom(address from_, address to_, uint256[] memory tokenIds_) public virtual {\r\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n            transferFrom(from_, to_, tokenIds_[i]);\r\n        }\r\n    }\r\n    function multiSafeTransferFrom(address from_, address to_, uint256[] memory tokenIds_, bytes memory data_) public virtual {\r\n        for (uint256 i = 0; i < tokenIds_.length; i++) {\r\n            safeTransferFrom(from_, to_, tokenIds_[i], data_);\r\n        }\r\n    }\r\n\r\n    // OZ Standard Stuff\r\n    function supportsInterface(bytes4 interfaceId_) public pure returns (bool) {\r\n        return (interfaceId_ == 0x80ac58cd || interfaceId_ == 0x5b5e139f);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId_) public view virtual returns (string memory) {\r\n        require(ownerOf[tokenId_] != address(0x0), \"ERC721I: tokenURI() Token does not exist!\");\r\n        return string(abi.encodePacked(baseTokenURI, _toString(tokenId_), baseTokenURI_EXT));\r\n    }\r\n    // // public view functions\r\n    // never use these for functions ever, they are expensive af and for view only (this will be an issue in the future for interfaces)\r\n    function walletOfOwner(address address_) public virtual view returns (uint256[] memory) {\r\n        uint256 _balance = balanceOf[address_];\r\n        uint256[] memory _tokens = new uint256[] (_balance);\r\n        uint256 _index;\r\n        uint256 _loopThrough = totalSupply;\r\n        for (uint256 i = 0; i < _loopThrough; i++) {\r\n            if (ownerOf[i] == address(0x0) && _tokens[_balance - 1] == 0) { _loopThrough++; }\r\n            if (ownerOf[i] == address_) { _tokens[_index] = i; _index++; }\r\n        }\r\n        return _tokens;\r\n    }\r\n}\r\n\r\nabstract contract MerkleWhitelist {\r\n    bytes32 internal _merkleRoot;\r\n    function _setMerkleRoot(bytes32 merkleRoot_) internal virtual {\r\n        _merkleRoot = merkleRoot_;\r\n    }\r\n    function isWhitelisted(address address_, bytes32[] memory proof_) public view returns (bool) {\r\n        bytes32 _leaf = keccak256(abi.encodePacked(address_));\r\n        for (uint256 i = 0; i < proof_.length; i++) {\r\n            _leaf = _leaf < proof_[i] ? keccak256(abi.encodePacked(_leaf, proof_[i])) : keccak256(abi.encodePacked(proof_[i], _leaf));\r\n        }\r\n        return _leaf == _merkleRoot;\r\n    }\r\n}\r\n\r\nabstract contract Security {\r\n    // Prevent Smart Contracts\r\n    modifier onlySender {\r\n        require(msg.sender == tx.origin, \"No Smart Contracts!\"); _; }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed oldOwner_, address indexed newOwner_);\r\n    constructor() { owner = msg.sender; }\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function _transferOwnership(address newOwner_) internal virtual {\r\n        address _oldOwner = owner;\r\n        owner = newOwner_;\r\n        emit OwnershipTransferred(_oldOwner, newOwner_);    \r\n    }\r\n    function transferOwnership(address newOwner_) public virtual onlyOwner {\r\n        require(newOwner_ != address(0x0), \"Ownable: new owner is the zero address!\");\r\n        _transferOwnership(newOwner_);\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0x0));\r\n    }\r\n}\r\n\r\n// Open0x Payable Governance Module by 0xInuarashi\r\n// This abstract contract utilizes for loops in order to iterate things in order to be modular\r\n// It is not the most gas-effective implementation. \r\n// We sacrified gas-effectiveness for Modularity instead.\r\nabstract contract PayableGovernance is Ownable {\r\n    // Special Access\r\n    address _payableGovernanceSetter;\r\n    constructor() payable { _payableGovernanceSetter = msg.sender; }\r\n    modifier onlyPayableGovernanceSetter {\r\n        require(msg.sender == _payableGovernanceSetter, \"PayableGovernance: Caller is not Setter!\"); _; }\r\n    function reouncePayableGovernancePermissions() public onlyPayableGovernanceSetter {\r\n        _payableGovernanceSetter = address(0x0); }\r\n\r\n    // Receivable Fallback\r\n    event Received(address from, uint amount);\r\n    receive() external payable { emit Received(msg.sender, msg.value); }\r\n\r\n    // Required Variables\r\n    address payable[] internal _payableGovernanceAddresses;\r\n    uint256[] internal _payableGovernanceShares;    \r\n    mapping(address => bool) public addressToEmergencyUnlocked;\r\n\r\n    // Withdraw Functionality\r\n    function _withdraw(address payable address_, uint256 amount_) internal {\r\n        (bool success, ) = payable(address_).call{value: amount_}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    // Governance Functions\r\n    function setPayableGovernanceShareholders(address payable[] memory addresses_, uint256[] memory shares_) public onlyPayableGovernanceSetter {\r\n        require(_payableGovernanceAddresses.length == 0 && _payableGovernanceShares.length == 0, \"Payable Governance already set! To set again, reset first!\");\r\n        require(addresses_.length == shares_.length, \"Address and Shares length mismatch!\");\r\n        uint256 _totalShares;\r\n        for (uint256 i = 0; i < addresses_.length; i++) {\r\n            _totalShares += shares_[i];\r\n            _payableGovernanceAddresses.push(addresses_[i]);\r\n            _payableGovernanceShares.push(shares_[i]);\r\n        }\r\n        require(_totalShares == 1000, \"Total Shares is not 1000!\");\r\n    }\r\n    function resetPayableGovernanceShareholders() public onlyPayableGovernanceSetter {\r\n        while (_payableGovernanceAddresses.length != 0) {\r\n            _payableGovernanceAddresses.pop(); }\r\n        while (_payableGovernanceShares.length != 0) {\r\n            _payableGovernanceShares.pop(); }\r\n    }\r\n\r\n    // Governance View Functions\r\n    function balance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n    function payableGovernanceAddresses() public view returns (address payable[] memory) {\r\n        return _payableGovernanceAddresses;\r\n    }\r\n    function payableGovernanceShares() public view returns (uint256[] memory) {\r\n        return _payableGovernanceShares;\r\n    }\r\n\r\n    // Withdraw Functions\r\n    function withdrawEther() public onlyOwner {\r\n        // require that there has been payable governance set.\r\n        require(_payableGovernanceAddresses.length > 0 && _payableGovernanceShares.length > 0, \"Payable governance not set yet!\");\r\n         // this should never happen\r\n        require(_payableGovernanceAddresses.length == _payableGovernanceShares.length, \"Payable governance length mismatch!\");\r\n        \r\n        // now, we check that the governance shares equal to 1000.\r\n        uint256 _totalPayableShares;\r\n        for (uint256 i = 0; i < _payableGovernanceShares.length; i++) {\r\n            _totalPayableShares += _payableGovernanceShares[i]; }\r\n        require(_totalPayableShares == 1000, \"Payable Governance Shares is not 1000!\");\r\n        \r\n        // // now, we start the withdrawal process if all conditionals pass\r\n        // store current balance in local memory\r\n        uint256 _totalETH = address(this).balance; \r\n\r\n        // withdraw loop for payable governance\r\n        for (uint256 i = 0; i < _payableGovernanceAddresses.length; i++) {\r\n            uint256 _ethToWithdraw = ((_totalETH * _payableGovernanceShares[i]) / 1000);\r\n            _withdraw(_payableGovernanceAddresses[i], _ethToWithdraw);\r\n        }\r\n    }\r\n\r\n    function viewWithdrawAmounts() public view onlyOwner returns (uint256[] memory) {\r\n        // require that there has been payable governance set.\r\n        require(_payableGovernanceAddresses.length > 0 && _payableGovernanceShares.length > 0, \"Payable governance not set yet!\");\r\n         // this should never happen\r\n        require(_payableGovernanceAddresses.length == _payableGovernanceShares.length, \"Payable governance length mismatch!\");\r\n        \r\n        // now, we check that the governance shares equal to 1000.\r\n        uint256 _totalPayableShares;\r\n        for (uint256 i = 0; i < _payableGovernanceShares.length; i++) {\r\n            _totalPayableShares += _payableGovernanceShares[i]; }\r\n        require(_totalPayableShares == 1000, \"Payable Governance Shares is not 1000!\");\r\n        \r\n        // // now, we start the array creation process if all conditionals pass\r\n        // store current balance in local memory and instantiate array for input\r\n        uint256 _totalETH = address(this).balance; \r\n        uint256[] memory _withdrawals = new uint256[] (_payableGovernanceAddresses.length + 2);\r\n\r\n        // array creation loop for payable governance values \r\n        for (uint256 i = 0; i < _payableGovernanceAddresses.length; i++) {\r\n            _withdrawals[i] = ( (_totalETH * _payableGovernanceShares[i]) / 1000 );\r\n        }\r\n        \r\n        // push two last array spots as total eth and added eths of withdrawals\r\n        _withdrawals[_payableGovernanceAddresses.length] = _totalETH;\r\n        for (uint256 i = 0; i < _payableGovernanceAddresses.length; i++) {\r\n            _withdrawals[_payableGovernanceAddresses.length + 1] += _withdrawals[i]; }\r\n\r\n        // return the final array data\r\n        return _withdrawals;\r\n    }\r\n\r\n    // Shareholder Governance\r\n    modifier onlyShareholder {\r\n        bool _isShareholder;\r\n        for (uint256 i = 0; i < _payableGovernanceAddresses.length; i++) {\r\n            if (msg.sender == _payableGovernanceAddresses[i]) {\r\n                _isShareholder = true;\r\n            }\r\n        }\r\n        require(_isShareholder, \"You are not a shareholder!\");\r\n        _;\r\n    }\r\n    function unlockEmergencyFunctionsAsShareholder() public onlyShareholder {\r\n        addressToEmergencyUnlocked[msg.sender] = true;\r\n    }\r\n\r\n    // Emergency Functions\r\n    modifier onlyEmergency {\r\n        for (uint256 i = 0; i < _payableGovernanceAddresses.length; i++) {\r\n            require(addressToEmergencyUnlocked[_payableGovernanceAddresses[i]], \"Emergency Functions are not unlocked!\");\r\n        }\r\n        _;\r\n    }\r\n    function emergencyWithdrawEther() public onlyOwner onlyEmergency {\r\n        _withdraw(payable(msg.sender), address(this).balance);\r\n    }\r\n}\r\n\r\nabstract contract PublicMint {\r\n    // Public Minting\r\n    bool public _publicMint; uint256 public _publicMintTime;\r\n    function _setPublicMint(bool bool_, uint256 time_) internal {\r\n        _publicMint = bool_; _publicMintTime = time_; }\r\n    modifier publicMintEnabled { \r\n        require(_publicMint && _publicMintTime <= block.timestamp, \r\n            \"Public Mint is not enabled yet!\"); _; }\r\n    function publicMintStatus() external view returns (bool) {\r\n        return _publicMint && _publicMintTime <= block.timestamp; }\r\n}\r\n\r\nabstract contract WhitelistMint {\r\n    // Whitelist Minting\r\n    bool internal _whitelistMint; uint256 public _whitelistMintTime;\r\n    function _setWhitelistMint(bool bool_, uint256 time_) internal {\r\n        _whitelistMint = bool_; _whitelistMintTime = time_; }\r\n    modifier whitelistMintEnabled {\r\n        require(_whitelistMint && _whitelistMintTime <= block.timestamp, \r\n            \"Whitelist Mint is not enabled yet!\"); _; } \r\n    function whitelistMintStatus() external view returns (bool) {\r\n        return _whitelistMint && _whitelistMintTime <= block.timestamp; }\r\n}\r\n\r\nabstract contract SatelliteMint {\r\n    // Satellite Minting\r\n    bool internal _satelliteMintEnabled; uint256 public _satelliteMintTime;\r\n    function _setSatelliteMint(bool bool_, uint256 time_) internal {\r\n        _satelliteMintEnabled = bool_; _satelliteMintTime = time_; }\r\n    modifier satelliteMintEnabled {\r\n        require(_satelliteMintEnabled && _satelliteMintTime <= block.timestamp, \r\n            \"Satellite Mint is not enabled yet!\"); _; } \r\n    function satelliteMintStatus() external view returns (bool) {\r\n        return _satelliteMintEnabled && _satelliteMintTime <= block.timestamp; }\r\n}\r\n\r\nabstract contract SatelliteReceiver {\r\n    // DO NOT CHANGE THIS\r\n    address public satelliteStationAddress = 0x69F7f7053024cd5923A11718F3A28cC62F2AF3a7;\r\n    uint256 public SSTokensMinted = 0;\r\n\r\n    // YOU CAN CONFIGURE THIS YOURSELF\r\n    address public SSTokenReceiver = 0x05b19Db67f83850fd79FDd308eaEDAA8fd9d8381;\r\n    address public SSTokenAddress = 0x984b6968132DA160122ddfddcc4461C995741513;\r\n    uint256 public SSTokensPerMint = 20 ether;\r\n    uint256 public SSTokensAvailable = 25;\r\n    uint256 public SSMintsPerAddress = 1;\r\n    \r\n    mapping(address => uint256) public SSAddressToMints;\r\n\r\n    function _satelliteMint(uint256 amount_) internal {\r\n        require(msg.sender == satelliteStationAddress, \"_satelliteMint: msg.sender is not Satellite Station!\");\r\n        require(SSTokensAvailable >= SSTokensMinted + amount_, \"_satelliteMint: amount_ requested over maximum avaialble tokens!\");\r\n        require(SSMintsPerAddress >= SSAddressToMints[tx.origin] + amount_, \"_satelliteMint: amount exceeds mints available per address!\");\r\n\r\n        SSAddressToMints[tx.origin] += amount_;\r\n        SSTokensMinted += amount_;\r\n    }\r\n}\r\n\r\ninterface iPlasma {\r\n    function updateReward(address address_) external;\r\n}\r\n\r\ncontract SpaceYetis is ERC721I, MerkleWhitelist, Security, Ownable, SatelliteReceiver, SatelliteMint, PayableGovernance, PublicMint, WhitelistMint {\r\n    constructor() ERC721I(\"Space Yetis\", \"YETI\") {}\r\n\r\n    // General NFT Variables\r\n    uint256 public maxSupply = 4444;\r\n    uint256 public mintPrice = 0.08 ether;\r\n    uint256 public publicMaxMintsPerTx = 5;\r\n\r\n    // Token Yield Variables\r\n    address public plasmaAddress;\r\n    iPlasma public Plasma;\r\n    function setPlasma(address address_) external onlyOwner { plasmaAddress = address_; Plasma = iPlasma(address_); }\r\n\r\n    // Contract Administration\r\n    function setMerkleRoot(bytes32 merkleRoot_) external onlyOwner { _setMerkleRoot(merkleRoot_); }\r\n    function setMintPrice(uint256 mintPrice_) external onlyOwner { mintPrice = mintPrice_; }\r\n\r\n    function setSatelliteMint(bool bool_, uint256 time_) external onlyOwner { _setSatelliteMint(bool_, time_); }\r\n    function setWhitelisMint(bool bool_, uint256 time_) external onlyOwner { _setWhitelistMint(bool_, time_); }\r\n    function setPublicMint(bool bool_, uint256 time_) external onlyOwner { _setPublicMint(bool_, time_); }\r\n    \r\n    // Internal Functions\r\n    function _mintMany(address to_, uint256 amount_) internal {\r\n        require(maxSupply >= totalSupply + amount_, \"_mintMany: amount exceeds maxSupply\");\r\n        for (uint256 i = 0; i < amount_; i++) {\r\n            _mint(to_, (totalSupply + 1)); // iterate from 1\r\n        }\r\n        Plasma.updateReward(to_);\r\n    }\r\n\r\n    // Onwer Mint\r\n    function ownerMintMany(address[] memory tos_, uint256[] memory amounts_) external onlyOwner {\r\n        require(tos_.length == amounts_.length, \"ownerMintMany: array length mismatch!\");\r\n        for (uint256 i = 0; i < tos_.length; i++) { \r\n            _mintMany(tos_[i], amounts_[i]); \r\n        }\r\n    }\r\n\r\n    // Satellite Mint\r\n    function satelliteMint(uint256 amount_) external satelliteMintEnabled {\r\n        require(SSMintsPerAddress >= amount_, \"Over maximum mints per address for Satellite Mints!\");\r\n        _satelliteMint(amount_);\r\n        _mintMany(tx.origin, amount_);\r\n    }\r\n\r\n    // Whitelist Mint\r\n    uint256 public maxMintsPerWL = 3;\r\n    mapping(address => uint256) public addressToWLMinted; \r\n    \r\n    function whitelistMint(uint256 amount_, bytes32[] memory proof_) external payable onlySender whitelistMintEnabled {\r\n        require(isWhitelisted(msg.sender, proof_), \"You are not whitelisted!\");\r\n        require(maxMintsPerWL >= amount_, \"Maximum 3 mints per tx for whitelist!\");\r\n        require(maxMintsPerWL >= addressToWLMinted[msg.sender] + amount_, \"Amount exceeds available for whitelist!\");\r\n        require(msg.value == mintPrice * amount_, \"Invalid value sent!\");\r\n\r\n        addressToWLMinted[msg.sender] += amount_;\r\n\r\n        _mintMany(msg.sender, amount_);\r\n    }\r\n\r\n    // Public Mint\r\n    function mint(uint256 amount_) external payable onlySender publicMintEnabled {\r\n        require(publicMaxMintsPerTx >= amount_, \"Maximum 5 mints per tx!\");\r\n        require(msg.value == mintPrice * amount_, \"Invalid value sent!\");\r\n        _mintMany(msg.sender, amount_);\r\n    }\r\n\r\n    // Token Overrides for Transfer-Hook token yield\r\n    function __yieldTransferHook(address from_, address to_) internal {\r\n        Plasma.updateReward(from_); \r\n        Plasma.updateReward(to_); \r\n    }\r\n    function transferFrom(address from_, address to_, uint256 tokenId_) public override {\r\n        __yieldTransferHook(from_, to_);\r\n        ERC721I.transferFrom(from_, to_, tokenId_);\r\n    }\r\n    function safeTransferFrom(address from_, address to_, uint256 tokenId_, bytes memory data_) public override {\r\n        __yieldTransferHook(from_, to_);\r\n        ERC721I.safeTransferFrom(from_, to_, tokenId_, data_);\r\n    }\r\n\r\n    // TokenURI Stuffs\r\n    function setBaseTokenURI(string memory uri_) external onlyOwner {\r\n        _setBaseTokenURI(uri_);\r\n    }\r\n    function setBaseTokenURI_EXT(string memory ext_) external onlyOwner {\r\n        _setBaseTokenURI_EXT(ext_);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Plasma\",\"outputs\":[{\"internalType\":\"contract iPlasma\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"SSAddressToMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSMintsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSTokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSTokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSTokensPerMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_satelliteMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_whitelistMintTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToEmergencyUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToWLMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintsPerWL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"multiSafeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"ownerMintMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableGovernanceAddresses\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableGovernanceShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plasmaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMaxMintsPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reouncePayableGovernancePermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetPayableGovernanceShareholders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"satelliteMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"satelliteMintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"satelliteStationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ext_\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI_EXT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintPrice_\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addresses_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares_\",\"type\":\"uint256[]\"}],\"name\":\"setPayableGovernanceShareholders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"setPlasma\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setPublicMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setSatelliteMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bool_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setWhitelisMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockEmergencyFunctionsAsShareholder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewWithdrawAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof_\",\"type\":\"bytes32[]\"}],\"name\":\"whitelistMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SpaceYetis", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c8c74170ef99f7f119dea3243b0004b2133c0b2fe96b55256cd43300580f45ac"}