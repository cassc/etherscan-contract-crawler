{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: contracts/Interface/IOCCoinPrice.sol\r\n\r\n\r\npragma solidity ^0.8.00;\r\n\r\ninterface IOCCPrice {\r\n    function oCC_uSD() external view returns (uint);\r\n}\r\n// File: contracts/Interface/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.00;\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/Rootala-Invest-Factory.sol\r\n\r\n\r\npragma solidity ^0.8.00;\r\n\r\n\r\n\r\ncontract RootalaInvestV01Factory{\r\n\r\n    IERC20 occoin;\r\n    IOCCPrice occPrice;\r\n    \r\n    address public factoryCreator;\r\n    uint64 public userCounter;\r\n    uint16 public p200ActiveUsers;\r\n    uint16 public p500ActiveUsers;\r\n    uint16 public p1000ActiveUsers;\r\n    uint16 public p2000ActiveUsers;\r\n    bool private pause;\r\n    bool private locked;\r\n\r\n    mapping (address=>bool) public isUser;\r\n    mapping (address=>UserDetail) public userDetail;\r\n\r\n    enum Package {\r\n        p200,\r\n        p500,\r\n        p1000,\r\n        p2000\r\n    }\r\n\r\n    struct UserDetail{\r\n        uint dateOfJoin;\r\n        uint investedToken;\r\n        uint referralCreditBalance;\r\n        uint allProfitReceived;\r\n        uint64 userNumber;\r\n        uint32 ratedProfit;\r\n        uint32 referrals;\r\n        uint received;\r\n        address representative;\r\n        Package package;\r\n    }\r\n\r\n    event result(Package indexed package,uint indexed activeUsers);\r\n\r\n\r\n    constructor(){\r\n        factoryCreator = msg.sender;\r\n        occoin = IERC20(0x4665e227c521849a202f808E927d1dc5F63C7941);\r\n        occPrice = IOCCPrice(0xC74A1022cf45802Ec3190aFb69512F83Ef898E3b);\r\n        isUser[address(this)]=true;\r\n    }\r\n\r\n    modifier onlyOwner{\r\n        require(msg.sender==factoryCreator, \" only owner can do this\");\r\n        _;\r\n    }\r\n\r\n    modifier isInvestor{\r\n        require(isUser[msg.sender]==true,\"you are not investor!!!\");\r\n        _;\r\n    }\r\n\r\n    modifier paused{\r\n        require(pause != true , \"invest plan has been paused\");\r\n        _;\r\n    }\r\n\r\n    modifier noReentrancy{\r\n        require(locked != true,\"No Reentrancy,pls wait\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n\r\n    function register(address _referral, Package _package) public noReentrancy paused {\r\n        require(isUser[_referral] == true,\"your referral address is not true\");\r\n        require(isUser[msg.sender] != true,\"you are registered befor\");\r\n        uint16 packageActiveUsers;\r\n        if (_package == Package.p200) {\r\n            packageActiveUsers = p200ActiveUsers;\r\n            p200ActiveUsers ++;\r\n            emit result(_package,packageActiveUsers);\r\n        }else if (_package == Package.p500) {\r\n            packageActiveUsers = p500ActiveUsers;\r\n            p500ActiveUsers ++;\r\n            emit result(_package,packageActiveUsers);\r\n        }else if (_package == Package.p1000) {\r\n            packageActiveUsers = p1000ActiveUsers;\r\n            p1000ActiveUsers ++;\r\n            emit result(_package,packageActiveUsers);\r\n        }else if (_package == Package.p2000) {\r\n            packageActiveUsers = p2000ActiveUsers;\r\n            p2000ActiveUsers ++;\r\n            emit result(_package,packageActiveUsers);\r\n        }else revert(\"invalid package!!!\");\r\n\r\n        require(packageActiveUsers<10000,\"this invest plan package is full\");\r\n        uint iPrice = investPrice(_package);\r\n        require(occoin.balanceOf(msg.sender)>=iPrice,\"low balance\");\r\n        occoin.transferFrom(msg.sender,address(this), iPrice);\r\n        userDetail[_referral].referralCreditBalance += (iPrice * (10000-packageActiveUsers))/100000;\r\n        userDetail[_referral].referrals++;\r\n\r\n        UserDetail memory newUser;\r\n        newUser.dateOfJoin = block.timestamp;\r\n        newUser.investedToken = iPrice;\r\n        newUser.ratedProfit = 10000-packageActiveUsers;\r\n        newUser.representative = _referral;\r\n        newUser.package = _package;\r\n        newUser.userNumber = ++userCounter;\r\n        userDetail[msg.sender] = newUser;\r\n\r\n        isUser[msg.sender] = true;\r\n\r\n        \r\n    }\r\n\r\n    function receiveProfits() public isInvestor noReentrancy {\r\n        require(userDetail[msg.sender].received < 52,\"renewal required\");\r\n        uint profitAmount = (weekCounter()*userProfitCalculator()) + userDetail[msg.sender].referralCreditBalance;\r\n        require(profitAmount != 0,\"you have no profit/credit yet!!!\");\r\n        userDetail[msg.sender].received = calcul7Days();\r\n        userDetail[msg.sender].allProfitReceived += profitAmount;\r\n        userDetail[msg.sender].referralCreditBalance = 0;\r\n        occoin.transfer(msg.sender, profitAmount);\r\n    }\r\n\r\n    function withdrawInvestedToken() public isInvestor noReentrancy{\r\n        require(remainingWeeks()==0,\"There are still a few weeks left.\");\r\n        require(userDetail[msg.sender].received == 52,\"You have not yet received your all weekly profits!\");\r\n        require(userDetail[msg.sender].referralCreditBalance == 0,\"You have not yet received your referral credits!\");\r\n        occoin.transfer(msg.sender, userDetail[msg.sender].investedToken);\r\n        if (userDetail[msg.sender].package == Package.p200) {\r\n            p200ActiveUsers --;\r\n        }else if (userDetail[msg.sender].package == Package.p500) {\r\n            p500ActiveUsers --;\r\n        }else if (userDetail[msg.sender].package == Package.p1000) {\r\n            p1000ActiveUsers --;\r\n        }else if (userDetail[msg.sender].package == Package.p2000) {\r\n            p2000ActiveUsers --;\r\n        }\r\n        delete userDetail[msg.sender];\r\n        delete isUser[msg.sender];\r\n\r\n    }\r\n\r\n    function weekCounter() public isInvestor view returns(uint creditor7Days){\r\n        creditor7Days = calcul7Days()-userDetail[msg.sender].received;\r\n    }\r\n\r\n    function allActiveUsers() public view returns(uint activeUsers){\r\n        activeUsers = p200ActiveUsers + p500ActiveUsers + p1000ActiveUsers + p2000ActiveUsers;\r\n    }\r\n\r\n    function calcul7Days() public isInvestor view returns(uint) {\r\n        uint calc7Days = (block.timestamp - userDetail[msg.sender].dateOfJoin)/1 weeks;\r\n        if (calc7Days > 52) {\r\n            calc7Days = 52;\r\n        }\r\n        return calc7Days;\r\n    }\r\n\r\n\r\n\r\n    function profitCalculator() public view returns(uint cp1 , uint cp2 , uint cp3 , uint cp4){\r\n        uint occP = getOccPrice();\r\n        uint profit1 = 10000 - p200ActiveUsers;\r\n        uint profit2 = 10000 - p500ActiveUsers;\r\n        uint profit3 = 10000 - p1000ActiveUsers;\r\n        uint profit4 = 10000 - p2000ActiveUsers;\r\n        cp1 = (((5e18 * (profit1))/10000)/occP)*1e18;\r\n        cp2 = (((125e17 * (profit2))/10000)/occP)*1e18;\r\n        cp3 = (((25e18 * (profit3))/10000)/occP)*1e18;\r\n        cp4 = (((50e18 * (profit4))/10000)/occP)*1e18;\r\n    }\r\n\r\n    function userProfitCalculator() public isInvestor view returns(uint cp){\r\n        uint profit = userDetail[msg.sender].ratedProfit;\r\n        uint occP = getOccPrice();\r\n        if (userDetail[msg.sender].package == Package.p200) {\r\n            cp = (((5e18 * (profit))/10000)/occP)*1e18;\r\n        }else if (userDetail[msg.sender].package == Package.p500) {\r\n            cp = (((125e17 * (profit))/10000)/occP)*1e18;\r\n        }else if (userDetail[msg.sender].package == Package.p1000) {\r\n            cp = (((25e18 * (profit))/10000)/occP)*1e18;\r\n        }else if (userDetail[msg.sender].package == Package.p2000) {\r\n            cp = (((50e18 * (profit))/10000)/occP)*1e18;\r\n        }\r\n    }\r\n\r\n    function getOccPrice() public view returns (uint price){\r\n        price = occPrice.oCC_uSD();\r\n    }\r\n\r\n    function investPrice(Package _package) public view returns(uint){\r\n        Package package = _package;\r\n        if (package == Package.p200) {\r\n            return ((200e18) / getOccPrice()) *1e18;\r\n        }else if (package == Package.p500) {\r\n            return ((500e18) / getOccPrice()) *1e18;\r\n        }else if (package == Package.p1000) {\r\n            return ((1000e18) / getOccPrice()) *1e18;\r\n        }else if (package == Package.p2000) {\r\n            return ((2000e18) / getOccPrice()) *1e18;\r\n        }else revert(\"invalid input\");\r\n    }\r\n\r\n\r\n\r\n    function remainingWeeks() public isInvestor view returns(uint rw) {\r\n        uint pw = ((block.timestamp - userDetail[msg.sender].dateOfJoin)/1 weeks);\r\n        if (pw > 52) {\r\n            pw = 52;\r\n        }\r\n        rw = 52 - pw ;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        factoryCreator = _newOwner;\r\n    }\r\n\r\n\r\n    function setPause() public onlyOwner{\r\n        pause = !pause;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum RootalaInvestV01Factory.Package\",\"name\":\"package\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"activeUsers\",\"type\":\"uint256\"}],\"name\":\"result\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allActiveUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeUsers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcul7Days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOccPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RootalaInvestV01Factory.Package\",\"name\":\"_package\",\"type\":\"uint8\"}],\"name\":\"investPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p1000ActiveUsers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2000ActiveUsers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p200ActiveUsers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p500ActiveUsers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cp1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cp2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cp3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cp4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"enum RootalaInvestV01Factory.Package\",\"name\":\"_package\",\"type\":\"uint8\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingWeeks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userCounter\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dateOfJoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investedToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralCreditBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allProfitReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"userNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"ratedProfit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"referrals\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"representative\",\"type\":\"address\"},{\"internalType\":\"enum RootalaInvestV01Factory.Package\",\"name\":\"package\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProfitCalculator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditor7Days\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawInvestedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RootalaInvestV01Factory", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "10000000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d4accef6fb101e344308ecb0e145a605375542cafe378004b06c87199d7c2351"}