{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.8.0;\r\n\r\ncontract whiteList {\r\n    address public anaAddress;\r\n    address public reLockAddress;\r\n    address public usdcAddress;\r\n    address public ownerAddress;\r\n    struct investInfo {\r\n        address addr;\r\n        uint256 amountA;\r\n        uint256 createTime;\r\n        bool state;\r\n    }\r\n    uint256 public investN;\r\n    mapping(uint256 => investInfo) public investList;\r\n    mapping(address => uint256) public regionLimit;\r\n    mapping(address => address) public regionMap;\r\n    uint256 public lockTime;\r\n    uint256 public price;\r\n\r\n    constructor(address addr1,address addr2,address addr3) {\r\n        anaAddress = addr1;\r\n        reLockAddress = addr2;\r\n        usdcAddress = addr3;\r\n    }\r\n    function scyncData() public {\r\n        (bool success, bytes memory data) = anaAddress.call(abi.encodeWithSignature(\"ownerAddress()\"));\r\n        require(success, \"syncData failed\");\r\n        ownerAddress = abi.decode(data, (address));\r\n    }\r\n    function claimANA() public{\r\n        (bool success, ) = reLockAddress.call(abi.encodeWithSignature(\"claim()\"));\r\n        require(success, \"claim failed 1\");\r\n        (success, ) = anaAddress.call(abi.encodeWithSignature(\"claim()\"));\r\n        require(success, \"claim failed 2\");\r\n    }\r\n    function claimUSDC(uint256 amount) checkOwner public {\r\n        (bool success, bytes memory data) = usdcAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", ownerAddress, amount));\r\n        require(success && abi.decode(data, (bool)), \"transfer failed\");\r\n    }\r\n\r\n    modifier checkOwner{\r\n        require(msg.sender == ownerAddress, \"not owner\");\r\n        _;\r\n    }\r\n    \r\n    function setLockTime(uint256 _lockTime) checkOwner public {\r\n        require(_lockTime >= 7200*365 && _lockTime <= 7200*365*2, \"_lockTime wrong\");\r\n        lockTime = _lockTime;\r\n    }\r\n    function setPrice(uint256 _price) checkOwner public {\r\n        require(_price <= 50, \"_price wrong\");\r\n        price = _price;\r\n    }\r\n    function setRegionLimit(address addr, uint256 amount) checkOwner public {\r\n        regionLimit[addr] = amount;\r\n    }\r\n    function regionSetWhite(address addr) public {\r\n        regionMap[addr] = msg.sender;\r\n    }\r\n    \r\n    function invest(uint256 amountU) public {\r\n        require(regionLimit[regionMap[msg.sender]] >= amountU, \"out of limit\");\r\n        regionLimit[regionMap[msg.sender]] -= amountU;\r\n        (bool success, bytes memory data) = usdcAddress.call(abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), amountU));\r\n        require(success && abi.decode(data, (bool)), \"transferFrom failed\");\r\n        investList[investN++] = investInfo(msg.sender, amountU * price, block.number, true);\r\n    }\r\n\r\n    function release(uint256 _n) public {\r\n        investInfo memory i = investList[_n];\r\n        require(block.number >= i.createTime + lockTime, \"wait some times\");\r\n        require(i.state , \"already release\");\r\n        investList[_n].state = false;\r\n        (bool success, bytes memory data) = anaAddress.call(abi.encodeWithSignature(\"transfer(address,uint256)\", i.addr, i.amountA));\r\n        require(success && abi.decode(data, (bool)), \"transfer failed\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr3\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"anaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimANA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountU\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reLockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"regionMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"regionSetWhite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scyncData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRegionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "whiteList", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dd5c345e098259426bfd44e9f2fd69c7c811b1f60000000000000000000000008570486381c92cb0b02b19c9b012f0d053475590000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d08c88b13f242610e09f3128696e1f970e0be8f1b0a06faaf4d9e4979dd2b26b"}