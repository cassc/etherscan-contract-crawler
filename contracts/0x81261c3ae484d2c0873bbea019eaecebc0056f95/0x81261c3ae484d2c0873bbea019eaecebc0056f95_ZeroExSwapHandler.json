{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { AccessControl as OZAccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { CoreAccessControl, CoreAccessControlConfig } from \\\"../core/CoreAccessControl/v1/CoreAccessControl.sol\\\";\\nimport { CoreStopGuardian } from \\\"../core/CoreStopGuardian/v1/CoreStopGuardian.sol\\\";\\n\\nabstract contract BaseAccessControl is CoreAccessControl, CoreStopGuardian {\\n    /**\\n     * @dev\\n     * Modifiers inherited from CoreAccessControl:\\n     * onlyDefinitive\\n     * onlyClients\\n     * onlyWhitelisted\\n     * onlyClientAdmin\\n     * onlyDefinitiveAdmin\\n     *\\n     * Modifiers inherited from CoreStopGuardian:\\n     * stopGuarded\\n     */\\n\\n    constructor(CoreAccessControlConfig memory coreAccessControlConfig) CoreAccessControl(coreAccessControlConfig) {}\\n\\n    /**\\n     * @dev Inherited from CoreStopGuardian\\n     */\\n    function enableStopGuardian() public override onlyAdmins {\\n        return _enableStopGuardian();\\n    }\\n\\n    /**\\n     * @dev Inherited from CoreStopGuardian\\n     */\\n    function disableStopGuardian() public override onlyClientAdmin {\\n        return _disableStopGuardian();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreAccessControl/v1/CoreAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { AccessControl as OZAccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { ICoreAccessControlV1 } from \\\"./ICoreAccessControlV1.sol\\\";\\nimport { AccountNotAdmin, AccountNotWhitelisted, AccountMissingRole } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nstruct CoreAccessControlConfig {\\n    address admin;\\n    address definitiveAdmin;\\n    address[] definitive;\\n    address[] client;\\n}\\n\\nabstract contract CoreAccessControl is ICoreAccessControlV1, OZAccessControl {\\n    // roles\\n    bytes32 public constant ROLE_DEFINITIVE = keccak256(\\\"DEFINITIVE\\\");\\n    bytes32 public constant ROLE_DEFINITIVE_ADMIN = keccak256(\\\"DEFINITIVE_ADMIN\\\");\\n    bytes32 public constant ROLE_CLIENT = keccak256(\\\"CLIENT\\\");\\n\\n    modifier onlyDefinitive() {\\n        _checkRole(ROLE_DEFINITIVE);\\n        _;\\n    }\\n    modifier onlyDefinitiveAdmin() {\\n        _checkRole(ROLE_DEFINITIVE_ADMIN);\\n        _;\\n    }\\n    modifier onlyClients() {\\n        _checkRole(ROLE_CLIENT);\\n        _;\\n    }\\n    modifier onlyClientAdmin() {\\n        _checkRole(DEFAULT_ADMIN_ROLE);\\n        _;\\n    }\\n    // default admin + definitive admin\\n    modifier onlyAdmins() {\\n        bool isAdmins = (hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || hasRole(ROLE_DEFINITIVE_ADMIN, _msgSender()));\\n\\n        if (!isAdmins) {\\n            revert AccountNotAdmin(_msgSender());\\n        }\\n        _;\\n    }\\n    // client + definitive\\n    modifier onlyWhitelisted() {\\n        bool isWhitelisted = (hasRole(ROLE_CLIENT, _msgSender()) || hasRole(ROLE_DEFINITIVE, _msgSender()));\\n\\n        if (!isWhitelisted) {\\n            revert AccountNotWhitelisted(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    constructor(CoreAccessControlConfig memory cfg) {\\n        // admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, cfg.admin);\\n\\n        // definitive admin\\n        _setupRole(ROLE_DEFINITIVE_ADMIN, cfg.definitiveAdmin);\\n        _setRoleAdmin(ROLE_DEFINITIVE_ADMIN, ROLE_DEFINITIVE_ADMIN);\\n\\n        // definitive\\n        uint256 cfgDefinitiveLength = cfg.definitive.length;\\n        for (uint256 i; i < cfgDefinitiveLength; ) {\\n            _setupRole(ROLE_DEFINITIVE, cfg.definitive[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _setRoleAdmin(ROLE_DEFINITIVE, ROLE_DEFINITIVE_ADMIN);\\n\\n        // clients - implicit role admin is DEFAULT_ADMIN_ROLE\\n        uint256 cfgClientLength = cfg.client.length;\\n        for (uint256 i; i < cfgClientLength; ) {\\n            _setupRole(ROLE_CLIENT, cfg.client[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view virtual override {\\n        if (!hasRole(role, account)) {\\n            revert AccountMissingRole(account, role);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreAccessControl/v1/ICoreAccessControlV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IAccessControl } from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface ICoreAccessControlV1 is IAccessControl {\\n    function ROLE_CLIENT() external returns (bytes32);\\n\\n    function ROLE_DEFINITIVE() external returns (bytes32);\\n\\n    function ROLE_DEFINITIVE_ADMIN() external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreStopGuardian/v1/CoreStopGuardian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreStopGuardianV1 } from \\\"./ICoreStopGuardianV1.sol\\\";\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { StopGuardianEnabled } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract CoreStopGuardian is ICoreStopGuardianV1, Context {\\n    bool public STOP_GUARDIAN_ENABLED;\\n\\n    // recommended for every public/external function\\n    modifier stopGuarded() {\\n        if (STOP_GUARDIAN_ENABLED) {\\n            revert StopGuardianEnabled();\\n        }\\n\\n        _;\\n    }\\n\\n    function enableStopGuardian() public virtual;\\n\\n    function disableStopGuardian() public virtual;\\n\\n    function _enableStopGuardian() internal {\\n        STOP_GUARDIAN_ENABLED = true;\\n        emit StopGuardianUpdate(_msgSender(), true);\\n    }\\n\\n    function _disableStopGuardian() internal {\\n        STOP_GUARDIAN_ENABLED = false;\\n        emit StopGuardianUpdate(_msgSender(), false);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreStopGuardian/v1/ICoreStopGuardianV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreStopGuardianV1 {\\n    event StopGuardianUpdate(address indexed actor, bool indexed isEnabled);\\n\\n    function STOP_GUARDIAN_ENABLED() external view returns (bool);\\n\\n    function enableStopGuardian() external;\\n\\n    function disableStopGuardian() external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwapHandler/CoreSwapHandlerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport {\\n    InvalidAmount,\\n    InvalidExecutedOutputAmount,\\n    InvalidMsgValue,\\n    InvalidSwapInputAmount\\n} from \\\"../libraries/DefinitiveErrors.sol\\\";\\nimport { DefinitiveConstants } from \\\"../libraries/DefinitiveConstants.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../libraries/DefinitiveAssets.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { ICoreSwapHandlerV1 } from \\\"./ICoreSwapHandlerV1.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IUniswapV2Router02 } from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nabstract contract CoreSwapHandlerV1 is ICoreSwapHandlerV1, Context, ReentrancyGuard {\\n    using DefinitiveAssets for IERC20;\\n\\n    function swapCall(SwapParams calldata params) external payable nonReentrant returns (uint256, address) {\\n        return _swapCall(params, false /* enforceAllowedPools */);\\n    }\\n\\n    function swapDelegate(SwapParams calldata params) external payable nonReentrant returns (uint256, address) {\\n        return _swapDelegate(params, false /* enforceAllowedPools */);\\n    }\\n\\n    function swapUsingValidatedPathCall(\\n        SwapParams calldata params\\n    ) external payable nonReentrant returns (uint256, address) {\\n        return _swapCall(params, true /* enforceAllowedPools */);\\n    }\\n\\n    function _swapCall(\\n        SwapParams memory params,\\n        bool enforceAllowedPools\\n    ) private returns (uint256 amountOut, address) {\\n        bool isInputAddressNativeAsset = params.inputAssetAddress == DefinitiveConstants.NATIVE_ASSET_ADDRESS;\\n        uint256 rawInputAmount = params.inputAmount;\\n\\n        // Calls to swap native assets must provide a non-zero input amount\\n        if (isInputAddressNativeAsset && rawInputAmount == 0) {\\n            revert InvalidSwapInputAmount();\\n        }\\n\\n        // Calls to swap native assets must match the input amount and msg.value\\n        if (isInputAddressNativeAsset && rawInputAmount != msg.value) {\\n            revert InvalidMsgValue();\\n        }\\n\\n        // Calls to swap non-native assets must have msg.value equal to 0\\n        if (!isInputAddressNativeAsset && msg.value != 0) {\\n            revert InvalidMsgValue();\\n        }\\n\\n        // Update SwapParams with parsed input amount\\n        params.inputAmount = rawInputAmount > 0 ? rawInputAmount : _getTokenAllowance(params.inputAssetAddress);\\n\\n        if (params.inputAssetAddress != DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            IERC20(params.inputAssetAddress).safeTransferFrom(_msgSender(), address(this), params.inputAmount);\\n        }\\n\\n        _validateSwap(params);\\n        _validatePools(params, enforceAllowedPools);\\n\\n        (amountOut, ) = _swap(params);\\n\\n        if (params.outputAssetAddress == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            DefinitiveAssets.safeTransferETH(payable(_msgSender()), amountOut);\\n        } else {\\n            IERC20(params.outputAssetAddress).safeTransfer(_msgSender(), amountOut);\\n        }\\n\\n        return (amountOut, params.outputAssetAddress);\\n    }\\n\\n    function _swapDelegate(SwapParams memory params, bool enforceAllowedPools) private returns (uint256, address) {\\n        uint256 rawInputAmount = params.inputAmount;\\n        uint256 parsedInputAmount = rawInputAmount > 0\\n            ? rawInputAmount\\n            : DefinitiveAssets.getBalance(params.inputAssetAddress);\\n\\n        if (parsedInputAmount == 0) {\\n            revert InvalidSwapInputAmount();\\n        }\\n        // Update SwapParams with parsed input amount\\n        params.inputAmount = parsedInputAmount;\\n\\n        _validateSwap(params);\\n        _validatePools(params, enforceAllowedPools);\\n\\n        return _swap(params);\\n    }\\n\\n    /**\\n     * @notice This method holds the logic for performing the swap.\\n     * @param params SwapParams\\n     */\\n    function _performSwap(SwapParams memory params) internal virtual;\\n\\n    /**\\n     * @notice Method to confirm that the swap is using valid pools based on our criteria\\n     * @param params SwapParams\\n     * @param enforceAllowedPools boolean to determine if we should enforce allowed pools\\n     */\\n    function _validatePools(SwapParams memory params, bool enforceAllowedPools) internal virtual;\\n\\n    /**\\n     * @notice Method to confirm that the swap parameters are valid for the third party\\n     * @param params SwapParams\\n     */\\n    function _validateSwap(SwapParams memory params) internal virtual;\\n\\n    /**\\n     * @notice When `rawInputAmount` is 0, `swapCall` will use the allowance as the input amount\\n     * @param inputAssetAddress asset to swap from\\n     */\\n    function _getTokenAllowance(address inputAssetAddress) private view returns (uint256) {\\n        uint256 allowance = IERC20(inputAssetAddress).allowance(_msgSender(), address(this));\\n\\n        if (allowance == 0) {\\n            revert InvalidSwapInputAmount();\\n        }\\n\\n        return allowance;\\n    }\\n\\n    /**\\n     * @notice Returns the address we need to approve in order to swap assets\\n     * @param data included with the swap method invocation\\n     */\\n    function _getSpenderAddress(bytes memory data) internal virtual returns (address);\\n\\n    /**\\n     * @notice Internal swap logic that performs the swap and validates the output amount\\n     * @param params SwapParams\\n     * @return output amount and output asset address\\n     */\\n    function _swap(SwapParams memory params) private returns (uint256, address) {\\n        if (params.inputAssetAddress != DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            IERC20(params.inputAssetAddress).resetAndSafeIncreaseAllowance(\\n                address(this),\\n                _getSpenderAddress(params.data),\\n                params.inputAmount\\n            );\\n        }\\n\\n        uint256 outputAmountDelta = DefinitiveAssets.getBalance(params.outputAssetAddress);\\n\\n        _performSwap(params);\\n\\n        outputAmountDelta = DefinitiveAssets.getBalance(params.outputAssetAddress) - outputAmountDelta;\\n\\n        if (outputAmountDelta < params.minOutputAmount) {\\n            revert InvalidExecutedOutputAmount();\\n        }\\n\\n        emit Swap(\\n            _msgSender(),\\n            params.inputAssetAddress,\\n            params.inputAmount,\\n            params.outputAssetAddress,\\n            outputAmountDelta\\n        );\\n\\n        return (outputAmountDelta, params.outputAssetAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwapHandler/ICoreSwapHandlerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreSwapHandlerV1 {\\n    event Swap(\\n        address indexed actor,\\n        address indexed inputToken,\\n        uint256 inputAmount,\\n        address indexed outputToken,\\n        uint256 outputAmount\\n    );\\n\\n    struct SwapParams {\\n        address inputAssetAddress;\\n        uint256 inputAmount;\\n        address outputAssetAddress;\\n        uint256 minOutputAmount;\\n        bytes data;\\n        bytes signature;\\n    }\\n\\n    function swapCall(SwapParams calldata params) external payable returns (uint256 amountOut, address outputAsset);\\n\\n    function swapDelegate(SwapParams calldata params) external payable returns (uint256 amountOut, address outputAsset);\\n\\n    function swapUsingValidatedPathCall(\\n        SwapParams calldata params\\n    ) external payable returns (uint256 amountOut, address outputAsset);\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveAssets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { DefinitiveConstants } from \\\"./DefinitiveConstants.sol\\\";\\n\\nimport { InsufficientBalance, InvalidAmount, InvalidAmounts, InvalidERC20Address } from \\\"./DefinitiveErrors.sol\\\";\\n\\n/**\\n * @notice Contains methods used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n */\\nlibrary DefinitiveAssets {\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     */\\n    modifier onlyValidERC20(address erc20Token) {\\n        if (address(erc20Token) == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            revert InvalidERC20Address();\\n        }\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 ERC20 and Native Asset Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Gets the balance of an ERC20 token or native asset\\n     */\\n    function getBalance(address assetAddress) internal view returns (uint256) {\\n        if (assetAddress == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(assetAddress).balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate balance is higher than a given amount for ERC20 and native assets\\n     */\\n    function validateBalance(address token, uint256 amount) internal view {\\n        if (token == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            validateNativeBalance(amount);\\n        } else {\\n            validateERC20Balance(token, amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 Native Asset Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev validates amount and balance, then uses SafeTransferLib to transfer native asset\\n     */\\n    function safeTransferETH(address recipient, uint256 amount) internal {\\n        if (amount > 0) {\\n            SafeTransferLib.safeTransferETH(payable(recipient), amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 ERC20 Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Resets and increases the allowance of a spender for an ERC20 token\\n     */\\n    function resetAndSafeIncreaseAllowance(\\n        IERC20 token,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal onlyValidERC20(address(token)) {\\n        if (token.allowance(owner, spender) > 0) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n\\n        return SafeERC20.safeIncreaseAllowance(token, spender, amount);\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal onlyValidERC20(address(token)) {\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(token, to, amount);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal onlyValidERC20(address(token)) {\\n        if (amount > 0) {\\n            //slither-disable-next-line arbitrary-send-erc20\\n            SafeERC20.safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 Asset Amount Helper Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev internal function to validate that amounts contains a value greater than zero\\n     */\\n    function validateAmounts(uint256[] calldata amounts) internal pure {\\n        bool hasValidAmounts;\\n        uint256 amountsLength = amounts.length;\\n        for (uint256 i; i < amountsLength; ) {\\n            if (amounts[i] > 0) {\\n                hasValidAmounts = true;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (!hasValidAmounts) {\\n            revert InvalidAmounts();\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate if native asset balance is higher than the amount requested\\n     */\\n    function validateNativeBalance(uint256 amount) internal view {\\n        if (getBalance(DefinitiveConstants.NATIVE_ASSET_ADDRESS) < amount) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate balance is higher than the amount requested for a token\\n     */\\n    function validateERC20Balance(address token, uint256 amount) internal view onlyValidERC20(token) {\\n        if (getBalance(token) < amount) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n\\n    function validateAmount(uint256 _amount) internal pure {\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n/**\\n * @notice Contains constants used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n */\\nlibrary DefinitiveConstants {\\n    /**\\n     * @notice Maximum fee percentage\\n     */\\n    uint256 internal constant MAX_FEE_PCT = 10000;\\n\\n    /**\\n     * @notice Address to signify native assets\\n     */\\n    address internal constant NATIVE_ASSET_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Maximum number of swaps allowed per block\\n     */\\n    uint8 internal constant MAX_SWAPS_PER_BLOCK = 25;\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n/**\\n * @notice Contains all errors used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n * @dev When adding a new error, add alphabetically\\n */\\n\\nerror AccountMissingRole(address _account, bytes32 _role);\\nerror AccountNotAdmin(address);\\nerror AccountNotWhitelisted(address);\\nerror AddLiquidityFailed();\\nerror EnterAllFailed();\\nerror ExceededMaxDelta();\\nerror ExceededMaxLTV();\\nerror ExitAllFailed();\\nerror ExitOneCoinFailed();\\nerror InputGreaterThanStaked();\\nerror InsufficientBalance();\\nerror InsufficientSwapTokenBalance();\\nerror InvalidAmount();\\nerror InvalidAmounts();\\nerror InvalidCalldata();\\nerror InvalidERC20Address();\\nerror InvalidExecutedOutputAmount();\\nerror InvalidFeePercent();\\nerror InvalidFlashLoanToken(address);\\nerror InvalidHandler();\\nerror InvalidInputs();\\nerror InvalidMsgValue();\\nerror InvalidSingleHopSwap();\\nerror InvalidMultiHopSwap();\\nerror InvalidOutputToken();\\nerror InvalidRedemptionRecipient(); // Used in cross-chain redeptions\\nerror InvalidReportedOutputAmount();\\nerror InvalidSwapHandler();\\nerror InvalidSwapInputAmount();\\nerror InvalidSwapOutputToken();\\nerror InvalidSwapPath();\\nerror InvalidSwapPayload();\\nerror InvalidSwapToken();\\nerror NativeAssetWrapFailed(bool wrappingToNative);\\nerror RemoveLiquidityFailed();\\nerror SlippageExceeded(uint256 _outputAmount, uint256 _outputAmountMin);\\nerror StakeFailed();\\nerror StopGuardianEnabled();\\nerror SwapDeadlineExceeded();\\nerror SwapLimitExceeded();\\nerror SwapTokenIsOutputToken();\\nerror UnstakeFailed();\\nerror UnauthenticatedFlashloan();\\nerror UntrustedFlashLoanSender(address);\\nerror SafeHarborModeEnabled();\\n\"\r\n    },\r\n    \"contracts/handlers/ZeroExSwapHandler/IZeroExSwapHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport { ICoreSwapHandlerV1 } from \\\"../../core/CoreSwapHandler/ICoreSwapHandlerV1.sol\\\";\\n\\ninterface IZeroExAdapterStructs {\\n    struct ZeroExSwapParams {\\n        uint256 deadline;\\n        bytes swapData;\\n    }\\n\\n    /// @dev Needed for core\\n    function decodeParams(bytes memory data) external pure returns (ZeroExSwapParams memory);\\n\\n    struct BatchFillData {\\n        address inputToken;\\n        address outputToken;\\n        uint256 sellAmount;\\n        WrappedBatchCall[] calls;\\n    }\\n\\n    struct WrappedBatchCall {\\n        bytes4 selector;\\n        uint256 sellAmount;\\n        bytes data;\\n    }\\n\\n    struct MultiHopFillData {\\n        address[] tokens;\\n        uint256 sellAmount;\\n        WrappedMultiHopCall[] calls;\\n    }\\n\\n    struct WrappedMultiHopCall {\\n        bytes4 selector;\\n        bytes data;\\n    }\\n}\\n\\ninterface IZeroExSwapHandler is ICoreSwapHandlerV1 {}\\n\"\r\n    },\r\n    \"contracts/handlers/ZeroExSwapHandler/ZeroExSwapHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.4;\\n\\nimport { CoreSwapHandlerV1 } from \\\"../../core/CoreSwapHandler/CoreSwapHandlerV1.sol\\\";\\nimport { ZeroExApiAdapter } from \\\"../../protocols/zeroEx/ZeroExApiAdapter.sol\\\";\\nimport { CallUtils } from \\\"../../tools/BubbleReverts/BubbleReverts.sol\\\";\\nimport { SwapDeadlineExceeded } from \\\"../../core/libraries/DefinitiveErrors.sol\\\";\\n\\nimport { BaseAccessControl, CoreAccessControlConfig } from \\\"../../base/BaseAccessControl.sol\\\";\\n\\ncontract ZeroExSwapHandler is CoreSwapHandlerV1, ZeroExApiAdapter {\\n    constructor(address _zeroExProxy, address _wethAddress) ZeroExApiAdapter(_zeroExProxy, _wethAddress) {}\\n\\n    receive() external payable {}\\n\\n    function decodeParams(bytes memory data) public pure returns (ZeroExSwapParams memory zeroExSwapParams) {\\n        zeroExSwapParams = abi.decode(data, (ZeroExSwapParams));\\n    }\\n\\n    function _performSwap(SwapParams memory params) internal override {\\n        ZeroExSwapParams memory zeroExSwapParams = decodeParams(params.data);\\n\\n        if (zeroExSwapParams.deadline < block.timestamp) {\\n            revert SwapDeadlineExceeded();\\n        }\\n\\n        (bool _success, bytes memory _returnBytes) = zeroExAddress.call{ value: msg.value }(zeroExSwapParams.swapData);\\n        if (!_success) {\\n            CallUtils.revertFromReturnedData(_returnBytes);\\n        }\\n    }\\n\\n    function _getSpenderAddress(bytes memory) internal view override returns (address) {\\n        return zeroExAddress;\\n    }\\n\\n    // TODO (DEF-916) - Add validation\\n    function _validatePools(SwapParams memory params, bool) internal view override {\\n        // _validateZeroExPayload(\\n        //     params.inputAssetAddress,\\n        //     params.outputAssetAddress,\\n        //     msg.sender,\\n        //     params.inputAmount,\\n        //     params.minOutputAmount,\\n        //     params.data\\n        // );\\n    }\\n\\n    /**\\n     * @notice no implementation because `_validatePools` handles both path and swap validation\\n     */\\n    function _validateSwap(SwapParams memory params) internal pure override {}\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/zeroEx/ZeroExApiAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache License\\npragma solidity >=0.8.4;\\n\\nimport { CallUtils } from \\\"../../tools/BubbleReverts/BubbleReverts.sol\\\";\\nimport { IZeroExAdapterStructs } from \\\"../../handlers/ZeroExSwapHandler/IZeroExSwapHandler.sol\\\";\\n\\n/**\\n * @title ZeroExApiAdapter\\n * @author Set Protocol\\n *\\n * Exchange adapter for 0xAPI that returns data for swaps\\n */\\nabstract contract ZeroExApiAdapter is IZeroExAdapterStructs {\\n    /* ============ State Variables ============ */\\n\\n    // ETH pseudo-token address used by 0x API.\\n    address private constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    // Byte size of Uniswap V3 encoded path addresses and pool fees\\n    uint256 private constant UNISWAP_V3_PATH_ADDRESS_SIZE = 20;\\n    uint256 private constant UNISWAP_V3_PATH_FEE_SIZE = 3;\\n    // Minimum byte size of a single hop Uniswap V3 encoded path (token address + fee + token adress)\\n    uint256 private constant UNISWAP_V3_SINGLE_HOP_PATH_SIZE =\\n        UNISWAP_V3_PATH_ADDRESS_SIZE + UNISWAP_V3_PATH_FEE_SIZE + UNISWAP_V3_PATH_ADDRESS_SIZE;\\n    // Byte size of one hop in the Uniswap V3 encoded path (token address + fee)\\n    uint256 private constant UNISWAP_V3_SINGLE_HOP_OFFSET_SIZE =\\n        UNISWAP_V3_PATH_ADDRESS_SIZE + UNISWAP_V3_PATH_FEE_SIZE;\\n\\n    // Address of the deployed ZeroEx contract.\\n    address public immutable zeroExAddress;\\n    // Address of the WETH9 contract.\\n    address public immutable wethAddress;\\n\\n    // Returns the address to approve source tokens to for trading. This is the TokenTaker address\\n    address public immutable getSpender;\\n\\n    /* ============ constructor ============ */\\n\\n    constructor(address _zeroExAddress, address _wethAddress) {\\n        zeroExAddress = _zeroExAddress;\\n        wethAddress = _wethAddress;\\n        getSpender = _zeroExAddress;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Return 0xAPI calldata which is already generated from 0xAPI\\n     *\\n     * @param  _sourceToken              Address of source token to be sold\\n     * @param  _destinationToken         Address of destination token to buy\\n     * @param  _destinationAddress       Address that assets should be transferred to\\n     * @param  _sourceQuantity           Amount of source token to sell\\n     * @param  _minDestinationQuantity   Min amount of destination token to buy\\n     * @param  _data                     Arbitrage bytes containing trade call data\\n     */\\n    // solhint-disable-next-line code-complexity\\n    function _validateZeroExPayload(\\n        address _sourceToken,\\n        address _destinationToken,\\n        address _destinationAddress,\\n        uint256 _sourceQuantity,\\n        uint256 _minDestinationQuantity,\\n        bytes memory _data\\n    ) internal view {\\n        address inputToken;\\n        address outputToken;\\n        address recipient;\\n        bool supportsRecipient;\\n        uint256 inputTokenAmount;\\n        uint256 minOutputTokenAmount;\\n        require(_data.length >= 4, \\\"Invalid calldata\\\");\\n\\n        {\\n            bytes4 selector;\\n            bytes memory data;\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                selector := mload(add(_data, 0x20)) // Load the first 4 bytes\\n                let dataLength := sub(mload(_data), 4) // Calculate the length of the data\\n                data := mload(0x40) // Get the free memory pointer\\n                mstore(0x40, add(data, add(dataLength, 0x20))) // Update the free memory pointer\\n                mstore(data, dataLength) // Store the length of the data at the beginning of the data memory\\n                // Copy the data (excluding the selector) to the allocated memory\\n                mstore(add(data, 0x20), shr(32, mload(add(_data, 0x24))))\\n            }\\n            if (selector == 0x415565b0) {\\n                // transformERC20()\\n                (inputToken, outputToken, inputTokenAmount, minOutputTokenAmount) = abi.decode(\\n                    data,\\n                    (address, address, uint256, uint256)\\n                );\\n            } else if (selector == 0xf7fcd384) {\\n                // sellToLiquidityProvider()\\n                (inputToken, outputToken, , recipient, inputTokenAmount, minOutputTokenAmount) = abi.decode(\\n                    data,\\n                    (address, address, address, address, uint256, uint256)\\n                );\\n                supportsRecipient = true;\\n                if (recipient == address(0)) {\\n                    recipient = _destinationAddress;\\n                }\\n            } else if (selector == 0xd9627aa4) {\\n                // sellToUniswap()\\n                address[] memory path;\\n                (path, inputTokenAmount, minOutputTokenAmount) = abi.decode(data, (address[], uint256, uint256));\\n                require(path.length > 1, \\\"Uniswap token path too short\\\");\\n                inputToken = path[0];\\n                outputToken = path[path.length - 1];\\n            } else if (selector == 0xafc6728e) {\\n                // batchFill()\\n                BatchFillData memory fillData;\\n                (fillData, minOutputTokenAmount) = abi.decode(data, (BatchFillData, uint256));\\n                inputToken = fillData.inputToken;\\n                outputToken = fillData.outputToken;\\n                inputTokenAmount = fillData.sellAmount;\\n            } else if (selector == 0x21c184b6) {\\n                // multiHopFill()\\n                MultiHopFillData memory fillData;\\n                (fillData, minOutputTokenAmount) = abi.decode(data, (MultiHopFillData, uint256));\\n                require(fillData.tokens.length > 1, \\\"Multihop token path too short\\\");\\n                inputToken = fillData.tokens[0];\\n                outputToken = fillData.tokens[fillData.tokens.length - 1];\\n                inputTokenAmount = fillData.sellAmount;\\n            } else if (selector == 0x6af479b2) {\\n                // sellTokenForTokenToUniswapV3()\\n                bytes memory encodedPath;\\n                (encodedPath, inputTokenAmount, minOutputTokenAmount, recipient) = abi.decode(\\n                    data,\\n                    (bytes, uint256, uint256, address)\\n                );\\n                supportsRecipient = true;\\n                if (recipient == address(0)) {\\n                    recipient = _destinationAddress;\\n                }\\n                (inputToken, outputToken) = _decodeTokensFromUniswapV3EncodedPath(encodedPath);\\n            } else if (selector == 0x803ba26d) {\\n                // sellTokenForEthToUniswapV3()\\n                bytes memory encodedPath;\\n                (encodedPath, inputTokenAmount, minOutputTokenAmount, recipient) = abi.decode(\\n                    data,\\n                    (bytes, uint256, uint256, address)\\n                );\\n                supportsRecipient = true;\\n                if (recipient == address(0)) {\\n                    recipient = _destinationAddress;\\n                }\\n                (inputToken, outputToken) = _decodeTokensFromUniswapV3EncodedPath(encodedPath);\\n                require(outputToken == wethAddress, \\\"Last token must be WETH\\\");\\n                outputToken = ETH_ADDRESS;\\n            } else if (selector == 0x3598d8ab) {\\n                // sellEthForTokenToUniswapV3()\\n                inputTokenAmount = _sourceQuantity;\\n                bytes memory encodedPath;\\n                (encodedPath, minOutputTokenAmount, recipient) = abi.decode(data, (bytes, uint256, address));\\n                supportsRecipient = true;\\n                if (recipient == address(0)) {\\n                    recipient = _destinationAddress;\\n                }\\n                (inputToken, outputToken) = _decodeTokensFromUniswapV3EncodedPath(encodedPath);\\n                require(inputToken == wethAddress, \\\"First token must be WETH\\\");\\n                inputToken = ETH_ADDRESS;\\n            } else {\\n                revert(\\\"Unsupported 0xAPI function selector\\\");\\n            }\\n        }\\n\\n        require(inputToken == _sourceToken, \\\"Mismatched input token\\\");\\n        require(outputToken == _destinationToken, \\\"Mismatched output token\\\");\\n        require(!supportsRecipient || recipient == _destinationAddress, \\\"Mismatched recipient\\\");\\n        require(inputTokenAmount == _sourceQuantity, \\\"Mismatched input token quantity\\\");\\n        require(minOutputTokenAmount >= _minDestinationQuantity, \\\"Mismatched output token quantity\\\");\\n    }\\n\\n    // Decode input and output tokens from an arbitrary length encoded Uniswap V3 path\\n    function _decodeTokensFromUniswapV3EncodedPath(\\n        bytes memory encodedPath\\n    ) private pure returns (address inputToken, address outputToken) {\\n        require(encodedPath.length >= UNISWAP_V3_SINGLE_HOP_PATH_SIZE, \\\"UniswapV3 token path too short\\\");\\n        // UniswapV3 paths are packed encoded as (address(token0), uint24(fee), address(token1), [...])\\n        // We want the first and last token.\\n        uint256 numHops = (encodedPath.length - UNISWAP_V3_PATH_ADDRESS_SIZE) / UNISWAP_V3_SINGLE_HOP_OFFSET_SIZE;\\n        uint256 lastTokenOffset = numHops * UNISWAP_V3_SINGLE_HOP_OFFSET_SIZE;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let p := add(encodedPath, 32)\\n            inputToken := shr(96, mload(p))\\n            p := add(p, lastTokenOffset)\\n            outputToken := shr(96, mload(p))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/BubbleReverts/BubbleReverts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity >=0.8.18;\\n\\nimport { InvalidCalldata } from \\\"../../core/libraries/DefinitiveErrors.sol\\\";\\n\\n/**\\n * @title Call utilities library that is absent from the OpenZeppelin\\n * @author Superfluid\\n * Forked from\\n * https://github.com/superfluid-finance/protocol-monorepo/blob\\n * /d473b4876a689efb3bbb05552040bafde364a8b2/packages/ethereum-contracts/contracts/libs/CallUtils.sol\\n * (Separated by 2 lines to prevent going over 120 character per line limit)\\n */\\nlibrary CallUtils {\\n    /// @dev Bubble up the revert from the returnedData (supports Panic, Error & Custom Errors)\\n    /// @notice This is needed in order to provide some human-readable revert message from a call\\n    /// @param returnedData Response of the call\\n    function revertFromReturnedData(bytes memory returnedData) internal pure {\\n        if (returnedData.length < 4) {\\n            // case 1: catch all\\n            revert(\\\"CallUtils: target revert()\\\");\\n        } else {\\n            bytes4 errorSelector;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                errorSelector := mload(add(returnedData, 0x20))\\n            }\\n            if (errorSelector == bytes4(0x4e487b71) /* `seth sig \\\"Panic(uint256)\\\"` */) {\\n                // case 2: Panic(uint256) (Defined since 0.8.0)\\n                // solhint-disable-next-line max-line-length\\n                // ref: https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require)\\n                string memory reason = \\\"CallUtils: target panicked: 0x__\\\";\\n                uint errorCode;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    errorCode := mload(add(returnedData, 0x24))\\n                    let reasonWord := mload(add(reason, 0x20))\\n                    // [0..9] is converted to ['0'..'9']\\n                    // [0xa..0xf] is not correctly converted to ['a'..'f']\\n                    // but since panic code doesn't have those cases, we will ignore them for now!\\n                    let e1 := add(and(errorCode, 0xf), 0x30)\\n                    let e2 := shl(8, add(shr(4, and(errorCode, 0xf0)), 0x30))\\n                    reasonWord := or(\\n                        and(reasonWord, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000),\\n                        or(e2, e1)\\n                    )\\n                    mstore(add(reason, 0x20), reasonWord)\\n                }\\n                revert(reason);\\n            } else {\\n                // case 3: Error(string) (Defined at least since 0.7.0)\\n                // case 4: Custom errors (Defined since 0.8.0)\\n                uint len = returnedData.length;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    revert(add(returnedData, 32), len)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method to parse data and extract the method signature (selector).\\n     *\\n     * Copied from: https://github.com/argentlabs/argent-contracts/\\n     * blob/master/contracts/modules/common/Utils.sol#L54-L60\\n     */\\n    function parseSelector(bytes memory callData) internal pure returns (bytes4 selector) {\\n        if (callData.length < 4) {\\n            revert InvalidCalldata();\\n        }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            selector := mload(add(callData, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev Pad length to 32 bytes word boundary\\n     */\\n    function padLength32(uint256 len) internal pure returns (uint256 paddedLen) {\\n        return ((len / 32) + (((len & 31) > 0) /* rounding? */ ? 1 : 0)) * 32;\\n    }\\n\\n    /**\\n     * @dev Validate if the data is encoded correctly with abi.encode(bytesData)\\n     *\\n     * Expected ABI Encode Layout:\\n     * | word 1      | word 2           | word 3           | the rest...\\n     * | data length | bytesData offset | bytesData length | bytesData + padLength32 zeros |\\n     */\\n    function isValidAbiEncodedBytes(bytes memory data) internal pure returns (bool) {\\n        if (data.length < 64) return false;\\n        uint bytesOffset;\\n        uint bytesLen;\\n        // bytes offset is always expected to be 32\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            bytesOffset := mload(add(data, 32))\\n        }\\n        if (bytesOffset != 32) return false;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            bytesLen := mload(add(data, 64))\\n        }\\n        // the data length should be bytesData.length + 64 + padded bytes length\\n        return data.length == 64 + padLength32(bytesLen);\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 850\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zeroExProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidERC20Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExecutedOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapInputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapDeadlineExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct IZeroExAdapterStructs.ZeroExSwapParams\",\"name\":\"zeroExSwapParams\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ICoreSwapHandlerV1.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"swapCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ICoreSwapHandlerV1.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"swapDelegate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ICoreSwapHandlerV1.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"swapUsingValidatedPathCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroExAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZeroExSwapHandler", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "850", "ConstructorArguments": "000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}