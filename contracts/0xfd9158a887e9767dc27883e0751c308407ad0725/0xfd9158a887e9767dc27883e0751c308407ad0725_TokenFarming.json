{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface IBEP20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event TransferOwnerShip(address indexed previousOwner);\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        emit TransferOwnerShip(newOwner);\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Owner can not be 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenFarming is Ownable {\r\n    uint256 public minimumStakingAmount;\r\n    uint256 public maximumStakingAmount;\r\n    uint256 public lockDays = 365;\r\n\r\n    uint256 public stakingLevel1RangeStart;\r\n    uint256 public stakingLevel1RangeEnd;\r\n    uint256 public stakingLevel1RewardPercentage = 6; // this is the reward percent (in 1000) per day\r\n\r\n    uint256 public stakingLevel2RangeStart;\r\n    uint256 public stakingLevel2RangeEnd;\r\n    uint256 public stakingLevel2RewardPercentage = 8; // this is the reward percent (in 1000) per day\r\n\r\n    uint256 public stakingLevel3RangeStart;\r\n    uint256 public stakingLevel3RangeEnd;\r\n    uint256 public stakingLevel3RewardPercentage = 10; // this is the reward percent (in 1000) per day\r\n\r\n    uint256[] public referralLevelRewardPercentage = [\r\n        0,\r\n        10,\r\n        20,\r\n        30,\r\n        40,\r\n        50,\r\n        60,\r\n        70,\r\n        80,\r\n        90,\r\n        100\r\n    ];\r\n\r\n    IBEP20 public stakingToken;\r\n\r\n    bool lock_ = false;\r\n    bool public stakingActive = true;\r\n\r\n    mapping(address => uint256) public stakingBalance;\r\n    mapping(address => uint256) public rewardsClaimed;\r\n    mapping(address => uint256) public totalRewardsClaimed;\r\n    mapping(address => address) public referralMapping;\r\n    mapping(address => uint256) public referralClaimableRewards;\r\n    mapping(address => uint256) public totalReferralRewardsClaimed;\r\n    mapping(address => uint256) public userUnlockTime;\r\n\r\n    modifier lock() {\r\n        require(!lock_, \"Process is locked\");\r\n        lock_ = true;\r\n        _;\r\n        lock_ = false;\r\n    }\r\n\r\n    constructor() {\r\n        // stakingToken = IBEP20(0x4B5C23cac08a567ecf0c1fFcA8372A45a5D33743);\r\n        stakingToken = IBEP20(0xaea46A60368A7bD060eec7DF8CBa43b7EF41Ad85);\r\n        minimumStakingAmount = 1000000000000000000000;\r\n        maximumStakingAmount = 20000000000000000000000;\r\n\r\n        uint8 _decimals = stakingToken.decimals();\r\n\r\n        stakingLevel1RangeStart = 1000 * (10**_decimals);\r\n        stakingLevel1RangeEnd = 5000 * (10**_decimals);\r\n        stakingLevel2RangeStart = 5001 * (10**_decimals);\r\n        stakingLevel2RangeEnd = 10000 * (10**_decimals);\r\n        stakingLevel3RangeStart = 10001 * (10**_decimals);\r\n        stakingLevel3RangeEnd = 20000 * (10**_decimals);\r\n    }\r\n\r\n    // staking function\r\n    function stake(uint256 _amount, address _referral) public lock {\r\n        require(stakingActive, \"Staking is not active\");\r\n        require(\r\n            _amount >= minimumStakingAmount,\r\n            \"Amount is less than minimum staking amount\"\r\n        );\r\n        require(\r\n            _amount <= maximumStakingAmount,\r\n            \"Amount is more than maximum staking amount\"\r\n        );\r\n        require(\r\n            stakingToken.transferFrom(msg.sender, address(this), _amount),\r\n            \"Transfer failed\"\r\n        );\r\n        stakingBalance[msg.sender] += _amount;\r\n        if (\r\n            _referral != address(0) &&\r\n            _referral != msg.sender &&\r\n            stakingBalance[_referral] >= minimumStakingAmount &&\r\n            referralMapping[msg.sender] == address(0)\r\n        ) {\r\n            referralMapping[msg.sender] = _referral;\r\n        }\r\n        userUnlockTime[msg.sender] = block.timestamp + (lockDays * 1 days);\r\n        rewardsClaimed[msg.sender] = 0;\r\n\r\n        // transfer tokens to this address\r\n        stakingToken.transfer(address(this), _amount);\r\n    }\r\n\r\n    // claimable rewards function\r\n    function claimableRewards(address _user) public view returns (uint256) {\r\n        uint256 _stakingAmount = stakingBalance[_user];\r\n        uint256 _userLockTime = userUnlockTime[_user] - (lockDays * 1 days);\r\n        uint256 _days = (block.timestamp - _userLockTime) / (1 days);\r\n\r\n        if(_days > lockDays){\r\n            _days = lockDays;\r\n        }\r\n\r\n        uint256 _rewardPercentage = 0;\r\n        if (\r\n            _stakingAmount >= stakingLevel1RangeStart &&\r\n            _stakingAmount <= stakingLevel1RangeEnd\r\n        ) {\r\n            _rewardPercentage = stakingLevel1RewardPercentage;\r\n        } else if (\r\n            _stakingAmount >= stakingLevel2RangeStart &&\r\n            _stakingAmount <= stakingLevel2RangeEnd\r\n        ) {\r\n            _rewardPercentage = stakingLevel2RewardPercentage;\r\n        } else if (\r\n            _stakingAmount >= stakingLevel3RangeStart &&\r\n            _stakingAmount <= stakingLevel3RangeEnd\r\n        ) {\r\n            _rewardPercentage = stakingLevel3RewardPercentage;\r\n        }\r\n        uint256 _amount = ((_stakingAmount * _rewardPercentage * _days) /\r\n            (1000)) - rewardsClaimed[_user];\r\n        return _amount;\r\n    }\r\n\r\n    // claimable referral rewards\r\n    function claimableReferralRewards(address _user)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return referralClaimableRewards[_user];\r\n    }\r\n\r\n    // claim rewards function\r\n    function claimRewards() public lock {\r\n        require(stakingBalance[msg.sender] > 0, \"No staking balance\");\r\n        uint256 _amount = claimableRewards(msg.sender);\r\n        require(_amount > 0, \"No rewards\");\r\n\r\n        rewardsClaimed[msg.sender] += _amount;\r\n        totalRewardsClaimed[msg.sender] += _amount;\r\n\r\n        // transfer tokens to this address\r\n        stakingToken.transfer(msg.sender, _amount);\r\n\r\n        // referral rewards\r\n        address _referral = referralMapping[msg.sender];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 1);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 2);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 3);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 4);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 5);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 6);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 7);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 8);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 9);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n        _referral = referralMapping[_referral];\r\n        if (_referral != address(0)) {\r\n            uint256 _referralAmount = userReferralShare(_referral, _amount, 10);\r\n            referralClaimableRewards[_referral] += _referralAmount;\r\n        }\r\n    }\r\n\r\n    function userReferralShare(\r\n        address _user,\r\n        uint256 _amount,\r\n        uint256 _referralLevel\r\n    ) public view returns (uint256) {\r\n        uint256 _stakingAmount = stakingBalance[_user];\r\n        if (\r\n            _stakingAmount >= stakingLevel1RangeStart &&\r\n            _stakingAmount <= stakingLevel1RangeEnd\r\n        ) {\r\n            if (_referralLevel > 5) return 0;\r\n            return\r\n                (_amount * referralLevelRewardPercentage[_referralLevel]) /\r\n                1000;\r\n        } else if (\r\n            _stakingAmount >= stakingLevel2RangeStart &&\r\n            _stakingAmount <= stakingLevel2RangeEnd\r\n        ) {\r\n            if (_referralLevel > 7) return 0;\r\n            return\r\n                (_amount * referralLevelRewardPercentage[_referralLevel]) /\r\n                1000;\r\n        } else if (\r\n            _stakingAmount >= stakingLevel3RangeStart &&\r\n            _stakingAmount <= stakingLevel3RangeEnd\r\n        ) {\r\n            if (_referralLevel > 10) return 0;\r\n            return\r\n                (_amount * referralLevelRewardPercentage[_referralLevel]) /\r\n                1000;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // claim referral rewards function\r\n    function claimReferralRewards() public lock {\r\n        require(\r\n            referralClaimableRewards[msg.sender] > 0,\r\n            \"No referral rewards\"\r\n        );\r\n        uint256 _amount = claimableReferralRewards(msg.sender);\r\n        referralClaimableRewards[msg.sender] = 0;\r\n        totalReferralRewardsClaimed[msg.sender] += _amount;\r\n\r\n        // transfer tokens to this address\r\n        stakingToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    // all onlyOwner functions here\r\n\r\n    // set staking token\r\n    function setStakingToken(address _stakingToken) public onlyOwner {\r\n        stakingToken = IBEP20(_stakingToken);\r\n    }\r\n\r\n    // set minimum staking amount\r\n    function setMinimumStakingAmount(uint256 _minimumStakingAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        minimumStakingAmount = _minimumStakingAmount;\r\n    }\r\n\r\n    // set maximum staking amount\r\n    function setMaximumStakingAmount(uint256 _maximumStakingAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        maximumStakingAmount = _maximumStakingAmount;\r\n    }\r\n\r\n    // set lock days\r\n    function setLockDays(uint256 _lockDays) public onlyOwner {\r\n        lockDays = _lockDays;\r\n    }\r\n\r\n    // set staking level 1 range\r\n    function setStakingLevel1Range(\r\n        uint256 _stakingLevel1RangeStart,\r\n        uint256 _stakingLevel1RangeEnd\r\n    ) public onlyOwner {\r\n        stakingLevel1RangeStart = _stakingLevel1RangeStart;\r\n        stakingLevel1RangeEnd = _stakingLevel1RangeEnd;\r\n    }\r\n\r\n    // set staking level 1 reward percentage\r\n    function setStakingLevel1RewardPercentage(\r\n        uint256 _stakingLevel1RewardPercentage\r\n    ) public onlyOwner {\r\n        stakingLevel1RewardPercentage = _stakingLevel1RewardPercentage;\r\n    }\r\n\r\n    // set staking level 2 range\r\n    function setStakingLevel2Range(\r\n        uint256 _stakingLevel2RangeStart,\r\n        uint256 _stakingLevel2RangeEnd\r\n    ) public onlyOwner {\r\n        stakingLevel2RangeStart = _stakingLevel2RangeStart;\r\n        stakingLevel2RangeEnd = _stakingLevel2RangeEnd;\r\n    }\r\n\r\n    // set staking level 2 reward percentage\r\n    function setStakingLevel2RewardPercentage(\r\n        uint256 _stakingLevel2RewardPercentage\r\n    ) public onlyOwner {\r\n        stakingLevel2RewardPercentage = _stakingLevel2RewardPercentage;\r\n    }\r\n\r\n    // set staking level 3 range\r\n    function setStakingLevel3Range(\r\n        uint256 _stakingLevel3RangeStart,\r\n        uint256 _stakingLevel3RangeEnd\r\n    ) public onlyOwner {\r\n        stakingLevel3RangeStart = _stakingLevel3RangeStart;\r\n        stakingLevel3RangeEnd = _stakingLevel3RangeEnd;\r\n    }\r\n\r\n    // set staking level 3 reward percentage\r\n    function setStakingLevel3RewardPercentage(\r\n        uint256 _stakingLevel3RewardPercentage\r\n    ) public onlyOwner {\r\n        stakingLevel3RewardPercentage = _stakingLevel3RewardPercentage;\r\n    }\r\n\r\n    // set referral level reward percentage\r\n    function setReferralLevelRewardPercentage(\r\n        uint256 _referralLevel,\r\n        uint256 _referralLevelRewardPercentage\r\n    ) public onlyOwner {\r\n        referralLevelRewardPercentage[\r\n            _referralLevel\r\n        ] = _referralLevelRewardPercentage;\r\n    }\r\n\r\n    // set staking active\r\n    function setStakingActive(bool _stakingActive) public onlyOwner {\r\n        stakingActive = _stakingActive;\r\n    }\r\n\r\n    // withdraw tokens\r\n    function withdrawTokens(address _token, uint256 _amount) public onlyOwner {\r\n        IBEP20(_token).transfer(msg.sender, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnerShip\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableReferralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralLevelRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"}],\"name\":\"setLockDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumStakingAmount\",\"type\":\"uint256\"}],\"name\":\"setMaximumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStakingAmount\",\"type\":\"uint256\"}],\"name\":\"setMinimumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralLevelRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setReferralLevelRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stakingActive\",\"type\":\"bool\"}],\"name\":\"setStakingActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingLevel1RangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingLevel1RangeEnd\",\"type\":\"uint256\"}],\"name\":\"setStakingLevel1Range\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingLevel1RewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setStakingLevel1RewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingLevel2RangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingLevel2RangeEnd\",\"type\":\"uint256\"}],\"name\":\"setStakingLevel2Range\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingLevel2RewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setStakingLevel2RewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingLevel3RangeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingLevel3RangeEnd\",\"type\":\"uint256\"}],\"name\":\"setStakingLevel3Range\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingLevel3RewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setStakingLevel3RewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel1RangeEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel1RangeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel1RewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel2RangeEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel2RangeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel2RewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel3RangeEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel3RangeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingLevel3RewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewardsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralLevel\",\"type\":\"uint256\"}],\"name\":\"userReferralShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenFarming", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9ea272ca4644c4cf71f506bcf2493d826aef1b37a7b0bdfc5dcf563aa1b1a390"}