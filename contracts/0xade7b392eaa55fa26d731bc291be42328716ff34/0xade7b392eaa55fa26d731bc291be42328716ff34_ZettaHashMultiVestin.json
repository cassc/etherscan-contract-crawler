{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance < amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance < value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 && target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance < requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\r\n * can later be changed with {transferOwnership} and {acceptOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available all functions\r\n * from parent (Ownable).\r\n */\r\nabstract contract Ownable2Step is Ownable {\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view virtual returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\r\n        _pendingOwner = newOwner;\r\n        emit OwnershipTransferStarted(owner(), newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual override {\r\n        delete _pendingOwner;\r\n        super._transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev The new owner accepts the ownership transfer.\r\n     */\r\n    function acceptOwnership() public virtual {\r\n        address sender = _msgSender();\r\n        if (pendingOwner() != sender) {\r\n            revert OwnableUnauthorizedAccount(sender);\r\n        }\r\n        _transferOwnership(sender);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ZettaHashMultiVesting\r\n * @dev A smart contract for managing token vesting schedules for various roles.\r\n */\r\ncontract ZettaHashMultiVesting is Ownable2Step, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n    \r\n    /// Custom errors\r\n    error OnlyZettaDashDAO();\r\n    error CannotRevokeFounderVesting();\r\n    error VestingIsRevokedAlready();\r\n    error OnlyBeneficiaryCanClaim();\r\n    error InvalidLockerId();\r\n    error NoTokensToClaimYetOrClaimedAlready();\r\n    error CannotClaimNativeToken();\r\n    error FounderVestingCannotBeAssignedByDao();\r\n    error ZeroAddressNotAllowed();\r\n    error OnlyElectedMembers();\r\n    error MinCycleNeedsToBeOne();\r\n   \r\n    /**\r\n     * @dev Enumeration representing different statuses for vesting schedules.\r\n     */\r\n    enum Status{\r\n        Founder, \r\n        Co_Founder,\r\n        ElectedMember,\r\n        Hasher,\r\n        Vender,\r\n        Contributor\r\n    }\r\n    \r\n    /**\r\n     * @dev Struct representing a vesting schedule for a user.\r\n     */\r\n    struct VestingSchedule {\r\n        Status status;\r\n        uint256 vestStartTime;\r\n        uint256 cliffPeriod;\r\n        uint256 cycles;\r\n        uint256 vestingDuration;\r\n        uint256 totalTokens;\r\n        uint256 claimedTokens;\r\n        bool revoked;\r\n    }\r\n    \r\n    /// @notice zettahash token\r\n    IERC20 public token;\r\n    /// @notice nested mapping for lockers to users address to vesting schedule\r\n    mapping(address => mapping(uint256 => VestingSchedule)) public userLockers;\r\n    /// @notice mapping for lockers to address\r\n    mapping(uint256 => address) private lockerOwners;\r\n    /// @notice mapping for address to lockers \r\n    mapping(address => uint256[]) private lockers;\r\n    /// @notice zettahash dao address\r\n    address public ZettaHashDAO = msg.sender;\r\n    /// @notice zettahash elected members\r\n    address public ElectedMemberMultiSig = msg.sender;\r\n    /// @notice nextLockerId\r\n    uint256 public nextLockerId;\r\n    \r\n    /// Events\r\n    event VestingAssigned(\r\n        address indexed beneficiary,\r\n        uint256 lockerId,\r\n        uint256 vestStartTime,\r\n        uint256 cliffPeriod,\r\n        uint256 cycles,\r\n        uint256 vestingDuration,\r\n        uint256 totalTokens\r\n    );\r\n\r\n    event TokensClaimed(\r\n        address indexed beneficiary,\r\n        uint256 lockerId,\r\n        uint256 amount\r\n    );\r\n\r\n    event VestingRevoked(\r\n        address indexed beneficiary,\r\n        uint256 lockerId,\r\n        uint256 amount\r\n    );\r\n    \r\n    /**\r\n     * @dev Modifier to restrict a function to be called only by the ZettaHashDAO address.\r\n     */\r\n    modifier onlyZettaHashDao() {\r\n        if (msg.sender != ZettaHashDAO) {\r\n            revert OnlyZettaDashDAO();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to restrict a function to be called only by the Elected Members.\r\n     */\r\n    modifier onlyElectedMembers() {\r\n        if (msg.sender == ElectedMemberMultiSig) {\r\n            revert OnlyElectedMembers();\r\n        }\r\n        _;\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * @dev Create the multivesting contract and initilize it wilh required variables.\r\n     * @param _token The address of the ERC20 token to be vested.\r\n     */\r\n    constructor(IERC20 _token) Ownable(msg.sender) {\r\n        token = _token;\r\n        nextLockerId = 1;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Assign vesting to founders.\r\n     * @param beneficiary The address of the beneficiary.\r\n     * @param cliffPeriod Duration in seconds for the cliff period.\r\n     * @param cycles Number of vesting cycles.\r\n     * @param vestingDuration Total duration of the vesting schedule in seconds.\r\n     * @param totalTokens Total tokens to be vested.in wei format.\r\n     */\r\n    function assignVestingToFounders(\r\n        address beneficiary,\r\n        uint256 cliffPeriod,\r\n        uint256 cycles,\r\n        uint256 vestingDuration,\r\n        uint256 totalTokens\r\n    ) external onlyOwner nonReentrant {\r\n        if(beneficiary == address(0)){\r\n            revert ZeroAddressNotAllowed();\r\n        }\r\n\r\n        if(cycles < 1){\r\n            revert MinCycleNeedsToBeOne();\r\n        }\r\n        uint256 lockerId = nextLockerId;\r\n        token.safeTransferFrom(msg.sender, address(this), totalTokens);\r\n        userLockers[beneficiary][lockerId] = VestingSchedule({\r\n            \r\n            status: Status.Founder,\r\n            vestStartTime: block.timestamp,\r\n            cliffPeriod: cliffPeriod,\r\n            cycles: cycles,\r\n            vestingDuration: vestingDuration,\r\n            totalTokens: totalTokens,\r\n            claimedTokens: 0,\r\n            revoked: false\r\n        });\r\n        lockerOwners[lockerId] = beneficiary;\r\n        lockers[beneficiary].push(lockerId);\r\n        nextLockerId = nextLockerId + 1;\r\n\r\n        emit VestingAssigned(\r\n            beneficiary,\r\n            lockerId,\r\n            block.timestamp,\r\n            cliffPeriod,\r\n            cycles,\r\n            vestingDuration,\r\n            totalTokens\r\n        );\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Assign vesting to users other than founders.\r\n     * @param beneficiary The address of the beneficiary.\r\n     * @param userStatus 1 - Hasher, 2 - vender, 3 - Contributor\r\n     * @param cliffPeriod Duration in seconds for the cliff period.\r\n     * @param cycles Number of vesting cycles.\r\n     * @param vestingDuration Total duration of the vesting schedule in seconds.\r\n     * @param totalTokens Total tokens to be vested. (wei format)\r\n     */\r\n    function assignVestingToHasherOrVenderOrContributor(\r\n        address beneficiary,\r\n        uint8  userStatus,\r\n        uint256 cliffPeriod,\r\n        uint256 cycles,\r\n        uint256 vestingDuration,\r\n        uint256 totalTokens\r\n    ) external onlyElectedMembers nonReentrant {\r\n        if(beneficiary == address(0)){\r\n            revert ZeroAddressNotAllowed();\r\n        }\r\n        if(cycles < 1){\r\n            revert MinCycleNeedsToBeOne();\r\n        }\r\n        Status status;\r\n        if(userStatus == 1){\r\n            status = Status.Hasher;\r\n        } else if (userStatus == 2){\r\n            status = Status.Vender;\r\n        } else {\r\n            status = Status.Contributor;\r\n        }\r\n        uint256 lockerId = nextLockerId;\r\n        token.safeTransferFrom(msg.sender, address(this), totalTokens);\r\n        userLockers[beneficiary][lockerId] = VestingSchedule({\r\n            status: status,\r\n            vestStartTime: block.timestamp,\r\n            cliffPeriod: cliffPeriod,\r\n            cycles: cycles,\r\n            vestingDuration: vestingDuration,\r\n            totalTokens: totalTokens,\r\n            claimedTokens: 0,\r\n            revoked: false\r\n        });\r\n        lockerOwners[lockerId] = beneficiary;\r\n        lockers[beneficiary].push(lockerId);\r\n        nextLockerId = nextLockerId + 1;\r\n        emit VestingAssigned(\r\n            beneficiary,\r\n            lockerId,\r\n            block.timestamp,\r\n            cliffPeriod,\r\n            cycles,\r\n            vestingDuration,\r\n            totalTokens\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Assign vesting to users other than founders.\r\n     * @param beneficiary The address of the beneficiary.\r\n     * @param isCoFounder boolean value, true - coFounder, false - contributor\r\n     * @param cliffPeriod Duration in seconds for the cliff period.\r\n     * @param cycles Number of vesting cycles.\r\n     * @param vestingDuration Total duration of the vesting schedule in seconds.\r\n     * @param totalTokens Total tokens to be vested. (wei format)\r\n     */\r\n    function assignVestingToCoFoundersOrElectedMembers(\r\n        address beneficiary,\r\n        bool  isCoFounder,\r\n        uint256 cliffPeriod,\r\n        uint256 cycles,\r\n        uint256 vestingDuration,\r\n        uint256 totalTokens\r\n    ) external onlyZettaHashDao nonReentrant {\r\n        if(beneficiary == address(0)){\r\n            revert ZeroAddressNotAllowed();\r\n        }\r\n        if(cycles < 1){\r\n            revert MinCycleNeedsToBeOne();\r\n        }\r\n        Status userStatus;\r\n        if(isCoFounder){\r\n            userStatus = Status.Co_Founder;\r\n        } else {\r\n            userStatus = Status.Contributor;\r\n        }\r\n        uint256 lockerId = nextLockerId;\r\n        token.safeTransferFrom(msg.sender, address(this), totalTokens);\r\n        userLockers[beneficiary][lockerId] = VestingSchedule({\r\n            status: userStatus,\r\n            vestStartTime: block.timestamp,\r\n            cliffPeriod: cliffPeriod,\r\n            cycles: cycles,\r\n            vestingDuration: vestingDuration,\r\n            totalTokens: totalTokens,\r\n            claimedTokens: 0,\r\n            revoked: false\r\n        });\r\n        lockerOwners[lockerId] = beneficiary;\r\n        lockers[beneficiary].push(lockerId);\r\n        nextLockerId = nextLockerId + 1;\r\n        emit VestingAssigned(\r\n            beneficiary,\r\n            lockerId,\r\n            block.timestamp,\r\n            cliffPeriod,\r\n            cycles,\r\n            vestingDuration,\r\n            totalTokens\r\n        );\r\n    }\r\n\r\n\r\n     /**\r\n     * @dev Claim vested tokens.\r\n     * @param lockerId The ID of the vesting locker.\r\n     */\r\n    function claimTokens(uint256 lockerId) external nonReentrant {\r\n        if (lockerId < 1 || lockerId >= nextLockerId) {\r\n            revert InvalidLockerId();\r\n        }\r\n        address user = lockerOwners[lockerId];\r\n        if (msg.sender != user) {\r\n            revert OnlyBeneficiaryCanClaim();\r\n        }\r\n        VestingSchedule storage vestingSchedule = userLockers[\r\n            lockerOwners[lockerId]\r\n        ][lockerId];\r\n        if (vestingSchedule.revoked) {\r\n            revert VestingIsRevokedAlready();\r\n        }\r\n\r\n        uint256 claimableTokens = checkClaimableTokens(lockerId);\r\n        if (claimableTokens == 0) {\r\n            revert NoTokensToClaimYetOrClaimedAlready();\r\n        }\r\n\r\n        vestingSchedule.claimedTokens += claimableTokens;\r\n\r\n        token.safeTransfer(lockerOwners[lockerId], claimableTokens);\r\n\r\n        emit TokensClaimed(lockerOwners[lockerId], lockerId, claimableTokens);\r\n    }\r\n    \r\n    /**\r\n     * @dev Revoke vested tokens.\r\n     * @param lockerId The ID of the vesting locker.\r\n     */\r\n    function revokeVesting(uint256 lockerId)\r\n        external\r\n        onlyZettaHashDao\r\n        nonReentrant\r\n    {\r\n        if (lockerId < 1 && lockerId >= nextLockerId) {\r\n            revert InvalidLockerId();\r\n        }\r\n        VestingSchedule storage vestingSchedule = userLockers[\r\n            lockerOwners[lockerId]\r\n        ][lockerId];\r\n        Status userStatus = vestingSchedule.status;\r\n        if (\r\n           userStatus ==\r\n            Status.Founder\r\n        ) {\r\n            revert CannotRevokeFounderVesting();\r\n        }\r\n        if (vestingSchedule.revoked) {\r\n            revert VestingIsRevokedAlready();\r\n        }\r\n\r\n        uint256 remainingTokens = vestingSchedule.totalTokens -\r\n            vestingSchedule.claimedTokens;\r\n\r\n        vestingSchedule.revoked = true;\r\n\r\n        if (remainingTokens > 0) {\r\n            token.safeTransfer(owner(), remainingTokens);\r\n        }\r\n\r\n        emit VestingRevoked(lockerOwners[lockerId], lockerId, remainingTokens);\r\n    }\r\n    \r\n    /**\r\n     * @dev Set the ZettaHashDAO address.\r\n     * @param newDaoAddress The new address for the ZettaHashDAO.\r\n     */\r\n    function setZettaHashDao(address newDaoAddress) external onlyOwner {\r\n        if (newDaoAddress != address(0) || newDaoAddress != ZettaHashDAO) {\r\n            ZettaHashDAO = newDaoAddress;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Set the ElectedMemberMultiSig address.\r\n     * @param newElectedMembersAddress The new address for the ElectedMember\r\n     */\r\n    function setElectedMember(address newElectedMembersAddress) external onlyOwner {\r\n        if (newElectedMembersAddress != address(0) || newElectedMembersAddress != ElectedMemberMultiSig) {\r\n            ElectedMemberMultiSig = newElectedMembersAddress;\r\n        }\r\n    \r\n    }\r\n\r\n    /**\r\n     * @dev Claim ERC20 tokens other than the vested token.\r\n     * @param otherToken The address of the ERC20 token to be claimed.\r\n     * @param amount The amount of tokens to be claimed.\r\n     */\r\n    function claimOtherERC20(IERC20 otherToken, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        if (otherToken != token) {\r\n            otherToken.safeTransfer(owner(), amount);\r\n        } else {\r\n            revert CannotClaimNativeToken();\r\n        }\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Check the amount of tokens claimable for a given vesting locker.\r\n     * @param lockerId The ID of the vesting locker.\r\n     * @return claimableTokens The amount of tokens claimable.\r\n     */\r\n    function checkClaimableTokens(uint256 lockerId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        VestingSchedule storage vestingSchedule = userLockers[\r\n            lockerOwners[lockerId]\r\n        ][lockerId];\r\n        if (block.timestamp < vestingSchedule.vestStartTime) {\r\n            return 0; // Vesting has not started\r\n        }\r\n\r\n        uint256 elapsed = block.timestamp - vestingSchedule.vestStartTime;\r\n        uint256 timeSinceCliff = elapsed < vestingSchedule.cliffPeriod\r\n            ? 0\r\n            : elapsed - vestingSchedule.cliffPeriod;\r\n        uint256 cycleDuration = vestingSchedule.vestingDuration /\r\n            vestingSchedule.cycles;\r\n\r\n        // Calculate the completed cycles\r\n        uint256 completedCycles = timeSinceCliff / cycleDuration;\r\n\r\n        // Ensure completed cycles do not exceed the allotted cycles\r\n        completedCycles = completedCycles > vestingSchedule.cycles\r\n            ? vestingSchedule.cycles\r\n            : completedCycles;\r\n\r\n        // Calculate the claimable tokens based on the completed cycles\r\n        uint256 claimableTokens = (completedCycles *\r\n            vestingSchedule.totalTokens) / vestingSchedule.cycles;\r\n        // Deduct the already claimed tokens\r\n        claimableTokens -= vestingSchedule.claimedTokens;\r\n        // Ensure claimable tokens do not exceed the total allotted tokens\r\n        if (\r\n            claimableTokens + vestingSchedule.claimedTokens >\r\n            vestingSchedule.totalTokens\r\n        ) {\r\n            claimableTokens =\r\n                vestingSchedule.totalTokens -\r\n                vestingSchedule.claimedTokens;\r\n        }\r\n\r\n        return claimableTokens > 0 ? claimableTokens : 0;\r\n    }\r\n    \r\n\r\n    /**\r\n     * @dev Get the list of locker IDs for a user.\r\n     * @param user The address of the user.\r\n     * @return lockersList An array of locker IDs.\r\n     */\r\n    function getUserLockersList(address user)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return lockers[user];\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotClaimNativeToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRevokeFounderVesting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FounderVestingCannotBeAssignedByDao\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockerId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinCycleNeedsToBeOne\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokensToClaimYetOrClaimedAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyBeneficiaryCanClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyElectedMembers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyZettaDashDAO\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingIsRevokedAlready\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestStartTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"VestingAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"VestingRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ElectedMemberMultiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZettaHashDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCoFounder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"assignVestingToCoFoundersOrElectedMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"assignVestingToFounders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"userStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"assignVestingToHasherOrVenderOrContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockerId\",\"type\":\"uint256\"}],\"name\":\"checkClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"otherToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimOtherERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockerId\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserLockersList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLockerId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockerId\",\"type\":\"uint256\"}],\"name\":\"revokeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newElectedMembersAddress\",\"type\":\"address\"}],\"name\":\"setElectedMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDaoAddress\",\"type\":\"address\"}],\"name\":\"setZettaHashDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLockers\",\"outputs\":[{\"internalType\":\"enum ZettaHashMultiVesting.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"vestStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycles\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ZettaHashMultiVesting", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002c0e15190acb858bf74447928cbd8fb9709dcb19", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a63e405ecda78fac9f153e01a8c723f2c619e4f0b87e2f2a9f360457dfa11e61"}