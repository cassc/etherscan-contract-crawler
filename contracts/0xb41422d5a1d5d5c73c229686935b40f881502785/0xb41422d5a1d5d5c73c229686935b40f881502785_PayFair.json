{"SourceCode": "pragma solidity ^0.5.0;\r\n\r\n /// @title Ownable contract - base contract with an owner\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n}\r\n\r\n /// @title ERC20 interface see https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  uint public totalSupply;\r\n  function balanceOf(address who) public view returns (uint);\r\n  function allowance(address owner, address spender) public view returns (uint);\r\n  function transfer(address to, uint value) public returns (bool ok);\r\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\r\n  function approve(address spender, uint value) public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n /// @title SafeMath contract - math operations with safety checks\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal pure returns (uint) {\r\n    assert(b > 0);\r\n    uint c = a / b;\r\n    assert(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal pure returns (uint) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal pure returns (uint) {\r\n    uint c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a < b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n\r\n/// @title PayFair contract - standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\ncontract PayFair is SafeMath, ERC20, Ownable {\r\n string public name = \"PayFair Token\";\r\n string public symbol = \"PFR\";\r\n uint public constant decimals = 8;\r\n uint public constant FROZEN_TOKENS = 11e6;\r\n uint public constant MULTIPLIER = 10 ** decimals;\r\n ERC20 public oldToken;\r\n \r\n /// approve() allowances\r\n mapping (address => mapping (address => uint)) allowed;\r\n /// holder balances\r\n mapping(address => uint) balances;\r\n \r\n /// @dev Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\r\n /// @param size payload size\r\n modifier onlyPayloadSize(uint size) {\r\n    require(msg.data.length >= size + 4);\r\n    _;\r\n }\r\n\r\n /// @dev Constructor\r\n constructor (address oldTokenAdddress) public {\r\n   owner = msg.sender;\r\n   oldToken = ERC20(oldTokenAdddress);\r\n   \r\n   totalSupply = convertToDecimal(FROZEN_TOKENS);\r\n   balances[owner] = convertToDecimal(FROZEN_TOKENS);\r\n }\r\n\r\n /// Fallback method will buyout tokens\r\n function() external payable {\r\n   revert();\r\n }\r\n\r\n function upgradeTokens(uint amountToUpgrade) public {  \r\n    require(amountToUpgrade <= convertToDecimal(oldToken.balanceOf(msg.sender)));\r\n    require(amountToUpgrade <= convertToDecimal(oldToken.allowance(msg.sender, address(this))));   \r\n    \r\n    emit Transfer(address(0), msg.sender, amountToUpgrade);\r\n    totalSupply = safeAdd(totalSupply, amountToUpgrade);\r\n    balances[msg.sender] = safeAdd(balances[msg.sender], amountToUpgrade);\r\n    oldToken.transferFrom(msg.sender, address(0x0), amountToUpgrade);\r\n }\r\n\r\n /// @dev Converts token value to value with decimal places\r\n /// @param amount Source token value\r\n function convertToDecimal(uint amount) private pure returns (uint) {\r\n   return safeMul(amount, MULTIPLIER);\r\n }\r\n\r\n /// @dev Tranfer tokens to address\r\n /// @param _to dest address\r\n /// @param _value tokens amount\r\n /// @return transfer result\r\n function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n   balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n   balances[_to] = safeAdd(balances[_to], _value);\r\n\r\n   emit Transfer(msg.sender, _to, _value);\r\n   return true;\r\n }\r\n\r\n /// @dev Tranfer tokens from one address to other\r\n /// @param _from source address\r\n /// @param _to dest address\r\n /// @param _value tokens amount\r\n /// @return transfer result\r\n function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n }\r\n /// @dev Tokens balance\r\n /// @param _owner holder address\r\n /// @return balance amount\r\n function balanceOf(address _owner) public view returns (uint balance) {\r\n   return balances[_owner];\r\n }\r\n\r\n /// @dev Approve transfer\r\n /// @param _spender holder address\r\n /// @param _value tokens amount\r\n /// @return result\r\n function approve(address _spender, uint _value) public returns (bool success) {\r\n   // To change the approve amount you first have to reduce the addresses`\r\n   //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n   //  already 0 to mitigate the race condition described here:\r\n   //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   require ((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n   allowed[msg.sender][_spender] = _value;\r\n   emit Approval(msg.sender, _spender, _value);\r\n   return true;\r\n }\r\n\r\n /// @dev Token allowance\r\n /// @param _owner holder address\r\n /// @param _spender spender address\r\n /// @return remain amount\r\n function allowance(address _owner, address _spender) public view returns (uint remaining) {\r\n   return allowed[_owner][_spender];\r\n }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FROZEN_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountToUpgrade\",\"type\":\"uint256\"}],\"name\":\"upgradeTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"oldTokenAdddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "PayFair", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002fa32a39fc1c399e0cc7b2935868f5165de7ce97", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://cf7536947049a5f739a966cd0c4a1b0ede92db8009e87dc6db60f8a4e230984f"}