{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/HoneyPotOEVShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {BoundedUnionSourceAdapter} from \\\"oev-contracts/adapters/source-adapters/BoundedUnionSourceAdapter.sol\\\";\\nimport {BaseController} from \\\"oev-contracts/controllers/BaseController.sol\\\";\\nimport {ChainlinkDestinationAdapter} from \\\"oev-contracts/adapters/destination-adapters/ChainlinkDestinationAdapter.sol\\\";\\nimport {IAggregatorV3Source} from \\\"oev-contracts/interfaces/chainlink/IAggregatorV3Source.sol\\\";\\nimport {IMedian} from \\\"oev-contracts/interfaces/chronicle/IMedian.sol\\\";\\nimport {IPyth} from \\\"oev-contracts/interfaces/pyth/IPyth.sol\\\";\\n\\ncontract HoneyPotOEVShare is BaseController, BoundedUnionSourceAdapter, ChainlinkDestinationAdapter {\\n    constructor(\\n        address chainlinkSource,\\n        address chronicleSource,\\n        address pythSource,\\n        bytes32 pythPriceId,\\n        uint8 decimals\\n    )\\n        BoundedUnionSourceAdapter(\\n            IAggregatorV3Source(chainlinkSource),\\n            IMedian(chronicleSource),\\n            IPyth(pythSource),\\n            pythPriceId,\\n            0.1e18\\n        )\\n        BaseController()\\n        ChainlinkDestinationAdapter(decimals)\\n    {}\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/adapters/source-adapters/BoundedUnionSourceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {SignedMath} from \\\"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\\\";\\n\\nimport {IAggregatorV3Source} from \\\"../../interfaces/chainlink/IAggregatorV3Source.sol\\\";\\nimport {IMedian} from \\\"../../interfaces/chronicle/IMedian.sol\\\";\\nimport {IPyth} from \\\"../../interfaces/pyth/IPyth.sol\\\";\\nimport {ChainlinkSourceAdapter} from \\\"./ChainlinkSourceAdapter.sol\\\";\\nimport {ChronicleMedianSourceAdapter} from \\\"./ChronicleMedianSourceAdapter.sol\\\";\\nimport {PythSourceAdapter} from \\\"./PythSourceAdapter.sol\\\";\\nimport {SnapshotSource} from \\\"./SnapshotSource.sol\\\";\\n\\n/**\\n * @title BoundedUnionSourceAdapter contract to read data from multiple sources and return the newest, contingent on it\\n * being within a certain tolerance of the other sources. The return logic operates as follows:\\n *   a) Return the most recent price if it's within tolerance of at least one of the other two.\\n *   b) If not, return the second most recent price if it's within tolerance of at least one of the other two.\\n *   c) If neither a) nor b) is met, return the chainlink price.\\n * @dev This adapter only works with Chainlink, Chronicle and Pyth adapters. If alternative adapter configs are desired\\n * then a new adapter should be created.\\n */\\n\\nabstract contract BoundedUnionSourceAdapter is\\n    ChainlinkSourceAdapter,\\n    ChronicleMedianSourceAdapter,\\n    PythSourceAdapter\\n{\\n    uint256 public immutable BOUNDING_TOLERANCE;\\n\\n    constructor(\\n        IAggregatorV3Source chainlink,\\n        IMedian chronicle,\\n        IPyth pyth,\\n        bytes32 pythPriceId,\\n        uint256 boundingTolerance\\n    ) ChainlinkSourceAdapter(chainlink) ChronicleMedianSourceAdapter(chronicle) PythSourceAdapter(pyth, pythPriceId) {\\n        BOUNDING_TOLERANCE = boundingTolerance;\\n    }\\n\\n    /**\\n     * @notice Returns the latest data from the source, contingent on it being within a tolerance of the other sources.\\n     * @return answer The latest answer in 18 decimals.\\n     * @return timestamp The timestamp of the answer.\\n     */\\n    function getLatestSourceData()\\n        public\\n        view\\n        override(ChainlinkSourceAdapter, ChronicleMedianSourceAdapter, PythSourceAdapter)\\n        returns (int256 answer, uint256 timestamp)\\n    {\\n        (int256 clAnswer, uint256 clTimestamp) = ChainlinkSourceAdapter.getLatestSourceData();\\n        (int256 crAnswer, uint256 crTimestamp) = ChronicleMedianSourceAdapter.getLatestSourceData();\\n        (int256 pyAnswer, uint256 pyTimestamp) = PythSourceAdapter.getLatestSourceData();\\n\\n        return _selectBoundedPrice(clAnswer, clTimestamp, crAnswer, crTimestamp, pyAnswer, pyTimestamp);\\n    }\\n\\n    /**\\n     * @notice Snapshots is a no-op for this adapter as its never used.\\n     */\\n    function snapshotData() public override(ChainlinkSourceAdapter, SnapshotSource) {}\\n\\n    /**\\n     * @notice Tries getting latest data as of requested timestamp. Note that for all historic lookups we simply return\\n     * the Chainlink data as this is the only supported source that has historical data.\\n     * @param timestamp The timestamp to try getting latest data at.\\n     * @param maxTraversal The maximum number of rounds to traverse when looking for historical data.\\n     * @return answer The answer as of requested timestamp, or earliest available data if not available, in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function tryLatestDataAt(uint256 timestamp, uint256 maxTraversal)\\n        public\\n        view\\n        override(ChainlinkSourceAdapter, ChronicleMedianSourceAdapter, PythSourceAdapter)\\n        returns (int256, uint256)\\n    {\\n        // Chainlink has price history, so use tryLatestDataAt to pull the most recent price that satisfies the timestamp constraint.\\n        (int256 clAnswer, uint256 clTimestamp) = ChainlinkSourceAdapter.tryLatestDataAt(timestamp, maxTraversal);\\n\\n        // For Chronicle and Pyth, just pull the most recent prices and drop them if they don't satisfy the constraint.\\n        (int256 crAnswer, uint256 crTimestamp) = ChronicleMedianSourceAdapter.getLatestSourceData();\\n        (int256 pyAnswer, uint256 pyTimestamp) = PythSourceAdapter.getLatestSourceData();\\n\\n        // To \\\"drop\\\" Chronicle and Pyth, we set their timestamps to 0 (as old as possible) if they are too recent.\\n        // This means that they will never be used if either or both are 0.\\n        if (crTimestamp > timestamp) crTimestamp = 0;\\n        if (pyTimestamp > timestamp) pyTimestamp = 0;\\n\\n        return _selectBoundedPrice(clAnswer, clTimestamp, crAnswer, crTimestamp, pyAnswer, pyTimestamp);\\n    }\\n\\n    // Selects the appropriate price from the three sources based on the bounding tolerance and logic.\\n    function _selectBoundedPrice(int256 cl, uint256 clT, int256 cr, uint256 crT, int256 py, uint256 pyT)\\n        internal\\n        view\\n        returns (int256, uint256)\\n    {\\n        int256 newestVal = 0;\\n        uint256 newestT = 0;\\n\\n        // For each price, check if it is within tolerance of the other two. If so, check if it is the newest.\\n        if (pyT > newestT && (_withinTolerance(py, cr) || _withinTolerance(py, cl))) (newestVal, newestT) = (py, pyT);\\n        if (crT > newestT && (_withinTolerance(cr, py) || _withinTolerance(cr, cl))) (newestVal, newestT) = (cr, crT);\\n        if (clT > newestT && (_withinTolerance(cl, py) || _withinTolerance(cl, cr))) (newestVal, newestT) = (cl, clT);\\n\\n        if (newestT == 0) return (cl, clT); // If no valid price was found, default to returning chainlink.\\n\\n        return (newestVal, newestT);\\n    }\\n\\n    // Checks if value a is within tolerance of value b.\\n    function _withinTolerance(int256 a, int256 b) internal view returns (bool) {\\n        uint256 diff = SignedMath.abs(a - b);\\n        uint256 maxDiff = SignedMath.abs(b) * BOUNDING_TOLERANCE / 1e18;\\n        return diff <= maxDiff;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/controllers/BaseController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {OevShare} from \\\"../OevShare.sol\\\";\\n\\n/**\\n * @title BaseController providing the simplest possible controller logic to govern who can unlock the OEVShare.\\n * @dev Custom Controllers can be created to provide more granular control over who can unlock the OEVShare.\\n */\\n\\nabstract contract BaseController is Ownable, OevShare {\\n    // these don't need to be public since they can be accessed via the accessor functions below.\\n    uint256 private lockWindow_ = 60; // The lockWindow in seconds.\\n    uint256 private maxTraversal_ = 10; // The maximum number of rounds to traverse when looking for historical data.\\n\\n    mapping(address => bool) public unlockers;\\n\\n    /**\\n     * @notice Enables the owner to set the unlocker status of an address. Once set, the address can unlock the OEVShare\\n     * and by calling unlockLatestValue as part of an MEV-share auction.\\n     * @param unlocker The address to set the unlocker status of.\\n     * @param allowed The unlocker status to set.\\n     */\\n    function setUnlocker(address unlocker, bool allowed) public onlyOwner {\\n        unlockers[unlocker] = allowed;\\n\\n        emit UnlockerSet(unlocker, allowed);\\n    }\\n\\n    /**\\n     * @notice Returns true if the caller is allowed to unlock the OEVShare.\\n     * @dev This implementation simply checks if the caller is in the unlockers mapping. Custom Controllers can override\\n     * this function to provide more granular control over who can unlock the OEVShare.\\n     * @param caller The address to check.\\n     * @param _lastUnlockTime The timestamp of the latest unlock to the OEVShare. Might be useful in verification.\\n     */\\n    function canUnlock(address caller, uint256 _lastUnlockTime) public view override returns (bool) {\\n        return unlockers[caller];\\n    }\\n\\n    /**\\n     * @notice Enables the owner to set the lockWindow.\\n     * @dev If changing the lockWindow would cause OEVShare to return different data the permissioned actor must first\\n     * call unlockLatestValue through flashbots via eth_sendPrivateTransaction.\\n     * @param newLockWindow The lockWindow to set.\\n     */\\n    function setLockWindow(uint256 newLockWindow) public onlyOwner {\\n        (int256 currentAnswer, uint256 currentTimestamp) = internalLatestData();\\n\\n        lockWindow_ = newLockWindow;\\n\\n        // Compare OEVShare results so that change in lock window does not change returned data.\\n        (int256 newAnswer, uint256 newTimestamp) = internalLatestData();\\n        require(currentAnswer == newAnswer && currentTimestamp == newTimestamp, \\\"Must unlock first\\\");\\n\\n        emit LockWindowSet(newLockWindow);\\n    }\\n\\n    /**\\n     * @notice Enables the owner to set the maxTraversal.\\n     * @param newMaxTraversal The maxTraversal to set.\\n     */\\n    function setMaxTraversal(uint256 newMaxTraversal) public onlyOwner {\\n        maxTraversal_ = newMaxTraversal;\\n\\n        emit MaxTraversalSet(newMaxTraversal);\\n    }\\n\\n    /**\\n     * @notice Time window that bounds how long the permissioned actor has to call the unlockLatestValue function after\\n     * a new source update is posted. If the permissioned actor does not call unlockLatestValue within this window of a\\n     * new source price, the latest value will be made available to everyone without going through an MEV-Share auction.\\n     * @return lockWindow time in seconds.\\n     */\\n    function lockWindow() public view override returns (uint256) {\\n        return lockWindow_;\\n    }\\n\\n    /**\\n     * @notice Max number of historical source updates to traverse when looking for a historic value in the past.\\n     * @return maxTraversal max number of historical source updates to traverse.\\n     */\\n    function maxTraversal() public view override returns (uint256) {\\n        return maxTraversal_;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/adapters/destination-adapters/ChainlinkDestinationAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {DecimalLib} from \\\"../lib/DecimalLib.sol\\\";\\nimport {IAggregatorV3} from \\\"../../interfaces/chainlink/IAggregatorV3.sol\\\";\\nimport {DiamondRootOevShare} from \\\"../../DiamondRootOevShare.sol\\\";\\n\\n/**\\n * @title ChainlinkDestinationAdapter contract to expose OEVShare data via the standard Chainlink Aggregator interface.\\n */\\n\\nabstract contract ChainlinkDestinationAdapter is DiamondRootOevShare, IAggregatorV3 {\\n    uint8 public immutable override decimals;\\n\\n    event DecimalsSet(uint8 indexed decimals);\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n\\n        emit DecimalsSet(_decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the latest data from the source.\\n     * @return answer The latest answer in the configured number of decimals.\\n     */\\n    function latestAnswer() public view override returns (int256) {\\n        (int256 answer,) = internalLatestData();\\n        return DecimalLib.convertDecimals(answer, 18, decimals);\\n    }\\n\\n    /**\\n     * @notice Returns when the latest answer was updated.\\n     * @return timestamp The timestamp of the latest answer.\\n     */\\n    function latestTimestamp() public view override returns (uint256) {\\n        (, uint256 timestamp) = internalLatestData();\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns an approximate form of the latest Round data. This does not implement the notion of \\\"roundId\\\" that\\n     * the normal chainlink aggregator does and returns hardcoded values for those fields.\\n     * @return roundId The roundId of the latest answer, hardcoded to 1.\\n     * @return answer The latest answer in the configured number of decimals.\\n     * @return startedAt The timestamp when the value was updated.\\n     * @return updatedAt The timestamp when the value was updated.\\n     * @return answeredInRound The roundId of the round in which the answer was computed, hardcoded to 1.\\n     */\\n    function latestRoundData() external view returns (uint80, int256, uint256, uint256, uint80) {\\n        (int256 answer, uint256 updatedAt) = internalLatestData();\\n        return (1, DecimalLib.convertDecimals(answer, 18, decimals), updatedAt, updatedAt, 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/interfaces/chainlink/IAggregatorV3Source.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IAggregatorV3Source {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/interfaces/chronicle/IMedian.sol\": {\r\n      \"content\": \"pragma solidity 0.8.17;\\n\\ninterface IMedian {\\n    function age() external view returns (uint32); // Last update timestamp\\n\\n    function read() external view returns (uint256); // Latest price feed value (reverted if not valid)\\n\\n    function peek() external view returns (uint256, bool); // Latest price feed value and validity\\n\\n    // Other Median functions we don't need.\\n    // function wards(address) external view returns (uint256); // Authorized owners\\n\\n    // function rely(address) external; // Add authorized owner\\n\\n    // function deny(address) external; // Remove authorized owner\\n\\n    // function wat() external view returns (bytes32); // Price feed identifier\\n\\n    // function bar() external view returns (uint256); // Minimum number of oracles\\n\\n    // function orcl(address) external view returns (uint256); // Authorized oracles\\n\\n    // function bud(address) external view returns (uint256); // Whitelisted contracts to read price feed\\n\\n    // function slot(uint8) external view returns (address); // Mapping for at most 256 oracles\\n\\n    // function poke(\\n    //     uint256[] calldata,\\n    //     uint256[] calldata,\\n    //     uint8[] calldata,\\n    //     bytes32[] calldata,\\n    //     bytes32[] calldata\\n    // ) external; // Update price feed values\\n\\n    // function lift(address[] calldata) external; // Add oracles\\n\\n    // function drop(address[] calldata) external; // Remove oracles\\n\\n    // function setBar(uint256) external; // Set minimum number of oracles\\n\\n    function kiss(address) external; // Add contract to whitelist\\n\\n    // function diss(address) external; // Remove contract from whitelist\\n\\n    // function kiss(address[] calldata) external; // Add contracts to whitelist\\n\\n    // function diss(address[] calldata) external; // Remove contracts from whitelist\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/interfaces/pyth/IPyth.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.17;\\n\\ninterface IPyth {\\n    struct Price {\\n        int64 price; // Price\\n        uint64 conf; // Confidence interval around the price\\n        int32 expo; // Price exponent\\n        uint256 publishTime; // Unix timestamp describing when the price was published\\n    }\\n\\n    function getPriceUnsafe(bytes32 id) external view returns (Price memory price);\\n    function getPrice(bytes32 id) external view returns (Price memory price);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/adapters/source-adapters/ChainlinkSourceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {DecimalLib} from \\\"../lib/DecimalLib.sol\\\";\\nimport {IAggregatorV3Source} from \\\"../../interfaces/chainlink/IAggregatorV3Source.sol\\\";\\nimport {DiamondRootOevShare} from \\\"../../DiamondRootOevShare.sol\\\";\\n\\n/**\\n * @title ChainlinkSourceAdapter contract to read data from Chainlink aggregator and standardize it for the OEV.\\n * @dev Can fetch information from Chainlink source at a desired timestamp for historic lookups.\\n */\\n\\nabstract contract ChainlinkSourceAdapter is DiamondRootOevShare {\\n    IAggregatorV3Source public immutable CHAINLINK_SOURCE;\\n    uint8 private immutable SOURCE_DECIMALS;\\n\\n    // As per Chainlink documentation https://docs.chain.link/data-feeds/historical-data#roundid-in-proxy\\n    // roundId on the aggregator proxy is comprised of phaseId (higher 16 bits) and roundId from phase aggregator\\n    // (lower 64 bits). PHASE_MASK is used to calculate first roundId of current phase aggregator.\\n    uint80 private constant PHASE_MASK = uint80(0xFFFF) << 64;\\n\\n    event SourceSet(address indexed sourceOracle, uint8 indexed sourceDecimals);\\n\\n    constructor(IAggregatorV3Source source) {\\n        CHAINLINK_SOURCE = source;\\n        SOURCE_DECIMALS = source.decimals();\\n\\n        emit SourceSet(address(source), SOURCE_DECIMALS);\\n    }\\n\\n    /**\\n     * @notice Tries getting latest data as of requested timestamp. If this is not possible, returns the earliest data\\n     * available past the requested timestamp within provided traversal limitations.\\n     * @param timestamp The timestamp to try getting latest data at.\\n     * @param maxTraversal The maximum number of rounds to traverse when looking for historical data.\\n     * @return answer The answer as of requested timestamp, or earliest available data if not available, in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function tryLatestDataAt(uint256 timestamp, uint256 maxTraversal)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (int256, uint256)\\n    {\\n        (int256 answer, uint256 updatedAt) = _tryLatestRoundDataAt(timestamp, maxTraversal);\\n        return (DecimalLib.convertDecimals(answer, SOURCE_DECIMALS, 18), updatedAt);\\n    }\\n\\n    /**\\n     * @notice Initiate a snapshot of the source data. This is a no-op for Chainlink.\\n     */\\n    function snapshotData() public virtual override {}\\n\\n    /**\\n     * @notice Returns the latest data from the source.\\n     * @return answer The latest answer in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function getLatestSourceData() public view virtual override returns (int256, uint256) {\\n        (, int256 sourceAnswer,, uint256 updatedAt,) = CHAINLINK_SOURCE.latestRoundData();\\n        return (DecimalLib.convertDecimals(sourceAnswer, SOURCE_DECIMALS, 18), updatedAt);\\n    }\\n\\n    // Tries getting latest data as of requested timestamp. If this is not possible, returns the earliest data available\\n    // past the requested timestamp considering the maxTraversal limitations.\\n    function _tryLatestRoundDataAt(uint256 timestamp, uint256 maxTraversal) internal view returns (int256, uint256) {\\n        (uint80 roundId, int256 answer,, uint256 updatedAt,) = CHAINLINK_SOURCE.latestRoundData();\\n\\n        // In the happy path there have been no source updates since requested time, so we can return the latest data.\\n        // We can use updatedAt property as it matches the block timestamp of the latest source transmission.\\n        if (updatedAt <= timestamp) return (answer, updatedAt);\\n\\n        // Attempt traversing historical round data backwards from roundId. This might still be newer or uninitialized.\\n        (int256 historicalAnswer, uint256 historicalUpdatedAt) = _searchRoundDataAt(timestamp, roundId, maxTraversal);\\n\\n        // Validate returned data. If it is uninitialized we fallback to returning the current latest round data.\\n        if (historicalUpdatedAt > 0) return (historicalAnswer, historicalUpdatedAt);\\n        return (answer, updatedAt);\\n    }\\n\\n    // Tries finding latest historical data (ignoring current roundId) not newer than requested timestamp. Might return\\n    // newer data than requested if exceeds traversal or hold uninitialized data that should be handled by the caller.\\n    function _searchRoundDataAt(uint256 timestamp, uint80 targetRoundId, uint256 maxTraversal)\\n        internal\\n        view\\n        returns (int256, uint256)\\n    {\\n        uint80 roundId;\\n        int256 answer;\\n        uint256 updatedAt;\\n        uint80 traversedRounds = 0;\\n        uint80 startRoundId = (targetRoundId & PHASE_MASK) + 1; // Phase aggregators are starting at round 1.\\n\\n        while (traversedRounds < uint80(maxTraversal) && targetRoundId > startRoundId) {\\n            targetRoundId--; // We started from latest roundId that should be ignored.\\n            // The aggregator proxy does not keep track when its phase aggregators got switched. This means that we can\\n            // only traverse rounds of the current phase aggregator. When phase aggregators are switched there is\\n            // normally an overlap period when both new and old phase aggregators receive updates. Without knowing exact\\n            // time when the aggregator proxy switched them we might end up returning historical data from the new phase\\n            // aggregator that was not yet available on the aggregator proxy at the requested timestamp.\\n\\n            (roundId, answer,, updatedAt,) = CHAINLINK_SOURCE.getRoundData(targetRoundId);\\n            if (!(roundId == targetRoundId && updatedAt > 0)) return (0, 0);\\n            if (updatedAt <= timestamp) return (answer, updatedAt);\\n            traversedRounds++;\\n        }\\n\\n        return (answer, updatedAt); // Did not find requested round. Return earliest round or uninitialized data.\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/adapters/source-adapters/ChronicleMedianSourceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {SnapshotSource} from \\\"./SnapshotSource.sol\\\";\\nimport {IMedian} from \\\"../../interfaces/chronicle/IMedian.sol\\\";\\nimport {SafeCast} from \\\"openzeppelin-contracts/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title ChronicleMedianSourceAdapter contract to read data from Chronicle and standardize it for the OEV.\\n */\\n\\nabstract contract ChronicleMedianSourceAdapter is SnapshotSource {\\n    IMedian public immutable CHRONICLE_SOURCE;\\n\\n    event SourceSet(address indexed sourceOracle);\\n\\n    constructor(IMedian _chronicleSource) {\\n        CHRONICLE_SOURCE = _chronicleSource;\\n\\n        emit SourceSet(address(_chronicleSource));\\n    }\\n\\n    /**\\n     * @notice Returns the latest data from the source.\\n     * @dev The standard chronicle implementation will revert if the latest answer is not valid when calling the read\\n     * function. Additionally, chronicle returns the answer in 18 decimals, so no conversion is needed.\\n     * @return answer The latest answer in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function getLatestSourceData() public view virtual override returns (int256, uint256) {\\n        return (SafeCast.toInt256(CHRONICLE_SOURCE.read()), CHRONICLE_SOURCE.age());\\n    }\\n\\n    /**\\n     * @notice Tries getting latest data as of requested timestamp. If this is not possible, returns the earliest data\\n     * available past the requested timestamp within provided traversal limitations.\\n     * @dev Chronicle does not support historical lookups so this uses SnapshotSource to get historic data.\\n     * @param timestamp The timestamp to try getting latest data at.\\n     * @param maxTraversal The maximum number of rounds to traverse when looking for historical data.\\n     * @return answer The answer as of requested timestamp, or earliest available data if not available, in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function tryLatestDataAt(uint256 timestamp, uint256 maxTraversal)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (int256, uint256)\\n    {\\n        Snapshot memory snapshot = _tryLatestDataAt(timestamp, maxTraversal);\\n        return (snapshot.answer, snapshot.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/adapters/source-adapters/PythSourceAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {IPyth} from \\\"../../interfaces/pyth/IPyth.sol\\\";\\nimport {SnapshotSource} from \\\"./SnapshotSource.sol\\\";\\nimport {DecimalLib} from \\\"../lib/DecimalLib.sol\\\";\\n\\n/**\\n * @title PythSourceAdapter contract to read data from Pyth and standardize it for the OEV.\\n */\\n\\nabstract contract PythSourceAdapter is SnapshotSource {\\n    IPyth public immutable PYTH_SOURCE;\\n    bytes32 public immutable PYTH_PRICE_ID;\\n\\n    event SourceSet(address indexed sourceOracle, bytes32 indexed pythPriceId);\\n\\n    constructor(IPyth _pyth, bytes32 _pythPriceId) {\\n        PYTH_SOURCE = _pyth;\\n        PYTH_PRICE_ID = _pythPriceId;\\n\\n        emit SourceSet(address(_pyth), _pythPriceId);\\n    }\\n\\n    /**\\n     * @notice Returns the latest data from the source.\\n     * @return answer The latest answer in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function getLatestSourceData() public view virtual override returns (int256, uint256) {\\n        IPyth.Price memory pythPrice = PYTH_SOURCE.getPriceUnsafe(PYTH_PRICE_ID);\\n        return (_convertDecimalsWithExponent(pythPrice.price, pythPrice.expo), pythPrice.publishTime);\\n    }\\n\\n    /**\\n     * @notice Tries getting latest data as of requested timestamp. If this is not possible, returns the earliest data\\n     * available past the requested timestamp within provided traversal limitations.\\n     * @dev Pyth does not support historical lookups so this uses SnapshotSource to get historic data.\\n     * @param timestamp The timestamp to try getting latest data at.\\n     * @param maxTraversal The maximum number of rounds to traverse when looking for historical data.\\n     * @return answer The answer as of requested timestamp, or earliest available data if not available, in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function tryLatestDataAt(uint256 timestamp, uint256 maxTraversal)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (int256, uint256)\\n    {\\n        Snapshot memory snapshot = _tryLatestDataAt(timestamp, maxTraversal);\\n        return (snapshot.answer, snapshot.timestamp);\\n    }\\n\\n    // Handle a per-price \\\"expo\\\" (decimal) value from pyth.\\n    function _convertDecimalsWithExponent(int256 answer, int32 expo) internal pure returns (int256) {\\n        // Expo is pyth's way of expressing decimals. -18 is equivalent to 18 decimals. -5 is equivalent to 5.\\n        if (expo <= 0) return DecimalLib.convertDecimals(answer, uint8(uint32(-expo)), 18);\\n        // Add the _decimals and expo in the case that expo is positive since it means that the fixed point number is\\n        // _smaller_ than the true value. This case may never be hit, it seems preferable to reverting.\\n        else return DecimalLib.convertDecimals(answer, 0, 18 + uint8(uint32(expo)));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/adapters/source-adapters/SnapshotSource.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {DiamondRootOevShare} from \\\"../../DiamondRootOevShare.sol\\\";\\n\\n/**\\n * @title SnapshotSource contract to be used in conjunction with a source adapter that needs to snapshot historic data.\\n */\\n\\nabstract contract SnapshotSource is DiamondRootOevShare {\\n    // Snapshot records the historical answer at a specific timestamp.\\n    struct Snapshot {\\n        int256 answer;\\n        uint256 timestamp;\\n    }\\n\\n    Snapshot[] public snapshots; // Historical answer and timestamp snapshots.\\n\\n    event SnapshotTaken(uint256 snapshotIndex, uint256 indexed timestamp, int256 indexed answer);\\n\\n    /**\\n     * @notice Returns the latest snapshot data.\\n     * @return Snapshot The latest snapshot data.\\n     */\\n    function latestSnapshotData() public view returns (Snapshot memory) {\\n        if (snapshots.length > 0) return snapshots[snapshots.length - 1];\\n        return Snapshot(0, 0);\\n    }\\n\\n    /**\\n     * @notice Snapshot the current source data.\\n     */\\n    function snapshotData() public virtual override {\\n        (int256 answer, uint256 timestamp) = getLatestSourceData();\\n        Snapshot memory snapshot = Snapshot(answer, timestamp);\\n        if (snapshot.timestamp == 0) return; // Should not store invalid data.\\n\\n        // We expect source timestamps to be increasing over time, but there is little we can do to recover if source\\n        // timestamp decreased: we don't know if such decreased value is wrong or there was an issue with prior source\\n        // value. We can only detect an update in source if its timestamp is different from the last recorded snapshot.\\n        uint256 snapshotIndex = snapshots.length;\\n        if (snapshotIndex > 0 && snapshots[snapshotIndex - 1].timestamp == snapshot.timestamp) return;\\n\\n        snapshots.push(snapshot);\\n\\n        emit SnapshotTaken(snapshotIndex, snapshot.timestamp, snapshot.answer);\\n    }\\n\\n    function _tryLatestDataAt(uint256 timestamp, uint256 maxTraversal) internal view returns (Snapshot memory) {\\n        (int256 answer, uint256 _timestamp) = getLatestSourceData();\\n        Snapshot memory latestData = Snapshot(answer, _timestamp);\\n        // In the happy path there have been no source updates since requested time, so we can return the latest data.\\n        // We can use timestamp property as it matches the block timestamp of the latest source update.\\n        if (latestData.timestamp <= timestamp) return latestData;\\n\\n        // Attempt traversing historical snapshot data. This might still be newer or uninitialized.\\n        Snapshot memory historicalData = _searchSnapshotAt(timestamp, maxTraversal);\\n\\n        // Validate returned data. If it is uninitialized we fallback to returning the current latest round data.\\n        if (historicalData.timestamp > 0) return historicalData;\\n        return latestData;\\n    }\\n\\n    // Tries finding latest snapshotted data not newer than requested timestamp. Might still return newer data than\\n    // requested if exceeded traversal or hold uninitialized data that should be handled by the caller.\\n    function _searchSnapshotAt(uint256 timestamp, uint256 maxTraversal) internal view returns (Snapshot memory) {\\n        Snapshot memory snapshot;\\n        uint256 traversedSnapshots = 0;\\n        uint256 snapshotId = snapshots.length; // Will decrement when entering loop.\\n\\n        while (traversedSnapshots < maxTraversal && snapshotId > 0) {\\n            snapshotId--; // We started from snapshots.length and we only loop if snapshotId > 0, so this is safe.\\n            snapshot = snapshots[snapshotId];\\n            if (snapshot.timestamp <= timestamp) return snapshot;\\n            traversedSnapshots++;\\n        }\\n\\n        // We did not find requested snapshot. This will hold the earliest available snapshot or uninitialized data.\\n        return snapshot;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/OevShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {Math} from \\\"openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\nimport {DiamondRootOevShare} from \\\"./DiamondRootOevShare.sol\\\";\\n\\n/**\\n * @title OEVShare contract to provide permissioned updating at the execution of an MEV-share auction.\\n * @dev This contract works by conditionally returning a stale value oracle price from the source adapter until a\\n * permissioned actor calls the unlockLatestValue function. The call to unlockLatestValue is submitted via an MEV-share\\n * auction and will be backrun by the winner of the auction. The backrunner has access to the most recent newly unlocked\\n * source price. If someone tries to front-run the call to unlockLatestValue, the caller will receive a stale value. If\\n * the permissioned actor does not call unlockLatestValue within the lockWindow, the latest value that is at least\\n * lockWindow seconds old will be returned. This contract is intended to be used in conjunction with a Controller\\n * contract that governs who can call unlockLatestValue.\\n * @custom:security-contact bugs@umaproject.org\\n */\\n\\nabstract contract OevShare is DiamondRootOevShare {\\n    uint256 public lastUnlockTime; // Timestamp of the latest unlock to the OEVShare.\\n\\n    /**\\n     * @notice Function called by permissioned actor to unlock the latest value as part of the MEV-share auction flow.\\n     * @dev The call to this function is expected to be sent to flashbots via eth_sendPrivateTransaction. This is the\\n     * transaction that is backrun by the winner of the auction. The backrunner has access to the most recent newly\\n     * unlocked source price as a result and therefore can extract the MEV associated with the unlock.\\n     */\\n    function unlockLatestValue() public {\\n        require(canUnlock(msg.sender, lastUnlockTime), \\\"Controller blocked: canUnlock\\\");\\n\\n        snapshotData(); // If the source connected to this OevShare needs to snapshot data, do it here. Else, no op.\\n\\n        lastUnlockTime = block.timestamp;\\n\\n        emit LatestValueUnlocked(block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Returns latest data from source, governed by lockWindow controlling if returned data is stale.\\n     * @return answer The latest answer in 18 decimals.\\n     * @return timestamp The timestamp of the answer.\\n     */\\n    function internalLatestData() public view override returns (int256, uint256) {\\n        // Case work:\\n        //-> If unlockLatestValue has been called within lockWindow, then return most recent price as of unlockLatestValue call.\\n        //-> If unlockLatestValue has not been called in lockWindow, then return most recent value that is at least lockWindow old.\\n        return tryLatestDataAt(Math.max(lastUnlockTime, block.timestamp - lockWindow()), maxTraversal());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/adapters/lib/DecimalLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {Math} from \\\"openzeppelin-contracts/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title DecimalLib library to perform decimal math operations.\\n */\\nlibrary DecimalLib {\\n    /**\\n     * Converts int256 answer scaled at iDecimals to scale at oDecimals.\\n     * Source oracle adapters should pass 18 for oDecimals, while destination adapters should pass 18 for iDecimals.\\n     * Warning: When downscaling (i.e., when iDecimals > oDecimals), the conversion can lead to a loss of precision.\\n     * In the worst case, if the answer is small enough, the conversion can return zero.\\n     * Warning: When upscaling (i.e., when iDecimals < oDecimals), if answer * 10^(oDecimals - iDecimals) exceeds\\n     * the maximum int256 value, this function will revert. Ensure the provided values will not cause an overflow.\\n     */\\n    function convertDecimals(int256 answer, uint8 iDecimals, uint8 oDecimals) internal pure returns (int256) {\\n        if (iDecimals == oDecimals) return answer;\\n        if (iDecimals < oDecimals) return answer * int256(10 ** (oDecimals - iDecimals));\\n        return answer / int256(10 ** (iDecimals - oDecimals));\\n    }\\n\\n    /**\\n     * Converts uint256 answer scaled at iDecimals to scale at oDecimals.\\n     * Source oracle adapters should pass 18 for oDecimals, while destination adapters should pass 18 for iDecimals.\\n     * Warning: When downscaling (i.e., when iDecimals > oDecimals), the conversion can lead to a loss of precision.\\n     * In the worst case, if the answer is small enough, the conversion can return zero.\\n     * Warning: When upscaling (i.e., when iDecimals < oDecimals), if answer * 10^(oDecimals - iDecimals) exceeds\\n     * the maximum uint256 value, this function will revert. Ensure the provided values will not cause an overflow.\\n     */\\n    function convertDecimals(uint256 answer, uint8 iDecimals, uint8 oDecimals) internal pure returns (uint256) {\\n        if (iDecimals == oDecimals) return answer;\\n        if (iDecimals < oDecimals) return answer * 10 ** (oDecimals - iDecimals);\\n        return answer / 10 ** (iDecimals - oDecimals);\\n    }\\n\\n    // Derives token decimals from its scaling factor.\\n    function deriveDecimals(uint256 scalingFactor) internal pure returns (uint8) {\\n        uint256 decimals = Math.log10(scalingFactor);\\n\\n        // Verify that the inverse operation yields the expected result.\\n        require(10 ** decimals == scalingFactor, \\\"Invalid scalingFactor\\\");\\n\\n        // Note: decimals must fit within uint8 because:\\n        // 2^8 = 256, which is uint8 max.\\n        // This would imply an input scaling factor of 1e256. The max value of uint256 is \\\\(2^{256} - 1\\\\), which is approximately\\n        // 1.2e77, but not equal to 1e256. Therefore, decimals will always fit within uint8 or the check above will fail.\\n        return uint8(decimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/interfaces/chainlink/IAggregatorV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IAggregatorV3 {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    // Other Chainlink functions we don't need.\\n\\n    // function latestRound() external view returns (uint256);\\n\\n    // function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    // function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    // function description() external view returns (string memory);\\n\\n    // function version() external view returns (uint256);\\n\\n    // function getRoundData(uint80 _roundId)\\n    //     external\\n    //     view\\n    //     returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    // event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n    // event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/DiamondRootOevShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\nimport {IBaseOracleAdapter} from \\\"./interfaces/IBaseOracleAdapter.sol\\\";\\nimport {IBaseController} from \\\"./interfaces/IBaseController.sol\\\";\\nimport {IOevShare} from \\\"./interfaces/IOevShare.sol\\\";\\n\\n/**\\n * @title DiamondRootOevShare contract to provide base functions that the three components of the OEV contract system\\n * need. They are exposed here to simplify the inheritance structure of the OEV contract system and to enable easier\\n * composability and extensibility at the integration layer, enabling arbitrary combinations of sources and destinations.\\n */\\n\\nabstract contract DiamondRootOevShare is IBaseController, IOevShare, IBaseOracleAdapter {\\n    /**\\n     * @notice Returns the latest data from the source.\\n     * @return answer The latest answer in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function getLatestSourceData() public view virtual returns (int256, uint256);\\n\\n    /**\\n     * @notice Tries getting latest data as of requested timestamp. If this is not possible, returns the earliest data\\n     * available past the requested timestamp within provided traversal limitations.\\n     * @param timestamp The timestamp to try getting latest data at.\\n     * @param maxTraversal The maximum number of rounds to traverse when looking for historical data.\\n     * @return answer The answer as of requested timestamp, or earliest available data if not available, in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function tryLatestDataAt(uint256 timestamp, uint256 maxTraversal) public view virtual returns (int256, uint256);\\n\\n    /**\\n     * @notice Returns the latest data from the source. Depending on when the OEVShare was last unlocked this might\\n     * return an slightly stale value to protect the OEV from being stolen by a front runner.\\n     * @return answer The latest answer in 18 decimals.\\n     * @return updatedAt The timestamp of the answer.\\n     */\\n    function internalLatestData() public view virtual returns (int256, uint256);\\n\\n    /**\\n     * @notice Snapshot the current source data. Is a no-op if the source does not require snapshotting.\\n     */\\n    function snapshotData() public virtual;\\n\\n    /**\\n     * @notice Permissioning function to control who can unlock the OEVShare.\\n     */\\n    function canUnlock(address caller, uint256 cachedLatestTimestamp) public view virtual returns (bool);\\n\\n    /**\\n     * @notice Time window that bounds how long the permissioned actor has to call the unlockLatestValue function after\\n     * a new source update is posted. If the permissioned actor does not call unlockLatestValue within this window of a\\n     * new source price, the latest value will be made available to everyone without going through an MEV-Share auction.\\n     * @return lockWindow time in seconds.\\n     */\\n    function lockWindow() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Max number of historical source updates to traverse when looking for a historic value in the past.\\n     * @return maxTraversal max number of historical source updates to traverse.\\n     */\\n    function maxTraversal() public view virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/interfaces/IBaseOracleAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IBaseOracleAdapter {\\n    function tryLatestDataAt(uint256 _timestamp, uint256 _maxTraversal)\\n        external\\n        view\\n        returns (int256 answer, uint256 timestamp);\\n\\n    function getLatestSourceData() external view returns (int256 answer, uint256 timestamp);\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/interfaces/IBaseController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IBaseController {\\n    event LockWindowSet(uint256 indexed lockWindow);\\n    event MaxTraversalSet(uint256 indexed maxTraversal);\\n    event UnlockerSet(address indexed unlocker, bool indexed allowed);\\n\\n    function canUnlock(address caller, uint256 cachedLatestTimestamp) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/oev-contracts/src/interfaces/IOevShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.17;\\n\\ninterface IOevShare {\\n    event LatestValueUnlocked(uint256 indexed timestamp);\\n\\n    function internalLatestData() external view returns (int256 answer, uint256 timestamp);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"oev-contracts/=lib/oev-contracts/src/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"chainlinkSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"chronicleSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pythSource\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pythPriceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"DecimalsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LatestValueUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lockWindow\",\"type\":\"uint256\"}],\"name\":\"LockWindowSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxTraversal\",\"type\":\"uint256\"}],\"name\":\"MaxTraversalSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"snapshotIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"name\":\"SnapshotTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pythPriceId\",\"type\":\"bytes32\"}],\"name\":\"SourceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceOracle\",\"type\":\"address\"}],\"name\":\"SourceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"sourceDecimals\",\"type\":\"uint8\"}],\"name\":\"SourceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"UnlockerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOUNDING_TOLERANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_SOURCE\",\"outputs\":[{\"internalType\":\"contract IAggregatorV3Source\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHRONICLE_SOURCE\",\"outputs\":[{\"internalType\":\"contract IMedian\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PYTH_PRICE_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PYTH_SOURCE\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lastUnlockTime\",\"type\":\"uint256\"}],\"name\":\"canUnlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSourceData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"internalLatestData\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSnapshotData\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct SnapshotSource.Snapshot\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTraversal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockWindow\",\"type\":\"uint256\"}],\"name\":\"setLockWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTraversal\",\"type\":\"uint256\"}],\"name\":\"setMaxTraversal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setUnlocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"snapshots\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTraversal\",\"type\":\"uint256\"}],\"name\":\"tryLatestDataAt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockLatestValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HoneyPotOEVShare", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000008377bc9a1aab568783d9385b42225712233837530000000000000000000000004305fb66699c3b2702d4d05cf36551390a4c69c6ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000000000000000000000000000000000000000000000000000000000000008", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}