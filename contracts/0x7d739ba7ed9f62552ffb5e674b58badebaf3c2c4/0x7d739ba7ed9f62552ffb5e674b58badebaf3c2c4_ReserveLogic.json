{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDebtToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {ILendPoolAddressesProvider} from \\\"../interfaces/ILendPoolAddressesProvider.sol\\\";\\r\\nimport {IIncentivesController} from \\\"./IIncentivesController.sol\\\";\\r\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IDebtToken\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Defines the basic interface for a debt token.\\r\\n **/\\r\\ninterface IDebtToken is IScaledBalanceToken, IERC20Upgradeable, IERC20MetadataUpgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when a debt token is initialized\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param pool The address of the associated lend pool\\r\\n   * @param incentivesController The address of the incentives controller\\r\\n   * @param debtTokenDecimals the decimals of the debt token\\r\\n   * @param debtTokenName the name of the debt token\\r\\n   * @param debtTokenSymbol the symbol of the debt token\\r\\n   **/\\r\\n  event Initialized(\\r\\n    address indexed underlyingAsset,\\r\\n    address indexed pool,\\r\\n    address incentivesController,\\r\\n    uint8 debtTokenDecimals,\\r\\n    string debtTokenName,\\r\\n    string debtTokenSymbol\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the debt token.\\r\\n   * @param addressProvider The address of the lend pool\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\r\\n   * @param debtTokenName The name of the token\\r\\n   * @param debtTokenSymbol The symbol of the token\\r\\n   */\\r\\n  function initialize(\\r\\n    ILendPoolAddressesProvider addressProvider,\\r\\n    address underlyingAsset,\\r\\n    uint8 debtTokenDecimals,\\r\\n    string memory debtTokenName,\\r\\n    string memory debtTokenSymbol\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param from The address performing the mint\\r\\n   * @param value The amount to be minted\\r\\n   * @param index The last index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed from, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after setting of addresses as debt token managers\\r\\n   * @param debtTokenManagers the addresses to be updated\\r\\n   * @param flag `true` to set addresses as managers, `false` otherwise\\r\\n   **/\\r\\n  event TokenManagersUpdated(address[] indexed debtTokenManagers, bool flag);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints debt token to the `user` address\\r\\n   * @param user The address receiving the borrowed underlying\\r\\n   * @param onBehalfOf The beneficiary of the mint\\r\\n   * @param amount The amount of debt being minted\\r\\n   * @param index The variable debt index of the reserve\\r\\n   * @return `true` if the the previous balance of the user is 0\\r\\n   **/\\r\\n  function mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when variable debt is burnt\\r\\n   * @param user The user which debt has been burned\\r\\n   * @param amount The amount of debt being burned\\r\\n   * @param index The index of the user\\r\\n   **/\\r\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Burns user variable debt\\r\\n   * @param user The user which debt is burnt\\r\\n   * @param amount The amount to be burnt\\r\\n   * @param index The variable debt index of the reserve\\r\\n   **/\\r\\n  function burn(address user, uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the incentives controller contract\\r\\n   **/\\r\\n  function getIncentivesController() external view returns (IIncentivesController);\\r\\n\\r\\n  /**\\r\\n   * @dev delegates borrowing power to a user on the specific debt token\\r\\n   * @param delegatee the address receiving the delegated borrowing power\\r\\n   * @param amount the maximum amount being delegated. Delegation will still\\r\\n   * respect the liquidation constraints (even if delegated, a delegatee cannot\\r\\n   * force a delegator HF to go below 1)\\r\\n   **/\\r\\n  function approveDelegation(address delegatee, uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the borrow allowance of the user\\r\\n   * @param fromUser The user to giving allowance\\r\\n   * @param toUser The user to give allowance to\\r\\n   * @return the current allowance of toUser\\r\\n   **/\\r\\n  function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Updates allowed addresses to be debt token managers\\r\\n   * @param debtTokenManagers array with addresses to be updated\\r\\n   * @param flag `true` to set as manager, `false` to unset as manager\\r\\n   **/\\r\\n  function updateTokenManagers(address[] calldata debtTokenManagers, bool flag) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IIncentivesController {\\n  /**\\n   * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n   * @param asset The address of the user\\n   * @param totalSupply The total supply of the asset in the lending pool\\n   * @param userBalance The balance of the user of the asset in the lending pool\\n   **/\\n  function handleAction(\\n    address asset,\\n    uint256 totalSupply,\\n    uint256 userBalance\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title IInterestRate interface\\r\\n * @dev Interface for the calculation of the interest rates\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n */\\r\\ninterface IInterestRate {\\r\\n  /**\\r\\n   * @dev Get the variable borrow rate\\r\\n   * @return the base variable borrow rate\\r\\n   **/\\r\\n  function baseVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Get the maximum variable borrow rate\\r\\n   * @return the maximum variable borrow rate\\r\\n   **/\\r\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the interest rates depending on the reserve's state and configurations\\r\\n   * @param reserve The address of the reserve\\r\\n   * @param availableLiquidity The available liquidity for the reserve\\r\\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\r\\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\r\\n   **/\\r\\n  function calculateInterestRates(\\r\\n    address reserve,\\r\\n    uint256 availableLiquidity,\\r\\n    uint256 totalVariableDebt,\\r\\n    uint256 reserveFactor\\r\\n  ) external view returns (uint256, uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the interest rates depending on the reserve's state and configurations\\r\\n   * @param reserve The address of the reserve\\r\\n   * @param uToken The uToken address\\r\\n   * @param liquidityAdded The liquidity added during the operation\\r\\n   * @param liquidityTaken The liquidity taken during the operation\\r\\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\r\\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\r\\n   **/\\r\\n  function calculateInterestRates(\\r\\n    address reserve,\\r\\n    address uToken,\\r\\n    uint256 liquidityAdded,\\r\\n    uint256 liquidityTaken,\\r\\n    uint256 totalVariableDebt,\\r\\n    uint256 reserveFactor\\r\\n  ) external view returns (uint256 liquidityRate, uint256 variableBorrowRate);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/ILendPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title LendPoolAddressesProvider contract\\r\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\r\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\r\\n * - Owned by the Unlockd Governance\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n **/\\r\\ninterface ILendPoolAddressesProvider {\\r\\n  event MarketIdSet(string newMarketId);\\r\\n  event LendPoolUpdated(address indexed newAddress, bytes encodedCallData);\\r\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\r\\n  event EmergencyAdminUpdated(address indexed newAddress);\\r\\n  event LendPoolConfiguratorUpdated(address indexed newAddress, bytes encodedCallData);\\r\\n  event ReserveOracleUpdated(address indexed newAddress);\\r\\n  event NftOracleUpdated(address indexed newAddress);\\r\\n  event LendPoolLoanUpdated(address indexed newAddress, bytes encodedCallData);\\r\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\r\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy, bytes encodedCallData);\\r\\n  event UNFTRegistryUpdated(address indexed newAddress);\\r\\n  event IncentivesControllerUpdated(address indexed newAddress);\\r\\n  event UIDataProviderUpdated(address indexed newAddress);\\r\\n  event UnlockdDataProviderUpdated(address indexed newAddress);\\r\\n  event WalletBalanceProviderUpdated(address indexed newAddress);\\r\\n  event LendPoolLiquidatorUpdated(address indexed newAddress);\\r\\n  event LtvManagerUpdated(address indexed newAddress);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the id of the Unlockd market to which this contracts points to\\r\\n   * @return The market id\\r\\n   **/\\r\\n  function getMarketId() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Allows to set the market which this LendPoolAddressesProvider represents\\r\\n   * @param marketId The market id\\r\\n   */\\r\\n  function setMarketId(string calldata marketId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets an address for an id replacing the address saved in the addresses map\\r\\n   * IMPORTANT Use this function carefully, as it will do a hard replacement\\r\\n   * @param id The id\\r\\n   * @param newAddress The address to set\\r\\n   */\\r\\n  function setAddress(bytes32 id, address newAddress) external;\\r\\n\\r\\n  /**\\r\\n   * @dev General function to update the implementation of a proxy registered with\\r\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\r\\n   * set as implementation the `implementationAddress`\\r\\n   * IMPORTANT Use this function carefully, only for ids that don't have an explicit\\r\\n   * setter function, in order to avoid unexpected consequences\\r\\n   * @param id The id\\r\\n   * @param impl The address of the new implementation\\r\\n   */\\r\\n  function setAddressAsProxy(bytes32 id, address impl, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an address by id\\r\\n   * @return The address\\r\\n   */\\r\\n  function getAddress(bytes32 id) external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the LendPool proxy\\r\\n   * @return The LendPool proxy address\\r\\n   **/\\r\\n  function getLendPool() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the implementation of the LendPool, or creates the proxy\\r\\n   * setting the new `pool` implementation on the first time calling it\\r\\n   * @param pool The new LendPool implementation\\r\\n   * @param encodedCallData calldata to execute\\r\\n   **/\\r\\n  function setLendPoolImpl(address pool, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the LendPoolConfigurator proxy\\r\\n   * @return The LendPoolConfigurator proxy address\\r\\n   **/\\r\\n  function getLendPoolConfigurator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the implementation of the LendPoolConfigurator, or creates the proxy\\r\\n   * setting the new `configurator` implementation on the first time calling it\\r\\n   * @param configurator The new LendPoolConfigurator implementation\\r\\n   * @param encodedCallData calldata to execute\\r\\n   **/\\r\\n  function setLendPoolConfiguratorImpl(address configurator, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the LendPool admin\\r\\n   * @return the LendPoolAdmin address\\r\\n   **/\\r\\n  function getPoolAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the LendPool admin\\r\\n   * @param admin the LendPoolAdmin address\\r\\n   **/\\r\\n  function setPoolAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the emergency admin\\r\\n   * @return the EmergencyAdmin address\\r\\n   **/\\r\\n  function getEmergencyAdmin() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the emergency admin\\r\\n   * @param admin the EmergencyAdmin address\\r\\n   **/\\r\\n  function setEmergencyAdmin(address admin) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the reserve oracle\\r\\n   * @return the ReserveOracle address\\r\\n   **/\\r\\n  function getReserveOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the reserve oracle\\r\\n   * @param reserveOracle the ReserveOracle address\\r\\n   **/\\r\\n  function setReserveOracle(address reserveOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the NFT oracle\\r\\n   * @return the NFTOracle address\\r\\n   **/\\r\\n  function getNFTOracle() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the NFT oracle\\r\\n   * @param nftOracle the NFTOracle address\\r\\n   **/\\r\\n  function setNFTOracle(address nftOracle) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the lendpool loan\\r\\n   * @return the LendPoolLoan address\\r\\n   **/\\r\\n  function getLendPoolLoan() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the lendpool loan\\r\\n   * @param loan the LendPoolLoan address\\r\\n   * @param encodedCallData calldata to execute\\r\\n   **/\\r\\n  function setLendPoolLoanImpl(address loan, bytes memory encodedCallData) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the UNFT Registry\\r\\n   * @return the UNFTRegistry address\\r\\n   **/\\r\\n  function getUNFTRegistry() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the UNFT registry\\r\\n   * @param factory the UNFTRegistry address\\r\\n   **/\\r\\n  function setUNFTRegistry(address factory) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the incentives controller\\r\\n   * @return the IncentivesController address\\r\\n   **/\\r\\n  function getIncentivesController() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the incentives controller\\r\\n   * @param controller the IncentivesController address\\r\\n   **/\\r\\n  function setIncentivesController(address controller) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the UI data provider\\r\\n   * @return the UIDataProvider address\\r\\n   **/\\r\\n  function getUIDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the UI data provider\\r\\n   * @param provider the UIDataProvider address\\r\\n   **/\\r\\n  function setUIDataProvider(address provider) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the Unlockd data provider\\r\\n   * @return the UnlockdDataProvider address\\r\\n   **/\\r\\n  function getUnlockdDataProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the Unlockd data provider\\r\\n   * @param provider the UnlockdDataProvider address\\r\\n   **/\\r\\n  function setUnlockdDataProvider(address provider) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the wallet balance provider\\r\\n   * @return the WalletBalanceProvider address\\r\\n   **/\\r\\n  function getWalletBalanceProvider() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the wallet balance provider\\r\\n   * @param provider the WalletBalanceProvider address\\r\\n   **/\\r\\n  function setWalletBalanceProvider(address provider) external;\\r\\n\\r\\n  /**\\r\\n   * @dev returns the address of the LendPool liquidator contract\\r\\n   **/\\r\\n  function getLendPoolLiquidator() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev sets the address of the LendPool liquidator contract\\r\\n   * @param liquidator the LendPool liquidator address\\r\\n   **/\\r\\n  function setLendPoolLiquidator(address liquidator) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   **/\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled balance and the scaled total supply\\n   **/\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   **/\\n  function scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {ILendPoolAddressesProvider} from \\\"./ILendPoolAddressesProvider.sol\\\";\\r\\nimport {IIncentivesController} from \\\"./IIncentivesController.sol\\\";\\r\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\r\\n\\r\\ninterface IUToken is IScaledBalanceToken, IERC20Upgradeable, IERC20MetadataUpgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when an uToken is initialized\\r\\n   * @param underlyingAsset The address of the underlying asset\\r\\n   * @param pool The address of the associated lending pool\\r\\n   * @param treasury The address of the treasury\\r\\n   * @param incentivesController The address of the incentives controller for this uToken\\r\\n   **/\\r\\n  event Initialized(\\r\\n    address indexed underlyingAsset,\\r\\n    address indexed pool,\\r\\n    address treasury,\\r\\n    address incentivesController\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the bToken\\r\\n   * @param addressProvider The address of the address provider where this bToken will be used\\r\\n   * @param treasury The address of the Unlockd treasury, receiving the fees on this bToken\\r\\n   * @param underlyingAsset The address of the underlying asset of this bToken\\r\\n   * @param uTokenDecimals The amount of token decimals\\r\\n   * @param uTokenName The name of the token\\r\\n   * @param uTokenSymbol The token symbol\\r\\n   */\\r\\n  function initialize(\\r\\n    ILendPoolAddressesProvider addressProvider,\\r\\n    address treasury,\\r\\n    address underlyingAsset,\\r\\n    uint8 uTokenDecimals,\\r\\n    string calldata uTokenName,\\r\\n    string calldata uTokenSymbol\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param from The address performing the mint\\r\\n   * @param value The amount being\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed from, uint256 value, uint256 index);\\r\\n  /**\\r\\n   * @dev Emitted after setting of addresses as managers\\r\\n   * @param managers the managers to be updated\\r\\n   * @param flag `true` to set addresses as managers, `false` otherwise\\r\\n   **/\\r\\n  event UTokenManagersUpdated(address[] indexed managers, bool flag);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `amount` uTokens to `user`\\r\\n   * @param user The address receiving the minted tokens\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   * @return `true` if the the previous balance of the user was 0\\r\\n   */\\r\\n  function mint(address user, uint256 amount, uint256 index) external returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted after uTokens are burned\\r\\n   * @param from The owner of the uTokens, getting them burned\\r\\n   * @param target The address that will receive the underlying\\r\\n   * @param value The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted during the transfer action\\r\\n   * @param from The user whose tokens are being transferred\\r\\n   * @param to The recipient\\r\\n   * @param value The amount being transferred\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when treasury address is updated in utoken\\r\\n   * @param _newTreasuryAddress The new treasury address\\r\\n   **/\\r\\n  event TreasuryAddressUpdated(address indexed _newTreasuryAddress);\\r\\n\\r\\n  /**\\r\\n    @dev Emitted after sweeping liquidity from the uToken to deposit it to external lending protocol\\r\\n  * @param uToken The uToken swept\\r\\n  * @param underlyingAsset The underlying asset from the uToken\\r\\n  * @param amount The amount deposited to the lending protocol\\r\\n  */\\r\\n  event UTokenSwept(address indexed uToken, address indexed underlyingAsset, uint256 indexed amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Takes reserve liquidity from uToken and deposits it to external lening protocol\\r\\n   **/\\r\\n  function sweepUToken() external;\\r\\n\\r\\n  /**\\r\\n   * @dev Burns uTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\r\\n   * @param user The owner of the uTokens, getting them burned\\r\\n   * @param receiverOfUnderlying The address that will receive the underlying\\r\\n   * @param amount The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  function burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Mints uTokens to the reserve treasury\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   */\\r\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits `amount` to the lending protocol currently active\\r\\n   * @param amount The amount of tokens to deposit\\r\\n   */\\r\\n  function depositReserves(uint256 amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws `amount` from the lending protocol currently active\\r\\n   * @param amount The amount of tokens to withdraw\\r\\n   */\\r\\n  function withdrawReserves(uint256 amount) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers the underlying asset to `target`. Used by the LendPool to transfer\\r\\n   * assets in borrow() and withdraw()\\r\\n   * @param user The recipient of the underlying\\r\\n   * @param amount The amount getting transferred\\r\\n   * @return The amount transferred\\r\\n   **/\\r\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\r\\n   * @return The available liquidity in reserve\\r\\n   **/\\r\\n  function getAvailableLiquidity() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the incentives controller contract\\r\\n   **/\\r\\n  function getIncentivesController() external view returns (IIncentivesController);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the underlying asset of this uToken\\r\\n   **/\\r\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the treasury set to this uToken\\r\\n   **/\\r\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the address of the treasury to this uToken\\r\\n   **/\\r\\n  function setTreasuryAddress(address treasury) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the uToken manager addresses\\r\\n   **/\\r\\n  function updateUTokenManagers(address[] calldata managers, bool flag) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ReserveConfiguration library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Implements the bitmap logic to handle the reserve configuration\\r\\n */\\r\\nlibrary ReserveConfiguration {\\r\\n  uint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\r\\n  uint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\r\\n  uint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\r\\n  uint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\r\\n  uint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\r\\n\\r\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\r\\n  uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\r\\n  uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\r\\n  uint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\r\\n  uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\r\\n  uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\r\\n  uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\r\\n  uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\r\\n  uint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\r\\n\\r\\n  uint256 constant MAX_VALID_LTV = 65535;\\r\\n  uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\r\\n  uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\r\\n  uint256 constant MAX_VALID_DECIMALS = 255;\\r\\n  uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the Loan to Value of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param ltv the new ltv\\r\\n   **/\\r\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\r\\n    require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\r\\n\\r\\n    self.data = (self.data & LTV_MASK) | ltv;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the Loan to Value of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The loan to value\\r\\n   **/\\r\\n  function getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return self.data & ~LTV_MASK;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the liquidation threshold of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param threshold The new liquidation threshold\\r\\n   **/\\r\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\r\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\r\\n\\r\\n    self.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the liquidation threshold of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The liquidation threshold\\r\\n   **/\\r\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the liquidation bonus of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param bonus The new liquidation bonus\\r\\n   **/\\r\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\r\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\r\\n\\r\\n    self.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the liquidation bonus of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The liquidation bonus\\r\\n   **/\\r\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the decimals of the underlying asset of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param decimals The decimals\\r\\n   **/\\r\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\r\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\r\\n\\r\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the decimals of the underlying asset of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The decimals of the asset\\r\\n   **/\\r\\n  function getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the active state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param active The active state\\r\\n   **/\\r\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\r\\n    self.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the active state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The active state\\r\\n   **/\\r\\n  function getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~ACTIVE_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the frozen state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param frozen The frozen state\\r\\n   **/\\r\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\r\\n    self.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the frozen state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The frozen state\\r\\n   **/\\r\\n  function getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~FROZEN_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Enables or disables borrowing on the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\r\\n   **/\\r\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\r\\n    self.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the borrowing state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The borrowing state\\r\\n   **/\\r\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~BORROWING_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Enables or disables stable rate borrowing on the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\r\\n   **/\\r\\n  function setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\r\\n    self.data =\\r\\n      (self.data & STABLE_BORROWING_MASK) |\\r\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the stable rate borrowing state of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The stable rate borrowing state\\r\\n   **/\\r\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\r\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets the reserve factor of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @param reserveFactor The reserve factor\\r\\n   **/\\r\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\r\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\r\\n\\r\\n    self.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the reserve factor of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The reserve factor\\r\\n   **/\\r\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\r\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration flags of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\r\\n   **/\\r\\n  function getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\r\\n      (dataLocal & ~FROZEN_MASK) != 0,\\r\\n      (dataLocal & ~BORROWING_MASK) != 0,\\r\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration paramters of the reserve\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\r\\n   **/\\r\\n  function getParams(\\r\\n    DataTypes.ReserveConfigurationMap storage self\\r\\n  ) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n    uint256 dataLocal = self.data;\\r\\n\\r\\n    return (\\r\\n      dataLocal & ~LTV_MASK,\\r\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\r\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\r\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration paramters of the reserve from a memory object\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\r\\n   **/\\r\\n  function getParamsMemory(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\r\\n    return (\\r\\n      self.data & ~LTV_MASK,\\r\\n      (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\r\\n      (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\r\\n      (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\r\\n      (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Gets the configuration flags of the reserve from a memory object\\r\\n   * @param self The reserve configuration\\r\\n   * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\r\\n   **/\\r\\n  function getFlagsMemory(\\r\\n    DataTypes.ReserveConfigurationMap memory self\\r\\n  ) internal pure returns (bool, bool, bool, bool) {\\r\\n    return (\\r\\n      (self.data & ~ACTIVE_MASK) != 0,\\r\\n      (self.data & ~FROZEN_MASK) != 0,\\r\\n      (self.data & ~BORROWING_MASK) != 0,\\r\\n      (self.data & ~STABLE_BORROWING_MASK) != 0\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\n/**\\r\\n * @title Errors library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Defines the error messages emitted by the different contracts of the Unlockd protocol\\r\\n */\\r\\nlibrary Errors {\\r\\n  enum ReturnCode {\\r\\n    SUCCESS,\\r\\n    FAILED\\r\\n  }\\r\\n\\r\\n  string public constant SUCCESS = \\\"0\\\";\\r\\n\\r\\n  //common errors\\r\\n  string public constant CALLER_NOT_POOL_ADMIN = \\\"100\\\"; // 'The caller must be the pool admin'\\r\\n  string public constant CALLER_NOT_ADDRESS_PROVIDER = \\\"101\\\";\\r\\n  string public constant INVALID_FROM_BALANCE_AFTER_TRANSFER = \\\"102\\\";\\r\\n  string public constant INVALID_TO_BALANCE_AFTER_TRANSFER = \\\"103\\\";\\r\\n  string public constant CALLER_NOT_ONBEHALFOF_OR_IN_WHITELIST = \\\"104\\\";\\r\\n  string public constant CALLER_NOT_POOL_LIQUIDATOR = \\\"105\\\";\\r\\n  string public constant INVALID_ZERO_ADDRESS = \\\"106\\\";\\r\\n  string public constant CALLER_NOT_LTV_MANAGER = \\\"107\\\";\\r\\n  string public constant CALLER_NOT_PRICE_MANAGER = \\\"108\\\";\\r\\n  string public constant CALLER_NOT_UTOKEN_MANAGER = \\\"109\\\";\\r\\n\\r\\n  //math library errors\\r\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"200\\\";\\r\\n  string public constant MATH_ADDITION_OVERFLOW = \\\"201\\\";\\r\\n  string public constant MATH_DIVISION_BY_ZERO = \\\"202\\\";\\r\\n\\r\\n  //validation & check errors\\r\\n  string public constant VL_INVALID_AMOUNT = \\\"301\\\"; // 'Amount must be greater than 0'\\r\\n  string public constant VL_NO_ACTIVE_RESERVE = \\\"302\\\"; // 'Action requires an active reserve'\\r\\n  string public constant VL_RESERVE_FROZEN = \\\"303\\\"; // 'Action cannot be performed because the reserve is frozen'\\r\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"304\\\"; // 'User cannot withdraw more than the available balance'\\r\\n  string public constant VL_BORROWING_NOT_ENABLED = \\\"305\\\"; // 'Borrowing is not enabled'\\r\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"306\\\"; // 'The collateral balance is 0'\\r\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"307\\\"; // 'Health factor is lesser than the liquidation threshold'\\r\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"308\\\"; // 'There is not enough collateral to cover a new borrow'\\r\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"309\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\r\\n  string public constant VL_NO_ACTIVE_NFT = \\\"310\\\";\\r\\n  string public constant VL_NFT_FROZEN = \\\"311\\\";\\r\\n  string public constant VL_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"312\\\"; // 'User did not borrow the specified currency'\\r\\n  string public constant VL_INVALID_HEALTH_FACTOR = \\\"313\\\";\\r\\n  string public constant VL_INVALID_ONBEHALFOF_ADDRESS = \\\"314\\\";\\r\\n  string public constant VL_INVALID_TARGET_ADDRESS = \\\"315\\\";\\r\\n  string public constant VL_INVALID_RESERVE_ADDRESS = \\\"316\\\";\\r\\n  string public constant VL_SPECIFIED_LOAN_NOT_BORROWED_BY_USER = \\\"317\\\";\\r\\n  string public constant VL_SPECIFIED_RESERVE_NOT_BORROWED_BY_USER = \\\"318\\\";\\r\\n  string public constant VL_HEALTH_FACTOR_HIGHER_THAN_LIQUIDATION_THRESHOLD = \\\"319\\\";\\r\\n  string public constant VL_TIMEFRAME_EXCEEDED = \\\"320\\\";\\r\\n  string public constant VL_VALUE_EXCEED_TREASURY_BALANCE = \\\"321\\\";\\r\\n\\r\\n  //lend pool errors\\r\\n  string public constant LP_CALLER_NOT_LEND_POOL_CONFIGURATOR = \\\"400\\\"; // 'The caller of the function is not the lending pool configurator'\\r\\n  string public constant LP_IS_PAUSED = \\\"401\\\"; // 'Pool is paused'\\r\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"402\\\";\\r\\n  string public constant LP_NOT_CONTRACT = \\\"403\\\";\\r\\n  string public constant LP_BORROW_NOT_EXCEED_LIQUIDATION_THRESHOLD = \\\"404\\\";\\r\\n  string public constant LP_BORROW_IS_EXCEED_LIQUIDATION_PRICE = \\\"405\\\";\\r\\n  string public constant LP_NO_MORE_NFTS_ALLOWED = \\\"406\\\";\\r\\n  string public constant LP_INVALID_USER_NFT_AMOUNT = \\\"407\\\";\\r\\n  string public constant LP_INCONSISTENT_PARAMS = \\\"408\\\";\\r\\n  string public constant LP_NFT_IS_NOT_USED_AS_COLLATERAL = \\\"409\\\";\\r\\n  string public constant LP_CALLER_MUST_BE_AN_UTOKEN = \\\"410\\\";\\r\\n  string public constant LP_INVALID_NFT_AMOUNT = \\\"411\\\";\\r\\n  string public constant LP_NFT_HAS_USED_AS_COLLATERAL = \\\"412\\\";\\r\\n  string public constant LP_DELEGATE_CALL_FAILED = \\\"413\\\";\\r\\n  string public constant LP_AMOUNT_LESS_THAN_EXTRA_DEBT = \\\"414\\\";\\r\\n  string public constant LP_AMOUNT_LESS_THAN_REDEEM_THRESHOLD = \\\"415\\\";\\r\\n  string public constant LP_AMOUNT_GREATER_THAN_MAX_REPAY = \\\"416\\\";\\r\\n  string public constant LP_NFT_TOKEN_ID_EXCEED_MAX_LIMIT = \\\"417\\\";\\r\\n  string public constant LP_NFT_SUPPLY_NUM_EXCEED_MAX_LIMIT = \\\"418\\\";\\r\\n  string public constant LP_CALLER_NOT_LEND_POOL_LIQUIDATOR_NOR_GATEWAY = \\\"419\\\";\\r\\n  string public constant LP_CONSECUTIVE_BIDS_NOT_ALLOWED = \\\"420\\\";\\r\\n  string public constant LP_INVALID_OVERFLOW_VALUE = \\\"421\\\";\\r\\n  string public constant LP_CALLER_NOT_NFT_HOLDER = \\\"422\\\";\\r\\n  string public constant LP_NFT_NOT_ALLOWED_TO_SELL = \\\"423\\\";\\r\\n  string public constant LP_RESERVES_WITHOUT_ENOUGH_LIQUIDITY = \\\"424\\\";\\r\\n  string public constant LP_COLLECTION_NOT_SUPPORTED = \\\"425\\\";\\r\\n  string public constant LP_MSG_VALUE_DIFFERENT_FROM_CONFIG_FEE = \\\"426\\\";\\r\\n  string public constant LP_INVALID_SAFE_HEALTH_FACTOR = \\\"427\\\";\\r\\n  string public constant LP_AMOUNT_LESS_THAN_DEBT = \\\"428\\\";\\r\\n  string public constant LP_AMOUNT_DIFFERENT_FROM_REQUIRED_BUYOUT_PRICE = \\\"429\\\";\\r\\n  string public constant LP_CALLER_NOT_DEBT_TOKEN_MANAGER = \\\"430\\\";\\r\\n  string public constant LP_CALLER_NOT_RESERVOIR_OR_DEBT_MARKET = \\\"431\\\";\\r\\n\\r\\n  //lend pool loan errors\\r\\n  string public constant LPL_CLAIM_HASNT_STARTED_YET = \\\"479\\\";\\r\\n  string public constant LPL_INVALID_LOAN_STATE = \\\"480\\\";\\r\\n  string public constant LPL_INVALID_LOAN_AMOUNT = \\\"481\\\";\\r\\n  string public constant LPL_INVALID_TAKEN_AMOUNT = \\\"482\\\";\\r\\n  string public constant LPL_AMOUNT_OVERFLOW = \\\"483\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_DEBT_PRICE = \\\"484\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_HIGHEST_PRICE = \\\"485\\\";\\r\\n  string public constant LPL_BID_REDEEM_DURATION_HAS_END = \\\"486\\\";\\r\\n  string public constant LPL_BID_USER_NOT_SAME = \\\"487\\\";\\r\\n  string public constant LPL_BID_REPAY_AMOUNT_NOT_ENOUGH = \\\"488\\\";\\r\\n  string public constant LPL_BID_AUCTION_DURATION_HAS_END = \\\"489\\\";\\r\\n  string public constant LPL_BID_AUCTION_DURATION_NOT_END = \\\"490\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_BORROW = \\\"491\\\";\\r\\n  string public constant LPL_INVALID_BIDDER_ADDRESS = \\\"492\\\";\\r\\n  string public constant LPL_AMOUNT_LESS_THAN_BID_FINE = \\\"493\\\";\\r\\n  string public constant LPL_INVALID_BID_FINE = \\\"494\\\";\\r\\n  string public constant LPL_BID_PRICE_LESS_THAN_MIN_BID_REQUIRED = \\\"495\\\";\\r\\n  string public constant LPL_BID_NOT_BUYOUT_PRICE = \\\"496\\\";\\r\\n  string public constant LPL_BUYOUT_DURATION_HAS_END = \\\"497\\\";\\r\\n  string public constant LPL_BUYOUT_PRICE_LESS_THAN_BORROW = \\\"498\\\";\\r\\n  string public constant LPL_CALLER_MUST_BE_MARKET_ADAPTER = \\\"499\\\";\\r\\n\\r\\n  //common token errors\\r\\n  string public constant CT_CALLER_MUST_BE_LEND_POOL = \\\"500\\\"; // 'The caller of this function must be a lending pool'\\r\\n  string public constant CT_INVALID_MINT_AMOUNT = \\\"501\\\"; //invalid amount to mint\\r\\n  string public constant CT_INVALID_BURN_AMOUNT = \\\"502\\\"; //invalid amount to burn\\r\\n  string public constant CT_BORROW_ALLOWANCE_NOT_ENOUGH = \\\"503\\\";\\r\\n  string public constant CT_CALLER_MUST_BE_DEBT_MARKET = \\\"504\\\"; // 'The caller of this function must be a debt market'\\r\\n\\r\\n  //reserve logic errors\\r\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"601\\\"; // 'Reserve has already been initialized'\\r\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"602\\\"; //  Liquidity index overflows uint128\\r\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"603\\\"; //  Variable borrow index overflows uint128\\r\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"604\\\"; //  Liquidity rate overflows uint128\\r\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"605\\\"; //  Variable borrow rate overflows uint128\\r\\n\\r\\n  //configure errors\\r\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"700\\\"; // 'The liquidity of the reserve needs to be 0'\\r\\n  string public constant LPC_INVALID_CONFIGURATION = \\\"701\\\"; // 'Invalid risk parameters for the reserve'\\r\\n  string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"702\\\"; // 'The caller must be the emergency admin'\\r\\n  string public constant LPC_INVALID_UNFT_ADDRESS = \\\"703\\\";\\r\\n  string public constant LPC_INVALIED_LOAN_ADDRESS = \\\"704\\\";\\r\\n  string public constant LPC_NFT_LIQUIDITY_NOT_0 = \\\"705\\\";\\r\\n  string public constant LPC_PARAMS_MISMATCH = \\\"706\\\"; // NFT assets & token ids mismatch\\r\\n  string public constant LPC_FEE_PERCENTAGE_TOO_HIGH = \\\"707\\\";\\r\\n  string public constant LPC_INVALID_LTVMANAGER_ADDRESS = \\\"708\\\";\\r\\n  string public constant LPC_INCONSISTENT_PARAMS = \\\"709\\\";\\r\\n  string public constant LPC_INVALID_SAFE_HEALTH_FACTOR = \\\"710\\\";\\r\\n  //reserve config errors\\r\\n  string public constant RC_INVALID_LTV = \\\"730\\\";\\r\\n  string public constant RC_INVALID_LIQ_THRESHOLD = \\\"731\\\";\\r\\n  string public constant RC_INVALID_LIQ_BONUS = \\\"732\\\";\\r\\n  string public constant RC_INVALID_DECIMALS = \\\"733\\\";\\r\\n  string public constant RC_INVALID_RESERVE_FACTOR = \\\"734\\\";\\r\\n  string public constant RC_INVALID_REDEEM_DURATION = \\\"735\\\";\\r\\n  string public constant RC_INVALID_AUCTION_DURATION = \\\"736\\\";\\r\\n  string public constant RC_INVALID_REDEEM_FINE = \\\"737\\\";\\r\\n  string public constant RC_INVALID_REDEEM_THRESHOLD = \\\"738\\\";\\r\\n  string public constant RC_INVALID_MIN_BID_FINE = \\\"739\\\";\\r\\n  string public constant RC_INVALID_MAX_BID_FINE = \\\"740\\\";\\r\\n  string public constant RC_INVALID_MAX_CONFIG_TIMESTAMP = \\\"741\\\";\\r\\n\\r\\n  //address provider erros\\r\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"760\\\"; // 'Provider is not registered'\\r\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"761\\\";\\r\\n\\r\\n  //NFTOracleErrors\\r\\n  string public constant NFTO_INVALID_PRICEM_ADDRESS = \\\"900\\\";\\r\\n\\r\\n  //Debt Market\\r\\n  string public constant DM_CALLER_NOT_THE_OWNER = \\\"1000\\\";\\r\\n  string public constant DM_DEBT_SHOULD_EXIST = \\\"1001\\\";\\r\\n  string public constant DM_INVALID_AMOUNT = \\\"1002\\\";\\r\\n  string public constant DM_FAIL_ON_SEND_ETH = \\\"1003\\\";\\r\\n  string public constant DM_DEBT_SHOULD_NOT_BE_SOLD = \\\"1004\\\";\\r\\n  string public constant DM_DEBT_ALREADY_EXIST = \\\"1005\\\";\\r\\n  string public constant DM_LOAN_SHOULD_EXIST = \\\"1006\\\";\\r\\n  string public constant DM_AUCTION_ALREADY_ENDED = \\\"1007\\\";\\r\\n  string public constant DM_BID_PRICE_HIGHER_THAN_SELL_PRICE = \\\"1008\\\";\\r\\n  string public constant DM_BID_PRICE_LESS_THAN_PREVIOUS_BID = \\\"1009\\\";\\r\\n  string public constant DM_INVALID_SELL_TYPE = \\\"1010\\\";\\r\\n  string public constant DM_AUCTION_NOT_ALREADY_ENDED = \\\"1011\\\";\\r\\n  string public constant DM_INVALID_CLAIM_RECEIVER = \\\"1012\\\";\\r\\n  string public constant DM_AMOUNT_DIFFERENT_FROM_SELL_PRICE = \\\"1013\\\";\\r\\n  string public constant DM_BID_PRICE_LESS_THAN_MIN_BID_PRICE = \\\"1014\\\";\\r\\n  string public constant DM_BORROWED_AMOUNT_DIVERGED = \\\"1015\\\";\\r\\n  string public constant DM_INVALID_AUTHORIZED_ADDRESS = \\\"1016\\\";\\r\\n  string public constant DM_CALLER_NOT_THE_OWNER_OR_AUTHORIZED = \\\"1017\\\";\\r\\n  string public constant DM_INVALID_DELTA_BID_PERCENT = \\\"1018\\\";\\r\\n  string public constant DM_IS_PAUSED = \\\"1019\\\";\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/logic/ReserveLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {IUToken} from \\\"../../interfaces/IUToken.sol\\\";\\r\\nimport {IDebtToken} from \\\"../../interfaces/IDebtToken.sol\\\";\\r\\nimport {IInterestRate} from \\\"../../interfaces/IInterestRate.sol\\\";\\r\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\r\\nimport {MathUtils} from \\\"../math/MathUtils.sol\\\";\\r\\nimport {WadRayMath} from \\\"../math/WadRayMath.sol\\\";\\r\\nimport {PercentageMath} from \\\"../math/PercentageMath.sol\\\";\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\r\\n\\r\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ReserveLogic library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Implements the logic to update the reserves state\\r\\n */\\r\\nlibrary ReserveLogic {\\r\\n  using WadRayMath for uint256;\\r\\n  using PercentageMath for uint256;\\r\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n  using ReserveLogic for DataTypes.ReserveData;\\r\\n  using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          EVENTS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Emitted when the state of a reserve is updated\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The new liquidity rate\\r\\n   * @param variableBorrowRate The new variable borrow rate\\r\\n   * @param liquidityIndex The new liquidity index\\r\\n   * @param variableBorrowIndex The new variable borrow index\\r\\n   **/\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed asset,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          STRUCTS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  struct UpdateInterestRatesLocalVars {\\r\\n    uint256 availableLiquidity;\\r\\n    uint256 newLiquidityRate;\\r\\n    uint256 newVariableRate;\\r\\n    uint256 totalVariableDebt;\\r\\n  }\\r\\n\\r\\n  struct MintToTreasuryLocalVars {\\r\\n    uint256 currentVariableDebt;\\r\\n    uint256 previousVariableDebt;\\r\\n    uint256 totalDebtAccrued;\\r\\n    uint256 amountToMint;\\r\\n    uint256 reserveFactor;\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          MAIN LOGIC\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Initializes a reserve\\r\\n   * @param reserve The reserve object\\r\\n   * @param uTokenAddress The address of the overlying uToken contract\\r\\n   * @param debtTokenAddress The address of the overlying debtToken contract\\r\\n   * @param interestRateAddress The address of the interest rate strategy contract\\r\\n   **/\\r\\n  function init(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    address uTokenAddress,\\r\\n    address debtTokenAddress,\\r\\n    address interestRateAddress\\r\\n  ) external {\\r\\n    require(reserve.uTokenAddress == address(0), Errors.RL_RESERVE_ALREADY_INITIALIZED);\\r\\n\\r\\n    reserve.liquidityIndex = uint128(WadRayMath.ray());\\r\\n    reserve.variableBorrowIndex = uint128(WadRayMath.ray());\\r\\n    reserve.uTokenAddress = uTokenAddress;\\r\\n    reserve.debtTokenAddress = debtTokenAddress;\\r\\n    reserve.interestRateAddress = interestRateAddress;\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                          INTERNALS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Updates the liquidity cumulative index and the variable borrow index.\\r\\n   * @param reserve the reserve object\\r\\n   **/\\r\\n  function updateState(DataTypes.ReserveData storage reserve) internal {\\r\\n    uint256 scaledVariableDebt = IDebtToken(reserve.debtTokenAddress).scaledTotalSupply();\\r\\n    uint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\r\\n    uint256 previousLiquidityIndex = reserve.liquidityIndex;\\r\\n    uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    (uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) = _updateIndexes(\\r\\n      reserve,\\r\\n      scaledVariableDebt,\\r\\n      previousLiquidityIndex,\\r\\n      previousVariableBorrowIndex,\\r\\n      lastUpdatedTimestamp\\r\\n    );\\r\\n\\r\\n    _mintToTreasury(\\r\\n      reserve,\\r\\n      scaledVariableDebt,\\r\\n      previousVariableBorrowIndex,\\r\\n      newLiquidityIndex,\\r\\n      newVariableBorrowIndex,\\r\\n      lastUpdatedTimestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Accumulates a predefined amount of asset to the reserve as a fixed, instantaneous income.\\r\\n   * @param reserve The reserve object\\r\\n   * @param totalLiquidity The total liquidity available in the reserve\\r\\n   * @param amount The amount to accomulate\\r\\n   **/\\r\\n  function cumulateToLiquidityIndex(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    uint256 totalLiquidity,\\r\\n    uint256 amount\\r\\n  ) internal {\\r\\n    uint256 amountToLiquidityRatio = amount.wadToRay().rayDiv(totalLiquidity.wadToRay());\\r\\n\\r\\n    uint256 result = amountToLiquidityRatio + (WadRayMath.ray());\\r\\n\\r\\n    result = result.rayMul(reserve.liquidityIndex);\\r\\n    require(result <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\r\\n\\r\\n    reserve.liquidityIndex = uint128(result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve current stable borrow rate, the current variable borrow rate and the current liquidity rate\\r\\n   * @param reserve The address of the reserve to be updated\\r\\n   * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\r\\n   * @param liquidityTaken The amount of liquidity taken from the protocol (withdraw or borrow)\\r\\n   **/\\r\\n  function updateInterestRates(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    address reserveAddress,\\r\\n    address uTokenAddress,\\r\\n    uint256 liquidityAdded,\\r\\n    uint256 liquidityTaken\\r\\n  ) internal {\\r\\n    UpdateInterestRatesLocalVars memory vars;\\r\\n\\r\\n    //calculates the total variable debt locally using the scaled borrow amount instead\\r\\n    //of borrow amount(), as it's noticeably cheaper. Also, the index has been\\r\\n    //updated by the previous updateState() call\\r\\n    vars.totalVariableDebt = IDebtToken(reserve.debtTokenAddress).scaledTotalSupply().rayMul(\\r\\n      reserve.variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    (vars.newLiquidityRate, vars.newVariableRate) = IInterestRate(reserve.interestRateAddress).calculateInterestRates(\\r\\n      reserveAddress,\\r\\n      uTokenAddress,\\r\\n      liquidityAdded,\\r\\n      liquidityTaken,\\r\\n      vars.totalVariableDebt,\\r\\n      reserve.configuration.getReserveFactor()\\r\\n    );\\r\\n    require(vars.newLiquidityRate <= type(uint128).max, Errors.RL_LIQUIDITY_RATE_OVERFLOW);\\r\\n    require(vars.newVariableRate <= type(uint128).max, Errors.RL_VARIABLE_BORROW_RATE_OVERFLOW);\\r\\n\\r\\n    reserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\r\\n    reserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\r\\n\\r\\n    emit ReserveDataUpdated(\\r\\n      reserveAddress,\\r\\n      vars.newLiquidityRate,\\r\\n      vars.newVariableRate,\\r\\n      reserve.liquidityIndex,\\r\\n      reserve.variableBorrowIndex\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor for the\\r\\n   * specific asset.\\r\\n   * @param reserve The reserve reserve to be updated\\r\\n   * @param scaledVariableDebt The current scaled total variable debt\\r\\n   * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\r\\n   * @param newLiquidityIndex The new liquidity index\\r\\n   * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\r\\n   **/\\r\\n  function _mintToTreasury(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    uint256 scaledVariableDebt,\\r\\n    uint256 previousVariableBorrowIndex,\\r\\n    uint256 newLiquidityIndex,\\r\\n    uint256 newVariableBorrowIndex,\\r\\n    uint40 timestamp\\r\\n  ) internal {\\r\\n    timestamp;\\r\\n    MintToTreasuryLocalVars memory vars;\\r\\n\\r\\n    vars.reserveFactor = reserve.configuration.getReserveFactor();\\r\\n\\r\\n    if (vars.reserveFactor == 0) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    //calculate the last principal variable debt\\r\\n    vars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\r\\n\\r\\n    //calculate the new total supply after accumulation of the index\\r\\n    vars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\r\\n\\r\\n    //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\r\\n    vars.totalDebtAccrued = vars.currentVariableDebt - (vars.previousVariableDebt);\\r\\n\\r\\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\r\\n\\r\\n    if (vars.amountToMint != 0) {\\r\\n      IUToken(reserve.uTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve indexes and the timestamp of the update\\r\\n   * @param reserve The reserve reserve to be updated\\r\\n   * @param scaledVariableDebt The scaled variable debt\\r\\n   * @param liquidityIndex The last stored liquidity index\\r\\n   * @param variableBorrowIndex The last stored variable borrow index\\r\\n   **/\\r\\n  function _updateIndexes(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    uint256 scaledVariableDebt,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex,\\r\\n    uint40 timestamp\\r\\n  ) internal returns (uint256, uint256) {\\r\\n    uint256 currentLiquidityRate = reserve.currentLiquidityRate;\\r\\n\\r\\n    uint256 newLiquidityIndex = liquidityIndex;\\r\\n    uint256 newVariableBorrowIndex = variableBorrowIndex;\\r\\n\\r\\n    //only cumulating if there is any income being produced\\r\\n    if (currentLiquidityRate > 0) {\\r\\n      uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\r\\n      newLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\r\\n      require(newLiquidityIndex <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\\r\\n\\r\\n      reserve.liquidityIndex = uint128(newLiquidityIndex);\\r\\n\\r\\n      //as the liquidity rate might come only from stable rate loans, we need to ensure\\r\\n      //that there is actual variable debt before accumulating\\r\\n      if (scaledVariableDebt != 0) {\\r\\n        uint256 cumulatedVariableBorrowInterest = MathUtils.calculateCompoundedInterest(\\r\\n          reserve.currentVariableBorrowRate,\\r\\n          timestamp\\r\\n        );\\r\\n        newVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\r\\n        require(newVariableBorrowIndex <= type(uint128).max, Errors.RL_VARIABLE_BORROW_INDEX_OVERFLOW);\\r\\n        reserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\\r\\n    return (newLiquidityIndex, newVariableBorrowIndex);\\r\\n  }\\r\\n\\r\\n  /*//////////////////////////////////////////////////////////////\\r\\n                        INTERNAL GETTERS\\r\\n  //////////////////////////////////////////////////////////////*/\\r\\n  /**\\r\\n   * @dev Returns the ongoing normalized income for the reserve\\r\\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\\r\\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\r\\n   * @param reserve The reserve object\\r\\n   * @return the normalized income. expressed in ray\\r\\n   **/\\r\\n  function getNormalizedIncome(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\r\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    if (timestamp == uint40(block.timestamp)) {\\r\\n      //if the index was updated in the same block, no need to perform any calculation\\r\\n      return reserve.liquidityIndex;\\r\\n    }\\r\\n\\r\\n    uint256 cumulated = MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\r\\n      reserve.liquidityIndex\\r\\n    );\\r\\n\\r\\n    return cumulated;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ongoing normalized variable debt for the reserve\\r\\n   * A value of 1e27 means there is no debt. As time passes, the income is accrued\\r\\n   * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\r\\n   * @param reserve The reserve object\\r\\n   * @return The normalized variable debt. expressed in ray\\r\\n   **/\\r\\n  function getNormalizedDebt(DataTypes.ReserveData storage reserve) internal view returns (uint256) {\\r\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    if (timestamp == uint40(block.timestamp)) {\\r\\n      //if the index was updated in the same block, no need to perform any calculation\\r\\n      return reserve.variableBorrowIndex;\\r\\n    }\\r\\n\\r\\n    uint256 cumulated = MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\r\\n      reserve.variableBorrowIndex\\r\\n    );\\r\\n\\r\\n    return cumulated;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.4;\\n\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n  using WadRayMath for uint256;\\n\\n  /// @dev Ignoring leap years\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n  /**\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\n   **/\\n\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 timeDifference = block.timestamp - (uint256(lastUpdateTimestamp));\\n\\n    return ((rate * (timeDifference)) / SECONDS_PER_YEAR) + (WadRayMath.ray());\\n  }\\n\\n  /**\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n   *\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n   *\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\n   *\\n   * @param rate The interest rate, in ray\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n   * @return The interest rate compounded during the timeDelta, in ray\\n   **/\\n  function calculateCompoundedInterest(\\n    uint256 rate,\\n    uint40 lastUpdateTimestamp,\\n    uint256 currentTimestamp\\n  ) internal pure returns (uint256) {\\n    //solium-disable-next-line\\n    uint256 exp = currentTimestamp - (uint256(lastUpdateTimestamp));\\n\\n    if (exp == 0) {\\n      return WadRayMath.ray();\\n    }\\n\\n    uint256 expMinusOne = exp - 1;\\n\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n    uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\n\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\n\\n    uint256 secondTerm = (exp * (expMinusOne) * (basePowerTwo)) / 2;\\n    uint256 thirdTerm = (exp * (expMinusOne) * (expMinusTwo) * (basePowerThree)) / 6;\\n\\n    return WadRayMath.ray() + (ratePerSecond * (exp)) + (secondTerm) + (thirdTerm);\\n  }\\n\\n  /**\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n   * @param rate The interest rate (in ray)\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n   **/\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp) internal view returns (uint256) {\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PercentageMath library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @notice Provides functions to perform percentage calculations\\r\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\r\\n * @dev Operations are rounded half up\\r\\n **/\\r\\n\\r\\nlibrary PercentageMath {\\r\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\r\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\r\\n  uint256 constant ONE_PERCENT = 1e2; //100, 1%\\r\\n  uint256 constant TEN_PERCENT = 1e3; //1000, 10%\\r\\n  uint256 constant ONE_THOUSANDTH_PERCENT = 1e1; //10, 0.1%\\r\\n  uint256 constant ONE_TEN_THOUSANDTH_PERCENT = 1; //1, 0.01%\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage multiplication\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The percentage of value\\r\\n   **/\\r\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    if (value == 0 || percentage == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage division\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The value divided the percentage\\r\\n   **/\\r\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\r\\n    uint256 halfPercentage = percentage / 2;\\r\\n\\r\\n    require(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/math/WadRayMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title WadRayMath library\\r\\n * @author BendDao; Forked and edited by Unlockd\\r\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\r\\n **/\\r\\n\\r\\nlibrary WadRayMath {\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant HALF_WAD = WAD / 2;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant HALF_RAY = RAY / 2;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  /**\\r\\n   * @return One ray, 1e27\\r\\n   **/\\r\\n  function ray() internal pure returns (uint256) {\\r\\n    return RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return One wad, 1e18\\r\\n   **/\\r\\n\\r\\n  function wad() internal pure returns (uint256) {\\r\\n    return WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e27/2\\r\\n   **/\\r\\n  function halfRay() internal pure returns (uint256) {\\r\\n    return HALF_RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e18/2\\r\\n   **/\\r\\n  function halfWad() internal pure returns (uint256) {\\r\\n    return HALF_WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a*b, in wad\\r\\n   **/\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - HALF_WAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * b + HALF_WAD) / WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a/b, in wad\\r\\n   **/\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * WAD + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a*b, in ray\\r\\n   **/\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - HALF_RAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * b + HALF_RAY) / RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a/b, in ray\\r\\n   **/\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n\\r\\n    return (a * RAY + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Casts ray down to wad\\r\\n   * @param a Ray\\r\\n   * @return a casted to wad, rounded half up to the nearest wad\\r\\n   **/\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\r\\n    uint256 result = halfRatio + a;\\r\\n    require(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\r\\n\\r\\n    return result / WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts wad up to ray\\r\\n   * @param a Wad\\r\\n   * @return a converted in ray\\r\\n   **/\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 result = a * WAD_RAY_RATIO;\\r\\n    require(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nlibrary DataTypes {\\r\\n  struct ReserveData {\\r\\n    //stores the reserve configuration\\r\\n    ReserveConfigurationMap configuration;\\r\\n    //the liquidity index. Expressed in ray\\r\\n    uint128 liquidityIndex;\\r\\n    //variable borrow index. Expressed in ray\\r\\n    uint128 variableBorrowIndex;\\r\\n    //the current supply rate. Expressed in ray\\r\\n    uint128 currentLiquidityRate;\\r\\n    //the current variable borrow rate. Expressed in ray\\r\\n    uint128 currentVariableBorrowRate;\\r\\n    uint40 lastUpdateTimestamp;\\r\\n    //tokens addresses\\r\\n    address uTokenAddress;\\r\\n    address debtTokenAddress;\\r\\n    //address of the interest rate strategy\\r\\n    address interestRateAddress;\\r\\n    //the id of the reserve. Represents the position in the list of the active reserves\\r\\n    uint8 id;\\r\\n  }\\r\\n\\r\\n  struct NftData {\\r\\n    //stores the nft configuration\\r\\n    NftConfigurationMap configuration;\\r\\n    //address of the uNFT contract\\r\\n    address uNftAddress;\\r\\n    //the id of the nft. Represents the position in the list of the active nfts\\r\\n    uint8 id;\\r\\n    uint256 maxSupply;\\r\\n    uint256 maxTokenId;\\r\\n  }\\r\\n\\r\\n  struct ReserveConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 48-55: Decimals\\r\\n    //bit 56: Reserve is active\\r\\n    //bit 57: reserve is frozen\\r\\n    //bit 58: borrowing is enabled\\r\\n    //bit 59: stable rate borrowing enabled\\r\\n    //bit 60-63: reserved\\r\\n    //bit 64-79: reserve factor\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  struct NftConfigurationMap {\\r\\n    //bit 0-15: LTV\\r\\n    //bit 16-31: Liq. threshold\\r\\n    //bit 32-47: Liq. bonus\\r\\n    //bit 56: NFT is active\\r\\n    //bit 57: NFT is frozen\\r\\n    //bit 64-71: Redeem duration\\r\\n    //bit 72-79: Auction duration\\r\\n    //bit 80-95: Redeem fine\\r\\n    //bit 96-111: Redeem threshold\\r\\n    //bit 112-127: Min bid fine\\r\\n    //bit 128-159: Timestamp Config\\r\\n    uint256 data;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Enum describing the current state of a loan\\r\\n   * State change flow:\\r\\n   *  Created -> Active -> Repaid\\r\\n   *                    -> Auction -> Defaulted\\r\\n   */\\r\\n  enum LoanState {\\r\\n    // We need a default that is not 'Created' - this is the zero value\\r\\n    None,\\r\\n    // The loan data is stored, but not initiated yet.\\r\\n    Created,\\r\\n    // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\r\\n    Active,\\r\\n    // The loan is in auction, higest price liquidator will got chance to claim it.\\r\\n    Auction,\\r\\n    // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\r\\n    Repaid,\\r\\n    // The loan was delinquent and collateral claimed by the liquidator. This is a terminal state.\\r\\n    Defaulted\\r\\n  }\\r\\n\\r\\n  struct LoanData {\\r\\n    //the id of the nft loan\\r\\n    uint256 loanId;\\r\\n    //the current state of the loan\\r\\n    LoanState state;\\r\\n    //address of borrower\\r\\n    address borrower;\\r\\n    //address of nft asset token\\r\\n    address nftAsset;\\r\\n    //the id of nft token\\r\\n    uint256 nftTokenId;\\r\\n    //address of reserve asset token\\r\\n    address reserveAsset;\\r\\n    //scaled borrow amount. Expressed in ray\\r\\n    uint256 scaledAmount;\\r\\n    //start time of first bid time\\r\\n    uint256 bidStartTimestamp;\\r\\n    //bidder address of higest bid\\r\\n    address bidderAddress;\\r\\n    //price of higest bid\\r\\n    uint256 bidPrice;\\r\\n    //borrow amount of loan\\r\\n    uint256 bidBorrowAmount;\\r\\n    //bidder address of first bid\\r\\n    address firstBidderAddress;\\r\\n  }\\r\\n\\r\\n  struct ExecuteDepositParams {\\r\\n    address initiator;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteWithdrawParams {\\r\\n    address initiator;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address to;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBorrowParams {\\r\\n    address initiator;\\r\\n    address asset;\\r\\n    uint256 amount;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    address onBehalfOf;\\r\\n    uint16 referralCode;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRepayParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  struct ExecuteAuctionParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 bidPrice;\\r\\n    address onBehalfOf;\\r\\n    uint256 auctionDurationConfigFee;\\r\\n    uint256 bidDelta;\\r\\n  }\\r\\n\\r\\n  struct ExecuteRedeemParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n    uint256 bidFine;\\r\\n    uint256 safeHealthFactor;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidateParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  struct ExecuteBuyoutParams {\\r\\n    address initiator;\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 amount;\\r\\n    address onBehalfOf;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLiquidateMarketsParams {\\r\\n    address nftAsset;\\r\\n    uint256 nftTokenId;\\r\\n    uint256 liquidateFeePercentage;\\r\\n    uint256 amountOutMin;\\r\\n  }\\r\\n\\r\\n  struct ExecuteLendPoolStates {\\r\\n    uint256 pauseStartTime;\\r\\n    uint256 pauseDurationTime;\\r\\n  }\\r\\n\\r\\n  struct ExecuteYearnParams {\\r\\n    address underlyingAsset;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  enum DebtMarketType {\\r\\n    FixedPrice, //0\\r\\n    Auction, //1\\r\\n    Mixed //2\\r\\n  }\\r\\n\\r\\n  enum DebtMarketState {\\r\\n    //No bids\\r\\n    New,\\r\\n    //Exist bids\\r\\n    Active,\\r\\n    //Is sold\\r\\n    Sold,\\r\\n    Canceled\\r\\n  }\\r\\n\\r\\n  struct DebtMarketListing {\\r\\n    uint256 debtId;\\r\\n    address debtor;\\r\\n    address nftAsset;\\r\\n    uint256 tokenId;\\r\\n    DebtMarketType sellType;\\r\\n    DebtMarketState state;\\r\\n    uint256 sellPrice;\\r\\n    address reserveAsset;\\r\\n    uint256 scaledAmount;\\r\\n    address bidderAddress;\\r\\n    uint256 bidPrice;\\r\\n    uint256 auctionEndTimestamp;\\r\\n    uint256 startBiddingPrice;\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"}]", "ContractName": "ReserveLogic", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}