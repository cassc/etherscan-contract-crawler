{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/MoneyMatesPresale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.2;\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 value) external returns (bool);\\n}\\n\\ncontract TokenPresale {\\n\\n    // Settings\\n    address public admin;\\n    address public treasury;\\n    IERC20 public token;\\n    uint256 public tokenPrice;\\n    uint256 minETHAmount;\\n    uint256 maxETHAmount;\\n    uint256 maxTokenAmount;\\n\\n    // Presale\\n    bool public presaleEnded;\\n    bool public presaleStarted;\\n    uint256 public presaleStartTime;\\n    uint256 public presaleEndTime;\\n    mapping(address => uint8) public buyers; // 0 unset | 1 seed | 2 public\\n    mapping(address => uint256) public purchasedTokens; \\n\\n    // Claim\\n    bool public claimStarted;\\n    uint256 public claimStartTime;\\n    mapping(address => uint256) public claimedTokens;\\n\\n    // Stats\\n    uint256 totalTokenSold;\\n    uint256 totalClaimed;\\n\\n    // Whitelist\\n    mapping(address => bool) public whitelist;\\n    bool whitelistActive;\\n    uint256 whitelistDuration;\\n\\n    // State\\n    bool private locked;\\n    bool private released;\\n\\n    event StartPresale();\\n    event EndPresale();\\n    event ClaimStart();\\n    event Claim(address user, uint256 amount);\\n\\n    modifier noReentrant() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    constructor(\\n        uint256 _oneEthInTokens,\\n        uint256 _maxTokenAmount,\\n        address _treasury\\n    ) {\\n        admin = msg.sender;\\n        tokenPrice = 1 ether / _oneEthInTokens;\\n        maxTokenAmount = _maxTokenAmount;\\n        treasury = _treasury;\\n        minETHAmount = 0.01 ether;\\n        maxETHAmount = 1.5 ether;\\n        whitelistActive = true;\\n        totalTokenSold = 0;\\n        totalClaimed = 0;\\n        claimStarted = false;\\n        presaleStarted = false;\\n        whitelistDuration = 4 hours;\\n    }\\n\\n    // Admin Only\\n    function openPresale() public {\\n        require(msg.sender == admin, 'Only admin can open the presale');\\n        presaleStarted = true;\\n        presaleStartTime = block.timestamp;\\n        presaleEndTime = block.timestamp + 4 hours;\\n        emit StartPresale();\\n    }\\n    function setTreasury(address _treasury) public {\\n        require(msg.sender == admin, 'Only admin can set the treasury');\\n        require(_treasury != address(0), 'ZERO_ADDRESS');\\n        treasury = _treasury;\\n    }\\n    function whitelistUsers(address[] memory users) public {\\n        require(msg.sender == admin, 'Only admin can whitelist a user');\\n        for(uint256 i=0; i<users.length; i++){\\n            whitelist[users[i]] = true;\\n        }\\n    }\\n    function setWhitelistActive(bool state) public {\\n        require(msg.sender == admin, 'Only admin can turn the whitelist on or off');\\n        whitelistActive = state;\\n    }\\n    function setTokenAddress(address _tokenAddress) public {\\n        require(msg.sender == admin, 'Only admin can set the token address');\\n        token = IERC20(_tokenAddress);\\n    }\\n    function setMinAmount(uint256 ethamount) public {\\n        require(msg.sender == admin, 'Only admin can set the minimum amount');\\n        minETHAmount = ethamount;\\n    }\\n    function setMaxAmount(uint256 ethamount) public {\\n        require(msg.sender == admin, 'Only admin can set the maximum amount');\\n        maxETHAmount = ethamount;\\n    }\\n    function registerSeedBuyers(address[] memory _buyers, uint256[] memory _amounts) public {\\n        require(msg.sender == admin, 'Only admin can set the maximum amount');\\n        require(_buyers.length == _amounts.length, 'SIZE_MISMATCH');\\n        for(uint256 i=0; i<_buyers.length; i++){\\n            buyers[_buyers[i]] = 1;\\n            purchasedTokens[_buyers[i]] = _amounts[i];\\n        }\\n    }\\n    function endPresale() public {\\n        require(msg.sender == admin, \\\"Only admin can end the presale\\\");\\n        presaleEnded = true;\\n        emit EndPresale();\\n    }\\n    function startClaimPeriod() public {\\n        require(presaleEnded, 'Presale still running');\\n        require(address(token) != address(0), 'EMPTY_TOKEN');\\n        claimStarted = true;\\n        claimStartTime = block.timestamp;\\n        emit ClaimStart();\\n    }\\n    function depositTokens(uint256 amount) public {\\n        require(msg.sender == admin, \\\"Only admin can deposit tokens\\\");\\n        token.transferFrom(msg.sender, address(this), amount);\\n    }\\n    function emergencyRelease() public {\\n        require(msg.sender == admin, \\\"Only admin can release for emergency\\\");\\n        released = true;\\n    }\\n    function airdrop(address[] memory _recipients) public {\\n        require(msg.sender == admin, \\\"Only admin can call airdrop\\\");\\n        for (uint i = 0; i < _recipients.length; i++) {\\n            uint256 amount = getAirdropAmount(_recipients[i]);\\n            token.transfer(_recipients[i], amount);\\n            purchasedTokens[_recipients[i]] - amount;\\n        }\\n    }\\n\\n    // Public accessible\\n    function buyTokens(address referrer) public payable noReentrant {\\n        require(presaleStarted, \\\"Presale is not open yet\\\");\\n        require(!presaleEnded, \\\"Presale has ended\\\");\\n        require(buyers[msg.sender] != 1, 'Seed investors cannot buy in public');\\n        require(msg.value >= minETHAmount, 'Insufficient ETH sent');\\n        require(msg.value <= maxETHAmount, 'ETH amount exceeds limit');\\n\\n        if(isWhitelistActive()){\\n            require(whitelist[msg.sender], 'User is not whitelisted');\\n        }\\n\\n        uint256 tokenAmount = getAmount(msg.value);\\n        require(purchasedTokens[msg.sender] + tokenAmount <= maxTokenAmount, 'Max ticket reached');\\n\\n        purchasedTokens[msg.sender] += tokenAmount;\\n        totalTokenSold += tokenAmount;\\n        buyers[msg.sender] = 2;\\n        address ref = referrer == address(0) ? treasury : referrer;\\n        uint256 referrerReward = msg.value / 10;\\n        if(ref != treasury && ref != msg.sender){\\n            // Transfer referrer reward\\n            (bool refSent, ) = ref.call{value: referrerReward}(\\\"\\\");\\n            require(refSent, \\\"Referrer reward transfer failed\\\");\\n        }else{\\n            referrerReward = 0;\\n        }\\n\\n        // Transfer remaining ETH to treasury\\n        (bool treasSent, ) = treasury.call{value: msg.value - referrerReward}(\\\"\\\");\\n        require(treasSent, \\\"Failed to send ETH to treasury\\\");\\n    }\\n    function claimTokens() public noReentrant {\\n        require(claimStarted, \\\"Claim not available yet\\\");\\n        require(buyers[msg.sender] > 0, 'Not a buyer');\\n\\n        uint256 totalTokens = purchasedTokens[msg.sender];\\n        require(totalTokens > 0, \\\"No tokens to claim\\\");\\n\\n        uint256 tokensAvailable = getAvailableTokens(msg.sender);\\n        require(tokensAvailable > 0, \\\"No tokens available for claim\\\");\\n\\n        claimedTokens[msg.sender] += tokensAvailable;\\n        totalClaimed += tokensAvailable;\\n        token.transfer(msg.sender, tokensAvailable);\\n        emit Claim(msg.sender, tokensAvailable);\\n    }\\n    function getAmount(uint256 ethamount) public view returns (uint256) {\\n        return (ethamount * 1 ether) / tokenPrice;\\n    }\\n    function getAvailableTokens(address user) public view returns (uint256) {\\n        uint256 totalTokens = purchasedTokens[user];\\n        if (totalTokens == 0) return 0;\\n\\n        if(released){\\n            return totalTokens - claimedTokens[user];\\n        }\\n\\n        uint256 immediateRelease = 0;\\n        // IF PUBLIC\\n        if(buyers[user] == 2){\\n            immediateRelease = totalTokens * 20 / 100;\\n        }\\n        uint256 vestedRelease = totalTokens - immediateRelease;\\n        uint256 daysSinceEnd = (block.timestamp - claimStartTime) / 60 / 60 / 24;\\n        uint256 vestedAvailable = (vestedRelease * daysSinceEnd) / 30;\\n        vestedAvailable = vestedAvailable > vestedRelease ? vestedRelease : vestedAvailable;\\n\\n        uint256 totalAvailable = immediateRelease + vestedAvailable;\\n        return totalAvailable - claimedTokens[user];\\n    }\\n    function getTokenPrice() view public returns(uint256) {\\n        return tokenPrice;\\n    }\\n    function secondsToNextRelease() public view returns(uint256) {\\n\\n        if(!claimStarted){\\n            return 0;\\n        }\\n\\n        uint256 secondsInADay = 60 * 60 * 24;\\n        uint256 daysSinceEnd = (block.timestamp - claimStartTime) / secondsInADay;\\n        uint256 nextReleaseTime = claimStartTime + ((daysSinceEnd + 1) * secondsInADay);\\n\\n        return nextReleaseTime - block.timestamp;\\n    }\\n    function isWhitelistActive() public view returns(bool) {\\n        return whitelistActive && block.timestamp < presaleStartTime + whitelistDuration;\\n    }\\n\\n    // Internal\\n    function getAirdropAmount(address seeder) internal view returns(uint256) {\\n        if(purchasedTokens[seeder] > 0){\\n            return purchasedTokens[seeder] * 40 / 100;\\n        }\\n        return 0;\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oneEthInTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ClaimStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EndPresale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StartPresale\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethamount\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWhitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchasedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"registerSeedBuyers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsToNextRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethamount\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethamount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setWhitelistActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startClaimPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenPresale", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000007f64300000000000000000000000000000000000000000000a5bddf5f66c22e7400000000000000000000000000001800b550f4f3e8680c340f3e490a87154fcc0f6b", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}