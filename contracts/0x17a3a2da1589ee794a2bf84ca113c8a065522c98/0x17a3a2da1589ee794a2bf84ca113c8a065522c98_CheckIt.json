{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\ninterface IUniSwap {\r\n\tfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\tfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n\tfunction getAmountsOut(uint amountIn, address[] memory path) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n\tfunction deposit() external payable;\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract CheckIt {\r\n\taddress constant NICE_TOKEN = 0x53F64bE99Da00fec224EAf9f8ce2012149D2FC88;\r\n\taddress constant WETH_TOKEN = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\taddress constant NICE_WETH_PAIR = 0x6D5416567E09b99D7B4b7897129Edb19C2F1305A;\r\n\r\n    \r\n\r\n\tfunction test_transfer_tax() external payable returns(bool) {\r\n        address[] memory buyPath = new address[](2);\r\n        buyPath[0] = WETH_TOKEN;\r\n        buyPath[1] = NICE_TOKEN;\r\n\r\n         address[] memory sellPath = new address[](2);\r\n        sellPath[0] = NICE_TOKEN;\r\n        sellPath[1] = WETH_TOKEN;\r\n\r\n        \r\n\r\n\t\tuint256[] memory buyExpected = IUniSwap(NICE_WETH_PAIR).getAmountsOut(msg.value, buyPath);\r\n\t\tIUniSwap(NICE_WETH_PAIR).swapExactETHForTokens{value: msg.value}(0, buyPath, address(this), block.timestamp + 15);\r\n\t\tuint256 buyReceived = IERC20(NICE_TOKEN).balanceOf(address(this));\r\n\t\t\r\n\t\tIERC20(NICE_TOKEN).approve(address(this), buyReceived);\r\n\t\t\r\n\t\tuint256[] memory sellExpected = IUniSwap(NICE_WETH_PAIR).getAmountsOut(buyReceived, sellPath);\r\n\t\tIUniSwap(NICE_WETH_PAIR).swapTokensForExactETH(0, buyReceived, sellPath, address(this), block.timestamp + 15);\r\n\t\tuint256 sellReceived = IERC20(WETH_TOKEN).balanceOf(address(this));\r\n\t\t\r\n\t\treturn (buyExpected[1] > buyReceived || sellExpected[1] > sellReceived);\r\n\t\t\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"test_transfer_tax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "CheckIt", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa8e762b6b450e18133751c208c5707d57d15b28238839b2ba4615404d9a436f"}