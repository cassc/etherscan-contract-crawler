{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"audit_folder/src/contracts/release/core/controller/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\n/*\\n    This file is part of the ADD3 Protocol.\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"../../extensions/fee-manager/IFeeManager.sol\\\";\\n\\n/// @title IController Interface\\n/// @author Augusto Francesco D'Intino - augusto@add3.io\\n/// @author Nuno Cervaens - nuno@add3.io\\ninterface IController {\\n\\n    enum productTypes{\\n        STATIC_STAKING,\\n        DYNAMIC_STAKING\\n    }\\n\\n        struct Product {\\n        uint8 productType;\\n        bool active;\\n        uint256 availableReward;\\n        address stakingToken;\\n        address operator;\\n        address[] pools;\\n        bool isPairAdapter;\\n    }\\n\\n    struct RegisterProduct{\\n        address productAddress;\\n        address pool;\\n        bool isPairAdapter;\\n        uint256 rewardAmount;\\n        IFeeManager.FeeStrategy feeStrategy;\\n        uint256 deadline;\\n        bytes  signature;\\n    }\\n\\n    struct RemoveProduct {\\n        address productAddress; \\n        uint256 deadline; \\n        bytes signature;\\n    }\\n\\n    struct ProductAmountDeadlineSignature {\\n        address addr; \\n        uint256 amount;\\n        uint256 deadline; \\n        bytes signature;\\n    }\\n    // Checks reward balance for the product\\n    // @param address of the product being used\\n    function productReward(address) external view returns (uint256);\\n\\n    // Checks if a user deposit is doable and the vault has enough tokens to reward that user\\n    // @param amount of tokens being deposited\\n    // @param address of the product being used\\n    // @param balance of the product being used\\n    // @param interest rate of the product being used    \\n    function previewCheckValidDeposit(uint256, uint256, uint256, uint256) external returns (bool);\\n\\n    // Function to claim a reward for a user\\n    // @param productAddress to reduce the tokens available \\n    // @param claimAmount totalTokens to be claimed from the vault \\n    // @modifiers onlyAdd3, nonReentrant\\n    function claimReward( uint256) external returns(uint256);\\n\\n    // Registers new product supported by the controller/vault \\n    // @param contractAddress so that we can add to spend list\\n    // @param rewardAmount so we cant over-subscribe\\n    // @param productTypes so we know what kind if product is being registered, uint8\\n    // @param adapter address\\n    // @param deadline expiry\\n    // @param signature\\n    // @modifiers onlyAdd3, enoughRewards, nonReentrant\\n    function registerProduct(RegisterProduct memory reg) external;\\n\\n    // Removes the product from the controller (users will be told to unstake or exit funds.)\\n    // @param Address of the deployed product\\n    // @param Address of the token\\n    // @param deadline expiry\\n    // @param signature\\n    function removeProduct(RemoveProduct memory) payable external;\\n\\n    // Increments the reward amount for a certain product\\n    // @param Address of the deployed product\\n    // @param Amount to increment the reward, for owner. Has NoReentrant policy\\n    function incrementRewardFromOwner(address, address, uint256, uint256, bytes memory) payable external;\\n    \\n    // Increments the reward amount for a certain product\\n    // @param Address of the deployed product\\n    // @param Amount to increment the reward, for adapter\\n    function incrementReward( uint256) external;\\n    // Decrements the reward amount for a certain product\\n    // @param Address of the deployed product\\n    // @param Amount to increment the reward\\n    function decrementReward(ProductAmountDeadlineSignature memory) payable external;\\n\\n    // Adds Rewards Tokens to the Vault without attaching to any product\\n    // @param Address of the refiller\\n    // @param Amount to increment the Vault\\n    function topUpVault(ProductAmountDeadlineSignature memory) external;\\n\\n    // Extracts Reward Tokens amount the is not pledged as supply for any product\\n    // @param Amount to extract from Vault\\n    function extractFromVault( uint256, uint256, bytes memory) external;\\n    \\n    function addSupplyToProductFromVault(address,uint ) external returns(bool);\\n    \\n    function getEthInputFee() external view returns(uint256 );\\n    \\n    function getVaultAddress() external view returns(address);\\n    \\n    function getFeeStrategy() external view returns(IFeeManager.FeeStrategy memory);\\n\\n    function getDataForQuote(address productAddress, uint inputTokenAmount, bool isOutputRewardToken) external view returns (uint outputTokenAmount);\\n\\n    function updateRate(address productAddress) payable external;\\n\\n    function setOperator(address,address,uint256,bytes memory) external;\\n\\n    function getPrivilegedRegistryAddress() external returns(address);\\n\\n    function getRewardToken() external returns (address);\\n\\n    function amIActive() external returns (bool);\\n}\"\r\n    },\r\n    \"audit_folder/src/contracts/release/core/privilegedaddressregistry/IPrivilegedAddressRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\n/*\\n    This file is part of the ADD3 Protocol.\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\n\\npragma solidity ^0.8.19;\\n\\n/// @title IPrivilegedAddressRegistry Interface\\n/// @author Augusto - ADD3.io\\ninterface IPrivilegedAddressRegistry {\\n\\n    function getPrivilegedAddress() external view returns (address);\\n    function getPrivilegedPenaltyRecipientAddress() external view returns (address);\\n}\\n\\n\"\r\n    },\r\n    \"audit_folder/src/contracts/release/core/utils/ERC712CustomUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\npragma solidity ^0.8.19;\\n\\n/// @author Augusto <Augusto@add3.io>\\n/// @title ERC712CustomUpgradeable\\n/// This abstract class can be inherited and used by all contracts using the EIP712 functions\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport \\\"../privilegedaddressregistry/IPrivilegedAddressRegistry.sol\\\";\\n\\nabstract contract ERC712CustomUpgradeable is EIP712Upgradeable {\\n\\n    using ECDSAUpgradeable for bytes32;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    IPrivilegedAddressRegistry privilegedAddressObj;\\n\\n    error Error_Unauthorized_Signature();\\n    error Error_Unauthorized_Deadline_Expired();\\n\\n    function processSignatureVerification(bytes memory encoded_params, bytes memory signature, uint256 deadline, address verificationAddr) internal{ \\n\\n        if (msg.sender != verificationAddr){\\n            if(block.timestamp > deadline){ revert Error_Unauthorized_Deadline_Expired();}\\n\\n            address signer = ECDSAUpgradeable.recover(digest(encoded_params), signature);\\n            nonces[verificationAddr]++;\\n            if (verificationAddr != signer){ revert Error_Unauthorized_Signature();} } \\n    }\\n\\n    function digest( bytes memory encodedParams ) public view returns (bytes32){\\n        return _hashTypedDataV4(keccak256(encodedParams));\\n    }\\n\\n}\"\r\n    },\r\n    \"audit_folder/src/contracts/release/core/utils/ModifierCustom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\npragma solidity ^0.8.19;\\n\\n/// @author Augusto <Augusto@add3.io>\\n/// @title ModifierCustom\\n/// This abstract class is inherited and used by all contracts which need to limit resetting of the state addresses/variables, which should be set once only.\\n\\nabstract contract ModifierCustom {\\n\\n    enum customTypes{\\n        ADAPTER_NOT_SET,\\n        ARE_RATES_SET,\\n        ARE_RATES_NOT_SET,\\n        FEE_STRATEGY_SET,\\n        PRODUCT_REGISTERED,\\n        PRODUCT_NOT_REGISTERED\\n    }\\n\\n    error Error_Adapter_Not_Set();\\n    error Error_Fee_Strategy_Set();\\n    error Error_Product_Registered();\\n    error Error_Product_Not_Registered();\\n    error Error_Rates_Are_Set_Yet();\\n    error Error_Rates_Are_Not_Set_Yet();\\n\\n    modifier customModifier(bool valueVar, customTypes customType) { \\n        \\n        if(customType == customTypes.ADAPTER_NOT_SET){if (!valueVar) { revert Error_Adapter_Not_Set(); } }\\n\\n        else if(customType == customTypes.ARE_RATES_SET){if (valueVar) { revert Error_Rates_Are_Set_Yet(); } }\\n\\n        else if(customType == customTypes.ARE_RATES_NOT_SET){if (!valueVar) { revert Error_Rates_Are_Not_Set_Yet(); } }\\n\\n        else if(customType == customTypes.FEE_STRATEGY_SET){if (valueVar) { revert Error_Fee_Strategy_Set(); } }\\n\\n        else if(customType == customTypes.PRODUCT_REGISTERED){if (valueVar) { revert Error_Product_Registered(); } }\\n\\n        else if(customType == customTypes.PRODUCT_NOT_REGISTERED){if (valueVar) { revert Error_Product_Not_Registered(); } }\\n\\n        _;\\n    }\\n\\n}\"\r\n    },\r\n    \"audit_folder/src/contracts/release/extensions/fee-manager/IFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\n/*\\n    This file is part of the Add3 protocol.\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity ^0.8.19;\\npragma abicoder v2;\\n\\n/// @title IFeeManager Interface\\n/// @author Add3 <augusto@add3.io>\\ninterface IFeeManager {\\n    struct FeeStrategy{\\n        uint256 add3TxFeeBps;\\n        uint256 adminFeeBps; // percentage reward\\n        uint256 add3FeeBps; // percentage reward\\n        address admin; \\n        address add3;}\\n\\n    function getFeeStrategy(address implementation) external view returns (FeeStrategy memory);\\n\\n    function registerFeeStrategy(FeeStrategy calldata newStrategy, address implementation, uint256 deadline, bytes memory signature) external;\\n    \\n}\\n\"\r\n    },\r\n    \"audit_folder/src/contracts/release/extensions/implementations/StakingBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\n// WARNING this contract has not been independently tested or audited\\n// DO NOT use this contract with funds of real value until officially tested and audited by an independent expert or group\\n\\n/// @title Staking Contract interface \\n\\npragma solidity ^0.8.19;\\n\\n/// @author Add3 - Augusto Francesco D'Intino <augusto@add3.io>\\n/// @review Add3 - Augusto Francesco D'Intino <augusto@add3.io>\\n/// @review Add3 - Nuno Cervaens <nuno@add3.io>\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../../core/utils/ERC712CustomUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../../core/utils/ModifierCustom.sol\\\";\\nimport \\\"../../core/controller/IController.sol\\\";\\nimport \\\"../../libraries/ExtraLib.sol\\\";\\nimport \\\"../fee-manager/IFeeManager.sol\\\";\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nabstract contract StakingBase is ERC712CustomUpgradeable,ModifierCustom,ReentrancyGuardUpgradeable {\\n\\n    //address check for all inputs\\n    using AddressUpgradeable for address;\\n\\n    // Library usage\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // ERC20 contract address\\n    IERC20Upgradeable public erc20StakingToken;\\n    IERC20Upgradeable public erc20RewardToken;\\n\\n    uint8 public productType; // 0 static , 1 dynamic \\n\\n    // Building Blocks of logic\\n    struct HistoryEntry {\\n        uint256 value;\\n        uint256 timestamp;\\n        uint256 cumulatedValue; // since value_0 is in place between timestamp_0 and timestamp_1 it is the summatory of each, value_0* (timestamp_1 - timestamp_0)\\n        }\\n    struct DetailedBalance {\\n        uint256 value;\\n        uint256 timestamp;\\n        uint256 interestHistoryIndex;\\n        }\\n\\n    struct InitializeStruct {\\n        address _erc20_contract_address;\\n        address _controller; \\n        uint256 _cap;\\n        uint256 _startTime;\\n        uint256  _stopTime;\\n        uint256 _minStake;\\n        uint256 _maxStake;\\n        uint64 _penaltyRate; \\n        uint64 _minLockDays;\\n        bool _itAutocompounds;\\n    }\\n\\n    struct StakingStruct {\\n        uint256 amount;\\n        uint256 minRewards;\\n    }\\n\\n    HistoryEntry[] public historyInterestRate; // here \\\"value\\\" is the interest rate, it has to be passed in the form of bps , 1 bps = 0.01%\\n    \\n    function ratesHistory() public view returns (HistoryEntry[] memory){\\n        return historyInterestRate;\\n    }\\n\\n    // this is contract staked tokens Balance \\n    uint256 public contractStakedBalance;\\n    // rewards balance - NOTE this is populated only when non autocompound contract\\n    uint256 public contractRewardsBalance;\\n\\n    DetailedBalance public globalUnmaterializedRewards;\\n    // user balances history\\n    mapping(address => uint256) public rewardsBalance;\\n\\n    function balanceOf(address user) public view virtual returns (uint256){}\\n\\n    // staking policy & terms\\n    uint64 public penaltyRate; // has to be in bps\\n    uint64 public minLockSeconds;\\n    uint256 public cap; // !== 0 in case of capped contract\\n    uint256 public startTime;\\n    uint256 public stopTime;\\n    uint256 public minStake;\\n    uint256 public maxStake;\\n    \\n    mapping(address => uint256) public stakeTime; \\n    mapping(address => bool) public isBlacklisted; \\n\\n    event Warning_Failed_To_Add(uint256 amount);\\n    event DesiredAPYset(uint256 apy);\\n\\n    event RewardHarvested(address to, uint256 amount);\\n    event RewardsOutOfStock(address to, uint256 amount);\\n    event TokensUnstaked(address to, uint256 amount);\\n    event TokensWithdrawn(address to, uint256 amount, uint256 rewards);\\n    event Refund(address indexed sender, uint256 amount);\\n\\n    // set of boolean varaibles to prevent reentrancy\\n    bool public locked;\\n    bool internal areRatesSet;\\n\\n    // staking type defining variables\\n    bool public itAutocompounds;\\n    bool public isRewardSameToken;\\n\\n    IController public Controller;\\n\\n    function setInterestRate(uint256 apy ,uint256 deadline,bytes memory signature) payable external virtual{}\\n\\n    // overridden in implementing contracts\\n    function updateRate() external onlyController virtual{}\\n    function stakeTokens(StakingStruct memory stake) payable external virtual{}\\n    function getRewardsAndAccountThem(uint256 minRewards) internal virtual returns (uint rewards){} \\n    function unstakeTokens(StakingStruct memory unstake) payable external virtual{}\\n\\n    function _withdrawLogic(uint256 amount) internal virtual {}\\n\\n    function _depositLogic(uint256 amount) internal virtual {}\\n\\n    function _harvestAndWithdrawRewards(uint256 minRewards) internal customModifier(areRatesSet, customTypes.ARE_RATES_NOT_SET) onlyWhenInteractionEnabled(false) onlyAfterStaked() onlyWhitelisted returns (uint amountRewards){\\n            uint amount = rewardsBalance[msg.sender];\\n            getRewardsAndAccountThem(minRewards <= amount ? 0 : minRewards - amount);\\n            amountRewards = reduceAndZeroRewardsBalance();\\n            erc20RewardToken.safeTransfer(msg.sender, amountRewards); \\n        }\\n    // errors\\n    error Error_Only_Owner();\\n    error Error_Not_Staked_Yet();\\n    error Error_Blacklisted_User();\\n    error Error_Oustide_Stake_Range();\\n    error Error_Already_In_Desired_List_State();\\n    error Error_No_Fee_Sent_To_Add3();\\n    error Error_No_Fee_Sent_To_Privileged_Address();\\n    error Error_transferAccidentallyLockedTokens_Token_address_Invalid();\\n    error Error_transferAccidentallyLockedTokens_Token_address_ERC20();\\n    error Error_No_Reentrancy();\\n    error Error_Invalid_StakingAdapter_Address();\\n    error Error_Global_Unmaterialized_Rewards_Not_Initialized();\\n    error Error_Too_High_Materialized_Reward();\\n    error Error_Only_Non_Autocompound();\\n    error Error_Only_If_Dynamic_Staking();\\n    error Error_Only_Controller_Authorized();\\n    error Error_Utilization_Levels_Not_Strictly_Ascendant();\\n    error Error_Rates_Levels_Not_Strictly_Descendant();\\n    error Error_Fixed_Staking_Has_One_Rate_Only();\\n    error Error_Not_Equal_Rates_Length();\\n    error Error_Not_Valid_Rates_Length();\\n    error Error_Cannot_Withdraw_Before_Lock_Period_Elapsed_Or_If_Not_Staked();\\n    error Error_Interaction_Not_Enabled();\\n    error Error_No_More_Than_Hundred_Percent_Rate();\\n    error Error_No_Fee_Value();\\n    error Error_Controller_Get_Rewards();\\n    error Error_Rewards_For_Product_Out_Of_Stock(address due_to,uint256 ExpectedReward,uint256 ActualReward);\\n\\n    // Modifier\\n    /**\\n     * @dev Prevents reentrancy\\n     */\\n    modifier noReentrant() {\\n        if (locked){ revert Error_No_Reentrancy(); }\\n        locked = true;\\n        _;\\n        locked = false; }\\n\\n\\n    modifier onlyAfterStaked(){\\n        // cannot unstake without having staked\\n        if (stakeTime[msg.sender] == 0 ){ revert Error_Not_Staked_Yet();}\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted(){\\n        if (isBlacklisted[msg.sender]){ revert Error_Blacklisted_User();}\\n        _;\\n    }\\n    \\n    // since this is added to each payable function using \\n    // \\\"address(this).balance\\\" is preferable than \\\"msg.value\\\",\\n    // since it enforces the balance to be clean\\n    // by eventual division residuals at each time\\n    modifier onlyWhenInteractionEnabled(bool withEnd){  \\n        if (block.timestamp < startTime || ( withEnd && stopTime != 0 && block.timestamp > stopTime)){ revert Error_Interaction_Not_Enabled();}\\n\\n        (uint add3TxFee,address add3wallet) = getFeeStrategy();\\n        (bool sentAdd3, uint feeToAdd3) = sendToAdd3(add3TxFee,add3wallet);\\n        uint feeToPrivileged = address(this).balance;\\n        if (!sentAdd3 || feeToAdd3 == 0){ revert Error_No_Fee_Sent_To_Add3();}\\n            (bool sentPrivileged, ) = payable(privilegedAddressObj.getPrivilegedAddress()).call{value: feeToPrivileged}(\\\"Fee_Owner\\\");\\n            if (!sentPrivileged){ revert Error_No_Fee_Sent_To_Privileged_Address();}\\n        _;\\n    }\\n\\n    modifier feeReturner(){\\n        (,address add3wallet) = getFeeStrategy();\\n        (bool sentAdd3,uint feeToAdd3) = sendToAdd3(ExtraLib.PERCENT_DIVISOR,add3wallet);\\n        if (!sentAdd3 || feeToAdd3 == 0){ revert Error_No_Fee_Sent_To_Add3();}\\n        _;\\n    }\\n\\n    function sendToAdd3(uint add3Fee, address add3) internal returns(bool sentAdd3,uint feeToAdd3){\\n        uint256 ethInputFee = Controller.getEthInputFee();\\n        // Refund if user sent more than it should\\n        if (msg.value > ethInputFee) {\\n            uint256 refundAmount = msg.value - ethInputFee;\\n\\n            // Transfer the refund amount to the sender\\n            (bool refunded,) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\n\\n            // Emit the refund event\\n            if (refunded) {\\n                emit Refund(msg.sender, refundAmount);\\n            }\\n        }\\n        if (address(this).balance < ethInputFee ){ revert Error_No_Fee_Value();}\\n        feeToAdd3 = address(this).balance * add3Fee / ExtraLib.PERCENT_DIVISOR;\\n        (sentAdd3,) = payable(add3).call{value: feeToAdd3}(\\\"FeeAdd3\\\");\\n    }\\n\\n    modifier onlyController(){\\n        if ( msg.sender != address(Controller)){ revert Error_Only_Controller_Authorized();}\\n        _;\\n    }\\n\\n    modifier minMaxStake(uint amount ){\\n        if (( maxStake != 0 && amount > maxStake ) || (minStake != 0 && amount < minStake)){ revert Error_Oustide_Stake_Range();}\\n        _;\\n    }\\n\\n    modifier onlyOwner{if (msg.sender!=privilegedAddressObj.getPrivilegedAddress()){ revert Error_Only_Owner(); } _;}\\n\\n    modifier onlyAuthorizedSetStakingAdapter(address stakingAdapter, uint256 deadline,bytes32 _typehash, bytes memory signature) {\\n        address privilegedOwner = privilegedAddressObj.getPrivilegedAddress();\\n        processSignatureVerification(abi.encode(_typehash, stakingAdapter, privilegedOwner,nonces[privilegedOwner],deadline), signature, deadline, privilegedOwner);\\n        _; }\\n\\n    modifier onlyAuthorizedBlackOrWhiteList(address recipient, bool toBlackList, uint deadline, bytes32 _typehash, bytes memory signature){\\n        address privilegedOwner = privilegedAddressObj.getPrivilegedAddress();\\n        processSignatureVerification(abi.encode(_typehash, recipient, toBlackList, privilegedOwner,nonces[privilegedOwner],deadline), signature, deadline, privilegedOwner);\\n        _;\\n    }\\n\\n    modifier onlyAuthorizedSetInterestRate(uint256 apy , uint256 deadline,bytes32 _typehash, bytes memory signature) {\\n        // we do not do any check here , apy can be 0% or any value\\n        // It will fail che stake check if too high\\n        // 'apy' has to be provided in bps 100 bps = 1%\\n        address privilegedOwner = privilegedAddressObj.getPrivilegedAddress();\\n        processSignatureVerification(abi.encode(_typehash, apy, privilegedOwner,nonces[privilegedOwner],deadline), signature, deadline, privilegedOwner);\\n        _; }\\n\\n    function setLocked(bool isLocked) external onlyController {\\n        locked = isLocked;\\n    }\\n\\n    function getFeeStrategy() internal view returns (uint add3TxPerc , address add3address) {\\n        IFeeManager.FeeStrategy memory strategy = Controller.getFeeStrategy();\\n        add3TxPerc = strategy.add3TxFeeBps;\\n        add3address = strategy.add3;\\n    }\\n\\n    function _harvestRewardsFromVault(uint256 rewards) internal virtual returns(uint256 realRewards) {\\n        uint availableHarvest = rewards< Controller.productReward(address(this)) ? rewards : Controller.productReward(address(this));\\n        if (availableHarvest < rewards) { \\n            emit RewardsOutOfStock(msg.sender, rewards);\\n            revert Error_Rewards_For_Product_Out_Of_Stock(msg.sender,rewards,availableHarvest);\\n        }\\n\\n        realRewards = controllerGetRewards(availableHarvest);\\n        \\n        emit RewardHarvested(msg.sender, realRewards);\\n    }\\n\\n    function getOutputFromInput( uint inputAmount, bool isOutputRewardToken) internal view returns (uint){\\n        if (!isRewardSameToken){\\n            return Controller.getDataForQuote(address(this),inputAmount,isOutputRewardToken);\\n        }\\n        return inputAmount;\\n    }\\n\\n    function controllerGetRewards(uint256 amount) internal returns (uint256){\\n        try Controller.claimReward( amount) returns(uint256 rewards ) { return rewards; }\\n        catch (bytes memory) { revert Error_Controller_Get_Rewards(); }\\n    }\\n\\n// does not need other modifiers than noReentrant since \\\"_harvestAndWithdrawRewards\\\" has them yet, so implicitly they are set yet\\n    function _withdrawAll(uint256 minRewards) internal {\\n        uint256 amountRewards = _harvestAndWithdrawRewards(minRewards);\\n        uint256 amount = balanceOf(msg.sender) ;\\n        \\n        _withdrawLogic(amount);    \\n            // subtract from contractRewardsBalance\\n        emit TokensWithdrawn(msg.sender, amount , amountRewards); \\n    }\\n    function harvestAndWithdrawRewards(uint256 minRewards) payable noReentrant external virtual returns (uint ) {\\n        return _harvestAndWithdrawRewards(minRewards);\\n    } \\n    \\n    function autoCompoundAccounting(uint rewards) internal returns(uint ){\\n        if (!itAutocompounds){\\n            contractRewardsBalance += rewards;\\n            rewardsBalance[msg.sender] += rewards;\\n            return 0;\\n        } else { return rewards;}\\n    }\\n\\n    function reduceAndZeroRewardsBalance()internal returns (uint){\\n        uint amount = rewardsBalance[msg.sender];\\n        contractRewardsBalance -= amount;\\n        rewardsBalance[msg.sender] = 0;\\n        return amount;\\n    }\\n\\n    function getRewardsValue(StakingBase.DetailedBalance memory maturingBalance, HistoryEntry[] memory historyInterestRateVar,uint256 blockTimestamp,uint256 stakeTimeUser,uint256 minLockSecondsVar,bool isUser,bool isDynamicType) internal pure returns (uint ) {\\n        uint256 timeElapsed = blockTimestamp - maturingBalance.timestamp;\\n        if ( timeElapsed > 0){\\n            { // scope to avoid stack too deep errors\\n                uint256 timeFromStakeToMinLock = stakeTimeUser + minLockSecondsVar;\\n                if (isUser && !isDynamicType && maturingBalance.timestamp >= timeFromStakeToMinLock ){\\n                    timeElapsed = 0;\\n                }\\n                // maturingBalance between stakeTime and timeFromStakeToMinLock\\n                // timeElapsed should use timeFromStakeToMinLock as reference\\n                else if (isUser && !isDynamicType && blockTimestamp > timeFromStakeToMinLock ){\\n                    timeElapsed = timeFromStakeToMinLock - maturingBalance.timestamp;\\n                }\\n            }\\n            uint256 rate = historyInterestRateVar[historyInterestRateVar.length-1].value * timeElapsed;\\n            \\n            if (isDynamicType && maturingBalance.interestHistoryIndex < historyInterestRateVar.length-1){\\n            uint256 dCumulated = 0;\\n                        // Here is used the cumulatedVaue in the HistoryEntry struct\\n                if (historyInterestRateVar.length-1 - maturingBalance.interestHistoryIndex >= 2){\\n                    dCumulated = historyInterestRateVar[historyInterestRateVar.length -1].cumulatedValue - historyInterestRateVar[maturingBalance.interestHistoryIndex+1].cumulatedValue;\\n                }\\n                rate = historyInterestRateVar[maturingBalance.interestHistoryIndex].value*(historyInterestRateVar[maturingBalance.interestHistoryIndex+1].timestamp - maturingBalance.timestamp) + historyInterestRateVar[historyInterestRateVar.length -1].value * (blockTimestamp - historyInterestRateVar[historyInterestRateVar.length -1].timestamp) + dCumulated;\\n            }\\n            return (maturingBalance.value * rate)/ (uint256(ExtraLib.SECONDS_PER_YEAR) * uint256(ExtraLib.PERCENT_DIVISOR));\\n        }else{\\n            return 0; // no time elapsed since last balance update -> no reward gained\\n        }\\n\\n    }\\n\\n    function blackListAddress(address recipient, uint deadline, bytes memory signature) noReentrant external payable feeReturner onlyAuthorizedBlackOrWhiteList(recipient, true, deadline, ExtraLib._BLACK_OR_WHITE_LIST_TYPEHASH, signature) {\\n        if (isBlacklisted[recipient]){ revert Error_Already_In_Desired_List_State();}\\n        isBlacklisted[recipient] = true;\\n    }\\n\\n    function whiteListAddress(address recipient, uint deadline, bytes memory signature) noReentrant external payable feeReturner onlyAuthorizedBlackOrWhiteList(recipient, false, deadline, ExtraLib._BLACK_OR_WHITE_LIST_TYPEHASH, signature) {\\n        if (!isBlacklisted[recipient]){ revert Error_Already_In_Desired_List_State();}\\n        isBlacklisted[recipient] = false;\\n    }\\n\\n    /// @dev Transfer accidentally locked ERC20 tokens.\\n    /// @param token - ERC20 token address.\\n    /// @param amount of ERC20 tokens to remove.\\n    function transferAccidentallyLockedTokens(address token, uint256 amount) public noReentrant onlyOwner payable feeReturner {\\n        // This function can not access the official timelocked tokens; just other random ERC20 tokens that may have been accidently sent here\\n        if(IERC20Upgradeable(token) == erc20StakingToken){ revert Error_transferAccidentallyLockedTokens_Token_address_ERC20(); }\\n        // Transfer the amount of the specified ERC20 tokens, to the owner of this contract\\n        IERC20Upgradeable(token).safeTransfer(msg.sender, amount);}\\n\\n    function supportsInterface(bytes4 interfaceId) external virtual view returns (bool);\\n\\n}\\n\\n\"\r\n    },\r\n    \"audit_folder/src/contracts/release/extensions/implementations/StakingModuleDynamic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\n// WARNING this contract has not been independently tested or audited\\n// DO NOT use this contract with funds of real value until officially tested and audited by an independent expert or group\\n\\n/// @author Add3 - Augusto Francesco D'Intino <augusto@add3.io>\\n/// @review Add3 - Augusto Francesco D'Intino <augusto@add3.io>\\n/// @review Add3 - Nuno Cervaens <nuno@add3.io>\\n\\n// How it works. Stake made by user is held in the contract. When user stakes more, balance is updated in contract.\\n// when user unstakes rewards are sent from vault + contract balance lessened.\\n// 100% of rewards are transferred every unstake is the easiest way to handle the reward + stake seperation\\n// otherwise we have to also send a % of rewards to distribute.\\n// contract should encode and send payee address & reward amount.\\n// or we can separate your vault rewards into a different withdraw call.\\n\\n\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./StakingBase.sol\\\";\\n\\ncontract StakingModuleDynamic is StakingBase, UUPSUpgradeable {\\n\\n    //address check for all inputs\\n    using AddressUpgradeable for address;\\n    mapping(address => DetailedBalance[]) public balance;\\n\\n    // Library usage\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // supports interface id\\n    bytes4 private constant _INTERFACE_ID_STAKING = type(StakingBase).interfaceId;\\n    uint16 public maxPenaltyBalanceArrayLength;\\n\\n    // Events\\n    event TokensStaked(address from, uint256 amount);\\n    event NewPenaltyMaxBalanceArrayLength(uint16 newPenaltyMaxBalanceArrayLength);\\n\\n    error Error_Token_Not_Valid();\\n    error Error_stakeToken_Not_Enough_VaultReward_For_Stake();\\n    error Error_unstakeToken_Insufficient_Token();\\n    error Error_withdrawLogic_Penalty_Transfer_Failed();\\n    error Error_Invalid_MinLockin_Period();\\n    error Error_Invalid_Penalty_Percentage();\\n    error Error_Invalid_Controller_Address();\\n    error Error_Cap_Limit_Exceeded();\\n    error Error_Cannot_Autocompound_Different_Token();\\n    error Error_Not_Refunded();\\n    error Error_Controller_Add_Rewards();\\n    error Error_Min_Stake_Higher_Than_Max_Stake();\\n\\n\\n    ///@dev Initializes the Staking contract with all parameters to setup the contract.\\n   function initialize(\\n    InitializeStruct memory InitializeData\\n    ) external initializer {\\n        if (!InitializeData._controller.isContract()){ revert Error_Invalid_Controller_Address(); }\\n        if (InitializeData._maxStake != 0 ){maxStake =InitializeData._maxStake ;}\\n        if (InitializeData._minStake != 0 ){minStake = InitializeData._minStake; }\\n        if (minStake != 0 && maxStake != 0 && minStake > maxStake){\\n            revert Error_Min_Stake_Higher_Than_Max_Stake();\\n        }   \\n        Controller = IController(InitializeData._controller);    \\n        privilegedAddressObj = IPrivilegedAddressRegistry(Controller.getPrivilegedRegistryAddress());\\n\\n        // Set the Token contract address \\n        if (!InitializeData._erc20_contract_address.isContract()){ revert Error_Token_Not_Valid(); }\\n        itAutocompounds = InitializeData._itAutocompounds;\\n\\n        erc20RewardToken = IERC20Upgradeable(Controller.getRewardToken());\\n        erc20StakingToken = IERC20Upgradeable(InitializeData._erc20_contract_address);\\n        isRewardSameToken = address(erc20RewardToken) == address(erc20StakingToken);\\n        if (!isRewardSameToken && itAutocompounds){ revert Error_Cannot_Autocompound_Different_Token();}\\n        \\n        // set penalty rate and min lock days\\n        \\n        penaltyRate = InitializeData._penaltyRate;\\n        if (penaltyRate == 0 || penaltyRate>10000){ revert Error_Invalid_Penalty_Percentage(); }\\n        \\n        if(InitializeData._minLockDays > (365*5 +1)){ revert Error_Invalid_MinLockin_Period();}\\n        minLockSeconds = InitializeData._minLockDays * 86400 seconds;\\n\\n        cap = InitializeData._cap;\\n        \\n        // set start and stop time for staking, if dynamic no stop time\\n        startTime = InitializeData._startTime;\\n        // no need to use stop time since contract is perpetual\\n        // Initialize the reentrancy variable to not locked\\n        productType = 1;\\n        locked = false;\\n        maxPenaltyBalanceArrayLength = 600;\\n        //EIP712 init\\n        __EIP712_init(\\\"Staking Contract\\\", \\\"3\\\");\\n   }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n   ///@dev required by the OZ UUPS module\\n   function _authorizeUpgrade(address) internal override onlyOwner{}\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        FUNCTIONS/COMPONENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev checking interface support before registering the address\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return interfaceId == _INTERFACE_ID_STAKING;\\n    }\\n\\n    // this function is used to set the desired rate\\n    // if the contract is fixed stake , this function can be called only once\\n    // instead if dynamic stake, this can be called freely by the owner\\n    // in this particular case will be changed the first entry in the historyInterestRate array\\n    // indeed this value is never applied to balances, even the first balance will start to earn rewards with the apy it causes to shift\\n    // so this value is used as pivot to control the behaviour of the contract\\n    // indeed if historyInterestRate[].value is set different from zero (see _previewApy method)\\n    // if will automatically adjust the apy keeping it close to the desired value \\n    // for this the supply pledged to this contract is automatically added taking from the extra tokens present in Vault\\n    // this creates a resistance level where the contract doesn't go below the desired apy\\n    // the resistance is passed by if the Vault goes out of stock of Reward tokens, \\n    // the apy will decrease and the relative Warnings are emitted\\n    // NOTE: warnings (and not errors) are trown because this doesn't break the logic but only requires an action from the owner\\n    function setInterestRate( uint256 apy ,uint256 deadline,bytes memory signature) public override noReentrant payable feeReturner onlyAuthorizedSetInterestRate(apy,deadline, ExtraLib._SET_INTEREST_RATE_TYPEHASH , signature) { \\n        areRatesSet = true;\\n        if (historyInterestRate.length == 0){\\n            pushHistoryRate(apy,0);\\n            updateGlobalUnmaterializedTimestamp();\\n            globalUnmaterializedRewards.interestHistoryIndex = 0;    \\n        } else {\\n            updateHistoyRateValue(0,apy);\\n            historyInterestRate[0].timestamp = block.timestamp;\\n            _updateUnmaterializedRewards(0);\\n            updateDynamic(0);\\n        }\\n    }\\n\\n    function _depositLogic(uint256 amt) internal override {\\n        updateDynamic(amt);\\n\\n        contractStakedBalance += amt;\\n        pushInBalance(balanceOf(msg.sender) + amt);\\n    }\\n\\n    function _withdrawLogic(uint256 amount) internal override {\\n\\n        uint256 calculatedAmount = calculateAmount(amount);\\n                \\n        contractStakedBalance -= amount;\\n\\n        updateDynamic(0);\\n        pushInBalance(balanceOf(msg.sender) - amount);\\n        \\n        erc20StakingToken.safeTransfer(msg.sender, calculatedAmount); \\n        }\\n    \\n    function balanceOf(address user) public view override returns(uint){\\n        return balance[user][balance[user].length-1].value;\\n    }\\n\\n    function balanceOfHistory(address user) external view returns(DetailedBalance[] memory){\\n        return balance[user];\\n    }\\n\\n    /// @dev Allows the contract owner to allocate official ERC20 tokens to each future recipient (only one at a time).\\n    /// @param stake to allocate to recipient.\\n    /// on stake set up interest\\n    function stakeTokens(StakingStruct memory stake) public payable override noReentrant onlyWhitelisted customModifier(Controller.amIActive(), customTypes.ADAPTER_NOT_SET) customModifier(areRatesSet, customTypes.ARE_RATES_NOT_SET) onlyWhenInteractionEnabled(false) minMaxStake(stake.amount)  {\\n        // fixed staking allows to stake again only after the complete withdraw of the staking balance\\n        uint stakingAmount = stake.amount;\\n        uint minRewards = stake.minRewards;\\n        \\n        // gets the rewards from the vault -> modifies the reserves of Tokens in Vault -> this interacts with external contracts\\n        uint rewards = autoCompoundAccounting(getNetRewards(minRewards));          \\n        \\n        \\n        // if contract is capped (cap > 0) check if future balance will not exceed cap value \\n        uint tempStake = stakingAmount + rewards;\\n        if (cap > 0 && contractStakedBalance + tempStake > cap){\\n            revert Error_Cap_Limit_Exceeded();\\n        }\\n        stakeTime[msg.sender] = block.timestamp;\\n\\n        erc20StakingToken.safeTransferFrom(msg.sender, address(this), stakingAmount); \\n                \\n        _depositLogic(tempStake);\\n        \\n        emit TokensStaked(msg.sender, tempStake); \\n    }\\n\\n    /// @dev Allows user to unstake tokens after the correct time period has elapsed\\n    /// @param unstake - the amount to unlock (in wei)\\n    function unstakeTokens(StakingStruct memory unstake) public payable override noReentrant onlyWhitelisted customModifier(areRatesSet, customTypes.ARE_RATES_NOT_SET) onlyWhenInteractionEnabled(false) onlyAfterStaked() {\\n\\n        uint rewards = getRewardsAndAccountThem(unstake.minRewards);\\n        \\n        if(balanceOf(msg.sender) + rewards  < unstake.amount) { revert Error_unstakeToken_Insufficient_Token(); }\\n\\n        _withdrawLogic(unstake.amount);\\n        \\n        emit TokensUnstaked(msg.sender, unstake.amount); \\n    }\\n\\n    function withdrawAll(uint256 minRewards) external payable noReentrant {\\n        _withdrawAll(minRewards);\\n    }\\n\\n    function getRewardsAndAccountThem(uint256 minRewards) internal override returns (uint rewards){\\n        rewards = autoCompoundAccounting(getNetRewards(minRewards));          \\n        contractStakedBalance += rewards;\\n        pushInBalance(balance[msg.sender][balance[msg.sender].length-1].value + rewards);\\n    }\\n    function getNetRewards(uint256 minRewards) internal returns (uint ){\\n        uint rewards = _calculateRewards(true,msg.sender);\\n        if (minRewards != 0) {\\n            require(rewards >= minRewards, 'Minimum expected rewards can not be fulfilled.');\\n        }\\n        // update unmaterialized rewards\\n        _updateUnmaterializedRewards(rewards);\\n        \\n        // move from vault \\n        return _harvestRewardsFromVault(rewards);\\n    }\\n\\n    function _calculateRewards(bool isUser,address user) internal virtual returns (uint256){\\n        DetailedBalance memory maturingBalance;\\n        if (isUser){\\n            if (stakeTime[msg.sender] == 0){\\n            pushInBalance(0);\\n            }\\n            maturingBalance = balance[user][balance[user].length-1];\\n        } else {\\n            maturingBalance = DetailedBalance(contractStakedBalance,globalUnmaterializedRewards.timestamp,globalUnmaterializedRewards.interestHistoryIndex);\\n        }\\n\\n        if(maturingBalance.value == 0) { return 0; } // no balance maturing rewards -> no rewards\\n        return getOutputFromInput(getRewardsValue(maturingBalance,historyInterestRate,block.timestamp,stakeTime[user],minLockSeconds,isUser,true), true);\\n    }\\n\\n    function updateGlobalUnmaterializedTimestamp()internal{\\n        globalUnmaterializedRewards.timestamp = block.timestamp;\\n    }\\n    function updateHistoyRateValue(uint position,uint apy) internal {\\n        historyInterestRate[position].value = apy;\\n    }\\n    function pushHistoryRate(uint apy, uint newCumulatedValue) internal {\\n        historyInterestRate.push(HistoryEntry(apy,block.timestamp,newCumulatedValue));\\n    }\\n    function pushInBalance(uint amount ) internal {\\n        balance[msg.sender].push(DetailedBalance(amount,block.timestamp,historyInterestRate.length-1));\\n    }\\n    function _updateUnmaterializedRewards(uint256 materializedRewards) internal {\\n        uint256 globalRewardsUpdate = _calculateRewards(false,msg.sender);\\n        \\n        updateGlobalUnmaterializedTimestamp();\\n        uint nextGlobalSum = globalUnmaterializedRewards.value + globalRewardsUpdate;\\n        if (nextGlobalSum >= materializedRewards){\\n            globalUnmaterializedRewards.value = nextGlobalSum - materializedRewards;\\n        } else {\\n            globalUnmaterializedRewards.value = 0;\\n        }\\n        \\n    }\\n\\n    function updateRate() external override onlyController {\\n        _updateUnmaterializedRewards(0);\\n        updateDynamic(0);\\n    }\\n\\n    function updateDynamic(uint extraBalance) internal {\\n        _updateRatesHistory(_previewApy(contractStakedBalance+extraBalance,globalUnmaterializedRewards.value));\\n        globalUnmaterializedRewards.interestHistoryIndex = historyInterestRate.length-1;\\n    }\\n    \\n\\n    function _updateRatesHistory(uint256 apy) internal {\\n        uint historyLength = historyInterestRate.length;\\n        HistoryEntry storage lastEntry = historyInterestRate[historyLength-1];\\n        if (historyLength > 0 && block.timestamp == lastEntry.timestamp ){\\n            updateHistoyRateValue(historyLength-1,apy);\\n        } else if(lastEntry.value != apy)  {\\n            uint newCumulatedValue = lastEntry.cumulatedValue + lastEntry.value*(block.timestamp - lastEntry.timestamp);\\n            // push new apy in history only if is different than actual\\n            pushHistoryRate(apy,newCumulatedValue);\\n        }\\n    }\\n\\n    // this method is used only in dynamic stake case \\n    // if the desired apy (the apy passed calling setInterestRate ) is not zero\\n    function _previewApy(uint256 currentDemand, uint256 rewards)  internal returns (uint256){ \\n        if (  currentDemand == 0 ) { return ExtraLib.PERCENT_DIVISOR; }\\n        uint desiredApy = historyInterestRate[0].value;\\n        uint256 productRewards = Controller.productReward(address(this));\\n\\n        if (rewards > productRewards){\\n            if(!Controller.addSupplyToProductFromVault(address(this),rewards-productRewards)){ \\n                // here try to increase the productRewards or return zero \\n                return 0;\\n            }\\n            productRewards = Controller.productReward(address(this));\\n        }\\n        if (desiredApy != 0 && desiredApy > getOutputFromInput(productRewards - rewards, false)*ExtraLib.PERCENT_DIVISOR / currentDemand ) {\\n            uint amountToAdd = rewards + getOutputFromInput(desiredApy * currentDemand/ExtraLib.PERCENT_DIVISOR, true) - productRewards;\\n            if (!Controller.addSupplyToProductFromVault(address(this),amountToAdd)){\\n                emit Warning_Failed_To_Add(amountToAdd);\\n            } else {\\n                productRewards = Controller.productReward(address(this));\\n            }\\n        }\\n\\n        uint newSupply = productRewards; // at this point supply is >= of rewards,since it would have return zero at step before\\n        uint expecteReturneddApy = getOutputFromInput((newSupply - rewards)*ExtraLib.PERCENT_DIVISOR,false) / (currentDemand);\\n        if (expecteReturneddApy > ExtraLib.PERCENT_DIVISOR){ return ExtraLib.PERCENT_DIVISOR;}\\n        return  expecteReturneddApy; \\n    }\\n    function getLastOutOfLockAndUnstakedDuringLock(DetailedBalance[] storage balanceArray)internal view returns (uint lastOutOfLockSecondsStake,uint unstakedDuringminLockSeconds){\\n        uint balanceLength = balanceArray.length < maxPenaltyBalanceArrayLength ? balanceArray.length : maxPenaltyBalanceArrayLength;\\n                for (uint256 i = 0; i < balanceLength; i++){\\n                    if(block.timestamp - balanceArray[balanceLength-1-i].timestamp >= minLockSeconds){\\n                        lastOutOfLockSecondsStake = balanceArray[balanceLength-1-i].value;\\n                        break;\\n                    }\\n                    if (balanceLength > 1 && i < balanceLength -1){\\n                        uint prevStepBalance = balanceArray[balanceLength-2-i].value;\\n                        uint stepBalance =  balanceArray[balanceLength-1-i].value; \\n                        if (stepBalance < prevStepBalance ){\\n                            unstakedDuringminLockSeconds +=  prevStepBalance - stepBalance;\\n                        }\\n                    }\\n                }\\n    }\\n    function calculateAmount(uint amount) internal returns (uint calculatedAmount){\\n            if (block.timestamp - stakeTime[msg.sender] < minLockSeconds){\\n                // penalty deducted from that amount that is under stake minLockSeconds\\n                // to do that whould go back in the time and check the last non in LockSeconds Amount\\n                // get the last stake amount\\n                (uint256 lastOutOfLockSecondsStake,uint256 unstakedDuringminLockSeconds) = getLastOutOfLockAndUnstakedDuringLock(balance[msg.sender]); \\n                // here we have to calculate eligible amount for penalty\\n                // this logic serves to apply penalty only that part of the balance \\n                // not yet passed the minLockSeconds period\\n                uint deducibleOfAmount;\\n                uint penaltyApplicableAmount;\\n                if( lastOutOfLockSecondsStake > unstakedDuringminLockSeconds ){deducibleOfAmount = lastOutOfLockSecondsStake - unstakedDuringminLockSeconds;} \\n                \\n                if (deducibleOfAmount <= amount){penaltyApplicableAmount = amount - deducibleOfAmount;}\\n                uint256 maxPenaltyUnshifted = (penaltyRate) * penaltyApplicableAmount;\\n                uint256 maxPenaltyIncurred = maxPenaltyUnshifted/(ExtraLib.PERCENT_DIVISOR);\\n                calculatedAmount = amount - maxPenaltyIncurred; \\n                if (erc20StakingToken.allowance(address(this),Controller.getVaultAddress()) < maxPenaltyIncurred){\\n                    erc20StakingToken.approve(Controller.getVaultAddress(),ExtraLib.MAX_INT);\\n                }\\n                // here in case of different token should set somewhere and convert it\\n                // or set in a recipeint for these\\n                // or refund some of the rewards got yet in proportion\\n                if (isRewardSameToken ){\\n                    if (!controllerAddRewards(maxPenaltyIncurred)){\\n                        revert Error_withdrawLogic_Penalty_Transfer_Failed(); \\n                    }\\n                } else {\\n                    erc20StakingToken.safeTransfer(privilegedAddressObj.getPrivilegedPenaltyRecipientAddress(),maxPenaltyIncurred);\\n                }        \\n            } else {\\n                calculatedAmount = amount;\\n            }   \\n    } \\n    function controllerAddRewards(uint256 amount) internal returns (bool){\\n        try Controller.incrementReward( amount) //dummy last two values for eip712 abstraction\\n        { return true; }\\n        catch (bytes memory) { revert Error_Controller_Add_Rewards(); }\\n    }\\n\\n    modifier onlyAuthorizedUpdatePenalyMaxBalanceArrayLength(uint16 newPenaltyMaxBalanceArrayLength, uint256 deadline,bytes32 _typehash, bytes memory signature) {\\n        address privilegedOwner = privilegedAddressObj.getPrivilegedAddress();\\n        processSignatureVerification(abi.encode(_typehash, newPenaltyMaxBalanceArrayLength, privilegedOwner,nonces[privilegedOwner],deadline), signature, deadline, privilegedOwner);\\n        _; }\\n\\n    bytes32 public constant _MAX_PENALTY_BALANCE_ARRAY_LENGTH_TYPEHASH = keccak256(\\\"PenaltyMaxBalanceArrayLength(uint16 newPenaltyMaxBalanceArrayLength,uint256 nonce,uint256 deadline)\\\");\\n    function updatePenaltyMaxBalanceArrayLength(uint16 newPenaltyMaxBalanceArrayLength, uint deadline, bytes memory signature) noReentrant external payable feeReturner onlyAuthorizedUpdatePenalyMaxBalanceArrayLength(newPenaltyMaxBalanceArrayLength, deadline, _MAX_PENALTY_BALANCE_ARRAY_LENGTH_TYPEHASH, signature) {\\n        maxPenaltyBalanceArrayLength = newPenaltyMaxBalanceArrayLength;\\n        emit NewPenaltyMaxBalanceArrayLength(newPenaltyMaxBalanceArrayLength); \\n    }\\n}\\n\"\r\n    },\r\n    \"audit_folder/src/contracts/release/libraries/ExtraLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSL-1.1\\n\\n// Copyright (c)\\n// All rights reserved.\\n\\n// This software is released under the Business Source License 1.1.\\n// For full license terms, see the LICENSE file.\\n\\n// WARNING this contract has not been independently tested or audited\\n// DO NOT use this contract with funds of real value until officially tested and audited by an independent expert or group\\n\\n/// @title Staking Contract interface \\n\\npragma solidity ^0.8.19;\\n\\n/// @author Add3 Augusto\\nimport \\\"../extensions/implementations/StakingBase.sol\\\";\\n\\nlibrary ExtraLib {\\n    uint256 public constant PERCENT_DIVISOR = 10000;\\n    uint256 public constant MAX_INT = 2**256 - 1;\\n    uint256 public constant SECONDS_PER_YEAR = 31536000;\\n    bytes32 public constant _SET_INTEREST_RATE_TYPEHASH = keccak256(\\\"SetInterestRate(uint256 apy,address _owner,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant _BLACK_OR_WHITE_LIST_TYPEHASH = keccak256(\\\"BlackOrWhitelistAddress(address recipient,bool toBlacklist,address _owner,uint256 nonce,uint256 deadline)\\\");\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Error_Adapter_Not_Set\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Already_In_Desired_List_State\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Blacklisted_User\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Cannot_Autocompound_Different_Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Cannot_Withdraw_Before_Lock_Period_Elapsed_Or_If_Not_Staked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Cap_Limit_Exceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Controller_Add_Rewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Controller_Get_Rewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Fee_Strategy_Set\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Fixed_Staking_Has_One_Rate_Only\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Global_Unmaterialized_Rewards_Not_Initialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Interaction_Not_Enabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Invalid_Controller_Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Invalid_MinLockin_Period\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Invalid_Penalty_Percentage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Invalid_StakingAdapter_Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Min_Stake_Higher_Than_Max_Stake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_No_Fee_Sent_To_Add3\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_No_Fee_Sent_To_Privileged_Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_No_Fee_Value\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_No_More_Than_Hundred_Percent_Rate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_No_Reentrancy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Not_Equal_Rates_Length\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Not_Refunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Not_Staked_Yet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Not_Valid_Rates_Length\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Only_Controller_Authorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Only_If_Dynamic_Staking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Only_Non_Autocompound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Only_Owner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Oustide_Stake_Range\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Product_Not_Registered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Product_Registered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Rates_Are_Not_Set_Yet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Rates_Are_Set_Yet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Rates_Levels_Not_Strictly_Descendant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"due_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ExpectedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ActualReward\",\"type\":\"uint256\"}],\"name\":\"Error_Rewards_For_Product_Out_Of_Stock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Token_Not_Valid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Too_High_Materialized_Reward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Unauthorized_Deadline_Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Unauthorized_Signature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_Utilization_Levels_Not_Strictly_Ascendant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_stakeToken_Not_Enough_VaultReward_For_Stake\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_transferAccidentallyLockedTokens_Token_address_ERC20\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_transferAccidentallyLockedTokens_Token_address_Invalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_unstakeToken_Insufficient_Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Error_withdrawLogic_Penalty_Transfer_Failed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"DesiredAPYset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newPenaltyMaxBalanceArrayLength\",\"type\":\"uint16\"}],\"name\":\"NewPenaltyMaxBalanceArrayLength\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsOutOfStock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Warning_Failed_To_Add\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAX_PENALTY_BALANCE_ARRAY_LENGTH_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestHistoryIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOfHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestHistoryIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingBase.DetailedBalance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"blackListAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedParams\",\"type\":\"bytes\"}],\"name\":\"digest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20RewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20StakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalUnmaterializedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestHistoryIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRewards\",\"type\":\"uint256\"}],\"name\":\"harvestAndWithdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyInterestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_erc20_contract_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxStake\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_penaltyRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minLockDays\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_itAutocompounds\",\"type\":\"bool\"}],\"internalType\":\"struct StakingBase.InitializeStruct\",\"name\":\"InitializeData\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRewardSameToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itAutocompounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPenaltyBalanceArrayLength\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratesHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulatedValue\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingBase.HistoryEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"setLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingBase.StakingStruct\",\"name\":\"stake\",\"type\":\"tuple\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferAccidentallyLockedTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingBase.StakingStruct\",\"name\":\"unstake\",\"type\":\"tuple\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newPenaltyMaxBalanceArrayLength\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updatePenaltyMaxBalanceArrayLength\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"whiteListAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRewards\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "StakingModuleDynamic", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}