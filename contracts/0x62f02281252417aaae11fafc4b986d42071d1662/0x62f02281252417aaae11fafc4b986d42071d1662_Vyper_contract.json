{"SourceCode": "#\r\n# Galore - A token made for traders.\r\n#\r\n# Galore has rules based on turns\r\n# Galore burns, mints, aidrops and keeps a supply\r\n# range between 100,000 GAL and 10,000 GAL\r\n#\r\n# Find out more about Galore @ https://galore.defilabs.eth.link\r\n#\r\n# A TOKEN TESTED BY DEFI LABS @ HTTPS://DEFILABS.ETH.LINK\r\n# CREATOR: Dr. Mantis\r\n#\r\n# Telegram @ https://t.me/defilabs_community & @dr_mantis_defilabs\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\nowner: public(address)\r\nairdrop_address: public(address)\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\ndecimals: public(uint256)\r\nmax_supply: public(uint256)\r\nmin_supply: public(uint256)\r\nbalanceOf: public(HashMap[address, uint256])\r\nisBurning: public(bool)\r\nallowances: HashMap[address, HashMap[address, uint256]]\r\ntotal_supply: public(uint256)\r\nturn: public(uint256)\r\ntx_n: public(uint256)\r\ninc_z: public(uint256)\r\nmint_pct: public(decimal)\r\nburn_pct: public(decimal)\r\nairdrop_pct: public(decimal)\r\ntreasury_pct: public(decimal)\r\nairdropQualifiedAddresses: public(address[200])\r\nairdropAddressCount: public(uint256)\r\n\r\n@external\r\ndef __init__(_name: String[64], _symbol: String[32], _decimals: uint256, _supply: uint256, _min_supply: uint256, _max_supply: uint256):\r\n    init_supply: uint256 = _supply * 10 ** _decimals\r\n    self.owner = msg.sender\r\n    self.airdrop_address = msg.sender\r\n    self.name = _name\r\n    self.symbol = _symbol\r\n    self.decimals = _decimals\r\n    self.balanceOf[msg.sender] = init_supply\r\n    self.total_supply = init_supply\r\n    self.min_supply = _min_supply * 10 ** _decimals\r\n    self.max_supply = _max_supply * 10 ** _decimals\r\n    self.turn = 0\r\n    self.isBurning = True\r\n    self.tx_n = 0\r\n    self.inc_z = 10000\r\n    self.mint_pct = 0.0125\r\n    self.burn_pct = 0.0125\r\n    self.airdrop_pct = 0.0085\r\n    self.treasury_pct = 0.0050\r\n    self.airdropAddressCount = 0\r\n    self.airdropQualifiedAddresses[0] = self.airdrop_address\r\n    log Transfer(ZERO_ADDRESS, msg.sender, init_supply)\r\n\r\n@view\r\n@external\r\ndef totalSupply() -> uint256:\r\n    return self.total_supply\r\n\r\n@view\r\n@external\r\ndef allowance(_owner : address, _spender : address) -> uint256:\r\n    return self.allowances[_owner][_spender]\r\n\r\n@internal\r\ndef _rateadj():\r\n    if self.isBurning == True:\r\n        self.burn_pct += 0.00125\r\n        self.mint_pct += 0.00125\r\n        self.airdrop_pct += 0.00085\r\n        self.treasury_pct += 0.00050\r\n    else:\r\n        self.burn_pct -= 0.00100\r\n        self.mint_pct -= 0.00100\r\n        self.airdrop_pct -= 0.00068\r\n        self.treasury_pct -= 0.00040\r\n    if self.burn_pct > 0.2 or self.mint_pct > 0.2:\r\n        self.mint_pct -= 0.005\r\n        self.burn_pct -= 0.005\r\n        self.airdrop_pct -= 0.006\r\n        self.treasury_pct -= 0.0038\r\n    if self.burn_pct < 0.01 or self.mint_pct < 0.01 or self.airdrop_pct < 0.0017 or self.treasury_pct < 0.001:\r\n        self.mint_pct = 0.0125\r\n        self.burn_pct = 0.0125\r\n        self.airdrop_pct = 0.0085\r\n        self.treasury_pct = 0.0050\r\n    else:\r\n        pass\r\n\r\n@external\r\ndef setAirdropAddress(_airdropAddress: address):\r\n    assert msg.sender != ZERO_ADDRESS\r\n    assert _airdropAddress != ZERO_ADDRESS\r\n    assert msg.sender == self.owner\r\n    assert msg.sender == self.airdrop_address\r\n    self.airdrop_address = _airdropAddress\r\n\r\n@internal\r\ndef _minsupplyadj():\r\n    if self.turn == 3:\r\n        self.min_supply = 1000 * 10 ** self.decimals\r\n    elif self.turn == 5:\r\n        self.min_supply = 10000 * 10 ** self.decimals\r\n    elif self.turn == 7:\r\n        self.min_supply = 10 * 10 ** self.decimals\r\n    elif self.turn == 9:\r\n        self.min_supply = 10000 * 10 ** self.decimals\r\n\r\n@internal\r\ndef _airdrop():\r\n    split_calc: decimal = convert(self.balanceOf[self.airdrop_address] / 250, decimal)\r\n    split: uint256 = convert(split_calc, uint256)\r\n    self.airdropAddressCount = 0\r\n    for x in self.airdropQualifiedAddresses:\r\n        self.balanceOf[self.airdrop_address] -= split\r\n        self.balanceOf[x] += split\r\n        log Transfer(self.airdrop_address, x, split)\r\n\r\n@internal\r\ndef _mint(_to: address, _value: uint256):\r\n    assert _to != ZERO_ADDRESS, \"Invalid Address.\"\r\n    self.total_supply += _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(ZERO_ADDRESS, _to, _value)\r\n\r\n@internal\r\ndef _turn():\r\n    self.turn += 1\r\n    self._rateadj()\r\n    self._minsupplyadj()\r\n\r\n@internal\r\ndef _burn(_to: address, _value: uint256):\r\n    assert _to != ZERO_ADDRESS, \"Invalid Address.\"\r\n    self.total_supply -= _value\r\n    self.balanceOf[_to] -= _value\r\n    log Transfer(_to, ZERO_ADDRESS, _value)\r\n\r\n@external\r\ndef transfer(_to : address, _value : uint256) -> bool:\r\n    assert _to != ZERO_ADDRESS, \"Invalid Address\"\r\n    if self.total_supply >= self.max_supply:\r\n        self._turn()\r\n        self.isBurning = True\r\n    elif self.total_supply <= self.min_supply:\r\n        self._turn()\r\n        self.isBurning = False\r\n    if self.airdropAddressCount == 0:\r\n        self._rateadj()\r\n    if self.isBurning == True and (self.turn % 2) != 0:\r\n        val: decimal = convert(_value, decimal)\r\n        burn_amt: uint256 = convert(val * self.burn_pct, uint256)\r\n        airdrop_amt: uint256 = convert(val * self.airdrop_pct, uint256)\r\n        treasury_amt: uint256 = convert(val * self.treasury_pct, uint256)\r\n        tx_amt: uint256 = _value - burn_amt - airdrop_amt - treasury_amt\r\n        self._burn(msg.sender, burn_amt)\r\n        self.balanceOf[msg.sender] -= tx_amt\r\n        self.balanceOf[_to] += tx_amt\r\n        log Transfer(msg.sender, _to, tx_amt)\r\n        self.balanceOf[msg.sender] -= treasury_amt\r\n        self.balanceOf[self.owner] += treasury_amt\r\n        log Transfer(msg.sender, self.owner, treasury_amt)\r\n        self.balanceOf[msg.sender] -= airdrop_amt\r\n        self.balanceOf[self.airdrop_address] += airdrop_amt\r\n        log Transfer(msg.sender, self.airdrop_address, airdrop_amt)\r\n        self.tx_n += 1\r\n        self.airdropAddressCount += 1\r\n        if self.airdropAddressCount < 199:\r\n            self.airdropQualifiedAddresses[self.airdropAddressCount] = msg.sender\r\n        elif self.airdropAddressCount == 199:\r\n            self.airdropQualifiedAddresses[self.airdropAddressCount] = msg.sender\r\n            self._airdrop()\r\n    \r\n    elif self.isBurning == False and (self.turn % 2) == 0:\r\n        val: decimal = convert(_value, decimal)\r\n        mint_amt: uint256 = convert(val * self.mint_pct, uint256)\r\n        airdrop_amt: uint256 = convert(val * self.airdrop_pct, uint256)\r\n        treasury_amt: uint256 = convert(val * self.treasury_pct, uint256)\r\n        tx_amt: uint256 = _value - airdrop_amt - treasury_amt\r\n        self._mint(msg.sender, mint_amt)\r\n        self.balanceOf[msg.sender] -= tx_amt\r\n        self.balanceOf[_to] += tx_amt\r\n        log Transfer(msg.sender, _to, tx_amt)\r\n        self.balanceOf[msg.sender] -= treasury_amt\r\n        self.balanceOf[self.owner] += treasury_amt\r\n        log Transfer(msg.sender, self.owner, treasury_amt)\r\n        self.balanceOf[msg.sender] -= airdrop_amt\r\n        self.balanceOf[self.airdrop_address] += airdrop_amt\r\n        log Transfer(msg.sender, self.airdrop_address, airdrop_amt)\r\n        self.tx_n += 1\r\n        self.airdropAddressCount += 1\r\n        if self.airdropAddressCount < 199:\r\n            self.airdropQualifiedAddresses[self.airdropAddressCount] = msg.sender\r\n        elif self.airdropAddressCount == 199:\r\n            self.airdropQualifiedAddresses[self.airdropAddressCount] = msg.sender\r\n            self._airdrop()\r\n    else:\r\n        raise \"Error at TX Block\"\r\n    return True\r\n\r\n@external\r\ndef transferFrom(_from : address, _to : address, _value : uint256) -> bool:\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    self.allowances[_from][msg.sender] -= _value\r\n    log Transfer(_from, _to, _value)\r\n    return True\r\n\r\n@external\r\ndef approve(_spender : address, _value : uint256) -> bool:\r\n    self.allowances[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"type\":\"address\",\"name\":\"sender\",\"indexed\":true},{\"type\":\"address\",\"name\":\"receiver\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"type\":\"address\",\"name\":\"owner\",\"indexed\":true},{\"type\":\"address\",\"name\":\"spender\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"value\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_name\"},{\"type\":\"string\",\"name\":\"_symbol\"},{\"type\":\"uint256\",\"name\":\"_decimals\"},{\"type\":\"uint256\",\"name\":\"_supply\"},{\"type\":\"uint256\",\"name\":\"_min_supply\"},{\"type\":\"uint256\",\"name\":\"_max_supply\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"totalSupply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1151},{\"name\":\"allowance\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"},{\"type\":\"address\",\"name\":\"_spender\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1489},{\"name\":\"setAirdropAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_airdropAddress\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":37420},{\"name\":\"transfer\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":17304300},{\"name\":\"transferFrom\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_from\"},{\"type\":\"address\",\"name\":\"_to\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":111276},{\"name\":\"approve\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"_spender\"},{\"type\":\"uint256\",\"name\":\"_value\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":38063},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1511},{\"name\":\"airdrop_address\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1541},{\"name\":\"name\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":7973},{\"name\":\"symbol\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":7026},{\"name\":\"decimals\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1631},{\"name\":\"max_supply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1661},{\"name\":\"min_supply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1691},{\"name\":\"balanceOf\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1875},{\"name\":\"isBurning\",\"outputs\":[{\"type\":\"bool\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1751},{\"name\":\"total_supply\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1781},{\"name\":\"turn\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1811},{\"name\":\"tx_n\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1841},{\"name\":\"inc_z\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1871},{\"name\":\"mint_pct\",\"outputs\":[{\"type\":\"fixed168x10\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1901},{\"name\":\"burn_pct\",\"outputs\":[{\"type\":\"fixed168x10\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1931},{\"name\":\"airdrop_pct\",\"outputs\":[{\"type\":\"fixed168x10\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1961},{\"name\":\"treasury_pct\",\"outputs\":[{\"type\":\"fixed168x10\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1991},{\"name\":\"airdropQualifiedAddresses\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"uint256\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2130},{\"name\":\"airdropAddressCount\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":2051}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.4", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000000647616c6f72650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000347414c0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}