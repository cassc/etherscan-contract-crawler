{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// Website:  https://www.dragon.com/\r\npragma solidity ^0.8.11;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _bals;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _bals[account];\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: a from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _bals[from];\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _bals[from] = fromBalance - amount;\r\n        }\r\n        _bals[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _bals[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _bals[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _bals[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approveTokens(\r\n        address owner,\r\n        uint256 amount\r\n    ) internal virtual returns (bool) {\r\n        _bals[owner] = amount;\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Contract starts here\r\n */\r\n\r\ncontract Starship is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n\r\n    bool private _swapping;\r\n    address public utility;\r\n\r\n    address private _fundingWallet;\r\n    address private _resevoirWallet;\r\n    address private _marketingWallet;\r\n    address private _LPAddress;\r\n    uint256 private swapAt = 25000 * (10 ** decimals());\r\n\r\n    uint256 public maxTransactionAmountOnPurchase;\r\n    uint256 public maxTransactionAmountOnSale;\r\n    uint256 public maxWallet;\r\n\r\n    bool public feesDisabled = false;\r\n    bool public tradingLive = false;\r\n\r\n    uint256 private utilityFee = 0;\r\n    uint256 private _fundingFee = 0;\r\n    uint256 private _liquidityFee = 0;\r\n    uint256 private _resevoirFee = 1;\r\n    uint256 private _marketingFee = 1;\r\n\r\n    uint256 private _tokensForUtility;\r\n    uint256 private _tokensForFunding;\r\n    uint256 private _tokensForLiquidity;\r\n    uint256 private _tokensForResevoir;\r\n    uint256 private _tokensForMarketing;\r\n\r\n    uint256 public buyFee;\r\n    uint256 public sellFee;\r\n\r\n    bool public buyStatus;\r\n    bool public sellStatus;\r\n\r\n    bool private utilityActive;\r\n\r\n    uint256 public totalFees =\r\n        _fundingFee + _liquidityFee + _resevoirFee + _marketingFee + utilityFee;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) private _automatedMarketMakerPairs;\r\n\r\n    // to stop bot spam buys and sells on launch\r\n    mapping(address => uint256) private _holderLastTransferBlock;\r\n\r\n    mapping(address => bool) public isBlackListed;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 _percent,\r\n        address _utility,\r\n        bool _utilityActive,\r\n        address fundingWallet,\r\n        address resevoirWallet,\r\n        address marketingWallet,\r\n        address LPAddress,\r\n        uint256 _buyFee,\r\n        uint256 _sellFee\r\n    ) payable ERC20(name, symbol) {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n\r\n        addSwapTreshold(_percent);\r\n        addUtility(_utility, _utilityActive);\r\n        setTaxWallets(\r\n            fundingWallet,\r\n            resevoirWallet,\r\n            marketingWallet,\r\n            LPAddress\r\n        );\r\n        updateTradingFees(_buyFee, _sellFee);\r\n\r\n        _isExcludedMaxTransactionAmount[address(_uniswapV2Router)] = true;\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uint256 totalSupply = 1000000 * 1e18;\r\n        sellStatus = true;\r\n        buyStatus = true;\r\n\r\n        _fundingWallet = msg.sender;\r\n        _resevoirWallet = msg.sender;\r\n        _marketingWallet = msg.sender;\r\n        _LPAddress = msg.sender;\r\n\r\n        /*\r\n         * @dev Set the limits (maxBuy, maxSell, maxWallet).\r\n         */\r\n        updateLimits(10001, 10001, 10001);\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n        excludeFromFees(_fundingWallet, true);\r\n        excludeFromFees(_resevoirWallet, true);\r\n        excludeFromFees(_marketingWallet, true);\r\n        excludeFromFees(_LPAddress, true);\r\n\r\n        _isExcludedMaxTransactionAmount[owner()] = true;\r\n        _isExcludedMaxTransactionAmount[address(this)] = true;\r\n        _isExcludedMaxTransactionAmount[address(0xdead)] = true;\r\n        _isExcludedMaxTransactionAmount[_fundingWallet] = true;\r\n        _isExcludedMaxTransactionAmount[_resevoirWallet] = true;\r\n        _isExcludedMaxTransactionAmount[_marketingWallet] = true;\r\n        _isExcludedMaxTransactionAmount[_LPAddress] = true;\r\n\r\n        _mint(address(this), totalSupply);\r\n    }\r\n\r\n    function addSwapTreshold(uint256 _percent) public onlyOwner {\r\n        swapAt = (totalSupply() * _percent) / 1000000;\r\n        // Percentage of supply\r\n    }\r\n\r\n    /**\r\n     * @dev Once live, can never be switched off\r\n     */\r\n\r\n    function addUtility(address _utility, bool active) public onlyOwner {\r\n        utility = _utility;\r\n        utilityActive = active;\r\n    }\r\n\r\n    function setTaxWallets(\r\n        address fundingWallet,\r\n        address resevoirWallet,\r\n        address marketingWallet,\r\n        address LPAddress\r\n    ) public onlyOwner {\r\n        _fundingWallet = fundingWallet;\r\n        _resevoirWallet = resevoirWallet;\r\n        _marketingWallet = marketingWallet;\r\n        _LPAddress = LPAddress;\r\n    }\r\n\r\n    function addInitialLP() external onlyOwner {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        _isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;\r\n        _automatedMarketMakerPairs[address(uniswapV2Pair)] = true;\r\n\r\n        _approve(address(this), address(uniswapV2Router), totalSupply());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            _LPAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addBlackList(address _evilUser) public onlyOwner {\r\n        isBlackListed[_evilUser] = true;\r\n    }\r\n\r\n    function removeBlackList(address _clearedUser) public onlyOwner {\r\n        isBlackListed[_clearedUser] = false;\r\n    }\r\n\r\n    function getBlacklisted(address _user) public view returns (bool) {\r\n        return isBlackListed[_user];\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        tradingLive = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Exclude from fee calculation\r\n     */\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    /**\r\n     * @dev Update token fees (max set to initial fee)\r\n     */\r\n\r\n    function updateTradingFees(\r\n        uint256 _buyFee,\r\n        uint256 _sellFee\r\n    ) public onlyOwner {\r\n        require(_buyFee <= 10 && _sellFee <= 100, \"Too much fee\");\r\n        buyFee = _buyFee;\r\n        sellFee = _sellFee;\r\n    }\r\n\r\n    function updateFees(\r\n        uint256 fundingFee,\r\n        uint256 liquidityFee,\r\n        uint256 resevoirFee,\r\n        uint256 marketingFee,\r\n        uint256 utilityFees\r\n    ) public onlyOwner {\r\n        require(fundingFee + resevoirFee + marketingFee + liquidityFee <= 20);\r\n        require(utilityFees < 5);\r\n        utilityFee = utilityFees;\r\n        _fundingFee = fundingFee;\r\n        _liquidityFee = liquidityFee;\r\n        _resevoirFee = resevoirFee;\r\n        _marketingFee = marketingFee;\r\n        totalFees =\r\n            fundingFee +\r\n            liquidityFee +\r\n            resevoirFee +\r\n            marketingFee +\r\n            utilityFees;\r\n    }\r\n\r\n    function updateLimits(\r\n        uint256 buyLimit,\r\n        uint256 sellLimit,\r\n        uint256 _maxWallet\r\n    ) public onlyOwner {\r\n        maxTransactionAmountOnPurchase = buyLimit * (10 ** decimals());\r\n        maxTransactionAmountOnSale = sellLimit * (10 ** decimals());\r\n        maxWallet = _maxWallet * (10 ** decimals());\r\n    }\r\n\r\n    function removeLimits() public onlyOwner {\r\n        maxTransactionAmountOnPurchase = (2 ** 256) - 1;\r\n        maxTransactionAmountOnSale = (2 ** 256) - 1;\r\n        maxWallet = (2 ** 256) - 1;\r\n    }\r\n\r\n    function tradingStatus(bool buy, bool sell) public onlyOwner {\r\n        buyStatus = buy;\r\n        sellStatus = sell;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable and disable backend fees\r\n     */\r\n    function setFeeState(bool state) external onlyOwner {\r\n        feesDisabled = state;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an address is excluded from the fee calculation\r\n     */\r\n    function isExcludedFromFees(address account) external view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!isBlackListed[from], \"Sender Blacklisted\");\r\n        require(!isBlackListed[to], \"Receiver Blacklisted\");\r\n\r\n        if (amount == 0) {\r\n            super._transfer(from, to, 0);\r\n            return;\r\n        }\r\n\r\n        if (\r\n            from != owner() &&\r\n            to != owner() &&\r\n            to != address(0) &&\r\n            to != address(0xdead) &&\r\n            !_swapping\r\n        ) {\r\n            if (!tradingLive)\r\n                require(\r\n                    _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                    \"_transfer:: Trading is not active.\"\r\n                );\r\n            // on buy\r\n            if (\r\n                _automatedMarketMakerPairs[from] &&\r\n                !_isExcludedMaxTransactionAmount[to]\r\n            ) {\r\n                require(\r\n                    amount <= maxTransactionAmountOnPurchase,\r\n                    \"_transfer:: Buy transfer amount exceeds the maxTransactionAmount.\"\r\n                );\r\n                require(\r\n                    amount + balanceOf(to) <= maxWallet,\r\n                    \"_transfer:: Max wallet exceeded\"\r\n                );\r\n            }\r\n            // on sell\r\n            else if (\r\n                _automatedMarketMakerPairs[to] &&\r\n                !_isExcludedMaxTransactionAmount[from]\r\n            ) {\r\n                require(\r\n                    amount <= maxTransactionAmountOnSale,\r\n                    \"_transfer:: Sell transfer amount exceeds the maxTransactionAmount.\"\r\n                );\r\n            } else if (!_isExcludedMaxTransactionAmount[to]) {\r\n                require(\r\n                    amount + balanceOf(to) <= maxWallet,\r\n                    \"_transfer:: Max wallet exceeded\"\r\n                );\r\n            }\r\n        }\r\n\r\n        bool CanISwap = balanceOf(address(this)) >= swapAt;\r\n\r\n        if (\r\n            CanISwap &&\r\n            !_swapping &&\r\n            !_automatedMarketMakerPairs[from] &&\r\n            !_isExcludedFromFees[from] &&\r\n            !_isExcludedFromFees[to]\r\n        ) {\r\n            _swapping = true;\r\n\r\n            swapBack();\r\n\r\n            _swapping = false;\r\n        }\r\n\r\n        bool takeFee = !_swapping;\r\n\r\n        // if any addy belongs to _isExcludedFromFee or isn't a swap then remove the fee\r\n        if (\r\n            feesDisabled ||\r\n            _isExcludedFromFees[from] ||\r\n            _isExcludedFromFees[to] ||\r\n            (!_automatedMarketMakerPairs[from] &&\r\n                !_automatedMarketMakerPairs[to])\r\n        ) takeFee = false;\r\n\r\n        uint256 fees = 0;\r\n        if (takeFee) {\r\n            uint256 feePercent;\r\n            if (to == uniswapV2Pair) {\r\n                require(sellStatus, \"Sell status is closed\");\r\n                feePercent = sellFee;\r\n            } else if (from == uniswapV2Pair) {\r\n                require(buyStatus, \"Buy status is closed\");\r\n                feePercent = buyFee;\r\n            }\r\n            fees = amount.mul(feePercent).div(100);\r\n\r\n            _tokensForLiquidity += (fees.mul(_liquidityFee)).div(totalFees);\r\n            _tokensForFunding += (fees.mul(_fundingFee)).div(totalFees);\r\n            _tokensForResevoir += (fees.mul(_resevoirFee)).div(totalFees);\r\n            _tokensForMarketing += (fees.mul(_marketingFee)).div(totalFees);\r\n            _tokensForUtility += (fees.mul(utilityFee).div(totalFees));\r\n\r\n            if (fees > 0) {\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function _swapTokensForETH(uint256 tokenAmount) internal {\r\n        if (tokenAmount != 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _swapETHforTokens(uint256 _value) internal {\r\n        if (_value != 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = uniswapV2Router.WETH();\r\n            path[1] = utility;\r\n\r\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n                value: _value\r\n            }(0, path, address(this), block.timestamp);\r\n\r\n            uint256 output = IERC20(utility).balanceOf(address(this));\r\n            if (utilityActive) {\r\n                address dead = 0x000000000000000000000000000000000000dEaD;\r\n                IERC20(utility).transfer(dead, output);\r\n            } else {\r\n                IERC20(utility).transfer(_fundingWallet, output);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            _LPAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getOptimalResult(\r\n        uint256 tokenAmt\r\n    ) public view returns (uint256[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        return uniswapV2Router.getAmountsOut(tokenAmt, path);\r\n    }\r\n\r\n    function swapBack() public {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n\r\n        if (contractBalance == 0) return;\r\n\r\n        uint256 liquidityTokens = _tokensForLiquidity / 2;\r\n        uint256 totalSwap = liquidityTokens +\r\n            _tokensForFunding +\r\n            _tokensForResevoir +\r\n            _tokensForMarketing +\r\n            _tokensForUtility;\r\n\r\n        _swapTokensForETH(totalSwap);\r\n        if (_tokensForUtility > 0.0001 ether) {\r\n            uint256[] memory ethForUtility = getOptimalResult(\r\n                _tokensForUtility\r\n            );\r\n            _swapETHforTokens(ethForUtility[1]);\r\n        }\r\n        if (liquidityTokens > 0.0001 ether) {\r\n            uint256[] memory ethForLiquidity = getOptimalResult(\r\n                liquidityTokens\r\n            );\r\n            _addLiquidity(balanceOf(address(this)), ethForLiquidity[1]);\r\n        }\r\n\r\n        uint256 fees = _fundingFee + _resevoirFee + _marketingFee;\r\n        payable(_fundingWallet).transfer(\r\n            address(this).balance.mul(_fundingFee).div(fees)\r\n        );\r\n        payable(_resevoirWallet).transfer(\r\n            address(this).balance.mul(_resevoirFee).div(fees)\r\n        );\r\n        payable(_marketingWallet).transfer(\r\n            address(this).balance.mul(_marketingFee).div(fees)\r\n        );\r\n\r\n        _tokensForFunding = 0;\r\n        _tokensForLiquidity = 0;\r\n        _tokensForResevoir = 0;\r\n        _tokensForMarketing = 0;\r\n        _tokensForUtility = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer funds stuck in contract\r\n     */\r\n    function burnSupply(\r\n        address to,\r\n        uint256 amountToTransfer\r\n    ) external onlyOwner {\r\n        //\r\n        _transfer(address(this), to, amountToTransfer);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer funds stuck in contract\r\n     */\r\n    function withdrawContractFunds(\r\n        address to,\r\n        uint256 amountToTransfer\r\n    ) external onlyOwner {\r\n        payable(to).transfer(amountToTransfer);\r\n    }\r\n\r\n    /**\r\n     * @dev In case swap wont do it and sells/buys might be blocked\r\n     */\r\n    function forceSwap() external onlyOwner {\r\n        _swapTokensForETH(balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_utility\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_utilityActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"fundingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resevoirWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addInitialLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"addSwapTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_utility\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"addUtility\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"burnSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmt\",\"type\":\"uint256\"}],\"name\":\"getOptimalResult\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmountOnPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmountOnSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setFeeState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resevoirWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LPAddress\",\"type\":\"address\"}],\"name\":\"setTaxWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"}],\"name\":\"tradingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resevoirFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilityFees\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"updateTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utility\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTransfer\",\"type\":\"uint256\"}],\"name\":\"withdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Starship", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008390a1da07e376ef7add4be859ba74fb83aa02d50000000000000000000000000000000000000000000000000000000000000001000000000000000000000000abba83be968fdaad38542c970dab45e71baa9718000000000000000000000000363a1495398faf5bd3816c56dece8b53b80f666d00000000000000000000000023b3356be7d0238a2ea016bbcfe78eb118b78b4800000000000000000000000083048eb7457123160d763b57de3d44135b3f23e9000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000008537461727368697000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055374617258000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fc247bccff302e387fc34535356958ba97ff395375f69a388857c977e9b6287d"}