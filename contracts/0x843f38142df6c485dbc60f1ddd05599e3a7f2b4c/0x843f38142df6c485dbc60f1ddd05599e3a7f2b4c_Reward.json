{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Reward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Reward\\r\\n * @dev This contract handles the distribution of rewards to recipients.\\r\\n * It allows single and batch reward distributions, checks for available balance,\\r\\n * and emits events to log reward distribution and balance changes.\\r\\n */\\r\\ncontract Reward is Ownable{\\r\\n\\r\\n    IERC20 public usdtToken; // Declare a variable for the USDC token contract\\r\\n    IERC20 public erc20Crypto;\\r\\n\\r\\n\\r\\n\\r\\n// Event emitted when funds are added to the contract\\r\\n    event addedFund(address walletAddress, uint256 fund);\\r\\n\\r\\n// Event emitted to indicate whether the reward amount is less than the smart contract's balance\\r\\n    event event_isRewardAmountLessThanSMCBalance(bool isRewardAmountLessThanSMCBalance);\\r\\n\\r\\n// Event emitted when a reward is successfully distributed\\r\\n    event rewardDistributed(address rewardSMC, address recipient, uint256 rewardAmount);\\r\\n\\r\\n// Event emitted when rewards are successfully distributed in batch\\r\\n    event rewardDistributedInBatch(address rewardSMC, address payable[] recipient, uint256[] rewardAmount);\\r\\n\\r\\n// Event emitted after reward distribution to log the balance of the contract\\r\\n    event balanceAfterRewardDistribution(uint256 balanceAfterRewardDistribution);\\r\\n\\r\\n// Event emitted to log details of failed reward distributions\\r\\n    event failedRewardDistribution(address[] failedRecipient, uint256[] rewardAmount);\\r\\n\\r\\n// Event emitted to log details of successful reward distributions\\r\\n    event succeededRewardDistribution(address[] succeededRecipient, uint256[] rewardAmount);\\r\\n\\r\\n    event transferredUSDT(address userAddress, uint256 amount);\\r\\n    event changedERC20Token(address newCrypto);\\r\\n    event transferredCrypto(address userAddress, uint256 amount);\\r\\n\\r\\n// Constructor to initialize the contract with an owner\\r\\n    constructor(address ownerOfTheSmartContract, address  _usdcTokenAddress){\\r\\n        // Set the provided address as the initial owner of the smart contract\\r\\n        _transferOwnership(ownerOfTheSmartContract);\\r\\n        usdtToken = IERC20(_usdcTokenAddress);\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Changes the ERC-20 token used for bonus distribution.\\r\\n * @param newCrypto The address of the new ERC-20 token contract.\\r\\n * @return The address of the new ERC-20 token contract.\\r\\n */\\r\\n    function changeERC20Token(address newCrypto) external onlyOwner returns (address) {\\r\\n        usdtToken = IERC20(newCrypto);\\r\\n        emit changedERC20Token(newCrypto);\\r\\n        return newCrypto;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Transfers USDT tokens to a specified address.\\r\\n * @param to The recipient's address.\\r\\n * @param amount The amount of USDT tokens to transfer.\\r\\n * @return True if the transfer is successful, false otherwise.\\r\\n */\\r\\n    function transferUSDT(address to, uint256 amount) external onlyOwner returns (bool) {\\r\\n        require(balanceOfUSDT() >= amount, \\\"Not sufficient amount to transfer!\\\");\\r\\n        require(usdtToken.transfer(to, amount), \\\"USDT transfer failed\\\");\\r\\n        emit transferredUSDT(to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Returns the balance of USDT tokens owned by the caller.\\r\\n * @return The balance of USDT tokens.\\r\\n */\\r\\n    function balanceOfUSDT() public view returns (uint256) {\\r\\n        return usdtToken.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Changes the cryptocurrency used for transfers.\\r\\n * @param newCrypto The address of the new cryptocurrency contract.\\r\\n * @return The address of the new cryptocurrency contract.\\r\\n */\\r\\n    function changeCrypto(address newCrypto) external onlyOwner returns (address) {\\r\\n        require(newCrypto != address(0), \\\"ERC20: Crypto address cannot be empty!\\\"); // Ensure the new cryptocurrency address is not empty\\r\\n        erc20Crypto = IERC20(newCrypto); // Update the cryptocurrency contract\\r\\n        return newCrypto; // Return the new cryptocurrency contract address\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Transfers cryptocurrency tokens to a specified address.\\r\\n * @param to The recipient's address.\\r\\n * @param amount The amount of cryptocurrency tokens to transfer.\\r\\n * @return True if the transfer is successful, false otherwise.\\r\\n */\\r\\n    function transferCrypto(address to, uint256 amount) external onlyOwner returns (bool) {\\r\\n        require(erc20Crypto != IERC20(address(0)), \\\"ERC20: Crypto address cannot be empty, Please add crypto first!\\\"); // Ensure the cryptocurrency contract is set\\r\\n        require(balanceOfCrypto() >= amount, \\\"Not sufficient amount to transfer!\\\"); // Ensure the caller has sufficient balance\\r\\n        require(erc20Crypto.transfer(to, amount), \\\"Cryptocurrency transfer failed\\\"); // Perform the transfer\\r\\n        emit transferredCrypto(to, amount); // Emit an event to log the transfer\\r\\n        return true; // Return true to indicate a successful transfer\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Returns the balance of the selected cryptocurrency owned by the caller.\\r\\n * @return The balance of the selected cryptocurrency.\\r\\n */\\r\\n    function balanceOfCrypto() public view returns (uint256) {\\r\\n        return erc20Crypto.balanceOf(address(this)); // Return the caller's balance of the selected cryptocurrency\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Fallback function to receive MATIC.\\r\\n * This function is automatically called when the contract receives MATIC.\\r\\n * The received MATIC will be added to the contract's balance.\\r\\n * This function is marked as \\\"payable\\\" to allow the contract to accept funds.\\r\\n */\\r\\n    receive() external payable {\\r\\n    }\\r\\n    \\r\\n/**\\r\\n * @dev Get the current balance of the smart contract.\\r\\n * @return The amount of MATIC held by the contract.\\r\\n */\\r\\n    function getContractBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Add funds to the smart contract.\\r\\n * Emits the `addedFund` event to log the added funds and the sender's address.\\r\\n * @return The amount of MATIC added to the contract.\\r\\n */\\r\\n    function addFunds() external payable returns (uint256) {\\r\\n        emit addedFund(msg.sender, msg.value);\\r\\n        return msg.value;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Check if the total reward amount is less than the smart contract's balance.\\r\\n * Emits the `event_isRewardAmountLessThanSMCBalance` event to log the result.\\r\\n * @param totalRewardAmount The total amount of MATIC for the reward.\\r\\n * @return Whether the reward amount is less than the contract's balance.\\r\\n */\\r\\n    function isRewardAmountLessThanSMCBalance(uint256 totalRewardAmount) public returns (bool) {\\r\\n        if (totalRewardAmount < address(this).balance) {\\r\\n            emit event_isRewardAmountLessThanSMCBalance(true);\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        emit event_isRewardAmountLessThanSMCBalance(false);\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Distribute a reward to a recipient.\\r\\n * Requires that the reward amount is less than the smart contract's balance.\\r\\n * Transfers the reward amount to the recipient and emits the `rewardDistributed` event.\\r\\n * @param rewardAmount The amount of MATIC to be rewarded.\\r\\n * @param recipient The address of the recipient of the reward.\\r\\n * @return A boolean indicating the success of the reward distribution.\\r\\n */\\r\\n    function rewardDistribution(uint256 rewardAmount, address payable recipient) external onlyOwner returns (bool) {\\r\\n        require(isRewardAmountLessThanSMCBalance(rewardAmount), \\\"Insufficient balance in reward SMC\\\");\\r\\n        \\r\\n        recipient.transfer(rewardAmount);\\r\\n        \\r\\n        emit rewardDistributed(address(this), recipient, rewardAmount);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * @dev Distribute rewards to multiple recipients in batch.\\r\\n * Requires that the arrays have the same length, and each recipient address and reward amount is valid.\\r\\n * Transfers rewards to recipients, logs failed and successful distributions, and emits balance information.\\r\\n * @param rewardAmount An array of reward amounts to be distributed.\\r\\n * @param recipients An array of recipient addresses for the rewards.\\r\\n * @return A boolean indicating the success of the batch reward distribution.\\r\\n */\\r\\n    function rewardDistributionInbatch(uint256[] memory rewardAmount, address payable[] memory recipients) external onlyOwner returns (bool) {\\r\\n        require(recipients.length == rewardAmount.length, \\\"Arrays must have the same length\\\");\\r\\n        \\r\\n        address[] memory failedRecipients = new address[](recipients.length);\\r\\n        uint256[] memory failedRewardAmount = new uint256[](rewardAmount.length);\\r\\n        \\r\\n        address[] memory succeededRecipients = new address[](recipients.length);\\r\\n        uint256[] memory succeededRewardAmount = new uint256[](rewardAmount.length);\\r\\n        \\r\\n        uint256 failedCount = 0;\\r\\n        uint256 succeededCount = 0;\\r\\n        \\r\\n        for (uint256 i = 0; i < recipients.length; i++) {\\r\\n            require(recipients[i] != address(0), \\\"Invalid recipient address\\\");\\r\\n            require(rewardAmount[i] > 0, \\\"Amount must be greater than 0\\\");\\r\\n            \\r\\n            // Attempt to transfer the funds\\r\\n            if (rewardAmount[i] <= address(this).balance) {\\r\\n                if (recipients[i].send(rewardAmount[i])) {\\r\\n                    // Add succeeded recipient and reward amount to arrays\\r\\n                    succeededRecipients[succeededCount] = recipients[i];\\r\\n                    succeededRewardAmount[succeededCount] = rewardAmount[i];\\r\\n                    succeededCount++;\\r\\n                }\\r\\n            } else {\\r\\n                // Add failed recipient and reward amount to arrays\\r\\n                failedRecipients[failedCount] = recipients[i];\\r\\n                failedRewardAmount[failedCount] = rewardAmount[i];\\r\\n                failedCount++;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Resize the arrays to remove any empty slots\\r\\n        assembly {\\r\\n            mstore(failedRecipients, failedCount)\\r\\n            mstore(failedRewardAmount, failedCount)\\r\\n            mstore(succeededRecipients, succeededCount)\\r\\n            mstore(succeededRewardAmount, succeededCount)\\r\\n        }\\r\\n\\r\\n        emit failedRewardDistribution(failedRecipients, failedRewardAmount);\\r\\n        emit succeededRewardDistribution(succeededRecipients, succeededRewardAmount);\\r\\n        emit balanceAfterRewardDistribution(address(this).balance);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerOfTheSmartContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdcTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fund\",\"type\":\"uint256\"}],\"name\":\"addedFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceAfterRewardDistribution\",\"type\":\"uint256\"}],\"name\":\"balanceAfterRewardDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCrypto\",\"type\":\"address\"}],\"name\":\"changedERC20Token\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isRewardAmountLessThanSMCBalance\",\"type\":\"bool\"}],\"name\":\"event_isRewardAmountLessThanSMCBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"failedRecipient\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardAmount\",\"type\":\"uint256[]\"}],\"name\":\"failedRewardDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardSMC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"rewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardSMC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipient\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardAmount\",\"type\":\"uint256[]\"}],\"name\":\"rewardDistributedInBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"succeededRecipient\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardAmount\",\"type\":\"uint256[]\"}],\"name\":\"succeededRewardDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferredCrypto\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferredUSDT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfCrypto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCrypto\",\"type\":\"address\"}],\"name\":\"changeCrypto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCrypto\",\"type\":\"address\"}],\"name\":\"changeERC20Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Crypto\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRewardAmount\",\"type\":\"uint256\"}],\"name\":\"isRewardAmountLessThanSMCBalance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rewardDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewardAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"rewardDistributionInbatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferCrypto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Reward", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002a398c735a7061b04dbc3588e17f9bb206bf8a08000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}