{"SourceCode": "/*\r\nREFUN's Rhapsody: NFT Redemption\r\n\r\nCrafting NFTs for Joy, Not Just Wealth. \r\nYet, amid the euphoria, many projects falter post-minting, \r\nabandoning the essence of creation and draining the joy from us.\r\nBut behold, REFUN emerges as a haven for NFTs, even when their value dwindles due to RUG PULL. \r\nIt's a tale of second chances. \r\nSend your NFTs to the FUN POOL and watch them transform into $REFUN tokens, \r\na resurrection of their original essence.\r\n\r\n\r\nwebsite:   https://refun.vip/\r\ntelegram:  https://t.me/Refun_Portal1\r\ntwitter/X: https://twitter.com/Refun_erc20\r\n\r\nTokenomics\r\n- Total Supply 21,000,000\r\n- LP: 80%\r\n- Reward Pool: 15%\r\n- Marketing: 5%\r\n- Tax: 2%/2%\r\n*/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IERC721 {\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ncontract Refun is ERC20, Ownable {\r\n    event e_Deposite(address erc721, uint256[] ids, address from);\r\n    event e_Reward(uint256 value, address from);\r\n    event e_Withdraw(address erc721, uint256 id, address from);\r\n    event e_openTrading();\r\n    event e_removeLimit();\r\n\r\n    IUniswapV2Factory public uniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public uniswapV2Pair;\r\n\r\n    uint256 public constant mintValue = 21000000 * 1e18;\r\n    uint256 public constant addLiquidityPercent = 80;\r\n    uint256 public constant Fee = 2;\r\n    uint256 public maxAmountPerWallet = 420000 * 1e18;\r\n    uint256 public maxFee = 21000 * 1e18;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    uint256 public Treasury;\r\n\r\n    uint256 public totalMember;\r\n    mapping(address => bool) public Deposited;\r\n    mapping(address => uint256) public Deposites;\r\n    mapping(address => address) public Higher;\r\n    mapping(address => address) public Lower;\r\n\r\n    uint256 public baseTime;\r\n    mapping(address => bool) public Rewarded;\r\n\r\n    bool public Trading;\r\n    bool private swapLocked;\r\n    modifier swapLocker {\r\n        swapLocked = true;\r\n        _;\r\n        swapLocked = false;\r\n    }\r\n\r\n    constructor() ERC20('Refun', 'REFUN') {\r\n        Deposites[address(1)] = ~uint256(0);\r\n        _mint(address(this), mintValue * 95 / 100);\r\n        _mint(msg.sender, mintValue * 5 / 100);\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[address(uniswapV2Router)] = true;\r\n    }\r\n\r\n    function fetchTopK(uint256 k) external view returns (address[] memory, uint256[] memory) {\r\n        address[] memory topKAddress = new address[](k);\r\n        uint256[] memory topKValue = new uint256[](k);\r\n        address Current = Lower[address(1)];\r\n        for(uint256 i; i<k ; i++) {\r\n            topKAddress[i] = Current;\r\n            topKValue[i] = Deposites[Current];\r\n            Current = Lower[Current];\r\n        }\r\n        return (topKAddress, topKValue);\r\n    }\r\n\r\n    function Deposite(address erc721, uint256[] calldata ids) external returns (bool) {\r\n        require(ids.length > 0, 'No length');\r\n\r\n        for(uint256 i=0; i<ids.length ; i++) {\r\n            IERC721(erc721).transferFrom(msg.sender, address(this), ids[i]);\r\n        }\r\n        \r\n        if(baseTime != 0 && block.timestamp > baseTime + 12 hours) {\r\n            return true;\r\n        }\r\n\r\n        Deposites[msg.sender] += ids.length;\r\n\r\n        if(!Deposited[msg.sender]) {\r\n            totalMember ++;\r\n            Deposited[msg.sender] = true;\r\n        }\r\n\r\n        address Prev = Higher[msg.sender];\r\n        if(Prev == address(0)) {\r\n            address Current = address(1);\r\n            while(true) {\r\n                if(Deposites[msg.sender] > Deposites[Current]) {\r\n                    Higher[msg.sender] = Higher[Current];\r\n                    Lower[msg.sender] = Current;\r\n                    Lower[Higher[Current]] = msg.sender;\r\n                    Higher[Current] = msg.sender;\r\n                    break;\r\n                }\r\n                address Next = Lower[Current];\r\n                if(Next == address(0)) {\r\n                    Lower[Current] = msg.sender;\r\n                    Higher[msg.sender] = Current;\r\n                    break;\r\n                }\r\n                Current = Next;\r\n            }\r\n        } else {\r\n            Lower[Higher[msg.sender]] = Lower[msg.sender];\r\n            Higher[Lower[msg.sender]] = Higher[msg.sender];\r\n            address Current = address(1);\r\n            while(true) {\r\n                if(Deposites[msg.sender] > Deposites[Current]) {\r\n                    Higher[msg.sender] = Higher[Current];\r\n                    Lower[msg.sender] = Current;\r\n                    Lower[Higher[Current]] = msg.sender;\r\n                    Higher[Current] = msg.sender;\r\n                    break;\r\n                }\r\n                address Next = Lower[Current];\r\n                if(Next == address(0)) {\r\n                    Lower[Current] = msg.sender;\r\n                    Higher[msg.sender] = Current;\r\n                    break;\r\n                }\r\n                Current = Next;\r\n            }\r\n        }\r\n\r\n        emit e_Deposite(erc721, ids, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    function Reward() external returns (bool) {\r\n        require(baseTime != 0 && block.timestamp > baseTime + 72 hours, 'Time error');\r\n        require(totalMember >= 50, 'members < 50');\r\n        require(Deposited[msg.sender], 'Not deposited');\r\n        require(!Rewarded[msg.sender], 'Rewarded');\r\n\r\n        uint256 baseRewardPercent = totalMember >= 300 ? 15 : 10;\r\n        uint256 baseRewardValue = mintValue * baseRewardPercent / 100 / (105 + totalMember);\r\n\r\n        uint256 Rank;\r\n        uint256 x = 1;\r\n        address Current = Lower[address(1)];\r\n        for(uint256 i; i<30 ; i++) {\r\n            if(Current == msg.sender) {\r\n                Rank = i+1;\r\n                break;\r\n            }\r\n            Current = Lower[Current];\r\n        }\r\n        if(Rank == 1) x = 30;\r\n        if(Rank == 2) x = 20;\r\n        if(Rank == 3) x = 10;\r\n        if(Rank > 3 && Rank <= 10) x = 5;\r\n        if(Rank > 10 && Rank <= 30) x = 2;\r\n        \r\n        _transfer(address(this), msg.sender, baseRewardValue * x);\r\n        Rewarded[msg.sender] = true;\r\n\r\n        emit e_Reward(baseRewardValue * x, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    function Withdraw(address erc721, uint256 id) external onlyOwner() returns (bool) {\r\n        IERC721(erc721).transferFrom(address(this), msg.sender, id);\r\n\r\n        emit e_Withdraw(erc721, id, owner());\r\n\r\n        return true;\r\n    }\r\n\r\n    function openTrading() external onlyOwner() returns (bool) {\r\n        require(!Trading, 'Already Trading');\r\n\r\n        uniswapV2Pair = uniswapV2Factory.createPair(address(this), uniswapV2Router.WETH());\r\n        uint256 Liquidity = mintValue * addLiquidityPercent / 100;\r\n        _approve(address(this), address(uniswapV2Router), Liquidity);\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), Liquidity, 0, 0, owner(), block.timestamp);\r\n        baseTime = block.timestamp;\r\n\r\n        Trading = true;\r\n\r\n        emit e_openTrading();\r\n        \r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to] && Trading) {\r\n            taxAmount = amount * 2 / 100;\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= maxAmountPerWallet, \"Exceeds the maxAmountPerWallet.\");\r\n                require(balanceOf(to) + amount <= maxAmountPerWallet, \"Exceeds the maxAmountPerWallet.\");\r\n            }\r\n\r\n            if (to != uniswapV2Pair && ! _isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount <= maxAmountPerWallet, \"Exceeds the maxAmountPerWallet.\");\r\n            }\r\n\r\n            if(from != uniswapV2Pair && to != uniswapV2Pair) {\r\n                taxAmount = 0;\r\n            }\r\n\r\n            if (!swapLocked && to == uniswapV2Pair && Trading && Treasury > 0) {\r\n                uint256 temTreasury = Treasury > maxFee ? maxFee : Treasury;\r\n                Treasury -= temTreasury;\r\n                swapExactTokensForETHSupportingFeeOnTransferTokens(temTreasury);\r\n            }\r\n        }\r\n\r\n        if(taxAmount > 0) {\r\n            Treasury += taxAmount;\r\n            _balances[address(this)] += taxAmount;\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        _balances[from] -= amount;\r\n        _balances[to] += (amount - taxAmount);\r\n\r\n        emit Transfer(from, to, (amount - taxAmount));\r\n    }\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 tax) internal swapLocker() {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tax);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tax, 0, path, owner(), block.timestamp);\r\n    }\r\n\r\n    function removeLimit() external onlyOwner() returns (bool) {\r\n        maxAmountPerWallet = mintValue;\r\n\r\n        emit e_removeLimit();\r\n\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"e_Deposite\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"e_Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"e_Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"e_openTrading\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"e_removeLimit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"Deposite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Deposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Deposites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Higher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Lower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Reward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Rewarded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Trading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Treasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"k\",\"type\":\"uint256\"}],\"name\":\"fetchTopK\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Refun", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://621daa2d3530e0f3cd06817fa20d97a21d427ee450dc3b51c64841759b1688f4"}