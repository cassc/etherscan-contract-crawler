{"SourceCode": "pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: XriesSale.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract XeriesTokenSale is Ownable {\r\n    address payable public platformWallet;\r\n    IERC20 public token;\r\n    IERC20 public usdtAddress;\r\n    uint256 public tokenPriceInUSDT;\r\n    uint256 public tokenPriceInETH;\r\n    uint256 public totalSupply;\r\n    uint256 public saleSupply;\r\n\r\n    event TokensPurchased(address indexed buyer, uint256 amount, uint256 totalPriceInUSDT, uint256 totalPriceInETH);\r\n\r\n    constructor(address _tokenAddress, uint256 _amount) {\r\n        token = IERC20(_tokenAddress);\r\n        platformWallet = payable(msg.sender); // Platform wallet is initially set to the contract deployer\r\n        usdtAddress = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7); // TESTNET USDT ADDRESS\r\n        token.transferFrom(msg.sender,address(this), (_amount * 1e3));\r\n\r\n    }\r\n\r\n    // Only the owner can set the token price in USDT and ETH\r\n    function setTokenPrice(uint256 _priceInUSDT, uint256 _priceInETH) external onlyOwner {\r\n        tokenPriceInUSDT = _priceInUSDT;\r\n        tokenPriceInETH = _priceInETH;\r\n    }\r\n\r\n    // Only the owner can set the platform wallet address\r\n    function setPlatformWallet(address payable _platformWallet) external onlyOwner {\r\n        platformWallet = _platformWallet;\r\n    }\r\n\r\n    // Only the owner can set the ERC20 token address\r\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n\r\n    // Only the owner can set the ERC20 token address\r\n    function setUsdtAddress(address _usdtAddress) external onlyOwner {\r\n        usdtAddress = IERC20(_usdtAddress);\r\n    }\r\n\r\n    function withdrawTokens(uint256 _amount, address _tokenAddress) public onlyOwner returns (bool) {\r\n        IERC20 tokenAddress = IERC20(_tokenAddress);\r\n        tokenAddress.transfer(msg.sender, _amount);\r\n        return true;\r\n    }\r\n    // Get the current token price in USDT and ETH\r\n    function getTokenPrice() external view returns (uint256, uint256) {\r\n        return (tokenPriceInUSDT, tokenPriceInETH);\r\n    }\r\n\r\n    // Get the remaining supply of tokens available for sale\r\n    function getRemainingSupply() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    // Get the sale supply (tokens which were allowed to sell)\r\n    function getSaleSupply() external view returns (uint256) {\r\n        return saleSupply;\r\n    }\r\n\r\n   // Get the sale supply (tokens which were allowed to sell)\r\n    function calculateTokensUSDT(uint256 _amountInUSDT) public view returns (uint256) {\r\n       return ((_amountInUSDT * 1e3) * tokenPriceInUSDT) / 1e6; // Calculate token amount based on USDT price\r\n    }\r\n\r\n    // Get the sale supply (tokens which were allowed to sell)\r\n    function calculateTokensEth(uint256 _amountInEth) public view returns (uint256) {\r\n        return ((_amountInEth * 1e3) * tokenPriceInETH) / 1e18; // Calculate token amount based on USDT price\r\n    }\r\n\r\n    // Purchase tokens using USDT\r\n    function purchaseWithUSDT(uint256 _amountInUSDT) external {\r\n        require(_amountInUSDT > 0, \"Amount must be greater than zero\");\r\n        require(tokenPriceInUSDT > 0, \"Token price must be set\");\r\n\r\n        // Convert the USDT amount to the base unit (without decimals)\r\n        uint256 tokenAmount = calculateTokensUSDT(_amountInUSDT);\r\n\r\n        require(tokenAmount <= token.balanceOf(address(this)), \"Not enough tokens available for sale\");\r\n        \r\n        usdtAddress.transferFrom(msg.sender, platformWallet, _amountInUSDT);\r\n\r\n        // Transfer tokens to the buyer\r\n        token.transfer(msg.sender, tokenAmount );\r\n\r\n        saleSupply += tokenAmount;\r\n\r\n        emit TokensPurchased(msg.sender, tokenAmount, _amountInUSDT, 0);\r\n    }\r\n\r\n    // Fallback function to allow the contract to accept ETH\r\n    receive() external payable {\r\n        purchaseWithETH();\r\n    }\r\n\r\n    // Purchase tokens using ETH\r\n    function purchaseWithETH() public payable {\r\n        require(msg.value > 0, \"ETH amount must be greater than zero\");\r\n        require(tokenPriceInETH > 0, \"Token price must be set\");\r\n\r\n        // Convert the ETH amount to the base unit (without decimals)\r\n        uint256 tokenAmount =  calculateTokensEth(msg.value);// Calculate token amount based on ETH price\r\n\r\n        require(tokenAmount <= token.balanceOf(address(this)), \"Not enough tokens available for sale\");\r\n\r\n        // Transfer ETH to the platform wallet\r\n        platformWallet.transfer(msg.value);\r\n\r\n        // Transfer tokens to the buyer\r\n        token.transfer(msg.sender, tokenAmount);\r\n\r\n        saleSupply += tokenAmount;\r\n\r\n        emit TokensPurchased(msg.sender, tokenAmount, 0, msg.value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPriceInUSDT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPriceInETH\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInEth\",\"type\":\"uint256\"}],\"name\":\"calculateTokensEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInUSDT\",\"type\":\"uint256\"}],\"name\":\"calculateTokensUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInUSDT\",\"type\":\"uint256\"}],\"name\":\"purchaseWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformWallet\",\"type\":\"address\"}],\"name\":\"setPlatformWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceInUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInETH\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdtAddress\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceInUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XeriesTokenSale", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000002926f34ad98ccc6d90556c9f570e2dee2da89eee0000000000000000000000000000000000000000000000000000000005f5e100", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://da4eeb47c84ea5652a6222d7eb1ed2bec49f5e40b7298d66fc9a96d1f5777b30"}