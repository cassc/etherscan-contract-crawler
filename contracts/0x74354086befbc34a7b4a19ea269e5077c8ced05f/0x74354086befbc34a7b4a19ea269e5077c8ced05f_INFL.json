{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/Iinfl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\ninterface Iinfl {\\n\\n    function addPayment() external payable;\\n\\n    function emergencyWithdraw() external;\\n\\n    function inflWithdraw() external;\\n\\n    function setTokenAddress(address _token) external;\\n\\n    function addInfl(address _infl, uint256 _percent) external;\\n\\n    function deleteInfl(address infl) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IOE is IERC20 {\\n    function getIsOdd() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/INFL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"../interfaces/Iinfl.sol\\\";\\nimport \\\"../interfaces/IOE.sol\\\";\\n\\ncontract INFL is Ownable, Iinfl {\\n\\n    struct infl {\\n        uint256 balance;\\n        uint256 totalIncome;\\n        uint256 totalWithdraw;\\n        uint256 percent;\\n    }\\n\\n    mapping(address => infl) public users;\\n    address[] public activeUsers;\\n    uint256 public totalShare;\\n\\n    address public token;\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function _getInfl(address _infl) internal view returns(address, uint256) {\\n        address zInfl = address(0);\\n        for (uint256 i = 0; i < activeUsers.length; ++i) {\\n            if (activeUsers[i] == _infl) {\\n                return (activeUsers[i], i);\\n            }\\n        }\\n        return (zInfl, 0);\\n    }\\n\\n    function setTokenAddress(address _token) external onlyOwner {\\n        require(_token != address(0), 'Error: zero address');\\n        token = _token;\\n    }\\n\\n    function addInfl(address _infl, uint256 _percent) external onlyOwner {\\n        (address rInfl,) = _getInfl(_infl);\\n\\n        if (rInfl == address(0)) {\\n            activeUsers.push(_infl);\\n        }\\n        if (users[_infl].percent > 0) {\\n            totalShare -= users[_infl].percent;\\n        }\\n\\n        users[_infl].percent = _percent;\\n        totalShare += users[_infl].percent;\\n    }\\n\\n    function deleteInfl(address _infl) external onlyOwner {\\n        (address rInfl, uint256 index) = _getInfl(_infl);\\n        require(rInfl != address(0), 'Error: user is not exist');\\n\\n        address lastUser = activeUsers[activeUsers.length - 1];\\n\\n        totalShare -= users[rInfl].percent;\\n\\n        activeUsers[index] = lastUser;\\n        activeUsers.pop();\\n    }\\n\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n\\n        payable(owner()).transfer(balance);\\n    }\\n\\n    function inflWithdraw() external {\\n        uint256 balance = users[msg.sender].balance;\\n        users[msg.sender].balance = 0;\\n        users[msg.sender].totalWithdraw += balance;\\n\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function addPayment() external payable {\\n        uint256 amount = msg.value;\\n        uint256 chunk = amount / totalShare;\\n\\n        for (uint256 i = 0; i < activeUsers.length; ++i) {\\n            users[activeUsers[i]].balance += chunk * users[activeUsers[i]].percent;\\n            users[activeUsers[i]].totalIncome += chunk * users[activeUsers[i]].percent;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function waiveOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_infl\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"addInfl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_infl\",\"type\":\"address\"}],\"name\":\"deleteInfl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "INFL", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}