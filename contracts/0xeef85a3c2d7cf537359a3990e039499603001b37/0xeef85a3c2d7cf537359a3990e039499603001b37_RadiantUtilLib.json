{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IChefIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param user The address of the user\\n     **/\\n    function handleActionBefore(address user) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param user The address of the user\\n     * @param userBalance The balance of the user of the asset in the lending pool\\n     * @param totalSupply The total supply of the asset in the lending pool\\n     **/\\n    function handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n    /**\\n     * @dev Called by the locking contracts after locking or unlocking happens\\n     * @param user The address of the user\\n     **/\\n    function beforeLockUpdate(address user) external;\\n\\n    /**\\n     * @notice Hook for lock update.\\n     * @dev Called by the locking contracts after locking or unlocking happens\\n     */\\n    function afterLockUpdate(address _user) external;\\n\\n    function addPool(address _token, uint256 _allocPoint) external;\\n\\n    function claim(address _user, address[] calldata _tokens) external;\\n\\n    function setClaimReceiver(address _user, address _receiver) external;\\n\\n    function getRegisteredTokens() external view returns (address[] memory);\\n\\n    function disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n    function bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n    function allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n    function claimAll(address _user) external;\\n\\n    function claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n    function setEligibilityExempt(address _address, bool _value) external;\\n\\n    function pendingRewards(\\n        address _user,\\n        address[] memory _tokens\\n    ) external view returns (uint256[] memory);\\n\\n    function rewardsPerSecond() external view returns (uint256);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function userBaseClaimable(address _user) external view returns (uint256);\\n\\n    function poolInfo(address _pool) external view returns(uint256 totalSupply, uint256 allocPoint, uint256 lastRewardTime, uint256 accRewardPerShar, address onwardIncentives);\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/ICreditDelegationToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\ninterface ICreditDelegationToken  {\\n    event BorrowAllowanceDelegated(\\n        address indexed fromUser,\\n        address indexed toUser,\\n        address asset,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev delegates borrowing power to a user on the specific debt token\\n     * @param delegatee the address receiving the delegated borrowing power\\n     * @param amount the maximum amount being delegated. Delegation will still\\n     * respect the liquidation constraints (even if delegated, a delegatee cannot\\n     * force a delegator HF to go below 1)\\n     **/\\n    function approveDelegation(address delegatee, uint256 amount) external;\\n\\n    /**\\n     * @dev returns the borrow allowance of the user\\n     * @param fromUser The user to giving allowance\\n     * @param toUser The user to give allowance to\\n     * @return the current allowance of toUser\\n     **/\\n    function borrowAllowance(address fromUser, address toUser) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IEligibilityDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n\\tfunction refresh(address user) external;\\n\\n\\tfunction updatePrice() external;\\n\\n\\tfunction priceToleranceRatio() external view returns (uint256);\\n\\n\\tfunction requiredEthValue(address user) external view returns (uint256 required);\\n\\n\\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\\n\\n\\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\\n\\n\\tfunction lockedUsdValue(address user) external view returns (uint256);\\n\\n\\tfunction requiredUsdValue(address user) external view returns (uint256 required);\\n\\n\\tfunction lastEligibleStatus(address user) external view returns (bool);\\n\\n\\tfunction isAssetDisqualified(address user) external view returns (bool);\\n\\n\\tfunction rewardEligibleAmount(address token) external view returns (uint256);\\n\\n\\tfunction setDqTime(address _user, uint256 _time) external;\\n\\n\\tfunction getDqTime(address _user) external view returns (uint256);\\n\\n\\tfunction autoprune() external returns (uint256 processed);\\n\\n\\tfunction requiredDepositRatio() external view returns (uint256);\\n\\n\\tfunction RATIO_DIVISOR() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\npragma abicoder v2;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/radiant/IIncentivizedERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IIncentivizedERC20 {\\n\\tfunction getAssetPrice() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IInitializableAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/ILendingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../../libraries/radiant/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\t// function flashLoan(\\n\\t// \\taddress receiverAddress,\\n\\t// \\taddress[] calldata assets,\\n\\t// \\tuint256[] calldata amounts,\\n\\t// \\tuint256[] calldata modes,\\n\\t// \\taddress onBehalfOf,\\n\\t// \\tbytes calldata params,\\n\\t// \\tuint16 referralCode\\n\\t// ) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/radiant/ILendingPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n    function mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n    function burn(uint256 _amount) external returns (bool);\\n\\n    function setMinter(address _minter) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IMultiFeeDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n    function exit(bool claimRewards) external;\\n\\n    function stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n    function rdntToken() external view returns (IMintableToken);\\n\\n    function getPriceProvider() external view returns (address);\\n\\n    function lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n    function autocompoundEnabled(address user) external view returns (bool);\\n\\n    function defaultLockIndex(address _user) external view returns (uint256);\\n\\n    function autoRelockDisabled(address user) external view returns (bool);\\n\\n    function totalBalance(address user) external view returns (uint256);\\n\\n    function zapVestingToLp(address _address) external returns (uint256);\\n\\n    function withdrawExpiredLocksFor(address _address) external returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function claimableRewards(\\n        address account\\n    ) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n    function setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n    function daoTreasury() external view returns (address);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function claimFromConverter(address) external;\\n\\n    function mint(address user, uint256 amount, bool withPenalty) external;\\n\\n    function getReward(address[] memory _rewardTokens) external;\\n\\n    function getAllRewards() external;\\n\\n    function setRelock(bool _status) external;\\n\\n    function rewards(address _user, address _rewardToken) external view returns (uint256);\\n\\n    function earnedBalances(\\n        address user\\n    ) external view returns (uint256 total, uint256 unlocked, EarnedBalance[] memory earningsData);\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n    function getLastClaimTime(address _user) external returns (uint256);\\n\\n    function claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n    function claimCompound(address _user, bool _execute) external returns (uint256 bountyAmt);\\n\\n    function setAutocompound(bool _newVal) external;\\n\\n    function getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/IWETHGateway.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IWETHGateway {\\n\\tfunction depositETH(address lendingPool, address onBehalfOf, uint16 referralCode) external payable;\\n\\n\\tfunction withdrawETH(address lendingPool, uint256 amount, address onBehalfOf) external;\\n\\n\\tfunction repayETH(address lendingPool, uint256 amount, uint256 rateMode, address onBehalfOf) external payable;\\n\\n\\tfunction borrowETH(address lendingPool, uint256 amount, uint256 interesRateMode, uint16 referralCode) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/radiant/LockedBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\npragma abicoder v2;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and RDNT is different\\n\\tuint256 unlocked; // RDNT token\\n\\tuint256 locked; // LP token or RDNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // RDNT token\\n}\"\r\n    },\r\n    \"contracts/libraries/radiant/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/radiant/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n\\t//common errors\\n\\tstring public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n\\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n\\t//contract specific errors\\n\\tstring public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n\\tstring public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n\\tstring public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n\\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n\\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n\\tstring public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n\\tstring public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n\\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n\\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n\\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n\\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n\\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n\\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n\\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n\\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n\\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n\\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n\\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n\\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n\\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n\\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n\\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n\\tstring public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n\\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n\\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n\\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n\\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n\\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n\\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n\\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n\\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n\\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n\\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n\\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n\\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n\\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n\\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n\\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n\\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n\\tstring public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n\\tstring public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n\\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n\\tstring public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n\\tstring public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n\\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n\\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n\\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n\\tstring public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n\\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n\\tstring public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n\\tstring public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n\\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n\\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n\\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n\\tstring public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n\\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n\\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n\\tstring public constant RC_INVALID_LTV = \\\"67\\\";\\n\\tstring public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n\\tstring public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n\\tstring public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n\\tstring public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n\\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n\\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n\\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n\\tstring public constant UL_INVALID_INDEX = \\\"77\\\";\\n\\tstring public constant LP_NOT_CONTRACT = \\\"78\\\";\\n\\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n\\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n\\tenum CollateralManagerErrors {\\n\\t\\tNO_ERROR,\\n\\t\\tNO_COLLATERAL_AVAILABLE,\\n\\t\\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\\n\\t\\tCURRRENCY_NOT_BORROWED,\\n\\t\\tHEALTH_FACTOR_ABOVE_THRESHOLD,\\n\\t\\tNOT_ENOUGH_LIQUIDITY,\\n\\t\\tNO_ACTIVE_RESERVE,\\n\\t\\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n\\t\\tINVALID_EQUAL_ASSETS_TO_SWAP,\\n\\t\\tFROZEN_RESERVE\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/radiant/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.19;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n\\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n\\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n\\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n\\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n\\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n\\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n\\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n\\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n\\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n\\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n\\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n\\tuint256 constant MAX_VALID_LTV = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n\\tuint256 constant MAX_VALID_DECIMALS = 255;\\n\\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n\\t/**\\n\\t * @dev Sets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param ltv the new ltv\\n\\t **/\\n\\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n\\t\\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n\\t\\tself.data = (self.data & LTV_MASK) | ltv;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The loan to value\\n\\t **/\\n\\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn self.data & ~LTV_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param threshold The new liquidation threshold\\n\\t **/\\n\\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n\\t\\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation threshold\\n\\t **/\\n\\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param bonus The new liquidation bonus\\n\\t **/\\n\\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n\\t\\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation bonus\\n\\t **/\\n\\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param decimals The decimals\\n\\t **/\\n\\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n\\t\\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n\\t\\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The decimals of the asset\\n\\t **/\\n\\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param active The active state\\n\\t **/\\n\\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n\\t\\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The active state\\n\\t **/\\n\\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~ACTIVE_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param frozen The frozen state\\n\\t **/\\n\\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n\\t\\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The frozen state\\n\\t **/\\n\\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~FROZEN_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The borrowing state\\n\\t **/\\n\\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables stable rate borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & STABLE_BORROWING_MASK) |\\n\\t\\t\\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the stable rate borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The stable rate borrowing state\\n\\t **/\\n\\tfunction getStableRateBorrowingEnabled(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (bool) {\\n\\t\\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param reserveFactor The reserve factor\\n\\t **/\\n\\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\n\\t\\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n\\t\\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The reserve factor\\n\\t **/\\n\\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\t(dataLocal & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParams(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\tdataLocal & ~LTV_MASK,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParamsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tself.data & ~LTV_MASK,\\n\\t\\t\\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlagsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (bool, bool, bool, bool) {\\n\\t\\treturn (\\n\\t\\t\\t(self.data & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(self.data & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(self.data & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(self.data & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/RadiantUtilLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { IERC20, ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport { ILendingPool } from \\\"../interfaces/radiant/ILendingPool.sol\\\";\\nimport { IWETHGateway } from \\\"../interfaces/radiant/IWETHGateway.sol\\\";\\nimport { ICreditDelegationToken } from \\\"../interfaces/radiant/ICreditDelegationToken.sol\\\";\\nimport { IChefIncentivesController } from \\\"../interfaces/radiant/IChefIncentivesController.sol\\\";\\nimport { IMultiFeeDistribution } from \\\"../interfaces/radiant/IMultiFeeDistribution.sol\\\";\\nimport { IFeeDistribution } from \\\"../interfaces/radiant/IFeeDistribution.sol\\\";\\nimport { IEligibilityDataProvider } from \\\"../interfaces/radiant/IEligibilityDataProvider.sol\\\";\\nimport { IIncentivizedERC20 } from \\\"../interfaces/radiant/IIncentivizedERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { DataTypes } from \\\"./radiant/DataTypes.sol\\\";\\nimport { ReserveConfiguration } from \\\"./radiant/ReserveConfiguration.sol\\\";\\n\\nlibrary RadiantUtilLib {\\n    using SafeERC20 for IERC20;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    /* ============ Structs ============ */\\n\\n    struct PositionStats {\\n        uint256 totalCollateralETH;\\n        uint256 totalDebtETH;\\n        uint256 currentLiquidationThreshold;\\n        uint256 ltv;\\n        uint256 healthFactor;\\n        uint256 maxWithdrawETH;\\n        uint256 availableBorrowsETH;\\n        address targetAsset;\\n        uint256 maxWithdrawAmount;\\n        uint256 maxBorrowableAmount;\\n    }\\n\\n    uint256 public constant NORMALIZED = 10 ** 12;\\n    uint256 public constant DENOMINATOR = 10000;\\n\\n    /* ============ Errors ============ */\\n\\n    error NotSupportedToken();\\n    error HealthFactorTooLow();\\n    error RDNTEligibilityTooLow();\\n\\n    /* ============ Events ============ */\\n\\n    event AssetLooping(address indexed asset, uint256 amountBorrowed);\\n    event Deleverage(address indexed asset, uint256 amountRepaid);\\n\\n    /* ============ Read ============ */\\n\\n    function claimableDlpRewards(\\n        IMultiFeeDistribution mdf,\\n        address _user\\n    ) external view returns (address[] memory _rewardTokens, uint256[] memory _amounts) {\\n        IFeeDistribution.RewardData[] memory rewards = mdf.claimableRewards(_user);\\n\\n        _rewardTokens = new address[](rewards.length);\\n        _amounts = new uint256[](rewards.length);\\n\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            _rewardTokens[i] = rewards[i].token;\\n            _amounts[i] = rewards[i].amount;\\n        }\\n    }\\n\\n    function rdntRewardStats(\\n        IChefIncentivesController chef,\\n        IMultiFeeDistribution mdf,\\n        address _user,\\n        address[] memory _tokens\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 baseClaimable,\\n            uint256[] memory pendings,\\n            uint256 inVesting,\\n            uint256 vested\\n        )\\n    {\\n        baseClaimable = chef.userBaseClaimable(_user);\\n        pendings = chef.pendingRewards(_user, _tokens);\\n\\n        (inVesting, vested, ) = mdf.earnedBalances(_user);\\n    }\\n\\n    function rdntEligibility(\\n        IEligibilityDataProvider edp,\\n        ILendingPool _lendingPool,\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            bool isEligibleForRDNT,\\n            uint256 lockedDLPUSD,\\n            uint256 totalCollateralUSD,\\n            uint256 requiredDLPUSD,\\n            uint256 requiredDLPUSDWithTolerance\\n        )\\n    {\\n        isEligibleForRDNT = edp.isEligibleForRewards(_user);\\n        lockedDLPUSD = edp.lockedUsdValue(_user);\\n        (totalCollateralUSD, , , , , ) = _lendingPool.getUserAccountData(_user);\\n        requiredDLPUSD = edp.requiredUsdValue(_user);\\n        requiredDLPUSDWithTolerance =\\n            (requiredDLPUSD * edp.priceToleranceRatio()) /\\n            edp.RATIO_DIVISOR();\\n    }\\n\\n    function quoteLeverage(\\n        ILendingPool _lendingPool,\\n        address _user,\\n        address _rToken\\n    ) internal view returns (PositionStats memory stats) {\\n        (\\n            stats.totalCollateralETH,\\n            stats.totalDebtETH,\\n            stats.availableBorrowsETH,\\n            stats.currentLiquidationThreshold,\\n            stats.ltv,\\n            stats.healthFactor\\n        ) = _lendingPool.getUserAccountData(_user);\\n\\n        stats.maxWithdrawETH =\\n            stats.totalCollateralETH -\\n            (stats.totalDebtETH * DENOMINATOR) /\\n            stats.currentLiquidationThreshold;\\n        uint256 assetPriceETH = IIncentivizedERC20(_rToken).getAssetPrice();\\n        uint256 decimals = IIncentivizedERC20(_rToken).decimals();\\n\\n        stats.maxWithdrawAmount = (stats.maxWithdrawETH * (10 ** decimals)) / assetPriceETH;\\n        stats.maxBorrowableAmount = (stats.availableBorrowsETH * (10 ** decimals)) / assetPriceETH;\\n    }\\n\\n    // calculate target vd balance to start deleverage, target vd is calculated based on health factor for this asset should be consistent before and after looping.\\n    // The amount to withdraw during deleverage also considering the part to repay and for user withdraw\\n    function calWithdraw(\\n        address _rToken,\\n        address _vdToken,\\n        address _user,\\n        uint256 _assetToWithdraw\\n    ) internal view returns (uint256) {\\n        uint256 totalDebt = IERC20(_vdToken).balanceOf(address(_user));\\n        uint256 repayAmount = (totalDebt * _assetToWithdraw) /\\n            (IERC20(_rToken).balanceOf(address(_user)) - totalDebt);\\n        uint256 targetVD = totalDebt > repayAmount ? totalDebt - repayAmount : 0;\\n\\n        return targetVD;\\n    }\\n\\n    function loopData(\\n        address _asset,\\n        uint256 _amount\\n    ) internal pure returns (address[] memory assetToloop, uint256[] memory vdTarget) {\\n        assetToloop = new address[](1);\\n        assetToloop[0] = _asset;\\n\\n        vdTarget = new uint256[](1);\\n        vdTarget[0] = _amount;\\n    }\\n\\n    /* ============ Validate ============ */\\n\\n    function checkGoodState(\\n        IEligibilityDataProvider edp,\\n        ILendingPool _lendingPool,\\n        address _user,\\n        uint256 _miHealthFactor,\\n        bool _doRevert,\\n        bool _eligibiltyCheck\\n    ) external view returns (bool) {\\n        (, , , , , uint256 healthFactor) = _lendingPool.getUserAccountData(_user);\\n        if (healthFactor < _miHealthFactor) {\\n            if (_doRevert) revert HealthFactorTooLow();\\n            else return false;\\n        }\\n\\n        if (address(edp) == address(0)) return true;\\n\\n        if (_eligibiltyCheck) {\\n            if (!edp.isEligibleForRewards(_user)) {\\n                if (_doRevert) revert RDNTEligibilityTooLow();\\n                else return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /* ============ Writes ============ */\\n\\n    function _loop(\\n        ILendingPool _lendingPool,\\n        IWETHGateway _wethGateway,\\n        address _asset,\\n        address _rToken,\\n        address _vdToken,\\n        address _user,\\n        uint256 _targetVdBal,\\n        bool _isNative\\n    ) internal {\\n        uint256 vdBal = IERC20(_vdToken).balanceOf(_user);\\n        uint256 vdDiff = _targetVdBal - vdBal;\\n\\n        while (vdDiff > 0) {\\n            RadiantUtilLib.PositionStats memory stats = RadiantUtilLib.quoteLeverage(\\n                _lendingPool,\\n                _user,\\n                _rToken\\n            );\\n\\n            uint256 amountToBorrow = vdDiff > stats.maxBorrowableAmount\\n                ? stats.maxBorrowableAmount\\n                : vdDiff;\\n\\n            RadiantUtilLib._depositHelper(\\n                _wethGateway,\\n                _lendingPool,\\n                _asset,\\n                _vdToken,\\n                amountToBorrow,\\n                _isNative,\\n                true\\n            );\\n\\n            vdDiff -= amountToBorrow;\\n\\n            emit AssetLooping(_asset, amountToBorrow);\\n        }\\n    }\\n\\n    function _deleverage(\\n        ILendingPool _lendingPool,\\n        IWETHGateway _wethGateway,\\n        address _asset,\\n        address _rToken,\\n        address _vdToken,\\n        address _user,\\n        uint256 _targetVdBal,\\n        bool _isNative\\n    ) internal {\\n        uint256 vdBal = IERC20(_vdToken).balanceOf(address(this));\\n        uint256 vdDiff = vdBal - _targetVdBal;\\n\\n        while (vdDiff > 0) {\\n            RadiantUtilLib.PositionStats memory stats = RadiantUtilLib.quoteLeverage(\\n                _lendingPool,\\n                address(_user),\\n                _rToken\\n            );\\n            uint256 amountToWithdraw = vdDiff > stats.maxWithdrawAmount\\n                ? stats.maxWithdrawAmount\\n                : vdDiff;\\n\\n            uint256 assetRecAmount = RadiantUtilLib._safeWithdrawAsset(\\n                _wethGateway,\\n                _lendingPool,\\n                _asset,\\n                _rToken,\\n                amountToWithdraw,\\n                _isNative\\n            );\\n\\n            RadiantUtilLib._repay(\\n                _wethGateway,\\n                _lendingPool,\\n                _asset,\\n                _rToken,\\n                assetRecAmount,\\n                _isNative\\n            );\\n            vdDiff -= amountToWithdraw;\\n\\n            emit Deleverage(_asset, assetRecAmount);\\n        }\\n    }\\n\\n    function _depositHelper(\\n        IWETHGateway _wethGateway,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        address _vdToken,\\n        uint256 _amount,\\n        bool isNative,\\n        bool _isFromBorrow\\n    ) internal {\\n        if (isNative) {\\n            if (_isFromBorrow) {\\n                ICreditDelegationToken(_vdToken).approveDelegation(address(_wethGateway), _amount);\\n                _wethGateway.borrowETH(address(_lendingPool), _amount, 2, 0);\\n            }\\n            _wethGateway.depositETH{ value: _amount }(address(_lendingPool), address(this), 0);\\n        } else {\\n            if (_isFromBorrow) {\\n                _lendingPool.borrow(_asset, _amount, 2, 0, address(this));\\n            }\\n\\n            IERC20(_asset).safeApprove(address(_lendingPool), _amount);\\n            _lendingPool.deposit(_asset, _amount, address(this), 0);\\n        }\\n    }\\n\\n    /// @notice make sure when withdaw asset, it won't fail due to tiny amount difference amount.\\n    function _safeWithdrawAsset(\\n        IWETHGateway _wethGateway,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        address _rToken,\\n        uint256 _liquidity,\\n        bool _isNative\\n    ) internal returns (uint256) {\\n        uint256 rTokenBal = IERC20(_rToken).balanceOf(address(this));\\n        uint256 amountToWithdraw = _liquidity > rTokenBal ? rTokenBal : _liquidity;\\n        uint256 assetPrecBal = 0;\\n        uint256 asssetToReceive = 0;\\n        if (_isNative) {\\n            assetPrecBal = address(this).balance;\\n            IERC20(_rToken).approve(address(_wethGateway), amountToWithdraw);\\n            _wethGateway.withdrawETH(address(_lendingPool), amountToWithdraw, address(this));\\n            asssetToReceive = address(this).balance - assetPrecBal;\\n        } else {\\n            assetPrecBal = IERC20(_asset).balanceOf(address(this));\\n            _lendingPool.withdraw(_asset, amountToWithdraw, address(this));\\n            asssetToReceive = IERC20(_asset).balanceOf(address(this)) - assetPrecBal;\\n        }\\n\\n        return asssetToReceive;\\n    }\\n\\n    function _repay(\\n        IWETHGateway _wethGateway,\\n        ILendingPool _lendingPool,\\n        address _asset,\\n        address _rToken,\\n        uint256 _repayAmount,\\n        bool _isNative\\n    ) internal {\\n        if (_isNative) {\\n            IERC20(_rToken).approve(address(_wethGateway), _repayAmount);\\n            _wethGateway.repayETH{ value: _repayAmount }(\\n                address(_lendingPool),\\n                _repayAmount,\\n                2,\\n                address(this)\\n            );\\n        } else {\\n            IERC20(_asset).safeIncreaseAllowance(address(_lendingPool), _repayAmount);\\n            _lendingPool.repay(_asset, _repayAmount, 2, address(this));\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"HealthFactorTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSupportedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RDNTEligibilityTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBorrowed\",\"type\":\"uint256\"}],\"name\":\"AssetLooping\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"}],\"name\":\"Deleverage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NORMALIZED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"edp\",\"type\":\"IEligibilityDataProvider\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"ILendingPool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_miHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_doRevert\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_eligibiltyCheck\",\"type\":\"bool\"}],\"name\":\"checkGoodState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"mdf\",\"type\":\"IMultiFeeDistribution\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableDlpRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"edp\",\"type\":\"IEligibilityDataProvider\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"ILendingPool\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"rdntEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEligibleForRDNT\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockedDLPUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredDLPUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredDLPUSDWithTolerance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChefIncentivesController\",\"name\":\"chef\",\"type\":\"IChefIncentivesController\"},{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"mdf\",\"type\":\"IMultiFeeDistribution\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"rdntRewardStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"pendings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"inVesting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RadiantUtilLib", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}