{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ERC6551Registry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\\n     */\\n    event ERC6551AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\\n     */\\n    error AccountCreationFailed();\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * Emits ERC6551AccountCreated event.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address account);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external view returns (address account);\\n}\\n\\ncontract ERC6551Registry is IERC6551Registry {\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address) {\\n        assembly {\\n            // Memory Layout:\\n            // ----\\n            // 0x00   0xff                           (1 byte)\\n            // 0x01   registry (address)             (20 bytes)\\n            // 0x15   salt (bytes32)                 (32 bytes)\\n            // 0x35   Bytecode Hash (bytes32)        (32 bytes)\\n            // ----\\n            // 0x55   ERC-1167 Constructor + Header  (20 bytes)\\n            // 0x69   implementation (address)       (20 bytes)\\n            // 0x5D   ERC-1167 Footer                (15 bytes)\\n            // 0x8C   salt (uint256)                 (32 bytes)\\n            // 0xAC   chainId (uint256)              (32 bytes)\\n            // 0xCC   tokenContract (address)        (32 bytes)\\n            // 0xEC   tokenId (uint256)              (32 bytes)\\n\\n            // Silence unused variable warnings\\n            pop(chainId)\\n\\n            // Copy bytecode + constant data to memory\\n            calldatacopy(0x8c, 0x24, 0x80) // salt, chainId, tokenContract, tokenId\\n            mstore(0x6c, 0x5af43d82803e903d91602b57fd5bf3) // ERC-1167 footer\\n            mstore(0x5d, implementation) // implementation\\n            mstore(0x49, 0x3d60ad80600a3d3981f3363d3d373d3d3d363d73) // ERC-1167 constructor + header\\n\\n            // Copy create2 computation data to memory\\n            mstore8(0x00, 0xff) // 0xFF\\n            mstore(0x35, keccak256(0x55, 0xb7)) // keccak256(bytecode)\\n            mstore(0x01, shl(96, address())) // registry address\\n            mstore(0x15, salt) // salt\\n\\n            // Compute account address\\n            let computed := keccak256(0x00, 0x55)\\n\\n            // If the account has not yet been deployed\\n            if iszero(extcodesize(computed)) {\\n                // Deploy account contract\\n                let deployed := create2(0, 0x55, 0xb7, salt)\\n\\n                // Revert if the deployment fails\\n                if iszero(deployed) {\\n                    mstore(0x00, 0x20188a59) // `AccountCreationFailed()`\\n                    revert(0x1c, 0x04)\\n                }\\n\\n                // Store account address in memory before salt and chainId\\n                mstore(0x6c, deployed)\\n\\n                // Emit the ERC6551AccountCreated event\\n                log4(\\n                    0x6c,\\n                    0x60,\\n                    // `ERC6551AccountCreated(address,address,bytes32,uint256,address,uint256)`\\n                    0x79f19b3655ee38b1ce526556b7731a20c8f218fbda4a3990b6cc4172fdf88722,\\n                    implementation,\\n                    tokenContract,\\n                    tokenId\\n                )\\n\\n                // Return the account address\\n                return(0x6c, 0x20)\\n            }\\n\\n            // Otherwise, return the computed account address\\n            mstore(0x00, shr(96, shl(96, computed)))\\n            return(0x00, 0x20)\\n        }\\n    }\\n\\n    function account(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external view returns (address) {\\n        assembly {\\n            // Silence unused variable warnings\\n            pop(chainId)\\n            pop(tokenContract)\\n            pop(tokenId)\\n\\n            // Copy bytecode + constant data to memory\\n            calldatacopy(0x8c, 0x24, 0x80) // salt, chainId, tokenContract, tokenId\\n            mstore(0x6c, 0x5af43d82803e903d91602b57fd5bf3) // ERC-1167 footer\\n            mstore(0x5d, implementation) // implementation\\n            mstore(0x49, 0x3d60ad80600a3d3981f3363d3d373d3d3d363d73) // ERC-1167 constructor + header\\n\\n            // Copy create2 computation data to memory\\n            mstore8(0x00, 0xff) // 0xFF\\n            mstore(0x35, keccak256(0x55, 0xb7)) // keccak256(bytecode)\\n            mstore(0x01, shl(96, address())) // registry address\\n            mstore(0x15, salt) // salt\\n\\n            // Store computed account address in memory\\n            mstore(0x00, shr(96, shl(96, keccak256(0x00, 0x55))))\\n\\n            // Return computed account address\\n            return(0x00, 0x20)\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AccountCreationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC6551AccountCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ERC6551Registry", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}