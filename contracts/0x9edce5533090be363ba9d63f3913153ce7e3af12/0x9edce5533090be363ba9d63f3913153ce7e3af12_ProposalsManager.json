{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @ethereansos/swissknife/contracts/lib/GeneralUtilities.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\nlibrary BehaviorUtilities {\r\n\r\n    function randomKey(uint256 i) internal view returns (bytes32) {\r\n        return keccak256(abi.encode(i, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\r\n    }\r\n\r\n    function calculateProjectedArraySizeAndLoopUpperBound(uint256 arraySize, uint256 start, uint256 offset) internal pure returns(uint256 projectedArraySize, uint256 projectedArrayLoopUpperBound) {\r\n        if(arraySize != 0 && start < arraySize && offset != 0) {\r\n            uint256 length = start + offset;\r\n            if(start < (length = length > arraySize ? arraySize : length)) {\r\n                projectedArraySize = (projectedArrayLoopUpperBound = length) - start;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ReflectionUtilities {\r\n\r\n    function read(address subject, bytes memory inputData) internal view returns(bytes memory returnData) {\r\n        bool result;\r\n        (result, returnData) = subject.staticcall(inputData);\r\n        if(!result) {\r\n            assembly {\r\n                revert(add(returnData, 0x20), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n\r\n    function submit(address subject, uint256 value, bytes memory inputData) internal returns(bytes memory returnData) {\r\n        bool result;\r\n        (result, returnData) = subject.call{value : value}(inputData);\r\n        if(!result) {\r\n            assembly {\r\n                revert(add(returnData, 0x20), mload(returnData))\r\n            }\r\n        }\r\n    }\r\n\r\n    function isContract(address subject) internal view returns (bool) {\r\n        if(subject == address(0)) {\r\n            return false;\r\n        }\r\n        uint256 codeLength;\r\n        assembly {\r\n            codeLength := extcodesize(subject)\r\n        }\r\n        return codeLength > 0;\r\n    }\r\n\r\n    function clone(address originalContract) internal returns(address copyContract) {\r\n        assembly {\r\n            mstore(\r\n                0,\r\n                or(\r\n                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\r\n                    mul(originalContract, 0x1000000000000000000)\r\n                )\r\n            )\r\n            copyContract := create(0, 0, 32)\r\n            switch extcodesize(copyContract)\r\n                case 0 {\r\n                    invalid()\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary BytesUtilities {\r\n\r\n    bytes private constant ALPHABET = \"0123456789abcdef\";\r\n    string internal constant BASE64_ENCODER_DATA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n    function asAddress(bytes memory b) internal pure returns(address) {\r\n        if(b.length == 0) {\r\n            return address(0);\r\n        }\r\n        if(b.length == 20) {\r\n            address addr;\r\n            assembly {\r\n                addr := mload(add(b, 20))\r\n            }\r\n            return addr;\r\n        }\r\n        return abi.decode(b, (address));\r\n    }\r\n\r\n    function asAddressArray(bytes memory b) internal pure returns(address[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (address[]));\r\n        }\r\n    }\r\n\r\n    function asBool(bytes memory bs) internal pure returns(bool) {\r\n        return asUint256(bs) != 0;\r\n    }\r\n\r\n    function asBoolArray(bytes memory b) internal pure returns(bool[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (bool[]));\r\n        }\r\n    }\r\n\r\n    function asBytesArray(bytes memory b) internal pure returns(bytes[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (bytes[]));\r\n        }\r\n    }\r\n\r\n    function asString(bytes memory b) internal pure returns(string memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (string));\r\n        }\r\n    }\r\n\r\n    function asStringArray(bytes memory b) internal pure returns(string[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (string[]));\r\n        }\r\n    }\r\n\r\n    function asUint256(bytes memory bs) internal pure returns(uint256 x) {\r\n        if (bs.length >= 32) {\r\n            assembly {\r\n                x := mload(add(bs, add(0x20, 0)))\r\n            }\r\n        }\r\n    }\r\n\r\n    function asUint256Array(bytes memory b) internal pure returns(uint256[] memory callResult) {\r\n        if(b.length > 0) {\r\n            return abi.decode(b, (uint256[]));\r\n        }\r\n    }\r\n\r\n    function toString(bytes memory data) internal pure returns(string memory) {\r\n        bytes memory str = new bytes(2 + data.length * 2);\r\n        str[0] = \"0\";\r\n        str[1] = \"x\";\r\n        for (uint256 i = 0; i < data.length; i++) {\r\n            str[2+i*2] = ALPHABET[uint256(uint8(data[i] >> 4))];\r\n            str[3+i*2] = ALPHABET[uint256(uint8(data[i] & 0x0f))];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    function asSingletonArray(bytes memory a) internal pure returns(bytes[] memory array) {\r\n        array = new bytes[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toBase64(bytes memory data) internal pure returns (string memory) {\r\n        if (data.length == 0) return '';\r\n\r\n        string memory table = BASE64_ENCODER_DATA;\r\n\r\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\r\n\r\n        string memory result = new string(encodedLen + 32);\r\n\r\n        assembly {\r\n            mstore(result, encodedLen)\r\n\r\n            let tablePtr := add(table, 1)\r\n\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n                dataPtr := add(dataPtr, 3)\r\n                let input := mload(dataPtr)\r\n\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\r\n                resultPtr := add(resultPtr, 1)\r\n            }\r\n\r\n            switch mod(mload(data), 3)\r\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\r\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nlibrary StringUtilities {\r\n\r\n    bytes1 private constant CHAR_0 = bytes1('0');\r\n    bytes1 private constant CHAR_A = bytes1('A');\r\n    bytes1 private constant CHAR_a = bytes1('a');\r\n    bytes1 private constant CHAR_f = bytes1('f');\r\n\r\n    bytes  internal constant BASE64_DECODER_DATA = hex\"0000000000000000000000000000000000000000000000000000000000000000\"\r\n                                                   hex\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\"\r\n                                                   hex\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\"\r\n                                                   hex\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\";\r\n\r\n    function isEmpty(string memory test) internal pure returns (bool) {\r\n        return equals(test, \"\");\r\n    }\r\n\r\n    function equals(string memory a, string memory b) internal pure returns(bool) {\r\n        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n    }\r\n\r\n    function toLowerCase(string memory str) internal pure returns(string memory) {\r\n        bytes memory bStr = bytes(str);\r\n        for (uint256 i = 0; i < bStr.length; i++) {\r\n            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\r\n        }\r\n        return string(bStr);\r\n    }\r\n\r\n    function asBytes(string memory str) internal pure returns(bytes memory toDecode) {\r\n        bytes memory data = abi.encodePacked(str);\r\n        if(data.length == 0 || data[0] != \"0\" || (data[1] != \"x\" && data[1] != \"X\")) {\r\n            return \"\";\r\n        }\r\n        uint256 start = 2;\r\n        toDecode = new bytes((data.length - 2) / 2);\r\n\r\n        for(uint256 i = 0; i < toDecode.length; i++) {\r\n            toDecode[i] = bytes1(_fromHexChar(uint8(data[start++])) + _fromHexChar(uint8(data[start++])) * 16);\r\n        }\r\n    }\r\n\r\n    function toBase64(string memory input) internal pure returns(string memory) {\r\n        return BytesUtilities.toBase64(abi.encodePacked(input));\r\n    }\r\n\r\n    function fromBase64(string memory _data) internal pure returns (bytes memory) {\r\n        bytes memory data = bytes(_data);\r\n\r\n        if (data.length == 0) return new bytes(0);\r\n        require(data.length % 4 == 0, \"invalid base64 decoder input\");\r\n\r\n        bytes memory table = BASE64_DECODER_DATA;\r\n\r\n        uint256 decodedLen = (data.length / 4) * 3;\r\n\r\n        bytes memory result = new bytes(decodedLen + 32);\r\n\r\n        assembly {\r\n            let lastBytes := mload(add(data, mload(data)))\r\n            if eq(and(lastBytes, 0xFF), 0x3d) {\r\n                decodedLen := sub(decodedLen, 1)\r\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\r\n                    decodedLen := sub(decodedLen, 1)\r\n                }\r\n            }\r\n\r\n            mstore(result, decodedLen)\r\n\r\n            let tablePtr := add(table, 1)\r\n\r\n            let dataPtr := data\r\n            let endPtr := add(dataPtr, mload(data))\r\n\r\n            let resultPtr := add(result, 32)\r\n\r\n            for {} lt(dataPtr, endPtr) {}\r\n            {\r\n               dataPtr := add(dataPtr, 4)\r\n               let input := mload(dataPtr)\r\n\r\n               let output := add(\r\n                   add(\r\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\r\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\r\n                   add(\r\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\r\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\r\n                    )\r\n                )\r\n                mstore(resultPtr, shl(232, output))\r\n                resultPtr := add(resultPtr, 3)\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function _fromHexChar(uint8 c) private pure returns (uint8) {\r\n        bytes1 charc = bytes1(c);\r\n        return charc < CHAR_0 || charc > CHAR_f ? 0 : (charc < CHAR_A ? 0 : 10) + c - uint8(charc < CHAR_A ? CHAR_0 : charc < CHAR_a ? CHAR_A : CHAR_a);\r\n    }\r\n}\r\n\r\nlibrary Uint256Utilities {\r\n    function asSingletonArray(uint256 n) internal pure returns(uint256[] memory array) {\r\n        array = new uint256[](1);\r\n        array[0] = n;\r\n    }\r\n\r\n    function toHex(uint256 _i) internal pure returns (string memory) {\r\n        return BytesUtilities.toString(abi.encodePacked(_i));\r\n    }\r\n\r\n    function toString(uint256 _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k-1;\r\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function sum(uint256[] memory arr) internal pure returns (uint256 result) {\r\n        for(uint256 i = 0; i < arr.length; i++) {\r\n            result += arr[i];\r\n        }\r\n    }\r\n}\r\n\r\nlibrary AddressUtilities {\r\n    function asSingletonArray(address a) internal pure returns(address[] memory array) {\r\n        array = new address[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toString(address _addr) internal pure returns (string memory) {\r\n        return _addr == address(0) ? \"0x0000000000000000000000000000000000000000\" : BytesUtilities.toString(abi.encodePacked(_addr));\r\n    }\r\n}\r\n\r\nlibrary Bytes32Utilities {\r\n\r\n    function asSingletonArray(bytes32 a) internal pure returns(bytes32[] memory array) {\r\n        array = new bytes32[](1);\r\n        array[0] = a;\r\n    }\r\n\r\n    function toString(bytes32 bt) internal pure returns (string memory) {\r\n        return bt == bytes32(0) ?  \"0x0000000000000000000000000000000000000000000000000000000000000000\" : BytesUtilities.toString(abi.encodePacked(bt));\r\n    }\r\n}\r\n\r\nlibrary TransferUtilities {\r\n    using ReflectionUtilities for address;\r\n\r\n    function balanceOf(address erc20TokenAddress, address account) internal view returns(uint256) {\r\n        if(erc20TokenAddress == address(0)) {\r\n            return account.balance;\r\n        }\r\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).balanceOf.selector, account)), (uint256));\r\n    }\r\n\r\n    function allowance(address erc20TokenAddress, address account, address spender) internal view returns(uint256) {\r\n        if(erc20TokenAddress == address(0)) {\r\n            return 0;\r\n        }\r\n        return abi.decode(erc20TokenAddress.read(abi.encodeWithSelector(IERC20(erc20TokenAddress).allowance.selector, account, spender)), (uint256));\r\n    }\r\n\r\n    function safeApprove(address erc20TokenAddress, address spender, uint256 value) internal {\r\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, spender, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            to.submit(value, \"\");\r\n            return;\r\n        }\r\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            to.submit(value, \"\");\r\n            return;\r\n        }\r\n        bytes memory returnData = erc20TokenAddress.submit(0, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\r\n    }\r\n}\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @ethereansos/swissknife/contracts/generic/model/ILazyInitCapableElement.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface ILazyInitCapableElement is IERC165 {\r\n\r\n    function lazyInit(bytes calldata lazyInitData) external returns(bytes memory initResponse);\r\n    function initializer() external view returns(address);\r\n\r\n    event Host(address indexed from, address indexed to);\r\n\r\n    function host() external view returns(address);\r\n    function setHost(address newValue) external returns(address oldValue);\r\n\r\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) external view returns(bool);\r\n}\r\n// File: @ethereansos/swissknife/contracts/generic/impl/LazyInitCapableElement.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\nabstract contract LazyInitCapableElement is ILazyInitCapableElement {\r\n    using ReflectionUtilities for address;\r\n\r\n    address public override initializer;\r\n    address public override host;\r\n\r\n    constructor(bytes memory lazyInitData) {\r\n        if(lazyInitData.length > 0) {\r\n            _privateLazyInit(lazyInitData);\r\n        }\r\n    }\r\n\r\n    function lazyInit(bytes calldata lazyInitData) override external returns (bytes memory lazyInitResponse) {\r\n        return _privateLazyInit(lazyInitData);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) override external view returns(bool) {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == this.supportsInterface.selector ||\r\n            interfaceId == type(ILazyInitCapableElement).interfaceId ||\r\n            interfaceId == this.lazyInit.selector ||\r\n            interfaceId == this.initializer.selector ||\r\n            interfaceId == this.subjectIsAuthorizedFor.selector ||\r\n            interfaceId == this.host.selector ||\r\n            interfaceId == this.setHost.selector ||\r\n            _supportsInterface(interfaceId);\r\n    }\r\n\r\n    function setHost(address newValue) external override authorizedOnly returns(address oldValue) {\r\n        oldValue = host;\r\n        host = newValue;\r\n        emit Host(oldValue, newValue);\r\n    }\r\n\r\n    function subjectIsAuthorizedFor(address subject, address location, bytes4 selector, bytes calldata payload, uint256 value) public override virtual view returns(bool) {\r\n        (bool chidlElementValidationIsConsistent, bool chidlElementValidationResult) = _subjectIsAuthorizedFor(subject, location, selector, payload, value);\r\n        if(chidlElementValidationIsConsistent) {\r\n            return chidlElementValidationResult;\r\n        }\r\n        if(subject == host) {\r\n            return true;\r\n        }\r\n        if(!host.isContract()) {\r\n            return false;\r\n        }\r\n        (bool result, bytes memory resultData) = host.staticcall(abi.encodeWithSelector(ILazyInitCapableElement(host).subjectIsAuthorizedFor.selector, subject, location, selector, payload, value));\r\n        return result && abi.decode(resultData, (bool));\r\n    }\r\n\r\n    function _privateLazyInit(bytes memory lazyInitData) private returns (bytes memory lazyInitResponse) {\r\n        require(initializer == address(0), \"init\");\r\n        initializer = msg.sender;\r\n        (host, lazyInitResponse) = abi.decode(lazyInitData, (address, bytes));\r\n        emit Host(address(0), host);\r\n        lazyInitResponse = _lazyInit(lazyInitResponse);\r\n    }\r\n\r\n    function _lazyInit(bytes memory) internal virtual returns (bytes memory) {\r\n        return \"\";\r\n    }\r\n\r\n    function _supportsInterface(bytes4 selector) internal virtual view returns (bool);\r\n\r\n    function _subjectIsAuthorizedFor(address, address, bytes4, bytes calldata, uint256) internal virtual view returns(bool, bool) {\r\n    }\r\n\r\n    modifier authorizedOnly {\r\n        require(_authorizedOnly(), \"unauthorized\");\r\n        _;\r\n    }\r\n\r\n    function _authorizedOnly() internal returns(bool) {\r\n        return subjectIsAuthorizedFor(msg.sender, address(this), msg.sig, msg.data, msg.value);\r\n    }\r\n}\r\n// File: @ethereansos/swissknife/contracts/dynamicMetadata/model/IDynamicMetadataCapableElement.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface IDynamicMetadataCapableElement is ILazyInitCapableElement {\r\n\r\n    function uri() external view returns(string memory);\r\n    function plainUri() external view returns(string memory);\r\n\r\n    function setUri(string calldata newValue) external returns (string memory oldValue);\r\n\r\n    function dynamicUriResolver() external view returns(address);\r\n    function setDynamicUriResolver(address newValue) external returns(address oldValue);\r\n}\r\n// File: contracts/core/model/IOrganization.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\ninterface IOrganization is IDynamicMetadataCapableElement {\r\n\r\n    struct Component {\r\n        bytes32 key;\r\n        address location;\r\n        bool active;\r\n        bool log;\r\n    }\r\n\r\n    function keyOf(address componentAddress) external view returns(bytes32);\r\n    function history(bytes32 key) external view returns(address[] memory componentsAddresses);\r\n    function batchHistory(bytes32[] calldata keys) external view returns(address[][] memory componentsAddresses);\r\n\r\n    function get(bytes32 key) external view returns(address componentAddress);\r\n    function list(bytes32[] calldata keys) external view returns(address[] memory componentsAddresses);\r\n    function isActive(address subject) external view returns(bool);\r\n    function keyIsActive(bytes32 key) external view returns(bool);\r\n\r\n    function set(Component calldata) external returns(address replacedComponentAddress);\r\n    function batchSet(Component[] calldata) external returns (address[] memory replacedComponentAddresses);\r\n\r\n    event ComponentSet(bytes32 indexed key, address indexed from, address indexed to, bool active);\r\n\r\n    function submit(address location, bytes calldata payload, address restReceiver) external payable returns(bytes memory response);\r\n}\r\n// File: contracts/base/model/IProposalsManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\ninterface IProposalsManager is IERC1155Receiver, ILazyInitCapableElement {\r\n\r\n    struct ProposalCode {\r\n        address location;\r\n        bytes bytecode;\r\n    }\r\n\r\n    struct ProposalCodes {\r\n        ProposalCode[] codes;\r\n        bool alsoTerminate;\r\n    }\r\n\r\n    struct Proposal {\r\n        address proposer;\r\n        address[] codeSequence;\r\n        uint256 creationBlock;\r\n        uint256 accept;\r\n        uint256 refuse;\r\n        address triggeringRules;\r\n        address[] canTerminateAddresses;\r\n        address[] validatorsAddresses;\r\n        bool validationPassed;\r\n        uint256 terminationBlock;\r\n        bytes votingTokens;\r\n    }\r\n\r\n    struct ProposalConfiguration {\r\n        address[] collections;\r\n        uint256[] objectIds;\r\n        uint256[] weights;\r\n        address creationRules;\r\n        address triggeringRules;\r\n        address[] canTerminateAddresses;\r\n        address[] validatorsAddresses;\r\n    }\r\n\r\n    function batchCreate(ProposalCodes[] calldata codeSequences) external returns(bytes32[] memory createdProposalIds);\r\n\r\n    function list(bytes32[] calldata proposalIds) external view returns(Proposal[] memory);\r\n\r\n    function votes(bytes32[] calldata proposalIds, address[] calldata voters, bytes32[][] calldata items) external view returns(uint256[][] memory accepts, uint256[][] memory refuses, uint256[][] memory toWithdraw);\r\n    function weight(bytes32 code) external view returns(uint256);\r\n\r\n    function vote(address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) external payable;\r\n    function batchVote(bytes[] calldata data) external payable;\r\n\r\n    function withdrawAll(bytes32[] memory proposalIds, address voterOrReceiver, bool afterTermination) external;\r\n\r\n    function terminate(bytes32[] calldata proposalIds) external;\r\n\r\n    function configuration() external view returns(ProposalConfiguration memory);\r\n    function setConfiguration(ProposalConfiguration calldata newValue) external returns(ProposalConfiguration memory oldValue);\r\n\r\n    function lastProposalId() external view returns(bytes32);\r\n\r\n    function lastVoteBlock(address voter) external view returns (uint256);\r\n\r\n    event ProposalCreated(address indexed proposer, address indexed code, bytes32 indexed proposalId);\r\n    event ProposalWeight(bytes32 indexed proposalId, address indexed collection, uint256 indexed id, bytes32 key, uint256 weight);\r\n    event ProposalTerminated(bytes32 indexed proposalId, bool result, bytes errorData);\r\n\r\n    event Accept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event MoveToAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event RetireAccept(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n\r\n    event Refuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event MoveToRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n    event RetireRefuse(bytes32 indexed proposalId, address indexed voter, bytes32 indexed item, uint256 amount);\r\n}\r\n\r\ninterface IProposalChecker {\r\n    function check(address proposalsManagerAddress, bytes32 id, bytes calldata data, address from, address voter) external view returns(bool);\r\n}\r\n\r\ninterface IExternalProposalsManagerCommands {\r\n    function createProposalCodeSequence(bytes32 proposalId, IProposalsManager.ProposalCode[] memory codeSequenceInput, address sender) external returns (address[] memory codeSequence, IProposalsManager.ProposalConfiguration memory localConfiguration);\r\n    function proposalCanBeFinalized(bytes32 proposalId, IProposalsManager.Proposal memory proposal, bool validationPassed, bool result) external view returns (bool);\r\n    function isVotable(bytes32 proposalId, IProposalsManager.Proposal memory proposal, address from, address voter, bool voteOrWithtraw) external view returns (bytes memory response);\r\n}\r\n// File: contracts/base/impl/ProposalsManager.sol\r\n\r\n\r\npragma solidity >=0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary ProposalsManagerLibrary {\r\n    using ReflectionUtilities for address;\r\n\r\n    function createCodeSequence(IProposalsManager.ProposalCode[] memory codeSequenceInput) external returns (address[] memory codeSequence) {\r\n        require(codeSequenceInput.length > 0, \"code\");\r\n        codeSequence = new address[](codeSequenceInput.length);\r\n        for(uint256 i = 0; i < codeSequenceInput.length; i++) {\r\n            address code = codeSequenceInput[i].location;\r\n            bytes memory bytecode = codeSequenceInput[i].bytecode;\r\n            if(bytecode.length > 0) {\r\n                assembly {\r\n                    code := create(0, add(bytecode, 0x20), mload(bytecode))\r\n                }\r\n            }\r\n            codeSequence[i] = code;\r\n            bool isContract;\r\n            assembly {\r\n                isContract := not(iszero(extcodesize(code)))\r\n            }\r\n            require(isContract, \"code\");\r\n        }\r\n    }\r\n\r\n    function giveBack(address[] memory collections, uint256[] memory objectIds, uint256[] memory accepts, uint256[] memory refuses, address receiver) external returns (bool almostOne) {\r\n        for(uint256 i = 0; i < collections.length; i++) {\r\n            uint256 amount = accepts[i] + refuses[i];\r\n            if(amount == 0) {\r\n                continue;\r\n            }\r\n            if(collections[i] != address(0)) {\r\n                collections[i].submit(0, abi.encodeWithSelector(IERC1155(address(0)).safeTransferFrom.selector, address(this), receiver, objectIds[i], amount, \"\"));\r\n            } else {\r\n                _safeTransferOrTransferFrom(address(uint160(objectIds[i])), address(0), receiver, amount);\r\n            }\r\n            almostOne = true;\r\n        }\r\n    }\r\n\r\n    function safeTransferOrTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) external {\r\n        _safeTransferOrTransferFrom(erc20TokenAddress, from, to, value);\r\n    }\r\n\r\n    function _safeTransferOrTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {\r\n        if(value == 0) {\r\n            return;\r\n        }\r\n        if(erc20TokenAddress == address(0)) {\r\n            if(from != address(0)) {\r\n                return;\r\n            }\r\n            to.submit(value, \"\");\r\n            return;\r\n        }\r\n        bytes memory returnData = erc20TokenAddress.submit(0, from == address(0) ? abi.encodeWithSelector(IERC20(address(0)).transfer.selector, to, value) : abi.encodeWithSelector(IERC20(address(0)).transferFrom.selector, from, to, value));\r\n        require(returnData.length == 0 || abi.decode(returnData, (bool)));\r\n    }\r\n\r\n    function setConfiguration(IProposalsManager.ProposalConfiguration storage _configuration, IProposalsManager.ProposalConfiguration memory newValue) external returns(IProposalsManager.ProposalConfiguration memory oldValue) {\r\n        oldValue = _configuration;\r\n        require(newValue.collections.length == newValue.objectIds.length && newValue.collections.length == newValue.weights.length, \"lengths\");\r\n        _configuration.collections = newValue.collections;\r\n        _configuration.objectIds = newValue.objectIds;\r\n        _configuration.weights = newValue.weights;\r\n        _configuration.creationRules = newValue.creationRules;\r\n        _configuration.triggeringRules = newValue.triggeringRules;\r\n        _configuration.canTerminateAddresses = newValue.canTerminateAddresses;\r\n        _configuration.validatorsAddresses = newValue.validatorsAddresses;\r\n    }\r\n\r\n    function performAuthorizedCall(address host, bytes32 key, address subject, bytes memory inputData) external {\r\n        IOrganization organization = IOrganization(host);\r\n        organization.set(IOrganization.Component(key, subject, true, false));\r\n        (bool result, bytes memory returnData) = subject.call(inputData);\r\n        if(!result) {\r\n            returnData = abi.encode(subject, returnData);\r\n            assembly {\r\n                revert(add(returnData, 0x20), mload(returnData))\r\n            }\r\n        }\r\n        if(organization.isActive(subject)) {\r\n            organization.set(IOrganization.Component(key, address(0), false, false));\r\n        }\r\n    }\r\n}\r\n\r\ncontract ProposalsManager is IProposalsManager, LazyInitCapableElement {\r\n    using ReflectionUtilities for address;\r\n\r\n    mapping(bytes32 => Proposal) private _proposal;\r\n    mapping(bytes32 => uint256) public override weight;\r\n\r\n    // Mapping for proposalId => address => item => weighted accept votes\r\n    mapping(bytes32 => mapping(address => mapping(bytes32 => uint256))) private _accept;\r\n\r\n    // Mapping for proposalId => address => item => weighted refuse votes\r\n    mapping(bytes32 => mapping(address => mapping(bytes32 => uint256))) private _refuse;\r\n\r\n    // If the address has withdrawed or not the given objectId\r\n    mapping(bytes32 => mapping(address => mapping(bytes32 => uint256))) private _toWithdraw;\r\n\r\n    ProposalConfiguration private _configuration;\r\n\r\n    uint256 private _keyIndex;\r\n\r\n    bool private _hostIsProposalCommand;\r\n\r\n    bytes32 public override lastProposalId;\r\n\r\n    mapping(address => uint256) public override lastVoteBlock;\r\n\r\n    constructor(bytes memory lazyInitData) LazyInitCapableElement(lazyInitData) {\r\n    }\r\n\r\n    function _lazyInit(bytes memory lazyInitData) internal override returns(bytes memory) {\r\n        (_hostIsProposalCommand, lazyInitData) = abi.decode(lazyInitData, (bool, bytes));\r\n        if(lazyInitData.length > 0) {\r\n            ProposalsManagerLibrary.setConfiguration(_configuration, abi.decode(lazyInitData, (ProposalConfiguration)));\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    function _supportsInterface(bytes4 interfaceId) internal override pure returns(bool) {\r\n        return\r\n            interfaceId == type(IProposalsManager).interfaceId ||\r\n            interfaceId == type(IERC1155Receiver).interfaceId;\r\n    }\r\n\r\n    bytes32[] private _toTerminate;\r\n\r\n    function batchCreate(ProposalCodes[] calldata proposalCodesArray) external override returns(bytes32[] memory createdProposalIds) {\r\n        createdProposalIds = new bytes32[](proposalCodesArray.length);\r\n        ProposalConfiguration memory standardConfiguration = _configuration;\r\n        for(uint256 i = 0; i < proposalCodesArray.length; i++) {\r\n            ProposalCodes memory proposalCodes = proposalCodesArray[i];\r\n            bytes32 proposalId = createdProposalIds[i] = lastProposalId = _randomKey();\r\n            if(proposalCodes.alsoTerminate) {\r\n                _toTerminate.push(proposalId);\r\n            }\r\n            (address[] memory codeSequence, ProposalConfiguration memory localConfiguration) =\r\n            _hostIsProposalCommand ? IExternalProposalsManagerCommands(host).createProposalCodeSequence(proposalId, proposalCodes.codes, msg.sender) :\r\n            (ProposalsManagerLibrary.createCodeSequence(proposalCodes.codes), standardConfiguration);\r\n            (address[] memory collections, uint256[] memory objectIds, uint256[] memory weights) = (\r\n                localConfiguration.collections.length > 0 ? localConfiguration.collections : standardConfiguration.collections,\r\n                localConfiguration.objectIds.length > 0 ? localConfiguration.objectIds : standardConfiguration.objectIds,\r\n                localConfiguration.weights.length > 0 ? localConfiguration.weights : standardConfiguration.weights\r\n            );\r\n            for(uint256 z = 0; z < collections.length; z++) {\r\n                bytes32 key = keccak256(abi.encodePacked(proposalId, collections[z], objectIds[z]));\r\n                emit ProposalWeight(proposalId, collections[z], objectIds[z], key, weight[key] = weights[z]);\r\n            }\r\n            (bool result, bytes memory response) = _validateRules(localConfiguration.creationRules != address(0) ? localConfiguration.creationRules : standardConfiguration.creationRules, proposalId, abi.encode(_proposal[proposalId] = Proposal(\r\n                msg.sender,\r\n                codeSequence,\r\n                block.number,\r\n                0,\r\n                0,\r\n                localConfiguration.triggeringRules != address(0) ? localConfiguration.triggeringRules : standardConfiguration.triggeringRules,\r\n                localConfiguration.canTerminateAddresses.length > 0 ? localConfiguration.canTerminateAddresses : standardConfiguration.canTerminateAddresses,\r\n                localConfiguration.validatorsAddresses.length > 0 ? localConfiguration.validatorsAddresses : standardConfiguration.validatorsAddresses,\r\n                false,\r\n                0,\r\n                abi.encode(collections, objectIds, weights)\r\n            )), msg.sender);\r\n            if(!result) {\r\n                if(response.length > 0) {\r\n                    assembly {\r\n                        revert(add(response, 0x20), mload(response))\r\n                    }\r\n                } else {\r\n                    revert(\"creation\");\r\n                }\r\n            }\r\n            for(uint256 z = 0; z < codeSequence.length; z++) {\r\n                emit ProposalCreated(msg.sender, codeSequence[z], proposalId);\r\n            }\r\n        }\r\n        bytes32[] memory toTerminate = _toTerminate;\r\n        delete _toTerminate;\r\n        if(toTerminate.length > 0) {\r\n            terminate(toTerminate);\r\n        }\r\n    }\r\n\r\n    function list(bytes32[] calldata proposalIds) external override view returns(Proposal[] memory proposals) {\r\n        proposals = new Proposal[](proposalIds.length);\r\n        for(uint256 i = 0; i < proposalIds.length; i++) {\r\n            proposals[i] = _proposal[proposalIds[i]];\r\n        }\r\n    }\r\n\r\n    function votes(bytes32[] calldata proposalIds, address[] calldata voters, bytes32[][] calldata items) external override view returns(uint256[][] memory accepts, uint256[][] memory refuses, uint256[][] memory toWithdraw) {\r\n        accepts = new uint256[][](proposalIds.length);\r\n        refuses = new uint256[][](proposalIds.length);\r\n        toWithdraw = new uint256[][](proposalIds.length);\r\n        for(uint256 i = 0; i < proposalIds.length; i++) {\r\n            accepts[i] = new uint256[](items[i].length);\r\n            refuses[i] = new uint256[](items[i].length);\r\n            toWithdraw[i] = new uint256[](items[i].length);\r\n            for(uint256 z = 0; z < items[i].length; z++) {\r\n                accepts[i][z] = _accept[proposalIds[i]][voters[i]][items[i][z]];\r\n                refuses[i][z] = _refuse[proposalIds[i]][voters[i]][items[i][z]];\r\n                toWithdraw[i][z] = _toWithdraw[proposalIds[i]][voters[i]][items[i][z]];\r\n            }\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(address operator, address from, uint256 objectId, uint256 amount, bytes calldata data) external override returns(bytes4) {\r\n        if(operator != address(this) || data.length > 0) {\r\n            _onItemReceived(from, objectId, amount, data);\r\n        }\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(address operator, address from, uint256[] calldata objectIds, uint256[] calldata amounts, bytes calldata data) external override returns (bytes4) {\r\n        if(operator != address(this) || data.length > 0) {\r\n            bytes[] memory dataArray = abi.decode(data, (bytes[]));\r\n            for(uint256 i = 0; i < objectIds.length; i++) {\r\n                _onItemReceived(from, objectIds[i], amounts[i], dataArray[i]);\r\n            }\r\n        }\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function vote(address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) public override payable {\r\n        if(permitSignature.length > 0) {\r\n            (uint8 v, bytes32 r, bytes32 s, uint256 deadline) = abi.decode(permitSignature, (uint8, bytes32, bytes32, uint256));\r\n            IERC20Permit(erc20TokenAddress).permit(msg.sender, address(this), (accept + refuse), deadline, v, r, s);\r\n        }\r\n        uint256 transferedValue = _safeTransferFrom(erc20TokenAddress, (accept + refuse));\r\n        require(erc20TokenAddress != address(0) || transferedValue == msg.value, \"ETH\");\r\n        _vote(msg.sender, address(0), uint160(erc20TokenAddress), transferedValue, proposalId, accept, refuse, voter, alsoTerminate);\r\n    }\r\n\r\n    function batchVote(bytes[] calldata data) external override payable {\r\n        for(uint256 i = 0; i < data.length; i++) {\r\n            (address erc20TokenAddress, bytes memory permitSignature, bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTerminate) = abi.decode(data[i], (address, bytes, bytes32, uint256, uint256, address, bool));\r\n            vote(erc20TokenAddress, permitSignature, proposalId, accept, refuse, voter, alsoTerminate);\r\n        }\r\n    }\r\n\r\n    function withdrawAll(bytes32[] memory proposalIds, address voterOrReceiver, bool afterTermination) external override {\r\n        bool almostOne = false;\r\n        address voter = msg.sender;\r\n        address receiver = voterOrReceiver != address(0) ? voterOrReceiver : msg.sender;\r\n        if(afterTermination) {\r\n            require(voterOrReceiver != address(0), \"Mandatory\");\r\n            voter = voterOrReceiver;\r\n            receiver = voterOrReceiver;\r\n        }\r\n        for(uint256 z = 0; z < proposalIds.length; z++) {\r\n            bytes32 proposalId = proposalIds[z];\r\n            (bool canVote, address[] memory collections, uint256[] memory objectIds, uint256[] memory accepts, uint256[] memory refuses) = _withdrawAll(proposalId, afterTermination ? voter : msg.sender, voter);\r\n            require(canVote ? !afterTermination : afterTermination, \"termination switch\");\r\n            bool result = ProposalsManagerLibrary.giveBack(collections, objectIds, accepts, refuses, receiver);\r\n            almostOne = almostOne || result;\r\n        }\r\n        require(almostOne, \"No transfers\");\r\n    }\r\n\r\n    function terminate(bytes32[] memory proposalIds) public override {\r\n        for(uint256 i = 0; i < proposalIds.length; i++) {\r\n            Proposal storage proposal = _proposal[proposalIds[i]];\r\n            require(proposal.terminationBlock == 0, \"terminated\");\r\n            require(proposal.validationPassed || _mustStopAtFirst(true, proposal.canTerminateAddresses, proposalIds[i], msg.sender, msg.sender), \"Cannot Terminate\");\r\n            if(!proposal.validationPassed) {\r\n                if(_mustStopAtFirst(false, proposal.validatorsAddresses, proposalIds[i], msg.sender, msg.sender)) {\r\n                    _finalizeTermination(proposalIds[i], proposal, false, false);\r\n                    emit ProposalTerminated(proposalIds[i], false, \"\");\r\n                    continue;\r\n                }\r\n            }\r\n            (bool result, bytes memory errorData) = address(this).call(abi.encodeWithSelector(this.tryExecute.selector, proposal.codeSequence, abi.encodeWithSelector(0xe751f271, proposalIds[i]), new bytes[](0)));//execute(bytes32)\r\n            if(result && errorData.length == 0) {\r\n                (result, ) = _validateRules(proposal.triggeringRules, proposalIds[i], abi.encode(proposal), msg.sender);\r\n                errorData = result ? errorData : bytes(\"triggering\");\r\n            }\r\n            _finalizeTermination(proposalIds[i], proposal, true, result && errorData.length == 0);\r\n            emit ProposalTerminated(proposalIds[i], result, errorData);\r\n        }\r\n    }\r\n\r\n    function tryExecute(address[] memory codeSequence, bytes memory inputData, bytes[] memory bytecodes) external {\r\n        require(msg.sender == address(this));\r\n        for(uint256 i = 0; i < codeSequence.length; i++) {\r\n            address codeLocation = codeSequence[i];\r\n            if(i < bytecodes.length && bytecodes[i].length > 0) {\r\n                require(codeSequence[i] == address(0), \"codeLocation\");\r\n                bytes memory bytecode = bytecodes[i];\r\n                uint256 codeSize;\r\n                assembly {\r\n                    codeLocation := create(0, add(bytecode, 0x20), mload(bytecode))\r\n                    codeSize := extcodesize(codeLocation)\r\n                }\r\n                require(codeLocation != address(0), \"codeLocation\");\r\n                require(codeSize > 0, \"codeSize\");\r\n            }\r\n            ProposalsManagerLibrary.performAuthorizedCall(host, _randomKey(), codeLocation, inputData);\r\n        }\r\n    }\r\n\r\n    function configuration() external override view returns(ProposalConfiguration memory) {\r\n        return _configuration;\r\n    }\r\n\r\n    function setConfiguration(ProposalConfiguration calldata newValue) external override authorizedOnly returns(ProposalConfiguration memory oldValue) {\r\n        return ProposalsManagerLibrary.setConfiguration(_configuration, newValue);\r\n    }\r\n\r\n    function _onItemReceived(address from, uint256 objectId, uint256 amount, bytes memory data) private {\r\n        (bytes32 proposalId, uint256 accept, uint256 refuse, address voter, bool alsoTterminate) = abi.decode(data, (bytes32, uint256, uint256, address, bool));\r\n        _vote(from, msg.sender, objectId, amount, proposalId, accept, refuse, voter, alsoTterminate);\r\n    }\r\n\r\n    function _vote(address from, address collection, uint256 objectId, uint256 amount, bytes32 proposalId, uint256 accept, uint256 refuse, address voterInput, bool alsoTterminate) private {\r\n        if(amount == 0) {\r\n            return;\r\n        }\r\n        require(amount == (accept + refuse), \"amount\");\r\n        address voter = voterInput == address(0) ? from : voterInput;\r\n        _ensure(proposalId, from, voter, true);\r\n        bytes32 item = keccak256(abi.encodePacked(proposalId, collection, objectId));\r\n        uint256 proposalWeight = weight[item];\r\n        require(proposalWeight > 0, \"item\");\r\n        _toWithdraw[proposalId][voter][item] += (accept + refuse);\r\n        if(accept > 0) {\r\n            _accept[proposalId][voter][item] += accept;\r\n            _proposal[proposalId].accept += (accept * proposalWeight);\r\n            emit Accept(proposalId, voter, item, accept);\r\n        }\r\n        if(refuse > 0) {\r\n            _refuse[proposalId][voter][item] += refuse;\r\n            _proposal[proposalId].refuse += (refuse * proposalWeight);\r\n            emit Refuse(proposalId, voter, item, refuse);\r\n        }\r\n        if(accept > 0 || refuse > 0) {\r\n            lastVoteBlock[voter] = block.number;\r\n        }\r\n        if(alsoTterminate) {\r\n            bytes32[] memory proposalIds = new bytes32[](1);\r\n            proposalIds[0] = proposalId;\r\n            terminate(proposalIds);\r\n        }\r\n    }\r\n\r\n    function _ensure(bytes32 proposalId, address from, address voter, bool voteOrWithtraw) private view returns (bool canVote) {\r\n        Proposal memory proposal = _proposal[proposalId];\r\n        require(proposal.creationBlock > 0, \"proposal\");\r\n        if(_hostIsProposalCommand) {\r\n            bytes memory response = IExternalProposalsManagerCommands(host).isVotable(proposalId, proposal, from, voter, voteOrWithtraw);\r\n            if(response.length > 0) {\r\n                return abi.decode(response, (bool));\r\n            }\r\n        }\r\n        bool isTerminated;\r\n        canVote = !(isTerminated = proposal.terminationBlock != 0) && !proposal.validationPassed && !_mustStopAtFirst(true, proposal.canTerminateAddresses, proposalId, from, voter);\r\n        if(voteOrWithtraw) {\r\n            require(canVote, \"vote\");\r\n        } else {\r\n            require(block.number > lastVoteBlock[voter], \"wait 1 block\");\r\n            require(!isTerminated || _proposal[proposalId].terminationBlock < block.number, \"early\");\r\n        }\r\n    }\r\n\r\n    function _mustStopAtFirst(bool value, address[] memory checkers, bytes32 proposalId, address from, address voter) private view returns(bool) {\r\n        if(checkers.length == 0 || (checkers.length == 1 && checkers[0] == address(0))) {\r\n            return value;\r\n        }\r\n        Proposal memory proposal = _proposal[proposalId];\r\n        bytes memory inputData = abi.encodeWithSelector(IProposalChecker(address(0)).check.selector, address(this), proposalId, abi.encode(proposal), from, voter);\r\n        for(uint256 i = 0; i < checkers.length; i++) {\r\n            (bool result, bytes memory response) = checkers[i].staticcall(inputData);\r\n            if((!result || abi.decode(response, (bool))) == value) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _validateRules(address rulesToValidate, bytes32 key, bytes memory payload, address sender) private returns(bool result, bytes memory response) {\r\n        if(rulesToValidate == address(0)) {\r\n            return (true, \"\");\r\n        }\r\n        (result, response) = rulesToValidate.call(abi.encodeWithSelector(IProposalChecker(address(0)).check.selector, address(this), key, payload, sender, sender));\r\n        if(result) {\r\n            result = abi.decode(response, (bool));\r\n            response = \"\";\r\n        }\r\n    }\r\n\r\n    function _finalizeTermination(bytes32 proposalId, Proposal storage proposal, bool validationPassed, bool result) internal virtual {\r\n        proposal.validationPassed = validationPassed;\r\n        if(_hostIsProposalCommand) {\r\n            proposal.terminationBlock = IExternalProposalsManagerCommands(host).proposalCanBeFinalized(proposalId, proposal, validationPassed, result) ? block.number : proposal.terminationBlock;\r\n            return;\r\n        }\r\n        proposal.terminationBlock = !validationPassed || result ? block.number : proposal.terminationBlock;\r\n    }\r\n\r\n    function _safeTransferFrom(address erc20TokenAddress, uint256 value) private returns(uint256) {\r\n        if(erc20TokenAddress == address(0)) {\r\n            return value;\r\n        }\r\n        uint256 previousBalance = IERC20(erc20TokenAddress).balanceOf(address(this));\r\n        ProposalsManagerLibrary.safeTransferOrTransferFrom(erc20TokenAddress, msg.sender, address(this), value);\r\n        uint256 actualBalance = IERC20(erc20TokenAddress).balanceOf(address(this));\r\n        require(actualBalance > previousBalance);\r\n        require(actualBalance - previousBalance == value, \"unsupported\");\r\n        return actualBalance - previousBalance;\r\n    }\r\n\r\n    function _randomKey() private returns (bytes32) {\r\n        return keccak256(abi.encode(_keyIndex++, block.timestamp, block.number, tx.origin, tx.gasprice, block.coinbase, block.difficulty, msg.sender, blockhash(block.number - 5)));\r\n    }\r\n\r\n    function _withdrawAll(bytes32 proposalId, address sender, address voter) private returns(bool canVote, address[] memory collections, uint256[] memory objectIds, uint256[] memory accepts, uint256[] memory refuses) {\r\n        canVote = _ensure(proposalId, sender, voter, false);\r\n        Proposal storage proposal = _proposal[proposalId];\r\n        require(!canVote || block.number > proposal.creationBlock, \"Cannot withdraw during creation\");\r\n        (collections, objectIds,) = abi.decode(proposal.votingTokens, (address[], uint256[], uint256[]));\r\n        accepts = new uint256[](collections.length);\r\n        refuses = new uint256[](collections.length);\r\n        for(uint256 i = 0; i < collections.length; i++) {\r\n            (accepts[i], refuses[i]) = _singleWithdraw(proposal, proposalId, collections[i], objectIds[i], voter, canVote);\r\n        }\r\n    }\r\n\r\n    function _singleWithdraw(Proposal storage proposal, bytes32 proposalId, address collection, uint256 objectId, address voter, bool canVote) private returns(uint256 accept, uint256 refuse) {\r\n        bytes32 item = keccak256(abi.encodePacked(proposalId, collection, objectId));\r\n        uint256 proposalWeight = weight[item];\r\n        require(proposalWeight > 0, \"item\");\r\n        accept = _accept[proposalId][voter][item];\r\n        refuse = _refuse[proposalId][voter][item];\r\n        require(_toWithdraw[proposalId][voter][item] >= (accept + refuse), \"amount\");\r\n        if(accept > 0) {\r\n            _toWithdraw[proposalId][voter][item] -= accept;\r\n            if(canVote) {\r\n                _accept[proposalId][voter][item] -= accept;\r\n                proposal.accept -= (accept * proposalWeight);\r\n                emit RetireAccept(proposalId, voter, item, accept);\r\n            }\r\n        }\r\n        if(refuse > 0) {\r\n            _toWithdraw[proposalId][voter][item] -= refuse;\r\n            if(canVote) {\r\n                _refuse[proposalId][voter][item] -= refuse;\r\n                proposal.refuse -= (refuse * proposalWeight);\r\n                emit RetireRefuse(proposalId, voter, item, refuse);\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"item\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Accept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Host\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"item\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MoveToAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"item\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MoveToRefuse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"code\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"ProposalTerminated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"ProposalWeight\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"item\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refuse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"item\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RetireAccept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"item\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RetireRefuse\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"}],\"internalType\":\"struct IProposalsManager.ProposalCode[]\",\"name\":\"codes\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"alsoTerminate\",\"type\":\"bool\"}],\"internalType\":\"struct IProposalsManager.ProposalCodes[]\",\"name\":\"proposalCodesArray\",\"type\":\"tuple[]\"}],\"name\":\"batchCreate\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"createdProposalIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchVote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configuration\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"creationRules\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"triggeringRules\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"canTerminateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"validatorsAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct IProposalsManager.ProposalConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVoteBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitData\",\"type\":\"bytes\"}],\"name\":\"lazyInit\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"lazyInitResponse\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalIds\",\"type\":\"bytes32[]\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"codeSequence\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accept\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refuse\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"triggeringRules\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"canTerminateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"validatorsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"validationPassed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"terminationBlock\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"votingTokens\",\"type\":\"bytes\"}],\"internalType\":\"struct IProposalsManager.Proposal[]\",\"name\":\"proposals\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"objectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"creationRules\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"triggeringRules\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"canTerminateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"validatorsAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct IProposalsManager.ProposalConfiguration\",\"name\":\"newValue\",\"type\":\"tuple\"}],\"name\":\"setConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"objectIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"creationRules\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"triggeringRules\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"canTerminateAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"validatorsAddresses\",\"type\":\"address[]\"}],\"internalType\":\"struct IProposalsManager.ProposalConfiguration\",\"name\":\"oldValue\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setHost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"location\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"subjectIsAuthorizedFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalIds\",\"type\":\"bytes32[]\"}],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"codeSequence\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"bytecodes\",\"type\":\"bytes[]\"}],\"name\":\"tryExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20TokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permitSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"proposalId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"accept\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refuse\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"alsoTerminate\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"items\",\"type\":\"bytes32[][]\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"accepts\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"refuses\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"toWithdraw\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proposalIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"voterOrReceiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"afterTermination\",\"type\":\"bool\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ProposalsManager", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "ProposalsManagerLibrary:985061f05da5284b985d156f29de9fbb91f26ea9", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9a029d7fff6ca122242fdc548ecfa70a6ea9adaa0d6ef3916b3d9b7c38ef3e29"}