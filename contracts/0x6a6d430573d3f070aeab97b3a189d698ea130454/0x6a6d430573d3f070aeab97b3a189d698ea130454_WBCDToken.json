{"SourceCode": "pragma solidity ^0.5.17;\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n  function totalSupply() public view returns (uint);\r\n  function balanceOf(address tokenOwner) public view returns (uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n  function transfer(address to, uint tokens) public returns (bool success);\r\n  function approve(address spender, uint tokens) public returns (bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a + b;\r\n    require(c >= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b <= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b); // the same as: if (a !=0 && c / a != b) {throw;}\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b > 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Ownable Contract\r\n// ----------------------------------------------------------------------------\r\ncontract Ownable {\r\n  address public owner;\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  \r\n  // The Ownable constructor sets the original `owner` of the contract to the sender account\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  // Allows the current owner to transfer control of the contract to a newOwner.\r\n  // @param newOwner The address to transfer ownership to.\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and an\r\n// initial fixed supply\r\n// ----------------------------------------------------------------------------\r\ncontract WBCDToken is ERC20Interface, Ownable{\r\n  using SafeMath for uint;\r\n\r\n  string public symbol;\r\n  string public  name;\r\n  uint8 public decimals;\r\n  uint _totalSupply;\r\n\r\n  mapping(address => uint) balances;\r\n  mapping(address => mapping(address => uint)) allowed;\r\n  \r\n  event IncrementSupply(address indexed owner, uint256 increments);\r\n  event BurnTokens(address indexed owner, uint256 amount);\r\n\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Constructor\r\n  // ------------------------------------------------------------------------\r\n  constructor() public {\r\n    symbol = \"WBCD\";\r\n    name = \"Wrapped Bitcoin Diamond\";\r\n    decimals = 7;\r\n    _totalSupply = 1000000 * 10**uint(decimals);\r\n    balances[msg.sender] = _totalSupply;\r\n    emit Transfer(address(0), msg.sender, _totalSupply);\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Total supply\r\n  // ------------------------------------------------------------------------\r\n  function totalSupply() public view returns (uint) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Get the token balance for account `tokenOwner`\r\n  // ------------------------------------------------------------------------\r\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n    return balances[tokenOwner];\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer the balance from token owner's account to `to` account\r\n  // - Owner's account must have sufficient balance to transfer\r\n  // - 0 value transfers are allowed\r\n  // ------------------------------------------------------------------------\r\n  function transfer(address to, uint tokens) public returns (bool success) {\r\n    require(to != address(0), \"to address is a zero address\"); \r\n    balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(msg.sender, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Token owner can approve for `spender` to transferFrom(...) `tokens`\r\n  // from the token owner's account\r\n  //\r\n  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n  // recommends that there are no checks for the approval double-spend attack\r\n  // as this should be implemented in user interfaces\r\n  // ------------------------------------------------------------------------\r\n  function approve(address spender, uint tokens) public returns (bool success) {\r\n    require(spender != address(0), \"spender address is a zero address\");   \r\n    allowed[msg.sender][spender] = tokens;\r\n    emit Approval(msg.sender, spender, tokens);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Transfer `tokens` from the `from` account to the `to` account\r\n  //\r\n  // The calling account must already have sufficient tokens approve(...)-d\r\n  // for spending from the `from` account and\r\n  // - From account must have sufficient balance to transfer\r\n  // - Spender must have sufficient allowance to transfer\r\n  // - 0 value transfers are allowed\r\n  // ------------------------------------------------------------------------\r\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n    require(to != address(0), \"to address is a zero address\"); \r\n    balances[from] = balances[from].sub(tokens);\r\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n    balances[to] = balances[to].add(tokens);\r\n    emit Transfer(from, to, tokens);\r\n    return true;\r\n  }\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Returns the amount of tokens approved by the owner that can be\r\n  // transferred to the spender's account\r\n  // ------------------------------------------------------------------------\r\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n    return allowed[tokenOwner][spender];\r\n  }\r\n  \r\n  // ------------------------------------------------------------------------\r\n  // Increment supply\r\n  // ------------------------------------------------------------------------\r\n  function incrementSupply(uint256 increments) public onlyOwner {\r\n    require(increments > 0);\r\n\trequire(_totalSupply.add(increments) < 210000000 * 10**uint(decimals));\r\n    uint256 curTotalSupply = _totalSupply;\r\n    uint256 previousBalance = balanceOf(msg.sender);\r\n    _totalSupply = curTotalSupply.add(increments);\r\n    balances[msg.sender] = previousBalance.add(increments);\r\n    emit IncrementSupply(msg.sender, increments);\r\n    emit Transfer(address(0), msg.sender, increments);\r\n  }\r\n  \r\n  // ------------------------------------------------------------------------\r\n  // Burns `amount` tokens from `owner`\r\n  // @param amount The quantity of tokens being burned\r\n  // @return True if the tokens are burned correctly\r\n  // ------------------------------------------------------------------------\r\n  function burnTokens(uint256 amount) public onlyOwner returns (bool) {\r\n    require(amount > 0);\r\n    uint256 curTotalSupply = _totalSupply;\r\n    require(curTotalSupply >= amount);\r\n    uint256 previousBalanceTo = balanceOf(msg.sender);\r\n    require(previousBalanceTo >= amount);\r\n    _totalSupply = curTotalSupply.sub(amount);\r\n    balances[msg.sender] = previousBalanceTo.sub(amount);\r\n    emit BurnTokens(msg.sender, amount);\r\n    emit Transfer(msg.sender, address(0), amount);\r\n    return true;\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increments\",\"type\":\"uint256\"}],\"name\":\"IncrementSupply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increments\",\"type\":\"uint256\"}],\"name\":\"incrementSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WBCDToken", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://14a501124a58d44731318699e0d8a441925f9c77bdafec2eeb8c8d5abad8d448"}