{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-07-22\r\n*/\r\n\r\n//Team Tenset\r\npragma solidity ^0.4.22;\r\n\r\n/**\r\n * token contract functions\r\n*/\r\ncontract Token {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function approveAndCall(address spender, uint tokens, bytes data) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function ceil(uint256 a, uint256 m) internal constant returns (uint256) {\r\n        uint256 c = add(a,m);\r\n        uint256 d = sub(c,1);\r\n        return mul(div(d,m),m);\r\n    }\r\n}\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract lockToken is owned{\r\n    using SafeMath for uint256;\r\n\r\n    /*\r\n     * deposit vars\r\n    */\r\n    struct Items {\r\n        address tokenAddress;\r\n        address withdrawalAddress;\r\n        uint256 tokenAmount;\r\n        uint256 unlockTime;\r\n        bool withdrawn;\r\n    }\r\n\r\n    uint256 public depositId;\r\n    uint256[] public allDepositIds;\r\n    mapping (address => uint256[]) public depositsByWithdrawalAddress;\r\n    mapping (uint256 => Items) public lockedToken;\r\n    mapping (address => mapping(address => uint256)) public walletTokenBalance;\r\n\r\n    event LogWithdrawal(address SentToAddress, uint256 AmountTransferred);\r\n\r\n\r\n    function _decreaseAmountFee(uint256 _oldAmount) private view returns(uint256 _newAmount) {\r\n        uint256 scaledFee = 2;\r\n        uint256 scalledPercentage = 100;\r\n        return _oldAmount.mul(scaledFee).div(scalledPercentage); // 2/100\r\n    }\r\n\r\n    /**\r\n     *lock tokens\r\n    */\r\n    function lockTokens(address _tokenAddress, address _withdrawalAddress, uint256 _amount, uint256 _unlockTime) public returns (uint256 _id) {\r\n        require(_amount > 0);\r\n        require(_unlockTime < 10000000000);\r\n\r\n        //update balance in address\r\n        uint256 tensetFixedBalance = _amount.sub(_decreaseAmountFee(_amount));\r\n        walletTokenBalance[_tokenAddress][_withdrawalAddress] = walletTokenBalance[_tokenAddress][_withdrawalAddress].add(tensetFixedBalance);\r\n\r\n        _id = ++depositId;\r\n        lockedToken[_id].tokenAddress = _tokenAddress;\r\n        lockedToken[_id].withdrawalAddress = _withdrawalAddress;\r\n        lockedToken[_id].tokenAmount = tensetFixedBalance;\r\n        lockedToken[_id].unlockTime = _unlockTime;\r\n        lockedToken[_id].withdrawn = false;\r\n\r\n        allDepositIds.push(_id);\r\n        depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\r\n\r\n        // transfer tokens into contract\r\n        require(Token(_tokenAddress).transferFrom(msg.sender, this, _amount));\r\n    }\r\n\r\n    /**\r\n     *Create multiple locks\r\n    */\r\n    function createMultipleLocks(address _tokenAddress, address _withdrawalAddress, uint256[] _amounts, uint256[] _unlockTimes) public returns (uint256 _id) {\r\n        require(_amounts.length > 0);\r\n        require(_amounts.length == _unlockTimes.length);\r\n\r\n        uint256 i;\r\n        for(i=0; i<_amounts.length; i++){\r\n            require(_amounts[i] > 0);\r\n            require(_unlockTimes[i] < 10000000000);\r\n\r\n            //update balance in address\r\n            walletTokenBalance[_tokenAddress][_withdrawalAddress] = walletTokenBalance[_tokenAddress][_withdrawalAddress].add(_amounts[i]);\r\n\r\n            _id = ++depositId;\r\n            lockedToken[_id].tokenAddress = _tokenAddress;\r\n            lockedToken[_id].withdrawalAddress = _withdrawalAddress;\r\n            lockedToken[_id].tokenAmount = _amounts[i];\r\n            lockedToken[_id].unlockTime = _unlockTimes[i];\r\n            lockedToken[_id].withdrawn = false;\r\n\r\n            allDepositIds.push(_id);\r\n            depositsByWithdrawalAddress[_withdrawalAddress].push(_id);\r\n\r\n            //transfer tokens into contract\r\n            require(Token(_tokenAddress).transferFrom(msg.sender, this, _amounts[i]));\r\n        }\r\n    }\r\n\r\n    /**\r\n     *Extend lock Duration\r\n    */\r\n    function extendLockDuration(uint256 _id, uint256 _unlockTime) public {\r\n        require(_unlockTime < 10000000000);\r\n        require(_unlockTime > lockedToken[_id].unlockTime);\r\n        require(!lockedToken[_id].withdrawn);\r\n        require(msg.sender == lockedToken[_id].withdrawalAddress);\r\n\r\n        //set new unlock time\r\n        lockedToken[_id].unlockTime = _unlockTime;\r\n    }\r\n\r\n    /**\r\n     *transfer locked tokens\r\n    */\r\n    function transferLocks(uint256 _id, address _receiverAddress) public {\r\n        require(!lockedToken[_id].withdrawn);\r\n        require(msg.sender == lockedToken[_id].withdrawalAddress);\r\n\r\n        //decrease sender's token balance\r\n        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\r\n\r\n        //increase receiver's token balance\r\n        walletTokenBalance[lockedToken[_id].tokenAddress][_receiverAddress] = walletTokenBalance[lockedToken[_id].tokenAddress][_receiverAddress].add(lockedToken[_id].tokenAmount);\r\n\r\n        //remove this id from sender address\r\n        uint256 j;\r\n        uint256 arrLength = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length;\r\n        for (j=0; j<arrLength; j++) {\r\n            if (depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id) {\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][arrLength - 1];\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //Assign this id to receiver address\r\n        lockedToken[_id].withdrawalAddress = _receiverAddress;\r\n        depositsByWithdrawalAddress[_receiverAddress].push(_id);\r\n    }\r\n\r\n    /**\r\n     *withdraw tokens\r\n    */\r\n    function withdrawTokens(uint256 _id) public {\r\n        require(block.timestamp >= lockedToken[_id].unlockTime);\r\n        require(msg.sender == lockedToken[_id].withdrawalAddress);\r\n        require(!lockedToken[_id].withdrawn);\r\n\r\n\r\n        lockedToken[_id].withdrawn = true;\r\n\r\n        //update balance in address\r\n        walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender] = walletTokenBalance[lockedToken[_id].tokenAddress][msg.sender].sub(lockedToken[_id].tokenAmount);\r\n\r\n        //remove this id from this address\r\n        uint256 j;\r\n        uint256 arrLength = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length;\r\n        for (j=0; j<arrLength; j++) {\r\n            if (depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] == _id) {\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][j] = depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress][arrLength - 1];\r\n                depositsByWithdrawalAddress[lockedToken[_id].withdrawalAddress].length--;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // transfer tokens to wallet address\r\n        require(Token(lockedToken[_id].tokenAddress).transfer(msg.sender, lockedToken[_id].tokenAmount));\r\n        LogWithdrawal(msg.sender, lockedToken[_id].tokenAmount);\r\n    }\r\n\r\n    /*get total token balance in contract*/\r\n    function getTotalTokenBalance(address _tokenAddress) view public returns (uint256)\r\n    {\r\n        return Token(_tokenAddress).balanceOf(this);\r\n    }\r\n\r\n    /*get total token balance by address*/\r\n    function getTokenBalanceByAddress(address _tokenAddress, address _walletAddress) view public returns (uint256)\r\n    {\r\n        return walletTokenBalance[_tokenAddress][_walletAddress];\r\n    }\r\n\r\n    /*get allDepositIds*/\r\n    function getAllDepositIds() view public returns (uint256[])\r\n    {\r\n        return allDepositIds;\r\n    }\r\n\r\n    /*get getDepositDetails*/\r\n    function getDepositDetails(uint256 _id) view public returns (address _tokenAddress, address _withdrawalAddress, uint256 _tokenAmount, uint256 _unlockTime, bool _withdrawn)\r\n    {\r\n        return(lockedToken[_id].tokenAddress,lockedToken[_id].withdrawalAddress,lockedToken[_id].tokenAmount,\r\n        lockedToken[_id].unlockTime,lockedToken[_id].withdrawn);\r\n    }\r\n\r\n    /*get DepositsByWithdrawalAddress*/\r\n    function getDepositsByWithdrawalAddress(address _withdrawalAddress) view public returns (uint256[])\r\n    {\r\n        return depositsByWithdrawalAddress[_withdrawalAddress];\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"name\":\"_unlockTimes\",\"type\":\"uint256[]\"}],\"name\":\"createMultipleLocks\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_withdrawalAddress\",\"type\":\"address\"}],\"name\":\"getDepositsByWithdrawalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"getTokenBalanceByAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_receiverAddress\",\"type\":\"address\"}],\"name\":\"transferLocks\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositsByWithdrawalAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllDepositIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"extendLockDuration\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getDepositDetails\",\"outputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_withdrawalAddress\",\"type\":\"address\"},{\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"name\":\"_withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTotalTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletTokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedToken\",\"outputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"withdrawalAddress\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"name\":\"withdrawn\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allDepositIds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"SentToAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"AmountTransferred\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawal\",\"type\":\"event\"}]", "ContractName": "lockToken", "CompilerVersion": "v0.4.22+commit.4cb486ee", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c063da69d21395de76b3b92ebeaba7210b2d502a3f7d7339b29c273824f91acc"}