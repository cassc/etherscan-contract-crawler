{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev The default token decimals value\\n */\\nuint256 constant DECIMALS_DEFAULT = 18;\\n\\n/**\\n * @dev The maximum uint256 value for swap amount limit settings\\n */\\nuint256 constant INFINITY = type(uint256).max;\\n\\n/**\\n * @dev The default limit of account list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_DEFAULT = 100;\\n\\n/**\\n * @dev The limit of swap router list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_ROUTERS = 200;\\n\\n/**\\n * @dev The factor for percentage settings. Example: 100 is 0.1%\\n */\\nuint256 constant MILLIPERCENT_FACTOR = 100_000;\\n\\n/**\\n * @dev The de facto standard address to denote the native token\\n */\\naddress constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Optional value structure\\n * @dev Is used in mappings to allow zero values\\n * @param isSet Value presence flag\\n * @param value Numeric value\\n */\\nstruct OptionalValue {\\n    bool isSet;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure\\n * @dev Is used as an array parameter item to perform multiple key-value settings\\n * @param key Numeric key\\n * @param value Numeric value\\n */\\nstruct KeyToValue {\\n    uint256 key;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure for address values\\n * @dev Is used as an array parameter item to perform multiple key-value settings with address values\\n * @param key Numeric key\\n * @param value Address value\\n */\\nstruct KeyToAddressValue {\\n    uint256 key;\\n    address value;\\n}\\n\\n/**\\n * @notice Address-to-flag structure\\n * @dev Is used as an array parameter item to perform multiple settings\\n * @param account Account address\\n * @param flag Flag value\\n */\\nstruct AccountToFlag {\\n    address account;\\n    bool flag;\\n}\\n\\n/**\\n * @notice Emitted when a list exceeds the size limit\\n */\\nerror ListSizeLimitError();\\n\\n/**\\n * @notice Sets or updates a value in a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @param _value The address value\\n * @param _sizeLimit The map and list size limit\\n * @return isNewKey True if the key was just added, otherwise false\\n */\\nfunction combinedMapSet(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isNewKey) {\\n    isNewKey = !_keyIndexMap[_key].isSet;\\n\\n    if (isNewKey) {\\n        uniqueListAdd(_keyList, _keyIndexMap, _key, _sizeLimit);\\n    }\\n\\n    _map[_key] = _value;\\n}\\n\\n/**\\n * @notice Removes a value from a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @return isChanged True if the combined map was changed, otherwise false\\n */\\nfunction combinedMapRemove(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key\\n) returns (bool isChanged) {\\n    isChanged = _keyIndexMap[_key].isSet;\\n\\n    if (isChanged) {\\n        delete _map[_key];\\n        uniqueListRemove(_keyList, _keyIndexMap, _key);\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListAdd(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListRemove(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            uint256 lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListAdd(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListRemove(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            address lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds or removes a value to/from a unique address value list (a list with value index mapping)\\n * @dev The list size limit is checked on items adding only\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _flag The value inclusion flag\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListUpdate(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    bool _flag,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    return\\n        _flag\\n            ? uniqueAddressListAdd(_list, _indexMap, _value, _sizeLimit)\\n            : uniqueAddressListRemove(_list, _indexMap, _value);\\n}\\n\"\r\n    },\r\n    \"contracts/farm/LPRevenueShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport './RevenueShareBase.sol';\\nimport '../Constants.sol' as Constants;\\n\\ncontract LPRevenueShare is RevenueShareBase {\\n    constructor(address _lockToken, uint256 _lockDuration) RevenueShareBase(_lockDuration) {\\n        lockToken = IERC20(_lockToken);\\n    }\\n\\n    /**\\n     * @dev Add rewards token to the list\\n     * @param _rewardsToken is the reward token address\\n     */\\n    function addReward(address _rewardsToken) external override onlyOwner {\\n        require(_rewardsToken != address(lockToken), 'Rewards token is staking token');\\n\\n        require(\\n            rewardData[_rewardsToken].lastUpdateTime == 0,\\n            'This token already exists as a reward token'\\n        );\\n\\n        require(\\n            rewardTokens.length < Constants.LIST_SIZE_LIMIT_DEFAULT,\\n            'Reward token list: size limit exceeded'\\n        );\\n\\n        rewardTokens.push(_rewardsToken);\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\n        rewardData[_rewardsToken].periodFinish = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev lock `lockToken` tokens to receive rewards in USDC and USDT\\n     * 50% can be from a farm or just a simple lock from the user\\n     * @param _amount is the number of `lockToken` tokens\\n     */\\n    function lock(uint256 _amount) external whenNotPaused {\\n        _lock(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * @dev return unseen amount of tokens\\n     * @param _token is the provided token address\\n     * @param _balance is the provided current balance for the token\\n     */\\n    function _unseen(\\n        address _token,\\n        uint256 _balance\\n    ) internal view override returns (uint256 unseen) {\\n        unseen = IERC20(_token).balanceOf(address(this)) - _balance;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/farm/RevenueShareBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport { Pausable } from '../Pausable.sol';\\n\\nabstract contract RevenueShareBase is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Reward {\\n        uint256 periodFinish;\\n        uint256 rewardRate;\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n        uint256 balance;\\n    }\\n    struct Balances {\\n        uint256 locked;\\n    }\\n    struct LockedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n    struct RewardData {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    bool public publicExitAreSet;\\n    uint256 internal constant SHARE_PRECISION = 1e18;\\n    uint256 public constant rewardsDuration = 7 days;\\n    uint256 public constant rewardLookback = 1 days;\\n    uint256 public immutable lockDuration;\\n    uint256 public lockedSupply;\\n    address[] public rewardTokens;\\n    IERC20 public lockToken;\\n\\n    mapping(address => Reward) public rewardData;\\n    mapping(address => mapping(address => uint)) public userRewardPerTokenPaid;\\n    mapping(address => mapping(address => uint)) public rewards;\\n    mapping(address => Balances) internal balances;\\n    mapping(address => LockedBalance[]) internal userLocks;\\n\\n    event Locked(address indexed user, uint256 amount);\\n    event WithdrawnExpiredLocks(address indexed user, uint256 amount);\\n    event PublicExit();\\n    event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\\n\\n    constructor(uint256 _lockDuration) {\\n        lockDuration = _lockDuration;\\n    }\\n\\n    /**\\n     * @dev Add rewards token to the list\\n     */\\n    function addReward(address _rewardsToken) external virtual;\\n\\n    /**\\n     * @dev User can withdraw his locked funds without a lock period if publicExitAreSet set\\n     */\\n    function publicExit() external onlyOwner {\\n        require(!publicExitAreSet, 'public exit are set');\\n        publicExitAreSet = true;\\n        emit PublicExit();\\n    }\\n\\n    /**\\n     * @dev Information on a user's total/locked/available balances\\n     * @param _user is the address of the user for which the locked balances are checked\\n     * @return total is the amount of locked and unlocked tokens\\n     * @return available is the number of unlocked tokens (that are available to withdraw)\\n     * @return lockedTotal is the number of locked tokens (that are not available to withdraw yet)\\n     * @return lockData is the list with the number of tokens and their unlock time\\n     */\\n    function lockedBalances(\\n        address _user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 available,\\n            uint256 lockedTotal,\\n            LockedBalance[] memory lockData\\n        )\\n    {\\n        LockedBalance[] storage locks = userLocks[_user];\\n        uint256 idx;\\n        for (uint256 i = 0; i < locks.length; i++) {\\n            if (locks[i].unlockTime > block.timestamp) {\\n                if (idx == 0) {\\n                    lockData = new LockedBalance[](locks.length - i);\\n                }\\n                lockData[idx] = locks[i];\\n                idx++;\\n                lockedTotal += locks[i].amount;\\n            } else {\\n                available += locks[i].amount;\\n            }\\n        }\\n        return (balances[_user].locked, available, lockedTotal, lockData);\\n    }\\n\\n    /**\\n     * @dev Withdraw `lockToken` after the locked time (withdraw Expired Locks)\\n     */\\n    function withdraw() external {\\n        _updateReward(msg.sender);\\n        LockedBalance[] storage locks = userLocks[msg.sender];\\n        Balances storage bal = balances[msg.sender];\\n        uint256 amount;\\n        uint256 length = locks.length;\\n        require(length > 0, 'Amount of locks can not be zero value');\\n        if (locks[length - 1].unlockTime <= block.timestamp || publicExitAreSet) {\\n            amount = bal.locked;\\n            delete userLocks[msg.sender];\\n        } else {\\n            for (uint256 i = 0; i < length; i++) {\\n                if (locks[i].unlockTime > block.timestamp) break;\\n                amount += locks[i].amount;\\n                delete locks[i];\\n            }\\n        }\\n        require(amount > 0, 'Amount of locked tokens can not be zero value');\\n        bal.locked -= amount;\\n        lockedSupply -= amount;\\n        lockToken.safeTransfer(msg.sender, amount);\\n        emit WithdrawnExpiredLocks(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Address and claimable amount of all reward tokens for the provided user\\n     * @param _user is the address of the user for which the rewards are checked\\n     * @return _rewards is the list with the amount and token addresses that can be claimed\\n     */\\n    function claimableRewards(address _user) external view returns (RewardData[] memory _rewards) {\\n        _rewards = new RewardData[](rewardTokens.length);\\n        for (uint256 i = 0; i < _rewards.length; i++) {\\n            _rewards[i].token = rewardTokens[i];\\n            _rewards[i].amount =\\n                _earned(\\n                    _user,\\n                    _rewards[i].token,\\n                    balances[_user].locked,\\n                    _rewardPerToken(rewardTokens[i], lockedSupply)\\n                ) /\\n                SHARE_PRECISION;\\n        }\\n        return _rewards;\\n    }\\n\\n    /**\\n     * @dev Transfer Reward tokens to the user\\n     * This function will be executed by anyone every 24 hours (a user or the backend side).\\n     * @param _rewardTokens are the reward token addresses\\n     */\\n    function getReward(address[] calldata _rewardTokens) external whenNotPaused {\\n        _updateReward(msg.sender);\\n        _getReward(_rewardTokens);\\n    }\\n\\n    /**\\n     * @dev Returns amount of rewards per token\\n     * @param _rewardToken is the reward token address\\n     */\\n    function rewardPerToken(address _rewardToken) external view returns (uint256) {\\n        return _rewardPerToken(_rewardToken, lockedSupply);\\n    }\\n\\n    /**\\n     * @dev Returns a last datetime for applicable reward\\n     * @param _rewardToken the address of the reward token\\n     * @return applicableLastTime is the last time applicable reward\\n     */\\n    function lastTimeRewardApplicable(address _rewardToken) public view returns (uint256) {\\n        uint256 periodFinish = rewardData[_rewardToken].periodFinish;\\n        return block.timestamp < periodFinish ? block.timestamp : periodFinish;\\n    }\\n\\n    /**\\n     * @dev main functionality of lock tokens to receive rewards\\n     * @param _amount is the number of `lockToken` tokens\\n     * @param _onBehalfOf is the address who sent the _amount of tokens for locking\\n     */\\n    function _lock(uint256 _amount, address _onBehalfOf) internal {\\n        require(_amount > 0, 'Cannot lock 0');\\n        require(_onBehalfOf != address(0), 'address != 0');\\n        require(\\n            userLocks[_onBehalfOf].length <= 100,\\n            'User can not execute lock function more than 100 times'\\n        );\\n        _updateReward(_onBehalfOf);\\n        lockedSupply += _amount;\\n        Balances storage bal = balances[_onBehalfOf];\\n        bal.locked += _amount;\\n        userLocks[_onBehalfOf].push(\\n            LockedBalance({ amount: _amount, unlockTime: block.timestamp + lockDuration })\\n        );\\n        lockToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Locked(_onBehalfOf, _amount);\\n    }\\n\\n    /**\\n     * @dev Transfer rewards for the user and notify unseen reward that updates rewardRate\\n     * @param _rewardTokens is the provided tokens for getting rewards\\n     */\\n    function _getReward(address[] memory _rewardTokens) internal {\\n        uint256 length = _rewardTokens.length;\\n        for (uint256 i; i < length; i++) {\\n            address token = _rewardTokens[i];\\n            uint256 reward = rewards[msg.sender][token] / SHARE_PRECISION;\\n            Reward storage r = rewardData[token];\\n            uint256 periodFinish = r.periodFinish;\\n            require(periodFinish > 0, 'Unknown reward token');\\n            uint256 balance = r.balance;\\n            if (periodFinish < block.timestamp + (rewardsDuration - rewardLookback)) {\\n                uint256 unseen = _unseen(token, balance);\\n                if (unseen > 0) {\\n                    _notifyReward(token, unseen);\\n                    balance += unseen;\\n                }\\n            }\\n            r.balance = balance - reward;\\n            if (reward == 0) continue;\\n            rewards[msg.sender][token] = 0;\\n            IERC20(token).safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, token, reward);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates rewardRate, periodFinish and lastUpdateTime for provided reward token.\\n     * @dev The code is designed in a way that _notifyReward does not force invoke _updateReward method\\n     * @param _rewardsToken is the reward token address\\n     * @param _reward is the unseen amount of reward token\\n     */\\n    function _notifyReward(address _rewardsToken, uint256 _reward) internal {\\n        Reward storage r = rewardData[_rewardsToken];\\n        if (block.timestamp >= r.periodFinish) {\\n            r.rewardRate = (_reward * SHARE_PRECISION) / rewardsDuration;\\n        } else {\\n            uint256 remaining = r.periodFinish - block.timestamp;\\n            uint256 leftover = (remaining * r.rewardRate) / SHARE_PRECISION;\\n            r.rewardRate = ((_reward + leftover) * SHARE_PRECISION) / rewardsDuration;\\n        }\\n        r.lastUpdateTime = block.timestamp;\\n        r.periodFinish = block.timestamp + rewardsDuration;\\n    }\\n\\n    /**\\n     * @dev Updates reward information for the user\\n     * @param _user is the user address\\n     */\\n    function _updateReward(address _user) internal {\\n        for (uint256 i = 0; i < rewardTokens.length; i++) {\\n            address token = rewardTokens[i];\\n            Reward storage r = rewardData[token];\\n            uint256 rpt = _rewardPerToken(token, lockedSupply);\\n            r.rewardPerTokenStored = rpt;\\n            r.lastUpdateTime = lastTimeRewardApplicable(token);\\n            if (_user != address(this)) {\\n                rewards[_user][token] = _earned(_user, token, balances[_user].locked, rpt);\\n                userRewardPerTokenPaid[_user][token] = rpt;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns current unseen balance for provided token\\n     * @param _token is the token that will be checked for the unseen balance\\n     * @param _balance is the provided current balance for the token\\n     * @return unseen is an amount of calculated unseen balance\\n     */\\n    function _unseen(\\n        address _token,\\n        uint256 _balance\\n    ) internal view virtual returns (uint256 unseen);\\n\\n    /**\\n     * @dev Returns amount of rewards per token\\n     * @param _rewardsToken is the reward token address\\n     * @param _supply is total locked tokens\\n     * @return amount of calculated rewards\\n     */\\n    function _rewardPerToken(\\n        address _rewardsToken,\\n        uint256 _supply\\n    ) internal view returns (uint256) {\\n        if (_supply == 0) {\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\n        }\\n        return\\n            rewardData[_rewardsToken].rewardPerTokenStored +\\n            (((lastTimeRewardApplicable(_rewardsToken) - rewardData[_rewardsToken].lastUpdateTime) *\\n                rewardData[_rewardsToken].rewardRate *\\n                SHARE_PRECISION) / _supply);\\n    }\\n\\n    /**\\n     * @dev Returns current reward info\\n     * @param _user is the user address\\n     * @param _rewardsToken is the address of the reward token\\n     * @param _balance is the currently locked balance for the user\\n     * @param _currentRewardPerToken is the provided current reward per token\\n     * @return calculated reward balance\\n     */\\n    function _earned(\\n        address _user,\\n        address _rewardsToken,\\n        uint256 _balance,\\n        uint256 _currentRewardPerToken\\n    ) internal view returns (uint256) {\\n        return\\n            (_balance * (_currentRewardPerToken - userRewardPerTokenPaid[_user][_rewardsToken])) /\\n            SHARE_PRECISION +\\n            rewards[_user][_rewardsToken];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Pausable as PausableBase } from '@openzeppelin/contracts/security/Pausable.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\n\\n/**\\n * @title Pausable\\n * @notice Base contract that implements the emergency pause mechanism\\n */\\nabstract contract Pausable is PausableBase, ManagerRole {\\n    /**\\n     * @notice Enter pause state\\n     */\\n    function pause() external onlyManager whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Exit pause state\\n     */\\n    function unpause() external onlyManager whenPaused {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/ManagerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { RoleBearers } from './RoleBearers.sol';\\n\\n/**\\n * @title ManagerRole\\n * @notice Base contract that implements the Manager role.\\n * The manager role is a high-permission role for core team members only.\\n * Managers can set vaults and routers addresses, fees, cross-chain protocols,\\n * and other parameters for Interchain (cross-chain) swaps and single-network swaps.\\n * Please note, the manager role is unique for every contract,\\n * hence different addresses may be assigned as managers for different contracts.\\n */\\nabstract contract ManagerRole is Ownable, RoleBearers {\\n    bytes32 private constant ROLE_KEY = keccak256('Manager');\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is updated\\n     * @param account The account address\\n     * @param value The Manager role status flag\\n     */\\n    event SetManager(address indexed account, bool indexed value);\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is renounced\\n     * @param account The account address\\n     */\\n    event RenounceManagerRole(address indexed account);\\n\\n    /**\\n     * @notice Emitted when the caller is not a Manager role bearer\\n     */\\n    error OnlyManagerError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is a Manager role bearer\\n     */\\n    modifier onlyManager() {\\n        if (!isManager(msg.sender)) {\\n            revert OnlyManagerError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the Manager role status for the account\\n     * @param _account The account address\\n     * @param _value The Manager role status flag\\n     */\\n    function setManager(address _account, bool _value) public onlyOwner {\\n        _setRoleBearer(ROLE_KEY, _account, _value);\\n\\n        emit SetManager(_account, _value);\\n    }\\n\\n    /**\\n     * @notice Renounces the Manager role\\n     */\\n    function renounceManagerRole() external onlyManager {\\n        _setRoleBearer(ROLE_KEY, msg.sender, false);\\n\\n        emit RenounceManagerRole(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer count\\n     * @return The Manager role bearer count\\n     */\\n    function managerCount() external view returns (uint256) {\\n        return _roleBearerCount(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of the Manager role bearers\\n     * @return The complete list of the Manager role bearers\\n     */\\n    function fullManagerList() external view returns (address[] memory) {\\n        return _fullRoleBearerList(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer status\\n     * @param _account The account address\\n     */\\n    function isManager(address _account) public view returns (bool) {\\n        return _isRoleBearer(ROLE_KEY, _account);\\n    }\\n\\n    function _initRoles(\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) internal {\\n        address ownerAddress = _owner == address(0) ? msg.sender : _owner;\\n\\n        for (uint256 index; index < _managers.length; index++) {\\n            setManager(_managers[index], true);\\n        }\\n\\n        if (_addOwnerToManagers && !isManager(ownerAddress)) {\\n            setManager(ownerAddress, true);\\n        }\\n\\n        if (ownerAddress != msg.sender) {\\n            transferOwnership(ownerAddress);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RoleBearers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '../Constants.sol' as Constants;\\nimport '../DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title RoleBearers\\n * @notice Base contract that implements role-based access control\\n * @dev A custom implementation providing full role bearer lists\\n */\\nabstract contract RoleBearers {\\n    mapping(bytes32 /*roleKey*/ => address[] /*roleBearers*/) private roleBearerTable;\\n    mapping(bytes32 /*roleKey*/ => mapping(address /*account*/ => DataStructures.OptionalValue /*status*/))\\n        private roleBearerIndexTable;\\n\\n    function _setRoleBearer(bytes32 _roleKey, address _account, bool _value) internal {\\n        DataStructures.uniqueAddressListUpdate(\\n            roleBearerTable[_roleKey],\\n            roleBearerIndexTable[_roleKey],\\n            _account,\\n            _value,\\n            Constants.LIST_SIZE_LIMIT_DEFAULT\\n        );\\n    }\\n\\n    function _isRoleBearer(bytes32 _roleKey, address _account) internal view returns (bool) {\\n        return roleBearerIndexTable[_roleKey][_account].isSet;\\n    }\\n\\n    function _roleBearerCount(bytes32 _roleKey) internal view returns (uint256) {\\n        return roleBearerTable[_roleKey].length;\\n    }\\n\\n    function _fullRoleBearerList(bytes32 _roleKey) internal view returns (address[] memory) {\\n        return roleBearerTable[_roleKey];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ListSizeLimitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManagerError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PublicExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RenounceManagerRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnExpiredLocks\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RevenueShareBase.RewardData[]\",\"name\":\"_rewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullManagerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedTotal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct RevenueShareBase.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicExitAreSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLookback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LPRevenueShare", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000152e2502c22f73a7493df8b856836efbc69e37180000000000000000000000000000000000000000000000000000000000015180", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}