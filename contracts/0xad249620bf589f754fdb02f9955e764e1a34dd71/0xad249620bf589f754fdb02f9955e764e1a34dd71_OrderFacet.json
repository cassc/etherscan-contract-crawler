{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/data/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index >= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/OrderFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport { PaymentStorage } from \\\"../storage/PaymentStorage.sol\\\";\\nimport { AccessControlStorage } from \\\"../storage/AccessControlStorage.sol\\\";\\nimport { ITemplate } from \\\"../interfaces/ITemplate.sol\\\";\\nimport \\\"../libraries/Structs.sol\\\";\\n\\ncontract OrderFacet {\\n\\n    error InvalidAmount();\\n    error InvalidToken();\\n    error InvalidServiceID();\\n    error AddressIsZero();\\n    error ArrayMismatch();\\n\\n    event SubscribeService(bytes32 indexed id, address buyer, address seller, address token, uint security);\\n    event SettlementAssets(bytes32 indexed id, address payer, address receiver, address token, uint amount, uint fee);\\n    event SubscriptionBilling(bytes32[] ids, uint[] amounts, uint[] fees);\\n\\n    function getPredictAddress(bytes32 _id) external view returns (address) {\\n        return Clones.predictDeterministicAddress(PaymentStorage.layout().template, _id);\\n    }\\n\\n    function estimateServiceFee(uint _amount) external view returns (uint) {\\n        if (_amount == 0) return 0;\\n        return PaymentStorage.calculateServiceFee(msg.sender, _amount);\\n    }\\n\\n    function subscribe(bytes32 _id, address _token, address _buyer, address _seller) external {\\n        if (_id == bytes32(0)) revert InvalidServiceID();\\n        if (_token == address(0)) revert AddressIsZero();\\n        if (_buyer == address(0)) revert AddressIsZero();\\n        if (_seller == address(0)) revert AddressIsZero();\\n        AccessControlStorage.enforceIsRole(AccessControlStorage.MANAGER_ROLE);\\n\\n        ITemplate template = ITemplate(Clones.cloneDeterministic(PaymentStorage.layout().template, _id));\\n        uint amount = template.withdrawToken(_token, address(this));\\n        _subscribe(_id, _token, _buyer, _seller, amount);\\n    }\\n\\n    function settle(bytes32 _id, address _token, address _payer, address _receiver) external {\\n        if (_id == bytes32(0)) revert InvalidServiceID();\\n        if (_token == address(0)) revert AddressIsZero();\\n        if (_payer == address(0)) revert AddressIsZero();\\n        if (_receiver == address(0)) revert AddressIsZero();\\n        AccessControlStorage.enforceIsRole(AccessControlStorage.MANAGER_ROLE);\\n        \\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n\\n        ITemplate template = ITemplate(Clones.cloneDeterministic(layout.template, _id));\\n        uint amount = template.withdrawToken(_token, address(this));\\n        uint fee = PaymentStorage.calculateServiceFee(_receiver, amount);\\n\\n        unchecked {\\n            layout.userAccounts[_receiver].balances[_token] += (amount - fee);\\n            layout.protocolIncome[_token] += fee;\\n        }\\n\\n        emit SettlementAssets(_id, _payer, _receiver, _token, amount, fee);\\n    }\\n\\n    function billing(\\n        bytes32[] calldata _ids,\\n        uint[] calldata _amounts\\n    ) external {\\n        AccessControlStorage.enforceIsRole(AccessControlStorage.MANAGER_ROLE);\\n\\n        uint len = _ids.length;\\n        if (len != _amounts.length) revert ArrayMismatch();\\n\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        uint userBalance;\\n        uint userSecurity;\\n        uint remainingAmount;\\n\\n        bytes32[] memory subIds = new bytes32[](len);\\n        uint[] memory bills = new uint[](len);\\n        uint[] memory fees = new uint[](len);\\n        \\n        unchecked {\\n            for (uint i; i < len; ) {\\n                bytes32 id = _ids[i];\\n                if (id == bytes32(0)) revert InvalidServiceID();\\n\\n                Service storage service = layout.subscription[id];\\n                if (service.buyer == address(0)) continue;\\n                address token = service.token;\\n                address seller = service.seller;\\n                uint amount = _amounts[i];\\n                if (amount == 0) revert InvalidAmount();\\n                uint fee = PaymentStorage.calculateServiceFee(seller, amount);\\n\\n                Account storage buyerAccount = layout.userAccounts[service.buyer];\\n                userBalance = buyerAccount.balances[token];\\n                userSecurity = service.security;\\n\\n                if (userBalance + userSecurity < amount) continue;\\n\\n                if (userBalance < amount) {\\n                    remainingAmount = amount - userBalance;\\n                    buyerAccount.balances[token] = 0;\\n                    service.security = userSecurity - remainingAmount;\\n                } else {\\n                    buyerAccount.balances[token] -= amount;\\n                }\\n\\n                service.lastConsume = amount;\\n                layout.userAccounts[seller].balances[token] += (amount - fee);\\n                layout.protocolIncome[token] += fee;\\n\\n                subIds[i] = id;\\n                bills[i] = amount;\\n                fees[i] = fee;\\n\\n                ++i;\\n            }\\n        }\\n\\n        emit SubscriptionBilling(subIds, bills, fees);\\n    }\\n\\n    function _subscribe(\\n        bytes32 _id,\\n        address _token,\\n        address _buyer,\\n        address _seller,\\n        uint _amount\\n    ) internal {\\n        if (_amount == 0) revert InvalidAmount();\\n        PaymentStorage.Layout storage layout = PaymentStorage.layout();\\n        if (!layout.registeredToken[_token]) revert InvalidToken();\\n\\n        Service storage service = layout.subscription[_id];\\n        service.token = _token;\\n        service.buyer = _buyer;\\n        service.seller = _seller;\\n        unchecked {\\n            service.security = _amount;\\n            service.lastConsume = _amount / 2;\\n        }\\n        \\n        emit SubscribeService(_id, _buyer, _seller, _token, _amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITemplate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface ITemplate {\\n\\n    function withdrawToken(address _token, address _target) external returns (uint amount);\\n\\n}\"\r\n    },\r\n    \"contracts/libraries/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// user account\\nstruct Account {\\n    uint feeDiscount;\\n    mapping(address => uint) balances;\\n}\\n\\nstruct Service {\\n    bool terminated;\\n    address token;\\n    address buyer;\\n    address seller;\\n    uint security;\\n    uint lastConsume;\\n}\"\r\n    },\r\n    \"contracts/storage/AccessControlStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport { EnumerableSet } from '@solidstate/contracts/data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error NotRoleAuthorizedError(bytes32, address user);\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 => RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 internal constant MANAGER_ROLE = keccak256('contracts.role.0xManager');\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('contracts.storage.AccessControl');\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    function setContractOwner(address account) internal {\\n        layout().roles[DEFAULT_ADMIN_ROLE].members.add(account);\\n        emit RoleGranted(DEFAULT_ADMIN_ROLE, account, msg.sender);\\n    }\\n\\n    function enforceIsOwner() internal view {\\n        if (!layout().roles[DEFAULT_ADMIN_ROLE].members.contains(msg.sender)) \\n            revert NotRoleAuthorizedError(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function enforceIsRole(bytes32 role) internal view {\\n        if (!layout().roles[role].members.contains(msg.sender)) \\n            revert NotRoleAuthorizedError(role, msg.sender);\\n    }\\n\\n    function enforceIsRole(bytes32 role, address user) internal view {\\n        if (!layout().roles[role].members.contains(user)) \\n            revert NotRoleAuthorizedError(role, user);\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/storage/PaymentStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"../libraries/Structs.sol\\\";\\n\\nlibrary PaymentStorage {\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256('contracts.storage.Payment');\\n\\n    struct Layout {\\n        address template;\\n        uint baseFee;\\n        mapping(address => bool) registeredToken;\\n        mapping(address => uint) protocolIncome;\\n        mapping(address => Account) userAccounts;\\n        mapping(bytes32 => Service) subscription;\\n\\n        uint[60] _gaps;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function calculateServiceFee(address _user, uint _amount) internal view returns (uint) {\\n        Layout storage data = layout();\\n        uint baseFee = data.baseFee;\\n        if (baseFee == 0) return 0;\\n        unchecked {\\n            uint discount = data.userAccounts[_user].feeDiscount;\\n\\n            if (discount == 0) {\\n                return _amount * baseFee / 100_000;\\n            }\\n\\n            return _amount * baseFee * discount / 10_000_000;\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidServiceID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NotRoleAuthorizedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SettlementAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"security\",\"type\":\"uint256\"}],\"name\":\"SubscribeService\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"}],\"name\":\"SubscriptionBilling\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ids\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"billing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"estimateServiceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getPredictAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"subscribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OrderFacet", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}