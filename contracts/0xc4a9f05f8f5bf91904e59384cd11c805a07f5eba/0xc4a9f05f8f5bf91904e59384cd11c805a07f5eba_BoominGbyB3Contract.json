{"SourceCode": "//*********************************************************************//\n//*********************************************************************//\n//\n//     ____   ____   ____   __  ___ ____ _   __ ______   __              ____  _____\n//    / __ ) / __ \\ / __ \\ /  |/  //  _// | / // ____/  / /_   __  __   / __ )|__  /\n//   / __  |/ / / // / / // /|_/ / / / /  |/ // / __   / __ \\ / / / /  / __  | /_ < \n//  / /_/ // /_/ // /_/ // /  / /_/ / / /|  // /_/ /  / /_/ // /_/ /  / /_/ /___/ / \n// /_____/ \\____/ \\____//_/  /_//___//_/ |_/ \\____/  /_.___/ \\__, /  /_____//____/  \n//                                                          /____/                  \n//\n//*********************************************************************//\n//*********************************************************************//\n  \n//-------------DEPENDENCIES--------------------------//\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if account is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, isContract will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on isContract to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's transfer: sends amount wei to\n     * recipient, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by transfer, making them unable to receive funds via\n     * transfer. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to recipient, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level call. A\n     * plain call is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If target reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[abi.decode].\n     *\n     * Requirements:\n     *\n     * - target must be a contract.\n     * - calling target with data must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall], but with\n     * errorMessage as a fallback revert reason when target reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\n     * but also transferring value wei to target.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least value.\n     * - the called Solidity function must be payable.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[functionCallWithValue], but\n     * with errorMessage as a fallback revert reason when target reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[functionCall],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[functionCall],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by operator from from, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with IERC721.onERC721Received.selector.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * interfaceId. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * \n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when tokenId token is transferred from from to to.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when owner enables approved to manage the tokenId token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when owner enables or disables (approved) operator to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in owner's account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the tokenId token.\n     *\n     * Requirements:\n     *\n     * - tokenId must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers tokenId token from from to to, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - from cannot be the zero address.\n     * - to cannot be the zero address.\n     * - tokenId token must exist and be owned by from.\n     * - If the caller is not from, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers tokenId token from from to to.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - from cannot be the zero address.\n     * - to cannot be the zero address.\n     * - tokenId token must be owned by from.\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to to to transfer tokenId token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - tokenId must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for tokenId token.\n     *\n     * Requirements:\n     *\n     * - tokenId must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove operator as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The operator cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the operator is allowed to manage all of the assets of owner.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers tokenId token from from to to.\n     *\n     * Requirements:\n     *\n     * - from cannot be the zero address.\n     * - to cannot be the zero address.\n     * - tokenId token must exist and be owned by from.\n     * - If the caller is not from, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\n\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by owner at a given index of its token list.\n     * Use along with {balanceOf} to enumerate all of owner's tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given index of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for tokenId token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n\n// File: @openzeppelin/contracts/utils/Strings.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from ReentrancyGuard will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single nonReentrant guard, functions marked as\n * nonReentrant may not call one another. This can be worked around by making\n * those functions private, and then adding external nonReentrant entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a nonReentrant function from another nonReentrant\n     * function is not supported. It is possible to prevent this from happening\n     * by making the nonReentrant function external, and making it call a\n     * private function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * onlyOwner, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    function _onlyOwner() private view {\n       require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    modifier onlyOwner() {\n        _onlyOwner();\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * onlyOwner functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (newOwner).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (newOwner).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File contracts/OperatorFilter/IOperatorFilterRegistry.sol\npragma solidity ^0.8.9;\n\ninterface IOperatorFilterRegistry {\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\n    function register(address registrant) external;\n    function registerAndSubscribe(address registrant, address subscription) external;\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\n    function updateOperator(address registrant, address operator, bool filtered) external;\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\n    function subscribe(address registrant, address registrantToSubscribe) external;\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\n    function subscriptionOf(address addr) external returns (address registrant);\n    function subscribers(address registrant) external returns (address[] memory);\n    function subscriberAt(address registrant, uint256 index) external returns (address);\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\n    function filteredOperators(address addr) external returns (address[] memory);\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\n    function isRegistered(address addr) external returns (bool);\n    function codeHashOf(address addr) external returns (bytes32);\n}\n\n// File contracts/OperatorFilter/OperatorFilterer.sol\npragma solidity ^0.8.9;\n\nabstract contract OperatorFilterer {\n    error OperatorNotAllowed(address operator);\n\n    IOperatorFilterRegistry constant operatorFilterRegistry =\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\n\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\n        // order for the modifier to filter addresses.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            if (subscribe) {\n                operatorFilterRegistry.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\n            } else {\n                if (subscriptionOrRegistrantToCopy != address(0)) {\n                    operatorFilterRegistry.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\n                } else {\n                    operatorFilterRegistry.register(address(this));\n                }\n            }\n        }\n    }\n\n    function _onlyAllowedOperator(address from) private view {\n      if (\n          !(\n              operatorFilterRegistry.isOperatorAllowed(address(this), msg.sender)\n              && operatorFilterRegistry.isOperatorAllowed(address(this), from)\n          )\n      ) {\n          revert OperatorNotAllowed(msg.sender);\n      }\n    }\n\n    modifier onlyAllowedOperator(address from) virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            // Allow spending tokens from addresses with balance\n            // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\n            // from an EOA.\n            if (from == msg.sender) {\n                _;\n                return;\n            }\n            _onlyAllowedOperator(from);\n        }\n        _;\n    }\n\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\n        _checkFilterOperator(operator);\n        _;\n    }\n\n    function _checkFilterOperator(address operator) internal view virtual {\n        // Check registry code length to facilitate testing in environments without a deployed registry.\n        if (address(operatorFilterRegistry).code.length > 0) {\n            if (!operatorFilterRegistry.isOperatorAllowed(address(this), operator)) {\n                revert OperatorNotAllowed(operator);\n            }\n        }\n    }\n}\n\n//-------------END DEPENDENCIES------------------------//\n\n\n  \nerror TransactionCapExceeded();\nerror PublicMintingClosed();\nerror ExcessiveOwnedMints();\nerror MintZeroQuantity();\nerror InvalidPayment();\nerror CapExceeded();\nerror IsAlreadyUnveiled();\nerror ValueCannotBeZero();\nerror CannotBeNullAddress();\nerror NoStateChange();\n\nerror PublicMintClosed();\nerror AllowlistMintClosed();\n\nerror AddressNotAllowlisted();\nerror AllowlistDropTimeHasNotPassed();\nerror PublicDropTimeHasNotPassed();\nerror DropTimeNotInFuture();\n\nerror OnlyERC20MintingEnabled();\nerror ERC20TokenNotApproved();\nerror ERC20InsufficientBalance();\nerror ERC20InsufficientAllowance();\nerror ERC20TransferFailed();\n\nerror ClaimModeDisabled();\nerror IneligibleRedemptionContract();\nerror TokenAlreadyRedeemed();\nerror InvalidOwnerForRedemption();\nerror InvalidApprovalForRedemption();\n\nerror ERC721RestrictedApprovalAddressRestricted();\n  \n  \n// Rampp Contracts v2.1 (Teams.sol)\n\nerror InvalidTeamAddress();\nerror DuplicateTeamAddress();\npragma solidity ^0.8.0;\n\n/**\n* Teams is a contract implementation to extend upon Ownable that allows multiple controllers\n* of a single contract to modify specific mint settings but not have overall ownership of the contract.\n* This will easily allow cross-collaboration via Mintplex.xyz.\n**/\nabstract contract Teams is Ownable{\n  mapping (address => bool) internal team;\n\n  /**\n  * @dev Adds an address to the team. Allows them to execute protected functions\n  * @param _address the ETH address to add, cannot be 0x and cannot be in team already\n  **/\n  function addToTeam(address _address) public onlyOwner {\n    if(_address == address(0)) revert InvalidTeamAddress();\n    if(inTeam(_address)) revert DuplicateTeamAddress();\n  \n    team[_address] = true;\n  }\n\n  /**\n  * @dev Removes an address to the team.\n  * @param _address the ETH address to remove, cannot be 0x and must be in team\n  **/\n  function removeFromTeam(address _address) public onlyOwner {\n    if(_address == address(0)) revert InvalidTeamAddress();\n    if(!inTeam(_address)) revert InvalidTeamAddress();\n  \n    team[_address] = false;\n  }\n\n  /**\n  * @dev Check if an address is valid and active in the team\n  * @param _address ETH address to check for truthiness\n  **/\n  function inTeam(address _address)\n    public\n    view\n    returns (bool)\n  {\n    if(_address == address(0)) revert InvalidTeamAddress();\n    return team[_address] == true;\n  }\n\n  /**\n  * @dev Throws if called by any account other than the owner or team member.\n  */\n  function _onlyTeamOrOwner() private view {\n    bool _isOwner = owner() == _msgSender();\n    bool _isTeam = inTeam(_msgSender());\n    require(_isOwner || _isTeam, \"Team: caller is not the owner or in Team.\");\n  }\n\n  modifier onlyTeamOrOwner() {\n    _onlyTeamOrOwner();\n    _;\n  }\n}\n\n\n  \n  \n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\n *\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\n * \n * Assumes the number of issuable tokens (collection size) is capped and fits in a uint128.\n *\n * Does not support burning tokens to address(0).\n */\ncontract ERC721A is\n  Context,\n  ERC165,\n  IERC721,\n  IERC721Metadata,\n  IERC721Enumerable,\n  Teams\n  , OperatorFilterer\n{\n  using Address for address;\n  using Strings for uint256;\n\n  struct TokenOwnership {\n    address addr;\n    uint64 startTimestamp;\n  }\n\n  struct AddressData {\n    uint128 balance;\n    uint128 numberMinted;\n  }\n\n  uint256 private currentIndex;\n\n  uint256 public immutable collectionSize;\n  uint256 public maxBatchSize;\n\n  // Token name\n  string private _name;\n\n  // Token symbol\n  string private _symbol;\n\n  // Mapping from token ID to ownership details\n  // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\n  mapping(uint256 => TokenOwnership) private _ownerships;\n\n  // Mapping owner address to address data\n  mapping(address => AddressData) private _addressData;\n\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  /* @dev Mapping of restricted operator approvals set by contract Owner\n  * This serves as an optional addition to ERC-721 so\n  * that the contract owner can elect to prevent specific addresses/contracts\n  * from being marked as the approver for a token. The reason for this\n  * is that some projects may want to retain control of where their tokens can/can not be listed\n  * either due to ethics, loyalty, or wanting trades to only occur on their personal marketplace.\n  * By default, there are no restrictions. The contract owner must deliberatly block an address \n  */\n  mapping(address => bool) public restrictedApprovalAddresses;\n\n  /**\n   * @dev\n   * maxBatchSize refers to how much a minter can mint at a time.\n   * collectionSize_ refers to how many tokens are in the collection.\n   */\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint256 maxBatchSize_,\n    uint256 collectionSize_\n  ) OperatorFilterer(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6, true) {\n    require(\n      collectionSize_ > 0,\n      \"ERC721A: collection must have a nonzero supply\"\n    );\n    require(maxBatchSize_ > 0, \"ERC721A: max batch size must be nonzero\");\n    _name = name_;\n    _symbol = symbol_;\n    maxBatchSize = maxBatchSize_;\n    collectionSize = collectionSize_;\n    currentIndex = _startTokenId();\n  }\n\n  /**\n  * To change the starting tokenId, please override this function.\n  */\n  function _startTokenId() internal view virtual returns (uint256) {\n    return 1;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-totalSupply}.\n   */\n  function totalSupply() public view override returns (uint256) {\n    return _totalMinted();\n  }\n\n  function currentTokenId() public view returns (uint256) {\n    return _totalMinted();\n  }\n\n  function getNextTokenId() public view returns (uint256) {\n      return _totalMinted() + 1;\n  }\n\n  /**\n  * Returns the total amount of tokens minted in the contract.\n  */\n  function _totalMinted() internal view returns (uint256) {\n    unchecked {\n      return currentIndex - _startTokenId();\n    }\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenByIndex}.\n   */\n  function tokenByIndex(uint256 index) public view override returns (uint256) {\n    require(index < totalSupply(), \"ERC721A: global index out of bounds\");\n    return index;\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n   * This read function is O(collectionSize). If calling from a separate contract, be sure to test gas first.\n   * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index)\n    public\n    view\n    override\n    returns (uint256)\n  {\n    require(index < balanceOf(owner), \"ERC721A: owner index out of bounds\");\n    uint256 numMintedSoFar = totalSupply();\n    uint256 tokenIdsIdx = 0;\n    address currOwnershipAddr = address(0);\n    for (uint256 i = 0; i < numMintedSoFar; i++) {\n      TokenOwnership memory ownership = _ownerships[i];\n      if (ownership.addr != address(0)) {\n        currOwnershipAddr = ownership.addr;\n      }\n      if (currOwnershipAddr == owner) {\n        if (tokenIdsIdx == index) {\n          return i;\n        }\n        tokenIdsIdx++;\n      }\n    }\n    revert(\"ERC721A: unable to get token of owner by index\");\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      interfaceId == type(IERC721Enumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner) public view override returns (uint256) {\n    require(owner != address(0), \"ERC721A: balance query for the zero address\");\n    return uint256(_addressData[owner].balance);\n  }\n\n  function _numberMinted(address owner) internal view returns (uint256) {\n    require(\n      owner != address(0),\n      \"ERC721A: number minted query for the zero address\"\n    );\n    return uint256(_addressData[owner].numberMinted);\n  }\n\n  function ownershipOf(uint256 tokenId)\n    internal\n    view\n    returns (TokenOwnership memory)\n  {\n    uint256 curr = tokenId;\n\n    unchecked {\n        if (_startTokenId() <= curr && curr < currentIndex) {\n            TokenOwnership memory ownership = _ownerships[curr];\n            if (ownership.addr != address(0)) {\n                return ownership;\n            }\n\n            // Invariant:\n            // There will always be an ownership that has an address and is not burned\n            // before an ownership that does not have an address and is not burned.\n            // Hence, curr will not underflow.\n            while (true) {\n                curr--;\n                ownership = _ownerships[curr];\n                if (ownership.addr != address(0)) {\n                    return ownership;\n                }\n            }\n        }\n    }\n\n    revert(\"ERC721A: unable to determine the owner of token\");\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId) public view override returns (address) {\n    return ownershipOf(tokenId).addr;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    string memory baseURI = _baseURI();\n    string memory extension = _baseURIExtension();\n    return\n      bytes(baseURI).length > 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString(), extension))\n        : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the baseURI and the tokenId. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev Base URI extension used for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the baseURI, tokenId, and this value. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURIExtension() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev Sets the value for an address to be in the restricted approval address pool.\n   * Setting an address to true will disable token owners from being able to mark the address\n   * for approval for trading. This would be used in theory to prevent token owners from listing\n   * on specific marketplaces or protcols. Only modifible by the contract owner/team.\n   * @param _address the marketplace/user to modify restriction status of\n   * @param _isRestricted restriction status of the _address to be set. true => Restricted, false => Open\n   */\n  function setApprovalRestriction(address _address, bool _isRestricted) public onlyTeamOrOwner {\n    restrictedApprovalAddresses[_address] = _isRestricted;\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public override onlyAllowedOperatorApproval(to) {\n    address owner = ERC721A.ownerOf(tokenId);\n    require(to != owner, \"ERC721A: approval to current owner\");\n    if(restrictedApprovalAddresses[to]) revert ERC721RestrictedApprovalAddressRestricted();\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"ERC721A: approve caller is not owner nor approved for all\"\n    );\n\n    _approve(to, tokenId, owner);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId) public view override returns (address) {\n    require(_exists(tokenId), \"ERC721A: approved query for nonexistent token\");\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved) public override onlyAllowedOperatorApproval(operator) {\n    require(operator != _msgSender(), \"ERC721A: approve to caller\");\n    if(restrictedApprovalAddresses[operator]) revert ERC721RestrictedApprovalAddressRestricted();\n\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override onlyAllowedOperator(from) {\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public override onlyAllowedOperator(from) {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public override onlyAllowedOperator(from) {\n    _transfer(from, to, tokenId);\n    require(\n      _checkOnERC721Received(from, to, tokenId, _data),\n      \"ERC721A: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  /**\n   * @dev Returns whether tokenId exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (_mint),\n   */\n  function _exists(uint256 tokenId) internal view returns (bool) {\n    return _startTokenId() <= tokenId && tokenId < currentIndex;\n  }\n\n  function _safeMint(address to, uint256 quantity, bool isAdminMint) internal {\n    _safeMint(to, quantity, isAdminMint, \"\");\n  }\n\n  /**\n   * @dev Mints quantity tokens and transfers them to to.\n   *\n   * Requirements:\n   *\n   * - there must be quantity tokens remaining unminted in the total collection.\n   * - to cannot be the zero address.\n   * - quantity cannot be larger than the max batch size.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeMint(\n    address to,\n    uint256 quantity,\n    bool isAdminMint,\n    bytes memory _data\n  ) internal {\n    uint256 startTokenId = currentIndex;\n    require(to != address(0), \"ERC721A: mint to the zero address\");\n    // We know if the first token in the batch doesn't exist, the other ones don't as well, because of serial ordering.\n    require(!_exists(startTokenId), \"ERC721A: token already minted\");\n\n    // For admin mints we do not want to enforce the maxBatchSize limit\n    if (isAdminMint == false) {\n        require(quantity <= maxBatchSize, \"ERC721A: quantity to mint too high\");\n    }\n\n    _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n    AddressData memory addressData = _addressData[to];\n    _addressData[to] = AddressData(\n      addressData.balance + uint128(quantity),\n      addressData.numberMinted + (isAdminMint ? 0 : uint128(quantity))\n    );\n    _ownerships[startTokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n    uint256 updatedIndex = startTokenId;\n\n    for (uint256 i = 0; i < quantity; i++) {\n      emit Transfer(address(0), to, updatedIndex);\n      require(\n        _checkOnERC721Received(address(0), to, updatedIndex, _data),\n        \"ERC721A: transfer to non ERC721Receiver implementer\"\n      );\n      updatedIndex++;\n    }\n\n    currentIndex = updatedIndex;\n    _afterTokenTransfers(address(0), to, startTokenId, quantity);\n  }\n\n  /**\n   * @dev Transfers tokenId from from to to.\n   *\n   * Requirements:\n   *\n   * - to cannot be the zero address.\n   * - tokenId token must be owned by from.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) private {\n    TokenOwnership memory prevOwnership = ownershipOf(tokenId);\n\n    bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\n      getApproved(tokenId) == _msgSender() ||\n      isApprovedForAll(prevOwnership.addr, _msgSender()));\n\n    require(\n      isApprovedOrOwner,\n      \"ERC721A: transfer caller is not owner nor approved\"\n    );\n\n    require(\n      prevOwnership.addr == from,\n      \"ERC721A: transfer from incorrect owner\"\n    );\n    require(to != address(0), \"ERC721A: transfer to the zero address\");\n\n    _beforeTokenTransfers(from, to, tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId, prevOwnership.addr);\n\n    _addressData[from].balance -= 1;\n    _addressData[to].balance += 1;\n    _ownerships[tokenId] = TokenOwnership(to, uint64(block.timestamp));\n\n    // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\n    // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\n    uint256 nextTokenId = tokenId + 1;\n    if (_ownerships[nextTokenId].addr == address(0)) {\n      if (_exists(nextTokenId)) {\n        _ownerships[nextTokenId] = TokenOwnership(\n          prevOwnership.addr,\n          prevOwnership.startTimestamp\n        );\n      }\n    }\n\n    emit Transfer(from, to, tokenId);\n    _afterTokenTransfers(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev Approve to to operate on tokenId\n   *\n   * Emits a {Approval} event.\n   */\n  function _approve(\n    address to,\n    uint256 tokenId,\n    address owner\n  ) private {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(owner, to, tokenId);\n  }\n\n  uint256 public nextOwnerToExplicitlySet = 0;\n\n  /**\n   * @dev Explicitly set owners to eliminate loops in future calls of ownerOf().\n   */\n  function _setOwnersExplicit(uint256 quantity) internal {\n    uint256 oldNextOwnerToSet = nextOwnerToExplicitlySet;\n    require(quantity > 0, \"quantity must be nonzero\");\n    if (currentIndex == _startTokenId()) revert('No Tokens Minted Yet');\n\n    uint256 endIndex = oldNextOwnerToSet + quantity - 1;\n    if (endIndex > collectionSize - 1) {\n      endIndex = collectionSize - 1;\n    }\n    // We know if the last one in the group exists, all in the group exist, due to serial ordering.\n    require(_exists(endIndex), \"not enough minted yet for this cleanup\");\n    for (uint256 i = oldNextOwnerToSet; i <= endIndex; i++) {\n      if (_ownerships[i].addr == address(0)) {\n        TokenOwnership memory ownership = ownershipOf(i);\n        _ownerships[i] = TokenOwnership(\n          ownership.addr,\n          ownership.startTimestamp\n        );\n      }\n    }\n    nextOwnerToExplicitlySet = endIndex + 1;\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param tokenId uint256 ID of the token to be transferred\n   * @param _data bytes optional data to send along with the call\n   * @return bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) private returns (bool) {\n    if (to.isContract()) {\n      try\n        IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data)\n      returns (bytes4 retval) {\n        return retval == IERC721Receiver(to).onERC721Received.selector;\n      } catch (bytes memory reason) {\n        if (reason.length == 0) {\n          revert(\"ERC721A: transfer to non ERC721Receiver implementer\");\n        } else {\n          assembly {\n            revert(add(32, reason), mload(reason))\n          }\n        }\n      }\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When from and to are both non-zero, from's tokenId will be\n   * transferred to to.\n   * - When from is zero, tokenId will be minted for to.\n   */\n  function _beforeTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n   * minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - when from and to are both non-zero.\n   * - from and to are never both zero.\n   */\n  function _afterTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n}\n\n// @title An implementation of ERC-721A with additonal context for 1:1 redemption with another ERC-721\n// @author Mintplex.xyz (Mintplex Labs Inc) (Twitter: @MintplexNFT)\n// @notice -- See Medium article --\n// @custom:experimental This is an experimental contract interface. Mintplex assumes no responsibility for functionality or security.\nabstract contract ERC721ARedemption is ERC721A {\n  // @dev Emitted when someone exchanges an NFT for this contracts NFT via token redemption swap\n  event Redeemed(address indexed from, uint256 indexed tokenId, address indexed contractAddress);\n\n  // @dev Emitted when someone proves ownership of an NFT for this contracts NFT via token redemption swap\n  event VerifiedClaim(address indexed from, uint256 indexed tokenId, address indexed contractAddress);\n  \n  uint256 public redemptionSurcharge = 0 ether;\n  bool public redemptionModeEnabled;\n  bool public verifiedClaimModeEnabled;\n  address public redemptionAddress = 0x000000000000000000000000000000000000dEaD; // address burned tokens are sent, default is dEaD.\n  mapping(address => bool) public redemptionContracts;\n  mapping(address => mapping(uint256 => bool)) public tokenRedemptions;\n\n  // @dev Allow owner/team to set the contract as eligable for redemption for this contract\n  function setRedeemableContract(address _contractAddress, bool _status) public onlyTeamOrOwner {\n    redemptionContracts[_contractAddress] = _status;\n  }\n\n  // @dev Allow owner/team to determine if contract is accepting redemption mints\n  function setRedemptionMode(bool _newStatus) public onlyTeamOrOwner {\n    redemptionModeEnabled = _newStatus;\n  }\n\n  // @dev Allow owner/team to determine if contract is accepting verified claim mints\n  function setVerifiedClaimMode(bool _newStatus) public onlyTeamOrOwner {\n    verifiedClaimModeEnabled = _newStatus;\n  }\n\n  // @dev Set the fee that it would cost a minter to be able to burn/validtion mint a token on this contract. \n  function setRedemptionSurcharge(uint256 _newSurchargeInWei) public onlyTeamOrOwner {\n    redemptionSurcharge = _newSurchargeInWei;\n  }\n\n  // @dev Set the redemption address where redeemed NFTs will be transferred when \"burned\". \n  // @notice Must be a wallet address or implement IERC721Receiver.\n  // Cannot be null address as this will break any ERC-721A implementation without a proper\n  // burn mechanic as ownershipOf cannot handle 0x00 holdings mid batch.\n  function setRedemptionAddress(address _newRedemptionAddress) public onlyTeamOrOwner {\n    if(_newRedemptionAddress == address(0)) revert CannotBeNullAddress();\n    redemptionAddress = _newRedemptionAddress;\n  }\n\n  /**\n  * @dev allows redemption or \"burning\" of a single tokenID. Must be owned by the owner\n  * @notice this does not impact the total supply of the burned token and the transfer destination address may be set by\n  * the contract owner or Team => redemptionAddress. \n  * @param tokenId the token to be redeemed.\n  * Emits a {Redeemed} event.\n  **/\n  function redeem(address redemptionContract, uint256 tokenId) public payable {\n    if(getNextTokenId() > collectionSize) revert CapExceeded();\n    if(!redemptionModeEnabled) revert ClaimModeDisabled();\n    if(redemptionContract == address(0)) revert CannotBeNullAddress();\n    if(!redemptionContracts[redemptionContract]) revert IneligibleRedemptionContract();\n    if(msg.value != redemptionSurcharge) revert InvalidPayment();\n    if(tokenRedemptions[redemptionContract][tokenId]) revert TokenAlreadyRedeemed();\n    \n    IERC721 _targetContract = IERC721(redemptionContract);\n    if(_targetContract.ownerOf(tokenId) != _msgSender()) revert InvalidOwnerForRedemption();\n    if(_targetContract.getApproved(tokenId) != address(this)) revert InvalidApprovalForRedemption();\n    \n    // Warning: Since there is no standarized return value for transfers of ERC-721\n    // It is possible this function silently fails and a mint still occurs. The owner of the contract is\n    // responsible for ensuring that the redemption contract does not lock or have staked controls preventing\n    // movement of the token. As an added measure we keep a mapping of tokens redeemed to prevent multiple single-token redemptions, \n    // but the NFT may not have been sent to the redemptionAddress.\n    _targetContract.safeTransferFrom(_msgSender(), redemptionAddress, tokenId);\n    tokenRedemptions[redemptionContract][tokenId] = true;\n\n    emit Redeemed(_msgSender(), tokenId, redemptionContract);\n    _safeMint(_msgSender(), 1, false);\n  }\n\n  /**\n  * @dev allows for verified claim mint against a single tokenID. Must be owned by the owner\n  * @notice this mint action allows the original NFT to remain in the holders wallet, but its claim is logged.\n  * @param tokenId the token to be redeemed.\n  * Emits a {VerifiedClaim} event.\n  **/\n  function verifedClaim(address redemptionContract, uint256 tokenId) public payable {\n    if(getNextTokenId() > collectionSize) revert CapExceeded();\n    if(!verifiedClaimModeEnabled) revert ClaimModeDisabled();\n    if(redemptionContract == address(0)) revert CannotBeNullAddress();\n    if(!redemptionContracts[redemptionContract]) revert IneligibleRedemptionContract();\n    if(msg.value != redemptionSurcharge) revert InvalidPayment();\n    if(tokenRedemptions[redemptionContract][tokenId]) revert TokenAlreadyRedeemed();\n    \n    tokenRedemptions[redemptionContract][tokenId] = true;\n    emit VerifiedClaim(_msgSender(), tokenId, redemptionContract);\n    _safeMint(_msgSender(), 1, false);\n  }\n}\n\n\n  \n  \ninterface IERC20 {\n  function allowance(address owner, address spender) external view returns (uint256);\n  function transfer(address _to, uint256 _amount) external returns (bool);\n  function balanceOf(address account) external view returns (uint256);\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n\n// File: WithdrawableV2\n// This abstract allows the contract to be able to mint and ingest ERC-20 payments for mints.\n// ERC-20 Payouts are limited to a single payout address. This feature \n// will charge a small flat fee in native currency that is not subject to regular rev sharing.\n// This contract also covers the normal functionality of accepting native base currency rev-sharing\nabstract contract WithdrawableV2 is Teams {\n  struct acceptedERC20 {\n    bool isActive;\n    uint256 chargeAmount;\n  }\n\n  \n  mapping(address => acceptedERC20) private allowedTokenContracts;\n  address[] public payableAddresses = [0x2A8d8dB6BeBa2EeA8802510B934408Ed23c9835B];\n  address public erc20Payable = 0x2A8d8dB6BeBa2EeA8802510B934408Ed23c9835B;\n  uint256[] public payableFees = [100];\n  uint256 public payableAddressCount = 1;\n  bool public onlyERC20MintingMode;\n  \n\n  function withdrawAll() public onlyTeamOrOwner {\n      if(address(this).balance == 0) revert ValueCannotBeZero();\n      _withdrawAll(address(this).balance);\n  }\n\n  function _withdrawAll(uint256 balance) private {\n      for(uint i=0; i < payableAddressCount; i++ ) {\n          _widthdraw(\n              payableAddresses[i],\n              (balance * payableFees[i]) / 100\n          );\n      }\n  }\n  \n  function _widthdraw(address _address, uint256 _amount) private {\n      (bool success, ) = _address.call{value: _amount}(\"\");\n      require(success, \"Transfer failed.\");\n  }\n\n  /**\n  * @dev Allow contract owner to withdraw ERC-20 balance from contract\n  * in the event ERC-20 tokens are paid to the contract for mints.\n  * @param _tokenContract contract of ERC-20 token to withdraw\n  * @param _amountToWithdraw balance to withdraw according to balanceOf of ERC-20 token in wei\n  */\n  function withdrawERC20(address _tokenContract, uint256 _amountToWithdraw) public onlyTeamOrOwner {\n    if(_amountToWithdraw == 0) revert ValueCannotBeZero();\n    IERC20 tokenContract = IERC20(_tokenContract);\n    if(tokenContract.balanceOf(address(this)) < _amountToWithdraw) revert ERC20InsufficientBalance();\n    tokenContract.transfer(erc20Payable, _amountToWithdraw); // Payout ERC-20 tokens to recipient\n  }\n\n  /**\n  * @dev check if an ERC-20 contract is a valid payable contract for executing a mint.\n  * @param _erc20TokenContract address of ERC-20 contract in question\n  */\n  function isApprovedForERC20Payments(address _erc20TokenContract) public view returns(bool) {\n    return allowedTokenContracts[_erc20TokenContract].isActive == true;\n  }\n\n  /**\n  * @dev get the value of tokens to transfer for user of an ERC-20\n  * @param _erc20TokenContract address of ERC-20 contract in question\n  */\n  function chargeAmountForERC20(address _erc20TokenContract) public view returns(uint256) {\n    if(!isApprovedForERC20Payments(_erc20TokenContract)) revert ERC20TokenNotApproved();\n    return allowedTokenContracts[_erc20TokenContract].chargeAmount;\n  }\n\n  /**\n  * @dev Explicity sets and ERC-20 contract as an allowed payment method for minting\n  * @param _erc20TokenContract address of ERC-20 contract in question\n  * @param _isActive default status of if contract should be allowed to accept payments\n  * @param _chargeAmountInTokens fee (in tokens) to charge for mints for this specific ERC-20 token\n  */\n  function addOrUpdateERC20ContractAsPayment(address _erc20TokenContract, bool _isActive, uint256 _chargeAmountInTokens) public onlyTeamOrOwner {\n    allowedTokenContracts[_erc20TokenContract].isActive = _isActive;\n    allowedTokenContracts[_erc20TokenContract].chargeAmount = _chargeAmountInTokens;\n  }\n\n  /**\n  * @dev Add an ERC-20 contract as being a valid payment method. If passed a contract which has not been added\n  * it will assume the default value of zero. This should not be used to create new payment tokens.\n  * @param _erc20TokenContract address of ERC-20 contract in question\n  */\n  function enableERC20ContractAsPayment(address _erc20TokenContract) public onlyTeamOrOwner {\n    allowedTokenContracts[_erc20TokenContract].isActive = true;\n  }\n\n  /**\n  * @dev Disable an ERC-20 contract as being a valid payment method. If passed a contract which has not been added\n  * it will assume the default value of zero. This should not be used to create new payment tokens.\n  * @param _erc20TokenContract address of ERC-20 contract in question\n  */\n  function disableERC20ContractAsPayment(address _erc20TokenContract) public onlyTeamOrOwner {\n    allowedTokenContracts[_erc20TokenContract].isActive = false;\n  }\n\n  /**\n  * @dev Enable only ERC-20 payments for minting on this contract\n  */\n  function enableERC20OnlyMinting() public onlyTeamOrOwner {\n    onlyERC20MintingMode = true;\n  }\n\n  /**\n  * @dev Disable only ERC-20 payments for minting on this contract\n  */\n  function disableERC20OnlyMinting() public onlyTeamOrOwner {\n    onlyERC20MintingMode = false;\n  }\n\n  /**\n  * @dev Set the payout of the ERC-20 token payout to a specific address\n  * @param _newErc20Payable new payout addresses of ERC-20 tokens\n  */\n  function setERC20PayableAddress(address _newErc20Payable) public onlyTeamOrOwner {\n    if(_newErc20Payable == address(0)) revert CannotBeNullAddress();\n    if(_newErc20Payable == erc20Payable) revert NoStateChange();\n    erc20Payable = _newErc20Payable;\n  }\n}\n\n\n  \n  \n// File: EarlyMintIncentive.sol\n// Allows the contract to have the first x tokens have a discount or\n// zero fee that can be calculated on the fly.\nabstract contract EarlyMintIncentive is Teams, ERC721A {\n  uint256 public PRICE = 0.0035 ether;\n  uint256 public EARLY_MINT_PRICE = 0 ether;\n  uint256 public earlyMintTokenIdCap = 600;\n  bool public usingEarlyMintIncentive = true;\n\n  function enableEarlyMintIncentive() public onlyTeamOrOwner {\n    usingEarlyMintIncentive = true;\n  }\n\n  function disableEarlyMintIncentive() public onlyTeamOrOwner {\n    usingEarlyMintIncentive = false;\n  }\n\n  /**\n  * @dev Set the max token ID in which the cost incentive will be applied.\n  * @param _newTokenIdCap max tokenId in which incentive will be applied\n  */\n  function setEarlyMintTokenIdCap(uint256 _newTokenIdCap) public onlyTeamOrOwner {\n    if(_newTokenIdCap > collectionSize) revert CapExceeded();\n    if(_newTokenIdCap == 0) revert ValueCannotBeZero();\n    earlyMintTokenIdCap = _newTokenIdCap;\n  }\n\n  /**\n  * @dev Set the incentive mint price\n  * @param _feeInWei new price per token when in incentive range\n  */\n  function setEarlyIncentivePrice(uint256 _feeInWei) public onlyTeamOrOwner {\n    EARLY_MINT_PRICE = _feeInWei;\n  }\n\n  /**\n  * @dev Set the primary mint price - the base price when not under incentive\n  * @param _feeInWei new price per token\n  */\n  function setPrice(uint256 _feeInWei) public onlyTeamOrOwner {\n    PRICE = _feeInWei;\n  }\n\n  function getPrice(uint256 _count) public view returns (uint256) {\n    if(_count == 0) revert ValueCannotBeZero();\n\n    // short circuit function if we dont need to even calc incentive pricing\n    // short circuit if the current tokenId is also already over cap\n    if(\n      usingEarlyMintIncentive == false ||\n      currentTokenId() > earlyMintTokenIdCap\n    ) {\n      return PRICE * _count;\n    }\n\n    uint256 endingTokenId = currentTokenId() + _count;\n    // If qty to mint results in a final token ID less than or equal to the cap then\n    // the entire qty is within free mint.\n    if(endingTokenId  <= earlyMintTokenIdCap) {\n      return EARLY_MINT_PRICE * _count;\n    }\n\n    // If the current token id is less than the incentive cap\n    // and the ending token ID is greater than the incentive cap\n    // we will be straddling the cap so there will be some amount\n    // that are incentive and some that are regular fee.\n    uint256 incentiveTokenCount = earlyMintTokenIdCap - currentTokenId();\n    uint256 outsideIncentiveCount = endingTokenId - earlyMintTokenIdCap;\n\n    return (EARLY_MINT_PRICE * incentiveTokenCount) + (PRICE * outsideIncentiveCount);\n  }\n}\n\n  \n  \nabstract contract RamppERC721A is \n    Ownable,\n    Teams,\n    ERC721ARedemption,\n    WithdrawableV2,\n    ReentrancyGuard \n    , EarlyMintIncentive \n     \n    \n{\n  constructor(\n    string memory tokenName,\n    string memory tokenSymbol\n  ) ERC721A(tokenName, tokenSymbol, 10, 3100) { }\n    uint8 constant public CONTRACT_VERSION = 2;\n    string public _baseTokenURI = \"ipfs://bafybeiex6mpqx6vrx5e3h2je6n7qrordgianmxccrghgcdm6inc3zchiti/\";\n    string public _baseTokenExtension = \".json\";\n\n    bool public mintingOpen = true;\n    \n    \n    uint256 public MAX_WALLET_MINTS = 10;\n\n  \n    /////////////// Admin Mint Functions\n    /**\n     * @dev Mints a token to an address with a tokenURI.\n     * This is owner only and allows a fee-free drop\n     * @param _to address of the future owner of the token\n     * @param _qty amount of tokens to drop the owner\n     */\n     function mintToAdminV2(address _to, uint256 _qty) public onlyTeamOrOwner{\n         if(_qty == 0) revert MintZeroQuantity();\n         if(currentTokenId() + _qty > collectionSize) revert CapExceeded();\n         _safeMint(_to, _qty, true);\n     }\n\n  \n    /////////////// PUBLIC MINT FUNCTIONS\n    /**\n    * @dev Mints tokens to an address in batch.\n    * fee may or may not be required*\n    * @param _to address of the future owner of the token\n    * @param _amount number of tokens to mint\n    */\n    function mintToMultiple(address _to, uint256 _amount) public payable {\n        if(onlyERC20MintingMode) revert OnlyERC20MintingEnabled();\n        if(_amount == 0) revert MintZeroQuantity();\n        if(_amount > maxBatchSize) revert TransactionCapExceeded();\n        if(!mintingOpen) revert PublicMintClosed();\n        \n        \n        if(!canMintAmount(_to, _amount)) revert ExcessiveOwnedMints();\n        if(currentTokenId() + _amount > collectionSize) revert CapExceeded();\n        if(msg.value != getPrice(_amount)) revert InvalidPayment();\n\n        _safeMint(_to, _amount, false);\n    }\n\n    /**\n     * @dev Mints tokens to an address in batch using an ERC-20 token for payment\n     * fee may or may not be required*\n     * @param _to address of the future owner of the token\n     * @param _amount number of tokens to mint\n     * @param _erc20TokenContract erc-20 token contract to mint with\n     */\n    function mintToMultipleERC20(address _to, uint256 _amount, address _erc20TokenContract) public payable {\n      if(_amount == 0) revert MintZeroQuantity();\n      if(_amount > maxBatchSize) revert TransactionCapExceeded();\n      if(!mintingOpen) revert PublicMintClosed();\n      if(currentTokenId() + _amount > collectionSize) revert CapExceeded();\n      \n      \n      if(!canMintAmount(_to, _amount)) revert ExcessiveOwnedMints();\n\n      // ERC-20 Specific pre-flight checks\n      if(!isApprovedForERC20Payments(_erc20TokenContract)) revert ERC20TokenNotApproved();\n      uint256 tokensQtyToTransfer = chargeAmountForERC20(_erc20TokenContract) * _amount;\n      IERC20 payableToken = IERC20(_erc20TokenContract);\n\n      if(payableToken.balanceOf(_to) < tokensQtyToTransfer) revert ERC20InsufficientBalance();\n      if(payableToken.allowance(_to, address(this)) < tokensQtyToTransfer) revert ERC20InsufficientAllowance();\n\n      bool transferComplete = payableToken.transferFrom(_to, address(this), tokensQtyToTransfer);\n      if(!transferComplete) revert ERC20TransferFailed();\n      \n      _safeMint(_to, _amount, false);\n    }\n\n    function openMinting() public onlyTeamOrOwner {\n        mintingOpen = true;\n    }\n\n    function stopMinting() public onlyTeamOrOwner {\n        mintingOpen = false;\n    }\n\n  \n\n  \n    /**\n    * @dev Check if wallet over MAX_WALLET_MINTS\n    * @param _address address in question to check if minted count exceeds max\n    */\n    function canMintAmount(address _address, uint256 _amount) public view returns(bool) {\n        if(_amount == 0) revert ValueCannotBeZero();\n        return (_numberMinted(_address) + _amount) <= MAX_WALLET_MINTS;\n    }\n\n    /**\n    * @dev Update the maximum amount of tokens that can be minted by a unique wallet\n    * @param _newWalletMax the new max of tokens a wallet can mint. Must be >= 1\n    */\n    function setWalletMax(uint256 _newWalletMax) public onlyTeamOrOwner {\n        if(_newWalletMax == 0) revert ValueCannotBeZero();\n        MAX_WALLET_MINTS = _newWalletMax;\n    }\n    \n\n  \n    /**\n     * @dev Allows owner to set Max mints per tx\n     * @param _newMaxMint maximum amount of tokens allowed to mint per tx. Must be >= 1\n     */\n     function setMaxMint(uint256 _newMaxMint) public onlyTeamOrOwner {\n         if(_newMaxMint == 0) revert ValueCannotBeZero();\n         maxBatchSize = _newMaxMint;\n     }\n    \n\n  \n  \n  \n  function contractURI() public pure returns (string memory) {\n    return \"https://metadata.mintplex.xyz/RAURMWZ9gkyD2OWpt2gs/contract-metadata\";\n  }\n  \n\n  function _baseURI() internal view virtual override returns(string memory) {\n    return _baseTokenURI;\n  }\n\n  function _baseURIExtension() internal view virtual override returns(string memory) {\n    return _baseTokenExtension;\n  }\n\n  function baseTokenURI() public view returns(string memory) {\n    return _baseTokenURI;\n  }\n\n  function setBaseURI(string calldata baseURI) external onlyTeamOrOwner {\n    _baseTokenURI = baseURI;\n  }\n\n  function setBaseTokenExtension(string calldata baseExtension) external onlyTeamOrOwner {\n    _baseTokenExtension = baseExtension;\n  }\n}\n\n\n  \n// File: contracts/BoominGbyB3Contract.sol\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ncontract BoominGbyB3Contract is RamppERC721A {\n    constructor() RamppERC721A(\"BOOMING by B3\", \"MINTPLEX\"){}\n}\n  \n//*********************************************************************//\n//*********************************************************************//  \n//                       Mintplex v3.0.0\n//\n//         This smart contract was generated by mintplex.xyz.\n//            Mintplex allows creators like you to launch \n//             large scale NFT communities without code!\n//\n//    Mintplex is not responsible for the content of this contract and\n//        hopes it is being used in a responsible and kind way.  \n//       Mintplex is not associated or affiliated with this project.                                                    \n//             Twitter: @MintplexNFT ---- mintplex.xyz\n//*********************************************************************//                                                     \n//*********************************************************************// \n", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotBeNullAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimModeDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateTeamAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TokenNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721RestrictedApprovalAddressRestricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveOwnedMints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IneligibleRedemptionContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApprovalForRedemption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwnerForRedemption\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTeamAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoStateChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyERC20MintingEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicMintClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyRedeemed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionCapExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueCannotBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"VerifiedClaim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTRACT_VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_MINT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WALLET_MINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseTokenExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_chargeAmountInTokens\",\"type\":\"uint256\"}],\"name\":\"addOrUpdateERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canMintAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"chargeAmountForERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"disableERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableERC20OnlyMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableEarlyMintIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earlyMintTokenIdCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"enableERC20ContractAsPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableERC20OnlyMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEarlyMintIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Payable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"inTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"isApprovedForERC20Payments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"}],\"name\":\"mintToAdminV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintToMultiple\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20TokenContract\",\"type\":\"address\"}],\"name\":\"mintToMultipleERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOwnerToExplicitlySet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyERC20MintingMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"payableFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redemptionContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redemptionContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionModeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionSurcharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"restrictedApprovalAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isRestricted\",\"type\":\"bool\"}],\"name\":\"setApprovalRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseExtension\",\"type\":\"string\"}],\"name\":\"setBaseTokenExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newErc20Payable\",\"type\":\"address\"}],\"name\":\"setERC20PayableAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"setEarlyIncentivePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTokenIdCap\",\"type\":\"uint256\"}],\"name\":\"setEarlyMintTokenIdCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMaxMint\",\"type\":\"uint256\"}],\"name\":\"setMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeInWei\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setRedeemableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRedemptionAddress\",\"type\":\"address\"}],\"name\":\"setRedemptionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setRedemptionMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSurchargeInWei\",\"type\":\"uint256\"}],\"name\":\"setRedemptionSurcharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setVerifiedClaimMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newWalletMax\",\"type\":\"uint256\"}],\"name\":\"setWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenRedemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usingEarlyMintIncentive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"redemptionContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"verifedClaim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifiedClaimModeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoominGbyB3Contract", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}