{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"closedsea/src/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Optimized and flexible operator filterer to abide to OpenSea's\\n/// mandatory on-chain royalty enforcement in order for new collections to\\n/// receive royalties.\\n/// For more information, see:\\n/// See: https://github.com/ProjectOpenSea/operator-filter-registry\\nabstract contract OperatorFilterer {\\n    /// @dev The default OpenSea operator blocklist subscription.\\n    address internal constant _DEFAULT_SUBSCRIPTION = 0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6;\\n\\n    /// @dev The OpenSea operator filter registry.\\n    address internal constant _OPERATOR_FILTER_REGISTRY = 0x000000000000AAeB6D7670E522A718067333cd4E;\\n\\n    /// @dev Registers the current contract to OpenSea's operator filter,\\n    /// and subscribe to the default OpenSea operator blocklist.\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\n    function _registerForOperatorFiltering() internal virtual {\\n        _registerForOperatorFiltering(_DEFAULT_SUBSCRIPTION, true);\\n    }\\n\\n    /// @dev Registers the current contract to OpenSea's operator filter.\\n    /// Note: Will not revert nor update existing settings for repeated registration.\\n    function _registerForOperatorFiltering(address subscriptionOrRegistrantToCopy, bool subscribe)\\n        internal\\n        virtual\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let functionSelector := 0x7d3e3dbe // `registerAndSubscribe(address,address)`.\\n\\n            // Clean the upper 96 bits of `subscriptionOrRegistrantToCopy` in case they are dirty.\\n            subscriptionOrRegistrantToCopy := shr(96, shl(96, subscriptionOrRegistrantToCopy))\\n\\n            for {} iszero(subscribe) {} {\\n                if iszero(subscriptionOrRegistrantToCopy) {\\n                    functionSelector := 0x4420e486 // `register(address)`.\\n                    break\\n                }\\n                functionSelector := 0xa0af2903 // `registerAndCopyEntries(address,address)`.\\n                break\\n            }\\n            // Store the function selector.\\n            mstore(0x00, shl(224, functionSelector))\\n            // Store the `address(this)`.\\n            mstore(0x04, address())\\n            // Store the `subscriptionOrRegistrantToCopy`.\\n            mstore(0x24, subscriptionOrRegistrantToCopy)\\n            // Register into the registry.\\n            if iszero(call(gas(), _OPERATOR_FILTER_REGISTRY, 0, 0x00, 0x44, 0x00, 0x04)) {\\n                // If the function selector has not been overwritten,\\n                // it is an out-of-gas error.\\n                if eq(shr(224, mload(0x00)), functionSelector) {\\n                    // To prevent gas under-estimation.\\n                    revert(0, 0)\\n                }\\n            }\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, because of Solidity's memory size limits.\\n            mstore(0x24, 0)\\n        }\\n    }\\n\\n    /// @dev Modifier to guard a function and revert if the caller is a blocked operator.\\n    modifier onlyAllowedOperator(address from) virtual {\\n        if (from != msg.sender) {\\n            if (!_isPriorityOperator(msg.sender)) {\\n                if (_operatorFilteringEnabled()) _revertIfBlocked(msg.sender);\\n            }\\n        }\\n        _;\\n    }\\n\\n    /// @dev Modifier to guard a function from approving a blocked operator..\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        if (!_isPriorityOperator(operator)) {\\n            if (_operatorFilteringEnabled()) _revertIfBlocked(operator);\\n        }\\n        _;\\n    }\\n\\n    /// @dev Helper function that reverts if the `operator` is blocked by the registry.\\n    function _revertIfBlocked(address operator) private view {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Store the function selector of `isOperatorAllowed(address,address)`,\\n            // shifted left by 6 bytes, which is enough for 8tb of memory.\\n            // We waste 6-3 = 3 bytes to save on 6 runtime gas (PUSH1 0x224 SHL).\\n            mstore(0x00, 0xc6171134001122334455)\\n            // Store the `address(this)`.\\n            mstore(0x1a, address())\\n            // Store the `operator`.\\n            mstore(0x3a, operator)\\n\\n            // `isOperatorAllowed` always returns true if it does not revert.\\n            if iszero(staticcall(gas(), _OPERATOR_FILTER_REGISTRY, 0x16, 0x44, 0x00, 0x00)) {\\n                // Bubble up the revert if the staticcall reverts.\\n                returndatacopy(0x00, 0x00, returndatasize())\\n                revert(0x00, returndatasize())\\n            }\\n\\n            // We'll skip checking if `from` is inside the blacklist.\\n            // Even though that can block transferring out of wrapper contracts,\\n            // we don't want tokens to be stuck.\\n\\n            // Restore the part of the free memory pointer that was overwritten,\\n            // which is guaranteed to be zero, if less than 8tb of memory is used.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /// @dev For deriving contracts to override, so that operator filtering\\n    /// can be turned on / off.\\n    /// Returns true by default.\\n    function _operatorFilteringEnabled() internal view virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /// @dev For deriving contracts to override, so that preferred marketplaces can\\n    /// skip operator filtering, helping users save gas.\\n    /// Returns false for all inputs by default.\\n    function _isPriorityOperator(address) internal view virtual returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Archetype.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Archetype v0.6.0 - ERC1155-Random\\n//\\n//        d8888                 888               888\\n//       d88888                 888               888\\n//      d88P888                 888               888\\n//     d88P 888 888d888 .d8888b 88888b.   .d88b.  888888 888  888 88888b.   .d88b.\\n//    d88P  888 888P\\\"  d88P\\\"    888 \\\"88b d8P  Y8b 888    888  888 888 \\\"88b d8P  Y8b\\n//   d88P   888 888    888      888  888 88888888 888    888  888 888  888 88888888\\n//  d8888888888 888    Y88b.    888  888 Y8b.     Y88b.  Y88b 888 888 d88P Y8b.\\n// d88P     888 888     \\\"Y8888P 888  888  \\\"Y8888   \\\"Y888  \\\"Y88888 88888P\\\"   \\\"Y8888\\n//                                                            888 888\\n//                                                       Y8b d88P 888\\n//                                                        \\\"Y88P\\\"  888\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ArchetypeLogic.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport \\\"solady/src/utils/LibString.sol\\\";\\nimport \\\"closedsea/src/OperatorFilterer.sol\\\";\\n\\ncontract Archetype is\\n  Initializable,\\n  ERC1155Upgradeable,\\n  OperatorFilterer,\\n  OwnableUpgradeable,\\n  ERC2981Upgradeable\\n{\\n  //\\n  // EVENTS\\n  //\\n  event Invited(bytes32 indexed key, bytes32 indexed cid);\\n  event Referral(address indexed affiliate, address token, uint128 wad, uint256 numMints);\\n  event Withdrawal(address indexed src, address token, uint128 wad);\\n\\n  //\\n  // VARIABLES\\n  //\\n  mapping(bytes32 => DutchInvite) public invites;\\n  mapping(address => mapping(bytes32 => uint256)) private _minted;\\n  mapping(bytes32 => uint256) private _listSupply;\\n  mapping(address => OwnerBalance) private _ownerBalance;\\n  mapping(address => mapping(address => uint128)) private _affiliateBalance;\\n\\n  uint256 public totalSupply;\\n\\n  Config public config;\\n  BurnConfig public burnConfig;\\n  Options public options;\\n\\n  string public name;\\n  string public symbol;\\n\\n  // chainlink\\n  VrfConfig public vrfConfig;\\n  mapping(uint256 => VrfMintInfo) public requestIdMintInfo;\\n  VRFCoordinatorV2Interface internal vrfCoordinator;\\n\\n  //\\n  // METHODS\\n  //\\n  function initialize(\\n    string memory _name,\\n    string memory _symbol,\\n    Config calldata config_,\\n    address _receiver\\n  ) external initializer {\\n    name = _name;\\n    symbol = _symbol;\\n    __ERC1155_init(\\\"\\\");\\n\\n    vrfCoordinator = VRFCoordinatorV2Interface(VRF_CORDINATOR);\\n\\n    // check max bps not reached and min platform fee.\\n    if (\\n      config_.affiliateFee > MAXBPS ||\\n      config_.platformFee > MAXBPS ||\\n      config_.platformFee < 500 ||\\n      config_.discounts.affiliateDiscount > MAXBPS ||\\n      config_.affiliateSigner == address(0) ||\\n      config_.maxBatchSize == 0\\n    ) {\\n      revert InvalidConfig();\\n    }\\n    // ensure mint tiers are correctly ordered from highest to lowest.\\n    for (uint256 i = 1; i < config_.discounts.mintTiers.length; i++) {\\n      if (\\n        config_.discounts.mintTiers[i].mintDiscount > MAXBPS ||\\n        config_.discounts.mintTiers[i].numMints > config_.discounts.mintTiers[i - 1].numMints\\n      ) {\\n        revert InvalidConfig();\\n      }\\n    }\\n    config = config_;\\n    __Ownable_init();\\n\\n    if (config.ownerAltPayout != address(0)) {\\n      setDefaultRoyalty(config.ownerAltPayout, config.defaultRoyalty);\\n    } else {\\n      setDefaultRoyalty(_receiver, config.defaultRoyalty);\\n    }\\n  }\\n\\n  //\\n  // PUBLIC\\n  //\\n\\n  function mint(\\n    Auth calldata auth,\\n    uint256 quantity,\\n    address affiliate,\\n    bytes calldata signature\\n  ) external payable {\\n    mintTo(auth, quantity, _msgSender(), affiliate, signature);\\n  }\\n\\n  function mintTo(\\n    Auth calldata auth,\\n    uint256 quantity,\\n    address to,\\n    address affiliate,\\n    bytes calldata signature\\n  ) public payable {\\n    DutchInvite storage i = invites[auth.key];\\n\\n    if (i.unitSize > 1) {\\n      quantity = quantity * i.unitSize;\\n    }\\n\\n    ValidationArgs memory args = ValidationArgs({\\n        owner: owner(),\\n        affiliate: affiliate,\\n        quantity: quantity,\\n        curSupply: totalSupply\\n    });\\n\\n    ArchetypeLogic.validateMint(\\n      i,\\n      config,\\n      auth,\\n      _minted,\\n      _listSupply,\\n      signature,\\n      args\\n    );\\n\\n    if(vrfConfig.enabled) {\\n        uint256 requestId = requestRandomness(); // request randomness from Chainlink VRF\\n        requestIdMintInfo[requestId] = VrfMintInfo({\\n          key: auth.key,\\n          to: to,\\n          quantity: quantity\\n        });\\n    } else {\\n      uint16[] memory tokenIds;\\n      uint256 seed = ArchetypeLogic.random();\\n      tokenIds = ArchetypeLogic.getRandomTokenIds(\\n        config.tokenPool,\\n        i.tokenIdsExcluded,\\n        quantity,\\n        seed\\n      );\\n\\n      for (uint256 j = 0; j < tokenIds.length; j++) {\\n        bytes memory _data;\\n        _mint(to, tokenIds[j], 1, _data);\\n      }\\n    }\\n\\n    totalSupply += quantity;\\n    if (i.limit < i.maxSupply) {\\n      _minted[_msgSender()][auth.key] += quantity;\\n    }\\n    if (i.maxSupply < 2**32 - 1) {\\n      _listSupply[auth.key] += quantity;\\n    }\\n\\n    ArchetypeLogic.updateBalances(i, config, _ownerBalance, _affiliateBalance, affiliate, quantity);\\n  }\\n\\n  // simple 1 to 1 burn to mint.\\n  function burnToMint(uint256[] calldata tokenIdList, uint256[] calldata quantityList) external {\\n\\n    if(burnConfig.tokenAddress == address(0)) {\\n      revert BurnToMintDisabled();\\n    }\\n\\n    if (quantityList.length != tokenIdList.length) {\\n      revert InvalidConfig();\\n    }\\n\\n    address msgSender = _msgSender();\\n    uint256 quantity = 0;\\n    for (uint256 i; i < tokenIdList.length; i++) {\\n      address burnAddress = burnConfig.burnAddress != address(0)\\n        ? burnConfig.burnAddress\\n        : address(0x000000000000000000000000000000000000dEaD);\\n\\n      bytes memory _data;\\n      IERC1155Upgradeable(burnConfig.tokenAddress).safeTransferFrom(msgSender, burnAddress, tokenIdList[i], quantityList[i], _data);\\n      _mint(msgSender, tokenIdList[i], quantityList[i], _data);\\n      quantity += quantityList[i];\\n    }\\n\\n    if ((totalSupply + quantity) > config.maxSupply) {\\n      revert MaxSupplyExceeded();\\n    }\\n    totalSupply += quantity;\\n  }\\n\\n  function uri(uint256 tokenId) public view override returns (string memory) {\\n    return\\n      bytes(config.baseUri).length != 0\\n        ? string(abi.encodePacked(config.baseUri, LibString.toString(tokenId)))\\n        : \\\"\\\";\\n  }\\n\\n  function withdraw() external {\\n    address[] memory tokens = new address[](1);\\n    tokens[0] = address(0);\\n    withdrawTokens(tokens);\\n  }\\n\\n  function withdrawTokens(address[] memory tokens) public {\\n    ArchetypeLogic.withdrawTokens(config, _ownerBalance, _affiliateBalance, owner(), tokens);\\n  }\\n\\n  function ownerBalance() external view returns (OwnerBalance memory) {\\n    return _ownerBalance[address(0)];\\n  }\\n\\n  function ownerBalanceToken(address token) external view returns (OwnerBalance memory) {\\n    return _ownerBalance[token];\\n  }\\n\\n  function affiliateBalance(address affiliate) external view returns (uint128) {\\n    return _affiliateBalance[affiliate][address(0)];\\n  }\\n\\n  function affiliateBalanceToken(address affiliate, address token) external view returns (uint128) {\\n    return _affiliateBalance[affiliate][token];\\n  }\\n\\n  function minted(address minter, bytes32 key) external view returns (uint256) {\\n    return _minted[minter][key];\\n  }\\n\\n  function listSupply(bytes32 key) external view returns (uint256) {\\n    return _listSupply[key];\\n  }\\n\\n  function platform() external pure returns (address) {\\n    return PLATFORM;\\n  }\\n\\n  function tokenPool() external view returns (uint16[] memory) {\\n    return config.tokenPool;\\n  }\\n\\n  function computePrice(\\n    bytes32 key,\\n    uint256 quantity,\\n    bool affiliateUsed\\n  ) external view returns (uint256) {\\n    DutchInvite storage i = invites[key];\\n    return ArchetypeLogic.computePrice(i, config.discounts, quantity, affiliateUsed);\\n  }\\n\\n  //\\n  // OWNER ONLY\\n  //\\n\\n  function airdropTo(\\n    address[] calldata toList,\\n    uint256[] calldata quantityList,\\n    uint256[] calldata tokenIdList\\n  ) external _onlyOwner {\\n\\n    if (options.airdropLocked) {\\n      revert LockedForever();\\n    }\\n\\n    if (quantityList.length != toList.length || quantityList.length != tokenIdList.length) {\\n      revert InvalidConfig();\\n    }\\n\\n    uint256 quantity = 0;\\n    for (uint256 i = 0; i < toList.length; i++) {\\n      bytes memory _data;\\n      _mint(toList[i], tokenIdList[i], quantityList[i], _data);\\n      quantity += quantityList[i];\\n    }\\n\\n    if ((totalSupply + quantity) > config.maxSupply) {\\n      revert MaxSupplyExceeded();\\n    }\\n    totalSupply += quantity;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  function lockAirdrop(string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    options.airdropLocked = true;\\n  }\\n\\n  function setBaseURI(string memory baseUri) external _onlyOwner {\\n    if (options.uriLocked) {\\n      revert LockedForever();\\n    }\\n\\n    config.baseUri = baseUri;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  function lockURI(string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    options.uriLocked = true;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  // token pool will be appended. Be careful changing.\\n  function appendTokenPool(uint16[] memory newTokens, string memory password) public _onlyOwner {\\n    _checkPassword(password);\\n    if (options.tokenPoolLocked) {\\n      revert LockedForever();\\n    }\\n\\n    for (uint256 i = 0; i < newTokens.length; i++) {\\n      config.tokenPool.push(newTokens[i]);\\n    }\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  // token pool will be completely replaced. Be careful changing.\\n  function replaceTokenPool(uint16[] memory newTokens, string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    if (options.tokenPoolLocked) {\\n      revert LockedForever();\\n    }\\n\\n    config.tokenPool = newTokens;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  function lockTokenPool(string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    options.tokenPoolLocked = true;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  // max supply cannot subceed total supply. Be careful changing.\\n  function setMaxSupply(uint32 maxSupply, string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    if (options.maxSupplyLocked) {\\n      revert LockedForever();\\n    }\\n\\n    if (maxSupply < totalSupply) {\\n      revert MaxSupplyExceeded();\\n    }\\n\\n    config.maxSupply = maxSupply;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  function lockMaxSupply(string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    options.maxSupplyLocked = true;\\n  }\\n\\n\\n  function setAffiliateFee(uint16 affiliateFee) external _onlyOwner {\\n    if (options.affiliateFeeLocked) {\\n      revert LockedForever();\\n    }\\n    if (affiliateFee > MAXBPS) {\\n      revert InvalidConfig();\\n    }\\n\\n    config.affiliateFee = affiliateFee;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  function lockAffiliateFee(string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    options.affiliateFeeLocked = true;\\n  }\\n\\n  function setDiscounts(Discount calldata discounts) external _onlyOwner {\\n    if (options.discountsLocked) {\\n      revert LockedForever();\\n    }\\n\\n    if (discounts.affiliateDiscount > MAXBPS) {\\n      revert InvalidConfig();\\n    }\\n\\n    // ensure mint tiers are correctly ordered from highest to lowest.\\n    for (uint256 i = 1; i < discounts.mintTiers.length; i++) {\\n      if (\\n        discounts.mintTiers[i].mintDiscount > MAXBPS ||\\n        discounts.mintTiers[i].numMints > discounts.mintTiers[i - 1].numMints\\n      ) {\\n        revert InvalidConfig();\\n      }\\n    }\\n\\n    config.discounts = discounts;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  function lockDiscounts(string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    options.discountsLocked = true;\\n  }\\n\\n  function setOwnerAltPayout(address ownerAltPayout) external _onlyOwner {\\n    if (options.ownerAltPayoutLocked) {\\n      revert LockedForever();\\n    }\\n\\n    config.ownerAltPayout = ownerAltPayout;\\n  }\\n\\n  /// @notice the password is \\\"forever\\\"\\n  function lockOwnerAltPayout(string memory password) external _onlyOwner {\\n    _checkPassword(password);\\n    options.ownerAltPayoutLocked = true;\\n  }\\n\\n  function setMaxBatchSize(uint16 maxBatchSize) external _onlyOwner {\\n    config.maxBatchSize = maxBatchSize;\\n  }\\n\\n  function enableChainlinkVRF(uint64 subId) external _onlyOwner {\\n    vrfConfig = VrfConfig({\\n      enabled: true,\\n      subId: subId\\n    });\\n  }\\n\\n  function disableChainlinkVRF() external _onlyOwner {\\n    vrfConfig = VrfConfig({\\n      enabled: false,\\n      subId: 0\\n    });\\n  }\\n\\n  function setInvite(\\n    bytes32 _key,\\n    bytes32 _cid,\\n    Invite calldata _invite\\n  ) external _onlyOwner {\\n    invites[_key] = DutchInvite({\\n      price: _invite.price,\\n      reservePrice: _invite.price,\\n      delta: 0,\\n      start: _invite.start,\\n      end: _invite.end,\\n      limit: _invite.limit,\\n      maxSupply: _invite.maxSupply,\\n      interval: 0,\\n      unitSize: _invite.unitSize,\\n      tokenAddress: _invite.tokenAddress,\\n      tokenIdsExcluded: _invite.tokenIdsExcluded\\n    });\\n    emit Invited(_key, _cid);\\n  }\\n\\n  function setDutchInvite(\\n    bytes32 _key,\\n    bytes32 _cid,\\n    DutchInvite memory _dutchInvite\\n  ) external _onlyOwner {\\n    if (_dutchInvite.start < block.timestamp) {\\n      _dutchInvite.start = uint32(block.timestamp);\\n    }\\n    invites[_key] = _dutchInvite;\\n    emit Invited(_key, _cid);\\n  }\\n\\n  function enableBurnToMint(\\n    address tokenAddress,\\n    address burnAddress\\n  ) external _onlyOwner {\\n    burnConfig = BurnConfig({\\n      tokenAddress: tokenAddress,\\n      burnAddress: burnAddress\\n    });\\n  }\\n\\n  function disableBurnToMint() external _onlyOwner {\\n    burnConfig = BurnConfig({\\n      tokenAddress: address(0),\\n      burnAddress: address(0)\\n    });\\n  }\\n\\n  //\\n  // PLATFORM ONLY\\n  //\\n  function setSuperAffiliatePayout(address superAffiliatePayout) external _onlyPlatform {\\n    config.superAffiliatePayout = superAffiliatePayout;\\n  }\\n\\n  //\\n  // VRF\\n  //\\n\\n  // Request randomness\\n  function requestRandomness() internal returns (uint256 requestId) {\\n      // The gas lane to use, which specifies the maximum gas price to bump to.\\n      // For a list of available gas lanes on each network,\\n      // see https://docs.chain.link/docs/vrf/v2/supported-networks/#configurations\\n      bytes32 keyHash = VRF_KEYHASH;\\n\\n      uint16 minimumRequestConfirmations = 5;\\n      uint32 callbackGasLimit = 2500000; // max limit\\n\\n      // Requesting random numbers\\n      requestId = vrfCoordinator.requestRandomWords(\\n          keyHash,\\n          vrfConfig.subId,\\n          minimumRequestConfirmations,\\n          callbackGasLimit,\\n          1\\n      );\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  function rawFulfillRandomWords(\\n      uint256 requestId,\\n      uint256[] memory randomWords\\n  ) external {\\n      // Allow owner and platform to fulfill as backup\\n      address msgSender = _msgSender();\\n      if(msgSender == VRF_CORDINATOR || msgSender == PLATFORM || msgSender == owner()) {\\n        fulfillRandomWords(requestId, randomWords);\\n      } else {\\n        revert NotVRF();\\n      }\\n  }\\n\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomness) internal {\\n    VrfMintInfo memory mintInfo = requestIdMintInfo[requestId];\\n    if(mintInfo.quantity == 0) {\\n      revert InvalidRequestId();\\n    }\\n\\n    uint16[] memory tokenIds;\\n    tokenIds = ArchetypeLogic.getRandomTokenIds(\\n      config.tokenPool,\\n      invites[mintInfo.key].tokenIdsExcluded,\\n      mintInfo.quantity,\\n      randomness[0]\\n    );\\n\\n    for (uint256 j = 0; j < tokenIds.length; j++) {\\n      bytes memory _data;\\n      _mint(mintInfo.to, tokenIds[j], 1, _data);\\n    }\\n\\n    delete requestIdMintInfo[requestId];\\n  }\\n\\n  //\\n  // INTERNAL\\n  //\\n  function _startTokenId() internal view virtual returns (uint256) {\\n    return 1;\\n  }\\n\\n  function _msgSender() internal view override returns (address) {\\n    return msg.sender == BATCH? tx.origin: msg.sender;\\n  }\\n\\n  function _checkPassword(string memory password) internal pure {\\n    if (keccak256(abi.encodePacked(password)) != keccak256(abi.encodePacked(\\\"forever\\\"))) {\\n      revert WrongPassword();\\n    }\\n  }\\n\\n  function _isOwner() internal view {\\n    if (_msgSender() != owner()) {\\n      revert NotOwner();\\n    }  \\n  }\\n\\n\\n  modifier _onlyPlatform() {\\n    if (_msgSender() != PLATFORM) {\\n      revert NotPlatform();\\n    }\\n    _;\\n  }\\n\\n  modifier _onlyOwner() {\\n    _isOwner();\\n    _;\\n  }\\n\\n  //ERC2981 ROYALTY\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC1155Upgradeable, ERC2981Upgradeable)\\n    returns (bool)\\n  {\\n    // Supports the following `interfaceId`s:\\n    // - IERC165: 0x01ffc9a7\\n    // - IERC721: 0x80ac58cd\\n    // - IERC721Metadata: 0x5b5e139f\\n    // - IERC2981: 0x2a55205a\\n    return\\n      ERC1155Upgradeable.supportsInterface(interfaceId) ||\\n      ERC2981Upgradeable.supportsInterface(interfaceId);\\n  }\\n\\n  function setDefaultRoyalty(address receiver, uint16 feeNumerator) public _onlyOwner {\\n    config.defaultRoyalty = feeNumerator;\\n    _setDefaultRoyalty(receiver, feeNumerator);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ArchetypeLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ArchetypeLogic v0.6.0 - ERC1155-random\\n//\\n//        d8888                 888               888\\n//       d88888                 888               888\\n//      d88P888                 888               888\\n//     d88P 888 888d888 .d8888b 88888b.   .d88b.  888888 888  888 88888b.   .d88b.\\n//    d88P  888 888P\\\"  d88P\\\"    888 \\\"88b d8P  Y8b 888    888  888 888 \\\"88b d8P  Y8b\\n//   d88P   888 888    888      888  888 88888888 888    888  888 888  888 88888888\\n//  d8888888888 888    Y88b.    888  888 Y8b.     Y88b.  Y88b 888 888 d88P Y8b.\\n// d88P     888 888     \\\"Y8888P 888  888  \\\"Y8888   \\\"Y888  \\\"Y88888 88888P\\\"   \\\"Y8888\\n//                                                            888 888\\n//                                                       Y8b d88P 888\\n//                                                        \\\"Y88P\\\"  888\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"solady/src/utils/MerkleProofLib.sol\\\";\\nimport \\\"solady/src/utils/ECDSA.sol\\\";\\n\\nerror InvalidConfig();\\nerror MintNotYetStarted();\\nerror MintEnded();\\nerror WalletUnauthorizedToMint();\\nerror InsufficientEthSent();\\nerror ExcessiveEthSent();\\nerror Erc20BalanceTooLow();\\nerror MaxSupplyExceeded();\\nerror ListMaxSupplyExceeded();\\nerror TokenPoolEmpty();\\nerror NumberOfMintsExceeded();\\nerror MintingPaused();\\nerror InvalidReferral();\\nerror InvalidSignature();\\nerror BalanceEmpty();\\nerror TransferFailed();\\nerror MaxBatchSizeExceeded();\\nerror BurnToMintDisabled();\\nerror NotTokenOwner();\\nerror NotPlatform();\\nerror NotOwner();\\nerror NotVRF();\\nerror NotApprovedToTransfer();\\nerror InvalidAmountOfTokens();\\nerror WrongPassword();\\nerror LockedForever();\\nerror URIQueryForNonexistentToken();\\nerror InvalidTokenId();\\nerror MaxRetriesExceeded();\\nerror InvalidRequestId();\\n\\n//\\n// STRUCTS\\n//\\nstruct Auth {\\n  bytes32 key;\\n  bytes32[] proof;\\n}\\n\\nstruct MintTier {\\n  uint16 numMints;\\n  uint16 mintDiscount; //BPS\\n}\\n\\nstruct Discount {\\n  uint16 affiliateDiscount; //BPS\\n  MintTier[] mintTiers;\\n}\\n\\nstruct Config {\\n  string baseUri;\\n  address affiliateSigner;\\n  address ownerAltPayout; // optional alternative address for owner withdrawals.\\n  address superAffiliatePayout; // optional super affiliate address, will receive half of platform fee if set.\\n  uint32 maxSupply;\\n  uint16 maxBatchSize;\\n  uint16 affiliateFee; //BPS\\n  uint16 platformFee; //BPS\\n  uint16 defaultRoyalty; //BPS\\n  Discount discounts;\\n  uint16[] tokenPool; // flattened list of all mintable tokens\\n}\\n\\nstruct Options {\\n  bool uriLocked;\\n  bool maxSupplyLocked;\\n  bool tokenPoolLocked;\\n  bool affiliateFeeLocked;\\n  bool discountsLocked;\\n  bool ownerAltPayoutLocked;\\n  bool provenanceHashLocked;\\n  bool airdropLocked;\\n  bool useChainlinkVRF;\\n}\\n\\nstruct DutchInvite {\\n  uint128 price;\\n  uint128 reservePrice;\\n  uint128 delta;\\n  uint32 start;\\n  uint32 end;\\n  uint32 limit;\\n  uint32 maxSupply;\\n  uint32 interval;\\n  uint32 unitSize; // mint 1 get x\\n  address tokenAddress;\\n  uint16[] tokenIdsExcluded; // token ids excluded from this list\\n}\\n\\nstruct Invite {\\n  uint128 price;\\n  uint32 start;\\n  uint32 end;\\n  uint32 limit;\\n  uint32 maxSupply;\\n  uint32 unitSize; // mint 1 get x\\n  address tokenAddress;\\n  uint16[] tokenIdsExcluded; // token ids excluded from this list\\n}\\n\\nstruct OwnerBalance {\\n  uint128 owner;\\n  uint128 platform;\\n}\\n\\nstruct ValidationArgs {\\n  address owner;\\n  address affiliate;\\n  uint256 quantity;\\n  uint256 curSupply;\\n}\\n\\nstruct BurnConfig {\\n  address tokenAddress;\\n  address burnAddress;\\n}\\n\\nstruct VrfConfig {\\n  bool enabled;\\n  uint64 subId;\\n}\\n\\nstruct VrfMintInfo {\\n  bytes32 key;\\n  address to;\\n  uint256 quantity;\\n}\\n\\naddress constant PLATFORM = 0x86B82972282Dd22348374bC63fd21620F7ED847B;\\naddress constant BATCH = 0x6Bc558A6DC48dEfa0e7022713c23D65Ab26e4Fa7;\\nuint16 constant MAXBPS = 5000; // max fee or discount is 50%\\n\\naddress constant VRF_CORDINATOR = 0x271682DEB8C4E0901D1a1550aD2e64D568E69909;\\nbytes32 constant VRF_KEYHASH = 0x8af398995b04c28e9951adb9721ef74c74f93e6a478f39e7e0777be13527e7ef;\\n\\nlibrary ArchetypeLogic {\\n  //\\n  // EVENTS\\n  //\\n  event Invited(bytes32 indexed key, bytes32 indexed cid);\\n  event Referral(address indexed affiliate, address token, uint128 wad, uint256 numMints);\\n  event Withdrawal(address indexed src, address token, uint128 wad);\\n\\n  // calculate price based on affiliate usage and mint discounts\\n  function computePrice(\\n    DutchInvite storage invite,\\n    Discount storage discounts,\\n    uint256 numTokens,\\n    bool affiliateUsed\\n  ) public view returns (uint256) {\\n    uint256 price = invite.price;\\n    if (invite.interval != 0) {\\n      uint256 diff = (((block.timestamp - invite.start) / invite.interval) * invite.delta);\\n      if (price > invite.reservePrice) {\\n        if (diff > price - invite.reservePrice) {\\n          price = invite.reservePrice;\\n        } else {\\n          price = price - diff;\\n        }\\n      } else if (price < invite.reservePrice) {\\n        if (diff > invite.reservePrice - price) {\\n          price = invite.reservePrice;\\n        } else {\\n          price = price + diff;\\n        }\\n      }\\n    }\\n\\n    uint256 cost = price * numTokens;\\n\\n    if (affiliateUsed) {\\n      cost = cost - ((cost * discounts.affiliateDiscount) / 10000);\\n    }\\n\\n    for (uint256 i = 0; i < discounts.mintTiers.length; i++) {\\n      if (numTokens >= discounts.mintTiers[i].numMints) {\\n        return cost = cost - ((cost * discounts.mintTiers[i].mintDiscount) / 10000);\\n      }\\n    }\\n    return cost;\\n  }\\n\\n  function validateMint(\\n    DutchInvite storage i,\\n    Config storage config,\\n    Auth calldata auth,\\n    mapping(address => mapping(bytes32 => uint256)) storage minted,\\n    mapping(bytes32 => uint256) storage listSupply,\\n    bytes calldata signature,\\n    ValidationArgs memory args\\n  ) public view {\\n    address msgSender = _msgSender();\\n    if (args.affiliate != address(0)) {\\n      if (\\n        args.affiliate == PLATFORM || args.affiliate == args.owner || args.affiliate == msgSender\\n      ) {\\n        revert InvalidReferral();\\n      }\\n      validateAffiliate(args.affiliate, signature, config.affiliateSigner);\\n    }\\n\\n    if (i.limit == 0) {\\n      revert MintingPaused();\\n    }\\n\\n    if (!verify(auth, i.tokenAddress, msgSender)) {\\n      revert WalletUnauthorizedToMint();\\n    }\\n\\n    if (block.timestamp < i.start) {\\n      revert MintNotYetStarted();\\n    }\\n\\n    if (i.end > i.start && block.timestamp > i.end) {\\n      revert MintEnded();\\n    }\\n\\n    {\\n      uint256 totalAfterMint;\\n      if (i.limit < i.maxSupply) {\\n        totalAfterMint = minted[msgSender][auth.key] + args.quantity;\\n\\n        if (totalAfterMint > i.limit) {\\n          revert NumberOfMintsExceeded();\\n        }\\n      }\\n\\n      if (i.maxSupply < config.maxSupply) {\\n        totalAfterMint = listSupply[auth.key] + args.quantity;\\n        if (totalAfterMint > i.maxSupply) {\\n          revert ListMaxSupplyExceeded();\\n        }\\n      }\\n    }\\n\\n    if (args.quantity > config.maxBatchSize) {\\n      revert MaxBatchSizeExceeded();\\n    }\\n\\n    if ((args.curSupply + args.quantity) > config.maxSupply) {\\n      revert MaxSupplyExceeded();\\n    }\\n\\n    if (args.quantity > config.tokenPool.length) {\\n      revert TokenPoolEmpty();\\n    }\\n\\n    uint256 cost = computePrice(i, config.discounts, args.quantity, args.affiliate != address(0));\\n\\n    if (i.tokenAddress != address(0)) {\\n      IERC20Upgradeable erc20Token = IERC20Upgradeable(i.tokenAddress);\\n      if (erc20Token.allowance(msgSender, address(this)) < cost) {\\n        revert NotApprovedToTransfer();\\n      }\\n\\n      if (erc20Token.balanceOf(msgSender) < cost) {\\n        revert Erc20BalanceTooLow();\\n      }\\n\\n      if (msg.value != 0) {\\n        revert ExcessiveEthSent();\\n      }\\n    } else {\\n      if (msg.value < cost) {\\n        revert InsufficientEthSent();\\n      }\\n\\n      if (msg.value > cost) {\\n        revert ExcessiveEthSent();\\n      }\\n    }\\n  }\\n\\n  function updateBalances(\\n    DutchInvite storage i,\\n    Config storage config,\\n    mapping(address => OwnerBalance) storage _ownerBalance,\\n    mapping(address => mapping(address => uint128)) storage _affiliateBalance,\\n    address affiliate,\\n    uint256 quantity\\n  ) public {\\n    address tokenAddress = i.tokenAddress;\\n    uint128 value = uint128(msg.value);\\n    if (tokenAddress != address(0)) {\\n      value = uint128(computePrice(i, config.discounts, quantity, affiliate != address(0)));\\n    }\\n\\n    uint128 affiliateWad = 0;\\n    if (affiliate != address(0)) {\\n      affiliateWad = (value * config.affiliateFee) / 10000;\\n      _affiliateBalance[affiliate][tokenAddress] += affiliateWad;\\n      emit Referral(affiliate, tokenAddress, affiliateWad, quantity);\\n    }\\n\\n    uint128 superAffiliateWad = 0;\\n    if (config.superAffiliatePayout != address(0)) {\\n      superAffiliateWad = ((value * config.platformFee) / 2) / 10000;\\n      _affiliateBalance[config.superAffiliatePayout][tokenAddress] += superAffiliateWad;\\n    }\\n\\n    OwnerBalance memory balance = _ownerBalance[tokenAddress];\\n    uint128 platformWad = ((value * config.platformFee) / 10000) - superAffiliateWad;\\n    uint128 ownerWad = value - affiliateWad - platformWad - superAffiliateWad;\\n    _ownerBalance[tokenAddress] = OwnerBalance({\\n      owner: balance.owner + ownerWad,\\n      platform: balance.platform + platformWad\\n    });\\n\\n    if (tokenAddress != address(0)) {\\n      IERC20Upgradeable erc20Token = IERC20Upgradeable(tokenAddress);\\n      erc20Token.transferFrom(_msgSender(), address(this), value);\\n    }\\n  }\\n\\n  function withdrawTokens(\\n    Config storage config,\\n    mapping(address => OwnerBalance) storage _ownerBalance,\\n    mapping(address => mapping(address => uint128)) storage _affiliateBalance,\\n    address owner,\\n    address[] calldata tokens\\n  ) public {\\n    address msgSender = _msgSender();\\n    for (uint256 i = 0; i < tokens.length; i++) {\\n      address tokenAddress = tokens[i];\\n      uint128 wad = 0;\\n\\n      if (msgSender == owner || msgSender == config.ownerAltPayout || msgSender == PLATFORM) {\\n        OwnerBalance storage balance = _ownerBalance[tokenAddress];\\n        if (msgSender == owner || msgSender == config.ownerAltPayout) {\\n          wad = balance.owner;\\n          balance.owner = 0;\\n        } else {\\n          wad = balance.platform;\\n          balance.platform = 0;\\n        }\\n      } else {\\n        wad = _affiliateBalance[msgSender][tokenAddress];\\n        _affiliateBalance[msgSender][tokenAddress] = 0;\\n      }\\n\\n      if (wad == 0) {\\n        revert BalanceEmpty();\\n      }\\n\\n      if (tokenAddress == address(0)) {\\n        bool success = false;\\n        // send to ownerAltPayout if set and owner is withdrawing\\n        if (msgSender == owner && config.ownerAltPayout != address(0)) {\\n          (success, ) = payable(config.ownerAltPayout).call{ value: wad }(\\\"\\\");\\n        } else {\\n          (success, ) = msgSender.call{ value: wad }(\\\"\\\");\\n        }\\n        if (!success) {\\n          revert TransferFailed();\\n        }\\n      } else {\\n        IERC20Upgradeable erc20Token = IERC20Upgradeable(tokenAddress);\\n\\n        if (msgSender == owner && config.ownerAltPayout != address(0)) {\\n          erc20Token.transfer(config.ownerAltPayout, wad);\\n        } else {\\n          erc20Token.transfer(msgSender, wad);\\n        }\\n      }\\n      emit Withdrawal(msgSender, tokenAddress, wad);\\n    }\\n  }\\n\\n  function validateAffiliate(\\n    address affiliate,\\n    bytes calldata signature,\\n    address affiliateSigner\\n  ) public view {\\n    bytes32 signedMessagehash = ECDSA.toEthSignedMessageHash(\\n      keccak256(abi.encodePacked(affiliate))\\n    );\\n    address signer = ECDSA.recover(signedMessagehash, signature);\\n\\n    if (signer != affiliateSigner) {\\n      revert InvalidSignature();\\n    }\\n  }\\n\\n  function verify(\\n    Auth calldata auth,\\n    address tokenAddress,\\n    address account\\n  ) public pure returns (bool) {\\n    // keys 0-255 and tokenAddress are public\\n    if (uint256(auth.key) <= 0xff || auth.key == keccak256(abi.encodePacked(tokenAddress))) {\\n      return true;\\n    }\\n\\n    return MerkleProofLib.verify(auth.proof, auth.key, keccak256(abi.encodePacked(account)));\\n  }\\n\\n  function getRandomTokenIds(\\n    uint16[] storage tokenPool,\\n    uint16[] memory tokenIdsExcluded,\\n    uint256 quantity,\\n    uint256 seed\\n  ) public returns (uint16[] memory) {\\n    uint16[] memory tokenIds = new uint16[](quantity);\\n\\n    uint256 retries = 0;\\n    uint256 MAX_RETRIES = 5;\\n\\n    uint256 i = 0;\\n    while (i < quantity) {\\n      if (tokenPool.length == 0) {\\n        revert MaxSupplyExceeded();\\n      }\\n\\n      uint256 rand = uint256(keccak256(abi.encode(seed, i)));\\n      uint256 randIdx = rand % tokenPool.length;\\n      uint16 selectedToken = tokenPool[randIdx];\\n\\n      if (tokenIdsExcluded.length > 0 && isExcluded(selectedToken, tokenIdsExcluded)) {\\n        // If the token is excluded, retry for this position in tokenIds array\\n        seed = rand; // Update the seed for the next iteration\\n\\n        retries++;\\n        if (retries >= MAX_RETRIES) {\\n          revert MaxRetriesExceeded();\\n        }\\n        continue;\\n      }\\n\\n      tokenIds[i] = selectedToken;\\n\\n      // remove token from pool\\n      tokenPool[randIdx] = tokenPool[tokenPool.length - 1];\\n      tokenPool.pop();\\n\\n      retries = 0;\\n      i++;\\n    }\\n\\n    return tokenIds;\\n  }\\n\\n  function isExcluded(uint16 tokenId, uint16[] memory excludedList) internal pure returns (bool) {\\n    for (uint256 i = 0; i < excludedList.length; i++) {\\n      if (tokenId == excludedList[i]) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function random() public view returns (uint256) {\\n    uint256 randomHash = uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp)));\\n    return randomHash;\\n  }\\n\\n  function _msgSender() internal view returns (address) {\\n    return msg.sender == BATCH ? tx.origin : msg.sender;\\n  }\\n}\\n\"\r\n    },\r\n    \"solady/src/utils/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Gas optimized ECDSA wrapper.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/ECDSA.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ECDSA.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol)\\nlibrary ECDSA {\\n    function recover(bytes32 hash, bytes calldata signature) internal view returns (address result) {\\n        assembly {\\n            if eq(signature.length, 65) {\\n                // Copy the free memory pointer so that we can restore it later.\\n                let m := mload(0x40)\\n                // Directly copy `r` and `s` from the calldata.\\n                calldatacopy(0x40, signature.offset, 0x40)\\n\\n                // If `s` in lower half order, such that the signature is not malleable.\\n                // prettier-ignore\\n                if iszero(gt(mload(0x60), 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)) {\\n                    mstore(0x00, hash)\\n                    // Compute `v` and store it in the scratch space.\\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40))))\\n                    pop(\\n                        staticcall(\\n                            gas(), // Amount of gas left for the transaction.\\n                            0x01, // Address of `ecrecover`.\\n                            0x00, // Start of input.\\n                            0x80, // Size of input.\\n                            0x40, // Start of output.\\n                            0x20 // Size of output.\\n                        )\\n                    )\\n                    // Restore the zero slot.\\n                    mstore(0x60, 0)\\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                    result := mload(sub(0x60, returndatasize()))\\n                }\\n                // Restore the free memory pointer.\\n                mstore(0x40, m)\\n            }\\n        }\\n    }\\n\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal view returns (address result) {\\n        assembly {\\n            // Copy the free memory pointer so that we can restore it later.\\n            let m := mload(0x40)\\n            // prettier-ignore\\n            let s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n\\n            // If `s` in lower half order, such that the signature is not malleable.\\n            // prettier-ignore\\n            if iszero(gt(s, 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)) {\\n                mstore(0x00, hash)\\n                mstore(0x20, add(shr(255, vs), 27))\\n                mstore(0x40, r)\\n                mstore(0x60, s)\\n                pop(\\n                    staticcall(\\n                        gas(), // Amount of gas left for the transaction.\\n                        0x01, // Address of `ecrecover`.\\n                        0x00, // Start of input.\\n                        0x80, // Size of input.\\n                        0x40, // Start of output.\\n                        0x20 // Size of output.\\n                    )\\n                )\\n                // Restore the zero slot.\\n                mstore(0x60, 0)\\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                result := mload(sub(0x60, returndatasize()))\\n            }\\n            // Restore the free memory pointer.\\n            mstore(0x40, m)\\n        }\\n    }\\n\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\\n        assembly {\\n            // Store into scratch space for keccak256.\\n            mstore(0x20, hash)\\n            mstore(0x00, \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            // 0x40 - 0x04 = 0x3c\\n            result := keccak256(0x04, 0x3c)\\n        }\\n    }\\n\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\\n        assembly {\\n            // We need at most 128 bytes for Ethereum signed message header.\\n            // The max length of the ASCII reprenstation of a uint256 is 78 bytes.\\n            // The length of \\\"\\\\x19Ethereum Signed Message:\\\\n\\\" is 26 bytes (i.e. 0x1a).\\n            // The next multiple of 32 above 78 + 26 is 128 (i.e. 0x80).\\n\\n            // Instead of allocating, we temporarily copy the 128 bytes before the\\n            // start of `s` data to some variables.\\n            let m3 := mload(sub(s, 0x60))\\n            let m2 := mload(sub(s, 0x40))\\n            let m1 := mload(sub(s, 0x20))\\n            // The length of `s` is in bytes.\\n            let sLength := mload(s)\\n\\n            let ptr := add(s, 0x20)\\n\\n            // `end` marks the end of the memory which we will compute the keccak256 of.\\n            let end := add(ptr, sLength)\\n\\n            // Convert the length of the bytes to ASCII decimal representation\\n            // and store it into the memory.\\n            // prettier-ignore\\n            for { let temp := sLength } 1 {} {\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Copy the header over to the memory.\\n            mstore(sub(ptr, 0x20), \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19Ethereum Signed Message:\\\\n\\\")\\n            // Compute the keccak256 of the memory.\\n            result := keccak256(sub(ptr, 0x1a), sub(end, sub(ptr, 0x1a)))\\n\\n            // Restore the previous memory.\\n            mstore(s, sLength)\\n            mstore(sub(s, 0x20), m1)\\n            mstore(sub(s, 0x40), m2)\\n            mstore(sub(s, 0x60), m3)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"solady/src/utils/LibString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\nlibrary LibString {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    error HexLengthInsufficient();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\\n        assembly {\\n            let start := mload(0x40)\\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            let m := add(start, and(add(shl(1, length), 0x62), not(0x1f)))\\n            // Allocate the memory.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for {} 1 {} {\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                length := sub(length, 1)\\n                // prettier-ignore\\n                if iszero(length) { break }\\n            }\\n\\n            if temp {\\n                // Store the function selector of `HexLengthInsufficient()`.\\n                mstore(0x00, 0x2194895a)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := add(sub(end, str), 2)\\n            // Move the pointer and write the \\\"0x\\\" prefix.\\n            str := sub(str, 0x20)\\n            mstore(str, 0x3078)\\n            // Move the pointer and write the length.\\n            str := sub(str, 2)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory str) {\\n        assembly {\\n            let start := mload(0x40)\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            let m := add(start, 0xa0)\\n            // Allocate the memory.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := add(sub(end, str), 2)\\n            // Move the pointer and write the \\\"0x\\\" prefix.\\n            str := sub(str, 0x20)\\n            mstore(str, 0x3078)\\n            // Move the pointer and write the length.\\n            str := sub(str, 2)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        assembly {\\n            let start := mload(0x40)\\n            // We need 0x20 bytes for the length, 0x02 bytes for the prefix,\\n            // and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x02 + 0x28) is 0x60.\\n            str := add(start, 0x60)\\n\\n            // Allocate the memory.\\n            mstore(0x40, str)\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let length := 20\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 2)\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                length := sub(length, 1)\\n                // prettier-ignore\\n                if iszero(length) { break }\\n            }\\n\\n            // Move the pointer and write the \\\"0x\\\" prefix.\\n            str := sub(str, 32)\\n            mstore(str, 0x3078)\\n            // Move the pointer and write the length.\\n            str := sub(str, 2)\\n            mstore(str, 42)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   OTHER STRING OPERATIONS                  */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    function replace(\\n        string memory subject,\\n        string memory search,\\n        string memory replacement\\n    ) internal pure returns (string memory result) {\\n        assembly {\\n            let subjectLength := mload(subject)\\n            let searchLength := mload(search)\\n            let replacementLength := mload(replacement)\\n\\n            subject := add(subject, 0x20)\\n            search := add(search, 0x20)\\n            replacement := add(replacement, 0x20)\\n            result := add(mload(0x40), 0x20)\\n\\n            let subjectEnd := add(subject, subjectLength)\\n            if iszero(gt(searchLength, subjectLength)) {\\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\\n                let h := 0\\n                if iszero(lt(searchLength, 32)) {\\n                    h := keccak256(search, searchLength)\\n                }\\n                let m := shl(3, sub(32, and(searchLength, 31)))\\n                let s := mload(search)\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    let t := mload(subject)\\n                    // Whether the first `searchLength % 32` bytes of \\n                    // `subject` and `search` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\n                                mstore(result, t)\\n                                result := add(result, 1)\\n                                subject := add(subject, 1)\\n                                // prettier-ignore\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        // prettier-ignore\\n                        for { let o := 0 } 1 {} {\\n                            mstore(add(result, o), mload(add(replacement, o)))\\n                            o := add(o, 0x20)\\n                            // prettier-ignore\\n                            if iszero(lt(o, replacementLength)) { break }\\n                        }\\n                        result := add(result, replacementLength)\\n                        subject := add(subject, searchLength)    \\n                        if iszero(searchLength) {\\n                            mstore(result, t)\\n                            result := add(result, 1)\\n                            subject := add(subject, 1)\\n                        }\\n                        // prettier-ignore\\n                        if iszero(lt(subject, subjectSearchEnd)) { break }\\n                        continue\\n                    }\\n                    mstore(result, t)\\n                    result := add(result, 1)\\n                    subject := add(subject, 1)\\n                    // prettier-ignore\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\n                }\\n            }\\n\\n            let resultRemainder := result\\n            result := add(mload(0x40), 0x20)\\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\\n            // Copy the rest of the string one word at a time.\\n            // prettier-ignore\\n            for {} lt(subject, subjectEnd) {} {\\n                mstore(resultRemainder, mload(subject))\\n                resultRemainder := add(resultRemainder, 0x20)\\n                subject := add(subject, 0x20)\\n            }\\n            // Allocate memory for the length and the bytes,\\n            // rounded up to a multiple of 32.\\n            mstore(0x40, add(result, and(add(k, 0x40), not(0x1f))))\\n            result := sub(result, 0x20)\\n            mstore(result, k)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"solady/src/utils/MerkleProofLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Gas optimized verification of proof of inclusion for a leaf in a Merkle tree.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/MerkleProofLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/MerkleProofLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol)\\nlibrary MerkleProofLib {\\n    function verify(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool isValid) {\\n        assembly {\\n            if proof.length {\\n                // Left shift by 5 is equivalent to multiplying by 0x20.\\n                let end := add(proof.offset, shl(5, proof.length))\\n                // Initialize `offset` to the offset of `proof` in the calldata.\\n                let offset := proof.offset\\n                // Iterate over proof elements to compute root hash.\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    // Slot of `leaf` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(leaf, calldataload(offset)))\\n                    // Store elements to hash contiguously in scratch space.\\n                    // Scratch space is 64 bytes (0x00 - 0x3f) and both elements are 32 bytes.\\n                    mstore(scratch, leaf)\\n                    mstore(xor(scratch, 0x20), calldataload(offset))\\n                    // Reuse `leaf` to store the hash to reduce stack operations.\\n                    leaf := keccak256(0x00, 0x40)\\n                    offset := add(offset, 0x20)\\n                    // prettier-ignore\\n                    if iszero(lt(offset, end)) { break }\\n                }\\n            }\\n            isValid := eq(leaf, root)\\n        }\\n    }\\n\\n    function verifyMultiProof(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32[] calldata leafs,\\n        bool[] calldata flags\\n    ) internal pure returns (bool isValid) {\\n        // Rebuilds the root by consuming and producing values on a queue.\\n        // The queue starts with the `leafs` array, and goes into a `hashes` array.\\n        // After the process, the last element on the queue is verified\\n        // to be equal to the `root`.\\n        //\\n        // The `flags` array denotes whether the sibling\\n        // should be popped from the queue (`flag == true`), or\\n        // should be popped from the `proof` (`flag == false`).\\n        assembly {\\n            // If the number of flags is correct.\\n            // prettier-ignore\\n            for {} eq(add(leafs.length, proof.length), add(flags.length, 1)) {} {\\n                // Left shift by 5 is equivalent to multiplying by 0x20.\\n                // Compute the end calldata offset of `leafs`.\\n                let leafsEnd := add(leafs.offset, shl(5, leafs.length))\\n                // These are the calldata offsets.\\n                let leafsOffset := leafs.offset\\n                let flagsOffset := flags.offset\\n                let proofOffset := proof.offset\\n\\n                // We can use the free memory space for the queue.\\n                // We don't need to allocate, since the queue is temporary.\\n                let hashesFront := mload(0x40)\\n                let hashesBack := hashesFront\\n                // This is the end of the memory for the queue.\\n                let end := add(hashesBack, shl(5, flags.length))\\n\\n                // For the case where `proof.length + leafs.length == 1`.\\n                if iszero(flags.length) {\\n                    // If `proof.length` is zero, `leafs.length` is 1.\\n                    if iszero(proof.length) {\\n                        isValid := eq(calldataload(leafsOffset), root)\\n                        break\\n                    }\\n                    // If `leafs.length` is zero, `proof.length` is 1.\\n                    if iszero(leafs.length) {\\n                        isValid := eq(calldataload(proofOffset), root)\\n                        break\\n                    }\\n                }\\n\\n                // prettier-ignore\\n                for {} 1 {} {\\n                    let a := 0\\n                    // Pops a value from the queue into `a`.\\n                    switch lt(leafsOffset, leafsEnd)\\n                    case 0 {\\n                        // Pop from `hashes` if there are no more leafs.\\n                        a := mload(hashesFront)\\n                        hashesFront := add(hashesFront, 0x20)\\n                    }\\n                    default {\\n                        // Otherwise, pop from `leafs`.\\n                        a := calldataload(leafsOffset)\\n                        leafsOffset := add(leafsOffset, 0x20)\\n                    }\\n\\n                    let b := 0\\n                    // If the flag is false, load the next proof,\\n                    // else, pops from the queue.\\n                    switch calldataload(flagsOffset)\\n                    case 0 {\\n                        // Loads the next proof.\\n                        b := calldataload(proofOffset)\\n                        proofOffset := add(proofOffset, 0x20)\\n                    }\\n                    default {\\n                        // Pops a value from the queue into `a`.\\n                        switch lt(leafsOffset, leafsEnd)\\n                        case 0 {\\n                            // Pop from `hashes` if there are no more leafs.\\n                            b := mload(hashesFront)\\n                            hashesFront := add(hashesFront, 0x20)\\n                        }\\n                        default {\\n                            // Otherwise, pop from `leafs`.\\n                            b := calldataload(leafsOffset)\\n                            leafsOffset := add(leafsOffset, 0x20)\\n                        }\\n                    }\\n                    // Advance to the next flag offset.\\n                    flagsOffset := add(flagsOffset, 0x20)\\n\\n                    // Slot of `a` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(a, b))\\n                    // Hash the scratch space and push the result onto the queue.\\n                    mstore(scratch, a)\\n                    mstore(xor(scratch, 0x20), b)\\n                    mstore(hashesBack, keccak256(0x00, 0x40))\\n                    hashesBack := add(hashesBack, 0x20)\\n                    // prettier-ignore\\n                    if iszero(lt(hashesBack, end)) { break }\\n                }\\n                // Checks if the last value in the queue is same as the root.\\n                isValid := eq(mload(sub(hashesBack, 0x20)), root)\\n                break\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/ArchetypeLogic.sol\": {\r\n        \"ArchetypeLogic\": \"0x365110b34b46927b2158e07e6d3c6d4802e032f0\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"BurnToMintDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequestId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockedForever\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPlatform\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVRF\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongPassword\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"cid\",\"type\":\"bytes32\"}],\"name\":\"Invited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"wad\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numMints\",\"type\":\"uint256\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"wad\",\"type\":\"uint128\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"affiliateBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"affiliateBalanceToken\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantityList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"airdropTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"newTokens\",\"type\":\"uint16[]\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"appendTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantityList\",\"type\":\"uint256[]\"}],\"name\":\"burnToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"affiliateUsed\",\"type\":\"bool\"}],\"name\":\"computePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"affiliateSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAltPayout\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superAffiliatePayout\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxBatchSize\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"affiliateFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"platformFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyalty\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"affiliateDiscount\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"numMints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mintDiscount\",\"type\":\"uint16\"}],\"internalType\":\"struct MintTier[]\",\"name\":\"mintTiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Discount\",\"name\":\"discounts\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBurnToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableChainlinkVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"name\":\"enableBurnToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"enableChainlinkVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"affiliateSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ownerAltPayout\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"superAffiliatePayout\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"maxBatchSize\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"affiliateFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"platformFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"defaultRoyalty\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"affiliateDiscount\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"numMints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mintDiscount\",\"type\":\"uint16\"}],\"internalType\":\"struct MintTier[]\",\"name\":\"mintTiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Discount\",\"name\":\"discounts\",\"type\":\"tuple\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenPool\",\"type\":\"uint16[]\"}],\"internalType\":\"struct Config\",\"name\":\"config_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"invites\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reservePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"delta\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unitSize\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"listSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"lockAffiliateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"lockAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"lockDiscounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"lockMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"lockOwnerAltPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"lockTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"lockURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct Auth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct Auth\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"options\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"uriLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"maxSupplyLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"tokenPoolLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"affiliateFeeLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"discountsLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ownerAltPayoutLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"provenanceHashLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"airdropLocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"useChainlinkVRF\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"owner\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"platform\",\"type\":\"uint128\"}],\"internalType\":\"struct OwnerBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ownerBalanceToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"owner\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"platform\",\"type\":\"uint128\"}],\"internalType\":\"struct OwnerBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"newTokens\",\"type\":\"uint16[]\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"replaceTokenPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdMintInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"affiliateFee\",\"type\":\"uint16\"}],\"name\":\"setAffiliateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeNumerator\",\"type\":\"uint16\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"affiliateDiscount\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"numMints\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"mintDiscount\",\"type\":\"uint16\"}],\"internalType\":\"struct MintTier[]\",\"name\":\"mintTiers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Discount\",\"name\":\"discounts\",\"type\":\"tuple\"}],\"name\":\"setDiscounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_cid\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"reservePrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"delta\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"interval\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unitSize\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIdsExcluded\",\"type\":\"uint16[]\"}],\"internalType\":\"struct DutchInvite\",\"name\":\"_dutchInvite\",\"type\":\"tuple\"}],\"name\":\"setDutchInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_cid\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unitSize\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint16[]\",\"name\":\"tokenIdsExcluded\",\"type\":\"uint16[]\"}],\"internalType\":\"struct Invite\",\"name\":\"_invite\",\"type\":\"tuple\"}],\"name\":\"setInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxBatchSize\",\"type\":\"uint16\"}],\"name\":\"setMaxBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAltPayout\",\"type\":\"address\"}],\"name\":\"setOwnerAltPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superAffiliatePayout\",\"type\":\"address\"}],\"name\":\"setSuperAffiliatePayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPool\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Archetype", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}