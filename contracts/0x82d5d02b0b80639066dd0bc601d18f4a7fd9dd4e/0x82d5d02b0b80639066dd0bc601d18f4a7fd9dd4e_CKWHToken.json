{"SourceCode": "pragma solidity >=0.4.21 <0.6.0;\r\n//\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface TokenVoluntaryUpgrade {\r\n    function setUpgradeContract(address _upgradeContractAddress) external returns(bool);\r\n    function burnAfterUpgrade(uint256 value) external returns (bool success);\r\n    event UpgradeContractChange(address owner, address indexed _exchangeContractAddress);\r\n    event UpgradeBurn(address indexed _exchangeContract, uint256 _value);\r\n}\r\n//\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n// https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\r\n// b7d60f2f9a849c5c2d59e24062f9c09f3390487a\r\n// with some minor changes\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Only owner can do that\");\r\n        _;\r\n    }\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"newOwner parameter must be set\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n//\r\n//\r\ncontract CKWHToken is IERC20, Ownable, TokenVoluntaryUpgrade  {\r\n    string  private _name              = \"CopernicKWH\";\r\n    string  private _symbol            = \"CKWH\";\r\n    string  private _standard          = \"ERC20\";\r\n    uint8   private _decimals          = 18;\r\n    uint256 private _totalSupply       = 25000000 * 1 ether;\r\n    //\r\n    address internal _upgradeContract   = address(0);\r\n    //\r\n    mapping(address => uint256)                     private balances;\r\n    mapping(address => mapping(address => uint256)) private allowed;\r\n    //\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n    //\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    //\r\n    event UpgradeContractChange(\r\n        address owner,\r\n        address indexed _exchangeContractAddress\r\n    );\r\n    //\r\n    event UpgradeBurn(\r\n        address indexed _upgradeContract,\r\n        uint256 _value\r\n    );\r\n    //\r\n    using SafeMath for uint256;\r\n    //\r\n    constructor () public Ownable() {\r\n        balances[msg.sender] = totalSupply();\r\n    }\r\n    // Try to prevent sending ETH to SmartContract by mistake.\r\n    function () external payable  {\r\n        revert(\"This SmartContract is not payable\");\r\n    }\r\n    //\r\n    // Getters and Setters\r\n    //\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    //\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    //\r\n    function standard() public view returns (string memory) {\r\n        return _standard;\r\n    }\r\n    //\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    //\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    //\r\n    // Contract common functions\r\n    //\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        //\r\n        require(_to != address(0), \"'_to' address has to be set\");\r\n        require(_value <= balances[msg.sender], \"Insufficient balance\");\r\n        //\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        //\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    //\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        require (_spender != address(0), \"_spender address has to be set\");\r\n        require (_value >= 0, \"'_value' parameter has to greater or equal 0\");\r\n        //\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    //\r\n    function safeApprove(address _spender, uint256 _currentValue, uint256 _value)  public returns (bool success) {\r\n        // If current allowance for _spender is equal to _currentValue, then\r\n        // overwrite it with _value and return true, otherwise return false.\r\n        if (allowed[msg.sender][_spender] == _currentValue) return approve(_spender, _value);\r\n        return false;\r\n    }\r\n    //\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        //\r\n        require(_from != address(0), \"'_from' address has to be set\");\r\n        require(_to != address(0), \"'_to' address has to be set\");\r\n        require(_value <= balances[_from], \"Insufficient balance\");\r\n        require(_value <= allowed[_from][msg.sender], \"Insufficient allowance\");\r\n        //\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        //\r\n        emit Transfer(_from, _to, _value);\r\n        //\r\n        return true;\r\n    }\r\n    //\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    //\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner];\r\n    }\r\n    //\r\n    // Voluntary token upgrade logic\r\n    //\r\n    /** \r\n     * @dev Gets SmartContract that could upgrade Tokens - empty == no upgrade\r\n     */\r\n    function upgradeContract() public view returns(address) {\r\n        return _upgradeContract;\r\n    }\r\n    //\r\n    /** \r\n     * @dev Sets SmartContract that could upgrade Tokens to a new version in a future\r\n     */\r\n    function setUpgradeContract(address _upgradeContractAddress) public onlyOwner returns(bool) {\r\n        _upgradeContract = _upgradeContractAddress;\r\n        emit UpgradeContractChange(msg.sender, _upgradeContract);\r\n        //\r\n        return true;\r\n    }\r\n    function burnAfterUpgrade(uint256 _value) public returns (bool success) {\r\n        require(_upgradeContract != address(0), \"upgradeContract is not set\");\r\n        require(msg.sender == _upgradeContract, \"only upgradeContract can execute token burning\");\r\n        require(_value <= balances[msg.sender], \"Insufficient balance\");\r\n        //\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        emit UpgradeBurn(msg.sender, _value);\r\n        //\r\n        return true;\r\n    }\r\n    //\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(_value <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n        return true;\r\n    }\r\n    //\r\n    function mint(uint256 _value) public onlyOwner returns(bool success) {\r\n        _totalSupply = _totalSupply.add(_value);\r\n        balances[msg.sender] = balances[msg.sender].add(_value);\r\n        emit Transfer(address(0), msg.sender, _value);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnAfterUpgrade\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"standard\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradeContractAddress\",\"type\":\"address\"}],\"name\":\"setUpgradeContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_currentValue\",\"type\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"safeApprove\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_exchangeContractAddress\",\"type\":\"address\"}],\"name\":\"UpgradeContractChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_upgradeContract\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"UpgradeBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "CKWHToken", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000017d7840000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000004636b7768000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004636b77680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054552433230000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://00d359afb488ca4708f25ace571bf7f387b47af20bfa7d9d4ffe7c437b18153a"}