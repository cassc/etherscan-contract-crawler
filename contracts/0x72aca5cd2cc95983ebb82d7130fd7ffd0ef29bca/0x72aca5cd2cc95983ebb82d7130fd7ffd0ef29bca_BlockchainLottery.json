{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n// File: Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: BlockchainLottery.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract BlockchainLottery is Ownable {\r\n\r\n  address public winner;\r\n  address[] public ticketHolders;  \r\n  address public roundWinner;\r\n  address public feewallet = 0xB8Aa4d5366bd3103620d0179fb4B17709cdD5c8b;\r\n\r\n  uint256 public ticketCount;\r\n  uint256 public minimumTicketCount = 0;\r\n  uint256 public lotteryIndex = 0;\r\n  uint256 public maximumTicketCount = 10000000;\r\n  uint256 public feePercentage = 30; \r\n  uint256[] public depositedAmounts;   \r\n  uint256 public drawCount = 0;\r\n  uint256 public ticketPrice = 0.002 ether;\r\n  uint256 public winningTicketNumber;\r\n  uint256 public startTime = 1723193670;\r\n  uint256 public endTime;\r\n  uint256 public duration = 604800;\r\n\r\n  mapping(address => mapping(uint256 => uint256)) public myTicketCount;\r\n  mapping(address => mapping(uint256 => uint256[])) public myTickets;\r\n\r\n  struct Records {\r\n        uint256 drawNumber;\r\n        address walletAddress;\r\n        uint256 prize;\r\n        uint256 winningTicketNumber;\r\n        uint256 lotteryIndex;        \r\n  }\r\n\r\n  Records[] public records;\r\n\r\n  constructor(){\r\n  }\r\n  \r\n    function buyTickets(uint256 ticketAmount) external payable {\r\n\r\n      require(startTime <= block.timestamp, \"Project not yet launched\");\r\n      require(endTime >= block.timestamp, \"Project already finished\");\r\n      require(ticketCount + ticketAmount <= maximumTicketCount, \"Ticket limit reached\");\r\n\r\n      if(msg.sender != owner()){\r\n      require(msg.value >= ticketPrice * ticketAmount, \"Not enough funds available\");\r\n      }\r\n\r\n      myTicketCount[msg.sender][lotteryIndex] = myTicketCount[msg.sender][lotteryIndex] + ticketAmount;\r\n\r\n      for(uint256 x = 0; x < ticketAmount; x++){\r\n      ticketCount = ticketCount + 1;\r\n\r\n      myTickets[msg.sender][lotteryIndex].push(ticketCount);\r\n      ticketHolders.push(msg.sender);\r\n      } \r\n      \r\n    }\r\n\r\n  function distributePrize() public onlyOwner {    \r\n\r\n    uint256 prizeMoney = address(this).balance;\r\n\r\n    (bool fees, ) = payable(roundWinner).call{value: (prizeMoney * (100 - feePercentage))/ 100}(\"\");\r\n    require(fees);\r\n\r\n    (bool ownerWallet, ) = payable(owner()).call{value: (prizeMoney * feePercentage) / 100}(\"\");\r\n    require(ownerWallet);      \r\n\r\n    Records memory newRecords = Records(drawCount, roundWinner, (prizeMoney * feePercentage / 100), winningTicketNumber, lotteryIndex);\r\n\r\n    records.push(newRecords);\r\n    lotteryIndex++;\r\n    delete ticketHolders;\r\n\r\n    restartBuying();       \r\n  }\r\n\r\n\r\n  function manualNormalPrizeDistribute(address manualWinnerAddress) external onlyOwner{\r\n\r\n          uint256 prizeMoney = address(this).balance;\r\n\r\n          (bool fees, ) = payable(manualWinnerAddress).call{value: (prizeMoney * (100 - feePercentage))/ 100}(\"\");\r\n          require(fees);\r\n\r\n          (bool ownerWallet, ) = payable(owner()).call{value: (prizeMoney * feePercentage) / 100}(\"\");\r\n          require(ownerWallet);\r\n\r\n          Records memory newRecords = Records(drawCount, roundWinner, (prizeMoney * feePercentage / 100), winningTicketNumber, lotteryIndex);\r\n\r\n          records.push(newRecords);\r\n          lotteryIndex++;\r\n          delete ticketHolders;\r\n\r\n          restartBuying();  \r\n  }   \r\n    \r\n  function startBuying() public onlyOwner {\r\n    startTime = block.timestamp;\r\n    endTime = block.timestamp + duration;\r\n\r\n  }    \r\n\r\n  function restartBuying() internal {\r\n    endTime = block.timestamp + duration;\r\n  }    \r\n\r\n  function randomNum(uint256 _mod, uint256 _seed, uint256 _salt) internal view returns(uint256) {\r\n    uint256 num = uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, _seed, _salt))) % _mod;\r\n    return num;\r\n  }\r\n\r\n  function getTicketCount() public view returns (uint256) {\r\n  return ticketCount;\r\n  }\r\n\r\n  function getRecords() public view returns (Records[] memory) {\r\n    return records;\r\n  }\r\n\r\n  function getRecord(uint256 index) public view returns (Records memory) {\r\n    return records[index];\r\n  }\r\n\r\n  function drawLottery() public onlyOwner {\r\n\r\n    require(ticketCount >= minimumTicketCount, \"Ticket count is less than the minimum\");\r\n\r\n    uint256 winningLotteryNumber = randomNum(ticketCount, block.timestamp * 3, drawCount + 5) + 1;  \r\n    roundWinner = ticketHolders[winningLotteryNumber];\r\n\r\n    distributePrize();\r\n    drawCount++;\r\n    ticketCount = 0;\r\n  } \r\n\r\n  function deposit() external payable onlyOwner{\r\n    depositedAmounts.push(msg.value);\r\n  }\r\n\r\n  function withdraw() external onlyOwner{\r\n    (bool main, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n    require(main);\r\n  }\r\n\r\n  function setMinimumTicketCount(uint256 _minimumTicketCount) public onlyOwner{\r\n    minimumTicketCount = _minimumTicketCount;\r\n  }\r\n\r\n  function setWallets(address _feewallet) public onlyOwner{\r\n    feewallet = _feewallet;    \r\n  }\r\n\r\n  function setDrawCount(uint256 _drawCount) external onlyOwner{\r\n    drawCount = _drawCount;\r\n  }\r\n\r\n  function setLotteryIndex(uint256 _lotteryIndex) external onlyOwner{\r\n    lotteryIndex = _lotteryIndex;\r\n  }\r\n\r\n  function setMaximumTicketCount(uint256 _maximumTicketCount) external onlyOwner{\r\n    maximumTicketCount = _maximumTicketCount;\r\n  }\r\n\r\n  function setTicketPrice(uint256 _ticketPrice) external onlyOwner{\r\n    ticketPrice = _ticketPrice; \r\n  }\r\n\r\n  function setTax(uint256 _taxPercentage) external onlyOwner{\r\n    feePercentage  = _taxPercentage ;\r\n  }\r\n  \r\n  function setendTime(uint256 _endTime) external onlyOwner{\r\n    endTime  = _endTime ;\r\n  }\r\n\r\n  function setDuration(uint256 _duration) external onlyOwner{\r\n    duration = _duration;\r\n  }\r\n\r\n  function getLotteryIndex() external view returns (uint256) {\r\n  return lotteryIndex;\r\n  }\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feewallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"drawNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct BlockchainLottery.Records\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"drawNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct BlockchainLottery.Records[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manualWinnerAddress\",\"type\":\"address\"}],\"name\":\"manualNormalPrizeDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"myTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"drawNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winningTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawCount\",\"type\":\"uint256\"}],\"name\":\"setDrawCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryIndex\",\"type\":\"uint256\"}],\"name\":\"setLotteryIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumTicketCount\",\"type\":\"uint256\"}],\"name\":\"setMaximumTicketCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTicketCount\",\"type\":\"uint256\"}],\"name\":\"setMinimumTicketCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxPercentage\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feewallet\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setendTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBuying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningTicketNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BlockchainLottery", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://64332d32a53c181159322e128423ff04aa8a502e38c09f97419c314530a6454a"}