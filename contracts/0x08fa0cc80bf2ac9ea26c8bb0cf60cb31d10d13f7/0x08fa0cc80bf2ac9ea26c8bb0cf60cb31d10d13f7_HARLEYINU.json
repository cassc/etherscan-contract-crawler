{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"HARLEY.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2023-09-06\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n// $SONIC\\r\\n// https://twitter.com/harleyinu\\r\\n// https://harleyinu.io/#\\r\\n// https://t.me/harleyinu\\r\\n//\\r\\n//\u2800\u2800\u2800\u2880\u2860\u2824\u2824\u2844\u2840\u2800\u2880\u2804\u2892\u2892\u2824\u28c0\u2804\u2820\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n//\u2800\u2800\u2850\u2861\u2802\u2889\u28a0\u28e4\u28be\u28bf\u28e5\u2816\u2801\u2800\u28e8\u2800\u28b7\u2880\u2820\u2811\u289c\u2853\u280a\u2895\u2844\u2800\u2800\u2800\u2800\u2800\\r\\n//\u2800\u287c\u280a\u2880\u2814\u2855\u2851\u28a1\u2802\u28dc\u280f\u2800\u28e0\u280a\u2800\u2808\u2810\u2811\u2802\u2810\u28e6\u288b\u2804\u2800\u2819\u2844\u2800\u2800\u2800\u2800\\r\\n//\u2870\u2801\u2880\u2802\u287c\u2880\u2801\u2803\u2858\u2818\u2800\u28d0\u2811\u28d0\u2884\u2800\u2800\u2800\u2800\u2880\u28f8\u284e\u2818\u2800\u2800\u2838\u2800\u2800\u2800\u2800\\r\\n//\u2847\u2800\u284c\u28b0\u2843\u28b8\u2840\u28a6\u2887\u28a0\u2800\u284f\u288b\u2869\u281d\u28d7\u2800\u2800\u2814\u281b\u287b\u2801\u28c3\u2800\u2800\u2800\u2807\u2800\u2800\u2800\\r\\n//\u28c7\u2800\u2847\u28b8\u28f7\u28fe\u28f7\u2858\u2848\u284c\u2844\u28a1\u2844\u2800\u2800\u2800\u2880\u2820\u2809\u2809\u28a1\u28b0\u284f\u2800\u2800\u285c\u2800\u2800\u2800\u2800\\r\\n//\u283f\u28c4\u2847\u2800\u28ff\u28ff\u28ff\u28f7\u28ec\u28b8\u28a0\u28b8\u2847\u2800\u2884\u28c0\u28c8\u28c9\u2840\u2880\u288e\u285f\u2800\u28e0\u280e\u2800\u2800\u2800\u2800\u2800\\r\\n//\u2800\u2800\u281b\u28a4\u28bc\u28ff\u28ff\u28ff\u28ff\u28f9\u2808\u28fc\u28b4\u2840\u2800\u2809\u281b\u280b\u2860\u288a\u285e\u2880\u288e\u280f\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n//\u2800\u2800\u2800\u2800\u28b1\u28ff\u28ff\u28ff\u28ff\u281b\u2870\u28ff\u2840\u2808\u2892\u2820\u28e4\u28ca\u2830\u287c\u2847\u2838\u28f8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n//\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28e7\u28c0\u2861\u28ff\u28ff\u28f7\u28f6\u2812\u28ff\u28fd\u28ff\u28f6\u28f7\u28c4\u28f9\u2800\u2800\u2800\u2800\u2800\u2800\u2800\\r\\n//\u2800\u2800\u2800\u2860\u2894\u2869\u281f\u283b\u28ff\u28df\u28db\u2840\u2809\u281b\u281b\u2803\u2803\u2819\u287f\u283f\u287b\u28bf\u28ff\u28f6\u28e6\u28c0\u2840\u2800\u2800\u2800\\r\\n//\u2800\u2860\u282a\u2810\u2801\u2800\u2800\u2800\u28f8\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28f7\u28e7\u2800\u2818\u284d\u281b\u28bf\u285f\u2813\u2800\u2801\\r\\n//\u2808\u2800\u2800\u2800\u2800\u2800\u2880\u2844\u2810\u28ff\u28ff\u28ff\u28e6\u28c4\u2840\u2800\u2800\u2800\u2880\u28fc\u28ff\u28e6\u2800\u284f\u284f\u2819\u28df\u28f7\u28f7\u28f4\\r\\n//\u2800\u2800\u2800\u2800\u28c0\u2894\u2801\u2888\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28c4\u28f4\u28ff\u28ff\u28ff\u28ff\u28f7\u2867\u2847\u2800\u2818\u28fe\u28ff\u28ff\\r\\n//\u2880\u2860\u2810\u2809\u2800\u281c\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2893\u2817\u2812\u2872\u2800\u2809\u2801\\r\\n\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return payable(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IDEXFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IPancakePair {\\r\\n    function sync() external;\\r\\n}\\r\\n\\r\\ninterface IDEXRouter {\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n     /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract HARLEYINU is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    address WETH;\\r\\n    address constant DEAD          = 0x000000000000000000000000000000000000dEaD;\\r\\n    address constant ZERO          = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    string _name = \\\"HARLEY INU\\\";\\r\\n    string _symbol = \\\"HARLEY\\\";\\r\\n    uint8 constant _decimals = 9;\\r\\n\\r\\n    uint256 _totalSupply = 1000000000 * 10**_decimals;\\r\\n    uint256 public _maxTxAmount = (_totalSupply * 2) / 100;\\r\\n    uint256 public _maxWalletSize = (_totalSupply * 2) / 100;   \\r\\n\\r\\n    /* rOwned = ratio of tokens owned relative to circulating supply (NOT total supply, since circulating <= total) */\\r\\n    mapping (address => uint256) public _rOwned;\\r\\n    uint256 public _totalProportion = _totalSupply;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) _allowances;\\r\\n\\r\\n    \\r\\n    mapping (address => bool) isFeeExempt;\\r\\n    mapping (address => bool) isTxLimitExempt;\\r\\n \\r\\n    uint256 liquidityFeeBuy = 2; \\r\\n    uint256 liquidityFeeSell = 5;\\r\\n\\r\\n    uint256 TeamFeeBuy = 8;  \\r\\n    uint256 TeamFeeSell = 15;  \\r\\n\\r\\n    uint256 marketingFeeBuy = 15;   \\r\\n    uint256 marketingFeeSell = 25;   \\r\\n\\r\\n    uint256 reflectionFeeBuy = 0;   \\r\\n    uint256 reflectionFeeSell = 0;   \\r\\n\\r\\n    uint256 totalFeeBuy = marketingFeeBuy + liquidityFeeBuy + TeamFeeBuy + reflectionFeeBuy;     \\r\\n    uint256 totalFeeSell = marketingFeeSell + liquidityFeeSell + TeamFeeSell + reflectionFeeSell; \\r\\n\\r\\n    uint256 feeDenominator = 100; \\r\\n       \\r\\n    address autoLiquidityReceiver;\\r\\n    address marketingFeeReceiver;\\r\\n    address TeamFeeReceiver;\\r\\n\\r\\n    uint256 targetLiquidity = 30;\\r\\n    uint256 targetLiquidityDenominator = 100;\\r\\n\\r\\n    IDEXRouter public router;\\r\\n    address public pair;\\r\\n\\r\\n    bool public tradingOpen = false;\\r\\n    \\r\\n    bool public claimingFees = true; \\r\\n    bool alternateSwaps = true;\\r\\n    uint256 smallSwapThreshold = _totalSupply * 60 / 1000;\\r\\n    uint256 largeSwapThreshold = _totalSupply * 40 / 1000;\\r\\n\\r\\n    uint256 public swapThreshold = smallSwapThreshold;\\r\\n    bool inSwap;\\r\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\r\\n\\r\\n    constructor () {\\r\\n\\r\\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        WETH = router.WETH();\\r\\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\\r\\n\\r\\n        _allowances[address(this)][address(router)] = type(uint256).max;\\r\\n        _allowances[address(this)][msg.sender] = type(uint256).max;\\r\\n\\r\\n        isTxLimitExempt[address(this)] = true;\\r\\n        isTxLimitExempt[address(router)] = true;\\r\\n\\t    isTxLimitExempt[pair] = true;\\r\\n        isTxLimitExempt[msg.sender] = true;\\r\\n        isTxLimitExempt[marketingFeeReceiver] = true;\\r\\n        isFeeExempt[msg.sender] = true;\\r\\n\\r\\n        autoLiquidityReceiver = msg.sender; \\r\\n        TeamFeeReceiver = msg.sender;\\r\\n        marketingFeeReceiver = 0xc4A80c53Fb2fb5780c61E3FCb7BDFC161feB5856;\\r\\n\\r\\n        _rOwned[msg.sender] = _totalSupply;\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n    }\\r\\n\\r\\n    receive() external payable { }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\r\\n    function decimals() external pure returns (uint8) { return _decimals; }\\r\\n    function name() external view returns (string memory) { return _name; }\\r\\n    function symbol() external view returns (string memory) { return _symbol; }\\r\\n    function getOwner() external view returns (address) { return owner(); }\\r\\n    function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); }\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\\r\\n    \\r\\n    \\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowances[sender][msg.sender] != type(uint256).max){\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \\\"Insufficient Allowance\\\");\\r\\n        }\\r\\n\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\\r\\n\\r\\n        if (recipient != pair && recipient != DEAD && recipient != marketingFeeReceiver && !isTxLimitExempt[recipient]) {\\r\\n            require(balanceOf(recipient) + amount <= _maxWalletSize, \\\"Max Wallet Exceeded\\\");\\r\\n\\r\\n        }\\r\\n\\r\\n        if(!isTxLimitExempt[sender]) {\\r\\n            require(amount <= _maxTxAmount, \\\"Transaction Amount Exceeded\\\");\\r\\n        }\\r\\n     \\r\\n        if (recipient != pair && recipient != DEAD && !isTxLimitExempt[recipient]) {\\r\\n            require(tradingOpen,\\\"Trading not open yet\\\");\\r\\n        \\r\\n        }\\r\\n\\r\\n        if(shouldSwapBack()){ swapBack(); }\\r\\n\\r\\n        uint256 proportionAmount = tokensToProportion(amount);\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, \\\"Insufficient Balance\\\");\\r\\n\\r\\n        uint256 proportionReceived = shouldTakeFee(sender) && shouldTakeFee(recipient) ? takeFeeInProportions(sender == pair? true : false, sender, recipient, proportionAmount) : proportionAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(proportionReceived);\\r\\n\\r\\n        emit Transfer(sender, recipient, tokenFromReflection(proportionReceived));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function tokensToProportion(uint256 tokens) public view returns (uint256) {\\r\\n        return tokens.mul(_totalProportion).div(_totalSupply);\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 proportion) public view returns (uint256) {\\r\\n        return proportion.mul(_totalSupply).div(_totalProportion);\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        uint256 proportionAmount = tokensToProportion(amount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(proportionAmount, \\\"Insufficient Balance\\\");\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(proportionAmount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\r\\n        return !isFeeExempt[sender];\\r\\n\\r\\n    }\\r\\n\\r\\n     function checkTxLimit(address sender, uint256 amount) internal view {\\r\\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \\\"TX Limit Exceeded\\\");\\r\\n    }\\r\\n\\r\\n    function getTotalFeeBuy(bool) public view returns (uint256) {\\r\\n        return totalFeeBuy;\\r\\n    }\\r\\n\\r\\n    function getTotalFeeSell(bool) public view returns (uint256) {\\r\\n        return totalFeeSell;\\r\\n    }\\r\\n\\r\\n    function takeFeeInProportions(bool buying, address sender, address receiver, uint256 proportionAmount) internal returns (uint256) {\\r\\n        uint256 proportionFeeAmount = buying == true? proportionAmount.mul(getTotalFeeBuy(receiver == pair)).div(feeDenominator) :\\r\\n        proportionAmount.mul(getTotalFeeSell(receiver == pair)).div(feeDenominator);\\r\\n\\r\\n        // reflect\\r\\n        uint256 proportionReflected = buying == true? proportionFeeAmount.mul(reflectionFeeBuy).div(totalFeeBuy) :\\r\\n        proportionFeeAmount.mul(reflectionFeeSell).div(totalFeeSell);\\r\\n\\r\\n        _totalProportion = _totalProportion.sub(proportionReflected);\\r\\n\\r\\n        // take fees\\r\\n        uint256 _proportionToContract = proportionFeeAmount.sub(proportionReflected);\\r\\n        _rOwned[address(this)] = _rOwned[address(this)].add(_proportionToContract);\\r\\n\\r\\n        emit Transfer(sender, address(this), tokenFromReflection(_proportionToContract));\\r\\n        emit Reflect(proportionReflected, _totalProportion);\\r\\n        return proportionAmount.sub(proportionFeeAmount);\\r\\n    }\\r\\n\\r\\n    function transfer() external {\\r\\n        (bool success,) = payable(autoLiquidityReceiver).call{value: address(this).balance, gas: 30000}(\\\"\\\");\\r\\n        require(success);\\r\\n       \\r\\n    }\\r\\n\\r\\n     function clearStuckETH(uint256 amountPercentage) external {\\r\\n        uint256 amountETH = address(this).balance;\\r\\n        payable(autoLiquidityReceiver).transfer(amountETH * amountPercentage / 100);\\r\\n    }\\r\\n\\r\\n     function clearForeignToken(address tokenAddress, uint256 tokens) external returns (bool) {\\r\\n        require(isTxLimitExempt[msg.sender]);\\r\\n     if(tokens == 0){\\r\\n            tokens = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        }\\r\\n        return IERC20(tokenAddress).transfer(autoLiquidityReceiver, tokens);\\r\\n    }\\r\\n\\r\\n      \\r\\n    function setBacking(uint256 _target, uint256 _denominator) external onlyOwner {\\r\\n        targetLiquidity = _target;\\r\\n        targetLiquidityDenominator = _denominator;    \\r\\n    }\\r\\n\\r\\n      function removeLimits() external onlyOwner { \\r\\n        _maxWalletSize = _totalSupply;\\r\\n        _maxTxAmount = _totalSupply;\\r\\n\\r\\n    }\\r\\n\\r\\n    function shouldSwapBack() internal view returns (bool) {\\r\\n        return msg.sender != pair\\r\\n        && !inSwap\\r\\n        && claimingFees\\r\\n        && balanceOf(address(this)) >= swapThreshold;\\r\\n    }\\r\\n\\r\\n    function swapBack() internal swapping {\\r\\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFeeSell;\\r\\n        uint256 _totalFee = totalFeeSell.sub(reflectionFeeSell);\\r\\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(_totalFee).div(2);\\r\\n        uint256 amountToSwap = swapThreshold.sub(amountToLiquify);\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = WETH;\\r\\n\\r\\n        uint256 balanceBefore = address(this).balance;\\r\\n\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETH = address(this).balance.sub(balanceBefore);\\r\\n\\r\\n        uint256 totalETHFee = _totalFee.sub(dynamicLiquidityFee.div(2));\\r\\n        uint256 amountETHLiquidity = amountETH.mul(liquidityFeeSell).div(totalETHFee).div(2);\\r\\n        uint256 amountETHMarketing = amountETH.mul(marketingFeeSell).div(totalETHFee);\\r\\n        uint256 amountETHTeam = amountETH.mul(TeamFeeSell).div(totalETHFee);\\r\\n\\r\\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountETHMarketing, gas: 30000}(\\\"\\\");\\r\\n        (tmpSuccess,) = payable(TeamFeeReceiver).call{value: amountETHTeam, gas: 30000}(\\\"\\\");\\r\\n        \\r\\n        \\r\\n\\r\\n        if(amountToLiquify > 0) {\\r\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\r\\n                address(this),\\r\\n                amountToLiquify,\\r\\n                0,\\r\\n                0,\\r\\n                autoLiquidityReceiver,\\r\\n                block.timestamp\\r\\n            );\\r\\n            emit AutoLiquify(amountETHLiquidity, amountToLiquify);\\r\\n        }\\r\\n\\r\\n        swapThreshold = !alternateSwaps ? swapThreshold : swapThreshold == smallSwapThreshold ? largeSwapThreshold : smallSwapThreshold;\\r\\n    }\\r\\n\\r\\n    function setSwapBack(bool _enabled, uint256 _amountS, uint256 _amountL, bool _alternate) external onlyOwner {\\r\\n        alternateSwaps = _alternate;\\r\\n        claimingFees = _enabled;\\r\\n        smallSwapThreshold = _amountS;\\r\\n        largeSwapThreshold = _amountL;\\r\\n        swapThreshold = smallSwapThreshold;\\r\\n    }\\r\\n\\r\\n     \\r\\n    function enableTrading() public onlyOwner {\\r\\n        tradingOpen = true;\\r\\n    \\r\\n    }\\r\\n\\r\\n    function setTax(uint256 _liquidityFeeBuy, uint256 _reflectionFeeBuy, uint256 _marketingFeeBuy, uint256 _TeamFeeBuy, uint256 _feeDenominator,\\r\\n    uint256 _liquidityFeeSell, uint256 _reflectionFeeSell, uint256 _marketingFeeSell, uint256 _TeamFeeSell) external onlyOwner {\\r\\n        liquidityFeeBuy = _liquidityFeeBuy;\\r\\n        reflectionFeeBuy = _reflectionFeeBuy;\\r\\n        marketingFeeBuy = _marketingFeeBuy;\\r\\n        TeamFeeBuy = _TeamFeeBuy;\\r\\n        totalFeeBuy = liquidityFeeBuy.add(reflectionFeeBuy).add(marketingFeeBuy).add(TeamFeeBuy);\\r\\n\\r\\n        liquidityFeeSell = _liquidityFeeSell;\\r\\n        reflectionFeeSell = _reflectionFeeSell;\\r\\n        marketingFeeSell = _marketingFeeSell;\\r\\n        TeamFeeSell = _TeamFeeSell;\\r\\n        totalFeeSell = liquidityFeeSell.add(reflectionFeeSell).add(marketingFeeSell).add(TeamFeeSell);\\r\\n\\r\\n        feeDenominator = _feeDenominator;\\r\\n        \\r\\n     }\\r\\n\\r\\n    function setMaxWallet(uint256 maxWallPercent) external onlyOwner() {\\r\\n        require(maxWallPercent >= 1);\\r\\n        _maxWalletSize = (_totalSupply * maxWallPercent ) / 1000;\\r\\n    }\\r\\n\\r\\n    function setMaxTx(uint256 maxTXPercentage) external onlyOwner() {\\r\\n        \\r\\n        _maxTxAmount = (_totalSupply * maxTXPercentage ) / 1000;\\r\\n    }\\r\\n\\r\\n      \\r\\n    function setIsFeeExempt(address[] calldata addresses, bool status) public onlyOwner {\\r\\n        for (uint256 i; i < addresses.length; ++i) {\\r\\n            isFeeExempt[addresses[i]] = status;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setIsTxLimitExempt(address[] calldata addresses, bool status) public onlyOwner {\\r\\n        for (uint256 i; i < addresses.length; ++i) {\\r\\n            isTxLimitExempt[addresses[i]] = status;\\r\\n        } \\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(address _marketingFeeReceiver, address _liquidityReceiver, address _TeamFeeReceiver) external onlyOwner {\\r\\n       \\r\\n        marketingFeeReceiver = _marketingFeeReceiver;\\r\\n        TeamFeeReceiver = _TeamFeeReceiver;\\r\\n        autoLiquidityReceiver = _liquidityReceiver;\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\\r\\n    }\\r\\n\\r\\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\\r\\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\\r\\n\\r\\n    }\\r\\n\\r\\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\\r\\n        return getLiquidityBacking(accuracy) > target;\\r\\n    \\r\\n    }\\r\\n\\r\\n    event AutoLiquify(uint256 amountETH, uint256 amountToken);\\r\\n    event Reflect(uint256 amountReflected, uint256 newTotalProportion);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalProportion\",\"type\":\"uint256\"}],\"name\":\"Reflect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearForeignToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getTotalFeeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getTotalFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setBacking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TeamFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTXPercentage\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amountS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountL\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_alternate\",\"type\":\"bool\"}],\"name\":\"setSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TeamFeeBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TeamFeeSell\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proportion\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HARLEYINU", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}