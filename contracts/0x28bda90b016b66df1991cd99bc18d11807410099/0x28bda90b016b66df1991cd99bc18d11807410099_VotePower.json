{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vote/interfaces/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/vote/interfaces/IMasterChef.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMasterChef {\\n  function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n  function poolLength() external view returns (uint256);\\n  function lpToken(uint256 _pid) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/vote/interfaces/INineInchFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\npragma solidity 0.8.19;\\n\\ninterface INineInchFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function allPairs(uint) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/vote/interfaces/INineInchFlexiblePool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INineInchFlexiblePool {\\n  function userInfo(address _user) external view returns (uint256, uint256, uint256, uint256);\\n  function getPricePerFullShare() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/vote/interfaces/INineInchPair.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INineInchPair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/vote/interfaces/INineInchPool.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INineInchPool {\\n  function userInfo(address _user) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n  function getPricePerFullShare() external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/vote/VotePower.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/INineInchPool.sol\\\";\\nimport \\\"./interfaces/INineInchFlexiblePool.sol\\\";\\nimport \\\"./interfaces/INineInchFactory.sol\\\";\\nimport \\\"./interfaces/IMasterChef.sol\\\";\\nimport \\\"./interfaces/INineInchPair.sol\\\";\\n\\ncontract VotePower is Ownable {\\n    IERC20 public immutable token;\\n    INineInchFactory public immutable factory;\\n    IMasterChef public immutable masterChef;\\n    INineInchPool public immutable vault;\\n    INineInchFlexiblePool public immutable flexibleVault;\\n    uint256 public multiplier = 10;\\n    uint256 public constant MAX_MULTIPLIER = 100;\\n\\n    event AddressUpdated(address _address);\\n    event NewDurationThreshold(uint256 DURATION_THRESHOLD);\\n    event NewDurationBoostFactor(uint256 DURATION_BOOST_FACTOR);\\n\\n    constructor(address _token, address _factory, address _masterChef, address _vault, address _flexibleVault) {\\n        token = IERC20(_token);\\n        factory = INineInchFactory(_factory);\\n        masterChef = IMasterChef(_masterChef);\\n        vault = INineInchPool(_vault);\\n        flexibleVault = INineInchFlexiblePool(_flexibleVault);\\n    }\\n\\n    function setLpMutiplier(uint256 _multiplier) external onlyOwner {\\n        require(_multiplier != 0, \\\"Cannot be zero value\\\");\\n        require(_multiplier < MAX_MULTIPLIER, \\\"Must be less than MAX_MULTIPLIER\\\");\\n        multiplier = _multiplier;\\n    }\\n\\n    function getTokenBalance(address _user) public view returns (uint256) {\\n        return token.balanceOf(_user);\\n    }\\n\\n    function getTokenBalanceFlexible(address _user) public view returns (uint256) {\\n        uint256 balance;\\n        (uint256 share, , , , , , uint256 userBoostedShare, bool locked, ) = vault.userInfo(_user);\\n        uint256 nineinchPoolPricePerFullShare = vault.getPricePerFullShare();\\n        if (!locked && share > 0) {\\n            balance += (share * nineinchPoolPricePerFullShare) / 1e18 - userBoostedShare;\\n        } else if(locked && share > 0) {\\n            (uint256 shareForFlexiblePool, , , ) = flexibleVault.userInfo(_user);\\n            uint256 nineinchFlexiblePoolPricePerFullShare = flexibleVault.getPricePerFullShare();\\n            if (shareForFlexiblePool > 0) {\\n                balance += (shareForFlexiblePool * nineinchFlexiblePoolPricePerFullShare) / 1e18;\\n            }\\n        }\\n        return balance;\\n    }\\n\\n    function getTokenBalanceLocked(address _user) public view returns (uint256) {\\n        ( , , uint256 lastUserActionAmount, , , , , bool locked, ) = vault.userInfo(_user);\\n        return locked ? lastUserActionAmount : 0;\\n    }\\n\\n    function getTokenBalanceInLiquidity(address _user) public view returns (uint256) {\\n        uint256 _length = factory.allPairsLength();\\n        uint256 _total = 0;\\n        for(uint256 _pid = 0; _pid < _length; _pid++) {\\n            address _lp = factory.allPairs(_pid);\\n            INineInchPair _pair = INineInchPair(_lp);\\n            address _token0 = _pair.token0();\\n            address _token1 = _pair.token1();\\n            if(address(token) == _token0 || address(token) == _token1) {\\n                uint256 _balance = INineInchPair(_lp).balanceOf(_user);\\n                if(_balance==0)\\n                    continue;\\n                uint256 _totalSupply = _pair.totalSupply();\\n                (uint256 _reserve0, uint256 _reserve1, ) = _pair.getReserves();\\n                _total += _balance * (address(token) == _token0 ? _reserve0 : _reserve1) / _totalSupply;\\n            }\\n        }\\n        return _total;\\n    }\\n\\n    function getTokenBalanceInFarms(address _user) public view returns (uint256) {\\n        uint256 _length = masterChef.poolLength();\\n        uint256 _total = 0;\\n        for(uint256 _pid = 1; _pid < _length; _pid++) {\\n            address _lp = masterChef.lpToken(_pid);\\n            INineInchPair _pair = INineInchPair(_lp);\\n            address _token0 = _pair.token0();\\n            address _token1 = _pair.token1();\\n            if(address(token) == _token0 || address(token) == _token1) {\\n                (uint256 _staked, ) = masterChef.userInfo(_pid, _user);\\n                if(_staked==0)\\n                    continue;\\n                uint256 _totalSupply = _pair.totalSupply();\\n                (uint256 _reserve0, uint256 _reserve1, ) = _pair.getReserves();\\n                _total += _staked * (address(token) == _token0 ? _reserve0 : _reserve1) / _totalSupply;\\n            }\\n        }\\n        return _total;\\n    }\\n\\n    function getVotingPower(address _user) public view returns (uint256) {\\n        return getVotingPowerWithoutLps(_user) + (getTokenBalanceInLiquidity(_user) + getTokenBalanceInFarms(_user)) * multiplier / MAX_MULTIPLIER;\\n    }\\n\\n    function getVotingPowerWithoutLps(address _user) public view returns (uint256) {\\n        return\\n            getTokenBalance(_user) +\\n            getTokenBalanceLocked(_user) +\\n            getTokenBalanceFlexible(_user);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_flexibleVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DURATION_BOOST_FACTOR\",\"type\":\"uint256\"}],\"name\":\"NewDurationBoostFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"DURATION_THRESHOLD\",\"type\":\"uint256\"}],\"name\":\"NewDurationThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract INineInchFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flexibleVault\",\"outputs\":[{\"internalType\":\"contract INineInchFlexiblePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenBalanceFlexible\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenBalanceInFarms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenBalanceInLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenBalanceLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVotingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getVotingPowerWithoutLps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setLpMutiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract INineInchPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VotePower", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000fd8b9ba4845fb38c779317ec134b298c064937a2000000000000000000000000cbae5c3f8259181eb7e2309bc4c72fdf02dd56d80000000000000000000000003fefd06828689252a69207718985b9a78350561f0000000000000000000000009b2b253d75dc61fc9ae512e04850e258bebef8c60000000000000000000000000e173b11523feb064fd483209d0ed534831a2a86", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}