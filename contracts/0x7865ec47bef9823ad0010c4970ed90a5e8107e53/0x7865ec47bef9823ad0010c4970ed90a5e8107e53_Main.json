{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Main.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport {ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract Main is IERC20Metadata, ERC20, Ownable {\\n\\n    /**\\n     * The contract ensures via the '_update' function that a transaction amount does not exceed `maxTxAmount`.\\n     * For transactions involving addresses not included in `whitelistedAddresses`,\\n     * the function will throw an error if the amount surpasses the `maxTxAmount`.\\n     *\\n     * The value of `maxTxAmount` can be changed using the `maxTxAmountChange` function.\\n     */\\n    uint256 public maxTxAmount;\\n\\n    /**\\n     * This limit is enforced in the '_update' function of the contract: after executing a transaction, a non-whitelisted address\\n     * should still hold a number of tokens not exceeding `maxWalletAmount`. If the limit were to be surpassed as a result\\n     * of the transaction, the function would throw an error, thereby preventing the transaction.\\n     *\\n     * The `maxWalletAmount` value can be updated by calling the `maxWalletChange` function and it applies only to non-whitelisted addresses.\\n     */\\n    uint256 public maxWalletAmount;\\n\\n    /**\\n    * @dev The wallet that receives operation taxes and has the ability to withdraw them.\\n    *\\n    * It is responsible for receiving operation taxes from buy and sell transactions in `operationsTaxBuy` and `operationsTaxSell` respectively.\\n    *\\n    * Furthermore, `operationsWallet` is the recipient of any ETH or tokens accidentally sent to the contract and it can withdraw these\\n    * via the `withdrawETH` and `withdrawTokens` functions respectively.\\n    */\\n    address public operationsWallet;\\n\\n    /**\\n     * Prevent admin to change critical addresses to this address:\\n     */\\n    address public DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    /**\\n     * Determines if transaction fees apply for a specific address.\\n     *\\n     * This mapping stores a boolean value for each address. If the boolean is true,\\n     * the address is exempted from transaction fees, otherwise transaction fees will apply.\\n     *\\n     * Fees can either be for buying or selling operations and are calculated in the '_update' function.\\n     * The exemption status of an address can be changed using the '' method.\\n     */\\n    mapping(address => bool) public hasFee;\\n\\n    /**\\n    * @dev Maintains the whitelist of addresses exempt from transaction limits and fees.\\n    *\\n    * Addresses in this mapping are not bound by `maxTxAmount` and `maxWalletAmount` restrictions and do not incur tax\\n    * from buy/sell transactions.\\n    * They are set at contract initialisation and can be modified using `emergencyTaxRemoval`.\\n    */\\n    mapping(address => bool) public whitelistedAddresses;\\n\\n    /**\\n    * @dev The tax rate applied to buy transactions not involving whitelisted addresses.\\n    *\\n    * This tax, as a percentage, is deducted from buy transactions between non-whitelisted addresses.\\n    * The tax is transferred to the operations wallet, thereby reducing the amount of tokens received on purchase.\\n    */\\n    uint256 public operationsTaxBuy;\\n\\n    /**\\n     * @dev The tax rate applied to sell transactions not involving whitelisted addresses.\\n     *\\n     * This tax, as a percentage, is deducted from sell transactions between non-whitelisted addresses.\\n     * The tax is transferred to the operations wallet, therefore reducing the amount of tokens converted back on selling.\\n     */\\n    uint256 public operationsTaxSell;\\n\\n    /**\\n     * @dev An instance of Uniswap V2 router to execute token swaps and liquidity provision.\\n     *\\n     * This is required for facilitating token swaps on the Uniswap exchange. It's initially set in the constructor\\n     * and is used in the `swapAndLiquify` and `_swapTokensForEth` functions to swap tokens for ETH and add liquidity to the pool.\\n     */\\n    IUniswapV2Router02 public router;\\n\\n    /**\\n     * @dev The address of the Uniswap V2 pair for this contract's token and WETH.\\n     *\\n     * This address represents the Uniswap liquidity pool for this token and Wrapped Ether (WETH).\\n     * It's used during buy and sell operations to check if tokens are being bought from or sold into the pair.\\n     * It's initially set in the constructor and can be updated using the `updatePair` function.\\n     */\\n    address public uniswapV2Pair;\\n\\n    /**\\n    * @dev A flag indicating if a token swap operation is in progress.\\n    *\\n    * This boolean is used to prevent reentrancy in the token swapping process. During a sell operation,\\n    * it's set to true in the '_update' function just before calling 'swapAndLiquify', and reset to false afterward.\\n    */\\n    bool private _progressSwap = false;\\n\\n    /**\\n    * @dev Thrown when a token transfer amount exceeds the maximum transaction amount (`maxTxAmount`).\\n    */\\n    error ERC20TransferExceedsMaxTx(uint256 amount, uint256 maxTxAmount);\\n\\n    /**\\n    * @dev Thrown when a token transfer would cause the receiver's balance to exceed the maximum wallet amount (`maxWalletAmount`).\\n    */\\n    error ERC20TransferExceedsMaxWallet(uint256 amount, uint256 maxWalletAmount);\\n\\n    /**\\n    * @dev Thrown when an operation is attempted by someone other than the owner or the operations wallet.\\n    */\\n    error NotOwnerOrOperations();\\n\\n    /**\\n    * @dev Thrown when a token transfer amount exceeds the maximum transaction amount (`maxTxAmount`) allowed.\\n    */\\n    error ERC20ExceedsMaxTxAmount(uint256 amount, uint256 maxTxAmount);\\n\\n    /**\\n    * @dev Thrown when a specified address is invalid (equivalent to the `DEAD` address or the zero address).\\n    */\\n    error InvalidAddress(address addr);\\n\\n    /**\\n    * @dev Thrown when attempting to set `maxTxAmount` to more than 10% of the total supply.\\n    */\\n    error CannotSetMaxTxAmountToMoreThan10Percent();\\n\\n    /**\\n    * @dev Thrown when attempting to set `maxTxAmount` to less than 0.5% of the total supply.\\n    */\\n    error CannotSetMaxTxAmountToLessThanHalfPercent();\\n\\n    /**\\n    * @dev Thrown when a eth transfer fails.\\n    */\\n    error CallFailed();\\n\\n    /**\\n     * @dev Emitted when the operations wallet change process has been finalized\\n     *\\n     * Event Parameters:\\n     * _newWallet {address} - Holds the address of the new operations wallet after the change process\\n     */\\n    event SetOperationsWallet(address _newWallet);\\n\\n    /**\\n     * @dev Emitted when an address is added or removed from the whitelist\\n     *\\n     * Event Parameters:\\n     * addy {address} - Holds the address that is being whitelisted or removed from the whitelist\\n     * changer {bool} - Holds the new whitelist status of the address. True if whitelisted, false if removed from whitelist\\n     */\\n    event WhitelistAddress(address indexed addy, bool changer);\\n\\n    /**\\n     * @dev Emitted when ETH is withdrawn from the contract\\n     *\\n     * Event Parameters:\\n     * amount {uint256} - Holds the amount of ETH that was withdrawn\\n     */\\n    event WithdrawETH(uint256 amount);\\n\\n    /**\\n     * @dev Emitted when tokens are withdrawn from the contract\\n     *\\n     * Event Parameters:\\n     * token {address} - Holds the address of the token that was withdrawn\\n     * amount {uint256} - Holds the amount of tokens that was withdrawn\\n     */\\n    event WithdrawTokens(address token, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when the maximum transaction amount is changed\\n     *\\n     * Event Parameters:\\n     * from {uint256} - Holds the previous maximum transaction amount\\n     * to {uint256} - Holds the new maximum transaction amount\\n     */\\n    event MaxWalletChange(uint from, uint to);\\n\\n    /**\\n     * @dev Emitted when the maximum wallet amount is changed\\n     *\\n     * Event Parameters:\\n     * from {uint256} - Holds the previous maximum wallet amount\\n     * to {uint256} - Holds the new maximum wallet amount\\n     */\\n    event MaxTxAmountChange(uint from, uint to);\\n\\n    /**\\n    * @dev Emitted when the Uniswap pair is changed\\n    *\\n    * Event Parameters:\\n    * from {address} - Holds the previous Uniswap pair address\\n    * to {address} - Holds the new Uniswap pair address\\n    */\\n    event PoolChanged(address indexed from, address indexed to);\\n\\n    /**\\n     * @dev Emitted when tokens are swapped for ETH\\n     *\\n     * Event Parameters:\\n     * tokensSwapped {uint256} - Holds the amount of tokens that were swapped\\n     * ethReceived {uint256} - Holds the amount of ETH that was received\\n     */\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived\\n    );\\n\\n    /**\\n     * @dev Ensures that the caller is either the contract owner or the operations wallet.\\n     *\\n     * This modifier restricts access to certain functions to only the owner of the contract or the operations\\n     * wallet. It prevents any other account from executing the function the modifier is attached to.\\n     */\\n    modifier onlyOwnerOrOperations() {\\n        if (owner() != _msgSender() && operationsWallet != _msgSender()) {\\n            revert NotOwnerOrOperations();\\n        }\\n        _;\\n    }\\n\\n    /**\\n    * @dev Constructs a new instance of the Main contract.\\n    *\\n    * Sets up the contract with initial supply, treasury, owner, router, operations wallet, tax percentages,\\n    * maximum transaction amount, and maximum wallet amount.\\n    * Also, it creates a new Uniswap pair for the contract's token and WETH and whitelists critical addresses\\n    * including the treasury, the contract owner, the router, and the operations wallet.\\n    *\\n    * @param _symbol The symbol of the token.\\n    * @param _name The name of the token.\\n    * @param _totalSupply The total initial supply of tokens.\\n    * @param _treasure The treasury to hold all supply.\\n    * @param _owner The owner of the contract.\\n    * @param _router The Uniswap router to use for token swaps.\\n    * @param _operationsWalletAddress The operations wallet to receive fees.\\n    * @param _operationsTaxBuyPercentage The tax to be deducted on token buy transactions.\\n    * @param _operationsTaxSellPercentage The tax to be deducted on token sell transactions.\\n    * @param _maxTxAmount The maximum token amount that can be transferred in a single transaction.\\n    * @param _maxWalletAmount The maximum token amount that a non-whitelisted address can hold.\\n    */\\n\\n    constructor(\\n        string memory _symbol,\\n        string memory _name,\\n        uint _totalSupply,\\n        address _treasure,\\n        address _owner,\\n        address _router,\\n        address _operationsWalletAddress,\\n        uint _operationsTaxBuyPercentage,\\n        uint _operationsTaxSellPercentage,\\n        uint _maxTxAmount,\\n        uint _maxWalletAmount\\n    )\\n    ERC20(_name, _symbol)\\n        /// @dev on OZ 5, we need to inform the contract admin:\\n    Ownable(_owner)\\n    {\\n        maxTxAmount = _maxTxAmount;\\n        maxWalletAmount = _maxWalletAmount;\\n        operationsTaxBuy = _operationsTaxBuyPercentage;\\n        operationsTaxSell = _operationsTaxSellPercentage;\\n\\n        router = IUniswapV2Router02(_router);\\n        operationsWallet = _operationsWalletAddress;\\n\\n        /// @dev: full whitelist treasure as it has all supply:\\n        whitelistedAddresses[_treasure] = true;\\n        hasFee[_treasure] = true;\\n\\n        /// @dev whitelist other important addresses:\\n        whitelistedAddresses[owner()] = true;\\n        whitelistedAddresses[operationsWallet] = true;\\n        whitelistedAddresses[address(this)] = true;\\n        whitelistedAddresses[_owner] = true;\\n        whitelistedAddresses[msg.sender] = true; // to be able to add liquidity\\n        hasFee[address(router)] = true;\\n        hasFee[msg.sender] = true;\\n        hasFee[operationsWallet] = true;\\n        hasFee[address(this)] = true;\\n\\n        /// @dev: supply is minted to treasure:\\n\\n        _mint(_treasure, _totalSupply);\\n\\n        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(\\n            address(this),\\n            router.WETH()\\n        );\\n    }\\n\\n    /**\\n    * @dev Overrides the OpenZeppelin `_update` function with added functionality.\\n    *\\n    * Implements additional checks for non-whitelisted addresses - transactions must not exceed `maxTxAmount`\\n    * and a non-whitelisted receiver's balance after the transaction must not exceed `maxWalletAmount`.\\n    * Also, implements tax deductions for transactions made by non-whitelisted addresses - a `operationsTaxBuy`\\n    * for purchases and `operationsTaxSell` for sales. If the transaction amount surpasses these conditions or\\n    * the receiver's balance including the new amount does surpass `maxWalletAmount`, operations involving the Uniswap pair,\\n    * the function throws an error preventing the transaction.\\n    *\\n    * @param from The sender address.\\n    * @param to The recipient address.\\n    * @param amount The amount of tokens to be transferred.\\n    */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n\\n        if (!whitelistedAddresses[from] && !whitelistedAddresses[to]) {\\n            if (to != uniswapV2Pair) {\\n                if (amount > maxTxAmount) {\\n                    revert ERC20TransferExceedsMaxTx(amount, maxTxAmount);\\n                }\\n\\n                if ((amount + balanceOf(to)) > maxWalletAmount) {\\n                    revert ERC20TransferExceedsMaxWallet(\\n                        amount,\\n                        maxWalletAmount\\n                    );\\n                }\\n            }\\n        }\\n\\n        uint256 transferAmount = amount;\\n        if (!hasFee[from] && !hasFee[to]) {\\n            if ((from == uniswapV2Pair || to == uniswapV2Pair)) {\\n\\n                if (amount > maxTxAmount) {\\n                    revert ERC20ExceedsMaxTxAmount(amount, maxTxAmount);\\n                }\\n                // Buy\\n                if (\\n                    operationsTaxBuy > 0 &&\\n                    uniswapV2Pair == from &&\\n                    !whitelistedAddresses[to] &&\\n                    from != address(this)\\n                ) {\\n                    uint256 feeTokens = (amount * operationsTaxBuy) / 100;\\n                    super._transfer(from, address(this), feeTokens);\\n                    transferAmount = amount - feeTokens;\\n                }\\n\\n                // Sell\\n                if (\\n                    uniswapV2Pair == to &&\\n                    !whitelistedAddresses[from] &&\\n                    to != address(this) &&\\n                    !_progressSwap\\n                ) {\\n                    uint256 taxSell = operationsTaxSell;\\n                    _progressSwap = true;\\n                    swapAndLiquify();\\n                    _progressSwap = false;\\n\\n                    uint256 feeTokens = (amount * taxSell) / 100;\\n                    super._transfer(from, address(this), feeTokens);\\n                    transferAmount = amount - feeTokens;\\n                }\\n            }\\n        }\\n        super._update(from, to, transferAmount);\\n    }\\n\\n    /**\\n     * @dev Swaps tokens stored in the contract to ether (ETH)\\n     *\\n     * This function is used to convert tokens in the contract (collected as fees)\\n     * to ETH. It is called during a sell operation when the `_progressSwap` flag\\n     * is true, indicating that a token swap operation is in progress.\\n     *\\n     * If the balance of tokens in the contract is greater than 0, the function\\n     * calls `_swapTokensForEth` function passing the total token balance of the contract.\\n     */\\n    function swapAndLiquify() internal {\\n        if (balanceOf(address(this)) == 0) {\\n            return;\\n        }\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        if (contractTokenBalance > 0) {\\n            _swapTokensForEth(contractTokenBalance, 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Swaps a specified amount of tokens for ETH.\\n     * \\n     * This function is an intermediary called by `swapAndLiquify` when the contract's balance is not empty.\\n     * It uses the Uniswap router to perform the swap, trading the contract's tokens for ETH. \\n     * The function sets the necessary approvals for the router, formulates the swap path from the contract's token to WETH,\\n     * and then initiates the swap with Uniswap. The ETH is then held by the contract and can be withdrawn by the operations wallet.\\n     *\\n     * @param tokenAmount The amount of tokens to be swapped.\\n     * @param tokenAmountOut Expected minimum amount of ETH to receive from swap.\\n     */\\n    function _swapTokensForEth(\\n        uint256 tokenAmount,\\n        uint256 tokenAmountOut\\n    ) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        IERC20(address(this)).approve(address(router), type(uint256).max);\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            tokenAmountOut,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        emit SwapAndLiquify(tokenAmount, address(this).balance);\\n\\n    }\\n\\n    /**\\n     * @dev Updates the contract's Uniswap pair\\n     *\\n     * This function allows the contract owner or the operations wallet to update\\n     * the contract's Uniswap pair. This can be useful to change the liquidity pool in which the token is trading.\\n     *\\n     * To prevent misuse, it verifies the new pair address is non-zero and not equivalent to the DEAD address.\\n     * Reverts with 'InvalidAddress' error if the address is invalid.\\n     *\\n     * @param _pair The address of the new Uniswap pair.\\n     */\\n    function updatePair(address _pair) external onlyOwnerOrOperations {\\n        if (_pair == DEAD || _pair == address(0)) {\\n            revert InvalidAddress(_pair);\\n        }\\n        if( _pair.code.length == 0 ) {\\n            revert InvalidAddress(_pair);\\n        }\\n\\n        IUniswapV2Pair pair = IUniswapV2Pair(_pair);\\n        // @dev: check if the pair is valid:\\n        address token0 = pair.token0();\\n        address token1 = pair.token1();\\n        if (token0 != address(this) && token1 != address(this)) {\\n            revert InvalidAddress(_pair);\\n        }\\n\\n        emit PoolChanged(uniswapV2Pair, _pair);\\n\\n        uniswapV2Pair = _pair;\\n    }\\n\\n    /**\\n    * @dev Updates the operations wallet address\\n    *\\n    * This function allows the contract owner or the operations wallet to update\\n    * the operations wallet address. This can be useful to change the wallet that receives\\n    * the operations tax.\\n    *\\n    * To prevent misuse, it verifies the new wallet address is non-zero and not equivalent to the DEAD address.\\n    * Reverts with 'InvalidAddress' error if the address is invalid.\\n    *\\n    * @param _newWallet The address of the new operations wallet.\\n    */\\n    function setOperationsWallet( address _newWallet ) external onlyOwnerOrOperations {\\n\\n        // @dev: set new wallet:\\n        operationsWallet = _newWallet;\\n\\n        // @dev: add new wallet to whitelist:\\n        whitelistedAddresses[operationsWallet] = true;\\n        hasFee[operationsWallet] = true;\\n\\n        emit SetOperationsWallet(_newWallet);\\n    }\\n\\n    /**\\n    * @dev Calculates the upper limit for the number of tokens that can be transferred\\n    * in a single transaction.\\n    *\\n    * The upper limit is defined as 10% of the total token supply. The value can be used\\n    * as an argument to set the `maxTxAmount` and `maxWalletAmount` in the contract.\\n    *\\n    * @return {uint256} - Returns the upper limit value for the maximum transaction amount.\\n    */\\n    function getUpperTxValue() public view returns (uint256) {\\n        return (totalSupply() * 10) / 100;\\n    }\\n\\n    /**\\n    * @dev Calculates the lower limit for the number of tokens that can be transferred\\n    * in a single transaction.\\n    *\\n    * The lower limit is defined as 0.5% of the total token supply. The value can be used\\n    * as an argument to verify the `maxTxAmount` and `maxWalletAmount` in the contract.\\n    *\\n    * @return {uint256} - Returns the lower limit value for the maximum transaction amount.\\n    */\\n    function getLowerTxValue() public view returns (uint256) {\\n        return (totalSupply() * 1) / 200;\\n    }\\n\\n    /**\\n     * @dev Updates the maximum number of tokens that can be transferred in a single transaction (`maxTxAmount`).\\n     *\\n     * This function is accessible only to the contract owner. It allows the modification of `maxTxAmount`,\\n     * thereby changing the upper limit for the number of tokens that can be transferred in a single transaction\\n     * by non-whitelisted addresses. The new `maxTxAmount` needs to be within the range of 0.5% to 10%\\n     * of the total token supply. If out of this range, the function will revert.\\n     *\\n     * @param _maxTxAmount {uint256} - The new maximum number of tokens that can be transferred in a single transaction.\\n     */\\n    function maxTxAmountChange(\\n        uint256 _maxTxAmount\\n    ) external onlyOwner {\\n\\n        if (_maxTxAmount > getUpperTxValue() ) {\\n            revert CannotSetMaxTxAmountToMoreThan10Percent();\\n        }\\n\\n        if (_maxTxAmount < getLowerTxValue() ) {\\n            revert CannotSetMaxTxAmountToLessThanHalfPercent();\\n        }\\n\\n        emit MaxTxAmountChange(maxTxAmount, _maxTxAmount);\\n\\n        maxTxAmount = _maxTxAmount;\\n\\n    }\\n\\n    /**\\n     * @dev Updates the maximum number of tokens that a non-whitelisted address can hold (`maxWalletAmount`).\\n     *\\n     * This function is accessible only to the contract owner. It allows the modification of `maxWalletAmount`,\\n     * thereby changing the upper limit for the number of tokens that a non-whitelisted address can hold.\\n     * The new `maxWalletAmount` needs to be within the range of 0.5% to 10% of the total token supply.\\n     * If out of this range, the function will revert.\\n     *\\n     * @param _maxWalletAmount {uint256} - The new maximum number of tokens that any non-whitelisted address can hold.\\n     */\\n    function maxWalletChange(\\n        uint256 _maxWalletAmount\\n    ) external onlyOwner {\\n\\n        if (_maxWalletAmount > getUpperTxValue() ) {\\n            revert CannotSetMaxTxAmountToMoreThan10Percent();\\n        }\\n\\n        if (_maxWalletAmount < getLowerTxValue() ) {\\n            revert CannotSetMaxTxAmountToLessThanHalfPercent();\\n        }\\n\\n        emit MaxWalletChange(maxWalletAmount, _maxWalletAmount);\\n\\n        maxWalletAmount = _maxWalletAmount;\\n    }\\n\\n    /**\\n    * @dev Transfers any ERC20 tokens sent by mistake to this contract, to the operations wallet.\\n    *\\n    * This function is accessible only to the contract owner or the operations wallet.\\n    * It allows the recovery of ERC20 tokens sent by mistake to this contract.\\n    *\\n    * @param token {address} - The contract address of the ER20 token to be withdrawn.\\n    */\\n    function withdrawTokens(address token) external onlyOwnerOrOperations {\\n        uint amount = IERC20(token).balanceOf(address(this));\\n        IERC20(token).transfer(operationsWallet, amount);\\n        emit WithdrawTokens(token, amount);\\n    }\\n\\n    /**\\n    * @dev Transfers any ether sent by mistake to this contract or collected, to the operations wallet.\\n    *\\n    * This function is accessible only to the contract owner or the operations wallet.\\n    * It allows the recovery of ether sent by mistake to this contract or collect any fee accumulated in the contract.\\n    */\\n    function withdrawETH() external onlyOwnerOrOperations {\\n        uint amount = address(this).balance;\\n        (bool success,) = address(operationsWallet).call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert CallFailed();\\n        }\\n        emit WithdrawETH(amount);\\n    }\\n\\n    /**\\n    * @dev Modifies the whitelist status of an address for transactions limits and fees exemption.\\n    *\\n    * This function is accessible only to the contract owner or the operations wallet. It allows the modification of\\n    * the `whitelistedAddresses` mapping for a specific address which determines whether transactions involving\\n    * that address are exempt from the `maxTxAmount` and `maxWalletAmount` restrictions and transaction fees.\\n    *\\n    * @param addy {address} - The address whose whitelist status is to be modified.\\n    * @param changer {bool} - The new whitelist status. If true, the address will be whitelisted, otherwise, it will lose its whitelist status.\\n    */\\n\\n    function emergencyTaxRemoval(\\n        address addy,\\n        bool changer\\n    ) external onlyOwnerOrOperations {\\n        whitelistedAddresses[addy] = changer;\\n        emit WhitelistAddress(addy, changer);\\n    }\\n\\n    /**\\n    * @dev callback to receive ethers from uniswapV2Router when swaping\\n    */\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operationsWalletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_operationsTaxBuyPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_operationsTaxSellPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxWalletAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetMaxTxAmountToLessThanHalfPercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSetMaxTxAmountToMoreThan10Percent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceedsMaxTxAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TransferExceedsMaxTx\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"ERC20TransferExceedsMaxWallet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrOperations\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"MaxWalletChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"SetOperationsWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"changer\",\"type\":\"bool\"}],\"name\":\"WhitelistAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"changer\",\"type\":\"bool\"}],\"name\":\"emergencyTaxRemoval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLowerTxValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUpperTxValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"maxTxAmountChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWalletAmount\",\"type\":\"uint256\"}],\"name\":\"maxWalletChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsTaxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsTaxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationsWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setOperationsWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"updatePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Main", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000a3f614eb0b44f6203695ba246d4ac2b0a9ec6140000000000000000000000000a3f614eb0b44f6203695ba246d4ac2b0a9ec6140000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000000a3f614eb0b44f6203695ba246d4ac2b0a9ec61400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000002a5a058fc295ed000000000000000000000000000000000000000000000000002a5a058fc295ed00000000000000000000000000000000000000000000000000000000000000000000044e41414900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e656f4175646974204149000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}