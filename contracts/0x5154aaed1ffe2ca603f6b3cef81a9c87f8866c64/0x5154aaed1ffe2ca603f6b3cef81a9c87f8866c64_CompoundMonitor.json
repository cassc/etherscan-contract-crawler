{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public owner;\r\n    address public admin;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(admin == msg.sender);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = 0xBc841B0dE0b93205e912CFBBd1D0c160A1ec6F00;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\r\n    /// @param _admin Address of multisig that becomes admin\r\n    function setAdminByOwner(address _admin) public {\r\n        require(msg.sender == owner);\r\n        require(admin == address(0));\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function setAdminByAdmin(address _admin) public {\r\n        require(msg.sender == admin);\r\n\r\n        admin = _admin;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function setOwnerByAdmin(address _owner) public {\r\n        require(msg.sender == admin);\r\n\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(owner).transfer(_amount);\r\n        } else {\r\n            ERC20(_token).safeTransfer(owner, _amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract BotRegistry is AdminAuth {\r\n\r\n    mapping (address => bool) public botList;\r\n\r\n    constructor() public {\r\n        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\r\n\r\n        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\r\n        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\r\n        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\r\n        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\r\n    }\r\n\r\n    function setBot(address _botAddr, bool _state) public onlyOwner {\r\n        botList[_botAddr] = _state;\r\n    }\r\n\r\n}\r\n\r\nabstract contract DSProxyInterface {\r\n\r\n    /// Truffle wont compile if this isn't commented\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public virtual\r\n    //     payable\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public virtual payable returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public virtual payable returns (bool);\r\n\r\n    function owner() public virtual returns (address);\r\n}\r\n\r\n/// @title Contract with the actuall DSProxy permission calls the automation operations\r\ncontract CompoundMonitorProxy is AdminAuth {\r\n\r\n    using SafeERC20 for ERC20;\r\n\r\n    uint public CHANGE_PERIOD;\r\n    address public monitor;\r\n    address public newMonitor;\r\n    address public lastMonitor;\r\n    uint public changeRequestedTimestamp;\r\n\r\n    mapping(address => bool) public allowed;\r\n\r\n    event MonitorChangeInitiated(address oldMonitor, address newMonitor);\r\n    event MonitorChangeCanceled();\r\n    event MonitorChangeFinished(address monitor);\r\n    event MonitorChangeReverted(address monitor);\r\n\r\n    // if someone who is allowed become malicious, owner can't be changed\r\n    modifier onlyAllowed() {\r\n        require(allowed[msg.sender] || msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyMonitor() {\r\n        require (msg.sender == monitor);\r\n        _;\r\n    }\r\n\r\n    constructor(uint _changePeriod) public {\r\n        CHANGE_PERIOD = _changePeriod * 1 days;\r\n    }\r\n\r\n    /// @notice Only monitor contract is able to call execute on users proxy\r\n    /// @param _owner Address of cdp owner (users DSProxy address)\r\n    /// @param _compoundSaverProxy Address of CompoundSaverProxy\r\n    /// @param _data Data to send to CompoundSaverProxy\r\n    function callExecute(address _owner, address _compoundSaverProxy, bytes memory _data) public payable onlyMonitor {\r\n        // execute reverts if calling specific method fails\r\n        DSProxyInterface(_owner).execute{value: msg.value}(_compoundSaverProxy, _data);\r\n\r\n        // return if anything left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /// @notice Allowed users are able to set Monitor contract without any waiting period first time\r\n    /// @param _monitor Address of Monitor contract\r\n    function setMonitor(address _monitor) public onlyAllowed {\r\n        require(monitor == address(0));\r\n        monitor = _monitor;\r\n    }\r\n\r\n    /// @notice Allowed users are able to start procedure for changing monitor\r\n    /// @dev after CHANGE_PERIOD needs to call confirmNewMonitor to actually make a change\r\n    /// @param _newMonitor address of new monitor\r\n    function changeMonitor(address _newMonitor) public onlyAllowed {\r\n        require(changeRequestedTimestamp == 0);\r\n\r\n        changeRequestedTimestamp = now;\r\n        lastMonitor = monitor;\r\n        newMonitor = _newMonitor;\r\n\r\n        emit MonitorChangeInitiated(lastMonitor, newMonitor);\r\n    }\r\n\r\n    /// @notice At any point allowed users are able to cancel monitor change\r\n    function cancelMonitorChange() public onlyAllowed {\r\n        require(changeRequestedTimestamp > 0);\r\n\r\n        changeRequestedTimestamp = 0;\r\n        newMonitor = address(0);\r\n\r\n        emit MonitorChangeCanceled();\r\n    }\r\n\r\n    /// @notice Anyone is able to confirm new monitor after CHANGE_PERIOD if process is started\r\n    function confirmNewMonitor() public onlyAllowed {\r\n        require((changeRequestedTimestamp + CHANGE_PERIOD) < now);\r\n        require(changeRequestedTimestamp != 0);\r\n        require(newMonitor != address(0));\r\n\r\n        monitor = newMonitor;\r\n        newMonitor = address(0);\r\n        changeRequestedTimestamp = 0;\r\n\r\n        emit MonitorChangeFinished(monitor);\r\n    }\r\n\r\n    /// @notice Its possible to revert monitor to last used monitor\r\n    function revertMonitor() public onlyAllowed {\r\n        require(lastMonitor != address(0));\r\n\r\n        monitor = lastMonitor;\r\n\r\n        emit MonitorChangeReverted(monitor);\r\n    }\r\n\r\n\r\n    /// @notice Allowed users are able to add new allowed user\r\n    /// @param _user Address of user that will be allowed\r\n    function addAllowed(address _user) public onlyAllowed {\r\n        allowed[_user] = true;\r\n    }\r\n\r\n    /// @notice Allowed users are able to remove allowed user\r\n    /// @dev owner is always allowed even if someone tries to remove it from allowed mapping\r\n    /// @param _user Address of allowed user\r\n    function removeAllowed(address _user) public onlyAllowed {\r\n        allowed[_user] = false;\r\n    }\r\n\r\n    function setChangePeriod(uint _periodInDays) public onlyAllowed {\r\n        require(_periodInDays * 1 days > CHANGE_PERIOD);\r\n\r\n        CHANGE_PERIOD = _periodInDays * 1 days;\r\n    }\r\n\r\n    /// @notice In case something is left in contract, owner is able to withdraw it\r\n    /// @param _token address of token to withdraw balance\r\n    function withdrawToken(address _token) public onlyOwner {\r\n        uint balance = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).safeTransfer(msg.sender, balance);\r\n    }\r\n\r\n    /// @notice In case something is left in contract, owner is able to withdraw it\r\n    function withdrawEth() public onlyOwner {\r\n        uint balance = address(this).balance;\r\n        msg.sender.transfer(balance);\r\n    }\r\n}\r\n\r\n/// @title Stores subscription information for Compound automatization\r\ncontract CompoundSubscriptions is AdminAuth {\r\n\r\n    struct CompoundHolder {\r\n        address user;\r\n        uint128 minRatio;\r\n        uint128 maxRatio;\r\n        uint128 optimalRatioBoost;\r\n        uint128 optimalRatioRepay;\r\n        bool boostEnabled;\r\n    }\r\n\r\n    struct SubPosition {\r\n        uint arrPos;\r\n        bool subscribed;\r\n    }\r\n\r\n    CompoundHolder[] public subscribers;\r\n    mapping (address => SubPosition) public subscribersPos;\r\n\r\n    uint public changeIndex;\r\n\r\n    event Subscribed(address indexed user);\r\n    event Unsubscribed(address indexed user);\r\n    event Updated(address indexed user);\r\n    event ParamUpdates(address indexed user, uint128, uint128, uint128, uint128, bool);\r\n\r\n    /// @dev Called by the DSProxy contract which owns the Compound position\r\n    /// @notice Adds the users Compound poistion in the list of subscriptions so it can be monitored\r\n    /// @param _minRatio Minimum ratio below which repay is triggered\r\n    /// @param _maxRatio Maximum ratio after which boost is triggered\r\n    /// @param _optimalBoost Ratio amount which boost should target\r\n    /// @param _optimalRepay Ratio amount which repay should target\r\n    /// @param _boostEnabled Boolean determing if boost is enabled\r\n    function subscribe(uint128 _minRatio, uint128 _maxRatio, uint128 _optimalBoost, uint128 _optimalRepay, bool _boostEnabled) external {\r\n\r\n        // if boost is not enabled, set max ratio to max uint\r\n        uint128 localMaxRatio = _boostEnabled ? _maxRatio : uint128(-1);\r\n        require(checkParams(_minRatio, localMaxRatio), \"Must be correct params\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[msg.sender];\r\n\r\n        CompoundHolder memory subscription = CompoundHolder({\r\n                minRatio: _minRatio,\r\n                maxRatio: localMaxRatio,\r\n                optimalRatioBoost: _optimalBoost,\r\n                optimalRatioRepay: _optimalRepay,\r\n                user: msg.sender,\r\n                boostEnabled: _boostEnabled\r\n            });\r\n\r\n        changeIndex++;\r\n\r\n        if (subInfo.subscribed) {\r\n            subscribers[subInfo.arrPos] = subscription;\r\n\r\n            emit Updated(msg.sender);\r\n            emit ParamUpdates(msg.sender, _minRatio, localMaxRatio, _optimalBoost, _optimalRepay, _boostEnabled);\r\n        } else {\r\n            subscribers.push(subscription);\r\n\r\n            subInfo.arrPos = subscribers.length - 1;\r\n            subInfo.subscribed = true;\r\n\r\n            emit Subscribed(msg.sender);\r\n        }\r\n    }\r\n\r\n    /// @notice Called by the users DSProxy\r\n    /// @dev Owner who subscribed cancels his subscription\r\n    function unsubscribe() external {\r\n        _unsubscribe(msg.sender);\r\n    }\r\n\r\n    /// @dev Checks limit if minRatio is bigger than max\r\n    /// @param _minRatio Minimum ratio, bellow which repay can be triggered\r\n    /// @param _maxRatio Maximum ratio, over which boost can be triggered\r\n    /// @return Returns bool if the params are correct\r\n    function checkParams(uint128 _minRatio, uint128 _maxRatio) internal pure returns (bool) {\r\n\r\n        if (_minRatio > _maxRatio) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @dev Internal method to remove a subscriber from the list\r\n    /// @param _user The actual address that owns the Compound position\r\n    function _unsubscribe(address _user) internal {\r\n        require(subscribers.length > 0, \"Must have subscribers in the list\");\r\n\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        require(subInfo.subscribed, \"Must first be subscribed\");\r\n\r\n        address lastOwner = subscribers[subscribers.length - 1].user;\r\n\r\n        SubPosition storage subInfo2 = subscribersPos[lastOwner];\r\n        subInfo2.arrPos = subInfo.arrPos;\r\n\r\n        subscribers[subInfo.arrPos] = subscribers[subscribers.length - 1];\r\n        subscribers.pop(); // remove last element and reduce arr length\r\n\r\n        changeIndex++;\r\n        subInfo.subscribed = false;\r\n        subInfo.arrPos = 0;\r\n\r\n        emit Unsubscribed(msg.sender);\r\n    }\r\n\r\n    /// @dev Checks if the user is subscribed\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @return If the user is subscribed\r\n    function isSubscribed(address _user) public view returns (bool) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subInfo.subscribed;\r\n    }\r\n\r\n    /// @dev Returns subscribtion information about a user\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @return Subscription information about the user if exists\r\n    function getHolder(address _user) public view returns (CompoundHolder memory) {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        return subscribers[subInfo.arrPos];\r\n    }\r\n\r\n    /// @notice Helper method to return all the subscribed CDPs\r\n    /// @return List of all subscribers\r\n    function getSubscribers() public view returns (CompoundHolder[] memory) {\r\n        return subscribers;\r\n    }\r\n\r\n    /// @notice Helper method for the frontend, returns all the subscribed CDPs paginated\r\n    /// @param _page What page of subscribers you want\r\n    /// @param _perPage Number of entries per page\r\n    /// @return List of all subscribers for that page\r\n    function getSubscribersByPage(uint _page, uint _perPage) public view returns (CompoundHolder[] memory) {\r\n        CompoundHolder[] memory holders = new CompoundHolder[](_perPage);\r\n\r\n        uint start = _page * _perPage;\r\n        uint end = start + _perPage;\r\n\r\n        end = (end > holders.length) ? holders.length : end;\r\n\r\n        uint count = 0;\r\n        for (uint i = start; i < end; i++) {\r\n            holders[count] = subscribers[i];\r\n            count++;\r\n        }\r\n\r\n        return holders;\r\n    }\r\n\r\n    ////////////// ADMIN METHODS ///////////////////\r\n\r\n    /// @notice Admin function to unsubscribe a CDP\r\n    /// @param _user The actual address that owns the Compound position\r\n    function unsubscribeByAdmin(address _user) public onlyOwner {\r\n        SubPosition storage subInfo = subscribersPos[_user];\r\n\r\n        if (subInfo.subscribed) {\r\n            _unsubscribe(_user);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\r\n        public\r\n    {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}\r\n\r\ninterface ICompSubProxy {\r\n    struct CompSubData {\r\n        uint128 minRatio;\r\n        uint128 maxRatio;\r\n        uint128 targetRatioBoost;\r\n        uint128 targetRatioRepay;\r\n        bool boostEnabled;\r\n    }\r\n\r\n    function subToCompAutomation(\r\n        CompSubData calldata _subData\r\n    ) external;\r\n}\r\n\r\nabstract contract CompoundOracleInterface {\r\n    function getUnderlyingPrice(address cToken) external view virtual returns (uint);\r\n}\r\n\r\nabstract contract ComptrollerInterface {\r\n    struct CompMarketState {\r\n        uint224 index;\r\n        uint32 block;\r\n    }\r\n\r\n    function claimComp(address holder) public virtual;\r\n    function claimComp(address holder, address[] memory cTokens) public virtual;\r\n    function claimComp(address[] memory holders, address[] memory cTokens, bool borrowers, bool suppliers) public virtual;\r\n\r\n    function compSupplyState(address) public view virtual returns (CompMarketState memory);\r\n    function compSupplierIndex(address,address) public view virtual returns (uint);\r\n    function compAccrued(address) public view virtual returns (uint);\r\n\r\n    function compBorrowState(address) public view virtual returns (CompMarketState memory);\r\n    function compBorrowerIndex(address,address) public view virtual returns (uint);\r\n\r\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external virtual returns (uint256);\r\n\r\n    function getAssetsIn(address account) external virtual view returns (address[] memory);\r\n\r\n    function markets(address account) public virtual view returns (bool, uint256);\r\n\r\n    function getAccountLiquidity(address account) external virtual view returns (uint256, uint256, uint256);\r\n\r\n    function oracle() public virtual view returns (address);\r\n\r\n    mapping(address => uint) public compSpeeds;\r\n\r\n    mapping(address => uint) public borrowCaps;\r\n}\r\n\r\nabstract contract CTokenInterface is ERC20 {\r\n    function mint(uint256 mintAmount) external virtual returns (uint256);\r\n\r\n    // function mint() external virtual payable;\r\n\r\n    function accrueInterest() public virtual returns (uint);\r\n\r\n    function redeem(uint256 redeemTokens) external virtual returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external virtual returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external virtual returns (uint256);\r\n    function borrowIndex() public view virtual returns (uint);\r\n    function borrowBalanceStored(address) public view virtual returns(uint);\r\n\r\n    function repayBorrow(uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrow() external virtual payable;\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external virtual returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower) external virtual payable;\r\n\r\n    function liquidateBorrow(address borrower, uint256 repayAmount, address cTokenCollateral)\r\n        external virtual\r\n        returns (uint256);\r\n\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external virtual payable;\r\n\r\n    function exchangeRateCurrent() external virtual returns (uint256);\r\n\r\n    function supplyRatePerBlock() external virtual returns (uint256);\r\n\r\n    function borrowRatePerBlock() external virtual returns (uint256);\r\n\r\n    function totalReserves() external virtual returns (uint256);\r\n\r\n    function reserveFactorMantissa() external virtual returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external virtual returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external virtual returns (uint256);\r\n\r\n    function getCash() external virtual returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external virtual returns (uint256);\r\n\r\n    function underlying() external virtual returns (address);\r\n\r\n    function getAccountSnapshot(address account) external virtual view returns (uint, uint, uint, uint);\r\n}\r\n\r\ncontract CarefulMath {\r\n\r\n    /**\r\n     * @dev Possible error codes that we can return\r\n     */\r\n    enum MathError {\r\n        NO_ERROR,\r\n        DIVISION_BY_ZERO,\r\n        INTEGER_OVERFLOW,\r\n        INTEGER_UNDERFLOW\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, returns an error on overflow.\r\n    */\r\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (a == 0) {\r\n            return (MathError.NO_ERROR, 0);\r\n        }\r\n\r\n        uint c = a * b;\r\n\r\n        if (c / a != b) {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        } else {\r\n            return (MathError.NO_ERROR, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b == 0) {\r\n            return (MathError.DIVISION_BY_ZERO, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, a / b);\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        if (b <= a) {\r\n            return (MathError.NO_ERROR, a - b);\r\n        } else {\r\n            return (MathError.INTEGER_UNDERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, returns an error on overflow.\r\n    */\r\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\r\n        uint c = a + b;\r\n\r\n        if (c >= a) {\r\n            return (MathError.NO_ERROR, c);\r\n        } else {\r\n            return (MathError.INTEGER_OVERFLOW, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev add a and b and then subtract c\r\n    */\r\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\r\n        (MathError err0, uint sum) = addUInt(a, b);\r\n\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, 0);\r\n        }\r\n\r\n        return subUInt(sum, c);\r\n    }\r\n}\r\n\r\ncontract Exponential is CarefulMath {\r\n    uint constant expScale = 1e18;\r\n    uint constant doubleScale = 1e36;\r\n    uint constant halfExpScale = expScale/2;\r\n    uint constant mantissaOne = expScale;\r\n\r\n    struct Exp {\r\n        uint mantissa;\r\n    }\r\n\r\n    struct Double {\r\n        uint mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates an exponential from numerator and denominator values.\r\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\r\n     *            or if `denom` is zero.\r\n     */\r\n    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: rational}));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two exponentials, returning a new exponential.\r\n     */\r\n    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two exponentials, returning a new exponential.\r\n     */\r\n    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\r\n\r\n        return (error, Exp({mantissa: result}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\r\n     */\r\n    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(product));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\r\n     */\r\n    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory product) = mulScalar(a, scalar);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return addUInt(truncate(product), addend);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide an Exp by a scalar, returning a new Exp.\r\n     */\r\n    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\r\n        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, returning a new Exp.\r\n     */\r\n    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\r\n        /*\r\n          We are doing this as:\r\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\r\n\r\n          How it works:\r\n          Exp = a / b;\r\n          Scalar = s;\r\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\r\n        */\r\n        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n        return getExp(numerator, divisor.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\r\n     */\r\n    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\r\n        (MathError err, Exp memory fraction) = divScalarByExp(scalar, divisor);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, 0);\r\n        }\r\n\r\n        return (MathError.NO_ERROR, truncate(fraction));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials, returning a new exponential.\r\n     */\r\n    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n\r\n        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\r\n        if (err0 != MathError.NO_ERROR) {\r\n            return (err0, Exp({mantissa: 0}));\r\n        }\r\n\r\n        // We add half the scale before dividing so that we get rounding instead of truncation.\r\n        //  See \"Listing 6\" and text above it at https://accu.org/index.php/journals/1717\r\n        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\r\n        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\r\n        if (err1 != MathError.NO_ERROR) {\r\n            return (err1, Exp({mantissa: 0}));\r\n        }\r\n\r\n        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\r\n        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\r\n        assert(err2 == MathError.NO_ERROR);\r\n\r\n        return (MathError.NO_ERROR, Exp({mantissa: product}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\r\n     */\r\n    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\r\n        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies three exponentials, returning a new exponential.\r\n     */\r\n    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\r\n        (MathError err, Exp memory ab) = mulExp(a, b);\r\n        if (err != MathError.NO_ERROR) {\r\n            return (err, ab);\r\n        }\r\n        return mulExp(ab, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two exponentials, returning a new exponential.\r\n     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\r\n     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\r\n     */\r\n    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\r\n        return getExp(a.mantissa, b.mantissa);\r\n    }\r\n\r\n    /**\r\n     * @dev Truncates the given exp to a whole number value.\r\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\r\n     */\r\n    function truncate(Exp memory exp) pure internal returns (uint) {\r\n        // Note: We are not using careful math here as we're performing a division that cannot fail\r\n        return exp.mantissa / expScale;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if first Exp is less than second Exp.\r\n     */\r\n    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa < right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp <= right Exp.\r\n     */\r\n    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa <= right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if left Exp > right Exp.\r\n     */\r\n    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\r\n        return left.mantissa > right.mantissa;\r\n    }\r\n\r\n    /**\r\n     * @dev returns true if Exp is exactly zero\r\n     */\r\n    function isZeroExp(Exp memory value) pure internal returns (bool) {\r\n        return value.mantissa == 0;\r\n    }\r\n\r\n    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function sub_(uint a, uint b) pure internal returns (uint) {\r\n        return sub_(a, b, \"subtraction underflow\");\r\n    }\r\n\r\n    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\r\n    }\r\n\r\n    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / expScale;\r\n    }\r\n\r\n    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\r\n    }\r\n\r\n    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: mul_(a.mantissa, b)});\r\n    }\r\n\r\n    function mul_(uint a, Double memory b) pure internal returns (uint) {\r\n        return mul_(a, b.mantissa) / doubleScale;\r\n    }\r\n\r\n    function mul_(uint a, uint b) pure internal returns (uint) {\r\n        return mul_(a, b, \"multiplication overflow\");\r\n    }\r\n\r\n    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Exp memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, expScale), b.mantissa);\r\n    }\r\n\r\n    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\r\n    }\r\n\r\n    function div_(Double memory a, uint b) pure internal returns (Double memory) {\r\n        return Double({mantissa: div_(a.mantissa, b)});\r\n    }\r\n\r\n    function div_(uint a, Double memory b) pure internal returns (uint) {\r\n        return div_(mul_(a, doubleScale), b.mantissa);\r\n    }\r\n\r\n    function div_(uint a, uint b) pure internal returns (uint) {\r\n        return div_(a, b, \"divide by zero\");\r\n    }\r\n\r\n    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\r\n        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\r\n        return Double({mantissa: add_(a.mantissa, b.mantissa)});\r\n    }\r\n\r\n    function add_(uint a, uint b) pure internal returns (uint) {\r\n        return add_(a, b, \"addition overflow\");\r\n    }\r\n\r\n    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract CompoundSafetyRatio is Exponential, DSMath {\r\n    // solhint-disable-next-line const-name-snakecase\r\n    ComptrollerInterface public constant comp = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\r\n    /// @notice Calcualted the ratio of debt / adjusted collateral\r\n    /// @param _user Address of the user\r\n    function getSafetyRatio(address _user) public view returns (uint) {\r\n        // For each asset the account is in\r\n        address[] memory assets = comp.getAssetsIn(_user);\r\n        address oracleAddr = comp.oracle();\r\n\r\n\r\n        uint sumCollateral = 0;\r\n        uint sumBorrow = 0;\r\n\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            address asset = assets[i];\r\n\r\n            (, uint cTokenBalance, uint borrowBalance, uint exchangeRateMantissa)\r\n                                        = CTokenInterface(asset).getAccountSnapshot(_user);\r\n\r\n            Exp memory oraclePrice;\r\n\r\n            if (cTokenBalance != 0 || borrowBalance != 0) {\r\n                oraclePrice = Exp({mantissa: CompoundOracleInterface(oracleAddr).getUnderlyingPrice(asset)});\r\n            }\r\n\r\n            // Sum up collateral in Usd\r\n            if (cTokenBalance != 0) {\r\n\r\n                (, uint collFactorMantissa) = comp.markets(address(asset));\r\n\r\n                Exp memory collateralFactor = Exp({mantissa: collFactorMantissa});\r\n                Exp memory exchangeRate = Exp({mantissa: exchangeRateMantissa});\r\n\r\n                (, Exp memory tokensToUsd) = mulExp3(collateralFactor, exchangeRate, oraclePrice);\r\n\r\n                (, sumCollateral) = mulScalarTruncateAddUInt(tokensToUsd, cTokenBalance, sumCollateral);\r\n            }\r\n\r\n            // Sum up debt in Usd\r\n            if (borrowBalance != 0) {\r\n                (, sumBorrow) = mulScalarTruncateAddUInt(oraclePrice, borrowBalance, sumBorrow);\r\n            }\r\n        }\r\n\r\n        if (sumBorrow == 0) return uint(-1);\r\n\r\n        uint borrowPowerUsed = (sumBorrow * 10**18) / sumCollateral;\r\n        return wdiv(1e18, borrowPowerUsed);\r\n    }\r\n}\r\n\r\ncontract DFSExchangeData {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ActionType { SELL, BUY }\r\n\r\n    struct OffchainData {\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        address allowanceTarget;\r\n        uint256 price;\r\n        uint256 protocolFee;\r\n        bytes callData;\r\n    }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint256 srcAmount;\r\n        uint256 destAmount;\r\n        uint256 minPrice;\r\n        uint256 dfsFeeDivider; // service fee divider\r\n        address user; // user to check special fee\r\n        address wrapper;\r\n        bytes wrapperData;\r\n        OffchainData offchainData;\r\n    }\r\n\r\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\r\n        return abi.encode(_exData);\r\n    }\r\n\r\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\r\n        _exData = abi.decode(_data, (ExchangeData));\r\n    }\r\n}\r\n\r\n/**\r\n * @title LendingPoolAddressesProvider contract\r\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\r\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\r\n * - Owned by the Aave Governance\r\n * @author Aave\r\n **/\r\ninterface ILendingPoolAddressesProviderV2 {\r\n  event LendingPoolUpdated(address indexed newAddress);\r\n  event ConfigurationAdminUpdated(address indexed newAddress);\r\n  event EmergencyAdminUpdated(address indexed newAddress);\r\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n  event PriceOracleUpdated(address indexed newAddress);\r\n  event LendingRateOracleUpdated(address indexed newAddress);\r\n  event ProxyCreated(bytes32 id, address indexed newAddress);\r\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function setLendingPoolImpl(address pool) external;\r\n\r\n  function getLendingPoolConfigurator() external view returns (address);\r\n\r\n  function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n  function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n  function setLendingPoolCollateralManager(address manager) external;\r\n\r\n  function getPoolAdmin() external view returns (address);\r\n\r\n  function setPoolAdmin(address admin) external;\r\n\r\n  function getEmergencyAdmin() external view returns (address);\r\n\r\n  function setEmergencyAdmin(address admin) external;\r\n\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  function setPriceOracle(address priceOracle) external;\r\n\r\n  function getLendingRateOracle() external view returns (address);\r\n\r\n  function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n\r\nlibrary DataTypes {\r\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    uint40 lastUpdateTimestamp;\r\n    //tokens addresses\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint8 id;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: Reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60-63: reserved\r\n    //bit 64-79: reserve factor\r\n    uint256 data;\r\n  }\r\n\r\n  struct UserConfigurationMap {\r\n    uint256 data;\r\n  }\r\n\r\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n\r\ninterface ILendingPoolV2 {\r\n  /**\r\n   * @dev Emitted on deposit()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the deposit\r\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n   * @param amount The amount deposited\r\n   * @param referral The referral code used\r\n   **/\r\n  event Deposit(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param reserve The address of the underlyng asset being withdrawn\r\n   * @param user The address initiating the withdrawal, owner of aTokens\r\n   * @param to Address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   **/\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n   * @param reserve The address of the underlying asset being borrowed\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n   * initiator of the transaction on flashLoan()\r\n   * @param onBehalfOf The address that will be getting the debt\r\n   * @param amount The amount borrowed out\r\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\r\n   * @param borrowRate The numeric rate at which the user has borrowed\r\n   * @param referral The referral code used\r\n   **/\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint256 borrowRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The beneficiary of the repayment, getting his debt reduced\r\n   * @param repayer The address of the user initiating the repay(), providing the funds\r\n   * @param amount The amount repaid\r\n   **/\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on swapBorrowRateMode()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user swapping his rate mode\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on rebalanceStableBorrowRate()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user for which the rebalance has been executed\r\n   **/\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on flashLoan()\r\n   * @param target The address of the flash loan receiver contract\r\n   * @param initiator The address initiating the flash loan\r\n   * @param asset The address of the asset being flash borrowed\r\n   * @param amount The amount flash borrowed\r\n   * @param premium The fee flash borrowed\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address indexed initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    uint16 referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the pause is triggered.\r\n   */\r\n  event Paused();\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted.\r\n   */\r\n  event Unpaused();\r\n\r\n  /**\r\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\r\n   * LendingPoolCollateral manager using a DELEGATECALL\r\n   * This allows to have the events in the generated ABI for LendingPool.\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\r\n   * @param liquidator The address of the liquidator\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\r\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\r\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\r\n   * gets added to the LendingPool ABI\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param liquidityRate The new liquidity rate\r\n   * @param stableBorrowRate The new stable borrow rate\r\n   * @param variableBorrowRate The new variable borrow rate\r\n   * @param liquidityIndex The new liquidity index\r\n   * @param variableBorrowIndex The new variable borrow index\r\n   **/\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to deposit\r\n   * @param amount The amount to be deposited\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to Address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   **/\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   **/\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   **/\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 rateMode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n\r\n  /**\r\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n   *        borrowed at a stable rate and depositors are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   **/\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n   * @param asset The address of the underlying asset deposited\r\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n   **/\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\r\n   * For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts amounts being flash-borrowed\r\n   * @param modes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata modes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralETH the total collateral in ETH of the user\r\n   * @return totalDebtETH the total debt in ETH of the user\r\n   * @return availableBorrowsETH the borrowing power left of the user\r\n   * @return currentLiquidationThreshold the liquidation threshold of the user\r\n   * @return ltv the loan to value of the user\r\n   * @return healthFactor the current health factor of the user\r\n   **/\r\n  function getUserAccountData(address user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralETH,\r\n      uint256 totalDebtETH,\r\n      uint256 availableBorrowsETH,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n\r\n  function initReserve(\r\n    address reserve,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\r\n    external;\r\n\r\n  function setConfiguration(address reserve, uint256 configuration) external;\r\n\r\n  /**\r\n   * @dev Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   **/\r\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   **/\r\n  function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the normalized income normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the normalized variable debt per unit of asset\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state of the reserve\r\n   **/\r\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromAfter,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\r\n\r\n  function setPause(bool val) external;\r\n\r\n  function paused() external view returns (bool);\r\n}\r\n\r\ninterface IFlashLoans {\r\n    function flashLoan(\r\n        address recipient,\r\n        address[] memory tokens,\r\n        uint256[] memory amounts,\r\n        bytes memory userData\r\n    ) external;\r\n}\r\n\r\nabstract contract IAaveProtocolDataProviderV2 {\r\n\r\n  struct TokenData {\r\n    string symbol;\r\n    address tokenAddress;\r\n  }\r\n\r\n  function getAllReservesTokens() external virtual view returns (TokenData[] memory);\r\n\r\n  function getAllATokens() external virtual view returns (TokenData[] memory);\r\n\r\n  function getReserveConfigurationData(address asset)\r\n    external virtual\r\n    view\r\n    returns (\r\n      uint256 decimals,\r\n      uint256 ltv,\r\n      uint256 liquidationThreshold,\r\n      uint256 liquidationBonus,\r\n      uint256 reserveFactor,\r\n      bool usageAsCollateralEnabled,\r\n      bool borrowingEnabled,\r\n      bool stableBorrowRateEnabled,\r\n      bool isActive,\r\n      bool isFrozen\r\n    );\r\n\r\n  function getReserveData(address asset)\r\n    external virtual\r\n    view\r\n    returns (\r\n      uint256 availableLiquidity,\r\n      uint256 totalStableDebt,\r\n      uint256 totalVariableDebt,\r\n      uint256 liquidityRate,\r\n      uint256 variableBorrowRate,\r\n      uint256 stableBorrowRate,\r\n      uint256 averageStableBorrowRate,\r\n      uint256 liquidityIndex,\r\n      uint256 variableBorrowIndex,\r\n      uint40 lastUpdateTimestamp\r\n    );\r\n\r\n  function getUserReserveData(address asset, address user)\r\n    external virtual\r\n    view\r\n    returns (\r\n      uint256 currentATokenBalance,\r\n      uint256 currentStableDebt,\r\n      uint256 currentVariableDebt,\r\n      uint256 principalStableDebt,\r\n      uint256 scaledVariableDebt,\r\n      uint256 stableBorrowRate,\r\n      uint256 liquidityRate,\r\n      uint40 stableRateLastUpdated,\r\n      bool usageAsCollateralEnabled\r\n    );\r\n\r\n  function getReserveTokensAddresses(address asset)\r\n    external virtual\r\n    view\r\n    returns (\r\n      address aTokenAddress,\r\n      address stableDebtTokenAddress,\r\n      address variableDebtTokenAddress\r\n    );\r\n}\r\n\r\n/// @title Helper contract for getting AaveV2/Balancer flash loans\r\ncontract FLHelper {\r\n    address internal constant AAVE_MARKET_ADDR = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\r\n    address internal constant BALANCER_VAULT_ADDR = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\r\n    uint16 internal constant AAVE_REFERRAL_CODE = 64;\r\n\r\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address internal constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    enum FLType {\r\n        AAVE_V2,\r\n        BALANCER,\r\n        NO_LOAN\r\n    }\r\n\r\n    function _getFL(\r\n        FLType _flType,\r\n        address _tokenAddr,\r\n        uint256 _flAmount,\r\n        bytes memory _callData,\r\n        address _receiverAddr\r\n    ) internal {\r\n        _tokenAddr = _tokenAddr == ETH_ADDR ? WETH_ADDR : _tokenAddr;\r\n\r\n        address[] memory tokens = new address[](1);\r\n        tokens[0] = _tokenAddr;\r\n\r\n        uint256[] memory amounts = new uint256[](1);\r\n        amounts[0] = _flAmount;\r\n\r\n        if (_flType == FLType.AAVE_V2) {\r\n            address lendingPool = ILendingPoolAddressesProviderV2(AAVE_MARKET_ADDR)\r\n                .getLendingPool();\r\n\r\n            uint256[] memory modes = new uint256[](1);\r\n            modes[0] = 0;\r\n\r\n            ILendingPoolV2(lendingPool).flashLoan(\r\n                _receiverAddr,\r\n                tokens,\r\n                amounts,\r\n                modes,\r\n                address(this),\r\n                _callData,\r\n                AAVE_REFERRAL_CODE\r\n            );\r\n        } else {\r\n            IFlashLoans(BALANCER_VAULT_ADDR).flashLoan(_receiverAddr, tokens, amounts, _callData);\r\n        }\r\n    }\r\n\r\n    function getProtocolLiq(address _tokenAddr, uint256 _desiredAmount)\r\n        public\r\n        view\r\n        returns (FLType flType)\r\n    {\r\n        uint256 flLiquidity = getFLLiquidity(FLType.BALANCER, _tokenAddr);\r\n\r\n        if (flLiquidity >= _desiredAmount) return FLType.BALANCER;\r\n\r\n        flLiquidity = getFLLiquidity(FLType.AAVE_V2, _tokenAddr);\r\n\r\n        if (flLiquidity >= _desiredAmount) return FLType.AAVE_V2;\r\n\r\n        return FLType.NO_LOAN;\r\n    }\r\n\r\n    function getFLLiquidity(FLType _flType, address _tokenAddr) public view returns (uint256) {\r\n        _tokenAddr = _tokenAddr == ETH_ADDR ? WETH_ADDR : _tokenAddr;\r\n\r\n        if (_flType == FLType.AAVE_V2) {\r\n            IAaveProtocolDataProviderV2 dataProvider = getDataProvider(AAVE_MARKET_ADDR);\r\n\r\n            try dataProvider.getReserveData(_tokenAddr) returns (\r\n                uint256 liquidity,\r\n                uint256,\r\n                uint256,\r\n                uint256,\r\n                uint256,\r\n                uint256,\r\n                uint256,\r\n                uint256,\r\n                uint256,\r\n                uint40\r\n            ) {\r\n                return liquidity;\r\n            } catch (bytes memory) {\r\n                return 0;\r\n            }\r\n        } else {\r\n            return ERC20(_tokenAddr).balanceOf(BALANCER_VAULT_ADDR);\r\n        }\r\n    }\r\n\r\n    function getDataProvider(address _market) internal view returns (IAaveProtocolDataProviderV2) {\r\n        return\r\n            IAaveProtocolDataProviderV2(\r\n                ILendingPoolAddressesProviderV2(_market).getAddress(\r\n                    0x0100000000000000000000000000000000000000000000000000000000000000\r\n                )\r\n            );\r\n    }\r\n}\r\n\r\n/// @title Contract implements logic of calling boost/repay in the automatic system\r\ncontract CompoundMonitor is AdminAuth, DSMath, CompoundSafetyRatio {\r\n    using SafeERC20 for ERC20;\r\n\r\n    enum Method {\r\n        Boost,\r\n        Repay\r\n    }\r\n\r\n    uint256 public MAX_GAS_PRICE = 800 gwei;\r\n\r\n    uint256 public REPAY_GAS_COST = 1_500_000;\r\n    uint256 public BOOST_GAS_COST = 1_000_000;\r\n\r\n    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\r\n    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\r\n\r\n    CompoundMonitorProxy public compoundMonitorProxy = CompoundMonitorProxy(0xB1cF8DE8e791E4Ed1Bd86c03E2fc1f14389Cb10a);\r\n    CompoundSubscriptions public subscriptionsContract = CompoundSubscriptions(0x52015EFFD577E08f498a0CCc11905925D58D6207);\r\n    address public compoundFlashLoanTakerAddress;\r\n    address internal compoundSaverFlashLoan;\r\n\r\n    DefisaverLogger public logger = DefisaverLogger(DEFISAVER_LOGGER);\r\n\r\n    // new compound sub proxy from strategies\r\n    ICompSubProxy public compSubProxy = ICompSubProxy(0xEC8553D9063a0A0Bfb4953fca6d7A7F75E8B8d31);\r\n\r\n    modifier onlyApproved() {\r\n        require(BotRegistry(BOT_REGISTRY_ADDRESS).botList(msg.sender), \"Not auth bot\");\r\n        _;\r\n    }\r\n\r\n    /// @param _newCompoundFlashLoanTaker Contract that actually performs Repay/Boost\r\n    /// @param _compoundSaverFlashLoan Intermediary contract used as input to _newCompoundFlashLoanTaker\r\n    constructor(\r\n        address _newCompoundFlashLoanTaker,\r\n        address _compoundSaverFlashLoan\r\n    ) public {\r\n        compoundFlashLoanTakerAddress = _newCompoundFlashLoanTaker;\r\n        compoundSaverFlashLoan = _compoundSaverFlashLoan;\r\n    }\r\n\r\n    /// @notice Bots call this method to repay for user when conditions are met\r\n    /// @dev If the contract owns gas token it will try and use it for gas price reduction\r\n    /// @param _exData Exchange data\r\n    /// @param _cAddresses cTokens addresses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @param _flType Type of Flashloan we want to use 0 - AAVE_V2, 1 - Balancer\r\n    function repayFor(\r\n        DFSExchangeData.ExchangeData memory _exData,\r\n        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\r\n        address _user,\r\n        FLHelper.FLType _flType\r\n    ) public payable onlyApproved {\r\n        bool isAllowed;\r\n        uint256 ratioBefore;\r\n        string memory errReason;\r\n\r\n        CompoundSubscriptions.CompoundHolder memory holder = subscriptionsContract.getHolder(_user);\r\n\r\n        (isAllowed, ratioBefore, errReason) = checkPreconditions(holder, Method.Repay, _user);\r\n        require(isAllowed, errReason); // check if conditions are met\r\n\r\n        uint256 gasCost = calcGasCost(REPAY_GAS_COST);\r\n\r\n        compoundMonitorProxy.callExecute{value: msg.value}(\r\n            _user,\r\n            compoundFlashLoanTakerAddress,\r\n            abi.encodeWithSignature(\r\n                \"repayWithLoan((address,address,uint256,uint256,uint256,uint256,address,address,bytes,(address,address,address,uint256,uint256,bytes)),address[2],uint256,uint8,address)\",\r\n                _exData,\r\n                _cAddresses,\r\n                gasCost,\r\n                _flType,\r\n                compoundSaverFlashLoan\r\n            )\r\n        );\r\n\r\n        bool isGoodRatio;\r\n        uint256 ratioAfter;\r\n\r\n        (isGoodRatio, ratioAfter, errReason) = ratioGoodAfter(\r\n            holder,\r\n            Method.Repay,\r\n            _user,\r\n            ratioBefore\r\n        );\r\n        require(isGoodRatio, errReason); // check if the after result of the actions is good\r\n\r\n        returnEth();\r\n\r\n        logger.Log(\r\n            address(this),\r\n            _user,\r\n            \"AutomaticCompoundRepay\",\r\n            abi.encode(ratioBefore, ratioAfter)\r\n        );\r\n    }\r\n\r\n    /// @notice Bots call this method to boost for user when conditions are met\r\n    /// @dev If the contract owns gas token it will try and use it for gas price reduction\r\n    /// @param _exData Exchange data\r\n    /// @param _cAddresses cTokens addresses and exchange [cCollAddress, cBorrowAddress, exchangeAddress]\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @param _flType Type of Flashloan we want to use 0 - AAVE_V2, 1 - Balancer\r\n    function boostFor(\r\n        DFSExchangeData.ExchangeData memory _exData,\r\n        address[2] memory _cAddresses, // cCollAddress, cBorrowAddress\r\n        address _user,\r\n        FLHelper.FLType _flType\r\n    ) public payable onlyApproved {\r\n        string memory errReason;\r\n        bool isAllowed;\r\n        uint256 ratioBefore;\r\n\r\n        CompoundSubscriptions.CompoundHolder memory holder = subscriptionsContract.getHolder(_user);\r\n\r\n        (isAllowed, ratioBefore, errReason) = checkPreconditions(holder, Method.Boost, _user);\r\n        require(isAllowed, errReason); // check if conditions are met\r\n\r\n        uint256 gasCost = calcGasCost(BOOST_GAS_COST);\r\n\r\n        compoundMonitorProxy.callExecute{value: msg.value}(\r\n            _user,\r\n            compoundFlashLoanTakerAddress,\r\n            abi.encodeWithSignature(\r\n                \"boostWithLoan((address,address,uint256,uint256,uint256,uint256,address,address,bytes,(address,address,address,uint256,uint256,bytes)),address[2],uint256,uint8,address)\",\r\n                _exData,\r\n                _cAddresses,\r\n                gasCost,\r\n                _flType,\r\n                compoundSaverFlashLoan\r\n            )\r\n        );\r\n\r\n        bool isGoodRatio;\r\n        uint256 ratioAfter;\r\n\r\n        (isGoodRatio, ratioAfter, errReason) = ratioGoodAfter(\r\n            holder,\r\n            Method.Boost,\r\n            _user,\r\n            ratioBefore\r\n        );\r\n        require(isGoodRatio, errReason); // check if the after result of the actions is good\r\n\r\n        returnEth();\r\n\r\n        logger.Log(\r\n            address(this),\r\n            _user,\r\n            \"AutomaticCompoundBoost\",\r\n            abi.encode(ratioBefore, ratioAfter)\r\n        );\r\n    }\r\n\r\n    /// @dev One time migrate method to move all compound V2 positions to the new dfs strategy system\r\n    function migrate(address[] memory proxies) external onlyApproved {\r\n        for (uint256 i  = 0; i < proxies.length; ++i) {\r\n            address userProxy = proxies[i];\r\n\r\n            CompoundSubscriptions.CompoundHolder memory oldCompSub = subscriptionsContract.getHolder(userProxy);\r\n\r\n            if (subscriptionsContract.isSubscribed(userProxy)) {\r\n                // format for new data sub\r\n                ICompSubProxy.CompSubData memory newSubInfo = ICompSubProxy.CompSubData({\r\n                    minRatio: oldCompSub.minRatio,\r\n                    maxRatio: oldCompSub.maxRatio,\r\n                    targetRatioBoost: oldCompSub.optimalRatioBoost,\r\n                    targetRatioRepay: oldCompSub.optimalRatioRepay,\r\n                    boostEnabled: oldCompSub.boostEnabled\r\n                });\r\n\r\n                // call compoundMonitorProxy which will call users DSProxy to call compSubProxy and subscribe to strategy system with same data\r\n                // call to compSubProxy will also unsub the user from this automation\r\n                compoundMonitorProxy.callExecute(\r\n                    userProxy,\r\n                    address(compSubProxy),\r\n                    abi.encodeWithSelector(ICompSubProxy.subToCompAutomation.selector, newSubInfo)\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /******************* INTERNAL METHODS ********************************/\r\n    function returnEth() internal {\r\n        // return if some eth left\r\n        if (address(this).balance > 0) {\r\n            msg.sender.transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    /******************* STATIC METHODS ********************************/\r\n\r\n    /// @notice Checks if Boost/Repay could be triggered for the CDP\r\n    /// @dev Called by MCDMonitor to enforce the min/max check\r\n    /// @param _method Type of action to be called\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @return Boolean if it can be called and the ratio\r\n    function checkPreconditions(\r\n        CompoundSubscriptions.CompoundHolder memory _holder,\r\n        Method _method,\r\n        address _user\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            string memory\r\n        )\r\n    {\r\n        bool subscribed = subscriptionsContract.isSubscribed(_user);\r\n\r\n        // check if user is subscribed\r\n        if (!subscribed) return (false, 0, \"User not subbed\");\r\n\r\n        // check if boost and boost allowed\r\n        if (_method == Method.Boost && !_holder.boostEnabled)\r\n            return (false, 0, \"Boost not enabled\");\r\n\r\n        uint256 currRatio = getSafetyRatio(_user);\r\n\r\n        if (_method == Method.Repay) {\r\n            if (currRatio > _holder.minRatio) return (false, 0, \"Ratio not under min\");\r\n        } else if (_method == Method.Boost) {\r\n            if (currRatio < _holder.maxRatio) return (false, 0, \"Ratio not over max\");\r\n        }\r\n\r\n        return (true, currRatio, \"\");\r\n    }\r\n\r\n    /// @dev After the Boost/Repay check if the ratio doesn't trigger another call\r\n    /// @param _method Type of action to be called\r\n    /// @param _user The actual address that owns the Compound position\r\n    /// @param _beforeRatio Ratio before boost\r\n    /// @return Boolean if the recent action preformed correctly and the ratio\r\n    function ratioGoodAfter(\r\n        CompoundSubscriptions.CompoundHolder memory _holder,\r\n        Method _method,\r\n        address _user,\r\n        uint256 _beforeRatio\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            string memory\r\n        )\r\n    {\r\n        uint256 currRatio = getSafetyRatio(_user);\r\n\r\n        if (_method == Method.Repay) {\r\n            if (currRatio >= _holder.maxRatio)\r\n                return (false, currRatio, \"Repay increased ratio over max\");\r\n            if (currRatio <= _beforeRatio) return (false, currRatio, \"Repay made ratio worse\");\r\n        } else if (_method == Method.Boost) {\r\n            if (currRatio <= _holder.minRatio)\r\n                return (false, currRatio, \"Boost lowered ratio over min\");\r\n            if (currRatio >= _beforeRatio) return (false, currRatio, \"Boost didn't lower ratio\");\r\n        }\r\n\r\n        return (true, currRatio, \"\");\r\n    }\r\n\r\n    /// @notice Calculates gas cost (in Eth) of tx\r\n    /// @dev Gas price is limited to MAX_GAS_PRICE to prevent attack of draining user CDP\r\n    /// @param _gasAmount Amount of gas used for the tx\r\n    function calcGasCost(uint256 _gasAmount) public view returns (uint256) {\r\n        uint256 gasPrice = tx.gasprice <= MAX_GAS_PRICE ? tx.gasprice : MAX_GAS_PRICE;\r\n\r\n        return mul(gasPrice, _gasAmount);\r\n    }\r\n\r\n    /******************* OWNER ONLY OPERATIONS ********************************/\r\n\r\n    /// @notice Allows owner to change gas cost for boost operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for boost method\r\n    function changeBoostGasCost(uint256 _gasCost) public onlyOwner {\r\n        require(_gasCost < 3_000_000, \"Boost gas cost over limit\");\r\n\r\n        BOOST_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Allows owner to change gas cost for repay operation, but only up to 3 millions\r\n    /// @param _gasCost New gas cost for repay method\r\n    function changeRepayGasCost(uint256 _gasCost) public onlyOwner {\r\n        require(_gasCost < 3_000_000, \"Repay gas cost over limit\");\r\n\r\n        REPAY_GAS_COST = _gasCost;\r\n    }\r\n\r\n    /// @notice Owner can change the maximum the contract can take for gas price\r\n    /// @param _maxGasPrice New Max gas price\r\n    function changeMaxGasPrice(uint256 _maxGasPrice) public onlyOwner {\r\n        require(_maxGasPrice < 2000 gwei, \"Max gas price over the limit\");\r\n\r\n        MAX_GAS_PRICE = _maxGasPrice;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCompoundFlashLoanTaker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compoundSaverFlashLoan\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BOOST_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_REGISTRY_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFISAVER_LOGGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAY_GAS_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"},{\"internalType\":\"address[2]\",\"name\":\"_cAddresses\",\"type\":\"address[2]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum FLHelper.FLType\",\"name\":\"_flType\",\"type\":\"uint8\"}],\"name\":\"boostFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"}],\"name\":\"calcGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeBoostGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"changeMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasCost\",\"type\":\"uint256\"}],\"name\":\"changeRepayGasCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct CompoundSubscriptions.CompoundHolder\",\"name\":\"_holder\",\"type\":\"tuple\"},{\"internalType\":\"enum CompoundMonitor.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkPreconditions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compSubProxy\",\"outputs\":[{\"internalType\":\"contract ICompSubProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundFlashLoanTakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundMonitorProxy\",\"outputs\":[{\"internalType\":\"contract CompoundMonitorProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getSafetyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"proxies\",\"type\":\"address[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioBoost\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"optimalRatioRepay\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"boostEnabled\",\"type\":\"bool\"}],\"internalType\":\"struct CompoundSubscriptions.CompoundHolder\",\"name\":\"_holder\",\"type\":\"tuple\"},{\"internalType\":\"enum CompoundMonitor.Method\",\"name\":\"_method\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_beforeRatio\",\"type\":\"uint256\"}],\"name\":\"ratioGoodAfter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"},{\"internalType\":\"address[2]\",\"name\":\"_cAddresses\",\"type\":\"address[2]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum FLHelper.FLType\",\"name\":\"_flType\",\"type\":\"uint8\"}],\"name\":\"repayFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwnerByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionsContract\",\"outputs\":[{\"internalType\":\"contract CompoundSubscriptions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompoundMonitor", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006e1ab1353257360a755d972ef9683a9b33a586260000000000000000000000006d0d107a34b5e35136a503d993212f49f517f665", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9590fb18526391741e75f85283de5251a586ff191a4305acd3d03004e86f71af"}