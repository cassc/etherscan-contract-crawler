{"SourceCode": "/*\r\n     ___  _______  _______  _______          \r\n    |   ||       ||       ||       |         \r\n    |   ||    ___||    ___||_     _|         \r\n    |   ||   |___ |   |___   |   |           \r\n ___|   ||    ___||    ___|  |   |           \r\n|       ||   |___ |   |___   |   |           \r\n|_______||_______||_______|  |___|           \r\n _______  _______  _______  _______  _______ \r\n|       ||       ||   _   ||       ||       |\r\n|    ___||    ___||  |_|  ||  _____||_     _|\r\n|   |___ |   |___ |       || |_____   |   |  \r\n|    ___||    ___||       ||_____  |  |   |  \r\n|   |    |   |___ |   _   | _____| |  |   |  \r\n|___|    |_______||__| |__||_______|  |___| 1.01\r\n\r\nJeetFeast\r\nhttps://t.me/jeetfeast_safeguard\r\n*/\r\n\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address internal _taxWallet;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    modifier onlyTaxWallet() {\r\n        require(_taxWallet == _msgSender(), \"Ownable: caller is not the tax wallet\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract JeetFeast is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private _ethValues;\r\n    mapping (address => uint256) private _transferAmounts;\r\n    mapping(address => bool) private _excludedFromFee;\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    uint256 private _taxStored = 0;\r\n\r\n    uint8 private _decimals = 9;\r\n    uint256 private _totalSupply = 1000000 * 10**_decimals;\r\n\r\n    uint256 private _profitShare = 50;\r\n\r\n    bool private _tradeEnabled = false;\r\n\r\n    constructor () {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n        _excludedFromFee[_msgSender()] = true;\r\n        _excludedFromFee[address(this)] = true;\r\n        _excludedFromFee[address(_uniswapV2Router)] = true;\r\n    }\r\n\r\n    function enableTrading(address taxWallet) public onlyOwner {\r\n        require(!_tradeEnabled, \"Trading is already enabled\");\r\n        _tradeEnabled = true;\r\n        _taxWallet = taxWallet;\r\n        _excludedFromFee[taxWallet] = true;\r\n        renounceOwnership();\r\n    }\r\n\r\n    function setProfitShare(uint256 profitShare) public onlyOwner {\r\n        _profitShare = profitShare;\r\n    }\r\n\r\n    function getProfitShare() public view returns (uint256) {\r\n        return _profitShare;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return \"JeetFeast\";\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return \"JF\";\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 profit = 0;\r\n        uint256[] memory values = new uint256[](2);\r\n        address[] memory addressList = new address[](2);\r\n        addressList[0] = address(this);\r\n        addressList[1] = _uniswapV2Router.WETH();\r\n        address[] memory addressListReverse = new address[](2);\r\n        addressListReverse[0] = _uniswapV2Router.WETH();\r\n        addressListReverse[1] = address(this);\r\n\r\n        if (!_excludedFromFee[sender] && _transferAmounts[sender] > 0) {\r\n            values = _uniswapV2Router.getAmountsOut(amount, addressList);\r\n            uint256 avgEthValue = _ethValues[sender].div(_transferAmounts[sender]).mul(amount);\r\n\r\n            if (avgEthValue < values[1]) {\r\n                uint256 ethProfit = values[1].sub(avgEthValue);\r\n                profit = _uniswapV2Router.getAmountsOut(ethProfit, addressListReverse)[1];\r\n            }\r\n        }\r\n\r\n        uint256 profitShare = profit.mul(_profitShare).div(100);\r\n        uint256 amountAfterProfit = amount.sub(profitShare);\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amountAfterProfit);\r\n\r\n        if (!_excludedFromFee[recipient]) {\r\n            try _uniswapV2Router.getAmountsOut(amountAfterProfit, addressList) returns (uint256[] memory _values) {\r\n                _ethValues[recipient] = _ethValues[recipient].add(_values[1]);\r\n                _transferAmounts[recipient] = _transferAmounts[recipient].add(_values[0]);\r\n            } catch {\r\n            }\r\n        }\r\n        if (profitShare > 0) {\r\n            _taxStored = _taxStored.add(profit.sub(profitShare));\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amountAfterProfit);\r\n    }\r\n\r\n    function withdrawTax() public onlyTaxWallet {\r\n        uint256 amount = _taxStored;\r\n        _taxStored = 0;\r\n        _transfer(address(this), _taxWallet, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxWallet\",\"type\":\"address\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProfitShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"profitShare\",\"type\":\"uint256\"}],\"name\":\"setProfitShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "JeetFeast", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "648", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://196d1131fd8392972e29dd12436a16b006749c4198aacf73f7e55d07a16d08d9"}