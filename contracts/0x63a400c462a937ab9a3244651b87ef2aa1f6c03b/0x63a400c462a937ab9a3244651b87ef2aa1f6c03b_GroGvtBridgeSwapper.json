{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/GroGvtBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./ZkSyncBridgeSwapper.sol\\\";\\nimport \\\"./interfaces/IGroController.sol\\\";\\nimport \\\"./interfaces/IGroToken.sol\\\";\\nimport \\\"./interfaces/IGroDepositHandler.sol\\\";\\nimport \\\"./interfaces/IGroWithdrawHandler.sol\\\";\\nimport \\\"./interfaces/IGroBuoy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Exchanges a stablecoin for Gro Vault LP tokens.\\n * Example indexes:\\n * 0: DAI\\n * 1: GVT\\n */\\ncontract GroGvtBridgeSwapper is ZkSyncBridgeSwapper {\\n\\n    address public immutable depositHandler;\\n    address public immutable withdrawHandler;\\n    address public immutable stablecoin;\\n    uint256 public immutable stablecoinIndex;\\n    address public immutable gvt;\\n    address public immutable buoy;\\n    address public immutable groReferral;\\n\\n    constructor(\\n        address _zkSync,\\n        address _l2Account,\\n        address _groController,\\n        uint256 _stablecoinIndex,\\n        address _groReferral\\n    )\\n        ZkSyncBridgeSwapper(_zkSync, _l2Account)\\n    {\\n        require(_groController != address(0), \\\"null _groController\\\");\\n        IGroController controller = IGroController(_groController);\\n\\n        require(_stablecoinIndex < 3, \\\"invalid _stablecoinIndex\\\");\\n        stablecoin = controller.stablecoins()[_stablecoinIndex];\\n        stablecoinIndex = _stablecoinIndex;\\n        depositHandler = controller.depositHandler();\\n        withdrawHandler = controller.withdrawHandler();\\n        gvt = controller.gvt();\\n        buoy = controller.buoy();\\n        groReferral = _groReferral;\\n    }\\n\\n    function exchange(\\n        uint256 _indexIn,\\n        uint256 _indexOut,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) \\n        onlyOwner\\n        external \\n        override \\n        returns (uint256 amountOut) \\n    {\\n        require(_indexIn + _indexOut == 1, \\\"invalid indexes\\\");\\n\\n        if (_indexIn == 0) {\\n            transferFromZkSync(stablecoin);\\n            amountOut = swapStablecoinForGvt(_amountIn);\\n            require(amountOut >= _minAmountOut, \\\"slippage\\\");\\n            transferToZkSync(gvt, amountOut);\\n            emit Swapped(stablecoin, _amountIn, gvt, amountOut);\\n        } else {\\n            transferFromZkSync(gvt);\\n            amountOut = swapGvtForStablecoin(_amountIn);\\n            require(amountOut >= _minAmountOut, \\\"slippage\\\");\\n            transferToZkSync(stablecoin, amountOut);\\n            emit Swapped(gvt, _amountIn, stablecoin, amountOut);\\n        }\\n    }\\n\\n    function swapStablecoinForGvt(uint256 _amountIn) private returns (uint256) {\\n        uint256[3] memory inAmounts;\\n        inAmounts[stablecoinIndex] = _amountIn;\\n        uint256 balanceBefore = IGroToken(gvt).balanceOf(address(this));\\n\\n        IERC20(stablecoin).approve(depositHandler, _amountIn);\\n        IGroDepositHandler(depositHandler).depositGvt(inAmounts, 1, groReferral);\\n\\n        uint256 balanceAfter = IGroToken(gvt).balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function swapGvtForStablecoin(uint256 _amountIn) private returns (uint256) {\\n        uint256 balanceBefore = IERC20(stablecoin).balanceOf(address(this));\\n\\n        uint256 usdAmount = IGroToken(gvt).getShareAssets(_amountIn);\\n        uint256 lpAmount = IGroBuoy(buoy).usdToLp(usdAmount);\\n        IGroWithdrawHandler(withdrawHandler).withdrawByStablecoin(false, stablecoinIndex, lpAmount, 1);\\n\\n        uint256 balanceAfter = IERC20(stablecoin).balanceOf(address(this));\\n        return balanceAfter - balanceBefore;\\n    }\\n\\n    function tokens(uint256 _index) external view returns (address) {\\n        if (_index == 0) {\\n            return stablecoin;\\n        } else if (_index == 1) {\\n            return gvt;\\n        }\\n        revert(\\\"invalid _index\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ZkSyncBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IZkSync.sol\\\";\\nimport \\\"./interfaces/IBridgeSwapper.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract ZkSyncBridgeSwapper is IBridgeSwapper {\\n\\n    // The owner of the contract\\n    address public owner;\\n\\n    // The ZkSync bridge contract\\n    address public immutable zkSync;\\n    // The L2 market maker account\\n    address public immutable l2Account;\\n\\n    address constant internal ETH_TOKEN = address(0);\\n\\n    event OwnerChanged(address _owner, address _newOwner);\\n    event SlippageChanged(uint256 _slippagePercent);\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"unauthorised\\\");\\n        _;\\n    }\\n\\n    constructor(address _zkSync, address _l2Account) {\\n        zkSync = _zkSync;\\n        l2Account = _l2Account;\\n        owner = msg.sender;\\n    }\\n\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"invalid input\\\");\\n        owner = _newOwner;\\n        emit OwnerChanged(owner, _newOwner);\\n    }\\n\\n    /**\\n    * @dev Check if there is a pending balance to withdraw in zkSync and withdraw it if applicable.\\n    * @param _token The token to withdraw.\\n    */\\n    function transferFromZkSync(address _token) internal {\\n        uint128 pendingBalance = IZkSync(zkSync).getPendingBalance(address(this), _token);\\n        if (pendingBalance > 0) {\\n            IZkSync(zkSync).withdrawPendingBalance(payable(address(this)), _token, pendingBalance);\\n        }\\n    }\\n\\n    /**\\n    * @dev Deposit the ETH or ERC20 token to zkSync.\\n    * @param _outputToken The token that was given.\\n    * @param _amountOut The amount of given token.\\n    */\\n    function transferToZkSync(address _outputToken, uint256 _amountOut) internal {\\n        if (_outputToken == ETH_TOKEN) {\\n            // deposit Eth to L2 bridge\\n            IZkSync(zkSync).depositETH{value: _amountOut}(l2Account);\\n        } else {\\n            // approve the zkSync bridge to take the output token\\n            IERC20(_outputToken).approve(zkSync, _amountOut);\\n            // deposit the output token to the L2 bridge\\n            IZkSync(zkSync).depositERC20(IERC20(_outputToken), toUint104(_amountOut), l2Account);\\n        }\\n    }\\n\\n    /**\\n    * @dev Safety method to recover ETH or ERC20 tokens that are sent to the contract by error.\\n    * @param _token The token to recover.\\n    */\\n    function recoverToken(address _recipient, address _token) external onlyOwner returns (uint256 balance) {\\n        bool success;\\n        if (_token == ETH_TOKEN) {\\n            balance = address(this).balance;\\n            (success, ) = _recipient.call{value: balance}(\\\"\\\");\\n        } else {\\n            balance = IERC20(_token).balanceOf(address(this));\\n            success = IERC20(_token).transfer(_recipient, balance);\\n        }\\n        require(success, \\\"failed to recover\\\");\\n    }\\n\\n    /**\\n     * @dev fallback method to make sure we can receive ETH\\n     */\\n    receive() external payable {\\n        \\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGroController.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IGroController {\\n\\n    function DAI() external view returns (address);\\n    function USDC() external view returns (address);\\n    function USDT() external view returns (address);\\n\\n    function stablecoins() external view returns (address[3] memory);\\n    function buoy() external view returns (address);\\n    function depositHandler() external view returns (address);\\n    function withdrawHandler() external view returns (address);\\n    function gvt() external view returns (address);\\n    function pwrd() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGroToken.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IGroToken is IERC20 {\\n    function pricePerShare() external view returns (uint256);\\n\\n    function getShareAssets(uint256) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGroDepositHandler.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IGroDepositHandler {\\n\\n    function depositGvt(\\n        uint256[3] calldata inAmounts,\\n        uint256 minAmount,\\n        address referral\\n    ) external;\\n\\n    function depositPwrd(\\n        uint256[3] calldata inAmounts,\\n        uint256 minAmount,\\n        address referral\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGroWithdrawHandler.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IGroWithdrawHandler {\\n\\n    function withdrawalFee(bool pwrd) external view returns (uint256);\\n\\n    function withdrawByLPToken(\\n        bool pwrd,\\n        uint256 lpAmount,\\n        uint256[3] calldata minAmounts\\n    ) external;\\n\\n    function withdrawByStablecoin(\\n        bool pwrd,\\n        uint256 index,\\n        uint256 lpAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function withdrawAllSingle(\\n        bool pwrd,\\n        uint256 index,\\n        uint256 minAmount\\n    ) external;\\n\\n    function withdrawAllBalanced(bool pwrd, uint256[3] calldata minAmounts) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGroBuoy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IGroBuoy {\\n    function safetyCheck() external view returns (bool);\\n\\n    function updateRatios() external returns (bool);\\n\\n    function updateRatiosWithTolerance(uint256 tolerance) external returns (bool);\\n\\n    function lpToUsd(uint256 inAmount) external view returns (uint256);\\n\\n    function usdToLp(uint256 inAmount) external view returns (uint256);\\n\\n    function stableToUsd(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\\n\\n    function stableToLp(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\\n\\n    function singleStableFromLp(uint256 inAmount, int128 i) external view returns (uint256);\\n\\n    function getVirtualPrice() external view returns (uint256);\\n\\n    function singleStableFromUsd(uint256 inAmount, int128 i) external view returns (uint256);\\n\\n    function singleStableToUsd(uint256 inAmount, uint256 i) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZkSync.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZkSync {\\n    function getPendingBalance(address _address, address _token) external view returns (uint128);\\n    function withdrawPendingBalance(address payable _owner, address _token, uint128 _amount) external;\\n    function depositETH(address _zkSyncAddress) external payable;\\n    function depositERC20(IERC20 _token, uint104 _amount, address _zkSyncAddress) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBridgeSwapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.3;\\n\\ninterface IBridgeSwapper {\\n    event Swapped(address _inputToken, uint256 _amountIn, address _outputToken, uint256 _amountOut);\\n\\n    /**\\n    * @notice Perform an exchange between two tokens\\n    * @dev Index values can usually be found via the constructor arguments (if not hardcoded)\\n    * @param _indexIn Index value for the token to send\\n    * @param _indexOut Index valie of the token to receive\\n    * @param _amountIn Amount of `_indexIn` being exchanged\\n    * @return Actual amount of `_indexOut` received\\n    */\\n    function exchange(uint256 _indexIn, uint256 _indexOut, uint256 _amountIn, uint256 _minAmountOut) external returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zkSync\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_groController\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stablecoinIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_groReferral\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippagePercent\",\"type\":\"uint256\"}],\"name\":\"SlippageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buoy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_indexIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gvt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Account\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablecoinIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkSync\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GroGvtBridgeSwapper", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000abea9132b05a70803a4e85094fd0e1800777fbef000000000000000000000000e4c0297ba4722d702a19cf0ab95b24658e8ad7d3000000000000000000000000cc5c60a319d33810b9eab9764717eef84defb8f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000002f6579f6031e85b8862848b90118bb12c0ea5a31", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}