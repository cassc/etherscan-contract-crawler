{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Conjure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\nimport {IOpenOracleFramework} from \\\"./interfaces/IOpenOracleFramework.sol\\\";\\nimport \\\"./lib/FixedPoint.sol\\\";\\nimport \\\"./interfaces/IEtherCollateral.sol\\\";\\n\\n/// @author Conjure Finance Team\\n/// @title Conjure\\n/// @notice Contract to define and track the price of an arbitrary synth\\ncontract Conjure is IERC20, ReentrancyGuard {\\n\\n    // using Openzeppelin contracts for SafeMath and Address\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using FixedPoint for FixedPoint.uq112x112;\\n    using FixedPoint for FixedPoint.uq144x112;\\n\\n    // presenting the total supply\\n    uint256 internal _totalSupply;\\n\\n    // representing the name of the token\\n    string internal _name;\\n\\n    // representing the symbol of the token\\n    string internal _symbol;\\n\\n    // representing the decimals of the token\\n    uint8 internal constant DECIMALS = 18;\\n\\n    // a record of balance of a specific account by address\\n    mapping(address => uint256) private _balances;\\n\\n    // a record of allowances for a specific address by address to address mapping\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    // the owner of the contract\\n    address payable public _owner;\\n\\n    // the type of the arb asset (single asset, arb asset)\\n    // 0... single asset     (uses median price)\\n    // 1... basket asset     (uses weighted average price)\\n    // 2... index asset      (uses token address and oracle to get supply and price and calculates supply * price / divisor)\\n    // 3 .. sqrt index asset (uses token address and oracle to get supply and price and calculates sqrt(supply * price) / divisor)\\n    uint256 public _assetType;\\n\\n    // the address of the collateral contract factory\\n    address public _factoryContract;\\n\\n    // the address of the collateral contract\\n    address public _collateralContract;\\n\\n    // struct for oracles\\n    struct _oracleStruct {\\n        address oracleaddress;\\n        address tokenaddress;\\n        // 0... chainLink, 1... UniSwap T-wap, 2... custom\\n        uint256 oracleType;\\n        string signature;\\n        bytes calldatas;\\n        uint256 weight;\\n        uint256 decimals;\\n        uint256 values;\\n    }\\n\\n    // array for oracles\\n    _oracleStruct[] public _oracleData;\\n\\n    // number of oracles\\n    uint256 public _numoracles;\\n\\n    // the latest observed price\\n    uint256 internal _latestobservedprice;\\n\\n    // the latest observed price timestamp\\n    uint256 internal _latestobservedtime;\\n\\n    // the divisor for the index\\n    uint256 public _indexdivisor;\\n\\n    // the modifier if the asset type is an inverse type\\n    bool public _inverse;\\n\\n    // shows the init state of the contract\\n    bool public _inited;\\n\\n    // the modifier if the asset type is an inverse type\\n    uint256 public _deploymentPrice;\\n\\n    // maximum decimal size for the used prices\\n    uint256 private constant MAXIMUM_DECIMALS = 18;\\n\\n    // The number representing 1.0\\n    uint256 private constant UNIT = 10**18;\\n\\n    // the eth usd price feed oracle address\\n    address public ethUsdOracle;\\n\\n    // lower boundary for inverse assets (10% of deployment price)\\n    uint256 public inverseLowerCap;\\n\\n    // ========== EVENTS ==========\\n    event NewOwner(address newOwner);\\n    event Issued(address indexed account, uint256 value);\\n    event Burned(address indexed account, uint256 value);\\n    event AssetTypeSet(uint256 value);\\n    event IndexDivisorSet(uint256 value);\\n    event PriceUpdated(uint256 value);\\n    event InverseSet(bool value);\\n    event NumOraclesSet(uint256 value);\\n\\n    // only owner modifier\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    // only owner view\\n    function _onlyOwner() private view {\\n        require(msg.sender == _owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    constructor() {\\n        // Don't allow implementation to be initialized.\\n        _factoryContract = address(1);\\n    }\\n\\n    /**\\n     * @dev initializes the clone implementation and the Conjure contract\\n     *\\n     * @param nameSymbol array holding the name and the symbol of the asset\\n     * @param conjureAddresses array holding the owner, indexed UniSwap oracle and ethUsdOracle address\\n     * @param factoryAddress_ the address of the factory\\n     * @param collateralContract the EtherCollateral contract of the asset\\n    */\\n    function initialize(\\n        string[2] memory nameSymbol,\\n        address[] memory conjureAddresses,\\n        address factoryAddress_,\\n        address collateralContract\\n    ) external\\n    {\\n        require(_factoryContract == address(0), \\\"already initialized\\\");\\n        require(factoryAddress_ != address(0), \\\"factory can not be null\\\");\\n        require(collateralContract != address(0), \\\"collateralContract can not be null\\\");\\n\\n        _owner = payable(conjureAddresses[0]);\\n        _name = nameSymbol[0];\\n        _symbol = nameSymbol[1];\\n\\n        ethUsdOracle = conjureAddresses[1];\\n        _factoryContract = factoryAddress_;\\n\\n        // mint new EtherCollateral contract\\n        _collateralContract = collateralContract;\\n\\n        emit NewOwner(_owner);\\n    }\\n\\n    /**\\n     * @dev inits the conjure asset can only be called by the factory address\\n     *\\n     * @param inverse_ indicated it the asset is an inverse asset or not\\n     * @param divisorAssetType array containing the divisor and the asset type\\n     * @param oracleAddresses_ the array holding the oracle addresses 1. address to call,\\n     *        2. address of the token for supply if needed\\n     * @param oracleTypesValuesWeightsDecimals array holding the oracle types,values,weights and decimals\\n     * @param signatures_ array holding the oracle signatures\\n     * @param callData_ array holding the oracle callData\\n    */\\n    function init(\\n        bool inverse_,\\n        uint256[2] memory divisorAssetType,\\n        address[][2] memory oracleAddresses_,\\n        uint256[][4] memory oracleTypesValuesWeightsDecimals,\\n        string[] memory signatures_,\\n        bytes[] memory callData_\\n    ) external {\\n        require(msg.sender == _factoryContract, \\\"can only be called by factory contract\\\");\\n        require(!_inited, \\\"Contract already inited\\\");\\n        require(divisorAssetType[0] != 0, \\\"Divisor should not be 0\\\");\\n\\n        _assetType = divisorAssetType[1];\\n        _numoracles = oracleAddresses_[0].length;\\n        _indexdivisor = divisorAssetType[0];\\n        _inverse = inverse_;\\n        \\n        emit AssetTypeSet(_assetType);\\n        emit IndexDivisorSet(_indexdivisor);\\n        emit InverseSet(_inverse);\\n        emit NumOraclesSet(_numoracles);\\n\\n        uint256 weightCheck;\\n\\n        // push the values into the oracle struct for further processing\\n        for (uint i = 0; i < oracleAddresses_[0].length; i++) {\\n            require(oracleTypesValuesWeightsDecimals[3][i] <= 18, \\\"Decimals too high\\\");\\n            _oracleData.push(_oracleStruct({\\n                oracleaddress: oracleAddresses_[0][i],\\n                tokenaddress: oracleAddresses_[1][i],\\n                oracleType: oracleTypesValuesWeightsDecimals[0][i],\\n                signature: signatures_[i],\\n                calldatas: callData_[i],\\n                weight: oracleTypesValuesWeightsDecimals[2][i],\\n                values: oracleTypesValuesWeightsDecimals[1][i],\\n                decimals: oracleTypesValuesWeightsDecimals[3][i]\\n            }));\\n\\n            weightCheck += oracleTypesValuesWeightsDecimals[2][i];\\n        }\\n\\n        // for basket assets weights must add up to 100\\n        if (_assetType == 1) {\\n            require(weightCheck == 100, \\\"Weights not 100\\\");\\n        }\\n\\n        updatePrice();\\n        _deploymentPrice = getLatestPrice();\\n\\n        // for inverse assets set boundaries\\n        if (_inverse) {\\n            inverseLowerCap = _deploymentPrice.div(10);\\n        }\\n\\n        _inited = true;\\n    }\\n\\n    /**\\n     * @dev lets the EtherCollateral contract instance burn synths\\n     *\\n     * @param account the account address where the synths should be burned to\\n     * @param amount the amount to be burned\\n    */\\n    function burn(address account, uint amount) external {\\n        require(msg.sender == _collateralContract, \\\"Only Collateral Contract\\\");\\n        _internalBurn(account, amount);\\n    }\\n\\n    /**\\n     * @dev lets the EtherCollateral contract instance mint new synths\\n     *\\n     * @param account the account address where the synths should be minted to\\n     * @param amount the amount to be minted\\n    */\\n    function mint(address account, uint amount) external {\\n        require(msg.sender == _collateralContract, \\\"Only Collateral Contract\\\");\\n        _internalIssue(account, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to mint new synths\\n     *\\n     * @param account the account address where the synths should be minted to\\n     * @param amount the amount to be minted\\n    */\\n    function _internalIssue(address account, uint amount) internal {\\n        _balances[account] = _balances[account].add(amount);\\n        _totalSupply = _totalSupply.add(amount);\\n\\n        emit Transfer(address(0), account, amount);\\n        emit Issued(account, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn synths\\n     *\\n     * @param account the account address where the synths should be burned to\\n     * @param amount the amount to be burned\\n    */\\n    function _internalBurn(address account, uint amount) internal {\\n        _balances[account] = _balances[account].sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Transfer(account, address(0), amount);\\n        emit Burned(account, amount);\\n    }\\n\\n    /**\\n     * @dev lets the owner change the contract owner\\n     *\\n     * @param _newOwner the new owner address of the contract\\n    */\\n    function changeOwner(address payable _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"_newOwner can not be null\\\");\\n    \\n        _owner = _newOwner;\\n        emit NewOwner(_newOwner);\\n    }\\n\\n    /**\\n     * @dev lets the owner collect the fees accrued\\n    */\\n    function collectFees() external onlyOwner {\\n        _owner.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev gets the latest price of an oracle asset\\n     * uses chainLink oracles to get the price\\n     *\\n     * @return the current asset price\\n    */\\n    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (uint) {\\n        (\\n        ,\\n        int price,\\n        ,\\n        ,\\n        ) = priceFeed.latestRoundData();\\n\\n        return uint(price);\\n    }\\n\\n    /**\\n     * @dev gets the latest ETH USD Price from the given oracle OOF contract\\n     * getFeed 0 signals the ETH/USD feed\\n     *\\n     * @return the current eth usd price\\n    */\\n    function getLatestETHUSDPrice() public view returns (uint) {\\n        (\\n        uint price,\\n        ,\\n        ) = IOpenOracleFramework(ethUsdOracle).getFeed(0);\\n\\n        return price;\\n    }\\n\\n    /**\\n    * @dev implementation of a quicksort algorithm\\n    *\\n    * @param arr the array to be sorted\\n    * @param left the left outer bound element to start the sort\\n    * @param right the right outer bound element to stop the sort\\n    */\\n    function quickSort(uint[] memory arr, int left, int right) internal pure {\\n        int i = left;\\n        int j = right;\\n        if (i == j) return;\\n        uint pivot = arr[uint(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint(i)] < pivot) i++;\\n            while (pivot < arr[uint(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j)\\n            quickSort(arr, left, j);\\n        if (i < right)\\n            quickSort(arr, i, right);\\n    }\\n\\n    /**\\n    * @dev implementation to get the average value of an array\\n    *\\n    * @param arr the array to be averaged\\n    * @return the (weighted) average price of an asset\\n    */\\n    function getAverage(uint[] memory arr) internal view returns (uint) {\\n        uint sum = 0;\\n\\n        // do the sum of all array values\\n        for (uint i = 0; i < arr.length; i++) {\\n            sum += arr[i];\\n        }\\n        // if we dont have any weights (single asset with even array members)\\n        if (_assetType == 0) {\\n            return (sum / arr.length);\\n        }\\n        // index pricing we do division by divisor\\n        if ((_assetType == 2) || (_assetType == 3)) {\\n            return sum / _indexdivisor;\\n        }\\n        // divide by 100 cause the weights sum up to 100 and divide by the divisor if set (defaults to 1)\\n        return ((sum / 100) / _indexdivisor);\\n    }\\n\\n    /**\\n    * @dev sort implementation which calls the quickSort function\\n    *\\n    * @param data the array to be sorted\\n    * @return the sorted array\\n    */\\n    function sort(uint[] memory data) internal pure returns (uint[] memory) {\\n        quickSort(data, int(0), int(data.length - 1));\\n        return data;\\n    }\\n\\n    /**\\n    * @dev implementation of a square rooting algorithm\\n    * babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    *\\n    * @param y the value to be square rooted\\n    * @return z the square rooted value\\n    */\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = (y + 1) / 2;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        else {\\n            z = 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev gets the latest recorded price of the synth in USD\\n     *\\n     * @return the last recorded synths price\\n    */\\n    function getLatestPrice() public view returns (uint) {\\n        return _latestobservedprice;\\n    }\\n\\n    /**\\n     * @dev gets the latest recorded price time\\n     *\\n     * @return the last recorded time of a synths price\\n    */\\n    function getLatestPriceTime() external view returns (uint) {\\n        return _latestobservedtime;\\n    }\\n\\n    /**\\n     * @dev gets the latest price of the synth in USD by calculation and write the checkpoints for view functions\\n    */\\n    function updatePrice() public {\\n        uint256 returnPrice = updateInternalPrice();\\n        bool priceLimited;\\n\\n        // if it is an inverse asset we do price = _deploymentPrice - (current price - _deploymentPrice)\\n        // --> 2 * deployment price - current price\\n        // but only if the asset is inited otherwise we return the normal price calculation\\n        if (_inverse && _inited) {\\n            if (_deploymentPrice.mul(2) <= returnPrice) {\\n                returnPrice = 0;\\n            } else {\\n                returnPrice = _deploymentPrice.mul(2).sub(returnPrice);\\n\\n                // limit to lower cap\\n                if (returnPrice <= inverseLowerCap) {\\n                    priceLimited = true;\\n                }\\n            }\\n        }\\n\\n        _latestobservedprice = returnPrice;\\n        _latestobservedtime = block.timestamp;\\n\\n        emit PriceUpdated(_latestobservedprice);\\n\\n        // if price reaches 0 we close the collateral contract and no more loans can be opened\\n        if ((returnPrice <= 0) || (priceLimited)) {\\n            IEtherCollateral(_collateralContract).setAssetClosed(true);\\n        } else {\\n            // if the asset was set closed we open it again for loans\\n            if (IEtherCollateral(_collateralContract).getAssetClosed()) {\\n                IEtherCollateral(_collateralContract).setAssetClosed(false);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev gets the latest price of the synth in USD by calculation --> internal calculation\\n     *\\n     * @return the current synths price\\n    */\\n    function updateInternalPrice() internal returns (uint) {\\n        require(_oracleData.length > 0, \\\"No oracle feeds supplied\\\");\\n        // storing all in an array for further processing\\n        uint[] memory prices = new uint[](_oracleData.length);\\n\\n        for (uint i = 0; i < _oracleData.length; i++) {\\n\\n            // chainLink oracle\\n            if (_oracleData[i].oracleType == 0) {\\n                AggregatorV3Interface priceFeed = AggregatorV3Interface(_oracleData[i].oracleaddress);\\n                prices[i] = getLatestPrice(priceFeed);\\n\\n                // norming price\\n                if (MAXIMUM_DECIMALS != _oracleData[i].decimals) {\\n                    prices[i] = prices[i] * 10 ** (MAXIMUM_DECIMALS - _oracleData[i].decimals);\\n                }\\n            }\\n\\n            // custom oracle and UniSwap\\n            else {\\n                string memory signature = _oracleData[i].signature;\\n                bytes memory callDatas = _oracleData[i].calldatas;\\n\\n                bytes memory callData;\\n\\n                if (bytes(signature).length == 0) {\\n                    callData = callDatas;\\n                } else {\\n                    callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), callDatas);\\n                }\\n\\n                (bool success, bytes memory data) = _oracleData[i].oracleaddress.call{value:_oracleData[i].values}(callData);\\n                require(success, \\\"Call unsuccessful\\\");\\n\\n                // UniSwap V2 use NDX Custom Oracle call\\n                if (_oracleData[i].oracleType == 1) {\\n                    FixedPoint.uq112x112 memory price = abi.decode(data, (FixedPoint.uq112x112));\\n\\n                    // since this oracle is using token / eth prices we have to norm it to usd prices\\n                    prices[i] = price.mul(getLatestETHUSDPrice()).decode144();\\n                }\\n                else {\\n                    prices[i] = abi.decode(data, (uint));\\n\\n                    // norming price\\n                    if (MAXIMUM_DECIMALS != _oracleData[i].decimals) {\\n                        prices[i] = prices[i] * 10 ** (MAXIMUM_DECIMALS - _oracleData[i].decimals);\\n                    }\\n                }\\n            }\\n\\n            // for market cap and sqrt market cap asset types\\n            if (_assetType == 2 || _assetType == 3) {\\n                // get total supply for indexes\\n                uint tokenTotalSupply = IERC20(_oracleData[i].tokenaddress).totalSupply();\\n                uint tokenDecimals = IERC20(_oracleData[i].tokenaddress).decimals();\\n\\n                // norm total supply\\n                if (MAXIMUM_DECIMALS != tokenDecimals) {\\n                    require(tokenDecimals <= 18, \\\"Decimals too high\\\");\\n                    tokenTotalSupply = tokenTotalSupply * 10 ** (MAXIMUM_DECIMALS - tokenDecimals);\\n                }\\n\\n                // index use market cap\\n                if (_assetType == 2) {\\n                    prices[i] = (prices[i].mul(tokenTotalSupply) / UNIT);\\n                }\\n\\n                // sqrt market cap\\n                if (_assetType == 3) {\\n                    // market cap\\n                    prices[i] =prices[i].mul(tokenTotalSupply) / UNIT;\\n                    // sqrt market cap\\n                    prices[i] = sqrt(prices[i]);\\n                }\\n            }\\n\\n            // if we have a basket asset we use weights provided\\n            if (_assetType == 1) {\\n                prices[i] = prices[i] * _oracleData[i].weight;\\n            }\\n        }\\n\\n        uint[] memory sorted = sort(prices);\\n\\n        /// for single assets return median\\n        if (_assetType == 0) {\\n\\n            // uneven so we can take the middle\\n            if (sorted.length % 2 == 1) {\\n                uint sizer = (sorted.length + 1) / 2;\\n\\n                return sorted[sizer-1];\\n            // take average of the 2 most inner numbers\\n            } else {\\n                uint size1 = (sorted.length) / 2;\\n                uint[] memory sortedMin = new uint[](2);\\n\\n                sortedMin[0] = sorted[size1-1];\\n                sortedMin[1] = sorted[size1];\\n\\n                return getAverage(sortedMin);\\n            }\\n        }\\n\\n        // else return average for arb assets\\n        return getAverage(sorted);\\n    }\\n\\n    /**\\n     * ERC 20 Specific Functions\\n    */\\n\\n    /**\\n    * receive function to receive funds\\n    */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external override view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external override view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external override pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    /**\\n    * @dev See {IERC20-totalSupply}.\\n    */\\n    function totalSupply() external override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n    * @dev See {IERC20-balanceOf}. Uses burn abstraction for balance updates without gas and universally.\\n    */\\n    function balanceOf(address account) external override view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n    * @dev See {IERC20-transfer}.\\n    *\\n    * Requirements:\\n    *\\n    * - `recipient` cannot be the zero address.\\n    * - the caller must have a balance of at least `amount`.\\n    */\\n    function transfer(address dst, uint256 rawAmount) external override returns (bool) {\\n        uint256 amount = rawAmount;\\n        _transfer(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n    external\\n    override\\n    view\\n    returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n    external\\n    override\\n    returns (bool)\\n    {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address src, address dst, uint256 rawAmount) external override returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = _allowances[src][spender];\\n        uint256 amount = rawAmount;\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(\\n                amount,\\n                    \\\"CONJURE::transferFrom: transfer amount exceeds spender allowance\\\"\\n            );\\n\\n            _allowances[src][spender] = newAllowance;\\n        }\\n\\n        _transfer(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOpenOracleFramework.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the OpenOracleFramework contract\\n */\\ninterface IOpenOracleFramework {\\n    /**\\n    * @dev initialize function lets the factory init the cloned contract and set it up\\n    *\\n    * @param signers_ array of signer addresses\\n    * @param signerThreshold_ the threshold which has to be met for consensus\\n    * @param payoutAddress_ the address where all fees will be sent to. 0 address for an even split across signers\\n    * @param subscriptionPassPrice_ the price for an oracle subscription pass\\n    * @param factoryContract_ the address of the factory contract\\n    */\\n    function initialize(\\n        address[] memory signers_,\\n        uint256 signerThreshold_,\\n        address payable payoutAddress_,\\n        uint256 subscriptionPassPrice_,\\n        address factoryContract_\\n    ) external;\\n\\n    /**\\n    * @dev getHistoricalFeeds function lets the caller receive historical values for a given timestamp\\n    *\\n    * @param feedIDs the array of feedIds\\n    * @param timestamps the array of timestamps\\n    */\\n    function getHistoricalFeeds(uint256[] memory feedIDs, uint256[] memory timestamps) external view returns (uint256[] memory);\\n\\n    /**\\n    * @dev getFeeds function lets anyone call the oracle to receive data (maybe pay an optional fee)\\n    *\\n    * @param feedIDs the array of feedIds\\n    */\\n    function getFeeds(uint256[] memory feedIDs) external view returns (uint256[] memory, uint256[] memory, uint256[] memory);\\n\\n    /**\\n    * @dev getFeed function lets anyone call the oracle to receive data (maybe pay an optional fee)\\n    *\\n    * @param feedID the array of feedId\\n    */\\n    function getFeed(uint256 feedID) external view returns (uint256, uint256, uint256);\\n\\n    /**\\n    * @dev getFeedList function returns the metadata of a feed\\n    *\\n    * @param feedIDs the array of feedId\\n    */\\n    function getFeedList(uint256[] memory feedIDs) external view returns(string[] memory, uint256[] memory, uint256[] memory, uint256[] memory, uint256[] memory);\\n\\n    /**\\n    * @dev withdrawFunds function sends the collected fees to the given address\\n    */\\n    function withdrawFunds() external;\\n\\n    /**\\n    * @dev creates new oracle data feeds\\n    *\\n    * @param names the names of the new feeds\\n    * @param descriptions the description of the new feeds\\n    * @param decimals the decimals of the new feeds\\n    * @param timeslots the timeslots of the new feeds\\n    * @param feedCosts the costs of the new feeds\\n    * @param revenueModes the revenue modes of the new feeds\\n    */\\n    function createNewFeeds(string[] memory names, string[] memory descriptions, uint256[] memory decimals, uint256[] memory timeslots, uint256[] memory feedCosts, uint256[] memory revenueModes) external;\\n\\n    /**\\n    * @dev submits multiple feed values\\n    *\\n    * @param feedIDs the array of feedId\\n    * @param values the values to submit\\n    */\\n    function submitFeed(uint256[] memory feedIDs, uint256[] memory values) external;\\n\\n    /**\\n    * @dev signs a given proposal\\n    *\\n    * @param proposalId the id of the proposal\\n    */\\n    function signProposal(uint256 proposalId) external;\\n\\n    /**\\n    * @dev creates a new proposal\\n    *\\n    * @param uintValue value in uint representation\\n    * @param addressValue value in address representation\\n    * @param proposalType type of the proposal\\n    * @param feedId the feed id if needed\\n    */\\n    function createProposal(uint256 uintValue, address addressValue, uint256 proposalType, uint256 feedId) external;\\n\\n    /**\\n    * @dev buys a subscription to a feed\\n    *\\n    * @param feedIDs the feeds to subscribe to\\n    * @param durations the durations to subscribe\\n    * @param buyer the address which should be subscribed to the feeds\\n    */\\n    function subscribeToFeed(uint256[] memory feedIDs, uint256[] memory durations, address buyer) payable external;\\n\\n    /**\\n    * @dev buys a subscription pass for the oracle\\n    *\\n    * @param buyer the address which owns the pass\\n    * @param duration the duration to subscribe\\n    */\\n    function buyPass(address buyer, uint256 duration) payable external;\\n\\n    /**\\n    * @dev supports given Feeds\\n    *\\n    * @param feedIds the array of feeds to support\\n    * @param values the array of amounts of ETH to send to support\\n    */\\n    function supportFeeds(uint256[] memory feedIds, uint256[] memory values) payable external;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\n/************************************************************************************************\\nFrom https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/FixedPoint.sol\\n\\nCopied from the github repository at commit hash 9642a0705fdaf36b477354a4167a8cd765250860.\\n\\nModifications:\\n- Removed `sqrt` function\\n\\nSubject to the GPL-3.0 license\\n*************************************************************************************************/\\n\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint private constant Q112 = uint(1) << RESOLUTION;\\n    uint private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(\\n            y == 0 || (z = uint(self._x) * y) / y == uint(self._x),\\n            \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\"\\n        );\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEtherCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/// @author Conjure Finance Team\\n/// @title IEtherCollateral\\n/// @notice Interface for interacting with the EtherCollateral Contract\\ninterface IEtherCollateral {\\n\\n    /**\\n     * @dev Sets the assetClosed indicator if loan opening is allowed or not\\n     * Called by the Conjure contract if the asset price reaches 0.\\n    */\\n    function setAssetClosed(bool) external;\\n\\n    /**\\n     * @dev Gets the assetClosed indicator\\n    */\\n    function getAssetClosed() external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AssetTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IndexDivisorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"InverseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumOraclesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_assetType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_collateralContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deploymentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_indexdivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inverse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numoracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_oracleData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracleaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUsdOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inverse_\",\"type\":\"bool\"},{\"internalType\":\"uint256[2]\",\"name\":\"divisorAssetType\",\"type\":\"uint256[2]\"},{\"internalType\":\"address[][2]\",\"name\":\"oracleAddresses_\",\"type\":\"address[][2]\"},{\"internalType\":\"uint256[][4]\",\"name\":\"oracleTypesValuesWeightsDecimals\",\"type\":\"uint256[][4]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"callData_\",\"type\":\"bytes[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[2]\",\"name\":\"nameSymbol\",\"type\":\"string[2]\"},{\"internalType\":\"address[]\",\"name\":\"conjureAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inverseLowerCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Conjure", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}