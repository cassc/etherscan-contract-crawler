{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"AllocationVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport { IERC20 } from \\\"IERC20.sol\\\";\\nimport { DelegatedOps } from \\\"DelegatedOps.sol\\\";\\nimport { ITokenLocker } from \\\"ITokenLocker.sol\\\";\\n\\n/**\\n * @title Vesting contract for team and investors\\n * @author PrismaFi\\n * @notice Vesting contract which allows transfer of future vesting claims\\n */\\ncontract AllocationVesting is DelegatedOps {\\n    error NothingToClaim();\\n    error CannotLock();\\n    error WrongMaxTotalPreclaimPct();\\n    error PreclaimTooLarge();\\n    error AllocationsMismatch();\\n    error ZeroTotalAllocation();\\n    error ZeroAllocation();\\n    error ZeroNumberOfWeeks();\\n    error DuplicateAllocation();\\n    error InsufficientPoints();\\n    error LockedAllocation();\\n    error SelfTransfer();\\n    error IncompatibleVestingPeriod(uint256 numberOfWeeksFrom, uint256 numberOfWeeksTo);\\n\\n    struct AllocationSplit {\\n        address recipient;\\n        uint24 points;\\n        uint8 numberOfWeeks;\\n    }\\n\\n    struct AllocationState {\\n        uint24 points;\\n        uint8 numberOfWeeks;\\n        uint128 claimed;\\n        uint96 preclaimed;\\n    }\\n\\n    // This number should allow a good precision in allocation fractions\\n    uint256 private immutable totalPoints;\\n    // Users allocations\\n    mapping(address => AllocationState) public allocations;\\n    // max percentage of one's vest that can be preclaimed in total\\n    uint256 public immutable maxTotalPreclaimPct;\\n    // Total allocation expressed in tokens\\n    uint256 public immutable totalAllocation;\\n    IERC20 public immutable vestingToken;\\n    address public immutable vault;\\n    ITokenLocker public immutable tokenLocker;\\n    uint256 public immutable lockToTokenRatio;\\n    // Vesting timeline starting timestamp\\n    uint256 public immutable vestingStart;\\n\\n    constructor(\\n        IERC20 vestingToken_,\\n        ITokenLocker tokenLocker_,\\n        uint256 totalAllocation_,\\n        address vault_,\\n        uint256 maxTotalPreclaimPct_,\\n        uint256 vestingStart_,\\n        AllocationSplit[] memory allocationSplits\\n    ) {\\n        if (totalAllocation_ == 0) revert ZeroTotalAllocation();\\n        if (maxTotalPreclaimPct_ > 20) revert WrongMaxTotalPreclaimPct();\\n        vault = vault_;\\n        tokenLocker = tokenLocker_;\\n        vestingToken = vestingToken_;\\n        totalAllocation = totalAllocation_;\\n        lockToTokenRatio = tokenLocker_.lockToTokenRatio();\\n        maxTotalPreclaimPct = maxTotalPreclaimPct_;\\n\\n        vestingStart = vestingStart_;\\n        uint256 loopEnd = allocationSplits.length;\\n        uint256 total;\\n        for (uint256 i; i < loopEnd; ) {\\n            address recipient = allocationSplits[i].recipient;\\n            uint8 numberOfWeeks = allocationSplits[i].numberOfWeeks;\\n            uint256 points = allocationSplits[i].points;\\n            if (points == 0) revert ZeroAllocation();\\n            if (numberOfWeeks == 0) revert ZeroNumberOfWeeks();\\n            if (allocations[recipient].numberOfWeeks > 0) revert DuplicateAllocation();\\n            total += points;\\n            allocations[recipient].points = uint24(points);\\n            allocations[recipient].numberOfWeeks = numberOfWeeks;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        totalPoints = total;\\n    }\\n\\n    /**\\n     * @notice Claims accrued tokens for initiator and transfers a number of allocation points to a recipient\\n     * @dev Can be delegated\\n     * @param from Initiator\\n     * @param to Recipient\\n     * @param points Number of points to transfer\\n     */\\n    function transferPoints(address from, address to, uint256 points) external callerOrDelegated(from) {\\n        if (from == to) revert SelfTransfer();\\n        AllocationState memory fromAllocation = allocations[from];\\n        AllocationState memory toAllocation = allocations[to];\\n        uint8 numberOfWeeksFrom = fromAllocation.numberOfWeeks;\\n        uint8 numberOfWeeksTo = toAllocation.numberOfWeeks;\\n        uint256 pointsFrom = fromAllocation.points;\\n        if (numberOfWeeksTo != 0 && numberOfWeeksTo != numberOfWeeksFrom)\\n            revert IncompatibleVestingPeriod(numberOfWeeksFrom, numberOfWeeksTo);\\n        uint256 totalVested = _vestedAt(block.timestamp, pointsFrom, numberOfWeeksFrom);\\n        if (totalVested < fromAllocation.claimed) revert LockedAllocation();\\n        if (points == 0) revert ZeroAllocation();\\n        if (pointsFrom < points) revert InsufficientPoints();\\n        // We claim one last time before transfer\\n        uint256 claimed = _claim(from, pointsFrom, fromAllocation.claimed, numberOfWeeksFrom);\\n        // Passive balance to transfer\\n        uint128 claimedAdjustment = uint128((claimed * points) / fromAllocation.points);\\n        allocations[from].points = uint24(pointsFrom - points);\\n        // we can't use fromAllocation.claimed since the storage value was modified by the _claim() call\\n        allocations[from].claimed = allocations[from].claimed - claimedAdjustment;\\n        allocations[to].points = toAllocation.points + uint24(points);\\n        allocations[to].claimed = toAllocation.claimed + claimedAdjustment;\\n        // Transfer preclaimed pro-rata to avoid limit gaming\\n        uint256 preclaimedToTransfer = (fromAllocation.preclaimed * points) / pointsFrom;\\n        allocations[to].preclaimed = uint96(toAllocation.preclaimed + preclaimedToTransfer);\\n        allocations[from].preclaimed = uint96(fromAllocation.preclaimed - preclaimedToTransfer);\\n        if (numberOfWeeksTo == 0) {\\n            allocations[to].numberOfWeeks = numberOfWeeksFrom;\\n        }\\n    }\\n\\n    /**\\n     * @notice Lock future claimable tokens tokens\\n     * @dev Can be delegated\\n     * @param account Account to lock for\\n     * @param amount Amount to preclaim\\n     */\\n    function lockFutureClaims(address account, uint256 amount) external callerOrDelegated(account) {\\n        lockFutureClaimsWithReceiver(account, account, amount);\\n    }\\n\\n    /**\\n     * @notice Lock future claimable tokens tokens\\n     * @dev Can be delegated\\n     * @param account Account to lock for\\n     * @param receiver Receiver of the lock\\n     * @param amount Amount to preclaim. If 0 the maximum allowed will be locked\\n     */\\n    function lockFutureClaimsWithReceiver(\\n        address account,\\n        address receiver,\\n        uint256 amount\\n    ) public callerOrDelegated(account) {\\n        AllocationState memory allocation = allocations[account];\\n        if (allocation.points == 0 || vestingStart == 0) revert CannotLock();\\n        uint256 claimedUpdated = allocation.claimed;\\n        if (_claimableAt(block.timestamp, allocation.points, allocation.claimed, allocation.numberOfWeeks) > 0) {\\n            claimedUpdated = _claim(account, allocation.points, allocation.claimed, allocation.numberOfWeeks);\\n        }\\n        uint256 userAllocation = (allocation.points * totalAllocation) / totalPoints;\\n        uint256 _unclaimed = userAllocation - claimedUpdated;\\n        uint256 preclaimed = allocation.preclaimed;\\n        uint256 maxTotalPreclaim = (maxTotalPreclaimPct * userAllocation) / 100;\\n        uint256 leftToPreclaim = maxTotalPreclaim - preclaimed;\\n        if (amount == 0) amount = leftToPreclaim > _unclaimed ? _unclaimed : leftToPreclaim;\\n        else if (preclaimed + amount > maxTotalPreclaim || amount > _unclaimed) revert PreclaimTooLarge();\\n        amount = (amount / lockToTokenRatio) * lockToTokenRatio; // truncating the dust\\n        allocations[account].claimed = uint128(claimedUpdated + amount);\\n        allocations[account].preclaimed = uint96(preclaimed + amount);\\n        vestingToken.transferFrom(vault, address(this), amount);\\n        tokenLocker.lock(receiver, amount / lockToTokenRatio, 52);\\n    }\\n\\n    /**\\n     *\\n     * @notice Claims accrued tokens\\n     * @dev Can be delegated\\n     * @param account Account to claim for\\n     */\\n    function claim(address account) external callerOrDelegated(account) {\\n        AllocationState memory allocation = allocations[account];\\n        _claim(account, allocation.points, allocation.claimed, allocation.numberOfWeeks);\\n    }\\n\\n    // This function exists to avoid reloading the AllocationState struct in memory\\n    function _claim(\\n        address account,\\n        uint256 points,\\n        uint256 claimed,\\n        uint256 numberOfWeeks\\n    ) private returns (uint256 claimedUpdated) {\\n        if (points == 0) revert NothingToClaim();\\n        uint256 claimable = _claimableAt(block.timestamp, points, claimed, numberOfWeeks);\\n        if (claimable == 0) revert NothingToClaim();\\n        claimedUpdated = claimed + claimable;\\n        allocations[account].claimed = uint128(claimedUpdated);\\n        // We send to delegate for possible zaps\\n        vestingToken.transferFrom(vault, msg.sender, claimable);\\n    }\\n\\n    /**\\n     * @notice Calculates number of tokens claimable by the user at the current block\\n     * @param account Account to calculate for\\n     * @return claimable Accrued tokens\\n     */\\n    function claimableNow(address account) external view returns (uint256 claimable) {\\n        AllocationState memory allocation = allocations[account];\\n        claimable = _claimableAt(block.timestamp, allocation.points, allocation.claimed, allocation.numberOfWeeks);\\n    }\\n\\n    function _claimableAt(\\n        uint256 when,\\n        uint256 points,\\n        uint256 claimed,\\n        uint256 numberOfWeeks\\n    ) private view returns (uint256) {\\n        uint256 totalVested = _vestedAt(when, points, numberOfWeeks);\\n        return totalVested > claimed ? totalVested - claimed : 0;\\n    }\\n\\n    function _vestedAt(uint256 when, uint256 points, uint256 numberOfWeeks) private view returns (uint256 vested) {\\n        if (vestingStart == 0 || numberOfWeeks == 0) return 0;\\n        uint256 vestingWeeks = numberOfWeeks * 1 weeks;\\n        uint256 vestingEnd = vestingStart + vestingWeeks;\\n        uint256 endTime = when >= vestingEnd ? vestingEnd : when;\\n        uint256 timeSinceStart = endTime - vestingStart;\\n        vested = (totalAllocation * timeSinceStart * points) / (totalPoints * vestingWeeks);\\n    }\\n\\n    /**\\n     * @notice Calculates the total number of tokens left unclaimed by the user including unvested ones\\n     * @param account Account to calculate for\\n     * @return Unclaimed tokens\\n     */\\n    function unclaimed(address account) external view returns (uint256) {\\n        AllocationState memory allocation = allocations[account];\\n        uint256 accountAllocation = (totalAllocation * allocation.points) / totalPoints;\\n        return accountAllocation - allocation.claimed;\\n    }\\n\\n    /**\\n     * @notice Calculates the total number of tokens left to preclaim\\n     * @param account Account to calculate for\\n     * @return Preclaimable tokens\\n     */\\n    function preclaimable(address account) external view returns (uint256) {\\n        AllocationState memory allocation = allocations[account];\\n        if (allocation.points == 0 || vestingStart == 0) return 0;\\n        uint256 userAllocation = (allocation.points * totalAllocation) / totalPoints;\\n        uint256 preclaimed = allocation.preclaimed;\\n        uint256 maxTotalPreclaim = (maxTotalPreclaimPct * userAllocation) / 100;\\n        return maxTotalPreclaim - preclaimed;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"DelegatedOps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n    @title Prisma Delegated Operations\\n    @notice Allows delegation to specific contract functionality. Useful for creating\\n            wrapper contracts to bundle multiple interactions into a single call.\\n\\n            Functions that supports delegation should include an `account` input allowing\\n            the delegated caller to indicate who they are calling on behalf of. In executing\\n            the call, all internal state updates should be applied for `account` and all\\n            value transfers should occur to or from the caller.\\n\\n            For example: a delegated call to `openTrove` should transfer collateral\\n            from the caller, create the debt position for `account`, and send newly\\n            minted tokens to the caller.\\n */\\ncontract DelegatedOps {\\n    mapping(address owner => mapping(address caller => bool isApproved)) public isApprovedDelegate;\\n\\n    modifier callerOrDelegated(address _account) {\\n        require(msg.sender == _account || isApprovedDelegate[_account][msg.sender], \\\"Delegate not approved\\\");\\n        _;\\n    }\\n\\n    function setDelegateApproval(address _delegate, bool _isApproved) external {\\n        isApprovedDelegate[msg.sender][_delegate] = _isApproved;\\n    }\\n}\\n\"\r\n    },\r\n    \"ITokenLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITokenLocker {\\n    struct LockData {\\n        uint256 amount;\\n        uint256 weeksToUnlock;\\n    }\\n    struct ExtendLockData {\\n        uint256 amount;\\n        uint256 currentWeeks;\\n        uint256 newWeeks;\\n    }\\n\\n    event LockCreated(address indexed account, uint256 amount, uint256 _weeks);\\n    event LockExtended(address indexed account, uint256 amount, uint256 _weeks, uint256 newWeeks);\\n    event LocksCreated(address indexed account, LockData[] newLocks);\\n    event LocksExtended(address indexed account, ExtendLockData[] locks);\\n    event LocksFrozen(address indexed account, uint256 amount);\\n    event LocksUnfrozen(address indexed account, uint256 amount);\\n    event LocksWithdrawn(address indexed account, uint256 withdrawn, uint256 penalty);\\n\\n    function extendLock(uint256 _amount, uint256 _weeks, uint256 _newWeeks) external returns (bool);\\n\\n    function extendMany(ExtendLockData[] calldata newExtendLocks) external returns (bool);\\n\\n    function freeze() external;\\n\\n    function getAccountWeightWrite(address account) external returns (uint256);\\n\\n    function getTotalWeightWrite() external returns (uint256);\\n\\n    function lock(address _account, uint256 _amount, uint256 _weeks) external returns (bool);\\n\\n    function lockMany(address _account, LockData[] calldata newLocks) external returns (bool);\\n\\n    function setPenaltyWithdrawalsEnabled(bool _enabled) external returns (bool);\\n\\n    function unfreeze(bool keepIncentivesVote) external;\\n\\n    function withdrawExpiredLocks(uint256 _weeks) external returns (bool);\\n\\n    function withdrawWithPenalty(uint256 amountToWithdraw) external returns (uint256);\\n\\n    function MAX_LOCK_WEEKS() external view returns (uint256);\\n\\n    function PRISMA_CORE() external view returns (address);\\n\\n    function getAccountActiveLocks(\\n        address account,\\n        uint256 minWeeks\\n    ) external view returns (LockData[] memory lockData, uint256 frozenAmount);\\n\\n    function getAccountBalances(address account) external view returns (uint256 locked, uint256 unlocked);\\n\\n    function getAccountWeight(address account) external view returns (uint256);\\n\\n    function getAccountWeightAt(address account, uint256 week) external view returns (uint256);\\n\\n    function getTotalWeight() external view returns (uint256);\\n\\n    function getTotalWeightAt(uint256 week) external view returns (uint256);\\n\\n    function getWeek() external view returns (uint256 week);\\n\\n    function getWithdrawWithPenaltyAmounts(\\n        address account,\\n        uint256 amountToWithdraw\\n    ) external view returns (uint256 amountWithdrawn, uint256 penaltyAmountPaid);\\n\\n    function guardian() external view returns (address);\\n\\n    function incentiveVoter() external view returns (address);\\n\\n    function lockToTokenRatio() external view returns (uint256);\\n\\n    function lockToken() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function penaltyWithdrawalsEnabled() external view returns (bool);\\n\\n    function prismaCore() external view returns (address);\\n\\n    function totalDecayRate() external view returns (uint32);\\n\\n    function totalUpdatedWeek() external view returns (uint16);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"AllocationVesting.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"vestingToken_\",\"type\":\"address\"},{\"internalType\":\"contract ITokenLocker\",\"name\":\"tokenLocker_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocation_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalPreclaimPct_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStart_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"points\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"numberOfWeeks\",\"type\":\"uint8\"}],\"internalType\":\"struct AllocationVesting.AllocationSplit[]\",\"name\":\"allocationSplits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllocationsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateAllocation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfWeeksFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfWeeksTo\",\"type\":\"uint256\"}],\"name\":\"IncompatibleVestingPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPoints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockedAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PreclaimTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SelfTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMaxTotalPreclaimPct\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroNumberOfWeeks\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTotalAllocation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"points\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"numberOfWeeks\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"claimed\",\"type\":\"uint128\"},{\"internalType\":\"uint96\",\"name\":\"preclaimed\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"isApprovedDelegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockFutureClaims\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockFutureClaimsWithReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockToTokenRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalPreclaimPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"preclaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isApproved\",\"type\":\"bool\"}],\"name\":\"setDelegateApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLocker\",\"outputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"transferPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AllocationVesting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}