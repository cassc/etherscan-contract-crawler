{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/BalanceQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nlibrary BalanceQueue {\\r\\n    \\r\\n    struct QueueStorage {\\r\\n        mapping(uint32 => BalanceData) data;\\r\\n        uint32 first;\\r\\n        uint32 last;\\r\\n    }\\r\\n\\r\\n    struct BalanceData {\\r\\n        uint32 blockNumber;\\r\\n        uint96 value;\\r\\n    }\\r\\n\\r\\n    modifier isNotEmpty(QueueStorage storage queue) {\\r\\n        require(!_isEmpty(queue), \\\"Queue is empty.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the queue's initial state, with a queue size of 0.\\r\\n     * @param queue QueueStorage struct from contract.\\r\\n     */\\r\\n    function _initialize(QueueStorage storage queue) internal {\\r\\n        queue.first = 1;\\r\\n        queue.last = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the number of elements in the queue. O(1)\\r\\n     * @param queue QueueStorage struct from contract.\\r\\n     */\\r\\n    function _length(QueueStorage storage queue)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (queue.last < queue.first || queue.last == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        return queue.last - queue.first + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if queue is empty. O(1)\\r\\n     * @param queue QueueStorage struct from contract.\\r\\n     */\\r\\n    function _isEmpty(QueueStorage storage queue) internal view returns (bool) {\\r\\n        return _length(queue) == 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds an element to the back of the queue. O(1)\\r\\n     * @param queue QueueStorage struct from contract.\\r\\n     * @param blockNumber_ blocknumber when balance data is added.\\r\\n     * @param value_ blocknumber when balance data is added.\\r\\n     */\\r\\n    function _enqueue(\\r\\n        QueueStorage storage queue,\\r\\n        uint32 blockNumber_,\\r\\n        uint96 value_\\r\\n    ) internal {\\r\\n        queue.data[++queue.last] = BalanceData({blockNumber: blockNumber_,value: value_});\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes an element from the front of the queue and returns it. O(1)\\r\\n     * @param queue QueueStorage struct from contract.\\r\\n     */\\r\\n    function _dequeue(QueueStorage storage queue)\\r\\n        internal\\r\\n        isNotEmpty(queue)\\r\\n        returns (BalanceData memory data)\\r\\n    {\\r\\n        data = queue.data[queue.first];\\r\\n        delete queue.data[queue.first++];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the data from the front of the queue, without removing it. O(1)\\r\\n     * @param queue QueueStorage struct from contract.\\r\\n     */\\r\\n    function _peek(QueueStorage storage queue)\\r\\n        internal\\r\\n        view\\r\\n        isNotEmpty(queue)\\r\\n        returns (BalanceData storage)\\r\\n    {\\r\\n        return queue.data[queue.first];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the data from the back of the queue. O(1)\\r\\n     * @param queue QueueStorage struct from contract.\\r\\n     */\\r\\n    function _peekLast(QueueStorage storage queue)\\r\\n        internal\\r\\n        view\\r\\n        isNotEmpty(queue)\\r\\n        returns (BalanceData storage)\\r\\n    {\\r\\n        return queue.data[queue.last];\\r\\n    }    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20-Wrapper/contracts/abstracts/ERC20ETHlessTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../libs/GluwacoinModel.sol\\\";\\r\\n\\r\\nimport \\\"./Validate.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows users to send ETHless transfer by hiring a transaction relayer to pay the\\r\\n * gas fee for them. The relayer gets paid in this ERC20 token for `fee`.\\r\\n */\\r\\nabstract contract ERC20ETHless is\\r\\n    Initializable,\\r\\n    AccessControlEnumerableUpgradeable,\\r\\n    ERC20Upgradeable\\r\\n{  \\r\\n    mapping(address => mapping(uint256 => bool)) private _usedNonces;\\r\\n\\r\\n    // collects transaction relay fee\\r\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\r\\n\\r\\n    function __ERC20ETHless_init(string memory name, string memory symbol)\\r\\n        internal\\r\\n        initializer\\r\\n    {        \\r\\n        __Context_init_unchained(); \\r\\n        __ERC165_init_unchained();\\r\\n        __AccessControl_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __ERC20_init_unchained(name, symbol);\\r\\n        __ERC20ETHless_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ERC20ETHless_init_unchained() internal onlyInitializing {\\r\\n        _setupRole(RELAYER_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the `sender`'s account to `recipient`\\r\\n     * and moves `fee` tokens from the `sender`'s account to a relayer's address.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits two {Transfer} events.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the `sender` must have a balance of at least the sum of `amount` and `fee`.\\r\\n     * - the `nonce` is only used once per `sender`.\\r\\n     */\\r\\n    function transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        bytes calldata sig\\r\\n    ) external returns (bool success) {\\r\\n        uint256 senderBalance = balanceOf(sender);\\r\\n        require(\\r\\n            senderBalance >= (amount + fee),\\r\\n            \\\"ERC20ETHless: the balance is not sufficient\\\"\\r\\n        );\\r\\n\\r\\n        _useNonce(sender, nonce);\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                GluwacoinModel.SigDomain.Transfer,\\r\\n                block.chainid,\\r\\n                address(this),\\r\\n                sender,\\r\\n                recipient,\\r\\n                amount,\\r\\n                fee,\\r\\n                nonce\\r\\n            )\\r\\n        );\\r\\n        Validate.validateSignature(hash, sender, sig);\\r\\n\\r\\n        _collect(sender, fee);\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /* @dev Uses `nonce` for the signer.\\r\\n     */\\r\\n    function _useNonce(address signer, uint256 nonce) private {\\r\\n        require(\\r\\n            !_usedNonces[signer][nonce],\\r\\n            \\\"ERC20ETHless: the nonce has already been used for this address\\\"\\r\\n        );\\r\\n        _usedNonces[signer][nonce] = true;\\r\\n    }\\r\\n\\r\\n    /** @dev Collects `fee` from the sender.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _collect(address sender, uint256 amount) internal {\\r\\n        address relayer = getRoleMember(RELAYER_ROLE, 0);\\r\\n\\r\\n        _transfer(sender, relayer, amount);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20-Wrapper/contracts/abstracts/ERC20Reservable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../libs/GluwacoinModel.sol\\\";\\r\\n\\r\\nimport \\\"./Validate.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows users to escrow a transfer. When the fund is reserved, the sender designates\\r\\n * an `executor` of the `reserve`. The `executor` can `release` the fund to the pre-defined `recipient` and collect\\r\\n * a `fee`. If the `reserve` gets expired without getting executed, the `sender` or the `executor` can `reclaim`\\r\\n * the fund back to the `sender`.\\r\\n */\\r\\nabstract contract ERC20Reservable is Initializable, ERC20Upgradeable {\\r\\n    enum ReservationStatus {\\r\\n        Draft,\\r\\n        Active,\\r\\n        Reclaimed,\\r\\n        Completed\\r\\n    }\\r\\n\\r\\n    struct Reservation {\\r\\n        uint256 _amount;\\r\\n        uint256 _fee;\\r\\n        address _recipient;\\r\\n        address _executor;\\r\\n        uint256 _expiryBlockNum;\\r\\n        ReservationStatus _status;\\r\\n    }\\r\\n\\r\\n    /// @dev Address mapping to mapping of nonce to amount and expiry for that nonce.\\r\\n    mapping(address => mapping(uint256 => Reservation)) private _reserved;\\r\\n\\r\\n    /// @dev Total amount of reserved balance for address\\r\\n    mapping(address => uint256) private _totalReserved;\\r\\n\\r\\n    uint64 public constant MINIMUM_BLOCK_FOR_RESERVATION = 14400;\\r\\n\\r\\n    function __ERC20Reservable_init(\\r\\n        string memory name,\\r\\n        string memory symbol\\r\\n    ) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __ERC20_init_unchained(name, symbol);\\r\\n        __ERC20Reservable_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __ERC20Reservable_init_unchained() internal onlyInitializing {}\\r\\n\\r\\n    /// @notice Retrieve a reserved record\\r\\n    /// @param sender The token owner address whose token is reserved\\r\\n    /// @param nonce The unique number to retrieve reserved data for each address\\r\\n    /// @return amount in reserved for a specific address and nonce\\r\\n    /// @return fee in reserved fee paid during executing a reserve\\r\\n    /// @return recipient the address received the reserved amount less fee\\r\\n    /// @return executor in reserved for a specific address and nonce\\r\\n    /// @return expiryBlockNum the block number after which the reserved amount will be expired\\r\\n    /// @return status in the reserve record\\r\\n    function getReservation(\\r\\n        address sender,\\r\\n        uint256 nonce\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 amount,\\r\\n            uint256 fee,\\r\\n            address recipient,\\r\\n            address executor,\\r\\n            uint256 expiryBlockNum,\\r\\n            ReservationStatus status\\r\\n        )\\r\\n    {\\r\\n        Reservation storage reservation = _reserved[sender][nonce];\\r\\n\\r\\n        amount = reservation._amount;\\r\\n        fee = reservation._fee;\\r\\n        recipient = reservation._recipient;\\r\\n        executor = reservation._executor;\\r\\n        expiryBlockNum = reservation._expiryBlockNum;\\r\\n        status = reservation._status;\\r\\n    }\\r\\n\\r\\n    /// @notice Get total amount in all reserves for an address.\\r\\n    /// @param account The token owner address\\r\\n    /// @return amount total amount put in all reserves of the given address\\r\\n    function reservedBalanceOf(\\r\\n        address account\\r\\n    ) external view returns (uint256 amount) {\\r\\n        return balanceOf(account) - _unreservedBalance(account);\\r\\n    }\\r\\n\\r\\n    /// @notice Get total amount not in any reserve for an address.\\r\\n    /// @param account The token owner address\\r\\n    /// @return amount total amount put not in any reserve of the given address\\r\\n    function unreservedBalanceOf(\\r\\n        address account\\r\\n    ) external view returns (uint256 amount) {\\r\\n        return _unreservedBalance(account);\\r\\n    }\\r\\n\\r\\n    /// @notice Create a reserved record\\r\\n    /// @param sender The token owner address whose token is reserved\\r\\n    /// @param recipient the address received the reserved amount less fee\\r\\n    /// @param executor in reserved for a specific address and nonce\\r\\n    /// @param amount in reserved for a specific address and nonce\\r\\n    /// @param fee in reserved fee paid during executing a reserve\\r\\n    /// @param nonce The unique number to retrieve reserved data for each address\\r\\n    /// @param expiryBlockNum the block number after which the reserved amount will be expired\\r\\n    /// @param sig the signature to include all the above params signed by the user's private key to authorize the reserve\\r\\n    /// @return success indicate the outcome of the reserve funciton\\r\\n    function reserve(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        address executor,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiryBlockNum,\\r\\n        bytes calldata sig\\r\\n    ) external returns (bool success) {\\r\\n        require(\\r\\n            _reserved[sender][nonce]._expiryBlockNum == 0,\\r\\n            \\\"ERC20Reservable: the sender used the nonce already\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            expiryBlockNum >= block.number + MINIMUM_BLOCK_FOR_RESERVATION,\\r\\n            \\\"ERC20Reservable: invalid block expiry number\\\"\\r\\n        );\\r\\n        require(\\r\\n            executor != address(0),\\r\\n            \\\"ERC20Reservable: cannot execute from zero address\\\"\\r\\n        );\\r\\n\\r\\n        uint256 total = amount + fee;\\r\\n        require(\\r\\n            _unreservedBalance(sender) >= total,\\r\\n            \\\"ERC20Reservable: insufficient unreserved balance\\\"\\r\\n        );\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                GluwacoinModel.SigDomain.Reserve,\\r\\n                block.chainid,\\r\\n                address(this),\\r\\n                sender,\\r\\n                recipient,\\r\\n                executor,\\r\\n                amount,\\r\\n                fee,\\r\\n                nonce,\\r\\n                expiryBlockNum\\r\\n            )\\r\\n        );\\r\\n        Validate.validateSignature(hash, sender, sig);\\r\\n\\r\\n        _reserved[sender][nonce] = Reservation(\\r\\n            amount,\\r\\n            fee,\\r\\n            recipient,\\r\\n            executor,\\r\\n            expiryBlockNum,\\r\\n            ReservationStatus.Active\\r\\n        );\\r\\n        _totalReserved[sender] = _totalReserved[sender] + total;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Execute a reserved record before expired block\\r\\n    /// @dev transaction caller must be the executor or the reserve's owner (sender)\\r\\n    /// @param sender The token owner address whose token is reserved\\r\\n    /// @param nonce The unique number to retrieve reserved data for each address\\r\\n    /// @return success indicate the outcome of the execute funciton\\r\\n    function execute(\\r\\n        address sender,\\r\\n        uint256 nonce\\r\\n    ) external returns (bool success) {\\r\\n        Reservation storage reservation = _reserved[sender][nonce];\\r\\n\\r\\n        require(\\r\\n            reservation._expiryBlockNum != 0,\\r\\n            \\\"ERC20Reservable: reservation does not exist\\\"\\r\\n        );\\r\\n        require(\\r\\n            _msgSender() == sender || _msgSender() == reservation._executor,\\r\\n            \\\"ERC20Reservable: this address is not authorized to execute this reservation\\\"\\r\\n        );\\r\\n        require(\\r\\n            reservation._expiryBlockNum > block.number,\\r\\n            \\\"ERC20Reservable: reservation has expired and cannot be executed\\\"\\r\\n        );\\r\\n        require(\\r\\n            reservation._status == ReservationStatus.Active,\\r\\n            \\\"ERC20Reservable: invalid reservation status to execute\\\"\\r\\n        );\\r\\n\\r\\n        address executor = reservation._executor;\\r\\n        address recipient = reservation._recipient;\\r\\n        uint256 fee = reservation._fee;\\r\\n        uint256 amount = reservation._amount;\\r\\n        uint256 total = amount + fee;\\r\\n\\r\\n        _reserved[sender][nonce]._status = ReservationStatus.Completed;\\r\\n        _totalReserved[sender] = _totalReserved[sender] - total;\\r\\n\\r\\n        _transfer(sender, executor, fee);\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Reclaim a reserved record on or after expired block\\r\\n    /// @dev transaction caller must be the executor or the reserve's owner (sender)\\r\\n    /// @param sender The token owner address whose token is reserved\\r\\n    /// @param nonce The unique number to retrieve reserved data for each address\\r\\n    /// @return success indicate the outcome of the reclaim funciton\\r\\n    function reclaim(\\r\\n        address sender,\\r\\n        uint256 nonce\\r\\n    ) external returns (bool success) {\\r\\n        Reservation storage reservation = _reserved[sender][nonce];\\r\\n\\r\\n        require(\\r\\n            reservation._expiryBlockNum != 0,\\r\\n            \\\"ERC20Reservable: reservation does not exist\\\"\\r\\n        );\\r\\n        require(\\r\\n            _msgSender() == sender || _msgSender() == reservation._executor,\\r\\n            \\\"ERC20Reservable: only the sender or the executor can reclaim the reservation back to the sender\\\"\\r\\n        );\\r\\n        require(\\r\\n            reservation._expiryBlockNum <= block.number ||\\r\\n                _msgSender() == reservation._executor,\\r\\n            \\\"ERC20Reservable: reservation has not expired or you are not the executor and cannot be reclaimed\\\"\\r\\n        );\\r\\n        require(\\r\\n            reservation._status == ReservationStatus.Active,\\r\\n            \\\"ERC20Reservable: invalid reservation status to reclaim\\\"\\r\\n        );\\r\\n\\r\\n        _reserved[sender][nonce]._status = ReservationStatus.Reclaimed;\\r\\n        _totalReserved[sender] =\\r\\n            _totalReserved[sender] -\\r\\n            reservation._amount -\\r\\n            reservation._fee;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _unreservedBalance(\\r\\n        address sender\\r\\n    ) internal view returns (uint256 amount) {\\r\\n        return balanceOf(sender) - _totalReserved[sender];\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override(ERC20Upgradeable) {\\r\\n        if (from != address(0)) {\\r\\n            require(\\r\\n                _unreservedBalance(from) >= amount,\\r\\n                \\\"ERC20Reservable: transfer amount exceeds unreserved balance\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\"\r\n    },\r\n    \"contracts/token/ERC20-Wrapper/contracts/abstracts/ERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"../libs/GluwacoinModel.sol\\\";\\r\\n\\r\\nimport \\\"./Validate.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {ERC20} that allows a certain ERC20 token holders to wrap the token to mint this token.\\r\\n * Holder of this token can retrieve the wrapped token by burning this token.\\r\\n */\\r\\nabstract contract ERC20Wrapper is\\r\\n    Initializable,\\r\\n    AccessControlEnumerableUpgradeable,\\r\\n    ERC20Upgradeable\\r\\n{    \\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n    // base token, the token to be wrapped\\r\\n    IERC20Upgradeable internal _token;\\r\\n\\r\\n    mapping(address => mapping(uint256 => bool)) private _usedNonces;\\r\\n\\r\\n    // collects mint/burn relay fee\\r\\n    bytes32 public constant WRAPPER_ROLE = keccak256(\\\"WRAPPER_ROLE\\\");\\r\\n\\r\\n    event Mint(address indexed _mintTo, uint256 _value);\\r\\n    event Burnt(address indexed _burnFrom, uint256 _value);\\r\\n\\r\\n    function __ERC20Wrapper_init(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        IERC20Upgradeable baseToken\\r\\n    ) internal initializer {\\r\\n        __Context_init_unchained();\\r\\n        __ERC165_init_unchained();\\r\\n        __AccessControl_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __ERC20_init_unchained(name, symbol);\\r\\n        __ERC20Wrapper_init_unchained(baseToken);\\r\\n    }\\r\\n\\r\\n    function __ERC20Wrapper_init_unchained(IERC20Upgradeable baseToken)\\r\\n        internal\\r\\n        virtual\\r\\n        onlyInitializing\\r\\n    {\\r\\n        _setupToken(baseToken);\\r\\n        _setupRole(WRAPPER_ROLE, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the base token.\\r\\n     */\\r\\n    function token() external view returns (IERC20Upgradeable) {\\r\\n        return _token;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` tokens to the caller, transferring base tokens from the caller to the contract.\\r\\n     *\\r\\n     * See {ERC20-_mint} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have base tokens of at least `amount`.\\r\\n     * - the contract must have allowance for caller's base tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function mint(uint256 amount) external {\\r\\n        __mint(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `mint` but with `minter`, `fee`, `nonce`, and `sig` as extra parameters.\\r\\n     * `fee` is a mint fee amount in Gluwacoin, which the minter will pay for the mint.\\r\\n     * `sig` is a signature created by signing the mint information with the minter\u2019s private key.\\r\\n     * Anyone can initiate the mint for the minter by calling the Etherless Mint function\\r\\n     * with the mint information and the signature.\\r\\n     * The caller will have to pay the gas for calling the function.\\r\\n     *\\r\\n     * Transfers `amount` + `fee` of base tokens from the minter to the contract using `transferFrom`.\\r\\n     * Creates `amount` + `fee` of tokens to the minter and transfers `fee` tokens to the caller.\\r\\n     *\\r\\n     * See {ERC20-_mint} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the minter must have base tokens of at least `amount`.\\r\\n     * - the contract must have allowance for receiver's base tokens of at least `amount`.\\r\\n     * - `fee` will be deducted after successfully minting\\r\\n     */\\r\\n    function mint(\\r\\n        address minter,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        bytes calldata sig\\r\\n    ) external virtual {\\r\\n        _useWrapperNonce(minter, nonce);\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                GluwacoinModel.SigDomain.Mint,\\r\\n                block.chainid,\\r\\n                address(this),\\r\\n                minter,\\r\\n                amount,\\r\\n                fee,\\r\\n                nonce\\r\\n            )\\r\\n        );\\r\\n        Validate.validateSignature(hash, minter, sig);\\r\\n\\r\\n        __mint(minter, amount);\\r\\n\\r\\n        address wrapper = getRoleMember(WRAPPER_ROLE, 0);\\r\\n\\r\\n        _transfer(minter, wrapper, fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from the caller, transferring base tokens from the contract to the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     */\\r\\n    function burn(uint256 amount) external {\\r\\n        __burn(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `burn` but with `burner`, `fee`, `nonce`, and `sig` as extra parameters.\\r\\n     * `fee` is a burn fee amount in Gluwacoin, which the burner will pay for the burn.\\r\\n     * `sig` is a signature created by signing the burn information with the burner\u2019s private key.\\r\\n     * Anyone can initiate the burn for the burner by calling the Etherless Burn function\\r\\n     * with the burn information and the signature.\\r\\n     * The caller will have to pay the gas for calling the function.\\r\\n     *\\r\\n     * Destroys `amount` + `fee` tokens from the burner.\\r\\n     * Transfers `amount` of base tokens from the contract to the burner and `fee` of base token to the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the burner must have tokens of at least `amount`, the `fee` is included in the amount.\\r\\n     */\\r\\n    function burn(\\r\\n        address burner,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        bytes calldata sig\\r\\n    ) external virtual {\\r\\n        uint256 burnerBalance = balanceOf(burner);\\r\\n        require(\\r\\n            burnerBalance >= amount,\\r\\n            \\\"ERC20Wrapper: burn amount exceed balance\\\"\\r\\n        );\\r\\n\\r\\n        _useWrapperNonce(burner, nonce);\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                GluwacoinModel.SigDomain.Burn,\\r\\n                block.chainid,\\r\\n                address(this),\\r\\n                burner,\\r\\n                amount,\\r\\n                fee,\\r\\n                nonce\\r\\n            )\\r\\n        );\\r\\n        Validate.validateSignature(hash, burner, sig);\\r\\n\\r\\n        address wrapper = getRoleMember(WRAPPER_ROLE, 0);\\r\\n        _transfer(burner, wrapper, fee);\\r\\n\\r\\n        __burn(burner, amount - fee);\\r\\n    }    \\r\\n\\r\\n    function __mint(address account, uint256 amount) internal virtual {\\r\\n        _token.safeTransferFrom(account, address(this), amount);\\r\\n        emit Mint(account, amount);\\r\\n\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    function __burn(address account, uint256 amount) internal virtual {       \\r\\n        _token.safeTransfer(account, amount);\\r\\n        emit Burnt(account, amount);\\r\\n\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {token} as the base token.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {token} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupToken(IERC20Upgradeable token_) internal {\\r\\n        _token = token_;\\r\\n    }\\r\\n\\r\\n    /* @dev Uses `nonce` for the signer.\\r\\n     */\\r\\n    function _useWrapperNonce(address signer, uint256 nonce) internal {\\r\\n        require(\\r\\n            !_usedNonces[signer][nonce],\\r\\n            \\\"ERC20Wrapper: the nonce has already been used for this address\\\"\\r\\n        );\\r\\n        _usedNonces[signer][nonce] = true;\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20-Wrapper/contracts/abstracts/Validate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Signature verification\\r\\n */\\r\\nlibrary Validate {    \\r\\n    using ECDSAUpgradeable for bytes32;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if given `sig` is an incorrect signature of the `sender`.\\r\\n     */\\r\\n    function validateSignature(bytes32 hash, address sender, bytes memory sig) internal pure {\\r\\n        bytes32 messageHash = hash.toEthSignedMessageHash();\\r\\n\\r\\n        address signer = messageHash.recover(sig);\\r\\n        require(signer == sender, \\\"Validate: invalid signature\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20-Wrapper/contracts/ERC20WrapperGluwacoin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./abstracts/ERC20ETHlessTransfer.sol\\\";\\r\\nimport \\\"./abstracts/ERC20Reservable.sol\\\";\\r\\nimport \\\"./abstracts/ERC20Wrapper.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Extension of {Gluwacoin} that allows a certain ERC20 token holders to wrap the token to mint this token.\\r\\n * Holder of this token can retrieve the wrapped token by burning this token.\\r\\n */\\r\\ncontract ERC20WrapperGluwacoin is\\r\\n    Initializable,\\r\\n    ContextUpgradeable,\\r\\n    ERC20Wrapper,\\r\\n    ERC20ETHless,\\r\\n    ERC20Reservable\\r\\n{\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /// @dev `decimals` must match that of `token`\\r\\n    function initialize(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint8 decimals_,\\r\\n        address admin,\\r\\n        IERC20Upgradeable token\\r\\n    ) public virtual {\\r\\n        __ERC20WrapperGluwacoin_init(name, symbol, decimals_, admin, token);\\r\\n    }\\r\\n\\r\\n    /// @notice Return a number of decimals of the token\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function __ERC20WrapperGluwacoin_init(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint8 decimals_,\\r\\n        address admin,\\r\\n        IERC20Upgradeable token\\r\\n    ) internal initializer {\\r\\n        _decimals = decimals_;\\r\\n        __Context_init_unchained();\\r\\n        __ERC165_init_unchained();\\r\\n        __AccessControl_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __ERC20_init_unchained(name, symbol);\\r\\n        __ERC20Wrapper_init_unchained(token);\\r\\n        __ERC20ETHless_init_unchained();\\r\\n        __ERC20Reservable_init_unchained();\\r\\n        __ERC20WrapperGluwacoin_init_unchained(decimals_, admin);\\r\\n    }\\r\\n\\r\\n    function __ERC20WrapperGluwacoin_init_unchained(\\r\\n        uint8 decimals_,\\r\\n        address admin\\r\\n    ) internal onlyInitializing {\\r\\n        _decimals = decimals_;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override(ERC20Upgradeable, ERC20Reservable) {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20-Wrapper/contracts/libs/GluwacoinModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nlibrary GluwacoinModel {   \\r\\n    /**\\r\\n     * @dev Enum of the different domains of signature.\\r\\n     */\\r\\n    enum SigDomain {\\r\\n        /*0*/\\r\\n        Nothing,\\r\\n        /*1*/\\r\\n        Burn,\\r\\n        /*2*/\\r\\n        Mint,\\r\\n        /*3*/\\r\\n        Transfer,\\r\\n        /*4*/\\r\\n        Reserve\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/ERC20StakedVotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../libs/BalanceQueue.sol\\\";\\r\\nimport \\\"./ERC20-Wrapper/contracts/ERC20WrapperGluwacoin.sol\\\";\\r\\nimport \\\"./IStakedVotesUpgradeable.sol\\\";\\r\\nimport \\\"./IRewardToken.sol\\\";\\r\\n\\r\\ncontract ERC20StakedVotesUpgradeable is\\r\\n    IStakedVotesUpgradeable,\\r\\n    Initializable,\\r\\n    ERC20WrapperGluwacoin,\\r\\n    ERC20PermitUpgradeable\\r\\n{\\r\\n    using BalanceQueue for BalanceQueue.QueueStorage;\\r\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\r\\n\\r\\n    bytes32 private constant _STAKE_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"stake(uint256 amount,uint256 fee,uint256 nonce,uint256 expiry)\\\"\\r\\n        );\\r\\n\\r\\n    bytes32 private constant _UNSTAKE_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"unstake(uint256 amount,uint256 fee,uint256 nonce,uint256 expiry)\\\"\\r\\n        );\\r\\n\\r\\n    bytes32 private constant _MINTTOSTAKE_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"mintToStake(uint256 amount,uint256 fee,uint256 nonce,uint256 expiry)\\\"\\r\\n        );\\r\\n\\r\\n    bytes32 private constant _DELEGATION_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"delegate(address delegatee,uint256 fee,uint256 nonce,uint256 expiry)\\\"\\r\\n        );\\r\\n\\r\\n    /// @dev due to limitted supply of GTD, we can minimize the checkpoint storage as below\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 balance;\\r\\n    }\\r\\n\\r\\n    IRewardToken private _rewardingToken;\\r\\n    mapping(address => address) private _delegates;\\r\\n\\r\\n    /// @dev checkpoints for staked amount\\r\\n    mapping(address => Checkpoint[]) private _shareholderStakedCheckpoints;\\r\\n    mapping(address => BalanceQueue.QueueStorage)\\r\\n        private _tokenDelayedBalanceCheckpoints;\\r\\n    mapping(address => Checkpoint[]) private _votingCheckpoints;\\r\\n\\r\\n    Checkpoint[] private _totalStakedCheckpoints;\\r\\n\\r\\n    uint8 private _processingCap;\\r\\n    uint32 private _stakingLockup;\\r\\n    uint32 private _unstakingLockup;\\r\\n    uint32 private _wrappingRate;\\r\\n\\r\\n    address public daoContract;\\r\\n\\r\\n    function __ERC20StakedVotesUpgradeable_init(\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        uint8 decimals_,\\r\\n        address admin,\\r\\n        uint8 processingCap,\\r\\n        uint32 wrappingRate,\\r\\n        uint32 stakingLockup,\\r\\n        uint32 unstakingLockup,\\r\\n        IERC20Upgradeable token\\r\\n    ) internal onlyInitializing {\\r\\n        __ERC20StakedVotesUpgradeable_init_unchained(\\r\\n            name,\\r\\n            symbol,\\r\\n            decimals_,\\r\\n            admin,\\r\\n            processingCap,\\r\\n            wrappingRate,\\r\\n            stakingLockup,\\r\\n            unstakingLockup,\\r\\n            token\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function __ERC20StakedVotesUpgradeable_init_unchained(\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        uint8 decimals_,\\r\\n        address admin,\\r\\n        uint8 processingCap,\\r\\n        uint32 wrappingRate,\\r\\n        uint32 stakingLockup,\\r\\n        uint32 unstakingLockup,\\r\\n        IERC20Upgradeable token\\r\\n    ) internal onlyInitializing {\\r\\n        __Context_init_unchained();\\r\\n        __ERC165_init_unchained();\\r\\n        __AccessControl_init_unchained();\\r\\n        __AccessControlEnumerable_init_unchained();\\r\\n        __ERC20_init_unchained(name, symbol);\\r\\n        __ERC20Wrapper_init_unchained(token);\\r\\n        __ERC20ETHless_init_unchained();\\r\\n        __ERC20Reservable_init_unchained();\\r\\n        __ERC20WrapperGluwacoin_init_unchained(decimals_, admin);\\r\\n        _processingCap = processingCap;\\r\\n        _wrappingRate = wrappingRate;\\r\\n        _stakingLockup = stakingLockup;\\r\\n        _unstakingLockup = unstakingLockup;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(\\r\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\r\\n            \\\"ERC20StakedVotesUpgradeable: Restricted to Admin.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateSupportedDAOContract(address daoContract_)\\r\\n        external\\r\\n        onlyAdmin\\r\\n        returns (bool)\\r\\n    {\\r\\n        daoContract = daoContract_;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function setRewardingToken(IRewardToken rewardingToken) external onlyAdmin {\\r\\n        _rewardingToken = rewardingToken;\\r\\n    }\\r\\n\\r\\n    function settings()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint8,\\r\\n            uint32,\\r\\n            uint32,\\r\\n            uint32\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            _processingCap,\\r\\n            _wrappingRate,\\r\\n            _stakingLockup,\\r\\n            _unstakingLockup\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function applySettings(\\r\\n        uint8 processingCap,\\r\\n        uint32 wrappingRate,\\r\\n        uint32 stakingLockup,\\r\\n        uint32 unstakingLockup\\r\\n    ) external onlyAdmin {\\r\\n        _processingCap = processingCap;\\r\\n        _wrappingRate = wrappingRate;\\r\\n        _stakingLockup = stakingLockup;\\r\\n        _unstakingLockup = unstakingLockup;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the `pos`-th checkpoint for `account`.\\r\\n     */\\r\\n    function checkpoints(address account, uint32 pos)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (Checkpoint memory)\\r\\n    {\\r\\n        return _shareholderStakedCheckpoints[account][pos];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of checkpoints of staked amount for `account`.\\r\\n     */\\r\\n    function numStakedCheckpoints(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return\\r\\n            SafeCastUpgradeable.toUint32(\\r\\n                _shareholderStakedCheckpoints[account].length\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of checkpoints of for `account` balance.\\r\\n     */\\r\\n    function numDelayedBalanceCheckpoints(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint32)\\r\\n    {\\r\\n        return\\r\\n            SafeCastUpgradeable.toUint32(\\r\\n                _tokenDelayedBalanceCheckpoints[account]._length()\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get number of checkpoints of total staked amount.\\r\\n     */\\r\\n    function numTotalStakedCheckpoints() public view virtual returns (uint32) {\\r\\n        return SafeCastUpgradeable.toUint32(_totalStakedCheckpoints.length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the current votes balance for `account`.\\r\\n     */\\r\\n    function getVotes(address account) public view virtual returns (uint256) {\\r\\n        uint256 pos = _votingCheckpoints[account].length;\\r\\n        return pos == 0 ? 0 : _votingCheckpoints[account][pos - 1].balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the current balance for `account`\\r\\n     */\\r\\n    function balanceOf(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return super.balanceOf(account) - _getDelayedBalance(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieve the number of votes for `account` at the end of `blockNumber`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `blockNumber` must have been already mined\\r\\n     */\\r\\n    function getPastVotes(address account, uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(blockNumber <= block.number, \\\"ERC20Votes: block not yet mined\\\");\\r\\n        return _checkpointsLookup(_votingCheckpoints[account], blockNumber);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total tokens used to be staked token at the end of a past block (`blockNumber`).\\r\\n     * It is but NOT the sum of all the delegated votes!\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `blockNumber` must have been already mined\\r\\n     */\\r\\n    function getPastTotalStaked(uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\r\\n        return _checkpointsLookup(_totalStakedCheckpoints, blockNumber);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current total staked tokens made by all users.\\r\\n     * It is but NOT the sum of all the delegated votes!\\r\\n     */\\r\\n    function getTotalStaked() public view virtual override returns (uint256) {\\r\\n        uint256 pos = _totalStakedCheckpoints.length;\\r\\n        return pos == 0 ? 0 : _totalStakedCheckpoints[pos - 1].balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\r\\n     */\\r\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 blockNumber)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // We run a binary search to look for the earliest checkpoint taken after `blockNumber`.\\r\\n        //\\r\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\r\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\r\\n        // - If the middle checkpoint is after `blockNumber`, we look in [low, mid)\\r\\n        // - If the middle checkpoint is before or equal to `blockNumber`, we look in [mid+1, high)\\r\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\r\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\r\\n        // Note that if the latest checkpoint available is exactly for `blockNumber`, we end up with an index that is\\r\\n        // past the end of the array, so we technically don't find a checkpoint after `blockNumber`, but it works out\\r\\n        // the same.\\r\\n        uint256 high = ckpts.length;\\r\\n        uint256 low = 0;\\r\\n        unchecked {\\r\\n            while (low < high) {\\r\\n                uint256 mid = MathUpgradeable.average(low, high);\\r\\n                if (ckpts[mid].fromBlock > blockNumber) {\\r\\n                    high = mid;\\r\\n                } else {\\r\\n                    low = mid + 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return high == 0 ? 0 : ckpts[high - 1].balance;\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal override {\\r\\n        super._mint(account, amount / _wrappingRate);\\r\\n    }\\r\\n\\r\\n    /// @dev to avoid unfair loss of token due to rounding down, we will exclude the remainder during token wrapping\\r\\n    function __mint(address account, uint256 amount) internal override {\\r\\n        uint256 remainder = amount % _wrappingRate;\\r\\n        super.__mint(account, amount - remainder);\\r\\n    }\\r\\n\\r\\n    function __burn(address account, uint256 amount) internal override {\\r\\n        _token.safeTransfer(account, amount * _wrappingRate);\\r\\n        emit Burnt(account, amount);\\r\\n\\r\\n        _burn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `mint` but with `minter`, `fee`, `nonce`, and `sig` as extra parameters.\\r\\n     * `fee` is a mint fee amount in Gluwacoin, which the minter will pay for the mint.\\r\\n     * `sig` is a signature created by signing the mint information with the minter\u2019s private key.\\r\\n     * Anyone can initiate the mint for the minter by calling the Etherless Mint function\\r\\n     * with the mint information and the signature.\\r\\n     * The caller will have to pay the gas for calling the function.\\r\\n     *\\r\\n     * Transfers `amount` + `fee` of base tokens from the minter to the contract using `transferFrom`.\\r\\n     * Creates `amount` + `fee` of tokens to the minter and transfers `fee` tokens to the caller.\\r\\n     *\\r\\n     * See {ERC20-_mint} and {ERC20-allowance}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the minter must have base tokens of at least `amount`.\\r\\n     * - the contract must have allowance for receiver's base tokens of at least `amount`.\\r\\n     * - `fee` will be deducted after successfully minting\\r\\n     */\\r\\n    function mint(\\r\\n        address minter,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        bytes calldata sig\\r\\n    ) external override {\\r\\n        _useWrapperNonce(minter, nonce);\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                GluwacoinModel.SigDomain.Mint,\\r\\n                block.chainid,\\r\\n                address(this),\\r\\n                minter,\\r\\n                amount,\\r\\n                fee,\\r\\n                nonce\\r\\n            )\\r\\n        );\\r\\n        Validate.validateSignature(hash, minter, sig);\\r\\n\\r\\n        __mint(minter, amount);\\r\\n        _transfer(minter, _msgSender(), fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the address `account` is currently delegating to.\\r\\n     */\\r\\n    function delegates(address account)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {\\r\\n        return _delegates[account];\\r\\n    }\\r\\n\\r\\n    function mintToStake(uint256 amount) external virtual returns (bool) {\\r\\n        __mint(_msgSender(), amount);\\r\\n        _stake(_msgSender(), amount / _wrappingRate);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mintToStakeBySig(\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual returns (bool) {\\r\\n        require(\\r\\n            expiry >= block.timestamp,\\r\\n            \\\"ERC20StakedVotesUpgradeable: Sig is expired\\\"\\r\\n        );\\r\\n        address stakeholder = ECDSAUpgradeable.recover(\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        _MINTTOSTAKE_TYPEHASH,\\r\\n                        amount,\\r\\n                        fee,\\r\\n                        nonce,\\r\\n                        expiry\\r\\n                    )\\r\\n                )\\r\\n            ),\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        _useWrapperNonce(stakeholder, nonce);\\r\\n        __mint(stakeholder, amount);\\r\\n        _transfer(stakeholder, _msgSender(), fee);\\r\\n        _stake(stakeholder, (amount / _wrappingRate) - fee);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _stake(address stakeholder, uint256 amount)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(stakeholder, daoContract, amount);\\r\\n        _writeCheckpoint(_totalStakedCheckpoints, _add, amount, block.number);\\r\\n        _writeCheckpoint(\\r\\n            _shareholderStakedCheckpoints[stakeholder],\\r\\n            _add,\\r\\n            amount,\\r\\n            block.number\\r\\n        );\\r\\n        if (_delegates[stakeholder] == address(0)) {\\r\\n            _delegates[stakeholder] = stakeholder;\\r\\n        }\\r\\n        _rewardingToken.updateAccumulatedWhenStake(stakeholder, amount);\\r\\n\\r\\n        _moveVotingPower(address(0), _delegates[stakeholder], amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _unstake(address stakeholder, uint256 amount)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        /// @dev amount must be > 0 to reduce queue item\\r\\n        require(\\r\\n            stakeOf(stakeholder) >= amount && amount > 0,\\r\\n            \\\"ERC20StakedVotesUpgradeable: Invalid amount\\\"\\r\\n        );\\r\\n        _transfer(daoContract, stakeholder, amount);\\r\\n        _writeCheckpoint(\\r\\n            _totalStakedCheckpoints,\\r\\n            _subtract,\\r\\n            amount,\\r\\n            block.number\\r\\n        );\\r\\n        _writeCheckpoint(\\r\\n            _shareholderStakedCheckpoints[stakeholder],\\r\\n            _subtract,\\r\\n            amount,\\r\\n            block.number\\r\\n        );\\r\\n        BalanceQueue.QueueStorage\\r\\n            storage balanceQueue = _tokenDelayedBalanceCheckpoints[stakeholder];\\r\\n        uint8 processingCount;\\r\\n        if (balanceQueue._isEmpty()) {\\r\\n            balanceQueue._initialize();\\r\\n        } else {\\r\\n            while (\\r\\n                !balanceQueue._isEmpty() &&\\r\\n                balanceQueue._peek().blockNumber <= block.number &&\\r\\n                processingCount < _processingCap\\r\\n            ) {\\r\\n                balanceQueue._dequeue();\\r\\n                processingCount++;\\r\\n            }\\r\\n        }\\r\\n        balanceQueue._enqueue(\\r\\n            SafeCastUpgradeable.toUint32(block.number + _unstakingLockup),\\r\\n            SafeCastUpgradeable.toUint96(amount)\\r\\n        );\\r\\n\\r\\n        _rewardingToken.updateAccumulatedWhenUnstake(stakeholder, amount);\\r\\n        _moveVotingPower(_delegates[stakeholder], address(0), amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function stake(uint256 amount) external virtual override returns (bool) {\\r\\n        require(\\r\\n            amount > 0,\\r\\n            \\\"ERC20StakedVotesUpgradeable: Cannot stake 0 amount\\\"\\r\\n        );\\r\\n        return _stake(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    function stakeBySig(\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual override returns (bool) {\\r\\n        require(\\r\\n            amount > 0,\\r\\n            \\\"ERC20StakedVotesUpgradeable: Cannot stake 0 amount\\\"\\r\\n        );\\r\\n        require(\\r\\n            expiry >= block.timestamp,\\r\\n            \\\"ERC20StakedVotesUpgradeable: Sig is expired\\\"\\r\\n        );\\r\\n        address stakeholder = ECDSAUpgradeable.recover(\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(_STAKE_TYPEHASH, amount, fee, nonce, expiry)\\r\\n                )\\r\\n            ),\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        _useWrapperNonce(stakeholder, nonce);\\r\\n        _transfer(stakeholder, _msgSender(), fee);\\r\\n        return _stake(stakeholder, amount);\\r\\n    }\\r\\n\\r\\n    function unstake(uint256 amount) external virtual override returns (bool) {\\r\\n        return _unstake(_msgSender(), amount);\\r\\n    }\\r\\n\\r\\n    function unstakeBySig(\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual override returns (bool) {\\r\\n        require(\\r\\n            expiry >= block.timestamp,\\r\\n            \\\"ERC20StakedVotesUpgradeable: Sig is expired\\\"\\r\\n        );\\r\\n        address stakeholder = ECDSAUpgradeable.recover(\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(_UNSTAKE_TYPEHASH, amount, fee, nonce, expiry)\\r\\n                )\\r\\n            ),\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        _useWrapperNonce(stakeholder, nonce);\\r\\n        _transfer(stakeholder, _msgSender(), fee);\\r\\n        return _unstake(stakeholder, amount);\\r\\n    }\\r\\n\\r\\n    function stakeOf(address stakeholder)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 pos = _shareholderStakedCheckpoints[stakeholder].length;\\r\\n        return\\r\\n            pos == 0\\r\\n                ? 0\\r\\n                : _shareholderStakedCheckpoints[stakeholder][pos - 1].balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total tokens of an address used to be staked token at the end of a past block (`blockNumber`).\\r\\n     * It is but NOT the sum of all the delegated votes!\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `blockNumber` must have been already mined\\r\\n     */\\r\\n    function stakeOf(address stakeholder, uint256 blockNumber)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(blockNumber < block.number, \\\"ERC20Votes: block not yet mined\\\");\\r\\n        return\\r\\n            _checkpointsLookup(\\r\\n                _shareholderStakedCheckpoints[stakeholder],\\r\\n                blockNumber\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegate votes from the sender to `delegatee`.\\r\\n     */\\r\\n    function delegate(address delegatee) external virtual {\\r\\n        _delegate(_msgSender(), delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates votes from signer to `delegatee`\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external virtual override returns (bool) {\\r\\n        require(block.timestamp <= expiry, \\\"ERC20Votes: signature expired\\\");\\r\\n        address signer = ECDSAUpgradeable.recover(\\r\\n            _hashTypedDataV4(\\r\\n                keccak256(\\r\\n                    abi.encode(\\r\\n                        _DELEGATION_TYPEHASH,\\r\\n                        delegatee,\\r\\n                        fee,\\r\\n                        nonce,\\r\\n                        expiry\\r\\n                    )\\r\\n                )\\r\\n            ),\\r\\n            v,\\r\\n            r,\\r\\n            s\\r\\n        );\\r\\n        _useWrapperNonce(signer, nonce);\\r\\n        _transfer(signer, _msgSender(), fee);\\r\\n        _delegate(signer, delegatee);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change delegation for `delegator` to `delegatee`.\\r\\n     *\\r\\n     * Emits events {DelegateChanged} and {DelegateVotesChanged}.\\r\\n     */\\r\\n    function _delegate(address delegator, address delegatee) internal virtual {\\r\\n        address currentDelegate = delegates(delegator);\\r\\n        uint256 delegatorBalance = stakeOf(delegator);\\r\\n        _delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveVotingPower(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    /// @notice Return a number of decimals of the token\\r\\n    function decimals()\\r\\n        public\\r\\n        view\\r\\n        override(ERC20Upgradeable, ERC20WrapperGluwacoin)\\r\\n        returns (uint8)\\r\\n    {\\r\\n        return ERC20WrapperGluwacoin.decimals();\\r\\n    }\\r\\n\\r\\n    function _moveVotingPower(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        if (src != dst && amount > 0) {\\r\\n            if (src != address(0)) {\\r\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(\\r\\n                    _votingCheckpoints[src],\\r\\n                    _subtract,\\r\\n                    amount,\\r\\n                    block.number\\r\\n                );\\r\\n                emit DelegateVotesChanged(src, oldWeight, newWeight);\\r\\n            }\\r\\n\\r\\n            if (dst != address(0)) {\\r\\n                (uint256 oldWeight, uint256 newWeight) = _writeCheckpoint(\\r\\n                    _votingCheckpoints[dst],\\r\\n                    _add,\\r\\n                    amount,\\r\\n                    block.number\\r\\n                );\\r\\n                emit DelegateVotesChanged(dst, oldWeight, newWeight);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        Checkpoint[] storage ckpts,\\r\\n        function(uint256, uint256) view returns (uint256) op,\\r\\n        uint256 delta,\\r\\n        uint256 effectiveBlockNumber\\r\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\r\\n        uint256 pos = ckpts.length;\\r\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].balance;\\r\\n        newWeight = op(oldWeight, delta);\\r\\n\\r\\n        if (pos > 0 && (ckpts[pos - 1].fromBlock == effectiveBlockNumber)) {\\r\\n            ckpts[pos - 1].balance = SafeCastUpgradeable.toUint96(newWeight);\\r\\n        } else {\\r\\n            ckpts.push(\\r\\n                Checkpoint({\\r\\n                    fromBlock: SafeCastUpgradeable.toUint32(\\r\\n                        effectiveBlockNumber\\r\\n                    ),\\r\\n                    balance: SafeCastUpgradeable.toUint96(newWeight)\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allow to query the delayed balance of an `account` which can be only received after the current block from unstaked process\\r\\n     */\\r\\n    function getDelayedBalance(address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _getDelayedBalance(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the balance for `account` which can be only received after the current block from unstaked process\\r\\n     */\\r\\n    function _getDelayedBalance(address account)\\r\\n        private\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        BalanceQueue.QueueStorage\\r\\n            storage balanceQueue = _tokenDelayedBalanceCheckpoints[account];\\r\\n        uint32 queueIndex = balanceQueue.last;\\r\\n        uint256 delayedBalance;\\r\\n        while (true) {\\r\\n            if (balanceQueue.data[queueIndex].blockNumber > block.number) {\\r\\n                delayedBalance += balanceQueue.data[queueIndex].value;\\r\\n                --queueIndex;\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        return delayedBalance;\\r\\n    }\\r\\n\\r\\n    function removeQueueData(address account, uint16 numberOfItem) public {\\r\\n        BalanceQueue.QueueStorage\\r\\n            storage balanceQueue = _tokenDelayedBalanceCheckpoints[account];\\r\\n        for (uint8 i = 0; i < numberOfItem; i++) {\\r\\n            if (\\r\\n                !balanceQueue._isEmpty() &&\\r\\n                balanceQueue._peek().blockNumber <= block.number\\r\\n            ) {\\r\\n                balanceQueue._dequeue();\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateCheckpoint(\\r\\n        Checkpoint[] storage ckpts,\\r\\n        function(uint256, uint256) view returns (uint256) op,\\r\\n        uint256 delta\\r\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\r\\n        uint256 pos = ckpts.length;\\r\\n        oldWeight = pos == 0 ? 0 : ckpts[pos - 1].balance;\\r\\n        newWeight = op(oldWeight, delta);\\r\\n\\r\\n        if (pos > 0 && ckpts[pos - 1].fromBlock == block.number) {\\r\\n            ckpts[pos - 1].balance = SafeCastUpgradeable.toUint96(newWeight);\\r\\n        } else {\\r\\n            ckpts.push(\\r\\n                Checkpoint({\\r\\n                    fromBlock: SafeCastUpgradeable.toUint32(block.number),\\r\\n                    balance: SafeCastUpgradeable.toUint96(newWeight)\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override(ERC20Upgradeable, ERC20WrapperGluwacoin) {\\r\\n        require(\\r\\n            from == address(0) || balanceOf(from) >= amount,\\r\\n            \\\"ERC20StakedVotesUpgradeable: Insufficient balance\\\"\\r\\n        );\\r\\n        ERC20WrapperGluwacoin._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override(ERC20Upgradeable) {\\r\\n        super._afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/GatewayGovernanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./ERC20StakedVotesUpgradeable.sol\\\";\\r\\n\\r\\ncontract GatewayGovernanceToken is ERC20StakedVotesUpgradeable {\\r\\n    mapping(address => bool) private _isLocked;\\r\\n\\r\\n    function initialize(\\r\\n        string calldata name,\\r\\n        string calldata symbol,\\r\\n        uint8 decimals_,\\r\\n        address admin,\\r\\n        uint8 processingCap,\\r\\n        uint32 wrappingRate,\\r\\n        uint32 stakingLockup,\\r\\n        uint32 unstakingLockup,\\r\\n        IERC20Upgradeable token\\r\\n    ) public virtual initializer {\\r\\n        __ERC20StakedVotesUpgradeable_init_unchained(\\r\\n            name,\\r\\n            symbol,\\r\\n            decimals_,\\r\\n            admin,\\r\\n            processingCap,\\r\\n            wrappingRate,\\r\\n            stakingLockup,\\r\\n            unstakingLockup,\\r\\n            token\\r\\n        );\\r\\n        __ERC20Permit_init_unchained(name);\\r\\n        __GatewayGovernanceToken_init_unchained();\\r\\n    }\\r\\n\\r\\n    function __GatewayGovernanceToken_init_unchained()\\r\\n        internal\\r\\n        onlyInitializing\\r\\n    {}\\r\\n\\r\\n    function version() public pure virtual returns (string memory) {\\r\\n        return \\\"0.1\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev allow to get version for EIP712 domain dynamically. We do not need to init EIP712 anymore\\r\\n     *\\r\\n     */\\r\\n    function _EIP712VersionHash() internal pure override returns (bytes32) {\\r\\n        return keccak256(bytes(version()));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The hash of the name parameter for the EIP712 domain based on token name. We do not need to init EIP712 anymore\\r\\n     *\\r\\n     */\\r\\n    function _EIP712NameHash() internal view override returns (bytes32) {\\r\\n        return keccak256(bytes(name()));\\r\\n    }\\r\\n\\r\\n    function chainId() external view returns (uint256) {\\r\\n        return block.chainid;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev `burn` but with `burner`, `fee`, `nonce`, and `sig` as extra parameters.\\r\\n     * `fee` is a burn fee amount in Gluwacoin, which the burner will pay for the burn.\\r\\n     * `sig` is a signature created by signing the burn information with the burner\u2019s private key.\\r\\n     * Anyone can initiate the burn for the burner by calling the Etherless Burn function\\r\\n     * with the burn information and the signature.\\r\\n     * The caller will have to pay the gas for calling the function.\\r\\n     *\\r\\n     * Destroys `amount` + `fee` tokens from the burner.\\r\\n     * Transfers `amount` of base tokens from the contract to the burner and `fee` of base token to the caller.\\r\\n     *\\r\\n     * See {ERC20-_burn}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the burner must have tokens of at least `amount`, the `fee` is included in the amount.\\r\\n     */\\r\\n    function burn(\\r\\n        address burner,\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        bytes calldata sig\\r\\n    ) external override {\\r\\n        uint256 burnerBalance = balanceOf(burner);\\r\\n        require(\\r\\n            burnerBalance >= amount,\\r\\n            \\\"ERC20Wrapper: burn amount exceed balance\\\"\\r\\n        );\\r\\n\\r\\n        _useWrapperNonce(burner, nonce);\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                GluwacoinModel.SigDomain.Burn,\\r\\n                block.chainid,\\r\\n                address(this),\\r\\n                burner,\\r\\n                amount,\\r\\n                fee,\\r\\n                nonce\\r\\n            )\\r\\n        );\\r\\n        Validate.validateSignature(hash, burner, sig);\\r\\n\\r\\n        _transfer(burner, _msgSender(), fee);\\r\\n        __burn(burner, amount - fee);\\r\\n    }\\r\\n\\r\\n    function lockAccount() external {\\r\\n        _isLocked[_msgSender()] = true;\\r\\n    }\\r\\n\\r\\n    function unlockAccount(address account) external onlyAdmin {\\r\\n        _isLocked[account] = false;\\r\\n    }\\r\\n\\r\\n    function transferLockedAccount(\\r\\n        address account,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool isLocked_\\r\\n    ) external onlyAdmin {\\r\\n        require(\\r\\n            _isLocked[account],\\r\\n            \\\"GatewayGovernanceToken: fund must be locked\\\"\\r\\n        );\\r\\n        /// @dev allow txn to be processed\\r\\n        _isLocked[account] = false;\\r\\n        _transfer(account, recipient, amount);\\r\\n        _isLocked[account] = isLocked_;\\r\\n    }\\r\\n\\r\\n    function isLocked(address account) external view returns (bool) {\\r\\n        return _isLocked[account];\\r\\n    }\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override(ERC20StakedVotesUpgradeable) {\\r\\n        super._afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override(ERC20StakedVotesUpgradeable) {\\r\\n        /// @dev when a wallet is locked, can't move fund and staking/unstaking. \\r\\n        require(!_isLocked[from] && !_isLocked[to], \\\"GatewayGovernanceToken: fund is locked\\\");\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/IRewardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\r\\ninterface IRewardToken is IERC20Upgradeable{\\r\\n   \\r\\n    /**\\r\\n     * @dev Update accumulatedPerBlock and user.debt when stake() is called\\r\\n     */\\r\\n    function updateAccumulatedWhenStake(address account, uint256 amount) external;\\r\\n    /**\\r\\n     * @dev Update accumulatedPerBlock and user.debt when unstake() is called\\r\\n     */\\r\\n    function updateAccumulatedWhenUnstake(address account, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/IStakedVotesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IStakedVotesUpgradeable {\\r\\n    /**\\r\\n     * @dev Emitted when an account changes their delegate.\\r\\n     */\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\r\\n     */\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Stake tokens on a given `daoContract`.\\r\\n     */\\r\\n    function stake(uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Stake tokens from signer on a given `daoContract`.\\r\\n     */\\r\\n    function stakeBySig(\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Unstake tokens on a given `daoContract`.\\r\\n     */\\r\\n    function unstake(uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Unstake tokens from signer on a given `daoContract`.\\r\\n     */\\r\\n    function unstakeBySig(\\r\\n        uint256 amount,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of staked token that `account` made across all the supported contracts.\\r\\n     */\\r\\n    function stakeOf(address stakeholder) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total tokens of an address used to be staked token at the end of a past block (`blockNumber`).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `blockNumber` must have been already mined\\r\\n     */\\r\\n    function stakeOf(address stakeholder, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of votes that `account` had for a given `daoContract` at the end of a past block (`blockNumber`).\\r\\n     */\\r\\n    function getPastVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total staked token available at the end of a past block (`blockNumber`).\\r\\n     *\\r\\n     * NOTE: This value is the sum of all total staked token for a croos all the `daoContract`.\\r\\n     */\\r\\n    function getPastTotalStaked(uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current total staked tokens made by all users.\\r\\n     * It is but NOT the sum of all the delegated votes!\\r\\n    */\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the delegate that `account` has chosen for a given `daoContract`.\\r\\n     */\\r\\n    function delegates(address account) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates votes from the sender to `delegatee` on a given `daoContract`.\\r\\n     */\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Delegates votes from signer to `delegatee` on a given `daoContract`.\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 fee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns(bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_burnFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mintTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_BLOCK_FOR_RESERVATION\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"processingCap\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"wrappingRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakingLockup\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakingLockup\",\"type\":\"uint32\"}],\"name\":\"applySettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"internalType\":\"struct ERC20StakedVotesUpgradeable.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDelayedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getReservation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expiryBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"enum ERC20Reservable.ReservationStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"processingCap\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"wrappingRate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stakingLockup\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unstakingLockup\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintToStake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"mintToStakeBySig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numDelayedBalanceCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numStakedCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTotalStakedCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"reclaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"numberOfItem\",\"type\":\"uint16\"}],\"name\":\"removeQueueData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiryBlockNum\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"reservedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardToken\",\"name\":\"rewardingToken\",\"type\":\"address\"}],\"name\":\"setRewardingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeBySig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeholder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLocked_\",\"type\":\"bool\"}],\"name\":\"transferLockedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unreservedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"unstakeBySig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoContract_\",\"type\":\"address\"}],\"name\":\"updateSupportedDAOContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "GatewayGovernanceToken", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}