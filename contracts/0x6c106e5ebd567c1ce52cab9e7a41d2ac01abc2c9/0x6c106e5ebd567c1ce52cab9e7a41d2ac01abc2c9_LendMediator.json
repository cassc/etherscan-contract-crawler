{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/Autolend/Mediator/LendMediator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {LendMediatorProxyStorage} from \\\"./LendMediatorStorage.sol\\\";\\nimport {LendMediatorStorage} from \\\"./LendMediatorStorage.sol\\\";\\nimport {LendMediatorErrorInterface} from \\\"./LendMediatorInterface.sol\\\";\\nimport {LendMediatorEventInterface} from \\\"./LendMediatorInterface.sol\\\";\\nimport {LendMediatorFunctionInterface} from \\\"./LendMediatorInterface.sol\\\";\\nimport {SafeERC20} from \\\"../../lib/SafeErc20/SafeErc20.sol\\\";\\nimport {ECDSA} from \\\"../../lib/cryptography/ECDSA.sol\\\";\\nimport {IERC20} from \\\"../../Interface/IERC20.sol\\\";\\nimport {IERC1271} from \\\"../../Interface/IERC1271.sol\\\";\\nimport {IERC721Receiver} from \\\"../../Interface/IERC721Receiver.sol\\\";\\nimport {IERC165} from \\\"../../Interface/IERC165.sol\\\";\\nimport {INFTfi} from \\\"../../Interface/INFTFI.sol\\\";\\nimport {IRepaymentController} from \\\"../../Interface/IRepaymentController.sol\\\";\\nimport {IERC721Transfer} from \\\"../../Interface/IERC721Transfer.sol\\\";\\nimport {Lien} from \\\"../../Interface/IBlend.sol\\\";\\nimport {LienPointer} from \\\"../../Interface/IBlend.sol\\\";\\nimport {IBlend} from \\\"../../Interface/IBlend.sol\\\";\\nimport {IBlurPool} from \\\"../../Interface/IBlurPool.sol\\\";\\n\\n/**\\n * @title MetaLend's LendMediator Contract\\n * @author MetaLend\\n * @notice Manages lending to validated p2p borrowers\\n * @dev use this implementation for proxy mediators\\n */\\ncontract LendMediator is\\n    LendMediatorErrorInterface,\\n    LendMediatorEventInterface,\\n    LendMediatorFunctionInterface,\\n    IERC1271,\\n    IERC721Receiver,\\n    IERC165,\\n    LendMediatorProxyStorage,\\n    LendMediatorStorage\\n{\\n    /// @notice revert function if caller is not an owner\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) revert ErrCallerNotOwner(msg.sender);\\n        _;\\n    }\\n\\n    /// @notice revert function if caller is not an offer signer (or owner)\\n    modifier onlyOfferSignerOrOwner() {\\n        if (msg.sender != lendManager.offerSigner() && msg.sender != owner) revert ErrCallerNotOfferSignerOrOwner(msg.sender);\\n        _;\\n    }\\n\\n    /// @notice refund gas for transaction if sender is offer signer, this allows transactions on behalf of mediator owner\\n    modifier refundGas() {\\n        address offerSigner = lendManager.offerSigner();\\n        if (msg.sender == offerSigner) {\\n            if (address(this).balance == 0) revert ErrRefundFailed();\\n            uint256 gasAtStart = gasleft();\\n            _;\\n            uint256 gasSpent = gasAtStart - gasleft() + 54832;\\n            (bool success, ) = offerSigner.call{value: gasSpent * tx.gasprice}(\\\"\\\");\\n            if (!success) revert ErrRefundFailed();\\n        } else {\\n            _;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function depositErc20(address tokenAddress, uint256 amount) external override onlyOwner {\\n        if (amount == 0) revert ErrInvalidNumber(amount);\\n        uint256 balanceCurrent = IERC20(tokenAddress).balanceOf(address(this));\\n        SafeERC20.safeTransferFrom(IERC20(tokenAddress), msg.sender, address(this), amount);\\n        uint256 balanceAfter = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 transferredAmount = balanceAfter - balanceCurrent;\\n        depositedFunds[tokenAddress] += transferredAmount;\\n        emit FundsDeposited(tokenAddress, transferredAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function liquidateOverdueLoanNftfi(address nftfiAddress, uint32 loanId) external override onlyOwner {\\n        INFTfi(nftfiAddress).liquidateOverdueLoan(loanId);\\n        emit OverdueLoanLiquidated(nftfiAddress, uint256(loanId));\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function liquidateOverdueLoanArcade(address repaymentControllerAddress, uint256 loanId) external override onlyOwner {\\n        IRepaymentController(repaymentControllerAddress).claim(loanId);\\n        emit OverdueLoanLiquidated(repaymentControllerAddress, loanId);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function liquidateOverdueLoanBlend(\\n        address blendAddress,\\n        LienPointer calldata lienPointer\\n    ) external override refundGas onlyOfferSignerOrOwner {\\n        LienPointer[] memory lienPointers = new LienPointer[](1);\\n        lienPointers[0] = lienPointer;\\n        IBlend(blendAddress).seize(lienPointers);\\n        emit OverdueLoanLiquidated(blendAddress, lienPointer.lienId);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function takeOverLoanBlend(\\n        address blendAddress,\\n        Lien calldata lien,\\n        uint256 lienId,\\n        uint256 rate\\n    ) external override refundGas onlyOfferSignerOrOwner {\\n        IBlend(blendAddress).refinanceAuction(lien, lienId, rate);\\n        emit LoanOwnershipClaimed(blendAddress, lienId);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function depositBlurPool(address blurPool) external payable override onlyOwner {\\n        if (msg.value == 0) revert ErrInvalidNumber(msg.value);\\n        uint256 balanceCurrent = IBlurPool(blurPool).balanceOf(address(this));\\n        IBlurPool(blurPool).deposit{value: msg.value}();\\n        uint256 balanceAfter = IBlurPool(blurPool).balanceOf(address(this));\\n        uint256 transferredAmount = balanceAfter - balanceCurrent;\\n        depositedFunds[blurPool] += transferredAmount;\\n        emit FundsDeposited(blurPool, transferredAmount);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function withdrawBlurPool(address blurPool, uint256 amount) external override onlyOwner {\\n        if (amount == 0) revert ErrInvalidNumber(amount);\\n\\n        uint256 amountToWithdraw = amount;\\n        uint256 royaltiesAmount = _getRoyaltiesAmountWithdrawal(blurPool, amount);\\n\\n        if (royaltiesAmount > 0) {\\n            amountToWithdraw -= royaltiesAmount;\\n        }\\n\\n        _updateDepositedFundsWithdrawal(blurPool, amountToWithdraw);\\n\\n        IBlurPool(blurPool).withdraw(amount);\\n\\n        if (royaltiesAmount > 0) {\\n            address payable royaltiesReceiver = lendManager.royaltiesReceiver();\\n            (bool successTransfer1, ) = royaltiesReceiver.call{value: royaltiesAmount}(\\\"\\\");\\n            if (!successTransfer1) revert ErrTransferFailed(royaltiesReceiver, royaltiesAmount);\\n            emit RoyaltiesWithdrawn(blurPool, royaltiesAmount);\\n        }\\n\\n        (bool successTransfer2, ) = owner.call{value: amountToWithdraw}(\\\"\\\");\\n        if (!successTransfer2) revert ErrTransferFailed(owner, amountToWithdraw);\\n        emit FundsWithdrawn(blurPool, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function startAuctionBlend(\\n        address blendAddress,\\n        Lien calldata lien,\\n        uint256 lienId\\n    ) external override refundGas onlyOfferSignerOrOwner {\\n        IBlend(blendAddress).startAuction(lien, lienId);\\n        emit LoanOwnershipAuctionStarted(blendAddress, lienId);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function redeemErc721(uint256[] calldata tokenIds, address tokenAddress) external override onlyOwner {\\n        if (tokenIds.length == 0) revert ErrInvalidArrInput();\\n        IERC721Transfer tokenContract = IERC721Transfer(tokenAddress);\\n        for (uint i = 0; i < tokenIds.length; i++) {\\n            tokenContract.safeTransferFrom(address(this), owner, tokenIds[i]);\\n        }\\n        emit NftsWithdrawn(tokenAddress, tokenIds);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     * @dev royalties are only taken from the interest earned which is when amount > depositedFunds for the token address\\n     */\\n    function withdrawErc20(address tokenAddress, uint256 amount) external override onlyOwner {\\n        if (amount == 0) revert ErrInvalidNumber(amount);\\n\\n        uint256 amountToWithdraw = amount;\\n        uint256 royaltiesAmount = _getRoyaltiesAmountWithdrawal(tokenAddress, amount);\\n\\n        if (royaltiesAmount > 0) {\\n            amountToWithdraw -= royaltiesAmount;\\n        }\\n\\n        _updateDepositedFundsWithdrawal(tokenAddress, amountToWithdraw);\\n\\n        if (royaltiesAmount > 0) {\\n            SafeERC20.safeTransfer(IERC20(tokenAddress), lendManager.royaltiesReceiver(), royaltiesAmount);\\n            emit RoyaltiesWithdrawn(tokenAddress, royaltiesAmount);\\n        }\\n\\n        SafeERC20.safeTransfer(IERC20(tokenAddress), owner, amountToWithdraw);\\n        emit FundsWithdrawn(tokenAddress, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function approveErc20(address tokenAddress, address approvingContract) external override onlyOwner {\\n        uint256 allowance = IERC20(tokenAddress).allowance(address(this), approvingContract);\\n        SafeERC20.safeIncreaseAllowance(IERC20(tokenAddress), approvingContract, type(uint256).max - allowance);\\n        emit AllowanceModified(tokenAddress, approvingContract, type(uint256).max);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function resetAllowance(address tokenAddress, address approvingContract) external override onlyOwner {\\n        uint256 allowance = IERC20(tokenAddress).allowance(address(this), approvingContract);\\n        SafeERC20.safeDecreaseAllowance(IERC20(tokenAddress), approvingContract, allowance);\\n        emit AllowanceModified(tokenAddress, approvingContract, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    function withdrawEther(uint256 amount) external override onlyOwner {\\n        (bool success, ) = owner.call{value: amount}(\\\"\\\");\\n        if (!success) revert ErrTransferFailed(owner, amount);\\n    }\\n\\n    /**\\n     * @notice isValidSignature function implementation\\n     * @dev returns `0x1626ba7e` if signature belongs to `offerSigner` from LendManager\\n     * @param hash hash to compare\\n     * @param signature signature to verify\\n     */\\n    function isValidSignature(bytes32 hash, bytes calldata signature) external view override returns (bytes4) {\\n        address offerSigner = lendManager.offerSigner();\\n        if (offerSigner == address(0)) return 0xffffffff;\\n        if (ECDSA.recover(hash, signature) == offerSigner) {\\n            return 0x1626ba7e;\\n        } else {\\n            return 0xffffffff;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Receiver\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) external pure override returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 _interfaceId) external pure override returns (bool) {\\n        return _interfaceId == type(IERC721Receiver).interfaceId || _interfaceId == type(IERC165).interfaceId;\\n    }\\n\\n    /**\\n     * @notice Gets royalties amount on interest if applicable\\n     * @dev This function only returns a value and does not process any royalties transfer\\n     * @param tokenAddress address of the underlying token\\n     * @param amount the total amount being withdraw, modified by `depositedFunds`\\n     */\\n    function _getRoyaltiesAmountWithdrawal(address tokenAddress, uint256 amount) private view returns (uint256 royaltiesAmount) {\\n        if (\\n            lendManager.royaltiesPercentage() != 0 && amount > depositedFunds[tokenAddress] && lendManager.royaltiesReceiver() != address(0)\\n        ) {\\n            uint256 interestBalanceToWithdraw = amount - depositedFunds[tokenAddress];\\n            royaltiesAmount = lendManager.getValueByRoyaltiesPercentage(interestBalanceToWithdraw);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates `depositedFunds` based on `amountToWithdraw`\\n     * @dev if `amountToWithdraw` is greater than `depositedFunds[tokenAddress]` `depositedFunds[tokenAddress]` must be set to 0\\n     * @param tokenAddress address of the underlying token\\n     * @param amountToWithdraw the withdrawing amount\\n     */\\n    function _updateDepositedFundsWithdrawal(address tokenAddress, uint256 amountToWithdraw) private {\\n        if (amountToWithdraw > depositedFunds[tokenAddress]) {\\n            depositedFunds[tokenAddress] = 0;\\n        } else {\\n            depositedFunds[tokenAddress] -= amountToWithdraw;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc LendMediatorFunctionInterface\\n     */\\n    receive() external payable override {}\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBlurPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBlurPool {\\n    /**\\n     * @dev deposit ETH into pool\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @dev withdraw ETH from pool\\n     * @param amount Amount to withdraw\\n     */\\n    function withdraw(uint256 amount) external;\\n\\n    function balanceOf(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IBlend.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nstruct Lien {\\n    address lender;\\n    address borrower;\\n    address collection;\\n    uint256 tokenId;\\n    uint256 amount;\\n    uint256 startTime;\\n    uint256 rate;\\n    uint256 auctionStartBlock;\\n    uint256 auctionDuration;\\n}\\n\\nstruct LienPointer {\\n    Lien lien;\\n    uint256 lienId;\\n}\\n\\ninterface IBlend {\\n    /**\\n     * @notice Starts Dutch Auction on lien ownership\\n     * @dev Must be called by lien owner\\n     * @param lienId Lien token id\\n     */\\n    function startAuction(Lien calldata lien, uint256 lienId) external;\\n\\n    /**\\n     * @notice Seizes collateral from defaulted lien, skipping liens that are not defaulted\\n     * @param lienPointers List of lien, lienId pairs\\n     */\\n    function seize(LienPointer[] calldata lienPointers) external;\\n\\n    /**\\n     * @notice Refinance lien in auction at the current debt amount where the interest rate ceiling increases over time\\n     * @dev Interest rate must be lower than the interest rate ceiling\\n     * @param lien Lien struct\\n     * @param lienId Lien token id\\n     * @param rate Interest rate (in bips)\\n     * @dev Formula: https://www.desmos.com/calculator/urasr71dhb\\n     */\\n    function refinanceAuction(Lien calldata lien, uint256 lienId, uint256 rate) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IERC721Transfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC721 interface with transfer function\\n */\\ninterface IERC721Transfer {\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IRepaymentController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IRepaymentController {\\n    function claim(uint256 loanId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/INFTFI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface INFTfi {\\n    /**\\n     * @dev Used to liquidate foreclosed loans\\n     * @param _loanId The id of the loan to liquidate\\n     */\\n    function liquidateOverdueLoan(uint32 _loanId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"../strings/Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/SafeErc20/SafeErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../Interface/IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../../Interface/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require((value == 0) || (token.allowance(address(this), spender) == 0), \\\"SafeERC20: approve from non-zero to non-zero allowance\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Autolend/Mediator/LendMediatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Lien} from \\\"../../Interface/IBlend.sol\\\";\\nimport {LienPointer} from \\\"../../Interface/IBlend.sol\\\";\\n\\n/**\\n * @title MetaLend's mediator error interface\\n * @author MetaLend\\n * @notice defines the errors for reporting during reverts\\n * @dev use this with proxy and implementation to report errors\\n */\\ninterface LendMediatorErrorInterface {\\n    /**\\n     * @notice Thrown when guarded function is called by not an owner\\n     * @param caller address of the invalid caller\\n     */\\n    error ErrCallerNotOwner(address caller);\\n\\n    /**\\n     * @notice Thrown when guarded function is called by not an offerSigner or not an owner\\n     * @param caller address of the invalid caller\\n     */\\n    error ErrCallerNotOfferSignerOrOwner(address caller);\\n\\n    /**\\n     * @notice Thrown when array input is invalid (such as length == 0)\\n     */\\n    error ErrInvalidArrInput();\\n\\n    /**\\n     * @notice Thrown when input param is an invalid number (e.g. does not fit constraints)\\n     * @param num the invalid number\\n     */\\n    error ErrInvalidNumber(uint256 num);\\n\\n    /**\\n     * @notice Thrown when transfer failed (e.g. Ether transfer)\\n     * @param to the target for transfer\\n     * @param amount the amount for transfer\\n     */\\n    error ErrTransferFailed(address to, uint256 amount);\\n\\n    /**\\n     * @notice Thrown when transaction refund fails\\n     */\\n    error ErrRefundFailed();\\n}\\n\\n/**\\n * @title MetaLend's mediator event interface\\n * @author MetaLend\\n * @notice defines the events emitted during interaction\\n * @dev use this with proxy and implementation to emit events\\n */\\ninterface LendMediatorEventInterface {\\n    /**\\n     * @notice emitted when an overdue loan is liquidated\\n     * @param protocol address of the lending protocol\\n     * @param loanId id of the loan\\n     */\\n    event OverdueLoanLiquidated(address indexed protocol, uint256 loanId);\\n\\n    /**\\n     * @notice emitted when funds are deposited\\n     * @param tokenAddress the address of the ERC20 token\\n     * @param amount the amount\\n     */\\n    event FundsDeposited(address indexed tokenAddress, uint256 amount);\\n\\n    /**\\n     * @notice emitted when funds are withdrawn\\n     * @param tokenAddress the address of the ERC20 token\\n     * @param amount the amount\\n     */\\n    event FundsWithdrawn(address indexed tokenAddress, uint256 amount);\\n\\n    /**\\n     * @notice emitted when NFT tokens are withdrawn\\n     * @param tokenAddress the address of the ERC721 token\\n     * @param tokenIds the token ids\\n     */\\n    event NftsWithdrawn(address indexed tokenAddress, uint256[] tokenIds);\\n\\n    /**\\n     * @notice emitted when royalties from loans are sent\\n     * @param tokenAddress the address of the ERC20 token\\n     * @param amount the amount\\n     */\\n    event RoyaltiesWithdrawn(address indexed tokenAddress, uint256 amount);\\n\\n    /**\\n     * @notice emitted when mediator approves `spender` contract to transfer tokens on behalf of\\n     * @param tokenAddress the token contract\\n     * @param spender the spending contract, such as NFTFI or Arcade\\n     * @param newAllowance the new approving amount\\n     */\\n    event AllowanceModified(address indexed tokenAddress, address indexed spender, uint256 newAllowance);\\n\\n    /**\\n     * @notice emitted when a loan ownership in given protocol is taken over by this mediator\\n     * @param protocol address of the lending protocol\\n     * @param loanId id of the loan\\n     */\\n    event LoanOwnershipClaimed(address indexed protocol, uint256 loanId);\\n\\n    /**\\n     * @notice emitted when an auction on loan ownership is started in given protocol\\n     * @param protocol address of the lending protocol\\n     * @param loanId id of the loan\\n     */\\n    event LoanOwnershipAuctionStarted(address indexed protocol, uint256 loanId);\\n}\\n\\n/**\\n * @title MetaLend's mediator function interface\\n * @author MetaLend\\n * @notice defines the functions usable in mediator contracts\\n * @dev use this with implementation contract to override functions\\n */\\ninterface LendMediatorFunctionInterface {\\n    /**\\n     * @notice function to deposit ERC20 funds\\n     * @dev called only by owner of this mediator\\n     * @param tokenAddress the address of the ERC20 token contract\\n     * @param amount the amount to deposit\\n     */\\n    function depositErc20(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * @notice liquidates NFTFI overdue loan and receives the NFT\\n     * @dev this contract must support IERC721Receiver, called only by owner of this mediator\\n     * @param nftfiAddress the address of the NFTFI protocol\\n     * @param loanId the id of the loan\\n     */\\n    function liquidateOverdueLoanNftfi(address nftfiAddress, uint32 loanId) external;\\n\\n    /**\\n     * @notice liquidates Arcade overdue loan and receives the NFT\\n     * @dev this contract must support IERC721Receiver, called only by owner of this mediator\\n     * @param repaymentControllerAddress the address of the Arcade repayment controller\\n     * @param loanId the id of the loan\\n     */\\n    function liquidateOverdueLoanArcade(address repaymentControllerAddress, uint256 loanId) external;\\n\\n    /**\\n     * @notice liquidates Blend overdue loan and receives the NFT\\n     * @dev this contract must support IERC721Receiver, called only by owner of this mediator or offer signer\\n     * @param blendAddress the address of the Blend protocol\\n     * @param lienPointer custom structure defined by Blend, see `IBlend.sol`\\n     */\\n    function liquidateOverdueLoanBlend(address blendAddress, LienPointer calldata lienPointer) external;\\n\\n    /**\\n     * @notice takes ownership of lien in Blend protocol, must repay the debt\\n     * @dev called only by owner of this mediator or offer signer\\n     * @param blendAddress address of the Blend protocol\\n     * @param lien custom structure defined by Blend, see `IBlend.sol`\\n     * @param lienId id of the lien\\n     * @param rate Interest rate (in bips) - Formula: https://www.desmos.com/calculator/urasr71dhb\\n     */\\n    function takeOverLoanBlend(address blendAddress, Lien calldata lien, uint256 lienId, uint256 rate) external;\\n\\n    /**\\n     * @notice starts auction on ownership for given lien\\n     * @dev called only by owner of this mediator or offer signer\\n     * @param blendAddress address of the Blend protocol\\n     * @param lien custom structure defined by Blend, see `IBlend.sol`\\n     * @param lienId id of the lien\\n     */\\n    function startAuctionBlend(address blendAddress, Lien calldata lien, uint256 lienId) external;\\n\\n    /**\\n     * @notice deposits ETH to Blur Pool which is used to manage funds for Blend\\n     * @dev called only by owner of this mediator\\n     *  deposited ETH does not need approval for transfers between Blend services\\n     *  `msg.value` is the amount to deposit\\n     * @param blurPool address of the Blend pool\\n     */\\n    function depositBlurPool(address blurPool) external payable;\\n\\n    /**\\n     * @notice withdraws ETH from Blur Pool\\n     * @dev called only by owner of this mediator\\n     * @param blurPool address of the Blend pool\\n     * @param amount the amount to withdraw\\n     */\\n    function withdrawBlurPool(address blurPool, uint256 amount) external;\\n\\n    /**\\n     * @notice withdraws ERC721 NFTs\\n     * @dev called only by owner of this mediator\\n     * @param tokenIds the token id to withdraw\\n     * @param tokenAddress address of the NFT contract\\n     */\\n    function redeemErc721(uint256[] calldata tokenIds, address tokenAddress) external;\\n\\n    /**\\n     * @notice withdraws ERC20 tokens minus fee if applicable\\n     * @dev called only by owner of this mediator\\n     * @param tokenAddress the address of the ERC20 token contract\\n     * @param amount the amount to withdraw\\n     */\\n    function withdrawErc20(address tokenAddress, uint256 amount) external;\\n\\n    /**\\n     * @notice approves `approvingContract` to spend the ERC20 balance\\n     * @dev this approves to max uint256 value, make sure the `approvingContract` is safe\\n     *  called only by owner of this mediator\\n     * @param tokenAddress the address of the ERC20 token to approve\\n     * @param approvingContract the address of the account to approve for spending\\n     */\\n    function approveErc20(address tokenAddress, address approvingContract) external;\\n\\n    /**\\n     * @notice removes ERC20 approval\\n     * @dev called only by owner of this mediator\\n     * @param tokenAddress the address of the ERC20 token to reset allowance for\\n     * @param approvingContract the address of the account to remove allowance from\\n     */\\n    function resetAllowance(address tokenAddress, address approvingContract) external;\\n\\n    /**\\n     * @notice withdraws Ether to mediator owner\\n     * @dev called only by owner of this mediator\\n     * @param amount the amount to withdraw\\n     */\\n    function withdrawEther(uint256 amount) external;\\n\\n    /**\\n     * @notice receive function to be able to get Ether\\n     * @dev no custom functionality at this moment\\n     */\\n    receive() external payable;\\n}\\n\\n/**\\n * @title MetaLend's mediator proxy interface\\n * @author MetaLend\\n * @notice defines events and errors for mediator proxy\\n * @dev use this interface with mediator proxy\\n */\\ninterface LendMediatorProxyInterface {\\n    /**\\n     * @notice Thrown when input param is an invalid address (such as address(0))\\n     * @param addr the invalid address\\n     */\\n    error ErrInvalidAddress(address addr);\\n\\n    /**\\n     * @notice Thrown when LendMediator creating contract is not a LendManager\\n     * @param addr the address of the invalid contract\\n     */\\n    error ErrCallerNotLendManager(address addr);\\n\\n    /**\\n     * @notice emitted when a new LendManager is set (during initialization)\\n     * @param manager the manager address\\n     */\\n    event NewLendManager(address indexed manager);\\n\\n    /**\\n     * @notice emitted when an owner is set (during initialization)\\n     * @param owner the owner addres\\n     */\\n    event NewOwner(address indexed owner);\\n}\\n\"\r\n    },\r\n    \"contracts/Autolend/Mediator/LendMediatorStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {LendManager} from \\\"../Manager/LendManager.sol\\\";\\n\\n/**\\n * @title MetaLend's Lend Mediator proxy storage\\n * @author MetaLend\\n * @notice defines the proxy storage layout\\n * @dev this should be inherited by `LendMediator` so that implementation and proxy have same layouts\\n */\\nabstract contract LendMediatorProxyStorage {\\n    /// @notice Indicator that this is a LendMediator contract (for inspection)\\n    /// @return bool true this is lend mediator\\n    bool public constant IS_LEND_MEDIATOR = true;\\n\\n    /// @notice manager which holds all data for LendMediator that is shared among all mediator contracts\\n    /// @return address of the LendManager\\n    LendManager public lendManager;\\n\\n    /// @notice the owner (user) of the mediator, each mediating contact belongs to EOA\\n    /// @return address of the owner\\n    address payable public owner;\\n}\\n\\n/**\\n * @title MetaLend's Lend Mediator storage\\n * @author MetaLend\\n * @notice defines the initial storage layout\\n * @dev use for both proxy and implementation contracts\\n */\\nabstract contract LendMediatorStorage {\\n    /// @notice funds deposited by owner mapped to token contract address\\n    /// @return uint256 value of given token address\\n    mapping(address => uint256) public depositedFunds;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/strings/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SignedMath} from \\\"../math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interface/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/Autolend/Manager/LendManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {LendManagerProxyStorage} from \\\"./LendManagerStorage.sol\\\";\\nimport {LendManagerStorage} from \\\"./LendManagerStorage.sol\\\";\\nimport {LendManagerErrorInterface} from \\\"./LendManagerInterface.sol\\\";\\nimport {LendManagerEventInterface} from \\\"./LendManagerInterface.sol\\\";\\nimport {LendManagerFunctionInterface} from \\\"./LendManagerInterface.sol\\\";\\nimport {LendMediatorProxy} from \\\"../Mediator/LendMediatorProxy.sol\\\";\\nimport {LendMediatorProxyStorage} from \\\"../Mediator/LendMediatorStorage.sol\\\";\\nimport {DetectContract} from \\\"../../lib/utils/DetectContract.sol\\\";\\n\\n/**\\n * @title MetaLend's LendManager Contract\\n * @author MetaLend\\n * @notice Manages staking of lender funds to official onchain staking contracts to be deployed in p2p lending protocols\\n * @dev this is an implementation for proxy\\n */\\ncontract LendManager is\\n    LendManagerErrorInterface,\\n    LendManagerEventInterface,\\n    LendManagerFunctionInterface,\\n    LendManagerProxyStorage,\\n    LendManagerStorage\\n{\\n    /// @notice revert function if caller is not an admin\\n    modifier onlyAdmin() {\\n        if (msg.sender != admin) revert ErrCallerNotAdmin(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc LendManagerFunctionInterface\\n     */\\n    function createLendMediator() external override {\\n        if (userLendMediator[msg.sender] != address(0)) revert ErrMediatorExists(msg.sender, userLendMediator[msg.sender]);\\n        LendMediatorProxy mediatorContract = new LendMediatorProxy(payable(msg.sender));\\n        address newMediatorAddress = address(mediatorContract);\\n        emit NewLendMediator(msg.sender, newMediatorAddress);\\n        userLendMediator[msg.sender] = newMediatorAddress;\\n    }\\n\\n    /**\\n     * @inheritdoc LendManagerFunctionInterface\\n     */\\n    function feeDenominator() public pure override returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @inheritdoc LendManagerFunctionInterface\\n     */\\n    function getValueByRoyaltiesPercentage(uint256 value) external view override returns (uint256) {\\n        return (value * royaltiesPercentage) / feeDenominator();\\n    }\\n\\n    /**\\n     * @inheritdoc LendManagerFunctionInterface\\n     */\\n    function setRoyaltiesPercentage(uint256 newPercentage) external override onlyAdmin {\\n        if (newPercentage > feeDenominator()) revert ErrInvalidNumber(newPercentage);\\n        emit NewRoyaltiesPercentage(royaltiesPercentage, newPercentage);\\n        royaltiesPercentage = newPercentage;\\n    }\\n\\n    /**\\n     * @inheritdoc LendManagerFunctionInterface\\n     */\\n    function setRoyaltiesReceiver(address payable newReceiver) external override onlyAdmin {\\n        if (newReceiver == address(0)) revert ErrInvalidAddress(newReceiver);\\n        emit NewRoyaltiesReceiver(royaltiesReceiver, newReceiver);\\n        royaltiesReceiver = newReceiver;\\n    }\\n\\n    /**\\n     * @inheritdoc LendManagerFunctionInterface\\n     */\\n    function setOfferSigner(address newSigner) external override onlyAdmin {\\n        if (newSigner == address(0)) revert ErrInvalidAddress(newSigner);\\n        emit NewOfferSigner(offerSigner, newSigner);\\n        offerSigner = newSigner;\\n    }\\n\\n    /**\\n     * @inheritdoc LendManagerFunctionInterface\\n     */\\n    function setLendMediatorImplementation(address newImplementation) external override onlyAdmin {\\n        if (!DetectContract.isExistingContract(newImplementation)) {\\n            revert ErrImplementationNotLendMediator(newImplementation);\\n        }\\n        try LendMediatorProxyStorage(newImplementation).IS_LEND_MEDIATOR() returns (bool isLendMediator) {\\n            if (!isLendMediator) {\\n                revert ErrImplementationNotLendMediator(newImplementation);\\n            }\\n        } catch {\\n            revert ErrImplementationNotLendMediator(newImplementation);\\n        }\\n        emit NewLendMediatorImplementation(lendMediatorImplementation, newImplementation);\\n        lendMediatorImplementation = newImplementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/utils/DetectContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title MetaLend's DetectContract utility\\n * @author MetaLend\\n * @notice Contains function to detect if address is a contract\\n * @dev Only works for already deployed contracts\\n */\\nlibrary DetectContract {\\n    /**\\n     * @notice function to detect if address is existing contract (already created)\\n     * @dev used for checking if caller is contract\\n     * @param addr the address of the account to check\\n     * @return bool if address is contract\\n     */\\n    function isExistingContract(address addr) internal view returns (bool) {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(addr)\\n        }\\n        if (contractSize == 0) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Autolend/Mediator/LendMediatorProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Proxy} from \\\"../../lib/Proxy/Proxy.sol\\\";\\nimport {LendMediatorProxyStorage} from \\\"./LendMediatorStorage.sol\\\";\\nimport {LendManager} from \\\"../Manager/LendManager.sol\\\";\\nimport {LendMediatorProxyInterface} from \\\"./LendMediatorInterface.sol\\\";\\nimport {DetectContract} from \\\"../../lib/utils/DetectContract.sol\\\";\\n\\n/**\\n * @title MetaLend's LendMediatorProxy Contract\\n * @author MetaLend\\n * @notice Each user has one mediator proxy contract\\n * @dev Proxies to LendMediator implementation\\n */\\ncontract LendMediatorProxy is Proxy, LendMediatorProxyInterface, LendMediatorProxyStorage {\\n    /**\\n     * @notice Construct the mediator contract\\n     * @dev msg.sender is LendManager\\n     * @param newOwner The owner of the mediator contract (user)\\n     */\\n    constructor(address payable newOwner) {\\n        if (!DetectContract.isExistingContract(msg.sender)) {\\n            revert ErrCallerNotLendManager(msg.sender);\\n        }\\n        try LendManager(msg.sender).IS_LEND_MANAGER() returns (bool isLendManager) {\\n            if (!isLendManager) {\\n                revert ErrCallerNotLendManager(msg.sender);\\n            }\\n        } catch {\\n            revert ErrCallerNotLendManager(msg.sender);\\n        }\\n        if (newOwner == address(0)) revert ErrInvalidAddress(newOwner);\\n        lendManager = LendManager(msg.sender);\\n        owner = newOwner;\\n        emit NewLendManager(msg.sender);\\n        emit NewOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice this function returns mediator implementation held at manager\\n     * @return address of the implementation\\n     */\\n    function _implementation() internal view override returns (address) {\\n        address implementation = lendManager.lendMediatorImplementation();\\n        if (implementation == address(0)) revert ErrInvalidAddress(implementation);\\n        return implementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Autolend/Manager/LendManagerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title MetaLend's manager error interface\\n * @author MetaLend\\n * @notice defines the errors for reporting during reverts\\n * @dev use this with proxy and implementation to report errors\\n */\\ninterface LendManagerErrorInterface {\\n    /**\\n     * @notice Thrown when guarded function is called by non admin address\\n     * @param caller address of the invalid caller\\n     */\\n    error ErrCallerNotAdmin(address caller);\\n\\n    /**\\n     * @notice Thrown when trying to set implementation of mediator to address which is not mediator\\n     * @param implementation the address of the invalid implementation\\n     */\\n    error ErrImplementationNotLendMediator(address implementation);\\n\\n    /**\\n     * @notice Thrown when input param is an invalid number (e.g. does not fit constraints)\\n     * @param num the invalid number\\n     */\\n    error ErrInvalidNumber(uint256 num);\\n\\n    /**\\n     * @notice Thrown when input param is an invalid address (such as address(0))\\n     * @param addr the invalid address\\n     */\\n    error ErrInvalidAddress(address addr);\\n\\n    /**\\n     * @notice Thrown when user tries to create a mediator and it already exists\\n     * @param user the user with existing mediator\\n     * @param mediator the existing mediator address\\n     */\\n    error ErrMediatorExists(address user, address mediator);\\n}\\n\\n/**\\n * @title MetaLend's manager event interface\\n * @author MetaLend\\n * @notice defines the events emitted during interaction\\n * @dev use this with proxy and implementation to emit events\\n */\\ninterface LendManagerEventInterface {\\n    /**\\n     * @notice emitted when a new mediator is created\\n     * @param user address of the account which creates the new mediator contract\\n     * @param mediator address of the mediator contract\\n     */\\n    event NewLendMediator(address indexed user, address indexed mediator);\\n    /**\\n     * @notice emitted when a global mediator implementation changes\\n     * @param previous the previous implementation address\\n     * @param next the new implementation address\\n     */\\n    event NewLendMediatorImplementation(address indexed previous, address indexed next);\\n\\n    /**\\n     * @notice emitted when a royalties percentage changes\\n     * @param previous the previous percentage value\\n     * @param next the new percentage value\\n     */\\n    event NewRoyaltiesPercentage(uint256 indexed previous, uint256 indexed next);\\n\\n    /**\\n     * @notice emitted when a new royalties receiver is set\\n     * @param previous the previous receiver\\n     * @param next the new receiver\\n     */\\n    event NewRoyaltiesReceiver(address indexed previous, address indexed next);\\n\\n    /**\\n     * @notice emitted when a new offer signer is set\\n     * @param previous the previous offer signer\\n     * @param next the new offer signer\\n     */\\n    event NewOfferSigner(address indexed previous, address indexed next);\\n}\\n\\n/**\\n * @title MetaLend's manager function interface\\n * @author MetaLend\\n * @notice defines the functions usable in manager contracts\\n * @dev use this with implementation contract to override functions\\n */\\ninterface LendManagerFunctionInterface {\\n    /**\\n     * @notice denominator to calculate percentage\\n     * @dev use this to calculate percentages\\n     * @return uint256 10000\\n     */\\n    function feeDenominator() external pure returns (uint256);\\n\\n    /**\\n     * @notice creates a new mediator for user\\n     * @dev reverts if mediator already exists for given address\\n     */\\n    function createLendMediator() external;\\n\\n    /**\\n     * @notice sets the new value for royalties percentage\\n     * @dev called only by MetaLend admin\\n     *  100 = 1%, based on {feeDenominator}\\n     * @param newPercentage the new percentage for royalties\\n     */\\n    function setRoyaltiesPercentage(uint256 newPercentage) external;\\n\\n    /**\\n     * @notice sets the new royalties receiver\\n     * @dev called only by MetaLend admin\\n     * @param newReceiver address of the new receiver\\n     */\\n    function setRoyaltiesReceiver(address payable newReceiver) external;\\n\\n    /**\\n     * @notice sets the new implementation for all mediator contracts\\n     * @dev called only by MetaLend admin\\n     * @param newImplementation address of the new implementation contract\\n     */\\n    function setLendMediatorImplementation(address newImplementation) external;\\n\\n    /**\\n     * @notice sets the new address of the signer of offers\\n     * @dev called only by MetaLend admin\\n     * @param newSigner address of the new signer of offers\\n     */\\n    function setOfferSigner(address newSigner) external;\\n\\n    /**\\n     * @notice returns a value modified by royalties precentage\\n     * @param value the uint256 value to modify\\n     * @return uint256 the result\\n     */\\n    function getValueByRoyaltiesPercentage(uint256 value) external view returns (uint256);\\n}\\n\\n/**\\n * @title MetaLend's manager proxy interface\\n * @author MetaLend\\n * @notice defines setImplementation proxy function and event and error\\n * @dev use this interface with manager proxy\\n */\\ninterface LendManagerProxyInterface {\\n    /**\\n     * @notice Thrown when guarded function is called by non admin address\\n     * @param caller address of the invalid caller\\n     */\\n    error ErrCallerNotAdmin(address caller);\\n\\n    /**\\n     * @notice Thrown when input param is an invalid address (such as address(0))\\n     * @param addr the invalid address\\n     */\\n    error ErrInvalidAddress(address addr);\\n\\n    /**\\n     * @notice Thrown when trying to set implementation of manager to address which is not manager\\n     * @param implementation the address of the invalid implementation\\n     */\\n    error ErrImplementationNotLendManager(address implementation);\\n\\n    /**\\n     * @notice Emitted when implementation is changed\\n     * @param previous address of the old implementation contract\\n     * @param next address of the new implementation contract\\n     */\\n    event NewImplementation(address indexed previous, address indexed next);\\n\\n    /**\\n     * @notice emitted when an admin is changed\\n     * @param previous the previous admin\\n     * @param next the new admin\\n     */\\n    event NewAdmin(address indexed previous, address indexed next);\\n\\n    /**\\n     * @notice sets the new implementation for the proxy contract\\n     * @dev should be available to be called only under specific cirmustances (such as an admin account)\\n     * @param newImplementation the address of the new implementation contract\\n     */\\n    function setImplementation(address newImplementation) external;\\n\\n    /**\\n     * @notice sets the new admin\\n     * @dev called only by MetaLend admin\\n     * @param newAdmin the new admin of the protocol\\n     */\\n    function setAdmin(address newAdmin) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Autolend/Manager/LendManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title MetaLend's Lend Manager proxy storage contract\\n * @author MetaLend\\n * @notice defines storage layout for proxy contract\\n * @dev this should be inherited by `LendManager` so that implementation and proxy have same layouts\\n */\\nabstract contract LendManagerProxyStorage {\\n    /// @notice Indicator that this is a LendManager contract (for inspection)\\n    /// @return bool true this is lend manager\\n    bool public constant IS_LEND_MANAGER = true;\\n\\n    /// @notice implementaiton for proxy\\n    /// @return address of the implementation manager contract\\n    address public implementation;\\n\\n    /// @notice MetaLend admin\\n    /// @return address of the MetaLend admin for this manager\\n    address public admin;\\n}\\n\\n/**\\n * @title MetaLend's Lend Manager storage contract\\n * @author MetaLend\\n * @notice defines storage layout for manager contracts\\n * @dev use for both proxy and implementation contracts\\n */\\nabstract contract LendManagerStorage {\\n    /// @notice global implementation for all mediator contracts\\n    /// @return address of the mediator implementation contract\\n    address public lendMediatorImplementation;\\n\\n    /// @notice signer of offers\\n    /// @return address of the offer signer\\n    address public offerSigner;\\n\\n    /// @notice if royalties are implemented, this is the receiver\\n    /// @return address of the royalties receiver\\n    address payable public royaltiesReceiver;\\n\\n    /// @notice scale 0 <=> 10000, 1% = 100\\n    /// @return uint256 the percentage\\n    uint256 public royaltiesPercentage;\\n\\n    /// @notice mapping from user address to own userLendMediator\\n    /// @return address of the mediator contract for given address of the user\\n    mapping(address => address) public userLendMediator;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ErrCallerNotOfferSignerOrOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ErrCallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrInvalidArrInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"ErrInvalidNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrRefundFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ErrTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAllowance\",\"type\":\"uint256\"}],\"name\":\"AllowanceModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"LoanOwnershipAuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"LoanOwnershipClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"NftsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"OverdueLoanLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltiesWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_LEND_MEDIATOR\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approvingContract\",\"type\":\"address\"}],\"name\":\"approveErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blurPool\",\"type\":\"address\"}],\"name\":\"depositBlurPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendManager\",\"outputs\":[{\"internalType\":\"contract LendManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repaymentControllerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"liquidateOverdueLoanArcade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blendAddress\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"internalType\":\"struct LienPointer\",\"name\":\"lienPointer\",\"type\":\"tuple\"}],\"name\":\"liquidateOverdueLoanBlend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftfiAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"loanId\",\"type\":\"uint32\"}],\"name\":\"liquidateOverdueLoanNftfi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"redeemErc721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approvingContract\",\"type\":\"address\"}],\"name\":\"resetAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blendAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"}],\"name\":\"startAuctionBlend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blendAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStartBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Lien\",\"name\":\"lien\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lienId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"takeOverLoanBlend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blurPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBlurPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LendMediator", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "none"}