{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/crosschain-data/adapters/layerzero/LayerzeroImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\nimport { IAmbImplementation } from \\\"src/interfaces/IAmbImplementation.sol\\\";\\nimport { IBaseStateRegistry } from \\\"src/interfaces/IBaseStateRegistry.sol\\\";\\nimport { ISuperRBAC } from \\\"src/interfaces/ISuperRBAC.sol\\\";\\nimport { ISuperRegistry } from \\\"src/interfaces/ISuperRegistry.sol\\\";\\nimport { DataLib } from \\\"src/libraries/DataLib.sol\\\";\\nimport { Error } from \\\"src/libraries/Error.sol\\\";\\nimport { AMBMessage } from \\\"src/types/DataTypes.sol\\\";\\nimport { ILayerZeroEndpoint } from \\\"src/vendor/layerzero/ILayerZeroEndpoint.sol\\\";\\nimport { ILayerZeroReceiver } from \\\"src/vendor/layerzero/ILayerZeroReceiver.sol\\\";\\nimport { ILayerZeroUserApplicationConfig } from \\\"src/vendor/layerzero/ILayerZeroUserApplicationConfig.sol\\\";\\n\\n/// @title LayerzeroImplementation\\n/// @dev Allows state registries to use Layerzero for crosschain communication\\n/// @author Zeropoint Labs\\ncontract LayerzeroImplementation is IAmbImplementation, ILayerZeroUserApplicationConfig, ILayerZeroReceiver {\\n    using DataLib for uint256;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                         CONSTANTS                         //\\n    //////////////////////////////////////////////////////////////\\n\\n    ISuperRegistry public immutable superRegistry;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                     STATE VARIABLES                      //\\n    //////////////////////////////////////////////////////////////\\n\\n    ILayerZeroEndpoint public lzEndpoint;\\n\\n    mapping(uint64 => uint16) public ambChainId;\\n    mapping(uint16 => uint64) public superChainId;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    //////////////////////////////////////////////////////////////\\n    //                          EVENTS                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    event EndpointUpdated(address indexed oldEndpoint_, address indexed newEndpoint_);\\n    event MessageFailed(uint16 indexed srcChainId_, bytes srcAddress_, uint64 indexed nonce_, bytes payload_);\\n    event SetTrustedRemote(uint16 indexed srcChainId_, bytes srcAddress_);\\n\\n    //////////////////////////////////////////////////////////////\\n    //                       MODIFIERS                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    modifier onlyProtocolAdmin() {\\n        if (!ISuperRBAC(superRegistry.getAddress(keccak256(\\\"SUPER_RBAC\\\"))).hasProtocolAdminRole(msg.sender)) {\\n            revert Error.NOT_PROTOCOL_ADMIN();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyEmergencyAdmin() {\\n        if (!ISuperRBAC(superRegistry.getAddress(keccak256(\\\"SUPER_RBAC\\\"))).hasEmergencyAdminRole(msg.sender)) {\\n            revert Error.NOT_EMERGENCY_ADMIN();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyValidStateRegistry() {\\n        if (!superRegistry.isValidStateRegistry(msg.sender)) {\\n            revert Error.NOT_STATE_REGISTRY();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyLzEndpoint() {\\n        // lzReceive must be called by the endpoint for security\\n        if (msg.sender != address(lzEndpoint)) {\\n            revert Error.CALLER_NOT_ENDPOINT();\\n        }\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                      CONSTRUCTOR                         //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @param superRegistry_ is the super registry address\\n    constructor(ISuperRegistry superRegistry_) {\\n        superRegistry = superRegistry_;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                         CONFIG                           //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev allows protocol admin to configure layerzero endpoint\\n    /// @param endpoint_ is the layerzero endpoint on the deployed network\\n    function setLzEndpoint(address endpoint_) external onlyProtocolAdmin {\\n        if (endpoint_ == address(0)) revert Error.ZERO_ADDRESS();\\n\\n        if (address(lzEndpoint) == address(0)) {\\n            lzEndpoint = ILayerZeroEndpoint(endpoint_);\\n            emit EndpointUpdated(address(0), endpoint_);\\n        }\\n    }\\n\\n    /// @dev gets the configuration of the current LayerZero implementation supported\\n    /// @param version_ is the messaging library version\\n    /// @param chainId_ is the layerzero chainId for the pending config change\\n    /// @param configType_ is the type of configuration\\n    function getConfig(\\n        uint16 version_,\\n        uint16 chainId_,\\n        address,\\n        uint256 configType_\\n    )\\n        external\\n        view\\n        returns (bytes memory)\\n    {\\n        return lzEndpoint.getConfig(version_, chainId_, address(this), configType_);\\n    }\\n\\n    /// @inheritdoc ILayerZeroUserApplicationConfig\\n    function setConfig(\\n        uint16 version_,\\n        uint16 chainId_,\\n        uint256 configType_,\\n        bytes calldata config_\\n    )\\n        external\\n        override\\n        onlyProtocolAdmin\\n    {\\n        lzEndpoint.setConfig(version_, chainId_, configType_, config_);\\n    }\\n\\n    /// @inheritdoc ILayerZeroUserApplicationConfig\\n    function setSendVersion(uint16 version_) external override onlyProtocolAdmin {\\n        lzEndpoint.setSendVersion(version_);\\n    }\\n\\n    /// @inheritdoc ILayerZeroUserApplicationConfig\\n    function setReceiveVersion(uint16 version_) external override onlyProtocolAdmin {\\n        lzEndpoint.setReceiveVersion(version_);\\n    }\\n\\n    /// @inheritdoc ILayerZeroUserApplicationConfig\\n    function forceResumeReceive(uint16 srcChainId_, bytes calldata srcAddress_) external override onlyEmergencyAdmin {\\n        lzEndpoint.forceResumeReceive(srcChainId_, srcAddress_);\\n    }\\n\\n    /// @dev allows protocol admin to set contract which can receive messages\\n    /// @param srcChainId_ is the layerzero source chain id\\n    /// @param srcAddress_ is the address to set as the trusted remote on the source chain\\n    function setTrustedRemote(uint16 srcChainId_, bytes calldata srcAddress_) external onlyProtocolAdmin {\\n        trustedRemoteLookup[srcChainId_] = srcAddress_;\\n        emit SetTrustedRemote(srcChainId_, srcAddress_);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL VIEW FUNCTIONS                     //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev checks if another contract on another chain is a trusted remote\\n    /// @param srcChainId_ is the layerzero source chain id\\n    /// @param srcAddress_ is the address to check\\n    function isTrustedRemote(uint16 srcChainId_, bytes calldata srcAddress_) external view returns (bool) {\\n        if (srcChainId_ == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n        return keccak256(trustedRemoteLookup[srcChainId_]) == keccak256(srcAddress_);\\n    }\\n\\n    /// @inheritdoc IAmbImplementation\\n    function estimateFees(\\n        uint64 dstChainId_,\\n        bytes memory message_,\\n        bytes memory extraData_\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 fees)\\n    {\\n        uint16 chainId = ambChainId[dstChainId_];\\n\\n        if (chainId == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n\\n        (fees,) = lzEndpoint.estimateFees(chainId, address(this), message_, false, extraData_);\\n    }\\n\\n    /// @inheritdoc IAmbImplementation\\n    function generateExtraData(uint256 gasLimit) external pure override returns (bytes memory extraData) {\\n        /// @notice encoded layerzero adapter params (version 2). Other values are not used atm.\\n        extraData = abi.encodePacked(uint16(2), gasLimit, uint256(0), address(0));\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL WRITE FUNCTIONS                    //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @inheritdoc IAmbImplementation\\n    function dispatchPayload(\\n        address srcSender_,\\n        uint64 dstChainId_,\\n        bytes memory message_,\\n        bytes memory extraData_\\n    )\\n        external\\n        payable\\n        override\\n        onlyValidStateRegistry\\n    {\\n        uint16 domain = ambChainId[dstChainId_];\\n        if (domain == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n\\n        _lzSend(domain, message_, payable(srcSender_), address(0x0), extraData_, msg.value);\\n    }\\n\\n    /// @inheritdoc IAmbImplementation\\n    function retryPayload(bytes memory data_) external payable override {\\n        (uint16 srcChainId, bytes memory srcAddress, bytes memory payload) = abi.decode(data_, (uint16, bytes, bytes));\\n        lzEndpoint.retryPayload(srcChainId, srcAddress, payload);\\n    }\\n\\n    /// @dev allows protocol admin to add new chain ids in future\\n    /// @param superChainId_ is the identifier of the chain within superform protocol\\n    /// @param ambChainId_ is the identifier of the chain given by the AMB\\n    /// NOTE: cannot be defined in an interface as types vary for each message bridge (amb)\\n    function setChainId(uint64 superChainId_, uint16 ambChainId_) external onlyProtocolAdmin {\\n        if (superChainId_ == 0 || ambChainId_ == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n\\n        /// @dev  reset old mappings\\n        uint64 oldSuperChainId = superChainId[ambChainId_];\\n        uint16 oldAmbChainId = ambChainId[superChainId_];\\n\\n        if (oldSuperChainId != 0) {\\n            delete ambChainId[oldSuperChainId];\\n        }\\n\\n        if (oldAmbChainId != 0) {\\n            delete superChainId[oldAmbChainId];\\n        }\\n\\n        ambChainId[superChainId_] = ambChainId_;\\n        superChainId[ambChainId_] = superChainId_;\\n\\n        emit ChainAdded(superChainId_);\\n    }\\n\\n    /// @inheritdoc ILayerZeroReceiver\\n    function lzReceive(\\n        uint16 srcChainId_,\\n        bytes memory srcAddress_,\\n        uint64 nonce_,\\n        bytes memory payload_\\n    )\\n        public\\n        override\\n        onlyLzEndpoint\\n    {\\n        bytes memory trustedRemote = trustedRemoteLookup[srcChainId_];\\n\\n        if (\\n            !(\\n                srcAddress_.length == trustedRemote.length && keccak256(srcAddress_) == keccak256(trustedRemote)\\n                    && trustedRemote.length != 0\\n            )\\n        ) {\\n            revert Error.INVALID_SRC_SENDER();\\n        }\\n\\n        _blockingLzReceive(srcChainId_, srcAddress_, nonce_, payload_);\\n    }\\n\\n    /// @dev receive failed messages on this Endpoint destination\\n    /// @param srcChainId_ is the layerzero source chain id\\n    /// @param srcAddress_ is the address on the source chain\\n    /// @param payload_ is the payload to store\\n    function nonblockingLzReceive(uint16 srcChainId_, bytes memory srcAddress_, bytes memory payload_) public {\\n        // only internal transaction\\n        if (msg.sender != address(this)) {\\n            revert Error.INVALID_INTERNAL_CALL();\\n        }\\n\\n        _nonblockingLzReceive(srcChainId_, srcAddress_, payload_);\\n    }\\n\\n    /// @dev retry failed messages on this Endpoint destination\\n    /// @param srcChainId_ is the layerzero source chain id\\n    /// @param srcAddress_ is the address on the source chain\\n    /// @param nonce_ is the sequential location of the stuck payload\\n    /// @param payload_ is the payload to retry\\n    function retryMessage(\\n        uint16 srcChainId_,\\n        bytes memory srcAddress_,\\n        uint64 nonce_,\\n        bytes memory payload_\\n    )\\n        public\\n        payable\\n    {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[srcChainId_][srcAddress_][nonce_];\\n\\n        if (payloadHash == bytes32(0)) {\\n            revert Error.ZERO_PAYLOAD_HASH();\\n        }\\n\\n        if (keccak256(payload_) != payloadHash) {\\n            revert Error.INVALID_PAYLOAD_HASH();\\n        }\\n\\n        // clear the stored message\\n        failedMessages[srcChainId_][srcAddress_][nonce_] = bytes32(0);\\n\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(srcChainId_, srcAddress_, payload_);\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                  INTERNAL FUNCTIONS                      //\\n    //////////////////////////////////////////////////////////////\\n\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory, bytes memory _payload) internal {\\n        /// @dev decodes payload received\\n        AMBMessage memory decoded = abi.decode(_payload, (AMBMessage));\\n\\n        /// NOTE: experimental split of registry contracts\\n        (,,, uint8 registryId,,) = decoded.txInfo.decodeTxInfo();\\n\\n        IBaseStateRegistry targetRegistry = IBaseStateRegistry(superRegistry.getStateRegistry(registryId));\\n\\n        uint64 srcChainId = superChainId[_srcChainId];\\n\\n        if (srcChainId == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n\\n        targetRegistry.receivePayload(srcChainId, _payload);\\n    }\\n\\n    function _lzSend(\\n        uint16 dstChainId_,\\n        bytes memory payload_,\\n        address payable receiverAddress_,\\n        address zroPaymentAddress_,\\n        bytes memory adapterParams_,\\n        uint256 msgValue_\\n    )\\n        internal\\n    {\\n        bytes memory trustedRemote = trustedRemoteLookup[dstChainId_];\\n        if (trustedRemote.length == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n\\n        lzEndpoint.send{ value: msgValue_ }(\\n            dstChainId_, trustedRemote, payload_, receiverAddress_, zroPaymentAddress_, adapterParams_\\n        );\\n    }\\n\\n    function _blockingLzReceive(\\n        uint16 srcChainId_,\\n        bytes memory srcAddress_,\\n        uint64 nonce_,\\n        bytes memory payload_\\n    )\\n        internal\\n    {\\n        // try-catch all errors/exceptions\\n        try this.nonblockingLzReceive(srcChainId_, srcAddress_, payload_) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[srcChainId_][srcAddress_][nonce_] = keccak256(payload_);\\n            emit MessageFailed(srcChainId_, srcAddress_, nonce_, payload_);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAmbImplementation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\n/// @title IAmbImplementation\\n/// @dev Interface for arbitrary message bridge (AMB) implementations\\n/// @author ZeroPoint Labs\\ninterface IAmbImplementation {\\n    //////////////////////////////////////////////////////////////\\n    //                          EVENTS                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    event ChainAdded(uint64 indexed superChainId);\\n    event AuthorizedImplAdded(uint64 indexed superChainId, address indexed authImpl);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL VIEW FUNCTIONS                     //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev returns the gas fees estimation in native tokens\\n    /// @notice not all AMBs will have on-chain estimation for which this function will return 0\\n    /// @param dstChainId_ is the identifier of the destination chain\\n    /// @param message_ is the cross-chain message\\n    /// @param extraData_ is any amb-specific information\\n    /// @return fees is the native_tokens to be sent along the transaction\\n    function estimateFees(\\n        uint64 dstChainId_,\\n        bytes memory message_,\\n        bytes memory extraData_\\n    )\\n        external\\n        view\\n        returns (uint256 fees);\\n\\n    /// @dev returns the extra data for the given gas request\\n    /// @param gasLimit is the amount of gas limit in wei to override\\n    /// @return extraData is the bytes encoded extra data\\n    /// NOTE: this process is unique to the message bridge\\n    function generateExtraData(uint256 gasLimit) external pure returns (bytes memory extraData);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL WRITE FUNCTIONS                    //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev allows state registry to send message via implementation.\\n    /// @param srcSender_ is the caller (used for gas refunds)\\n    /// @param dstChainId_ is the identifier of the destination chain\\n    /// @param message_ is the cross-chain message to be sent\\n    /// @param extraData_ is message amb specific override information\\n    function dispatchPayload(\\n        address srcSender_,\\n        uint64 dstChainId_,\\n        bytes memory message_,\\n        bytes memory extraData_\\n    )\\n        external\\n        payable;\\n\\n    /// @dev allows for the permissionless calling of the retry mechanism for encoded data\\n    /// @param data_ is the encoded retry data (different per AMB implementation)\\n    function retryPayload(bytes memory data_) external payable;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IBaseStateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\nimport { PayloadState } from \\\"src/types/DataTypes.sol\\\";\\n\\n/// @title IBaseStateRegistry\\n/// @dev Interface for BaseStateRegistry\\n/// @author ZeroPoint Labs\\ninterface IBaseStateRegistry {\\n    //////////////////////////////////////////////////////////////\\n    //                          EVENTS                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev is emitted when a cross-chain payload is received in the state registry\\n    event PayloadReceived(uint64 indexed srcChainId, uint64 indexed dstChainId, uint256 indexed payloadId);\\n\\n    /// @dev is emitted when a cross-chain proof is received in the state registry\\n    /// NOTE: comes handy if quorum required is more than 0\\n    event ProofReceived(bytes32 indexed proof);\\n\\n    /// @dev is emitted when a payload id gets updated\\n    event PayloadUpdated(uint256 indexed payloadId);\\n\\n    /// @dev is emitted when a payload id gets processed\\n    event PayloadProcessed(uint256 indexed payloadId);\\n\\n    /// @dev is emitted when the super registry address is updated\\n    event SuperRegistryUpdated(address indexed superRegistry);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL VIEW FUNCTIONS                     //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev allows users to read the total payloads received by the registry\\n    function payloadsCount() external view returns (uint256);\\n\\n    /// @dev allows user to read the payload state\\n    /// uint256 payloadId_ is the unique payload identifier allocated on the destination chain\\n    function payloadTracking(uint256 payloadId_) external view returns (PayloadState payloadState_);\\n\\n    /// @dev allows users to read the bytes payload_ stored per payloadId_\\n    /// @param payloadId_ is the unique payload identifier allocated on the destination chain\\n    /// @return payloadBody_ the crosschain data received\\n    function payloadBody(uint256 payloadId_) external view returns (bytes memory payloadBody_);\\n\\n    /// @dev allows users to read the uint256 payloadHeader stored per payloadId_\\n    /// @param payloadId_ is the unique payload identifier allocated on the destination chain\\n    /// @return payloadHeader_ the crosschain header received\\n    function payloadHeader(uint256 payloadId_) external view returns (uint256 payloadHeader_);\\n\\n    /// @dev allows users to read the ambs that delivered the payload id\\n    /// @param payloadId_ is the unique payload identifier allocated on the destination chain\\n    /// @return ambIds_ is the identifier of ambs that delivered the message and proof\\n    function getMessageAMB(uint256 payloadId_) external view returns (uint8[] memory ambIds_);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL WRITE FUNCTIONS                    //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev allows core contracts to send payload to a destination chain.\\n    /// @param srcSender_ is the caller of the function (used for gas refunds).\\n    /// @param ambIds_ is the identifier of the arbitrary message bridge to be used\\n    /// @param dstChainId_ is the internal chainId used throughout the protocol\\n    /// @param message_ is the crosschain payload to be sent\\n    /// @param extraData_ defines all the message bridge related overrides\\n    /// NOTE: dstChainId_ is mapped to message bridge's destination id inside it's implementation contract\\n    /// NOTE: ambIds_ are superform assigned unique identifier for arbitrary message bridges\\n    function dispatchPayload(\\n        address srcSender_,\\n        uint8[] memory ambIds_,\\n        uint64 dstChainId_,\\n        bytes memory message_,\\n        bytes memory extraData_\\n    )\\n        external\\n        payable;\\n\\n    /// @dev allows state registry to receive messages from message bridge implementations\\n    /// @param srcChainId_ is the superform chainId from which the payload is dispatched/sent\\n    /// @param message_ is the crosschain payload received\\n    /// NOTE: Only {IMPLEMENTATION_CONTRACT} role can call this function.\\n    function receivePayload(uint64 srcChainId_, bytes memory message_) external;\\n\\n    /// @dev allows privileged actors to process cross-chain payloads\\n    /// @param payloadId_ is the identifier of the cross-chain payload\\n    /// NOTE: Only {CORE_STATE_REGISTRY_PROCESSOR_ROLE} role can call this function\\n    /// NOTE: this should handle reverting the state on source chain in-case of failure\\n    /// (or) can implement scenario based reverting like in coreStateRegistry\\n    function processPayload(uint256 payloadId_) external payable;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISuperRBAC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\nimport { IAccessControl } from \\\"openzeppelin-contracts/contracts/access/IAccessControl.sol\\\";\\n\\n/// @title ISuperRBAC\\n/// @dev Interface for SuperRBAC\\n/// @author Zeropoint Labs\\ninterface ISuperRBAC is IAccessControl {\\n\\n    //////////////////////////////////////////////////////////////\\n    //                           STRUCTS                         //\\n    //////////////////////////////////////////////////////////////\\n\\n    struct InitialRoleSetup {\\n        address admin;\\n        address emergencyAdmin;\\n        address paymentAdmin;\\n        address csrProcessor;\\n        address tlProcessor;\\n        address brProcessor;\\n        address csrUpdater;\\n        address srcVaaRelayer;\\n        address dstSwapper;\\n        address csrRescuer;\\n        address csrDisputer;\\n    }\\n\\n    //////////////////////////////////////////////////////////////\\n    //                          EVENTS                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev is emitted when superRegistry is set\\n    event SuperRegistrySet(address indexed superRegistry);\\n\\n    /// @dev is emitted when an admin is set for a role\\n    event RoleAdminSet(bytes32 role, bytes32 adminRole);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL VIEW FUNCTIONS                     //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev returns the id of the protocol admin role\\n    function PROTOCOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the emergency admin role\\n    function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the payment admin role\\n    function PAYMENT_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the broadcaster role\\n    function BROADCASTER_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry processor role\\n    function CORE_STATE_REGISTRY_PROCESSOR_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the timelock state registry processor role\\n    function TIMELOCK_STATE_REGISTRY_PROCESSOR_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the broadcast state registry processor role\\n    function BROADCAST_STATE_REGISTRY_PROCESSOR_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry updater role\\n    function CORE_STATE_REGISTRY_UPDATER_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the dst swapper role\\n    function DST_SWAPPER_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry rescuer role\\n    function CORE_STATE_REGISTRY_RESCUER_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry rescue disputer role\\n    function CORE_STATE_REGISTRY_DISPUTER_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns the id of wormhole vaa relayer role\\n    function WORMHOLE_VAA_RELAYER_ROLE() external view returns (bytes32);\\n\\n    /// @dev returns whether the given address has the protocol admin role\\n    /// @param admin_ the address to check\\n    function hasProtocolAdminRole(address admin_) external view returns (bool);\\n\\n    /// @dev returns whether the given address has the emergency admin role\\n    /// @param admin_ the address to check\\n    function hasEmergencyAdminRole(address admin_) external view returns (bool);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL WRITE FUNCTIONS                    //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev updates the super registry address\\n    function setSuperRegistry(address superRegistry_) external;\\n\\n    /// @dev configures a new role in superForm\\n    /// @param role_ the role to set\\n    /// @param adminRole_ the admin role to set as admin\\n    function setRoleAdmin(bytes32 role_, bytes32 adminRole_) external;\\n\\n    /// @dev revokes the role_ from superRegistryAddressId_ on all chains\\n    /// @param role_ the role to revoke\\n    /// @param extraData_ amb config if broadcasting is required\\n    /// @param superRegistryAddressId_ the super registry address id\\n    function revokeRoleSuperBroadcast(\\n        bytes32 role_,\\n        bytes memory extraData_,\\n        bytes32 superRegistryAddressId_\\n    )\\n        external\\n        payable;\\n\\n    /// @dev allows sync of global roles from different chains using broadcast registry\\n    /// @notice may not work for all roles\\n    function stateSyncBroadcast(bytes memory data_) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISuperRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\n/// @title ISuperRegistry\\n/// @dev Interface for SuperRegistry\\n/// @author Zeropoint Labs\\ninterface ISuperRegistry {\\n    //////////////////////////////////////////////////////////////\\n    //                          EVENTS                          //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev emitted when permit2 is set.\\n    event SetPermit2(address indexed permit2);\\n\\n    /// @dev is emitted when an address is set.\\n    event AddressUpdated(\\n        bytes32 indexed protocolAddressId, uint64 indexed chainId, address indexed oldAddress, address newAddress\\n    );\\n\\n    /// @dev is emitted when a new token bridge is configured.\\n    event SetBridgeAddress(uint256 indexed bridgeId, address indexed bridgeAddress);\\n\\n    /// @dev is emitted when a new bridge validator is configured.\\n    event SetBridgeValidator(uint256 indexed bridgeId, address indexed bridgeValidator);\\n\\n    /// @dev is emitted when a new amb is configured.\\n    event SetAmbAddress(uint8 indexed ambId_, address indexed ambAddress_, bool indexed isBroadcastAMB_);\\n\\n    /// @dev is emitted when a new state registry is configured.\\n    event SetStateRegistryAddress(uint8 indexed registryId_, address indexed registryAddress_);\\n\\n    /// @dev is emitted when a new delay is configured.\\n    event SetDelay(uint256 indexed oldDelay_, uint256 indexed newDelay_);\\n\\n    /// @dev is emitted when a new vault limit is configured\\n    event SetVaultLimitPerDestination(uint64 indexed chainId_, uint256 indexed vaultLimit_);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL VIEW FUNCTIONS                     //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev gets the deposit rescue delay\\n    function delay() external view returns (uint256);\\n\\n    /// @dev returns the permit2 address\\n    function PERMIT2() external view returns (address);\\n\\n    /// @dev returns the id of the superform router module\\n    function SUPERFORM_ROUTER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the superform factory module\\n    function SUPERFORM_FACTORY() external view returns (bytes32);\\n\\n    /// @dev returns the id of the superform paymaster contract\\n    function PAYMASTER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the superform payload helper contract\\n    function PAYMENT_HELPER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry module\\n    function CORE_STATE_REGISTRY() external view returns (bytes32);\\n\\n    /// @dev returns the id of the timelock form state registry module\\n    function TIMELOCK_STATE_REGISTRY() external view returns (bytes32);\\n\\n    /// @dev returns the id of the broadcast state registry module\\n    function BROADCAST_REGISTRY() external view returns (bytes32);\\n\\n    /// @dev returns the id of the super positions module\\n    function SUPER_POSITIONS() external view returns (bytes32);\\n\\n    /// @dev returns the id of the super rbac module\\n    function SUPER_RBAC() external view returns (bytes32);\\n\\n    /// @dev returns the id of the payload helper module\\n    function PAYLOAD_HELPER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the dst swapper keeper\\n    function DST_SWAPPER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the emergency queue\\n    function EMERGENCY_QUEUE() external view returns (bytes32);\\n\\n    /// @dev returns the id of the superform receiver\\n    function SUPERFORM_RECEIVER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the payment admin keeper\\n    function PAYMENT_ADMIN() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry processor keeper\\n    function CORE_REGISTRY_PROCESSOR() external view returns (bytes32);\\n\\n    /// @dev returns the id of the broadcast registry processor keeper\\n    function BROADCAST_REGISTRY_PROCESSOR() external view returns (bytes32);\\n\\n    /// @dev returns the id of the timelock form state registry processor keeper\\n    function TIMELOCK_REGISTRY_PROCESSOR() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry updater keeper\\n    function CORE_REGISTRY_UPDATER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry updater keeper\\n    function CORE_REGISTRY_RESCUER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry updater keeper\\n    function CORE_REGISTRY_DISPUTER() external view returns (bytes32);\\n\\n    /// @dev returns the id of the core state registry updater keeper\\n    function DST_SWAPPER_PROCESSOR() external view returns (bytes32);\\n\\n    /// @dev gets the address of a contract on current chain\\n    /// @param id_ is the id of the contract\\n    function getAddress(bytes32 id_) external view returns (address);\\n\\n    /// @dev gets the address of a contract on a target chain\\n    /// @param id_ is the id of the contract\\n    /// @param chainId_ is the chain id of that chain\\n    function getAddressByChainId(bytes32 id_, uint64 chainId_) external view returns (address);\\n\\n    /// @dev gets the address of a bridge\\n    /// @param bridgeId_ is the id of a bridge\\n    /// @return bridgeAddress_ is the address of the form\\n    function getBridgeAddress(uint8 bridgeId_) external view returns (address bridgeAddress_);\\n\\n    /// @dev gets the address of a bridge validator\\n    /// @param bridgeId_ is the id of a bridge\\n    /// @return bridgeValidator_ is the address of the form\\n    function getBridgeValidator(uint8 bridgeId_) external view returns (address bridgeValidator_);\\n\\n    /// @dev gets the address of a amb\\n    /// @param ambId_ is the id of a bridge\\n    /// @return ambAddress_ is the address of the form\\n    function getAmbAddress(uint8 ambId_) external view returns (address ambAddress_);\\n\\n    /// @dev gets the id of the amb\\n    /// @param ambAddress_ is the address of an amb\\n    /// @return ambId_ is the identifier of an amb\\n    function getAmbId(address ambAddress_) external view returns (uint8 ambId_);\\n\\n    /// @dev gets the address of the registry\\n    /// @param registryId_ is the id of the state registry\\n    /// @return registryAddress_ is the address of the state registry\\n    function getStateRegistry(uint8 registryId_) external view returns (address registryAddress_);\\n\\n    /// @dev gets the id of the registry\\n    /// @notice reverts if the id is not found\\n    /// @param registryAddress_ is the address of the state registry\\n    /// @return registryId_ is the id of the state registry\\n    function getStateRegistryId(address registryAddress_) external view returns (uint8 registryId_);\\n\\n    /// @dev gets the safe vault limit\\n    /// @param chainId_ is the id of the remote chain\\n    /// @return vaultLimitPerDestination_ is the safe number of vaults to deposit\\n    /// without hitting out of gas error\\n    function getVaultLimitPerDestination(uint64 chainId_) external view returns (uint256 vaultLimitPerDestination_);\\n\\n    /// @dev helps validate if an address is a valid state registry\\n    /// @param registryAddress_ is the address of the state registry\\n    /// @return valid_ a flag indicating if its valid.\\n    function isValidStateRegistry(address registryAddress_) external view returns (bool valid_);\\n\\n    /// @dev helps validate if an address is a valid amb implementation\\n    /// @param ambAddress_ is the address of the amb implementation\\n    /// @return valid_ a flag indicating if its valid.\\n    function isValidAmbImpl(address ambAddress_) external view returns (bool valid_);\\n\\n    /// @dev helps validate if an address is a valid broadcast amb implementation\\n    /// @param ambAddress_ is the address of the broadcast amb implementation\\n    /// @return valid_ a flag indicating if its valid.\\n    function isValidBroadcastAmbImpl(address ambAddress_) external view returns (bool valid_);\\n\\n    //////////////////////////////////////////////////////////////\\n    //              EXTERNAL WRITE FUNCTIONS                    //\\n    //////////////////////////////////////////////////////////////\\n\\n    /// @dev sets the deposit rescue delay\\n    /// @param delay_ the delay in seconds before the deposit rescue can be finalized\\n    function setDelay(uint256 delay_) external;\\n\\n    /// @dev sets the permit2 address\\n    /// @param permit2_ the address of the permit2 contract\\n    function setPermit2(address permit2_) external;\\n\\n    /// @dev sets the safe vault limit\\n    /// @param chainId_ is the remote chain identifier\\n    /// @param vaultLimit_ is the max limit of vaults per transaction\\n    function setVaultLimitPerDestination(uint64 chainId_, uint256 vaultLimit_) external;\\n\\n    /// @dev sets new addresses on specific chains.\\n    /// @param ids_ are the identifiers of the address on that chain\\n    /// @param newAddresses_  are the new addresses on that chain\\n    /// @param chainIds_ are the chain ids of that chain\\n    function batchSetAddress(\\n        bytes32[] calldata ids_,\\n        address[] calldata newAddresses_,\\n        uint64[] calldata chainIds_\\n    )\\n        external;\\n\\n    /// @dev sets a new address on a specific chain.\\n    /// @param id_ the identifier of the address on that chain\\n    /// @param newAddress_ the new address on that chain\\n    /// @param chainId_ the chain id of that chain\\n    function setAddress(bytes32 id_, address newAddress_, uint64 chainId_) external;\\n\\n    /// @dev allows admin to set the bridge address for an bridge id.\\n    /// @notice this function operates in an APPEND-ONLY fashion.\\n    /// @param bridgeId_         represents the bridge unique identifier.\\n    /// @param bridgeAddress_    represents the bridge address.\\n    /// @param bridgeValidator_  represents the bridge validator address.\\n    function setBridgeAddresses(\\n        uint8[] memory bridgeId_,\\n        address[] memory bridgeAddress_,\\n        address[] memory bridgeValidator_\\n    )\\n        external;\\n\\n    /// @dev allows admin to set the amb address for an amb id.\\n    /// @notice this function operates in an APPEND-ONLY fashion.\\n    /// @param ambId_         represents the bridge unique identifier.\\n    /// @param ambAddress_    represents the bridge address.\\n    /// @param isBroadcastAMB_ represents whether the amb implementation supports broadcasting\\n    function setAmbAddress(\\n        uint8[] memory ambId_,\\n        address[] memory ambAddress_,\\n        bool[] memory isBroadcastAMB_\\n    )\\n        external;\\n\\n    /// @dev allows admin to set the state registry address for an state registry id.\\n    /// @notice this function operates in an APPEND-ONLY fashion.\\n    /// @param registryId_    represents the state registry's unique identifier.\\n    /// @param registryAddress_    represents the state registry's address.\\n    function setStateRegistryAddress(uint8[] memory registryId_, address[] memory registryAddress_) external;\\n}\\n\"\r\n    },\r\n    \"src/libraries/DataLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\nimport { Error } from \\\"src/libraries/Error.sol\\\";\\n\\nlibrary DataLib {\\n    function packTxInfo(\\n        uint8 txType_,\\n        uint8 callbackType_,\\n        uint8 multi_,\\n        uint8 registryId_,\\n        address srcSender_,\\n        uint64 srcChainId_\\n    )\\n        internal\\n        pure\\n        returns (uint256 txInfo)\\n    {\\n        txInfo = uint256(txType_);\\n        txInfo |= uint256(callbackType_) << 8;\\n        txInfo |= uint256(multi_) << 16;\\n        txInfo |= uint256(registryId_) << 24;\\n        txInfo |= uint256(uint160(srcSender_)) << 32;\\n        txInfo |= uint256(srcChainId_) << 192;\\n    }\\n\\n    function decodeTxInfo(uint256 txInfo_)\\n        internal\\n        pure\\n        returns (uint8 txType, uint8 callbackType, uint8 multi, uint8 registryId, address srcSender, uint64 srcChainId)\\n    {\\n        txType = uint8(txInfo_);\\n        callbackType = uint8(txInfo_ >> 8);\\n        multi = uint8(txInfo_ >> 16);\\n        registryId = uint8(txInfo_ >> 24);\\n        srcSender = address(uint160(txInfo_ >> 32));\\n        srcChainId = uint64(txInfo_ >> 192);\\n    }\\n\\n    /// @dev returns the vault-form-chain pair of a superform\\n    /// @param superformId_ is the id of the superform\\n    /// @return superform_ is the address of the superform\\n    /// @return formImplementationId_ is the form id\\n    /// @return chainId_ is the chain id\\n    function getSuperform(uint256 superformId_)\\n        internal\\n        pure\\n        returns (address superform_, uint32 formImplementationId_, uint64 chainId_)\\n    {\\n        superform_ = address(uint160(superformId_));\\n        formImplementationId_ = uint32(superformId_ >> 160);\\n        chainId_ = uint64(superformId_ >> 192);\\n\\n        if (chainId_ == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n    }\\n\\n    /// @dev returns the vault-form-chain pair of an array of superforms\\n    /// @param superformIds_  array of superforms\\n    /// @return superforms_ are the address of the vaults\\n    function getSuperforms(uint256[] memory superformIds_) internal pure returns (address[] memory superforms_) {\\n        uint256 len = superformIds_.length;\\n        superforms_ = new address[](len);\\n\\n        for (uint256 i; i < len; ++i) {\\n            (superforms_[i],,) = getSuperform(superformIds_[i]);\\n        }\\n    }\\n\\n    /// @dev returns the destination chain of a given superform\\n    /// @param superformId_ is the id of the superform\\n    /// @return chainId_ is the chain id\\n    function getDestinationChain(uint256 superformId_) internal pure returns (uint64 chainId_) {\\n        chainId_ = uint64(superformId_ >> 192);\\n\\n        if (chainId_ == 0) {\\n            revert Error.INVALID_CHAIN_ID();\\n        }\\n    }\\n\\n    /// @dev generates the superformId\\n    /// @param superform_ is the address of the superform\\n    /// @param formImplementationId_ is the type of the form\\n    /// @param chainId_ is the chain id on which the superform is deployed\\n    function packSuperform(\\n        address superform_,\\n        uint32 formImplementationId_,\\n        uint64 chainId_\\n    )\\n        internal\\n        pure\\n        returns (uint256 superformId_)\\n    {\\n        superformId_ = uint256(uint160(superform_));\\n        superformId_ |= uint256(formImplementationId_) << 160;\\n        superformId_ |= uint256(chainId_) << 192;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/Error.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\nlibrary Error {\\n    //////////////////////////////////////////////////////////////\\n    //                  CONFIGURATION ERRORS                    //\\n    //////////////////////////////////////////////////////////////\\n    ///@notice errors thrown in protocol setup\\n\\n    /// @dev thrown if chain id exceeds max(uint64)\\n    error BLOCK_CHAIN_ID_OUT_OF_BOUNDS();\\n\\n    /// @dev thrown if not possible to revoke a role in broadcasting\\n    error CANNOT_REVOKE_NON_BROADCASTABLE_ROLES();\\n\\n    /// @dev thrown if not possible to revoke last admin\\n    error CANNOT_REVOKE_LAST_ADMIN();\\n\\n    /// @dev thrown if trying to set again pseudo immutables in super registry\\n    error DISABLED();\\n\\n    /// @dev thrown if rescue delay is not yet set for a chain\\n    error DELAY_NOT_SET();\\n\\n    /// @dev thrown if get native token price estimate in paymentHelper is 0\\n    error INVALID_NATIVE_TOKEN_PRICE();\\n\\n    /// @dev thrown if wormhole refund chain id is not set\\n    error REFUND_CHAIN_ID_NOT_SET();\\n\\n    /// @dev thrown if wormhole relayer is not set\\n    error RELAYER_NOT_SET();\\n\\n    /// @dev thrown if a role to be revoked is not assigned\\n    error ROLE_NOT_ASSIGNED();\\n\\n    //////////////////////////////////////////////////////////////\\n    //                  AUTHORIZATION ERRORS                    //\\n    //////////////////////////////////////////////////////////////\\n    ///@notice errors thrown if functions cannot be called\\n\\n    /// COMMON AUTHORIZATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if caller is not address(this), internal call\\n    error INVALID_INTERNAL_CALL();\\n\\n    /// @dev thrown if msg.sender is not a valid amb implementation\\n    error NOT_AMB_IMPLEMENTATION();\\n\\n    /// @dev thrown if msg.sender is not an allowed broadcaster\\n    error NOT_ALLOWED_BROADCASTER();\\n\\n    /// @dev thrown if msg.sender is not broadcast amb implementation\\n    error NOT_BROADCAST_AMB_IMPLEMENTATION();\\n\\n    /// @dev thrown if msg.sender is not broadcast state registry\\n    error NOT_BROADCAST_REGISTRY();\\n\\n    /// @dev thrown if msg.sender is not core state registry\\n    error NOT_CORE_STATE_REGISTRY();\\n\\n    /// @dev thrown if msg.sender is not emergency admin\\n    error NOT_EMERGENCY_ADMIN();\\n\\n    /// @dev thrown if msg.sender is not emergency queue\\n    error NOT_EMERGENCY_QUEUE();\\n\\n    /// @dev thrown if msg.sender is not minter\\n    error NOT_MINTER();\\n\\n    /// @dev thrown if msg.sender is not minter state registry\\n    error NOT_MINTER_STATE_REGISTRY_ROLE();\\n\\n    /// @dev thrown if msg.sender is not paymaster\\n    error NOT_PAYMASTER();\\n\\n    /// @dev thrown if msg.sender is not payment admin\\n    error NOT_PAYMENT_ADMIN();\\n\\n    /// @dev thrown if msg.sender is not protocol admin\\n    error NOT_PROTOCOL_ADMIN();\\n\\n    /// @dev thrown if msg.sender is not state registry\\n    error NOT_STATE_REGISTRY();\\n\\n    /// @dev thrown if msg.sender is not super registry\\n    error NOT_SUPER_REGISTRY();\\n\\n    /// @dev thrown if msg.sender is not superform router\\n    error NOT_SUPERFORM_ROUTER();\\n\\n    /// @dev thrown if msg.sender is not a superform\\n    error NOT_SUPERFORM();\\n\\n    /// @dev thrown if msg.sender is not superform factory\\n    error NOT_SUPERFORM_FACTORY();\\n\\n    /// @dev thrown if msg.sender is not timelock form\\n    error NOT_TIMELOCK_SUPERFORM();\\n\\n    /// @dev thrown if msg.sender is not timelock state registry\\n    error NOT_TIMELOCK_STATE_REGISTRY();\\n\\n    /// @dev thrown if msg.sender is not user or disputer\\n    error NOT_VALID_DISPUTER();\\n\\n    /// @dev thrown if the msg.sender is not privileged caller\\n    error NOT_PRIVILEGED_CALLER(bytes32 role);\\n\\n    /// STATE REGISTRY AUTHORIZATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev layerzero adapter specific error, thrown if caller not layerzero endpoint\\n    error CALLER_NOT_ENDPOINT();\\n\\n    /// @dev hyperlane adapter specific error, thrown if caller not hyperlane mailbox\\n    error CALLER_NOT_MAILBOX();\\n\\n    /// @dev wormhole relayer specific error, thrown if caller not wormhole relayer\\n    error CALLER_NOT_RELAYER();\\n\\n    /// @dev thrown if src chain sender is not valid\\n    error INVALID_SRC_SENDER();\\n\\n    //////////////////////////////////////////////////////////////\\n    //                  INPUT VALIDATION ERRORS                 //\\n    //////////////////////////////////////////////////////////////\\n    ///@notice errors thrown if input variables are not valid\\n\\n    /// COMMON INPUT VALIDATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if there is an array length mismatch\\n    error ARRAY_LENGTH_MISMATCH();\\n\\n    /// @dev thrown if payload id does not exist\\n    error INVALID_PAYLOAD_ID();\\n\\n    /// @dev error thrown when msg value should be zero in certain payable functions\\n    error MSG_VALUE_NOT_ZERO();\\n\\n    /// @dev thrown if amb ids length is 0\\n    error ZERO_AMB_ID_LENGTH();\\n\\n    /// @dev thrown if address input is address 0\\n    error ZERO_ADDRESS();\\n\\n    /// @dev thrown if amount input is 0\\n    error ZERO_AMOUNT();\\n\\n    /// @dev thrown if final token is address 0\\n    error ZERO_FINAL_TOKEN();\\n\\n    /// @dev thrown if value input is 0\\n    error ZERO_INPUT_VALUE();\\n\\n    /// SUPERFORM ROUTER INPUT VALIDATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if the vaults data is invalid\\n    error INVALID_SUPERFORMS_DATA();\\n\\n    /// @dev thrown if receiver address is not set\\n    error RECEIVER_ADDRESS_NOT_SET();\\n\\n    /// SUPERFORM FACTORY INPUT VALIDATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if a form is not ERC165 compatible\\n    error ERC165_UNSUPPORTED();\\n\\n    /// @dev thrown if a form is not form interface compatible\\n    error FORM_INTERFACE_UNSUPPORTED();\\n\\n    /// @dev error thrown if form implementation address already exists\\n    error FORM_IMPLEMENTATION_ALREADY_EXISTS();\\n\\n    /// @dev error thrown if form implementation id already exists\\n    error FORM_IMPLEMENTATION_ID_ALREADY_EXISTS();\\n\\n    /// @dev thrown if a form does not exist\\n    error FORM_DOES_NOT_EXIST();\\n\\n    /// @dev thrown if form id is larger than max uint16\\n    error INVALID_FORM_ID();\\n\\n    /// @dev thrown if superform not on factory\\n    error SUPERFORM_ID_NONEXISTENT();\\n\\n    /// @dev thrown if same vault and form implementation is used to create new superform\\n    error VAULT_FORM_IMPLEMENTATION_COMBINATION_EXISTS();\\n\\n    /// FORM INPUT VALIDATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if in case of no txData, if liqData.token != vault.asset()\\n    /// in case of txData, if token output of swap != vault.asset()\\n    error DIFFERENT_TOKENS();\\n\\n    /// @dev thrown if the amount in direct withdraw is not correct\\n    error DIRECT_WITHDRAW_INVALID_LIQ_REQUEST();\\n\\n    /// @dev thrown if the amount in xchain withdraw is not correct\\n    error XCHAIN_WITHDRAW_INVALID_LIQ_REQUEST();\\n\\n    /// LIQUIDITY BRIDGE INPUT VALIDATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if route id is blacklisted in socket\\n    error BLACKLISTED_ROUTE_ID();\\n\\n    /// @dev thrown if route id is not blacklisted in socket\\n    error NOT_BLACKLISTED_ROUTE_ID();\\n\\n    /// @dev error thrown when txData selector of lifi bridge is a blacklisted selector\\n    error BLACKLISTED_SELECTOR();\\n\\n    /// @dev error thrown when txData selector of lifi bridge is not a blacklisted selector\\n    error NOT_BLACKLISTED_SELECTOR();\\n\\n    /// @dev thrown if a certain action of the user is not allowed given the txData provided\\n    error INVALID_ACTION();\\n\\n    /// @dev thrown if in deposits, the liqDstChainId doesn't match the stateReq dstChainId\\n    error INVALID_DEPOSIT_LIQ_DST_CHAIN_ID();\\n\\n    /// @dev thrown if index is invalid\\n    error INVALID_INDEX();\\n\\n    /// @dev thrown if the chain id in the txdata is invalid\\n    error INVALID_TXDATA_CHAIN_ID();\\n\\n    /// @dev thrown if the validation of bridge txData fails due to a destination call present\\n    error INVALID_TXDATA_NO_DESTINATIONCALL_ALLOWED();\\n\\n    /// @dev thrown if the validation of bridge txData fails due to wrong receiver\\n    error INVALID_TXDATA_RECEIVER();\\n\\n    /// @dev thrown if the validation of bridge txData fails due to wrong token\\n    error INVALID_TXDATA_TOKEN();\\n\\n    /// @dev thrown if txData is not present (in case of xChain actions)\\n    error NO_TXDATA_PRESENT();\\n\\n    /// STATE REGISTRY INPUT VALIDATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if payload is being updated with final amounts length different than amounts length\\n    error DIFFERENT_PAYLOAD_UPDATE_AMOUNTS_LENGTH();\\n\\n    /// @dev thrown if payload is being updated with tx data length different than liq data length\\n    error DIFFERENT_PAYLOAD_UPDATE_TX_DATA_LENGTH();\\n\\n    /// @dev thrown if keeper update final token is different than the vault underlying\\n    error INVALID_UPDATE_FINAL_TOKEN();\\n\\n    /// @dev thrown if broadcast finality for wormhole is invalid\\n    error INVALID_BROADCAST_FINALITY();\\n\\n    /// @dev thrown if amb id is not valid leading to an address 0 of the implementation\\n    error INVALID_BRIDGE_ID();\\n\\n    /// @dev thrown if chain id involved in xchain message is invalid\\n    error INVALID_CHAIN_ID();\\n\\n    /// @dev thrown if payload update amount isn't equal to dst swapper amount\\n    error INVALID_DST_SWAP_AMOUNT();\\n\\n    /// @dev thrown if message amb and proof amb are the same\\n    error INVALID_PROOF_BRIDGE_ID();\\n\\n    /// @dev thrown if order of proof AMBs is incorrect, either duplicated or not incrementing\\n    error INVALID_PROOF_BRIDGE_IDS();\\n\\n    /// @dev thrown if rescue data lengths are invalid\\n    error INVALID_RESCUE_DATA();\\n\\n    /// @dev thrown if delay is invalid\\n    error INVALID_TIMELOCK_DELAY();\\n\\n    /// @dev thrown if amounts being sent in update payload mean a negative slippage\\n    error NEGATIVE_SLIPPAGE();\\n\\n    /// @dev thrown if slippage is outside of bounds\\n    error SLIPPAGE_OUT_OF_BOUNDS();\\n\\n    /// SUPERPOSITION INPUT VALIDATION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if src senders mismatch in state sync\\n    error SRC_SENDER_MISMATCH();\\n\\n    /// @dev thrown if src tx types mismatch in state sync\\n    error SRC_TX_TYPE_MISMATCH();\\n\\n    //////////////////////////////////////////////////////////////\\n    //                  EXECUTION ERRORS                        //\\n    //////////////////////////////////////////////////////////////\\n    ///@notice errors thrown due to function execution logic\\n\\n    /// COMMON EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if the swap in a direct deposit resulted in insufficient tokens\\n    error DIRECT_DEPOSIT_SWAP_FAILED();\\n\\n    /// @dev thrown if payload is not unique\\n    error DUPLICATE_PAYLOAD();\\n\\n    /// @dev thrown if native tokens fail to be sent to superform contracts\\n    error FAILED_TO_SEND_NATIVE();\\n\\n    /// @dev thrown if allowance is not correct to deposit\\n    error INSUFFICIENT_ALLOWANCE_FOR_DEPOSIT();\\n\\n    /// @dev thrown if contract has insufficient balance for operations\\n    error INSUFFICIENT_BALANCE();\\n\\n    /// @dev thrown if native amount is not at least equal to the amount in the request\\n    error INSUFFICIENT_NATIVE_AMOUNT();\\n\\n    /// @dev thrown if payload cannot be decoded\\n    error INVALID_PAYLOAD();\\n\\n    /// @dev thrown if payload status is invalid\\n    error INVALID_PAYLOAD_STATUS();\\n\\n    /// @dev thrown if payload type is invalid\\n    error INVALID_PAYLOAD_TYPE();\\n\\n    /// LIQUIDITY BRIDGE EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if we try to decode the final swap output token in a xChain liquidity bridging action\\n    error CANNOT_DECODE_FINAL_SWAP_OUTPUT_TOKEN();\\n\\n    /// @dev thrown if liquidity bridge fails for erc20 or native tokens\\n    error FAILED_TO_EXECUTE_TXDATA(address token);\\n\\n    /// @dev thrown if asset being used for deposit mismatches in multivault deposits\\n    error INVALID_DEPOSIT_TOKEN();\\n\\n    /// STATE REGISTRY EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if bridge tokens haven't arrived to destination\\n    error BRIDGE_TOKENS_PENDING();\\n\\n    /// @dev thrown if withdrawal tx data cannot be updated\\n    error CANNOT_UPDATE_WITHDRAW_TX_DATA();\\n\\n    /// @dev thrown if rescue passed dispute deadline\\n    error DISPUTE_TIME_ELAPSED();\\n\\n    /// @dev thrown if message failed to reach the specified level of quorum needed\\n    error INSUFFICIENT_QUORUM();\\n\\n    /// @dev thrown if broadcast payload is invalid\\n    error INVALID_BROADCAST_PAYLOAD();\\n\\n    /// @dev thrown if broadcast fee is invalid\\n    error INVALID_BROADCAST_FEE();\\n\\n    /// @dev thrown if retry fees is less than required\\n    error INVALID_RETRY_FEE();\\n\\n    /// @dev thrown if broadcast message type is wrong\\n    error INVALID_MESSAGE_TYPE();\\n\\n    /// @dev thrown if payload hash is invalid during `retryMessage` on Layezero implementation\\n    error INVALID_PAYLOAD_HASH();\\n\\n    /// @dev thrown if update payload function was called on a wrong payload\\n    error INVALID_PAYLOAD_UPDATE_REQUEST();\\n\\n    /// @dev thrown if a state registry id is 0\\n    error INVALID_REGISTRY_ID();\\n\\n    /// @dev thrown if a form state registry id is 0\\n    error INVALID_FORM_REGISTRY_ID();\\n\\n    /// @dev thrown if trying to finalize the payload but the withdraw is still locked\\n    error LOCKED();\\n\\n    /// @dev thrown if payload is already updated (during xChain deposits)\\n    error PAYLOAD_ALREADY_UPDATED();\\n\\n    /// @dev thrown if payload is already processed\\n    error PAYLOAD_ALREADY_PROCESSED();\\n\\n    /// @dev thrown if payload is not in UPDATED state\\n    error PAYLOAD_NOT_UPDATED();\\n\\n    /// @dev thrown if rescue is still in timelocked state\\n    error RESCUE_LOCKED();\\n\\n    /// @dev thrown if rescue is already proposed\\n    error RESCUE_ALREADY_PROPOSED();\\n\\n    /// @dev thrown if payload hash is zero during `retryMessage` on Layezero implementation\\n    error ZERO_PAYLOAD_HASH();\\n\\n    /// DST SWAPPER EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if process dst swap is tried for processed payload id\\n    error DST_SWAP_ALREADY_PROCESSED();\\n\\n    /// @dev thrown if indices have duplicates\\n    error DUPLICATE_INDEX();\\n\\n    /// @dev thrown if failed dst swap is already updated\\n    error FAILED_DST_SWAP_ALREADY_UPDATED();\\n\\n    /// @dev thrown if indices are out of bounds\\n    error INDEX_OUT_OF_BOUNDS();\\n\\n    /// @dev thrown if failed swap token amount is 0\\n    error INVALID_DST_SWAPPER_FAILED_SWAP();\\n\\n    /// @dev thrown if failed swap token amount is not 0 and if token balance is less than amount (non zero)\\n    error INVALID_DST_SWAPPER_FAILED_SWAP_NO_TOKEN_BALANCE();\\n\\n    /// @dev thrown if failed swap token amount is not 0 and if native amount is less than amount (non zero)\\n    error INVALID_DST_SWAPPER_FAILED_SWAP_NO_NATIVE_BALANCE();\\n\\n    /// @dev forbid xChain deposits with destination swaps without interim token set (for user protection)\\n    error INVALID_INTERIM_TOKEN();\\n\\n    /// @dev thrown if dst swap output is less than minimum expected\\n    error INVALID_SWAP_OUTPUT();\\n\\n    /// FORM EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if try to forward 4626 share from the superform\\n    error CANNOT_FORWARD_4646_TOKEN();\\n\\n    /// @dev thrown in KYCDAO form if no KYC token is present\\n    error NO_VALID_KYC_TOKEN();\\n\\n    /// @dev thrown in forms where a certain functionality is not allowed or implemented\\n    error NOT_IMPLEMENTED();\\n\\n    /// @dev thrown if form implementation is PAUSED, users cannot perform any action\\n    error PAUSED();\\n\\n    /// @dev thrown if shares != deposit output or assets != redeem output when minting SuperPositions\\n    error VAULT_IMPLEMENTATION_FAILED();\\n\\n    /// @dev thrown if withdrawal tx data is not updated\\n    error WITHDRAW_TOKEN_NOT_UPDATED();\\n\\n    /// @dev thrown if withdrawal tx data is not updated\\n    error WITHDRAW_TX_DATA_NOT_UPDATED();\\n\\n    /// @dev thrown when redeeming from vault yields zero collateral\\n    error WITHDRAW_ZERO_COLLATERAL();\\n\\n    /// PAYMENT HELPER EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if chainlink is reporting an improper price\\n    error CHAINLINK_MALFUNCTION();\\n\\n    /// @dev thrown if chainlink is reporting an incomplete round\\n    error CHAINLINK_INCOMPLETE_ROUND();\\n\\n    /// @dev thrown if feed decimals is not 8\\n    error CHAINLINK_UNSUPPORTED_DECIMAL();\\n\\n    /// EMERGENCY QUEUE EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if emergency withdraw is not queued\\n    error EMERGENCY_WITHDRAW_NOT_QUEUED();\\n\\n    /// @dev thrown if emergency withdraw is already processed\\n    error EMERGENCY_WITHDRAW_PROCESSED_ALREADY();\\n\\n    /// SUPERPOSITION EXECUTION ERRORS\\n    /// ---------------------------------------------------------\\n\\n    /// @dev thrown if uri cannot be updated\\n    error DYNAMIC_URI_FROZEN();\\n\\n    /// @dev thrown if tx history is not found while state sync\\n    error TX_HISTORY_NOT_FOUND();\\n}\\n\"\r\n    },\r\n    \"src/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.23;\\n\\n/// @dev contains all the common struct and enums used for data communication between chains.\\n\\n/// @dev There are two transaction types in Superform Protocol\\nenum TransactionType {\\n    DEPOSIT,\\n    WITHDRAW\\n}\\n\\n/// @dev Message types can be INIT, RETURN (for successful Deposits) and FAIL (for failed withdraws)\\nenum CallbackType {\\n    INIT,\\n    RETURN,\\n    FAIL\\n}\\n\\n/// @dev Payloads are stored, updated (deposits) or processed (finalized)\\nenum PayloadState {\\n    STORED,\\n    UPDATED,\\n    PROCESSED\\n}\\n\\n/// @dev contains all the common struct used for interchain token transfers.\\nstruct LiqRequest {\\n    /// @dev generated data\\n    bytes txData;\\n    /// @dev input token for deposits, desired output token on target liqDstChainId for withdraws. Must be set for\\n    /// txData to be updated on destination for withdraws\\n    address token;\\n    /// @dev intermediary token on destination. Relevant for xChain deposits where a destination swap is needed for\\n    /// validation purposes\\n    address interimToken;\\n    /// @dev what bridge to use to move tokens\\n    uint8 bridgeId;\\n    /// @dev dstChainId = liqDstchainId for deposits. For withdraws it is the target chain id for where the underlying\\n    /// is to be delivered\\n    uint64 liqDstChainId;\\n    /// @dev currently this amount is used as msg.value in the txData call.\\n    uint256 nativeAmount;\\n}\\n\\n/// @dev main struct that holds required multi vault data for an action\\nstruct MultiVaultSFData {\\n    // superformids must have same destination. Can have different underlyings\\n    uint256[] superformIds;\\n    uint256[] amounts; // on deposits, amount of token to deposit on dst, on withdrawals, superpositions to burn\\n    uint256[] outputAmounts; // on deposits, amount of shares to receive, on withdrawals, amount of assets to receive\\n    uint256[] maxSlippages;\\n    LiqRequest[] liqRequests; // if length = 1; amount = sum(amounts) | else  amounts must match the amounts being sent\\n    bytes permit2data;\\n    bool[] hasDstSwaps;\\n    bool[] retain4626s; // if true, we don't mint SuperPositions, and send the 4626 back to the user instead\\n    address receiverAddress;\\n    /// this address must always be an EOA otherwise funds may be lost\\n    address receiverAddressSP;\\n    /// this address can be a EOA or a contract that implements onERC1155Receiver. must always be set for deposits\\n    bytes extraFormData; // extraFormData\\n}\\n\\n/// @dev main struct that holds required single vault data for an action\\nstruct SingleVaultSFData {\\n    // superformids must have same destination. Can have different underlyings\\n    uint256 superformId;\\n    uint256 amount;\\n    uint256 outputAmount; // on deposits, amount of shares to receive, on withdrawals, amount of assets to receive\\n    uint256 maxSlippage;\\n    LiqRequest liqRequest; // if length = 1; amount = sum(amounts)| else  amounts must match the amounts being sent\\n    bytes permit2data;\\n    bool hasDstSwap;\\n    bool retain4626; // if true, we don't mint SuperPositions, and send the 4626 back to the user instead\\n    address receiverAddress;\\n    /// this address must always be an EOA otherwise funds may be lost\\n    address receiverAddressSP;\\n    /// this address can be a EOA or a contract that implements onERC1155Receiver. must always be set for deposits\\n    bytes extraFormData; // extraFormData\\n}\\n\\n/// @dev overarching struct for multiDst requests with multi vaults\\nstruct MultiDstMultiVaultStateReq {\\n    uint8[][] ambIds;\\n    uint64[] dstChainIds;\\n    MultiVaultSFData[] superformsData;\\n}\\n\\n/// @dev overarching struct for single cross chain requests with multi vaults\\nstruct SingleXChainMultiVaultStateReq {\\n    uint8[] ambIds;\\n    uint64 dstChainId;\\n    MultiVaultSFData superformsData;\\n}\\n\\n/// @dev overarching struct for multiDst requests with single vaults\\nstruct MultiDstSingleVaultStateReq {\\n    uint8[][] ambIds;\\n    uint64[] dstChainIds;\\n    SingleVaultSFData[] superformsData;\\n}\\n\\n/// @dev overarching struct for single cross chain requests with single vaults\\nstruct SingleXChainSingleVaultStateReq {\\n    uint8[] ambIds;\\n    uint64 dstChainId;\\n    SingleVaultSFData superformData;\\n}\\n\\n/// @dev overarching struct for single direct chain requests with single vaults\\nstruct SingleDirectSingleVaultStateReq {\\n    SingleVaultSFData superformData;\\n}\\n\\n/// @dev overarching struct for single direct chain requests with multi vaults\\nstruct SingleDirectMultiVaultStateReq {\\n    MultiVaultSFData superformData;\\n}\\n\\n/// @dev struct for SuperRouter with re-arranged data for the message (contains the payloadId)\\n/// @dev realize that receiverAddressSP is not passed, only needed on source chain to mint\\nstruct InitMultiVaultData {\\n    uint256 payloadId;\\n    uint256[] superformIds;\\n    uint256[] amounts;\\n    uint256[] outputAmounts;\\n    uint256[] maxSlippages;\\n    LiqRequest[] liqData;\\n    bool[] hasDstSwaps;\\n    bool[] retain4626s;\\n    address receiverAddress;\\n    bytes extraFormData;\\n}\\n\\n/// @dev struct for SuperRouter with re-arranged data for the message (contains the payloadId)\\nstruct InitSingleVaultData {\\n    uint256 payloadId;\\n    uint256 superformId;\\n    uint256 amount;\\n    uint256 outputAmount;\\n    uint256 maxSlippage;\\n    LiqRequest liqData;\\n    bool hasDstSwap;\\n    bool retain4626;\\n    address receiverAddress;\\n    bytes extraFormData;\\n}\\n\\n/// @dev struct for Emergency Queue\\nstruct QueuedWithdrawal {\\n    address receiverAddress;\\n    uint256 superformId;\\n    uint256 amount;\\n    uint256 srcPayloadId;\\n    bool isProcessed;\\n}\\n\\n/// @dev all statuses of the timelock payload\\nenum TimelockStatus {\\n    UNAVAILABLE,\\n    PENDING,\\n    PROCESSED\\n}\\n\\n/// @dev holds information about the timelock payload\\nstruct TimelockPayload {\\n    uint8 isXChain;\\n    uint64 srcChainId;\\n    uint256 lockedTill;\\n    InitSingleVaultData data;\\n    TimelockStatus status;\\n}\\n\\n/// @dev struct that contains the type of transaction, callback flags and other identification, as well as the vaults\\n/// data in params\\nstruct AMBMessage {\\n    uint256 txInfo; // tight packing of  TransactionType txType,  CallbackType flag  if multi/single vault, registry id,\\n        // srcSender and srcChainId\\n    bytes params; // decoding txInfo will point to the right datatype of params. Refer PayloadHelper.sol\\n}\\n\\n/// @dev struct that contains the information required for broadcasting changes\\nstruct BroadcastMessage {\\n    bytes target;\\n    bytes32 messageType;\\n    bytes message;\\n}\\n\\n/// @dev struct that contains info on returned data from destination\\nstruct ReturnMultiData {\\n    uint256 payloadId;\\n    uint256[] superformIds;\\n    uint256[] amounts;\\n}\\n\\n/// @dev struct that contains info on returned data from destination\\nstruct ReturnSingleData {\\n    uint256 payloadId;\\n    uint256 superformId;\\n    uint256 amount;\\n}\\n\\n/// @dev struct that contains the data on the fees to pay to the AMBs\\nstruct AMBExtraData {\\n    uint256[] gasPerAMB;\\n    bytes[] extraDataPerAMB;\\n}\\n\\n/// @dev struct that contains the data on the fees to pay to the AMBs on broadcasts\\nstruct BroadCastAMBExtraData {\\n    uint256[] gasPerDst;\\n    bytes[] extraDataPerDst;\\n}\\n\"\r\n    },\r\n    \"src/vendor/layerzero/ILayerZeroEndpoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\n/// @dev is imported from\\n/// (https://github.com/LayerZero-Labs/LayerZero/blob/main/contracts/interfaces/ILayerZeroEndpoint.sol)\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param dstChainId_ - the destination chain identifier\\n    // @param destination_ - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param payload_ - a custom bytes payload to send to the destination contract\\n    // @param refundAddress_ - if the source transaction is cheaper than the amount of value passed, refund the\\n    // additional amount to this address\\n    // @param zroPaymentAddress_ - the address of the ZRO token holder who would pay for the transaction\\n    // @param adapterParams_ - parameters for custom functionality. e.g. receive airdropped native gas from the relayer\\n    // on destination\\n    function send(\\n        uint16 dstChainId_,\\n        bytes calldata destination_,\\n        bytes calldata payload_,\\n        address payable refundAddress_,\\n        address zroPaymentAddress_,\\n        bytes calldata adapterParams_\\n    )\\n        external\\n        payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param srcChainId_ - the source chain identifier\\n    // @param srcAddress_ - the source contract (as bytes) at the source chain\\n    // @param dstAddress_ - the address on destination chain\\n    // @param nonce_ - the unbound message ordering nonce\\n    // @param gasLimit_ - the gas limit for external contract execution\\n    // @param payload_ - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 srcChainId_,\\n        bytes calldata srcAddress_,\\n        address dstAddress_,\\n        uint64 nonce_,\\n        uint256 gasLimit_,\\n        bytes calldata payload_\\n    )\\n        external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param srcChainId_ - the source chain identifier\\n    // @param srcAddress_ - the source chain contract address\\n    function getInboundNonce(uint16 srcChainId_, bytes calldata srcAddress_) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param srcAddress_ - the source chain contract address\\n    function getOutboundNonce(uint16 dstChainId_, address srcAddress_) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param dstChainId_ - the destination chain identifier\\n    // @param userApplication_ - the user app address on this EVM chain\\n    // @param payload_ - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 dstChainId_,\\n        address userApplication_,\\n        bytes calldata payload_,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    )\\n        external\\n        view\\n        returns (uint256 nativeFee, uint256 zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param srcChainId_ - the source chain identifier\\n    // @param srcAddress_ - the source chain contract address\\n    // @param payload_ - the payload to be retried\\n    function retryPayload(uint16 srcChainId_, bytes calldata srcAddress_, bytes calldata payload_) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param srcChainId_ - the source chain identifier\\n    // @param srcAddress_ - the source chain contract address\\n    function hasStoredPayload(uint16 srcChainId_, bytes calldata srcAddress_) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param userApplication_ - the user app address on this EVM chain\\n    function getSendLibraryAddress(address userApplication_) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param userApplication_ - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address userApplication_) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param version_ - messaging library version\\n    // @param chainId_ - the chainId for the pending config change\\n    // @param userApplication_ - the contract address of the user application\\n    // @param configType_ - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 version_,\\n        uint16 chainId_,\\n        address userApplication_,\\n        uint256 configType_\\n    )\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param userApplication_ - the contract address of the user application\\n    function getSendVersion(address userApplication_) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param userApplication_ - the contract address of the user application\\n    function getReceiveVersion(address userApplication_) external view returns (uint16);\\n}\\n\"\r\n    },\r\n    \"src/vendor/layerzero/ILayerZeroReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/// @dev is imported from\\n/// (https://github.com/LayerZero-Labs/LayerZero/blob/main/contracts/interfaces/ILayerZeroReceiver.sol)\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"src/vendor/layerzero/ILayerZeroUserApplicationConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/// @dev is imported from\\n/// (https://github.com/LayerZero-Labs/LayerZero/blob/main/contracts/interfaces/ILayerZeroUserApplicationConfig.sol)\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint256 _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\"\r\n    },\r\n    \"lib/ERC1155A/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solmate/=lib/ERC1155A/lib/solmate/src/\",\r\n      \"@openzeppelin/contracts/=lib/ERC1155A/lib/openzeppelin-contracts/contracts/\",\r\n      \"ERC1155A/=lib/ERC1155A/src/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/ERC1155A/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/ERC1155A/lib/openzeppelin-contracts/\",\r\n      \"pigeon/=lib/pigeon/src/\",\r\n      \"solady/=lib/pigeon/lib/solady/\",\r\n      \"super-vaults/=lib/super-vaults/src/\",\r\n      \"v2-core/=lib/super-vaults/lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/super-vaults/lib/v2-periphery/contracts/\",\r\n      \"v3-core/=lib/super-vaults/lib/v3-core/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ISuperRegistry\",\"name\":\"superRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CALLER_NOT_ENDPOINT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_CHAIN_ID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_INTERNAL_CALL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_PAYLOAD_HASH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_SRC_SENDER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_EMERGENCY_ADMIN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_PROTOCOL_ADMIN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_STATE_REGISTRY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZERO_PAYLOAD_HASH\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"superChainId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authImpl\",\"type\":\"address\"}],\"name\":\"AuthorizedImplAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"superChainId\",\"type\":\"uint64\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldEndpoint_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEndpoint_\",\"type\":\"address\"}],\"name\":\"EndpointUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"ambChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcSender_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"name\":\"dispatchPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"generateExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"configType_\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce_\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"payload_\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"retryPayload\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"superChainId_\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"ambChainId_\",\"type\":\"uint16\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version_\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"chainId_\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"configType_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"config_\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"endpoint_\",\"type\":\"address\"}],\"name\":\"setLzEndpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version_\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"version_\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"srcChainId_\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"srcAddress_\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"superChainId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superRegistry\",\"outputs\":[{\"internalType\":\"contract ISuperRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LayerzeroImplementation", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000038594203fb14f85af738ec1bafe2a82a16bb48cb", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}