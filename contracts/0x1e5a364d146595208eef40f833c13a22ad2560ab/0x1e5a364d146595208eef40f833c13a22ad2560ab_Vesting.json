{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {Ownable} from \\\"@openzeppelin/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/interfaces/IERC20.sol\\\";\\n\\nerror InvalidAmount();\\nerror InsufficientTokens();\\nerror InvalidCliff();\\nerror InvalidDuration();\\nerror NotEnoughVestedTokens();\\nerror NotEnoughWithdrawableFunds();\\nerror ScheduleInProgress();\\n\\n/// @title Vesting\\n/// @author Protectorate\\n/// @notice Vesting contract for PRTC.\\ncontract Vesting is Ownable {\\n    event Collect(address indexed beneficiary, uint256 amount);\\n    event CreateSchedule(\\n        address indexed beneficiary, uint256 start, uint256 duration, uint256 cliff, uint256 amount\\n    );\\n    event Withdraw(uint256 amount);\\n\\n    struct Schedule {\\n        /// @notice When vesting starts.\\n        uint256 start;\\n        /// @notice Duration of vesting period in seconds.\\n        uint256 duration;\\n        /// @notice When the beneficiary can start to claim (absolute timestamp).\\n        uint256 cliff;\\n        /// @notice Total amount of tokens to be released at the end of vesting.\\n        uint256 amount;\\n        /// @notice Current amount of tokens released.\\n        uint256 released;\\n    }\\n\\n    uint256 private constant SLICE_PERIOD = 30 days;\\n\\n    IERC20 private immutable prtc;\\n\\n    mapping(address => Schedule) public schedules;\\n\\n    uint256 public totalAmountScheduled;\\n\\n    constructor(IERC20 _prtc) {\\n        prtc = _prtc;\\n    }\\n\\n    /// @dev Return amount of tokens that can be withdrawn by owner.\\n    /// @return Withdrawable amount of tokens.\\n    function withdrawableAmount() public view returns (uint256) {\\n        return prtc.balanceOf(address(this)) - totalAmountScheduled;\\n    }\\n\\n    /// @notice Create a new vesting schedule for a given beneficiary.\\n    /// @param _beneficiary Address of beneficiary.\\n    /// @param _duration Duration of vesting period in seconds.\\n    /// @param _cliff Cliff period in seconds.\\n    /// @param _amount Total amount of tokens to be released at the end of vesting.\\n    function createSchedule(\\n        address _beneficiary,\\n        uint256 _duration,\\n        uint256 _cliff,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        if (_duration == 0 || _duration > (365 days * 5)) revert InvalidDuration();\\n        if (_cliff > _duration) revert InvalidCliff();\\n        if (_amount == 0) revert InvalidAmount();\\n        if (_amount > withdrawableAmount()) revert InsufficientTokens();\\n        if (schedules[_beneficiary].amount != schedules[_beneficiary].released) {\\n            revert ScheduleInProgress();\\n        }\\n\\n        uint256 cliff = block.timestamp + _cliff;\\n\\n        schedules[_beneficiary] = Schedule(block.timestamp, _duration, cliff, _amount, 0);\\n\\n        totalAmountScheduled += _amount;\\n\\n        emit CreateSchedule(_beneficiary, block.timestamp, _duration, cliff, _amount);\\n    }\\n\\n    /// @notice Collect vested tokens for a given beneficiary.\\n    /// @param _beneficiary Address of beneficiary.\\n    /// @dev Anyone can call this function. It does not hurt the user.\\n    /// If `_who` does not exist, `_computeReleasableAmount` will return zero.\\n    function collect(address _beneficiary) external {\\n        Schedule storage schedule = schedules[_beneficiary];\\n\\n        uint256 vestedAmount = _computeReleasableAmount(schedule);\\n\\n        if (vestedAmount == 0) revert NotEnoughVestedTokens();\\n\\n        totalAmountScheduled -= vestedAmount;\\n        schedule.released += vestedAmount;\\n\\n        emit Collect(_beneficiary, vestedAmount);\\n\\n        prtc.transfer(_beneficiary, vestedAmount);\\n    }\\n\\n    /// @notice Withdraw an amount of tokens if available for owner.\\n    /// @param _amount Token amount to withdraw.\\n    function withdraw(uint256 _amount) external onlyOwner {\\n        if (_amount > withdrawableAmount()) revert NotEnoughWithdrawableFunds();\\n\\n        emit Withdraw(_amount);\\n\\n        prtc.transfer(owner(), _amount);\\n    }\\n\\n    /// @notice Compute amount of tokens that can be released for a given beneficiary.\\n    /// @param _beneficiary Address of beneficiary.\\n    /// @return Releasable amount of tokens.\\n    function computeReleasableAmount(address _beneficiary) external view returns (uint256) {\\n        Schedule storage schedule = schedules[_beneficiary];\\n\\n        return _computeReleasableAmount(schedule);\\n    }\\n\\n    /// @dev It is impossible for a beneficiary to exist if `schedule.amount`\\n    /// is zero and once it is set it will never go back.\\n    function isBeneficiary(address _beneficiary) external view returns (bool) {\\n        return schedules[_beneficiary].amount != 0;\\n    }\\n\\n    /// @notice Compute amount of tokens that can be released for a given schedule.\\n    /// @param _schedule Vesting schedule.\\n    /// @dev If a `_schedule` has not been created yet, it will return zero.\\n    /// @return Amount of releasable tokens.\\n    function _computeReleasableAmount(Schedule memory _schedule) internal view returns (uint256) {\\n        // If current `block.timestamp` is before cliff or schedule is revoked,\\n        // no tokens are releasable.\\n        if (block.timestamp < _schedule.cliff) {\\n            return 0;\\n        }\\n        // If current time is after vesting period, all tokens are releasable,\\n        // minus amount already released.\\n        else if (block.timestamp >= _schedule.start + _schedule.duration) {\\n            return _schedule.amount - _schedule.released;\\n        }\\n        // Otherwise, some tokens are releasable.\\n        // Compute number of full vesting periods that have elapsed.\\n        else {\\n            uint256 timeFromStart = block.timestamp - _schedule.start;\\n            uint256 vestedSeconds = (timeFromStart / SLICE_PERIOD) * SLICE_PERIOD;\\n            // Compute amount of tokens that are vested.\\n            uint256 vestedAmount = (_schedule.amount * vestedSeconds) / _schedule.duration;\\n\\n            // Subtract amount already released and return.\\n            return vestedAmount - _schedule.released;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_prtc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCliff\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughVestedTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughWithdrawableFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ScheduleInProgress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collect\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreateSchedule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"isBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"schedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountScheduled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b9098d3669a78e9afe8b94a97290407400d9da31", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}