{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wrapped-assets/shiba/WrappedShibaSwapLp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\nimport \\\"./WSSLPUserProxy.sol\\\";\\r\\nimport \\\"../../helpers/ReentrancyGuard.sol\\\";\\r\\nimport \\\"../../helpers/TransferHelper.sol\\\";\\r\\nimport \\\"../../Auth2.sol\\\";\\r\\nimport \\\"../../interfaces/IVault.sol\\\";\\r\\nimport \\\"../../interfaces/IERC20WithOptional.sol\\\";\\r\\nimport \\\"../../interfaces/wrapped-assets/IWrappedAsset.sol\\\";\\r\\nimport \\\"../../interfaces/wrapped-assets/ITopDog.sol\\\";\\r\\nimport \\\"../../interfaces/wrapped-assets/ISushiSwapLpToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ShibaSwapWrappedLp\\r\\n **/\\r\\ncontract WrappedShibaSwapLp is IWrappedAsset, Auth2, ERC20, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    bytes32 public constant override isUnitProtocolWrappedAsset = keccak256(\\\"UnitProtocolWrappedAsset\\\");\\r\\n\\r\\n    IVault public immutable vault;\\r\\n    ITopDog public immutable topDog;\\r\\n    uint256 public immutable topDogPoolId;\\r\\n    IERC20 public immutable boneToken;\\r\\n\\r\\n    address public immutable userProxyImplementation;\\r\\n    mapping(address => WSSLPUserProxy) public usersProxies;\\r\\n\\r\\n    mapping (address => mapping (bytes4 => bool)) allowedBoneLockersSelectors;\\r\\n\\r\\n    address public feeReceiver;\\r\\n    uint8 public feePercent = 10;\\r\\n\\r\\n    constructor(\\r\\n        address _vaultParameters,\\r\\n        ITopDog _topDog,\\r\\n        uint256 _topDogPoolId,\\r\\n        address _feeReceiver\\r\\n    )\\r\\n    Auth2(_vaultParameters)\\r\\n    ERC20(\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                \\\"Wrapped by Unit \\\",\\r\\n                getSsLpTokenName(_topDog, _topDogPoolId),\\r\\n                \\\" \\\",\\r\\n                getSsLpTokenToken0Symbol(_topDog, _topDogPoolId),\\r\\n                \\\"-\\\",\\r\\n                getSsLpTokenToken1Symbol(_topDog, _topDogPoolId)\\r\\n            )\\r\\n        ),\\r\\n        string(\\r\\n            abi.encodePacked(\\r\\n                \\\"wu\\\",\\r\\n                getSsLpTokenSymbol(_topDog, _topDogPoolId),\\r\\n                getSsLpTokenToken0Symbol(_topDog, _topDogPoolId),\\r\\n                getSsLpTokenToken1Symbol(_topDog, _topDogPoolId)\\r\\n            )\\r\\n        )\\r\\n    )\\r\\n    {\\r\\n        boneToken = _topDog.bone();\\r\\n        topDog = _topDog;\\r\\n        topDogPoolId = _topDogPoolId;\\r\\n        vault = IVault(VaultParameters(_vaultParameters).vault());\\r\\n\\r\\n        _setupDecimals(IERC20WithOptional(getSsLpToken(_topDog, _topDogPoolId)).decimals());\\r\\n\\r\\n        feeReceiver = _feeReceiver;\\r\\n\\r\\n        userProxyImplementation = address(new WSSLPUserProxy(_topDog, _topDogPoolId));\\r\\n    }\\r\\n\\r\\n    function setFeeReceiver(address _feeReceiver) public onlyManager {\\r\\n        feeReceiver = _feeReceiver;\\r\\n\\r\\n        emit FeeReceiverChanged(_feeReceiver);\\r\\n    }\\r\\n\\r\\n    function setFee(uint8 _feePercent) public onlyManager {\\r\\n        require(_feePercent <= 50, \\\"Unit Protocol Wrapped Assets: INVALID_FEE\\\");\\r\\n        feePercent = _feePercent;\\r\\n\\r\\n        emit FeeChanged(_feePercent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev in case of change bone locker to unsupported by current methods one\\r\\n     */\\r\\n    function setAllowedBoneLockerSelector(address _boneLocker, bytes4 _selector, bool _isAllowed) public onlyManager {\\r\\n        allowedBoneLockersSelectors[_boneLocker][_selector] = _isAllowed;\\r\\n\\r\\n        if (_isAllowed) {\\r\\n            emit AllowedBoneLockerSelectorAdded(_boneLocker, _selector);\\r\\n        } else {\\r\\n             emit AllowedBoneLockerSelectorRemoved(_boneLocker, _selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @notice Approve sslp token to spend from user proxy (in case of change sslp)\\r\\n     */\\r\\n    function approveSslpToTopDog() public nonReentrant {\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(msg.sender);\\r\\n        IERC20 sslpToken = getUnderlyingToken();\\r\\n\\r\\n        userProxy.approveSslpToTopDog(sslpToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get tokens from user, send them to TopDog, sent to user wrapped tokens\\r\\n     * @dev only user or CDPManager could call this method\\r\\n     */\\r\\n    function deposit(address _user, uint256 _amount) public override nonReentrant {\\r\\n        require(_amount > 0, \\\"Unit Protocol Wrapped Assets: INVALID_AMOUNT\\\");\\r\\n        require(msg.sender == _user || vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol Wrapped Assets: AUTH_FAILED\\\");\\r\\n\\r\\n        IERC20 sslpToken = getUnderlyingToken();\\r\\n        WSSLPUserProxy userProxy = _getOrCreateUserProxy(_user, sslpToken);\\r\\n\\r\\n        // get tokens from user, need approve of sslp tokens to pool\\r\\n        TransferHelper.safeTransferFrom(address(sslpToken), _user, address(userProxy), _amount);\\r\\n\\r\\n        // deposit them to TopDog\\r\\n        userProxy.deposit(_amount);\\r\\n\\r\\n        // wrapped tokens to user\\r\\n        _mint(_user, _amount);\\r\\n\\r\\n        emit Deposit(_user, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Unwrap tokens, withdraw from TopDog and send them to user\\r\\n     * @dev only user or CDPManager could call this method\\r\\n     */\\r\\n    function withdraw(address _user, uint256 _amount) public override nonReentrant {\\r\\n        require(_amount > 0, \\\"Unit Protocol Wrapped Assets: INVALID_AMOUNT\\\");\\r\\n        require(msg.sender == _user || vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol Wrapped Assets: AUTH_FAILED\\\");\\r\\n\\r\\n        IERC20 sslpToken = getUnderlyingToken();\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(_user);\\r\\n\\r\\n        // get wrapped tokens from user\\r\\n        _burn(_user, _amount);\\r\\n\\r\\n        // withdraw funds from TopDog\\r\\n        userProxy.withdraw(sslpToken, _amount, _user);\\r\\n\\r\\n        emit Withdraw(_user, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Manually move position (or its part) to another user (for example in case of liquidation)\\r\\n     * @dev Important! Use only with additional token transferring outside this function (example: liquidation - tokens are in vault and transferred by vault)\\r\\n     * @dev only CDPManager could call this method\\r\\n     */\\r\\n    function movePosition(address _userFrom, address _userTo, uint256 _amount) public override nonReentrant hasVaultAccess {\\r\\n        require(_userFrom != address(vault) && _userTo != address(vault), \\\"Unit Protocol Wrapped Assets: NOT_ALLOWED_FOR_VAULT\\\");\\r\\n        if (_userFrom == _userTo || _amount == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        IERC20 sslpToken = getUnderlyingToken();\\r\\n        WSSLPUserProxy userFromProxy = _requireUserProxy(_userFrom);\\r\\n        WSSLPUserProxy userToProxy = _getOrCreateUserProxy(_userTo, sslpToken);\\r\\n\\r\\n        userFromProxy.withdraw(sslpToken, _amount, address(userToProxy));\\r\\n        userToProxy.deposit(_amount);\\r\\n\\r\\n        emit Withdraw(_userFrom, _amount);\\r\\n        emit Deposit(_userTo, _amount);\\r\\n        emit PositionMoved(_userFrom, _userTo, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates pending reward for user. Not taken into account unclaimed reward from BoneLockers.\\r\\n     * @notice Use getClaimableRewardFromBoneLocker to calculate unclaimed reward from BoneLockers\\r\\n     */\\r\\n    function pendingReward(address _user) public override view returns (uint256) {\\r\\n        WSSLPUserProxy userProxy = usersProxies[_user];\\r\\n        if (address(userProxy) == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return userProxy.pendingReward(feeReceiver, feePercent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim pending direct reward for user.\\r\\n     * @notice Use claimRewardFromBoneLockers claim reward from BoneLockers\\r\\n     */\\r\\n    function claimReward(address _user) public override nonReentrant {\\r\\n        require(_user == msg.sender, \\\"Unit Protocol Wrapped Assets: AUTH_FAILED\\\");\\r\\n\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(_user);\\r\\n        userProxy.claimReward(_user, feeReceiver, feePercent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get claimable amount from BoneLocker\\r\\n     * @param _user user address\\r\\n     * @param _boneLocker BoneLocker to check, pass zero address to check current\\r\\n     */\\r\\n    function getClaimableRewardFromBoneLocker(address _user, IBoneLocker _boneLocker) public view returns (uint256) {\\r\\n        WSSLPUserProxy userProxy = usersProxies[_user];\\r\\n        if (address(userProxy) == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return userProxy.getClaimableRewardFromBoneLocker(_boneLocker, feeReceiver, feePercent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Claim bones from BoneLockers\\r\\n     * @notice Since it could be a lot of pending rewards items parameters are used limit tx size\\r\\n     * @param _boneLocker BoneLocker to claim, pass zero address to claim from current\\r\\n     * @param _maxBoneLockerRewardsAtOneClaim max amount of rewards items to claim from BoneLocker, pass 0 to claim all rewards\\r\\n     */\\r\\n    function claimRewardFromBoneLocker(IBoneLocker _boneLocker, uint256 _maxBoneLockerRewardsAtOneClaim) public nonReentrant {\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(msg.sender);\\r\\n        userProxy.claimRewardFromBoneLocker(msg.sender, _boneLocker, _maxBoneLockerRewardsAtOneClaim, feeReceiver, feePercent);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice get SSLP token\\r\\n     * @dev not immutable since it could be changed in TopDog\\r\\n     */\\r\\n    function getUnderlyingToken() public override view returns (IERC20) {\\r\\n        (IERC20 _sslpToken,,,) = topDog.poolInfo(topDogPoolId);\\r\\n\\r\\n        return _sslpToken;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw tokens from topdog to user proxy without caring about rewards. EMERGENCY ONLY.\\r\\n     * @notice To withdraw tokens from user proxy to user use `withdrawToken`\\r\\n     */\\r\\n    function emergencyWithdraw() public nonReentrant {\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(msg.sender);\\r\\n\\r\\n        uint amount = userProxy.getDepositedAmount();\\r\\n        _burn(msg.sender, amount);\\r\\n        assert(balanceOf(msg.sender) == 0);\\r\\n\\r\\n        userProxy.emergencyWithdraw();\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _token, uint _amount) public nonReentrant {\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(msg.sender);\\r\\n        userProxy.withdrawToken(_token, msg.sender, _amount, feeReceiver, feePercent);\\r\\n\\r\\n        emit TokenWithdraw(msg.sender, _token, _amount);\\r\\n    }\\r\\n\\r\\n    function readBoneLocker(address _user, address _boneLocker, bytes calldata _callData) public view returns (bool success, bytes memory data) {\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(_user);\\r\\n        (success, data) = userProxy.readBoneLocker(_boneLocker, _callData);\\r\\n    }\\r\\n\\r\\n    function callBoneLocker(address _boneLocker, bytes calldata _callData) public nonReentrant returns (bool success, bytes memory data) {\\r\\n        bytes4 selector;\\r\\n        assembly {\\r\\n            selector := calldataload(_callData.offset)\\r\\n        }\\r\\n        require(allowedBoneLockersSelectors[_boneLocker][selector], \\\"Unit Protocol Wrapped Assets: UNSUPPORTED_SELECTOR\\\");\\r\\n\\r\\n        WSSLPUserProxy userProxy = _requireUserProxy(msg.sender);\\r\\n        (success, data) = userProxy.callBoneLocker(_boneLocker, _callData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get sslp token for using in constructor\\r\\n     */\\r\\n    function getSsLpToken(ITopDog _topDog, uint256 _topDogPoolId) private view returns (address) {\\r\\n        (IERC20 _sslpToken,,,) = _topDog.poolInfo(_topDogPoolId);\\r\\n\\r\\n        return address(_sslpToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get symbol of sslp token for using in constructor\\r\\n     */\\r\\n    function getSsLpTokenSymbol(ITopDog _topDog, uint256 _topDogPoolId) private view returns (string memory) {\\r\\n        return IERC20WithOptional(getSsLpToken(_topDog, _topDogPoolId)).symbol();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get name of sslp token for using in constructor\\r\\n     */\\r\\n    function getSsLpTokenName(ITopDog _topDog, uint256 _topDogPoolId) private view returns (string memory) {\\r\\n        return IERC20WithOptional(getSsLpToken(_topDog, _topDogPoolId)).name();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get token0 symbol of sslp token for using in constructor\\r\\n     */\\r\\n    function getSsLpTokenToken0Symbol(ITopDog _topDog, uint256 _topDogPoolId) private view returns (string memory) {\\r\\n        return IERC20WithOptional(address(ISushiSwapLpToken(getSsLpToken(_topDog, _topDogPoolId)).token0())).symbol();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get token1 symbol of sslp token for using in constructor\\r\\n     */\\r\\n    function getSsLpTokenToken1Symbol(ITopDog _topDog, uint256 _topDogPoolId) private view returns (string memory) {\\r\\n        return IERC20WithOptional(address(ISushiSwapLpToken(getSsLpToken(_topDog, _topDogPoolId)).token1())).symbol();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev No direct transfers between users allowed since we store positions info in userInfo.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal override onlyVault {\\r\\n        require(sender == address(vault) || recipient == address(vault), \\\"Unit Protocol Wrapped Assets: AUTH_FAILED\\\");\\r\\n        super._transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _requireUserProxy(address _user) internal view returns (WSSLPUserProxy userProxy) {\\r\\n        userProxy = usersProxies[_user];\\r\\n        require(address(userProxy) != address(0), \\\"Unit Protocol Wrapped Assets: NO_DEPOSIT\\\");\\r\\n    }\\r\\n\\r\\n    function _getOrCreateUserProxy(address _user, IERC20 sslpToken) internal returns (WSSLPUserProxy userProxy) {\\r\\n        userProxy = usersProxies[_user];\\r\\n        if (address(userProxy) == address(0)) {\\r\\n            // create new\\r\\n            userProxy = WSSLPUserProxy(createClone(userProxyImplementation));\\r\\n            userProxy.approveSslpToTopDog(sslpToken);\\r\\n\\r\\n            usersProxies[_user] = userProxy;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev see https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\\r\\n     */\\r\\n    function createClone(address target) internal returns (address result) {\\r\\n        bytes20 targetBytes = bytes20(target);\\r\\n        assembly {\\r\\n            let clone := mload(0x40)\\r\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n            mstore(add(clone, 0x14), targetBytes)\\r\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n            result := create(0, clone, 0x37)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/wrapped-assets/shiba/WSSLPUserProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2022 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\"; // have to use OZ safemath since it is used in WSSLP\\n\\nimport \\\"../../interfaces/wrapped-assets/ITopDog.sol\\\";\\nimport \\\"../../helpers/TransferHelper.sol\\\";\\n\\n\\n/**\\n * @title WSSLPUserProxy\\n **/\\ncontract WSSLPUserProxy {\\n    using SafeMath for uint256;\\n\\n    address public immutable manager;\\n\\n    ITopDog public immutable topDog;\\n    uint256 public immutable topDogPoolId;\\n    IERC20 public immutable boneToken;\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"Unit Protocol Wrapped Assets: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    constructor(ITopDog _topDog, uint256 _topDogPoolId) {\\n        manager = msg.sender;\\n\\n        topDog = _topDog;\\n        topDogPoolId = _topDogPoolId;\\n\\n        boneToken = _topDog.bone();\\n    }\\n\\n    /**\\n     * @dev in case of change sslp\\n     */\\n    function approveSslpToTopDog(IERC20 _sslpToken) public onlyManager {\\n        TransferHelper.safeApprove(address(_sslpToken), address(topDog), type(uint256).max);\\n    }\\n\\n    function deposit(uint256 _amount) public onlyManager {\\n        topDog.deposit(topDogPoolId, _amount);\\n    }\\n\\n    function withdraw(IERC20 _sslpToken, uint256 _amount, address _sentTokensTo) public onlyManager {\\n        topDog.withdraw(topDogPoolId, _amount);\\n        TransferHelper.safeTransfer(address(_sslpToken), _sentTokensTo, _amount);\\n    }\\n\\n    function pendingReward(address _feeReceiver, uint8 _feePercent) public view returns (uint) {\\n        uint balance = boneToken.balanceOf(address(this));\\n        uint pending = topDog.pendingBone(topDogPoolId, address(this)).mul(topDog.rewardMintPercent()).div(100);\\n\\n        (uint amountWithoutFee, ) = _calcFee(balance.add(pending), _feeReceiver, _feePercent);\\n        return amountWithoutFee;\\n    }\\n\\n    function claimReward(address _user, address _feeReceiver, uint8 _feePercent) public onlyManager {\\n        topDog.deposit(topDogPoolId, 0); // get current reward (no separate methods)\\n\\n        _sendAllBonesToUser(_user, _feeReceiver, _feePercent);\\n    }\\n\\n    function _calcFee(uint _amount, address _feeReceiver, uint8 _feePercent) internal pure returns (uint amountWithoutFee, uint fee) {\\n        if (_feePercent == 0 || _feeReceiver == address(0)) {\\n            return (_amount, 0);\\n        }\\n\\n        fee = _amount.mul(_feePercent).div(100);\\n        return (_amount.sub(fee), fee);\\n    }\\n\\n    function _sendAllBonesToUser(address _user, address _feeReceiver, uint8 _feePercent) internal {\\n        uint balance = boneToken.balanceOf(address(this));\\n\\n        _sendBonesToUser(_user, balance, _feeReceiver, _feePercent);\\n    }\\n\\n    function _sendBonesToUser(address _user, uint _amount, address _feeReceiver, uint8 _feePercent) internal {\\n        (uint amountWithoutFee, uint fee) = _calcFee(_amount, _feeReceiver, _feePercent);\\n\\n        if (fee > 0) {\\n            TransferHelper.safeTransfer(address(boneToken), _feeReceiver, fee);\\n        }\\n        TransferHelper.safeTransfer(address(boneToken), _user, amountWithoutFee);\\n    }\\n\\n    function getClaimableRewardFromBoneLocker(IBoneLocker _boneLocker, address _feeReceiver, uint8 _feePercent) public view returns (uint) {\\n        if (address(_boneLocker) == address(0)) {\\n            _boneLocker = topDog.boneLocker();\\n        }\\n\\n        (uint amountWithoutFee, ) = _calcFee(_boneLocker.getClaimableAmount(address(this)), _feeReceiver, _feePercent);\\n        return amountWithoutFee;\\n    }\\n\\n    function claimRewardFromBoneLocker(address _user, IBoneLocker _boneLocker, uint256 _maxBoneLockerRewardsAtOneClaim, address _feeReceiver, uint8 _feePercent) public onlyManager {\\n        if (address(_boneLocker) == address(0)) {\\n            _boneLocker = topDog.boneLocker();\\n        }\\n\\n        (uint256 left, uint256 right) = _boneLocker.getLeftRightCounters(address(this));\\n        if (right <= left) {\\n            return;\\n        }\\n\\n        if (_maxBoneLockerRewardsAtOneClaim > 0 && right - left > _maxBoneLockerRewardsAtOneClaim) {\\n            right = left + _maxBoneLockerRewardsAtOneClaim;\\n        }\\n        _boneLocker.claimAll(right);\\n\\n        _sendAllBonesToUser(_user, _feeReceiver, _feePercent);\\n    }\\n\\n    function emergencyWithdraw() public onlyManager {\\n        topDog.emergencyWithdraw(topDogPoolId);\\n    }\\n\\n    function withdrawToken(address _token, address _user, uint _amount, address _feeReceiver, uint8 _feePercent) public onlyManager {\\n        if (_token == address(boneToken)) {\\n            _sendBonesToUser(_user, _amount, _feeReceiver, _feePercent);\\n        } else {\\n            TransferHelper.safeTransfer(_token, _user, _amount);\\n        }\\n    }\\n\\n    function readBoneLocker(address _boneLocker, bytes calldata _callData) public view returns (bool success, bytes memory data) {\\n        (success, data) = _boneLocker.staticcall(_callData);\\n    }\\n\\n    function callBoneLocker(address _boneLocker, bytes calldata _callData) public onlyManager returns (bool success, bytes memory data) {\\n        (success, data) = _boneLocker.call(_callData);\\n    }\\n\\n    function getDepositedAmount() public view returns (uint amount) {\\n        (amount, ) = topDog.userInfo(topDogPoolId, address (this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Auth2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"./VaultParameters.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Auth2\\r\\n * @dev Manages USDP's system access\\r\\n * @dev copy of Auth from VaultParameters.sol but with immutable vaultParameters for saving gas\\r\\n **/\\r\\ncontract Auth2 {\\r\\n\\r\\n    // address of the the contract with vault parameters\\r\\n    VaultParameters public immutable vaultParameters;\\r\\n\\r\\n    constructor(address _parameters) {\\r\\n        require(_parameters != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\r\\n\\r\\n        vaultParameters = VaultParameters(_parameters);\\r\\n    }\\r\\n\\r\\n    // ensures tx's sender is a manager\\r\\n    modifier onlyManager() {\\r\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ensures tx's sender is able to modify the Vault\\r\\n    modifier hasVaultAccess() {\\r\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ensures tx's sender is the Vault\\r\\n    modifier onlyVault() {\\r\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: AUTH_FAILED\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity ^0.7.6;\\n\\ninterface IVault {\\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\\n    function chargeFee ( address asset, address user, uint256 amount ) external;\\n    function col (  ) external view returns ( address );\\n    function colToken ( address, address ) external view returns ( uint256 );\\n    function collaterals ( address, address ) external view returns ( uint256 );\\n    function debts ( address, address ) external view returns ( uint256 );\\n    function depositCol ( address asset, address user, uint256 amount ) external;\\n    function depositEth ( address user ) external payable;\\n    function depositMain ( address asset, address user, uint256 amount ) external;\\n    function destroy ( address asset, address user ) external;\\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\\n    function lastUpdate ( address, address ) external view returns ( uint256 );\\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\\n    function liquidationFee ( address, address ) external view returns ( uint256 );\\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\\n    function oracleType ( address, address ) external view returns ( uint256 );\\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\\n    function stabilityFee ( address, address ) external view returns ( uint256 );\\n    function tokenDebts ( address ) external view returns ( uint256 );\\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\\n    function update ( address asset, address user ) external;\\n    function usdp (  ) external view returns ( address );\\n    function vaultParameters (  ) external view returns ( address );\\n    function weth (  ) external view returns ( address payable );\\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\\n    function withdrawEth ( address user, uint256 amount ) external;\\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20WithOptional.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20WithOptional is IERC20  {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/IWrappedAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWrappedAsset is IERC20 /* IERC20WithOptional */ {\\r\\n\\r\\n    event Deposit(address indexed user, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 amount);\\r\\n    event PositionMoved(address indexed userFrom, address indexed userTo, uint256 amount);\\r\\n\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\r\\n    event TokenWithdraw(address indexed user, address token, uint256 amount);\\r\\n\\r\\n    event FeeChanged(uint256 newFeePercent);\\r\\n    event FeeReceiverChanged(address newFeeReceiver);\\r\\n    event AllowedBoneLockerSelectorAdded(address boneLocker, bytes4 selector);\\r\\n    event AllowedBoneLockerSelectorRemoved(address boneLocker, bytes4 selector);\\r\\n\\r\\n    /**\\r\\n     * @notice Get underlying token\\r\\n     */\\r\\n    function getUnderlyingToken() external view returns (IERC20);\\r\\n\\r\\n    /**\\r\\n     * @notice deposit underlying token and send wrapped token to user\\r\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\r\\n     */\\r\\n    function deposit(address _userAddr, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get wrapped token and return underlying\\r\\n     * @dev Important! Only user or trusted contracts must be able to call this method\\r\\n     */\\r\\n    function withdraw(address _userAddr, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get pending reward amount for user if reward is supported\\r\\n     */\\r\\n    function pendingReward(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice claim pending reward for user if reward is supported\\r\\n     */\\r\\n    function claimReward(address _userAddr) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Manually move position (or its part) to another user (for example in case of liquidation)\\r\\n     * @dev Important! Only trusted contracts must be able to call this method\\r\\n     */\\r\\n    function movePosition(address _userAddrFrom, address _userAddrTo, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev function for checks that asset is unitprotocol wrapped asset.\\r\\n     * @dev For wrapped assets must return keccak256(\\\"UnitProtocolWrappedAsset\\\")\\r\\n     */\\r\\n    function isUnitProtocolWrappedAsset() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/ITopDog.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./IBoneLocker.sol\\\";\\r\\nimport \\\"./IBoneToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * See https://etherscan.io/address/0x94235659cf8b805b2c658f9ea2d6d6ddbb17c8d7#code\\r\\n */\\r\\ninterface ITopDog  {\\r\\n\\r\\n    function bone() external view returns (IBoneToken);\\r\\n    function boneLocker() external view returns (IBoneLocker);\\r\\n    function poolInfo(uint256) external view returns (IERC20, uint256, uint256, uint256);\\r\\n    function poolLength() external view returns (uint256);\\r\\n    function userInfo(uint256, address) external view returns (uint256, uint256);\\r\\n\\r\\n    function rewardMintPercent() external view returns (uint256);\\r\\n    function pendingBone(uint256 _pid, address _user) external view returns (uint256);\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/ISushiSwapLpToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ISushiSwapLpToken is IERC20 /* IERC20WithOptional */ {\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/IBoneLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/**\\r\\n * @dev BoneToken locker contract interface\\r\\n */\\r\\ninterface IBoneLocker {\\r\\n\\r\\n    function lockInfoByUser(address, uint256) external view returns (uint256, uint256, bool);\\r\\n\\r\\n    function lockingPeriod() external view returns (uint256);\\r\\n\\r\\n    // function to claim all the tokens locked for a user, after the locking period\\r\\n    function claimAllForUser(uint256 r, address user) external;\\r\\n\\r\\n    // function to claim all the tokens locked by user, after the locking period\\r\\n    function claimAll(uint256 r) external;\\r\\n\\r\\n    // function to get claimable amount for any user\\r\\n    function getClaimableAmount(address _user) external view returns(uint256);\\r\\n\\r\\n    // get the left and right headers for a user, left header is the index counter till which we have already iterated, right header is basically the length of user's lockInfo array\\r\\n    function getLeftRightCounters(address _user) external view returns(uint256, uint256);\\r\\n\\r\\n    function lock(address _holder, uint256 _amount, bool _isDev) external;\\r\\n    function setLockingPeriod(uint256 _newLockingPeriod, uint256 _newDevLockingPeriod) external;\\r\\n    function emergencyWithdrawOwner(address _to) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/wrapped-assets/IBoneToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\r\\n\\r\\n/*\\r\\n  Copyright 2021 Unit Protocol: Artem Zakharov (az@unit.xyz).\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IBoneToken is IERC20 {\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/VaultParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: bsl-1.1\\n\\n/*\\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\\n*/\\npragma solidity 0.7.6;\\n\\n\\n\\n/**\\n * @title Auth\\n * @dev Manages USDP's system access\\n **/\\ncontract Auth {\\n\\n    // address of the the contract with vault parameters\\n    VaultParameters public vaultParameters;\\n\\n    constructor(address _parameters) {\\n        vaultParameters = VaultParameters(_parameters);\\n    }\\n\\n    // ensures tx's sender is a manager\\n    modifier onlyManager() {\\n        require(vaultParameters.isManager(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is able to modify the Vault\\n    modifier hasVaultAccess() {\\n        require(vaultParameters.canModifyVault(msg.sender), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n\\n    // ensures tx's sender is the Vault\\n    modifier onlyVault() {\\n        require(msg.sender == vaultParameters.vault(), \\\"Unit Protocol: AUTH_FAILED\\\");\\n        _;\\n    }\\n}\\n\\n\\n\\n/**\\n * @title VaultParameters\\n **/\\ncontract VaultParameters is Auth {\\n\\n    // map token to stability fee percentage; 3 decimals\\n    mapping(address => uint) public stabilityFee;\\n\\n    // map token to liquidation fee percentage, 0 decimals\\n    mapping(address => uint) public liquidationFee;\\n\\n    // map token to USDP mint limit\\n    mapping(address => uint) public tokenDebtLimit;\\n\\n    // permissions to modify the Vault\\n    mapping(address => bool) public canModifyVault;\\n\\n    // managers\\n    mapping(address => bool) public isManager;\\n\\n    // enabled oracle types\\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\\n\\n    // address of the Vault\\n    address payable public vault;\\n\\n    // The foundation address\\n    address public foundation;\\n\\n    /**\\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\\n     * hashed with Keccak-256.\\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\\n    **/\\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\\n        require(_vault != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        require(_foundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n\\n        isManager[msg.sender] = true;\\n        vault = _vault;\\n        foundation = _foundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Grants and revokes manager's status of any address\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setManager(address who, bool permit) external onlyManager {\\n        isManager[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the foundation address\\n     * @param newFoundation The new foundation address\\n     **/\\n    function setFoundation(address newFoundation) external onlyManager {\\n        require(newFoundation != address(0), \\\"Unit Protocol: ZERO_ADDRESS\\\");\\n        foundation = newFoundation;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets ability to use token as the main collateral\\n     * @param asset The address of the main collateral token\\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\\n     * @param usdpLimit The USDP token issue limit\\n     * @param oracles The enables oracle types\\n     **/\\n    function setCollateral(\\n        address asset,\\n        uint stabilityFeeValue,\\n        uint liquidationFeeValue,\\n        uint usdpLimit,\\n        uint[] calldata oracles\\n    ) external onlyManager {\\n        setStabilityFee(asset, stabilityFeeValue);\\n        setLiquidationFee(asset, liquidationFeeValue);\\n        setTokenDebtLimit(asset, usdpLimit);\\n        for (uint i=0; i < oracles.length; i++) {\\n            setOracleType(oracles[i], asset, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets a permission for an address to modify the Vault\\n     * @param who The target address\\n     * @param permit The permission flag\\n     **/\\n    function setVaultAccess(address who, bool permit) external onlyManager {\\n        canModifyVault[who] = permit;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the year stability fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The stability fee percentage (3 decimals)\\n     **/\\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\\n        stabilityFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\\n     * @param asset The address of the main collateral token\\n     * @param newValue The liquidation fee percentage (0 decimals)\\n     **/\\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\\n        require(newValue <= 100, \\\"Unit Protocol: VALUE_OUT_OF_RANGE\\\");\\n        liquidationFee[asset] = newValue;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Enables/disables oracle types\\n     * @param _type The type of the oracle\\n     * @param asset The address of the main collateral token\\n     * @param enabled The control flag\\n     **/\\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\\n        isOracleTypeEnabled[_type][asset] = enabled;\\n    }\\n\\n    /**\\n     * @notice Only manager is able to call this function\\n     * @dev Sets USDP limit for a specific collateral\\n     * @param asset The address of the main collateral token\\n     * @param limit The limit number\\n     **/\\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\\n        tokenDebtLimit[asset] = limit;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultParameters\",\"type\":\"address\"},{\"internalType\":\"contract ITopDog\",\"name\":\"_topDog\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_topDogPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boneLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AllowedBoneLockerSelectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boneLocker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"AllowedBoneLockerSelectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionMoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveSslpToTopDog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boneToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boneLocker\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"callBoneLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBoneLocker\",\"name\":\"_boneLocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxBoneLockerRewardsAtOneClaim\",\"type\":\"uint256\"}],\"name\":\"claimRewardFromBoneLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IBoneLocker\",\"name\":\"_boneLocker\",\"type\":\"address\"}],\"name\":\"getClaimableRewardFromBoneLocker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUnitProtocolWrappedAsset\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_userTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"movePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boneLocker\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"readBoneLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boneLocker\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bool\",\"name\":\"_isAllowed\",\"type\":\"bool\"}],\"name\":\"setAllowedBoneLockerSelector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feePercent\",\"type\":\"uint8\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topDog\",\"outputs\":[{\"internalType\":\"contract ITopDog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topDogPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userProxyImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersProxies\",\"outputs\":[{\"internalType\":\"contract WSSLPUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WrappedShibaSwapLp", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b46f8cf42e504efe8bef895f848741daa55e9f1d00000000000000000000000094235659cf8b805b2c658f9ea2d6d6ddbb17c8d70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b3e75687652d33d6f5cad5b113619641e4f6535b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}