{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IInterestRateStrategy {\\n    event SetMinBorrowTime(uint40 newTime);\\n\\n    event VariableRateUpdated(\\n        uint256 indexed reserveId,\\n        uint256 newBaseStableRate,\\n        uint256 newVariableSlope1,\\n        uint256 newVariableSlope2\\n    );\\n\\n    event StableRateUpdated(\\n        uint256 indexed reserveId,\\n        uint256 newBaseStableRate,\\n        uint256 newVariableSlope1,\\n        uint256 newVariableSlope2\\n    );\\n\\n    event AddNewRate(uint256 reserveId);\\n\\n    function getRate(uint256 reserveId)\\n        external\\n        view\\n        returns (DataTypes.Rate memory);\\n\\n    function getMaxVariableBorrowRate(uint256 reserveId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calculateInterestRates(\\n        uint256 reserveId,\\n        address reserve,\\n        address kToken,\\n        uint256 liquidityAdded,\\n        uint256 liquidityTaken,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function calculateInterestRates(\\n        DataTypes.Rate memory rate,\\n        uint256 availableLiquidity,\\n        uint256 totalStableDebt,\\n        uint256 totalVariableDebt,\\n        uint256 averageStableBorrowRate,\\n        uint256 reserveFactor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n    \\n    function setRate(\\n        uint256 reserveId,\\n        uint256 _optimalUtilizationRate,\\n        uint256 _baseVariableBorrowRate,\\n        uint256 _variableSlope1,\\n        uint256 _variableSlope2,\\n        uint256 _baseStableBorrowRate,\\n        uint256 _stableSlope1,\\n        uint256 _stableSlope2\\n    ) external;\\n\\n    function setVariableRate(\\n        uint256 reserveId,\\n        uint256 _baseVariableRate,\\n        uint256 _variableSlope1,\\n        uint256 _variableSlope2\\n    ) external;\\n\\n    function setStableRate(\\n        uint256 reserveId,\\n        uint256 _baseStableRate,\\n        uint256 _stableSlope1,\\n        uint256 _stableSlope2\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKyokoFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IKyokoFactory {\\n    event CreatePool(uint256 indexed blockNumber, address kToken, address variableDebtAddress, address stableDebtAddress);\\n    event CreateKToken(address indexed user, address kToken);\\n    event CreateVariableToken(address indexed user, address variableDebtAddress);\\n    event CreateStableToken(address indexed user, address stableDebtAddress);\\n    event FactorUpdate(uint16 factor);\\n    event InitilLiquidityUpdate(uint256 amount);\\n    event LiquidationThreshold(uint16 threshold);\\n    event LockTime(uint32 lockTime);\\n    event FactoryUpdate(address kToken, address debtToken);\\n\\n    function createPool(\\n        address _nftAddress\\n    ) external returns (address kTokenAddress, address variableDebtAddress, address stableDebtAddress);\\n\\n    function createSharedPool() external returns (address kTokenAddress, address variableDebtAddress, address stableDebtAddress);\\n\\n    function initReserve(\\n        address _nftAddress,\\n        uint40 _period,\\n        uint16 _ratio,\\n        uint24 _liqDuration,\\n        uint24 _bidDuration,\\n        bool _enabledStableBorrow,\\n        address kTokenAddress, \\n        address variableDebtAddress, \\n        address stableDebtAddress,\\n        DataTypes.RateStrategyInput memory _rateInput\\n    ) external payable;\\n\\n    function setFactor(uint16 _factor) external;\\n    function setInitialLiquidity(uint256 amount) external;\\n    function setLiqThreshold(uint16 threshold) external;\\n    function setLockTime(uint32 lockTime) external;\\n    function setTokenFactory(address _createKToken, address _createDebtToken) external;\\n    function switchOnly() external;\\n}\\n\\ninterface INFT {\\n    function symbol() external view returns (string memory);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IKyokoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IKyokoPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserveId The id of the reserve\\n     * @param user The beneficiary of the deposit, receiving the kTokens\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the kTokens\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        address indexed onBehalfOf,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserveId The id of the reserve\\n     * @param user The address initiating the withdrawal, owner of kTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        uint256 indexed reserveId,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserveId The id of the reserve\\n     * @param borrowId The id of the borrow info\\n     * @param asset The address of the borrowed nft\\n     * @param nftId The tokenId of the borrowed nft\\n     * @param borrowMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param amount The amount of the borrow\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     **/\\n    event Borrow(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed asset,\\n        uint256 nftId,\\n        uint256 borrowMode,\\n        uint256 amount,\\n        uint256 borrowRate\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserveId The id of the reserve\\n     * @param borrowId The id of the borrow info\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param nft The nft corresponding to repayment\\n     * @param nftId The tokenId of the borrowed nft\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address user,\\n        address indexed nft,\\n        uint256 nftId,\\n        uint256 amount\\n    );\\n\\n    event LiquidationCall(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed user,\\n        address nft,\\n        uint256 id,\\n        uint256 amount,\\n        uint256 time\\n    );\\n\\n    event BidCall(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 time\\n    );\\n\\n    event ClaimCall(\\n        uint256 indexed reserveId,\\n        uint256 indexed borrowId,\\n        address indexed user,\\n        uint256 time\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserveId The id of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        uint256 indexed reserveId,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when new stable debt is increased\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of nft\\n     * @param user The address of the user who triggered the minting\\n     * @param amount The amount minted\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The increase in balance since the last action of the user\\n     * @param newRate The rate of the debt after the minting\\n     * @param newTotalSupply The new total supply of the stable debt token after the action\\n     **/\\n    event StableDebtIncrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 newRate,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    /**\\n     * @dev Emitted when new stable debt is decreased\\n     * @param reserveId The id of the reserve\\n     * @param user The address of the user\\n     * @param amount The amount being burned\\n     * @param currentBalance The current balance of the user\\n     * @param balanceIncrease The the increase in balance since the last action of the user\\n     * @param avgStableRate The new average stable rate after the burning\\n     * @param newTotalSupply The new total supply of the stable debt token after the action\\n     **/\\n    event StableDebtDecrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 currentBalance,\\n        uint256 balanceIncrease,\\n        uint256 avgStableRate,\\n        uint256 newTotalSupply\\n    );\\n\\n    /**\\n     * @dev Emitted when new varibale debt is increased\\n     * @param reserveId The id of the reserve\\n     * @param asset The address performing the nft\\n     * @param user The address of the user on which behalf minting has been performed\\n     * @param value The amount to be minted\\n     * @param index The last index of the reserve\\n     **/\\n    event VariableDebtIncrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted when variable debt is decreased\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of the nft\\n     * @param user The user which debt has been burned\\n     * @param amount The amount of debt being burned\\n     * @param index The index of the user\\n     **/\\n    event VariableDebtDecrease(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 index\\n    );\\n\\n    event SetMinBorrowTime(uint40 time);\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying kTokens.\\n     * @param reserveId The id of the reserve\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the kTokens\\n     **/\\n    function deposit(uint256 reserveId, address onBehalfOf) external payable;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent kTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param reserveId The id of the reserve\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole kToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        uint256 reserveId,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow an estimate `amount` of the reserve underlying asset according to the value of the nft\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of the nft to be borrowed\\n     * @param nftId The tokenId of the nft to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address that will recieve the borrow asset and debt token (must be msg.sender or the msg.sender must be punkGateway)\\n     **/\\n    function borrow(\\n        uint256 reserveId,\\n        address asset,\\n        uint256 nftId,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve\\n     * @param borrowId The id of the borrow to repay\\n     * @param onBehalfOf The address that will burn the debt token (must be msg.sender or the msg.sender must be punkGateway)\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        uint256 borrowId,\\n        address onBehalfOf\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param reserveId The id of the reserve\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(\\n        uint256 reserveId,\\n        address user\\n    ) external;\\n\\n    /**\\n     * @dev Function to liquidate an expired borrow info.\\n     * @param borrowId The id of liquidate borrow target\\n     **/\\n    function liquidationCall(\\n        uint256 borrowId\\n    ) external payable;\\n\\n    /**\\n     * @dev Function to bid for the liquidate auction.\\n     * @param borrowId The id of liquidate borrow target\\n     **/\\n    function bidCall(uint256 borrowId) external payable;\\n\\n    /**\\n     * @dev Function to claim the liquidate NFT.\\n     * @param borrowId The id of liquidate borrow target\\n     **/\\n    function claimCall(uint256 borrowId) external;\\n\\n    function claimCall(\\n        uint256 borrowId,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @dev Returns the list of user's borrowId\\n     * @param user The address of the user\\n     **/\\n    function getUserBorrowList(\\n        address user\\n    ) external view returns (uint256[] memory borrowIds);\\n\\n    /**\\n     * @dev Returns the list of borrowId in auction\\n     **/\\n    function getAuctions() external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns the list of user's borrowId\\n     * @param borrowId The id of the borrow info\\n     **/\\n    function getDebt(uint256 borrowId) external view returns (uint256 debt);\\n\\n    function getInitialLockTime(\\n        uint256 reserveId\\n    ) external view returns (uint256);\\n\\n    function enabledLiquidation(uint256 borrowId) external view returns (bool);\\n\\n    function initReserve(\\n        address asset,\\n        address kTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function updateReserveNFT(\\n        uint256 reserveId,\\n        address asset,\\n        bool flag\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(\\n        uint256 reserveId,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    function burnLiquidity(uint256 reserveId, uint256 amount) external;\\n\\n    function setConfiguration(\\n        uint256 reserveId,\\n        uint256 configuration\\n    ) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param reserveId The id of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(\\n        uint256 reserveId\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param reserveId The id of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        uint256 reserveId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param reserveId The id of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        uint256 reserveId\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param reserveId The id of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(\\n        uint256 reserveId\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function getBorrowInfo(\\n        uint256 borrowId\\n    ) external view returns (DataTypes.BorrowInfo memory);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n\\n    function getReservesCount() external view returns (uint256);\\n}\\n\\ninterface IPriceOracle {\\n    function getPrice(address _nft) external returns (int);\\n\\n    function getPrice_view(address _nft) external view returns (int);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKyokoPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Kyoko Governance\\n * @author Kyoko\\n **/\\ninterface IKyokoPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event KyokoPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event KyokoPoolLiquidatorUpdated(address indexed newAddress);\\n    event KyokoPoolConfiguratorUpdated(address indexed newAddress);\\n    event KyokoPoolFactoryUpdated(address indexed newAddress);\\n    event RateStrategyUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress);\\n    event AddressRevoke(bytes32 id, address indexed oldAddress);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function revokeAddress(bytes32 id, address oldAddress) external;\\n\\n    function getAddress(bytes32 id) external view returns (address[] memory);\\n\\n    function hasRole(bytes32 id, address account) external view returns (bool);\\n\\n    function getKyokoPool() external view returns (address[] memory);\\n\\n    function isKyokoPool(address account) external view returns (bool);\\n\\n    function setKyokoPool(address pool) external;\\n\\n    function getKyokoPoolLiquidator() external view returns (address[] memory);\\n    \\n    function isLiquidator(address account) external view returns (bool);\\n\\n    function setKyokoPoolLiquidator(address liquidator) external;\\n\\n    function getKyokoPoolConfigurator() external view returns (address[] memory);\\n    \\n    function isConfigurator(address account) external view returns (bool);\\n\\n    function setKyokoPoolConfigurator(address configurator) external;\\n\\n    function getKyokoPoolFactory() external view returns (address[] memory);\\n    \\n    function isFactory(address account) external view returns (bool);\\n\\n    function setKyokoPoolFactory(address factory) external;\\n\\n    function getPoolAdmin() external view returns (address[] memory);\\n    \\n    function isAdmin(address account) external view returns (bool);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address[] memory);\\n    \\n    function isEmergencyAdmin(address account) external view returns (bool);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address[] memory);\\n\\n    function isOracle(address account) external view returns (bool);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getRateStrategy() external view returns (address[] memory);\\n\\n    function isStrategy(address account) external view returns (bool);\\n\\n    function setRateStrategy(address rateStrategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKyokoPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../libraries/utils/DataTypes.sol\\\";\\n\\ninterface IKyokoPoolConfigurator {\\n    /**\\n     * @dev Emitted when a reserve is initialized.\\n     * @param reserveId The id of the reserve\\n     * @param asset The address of the underlying nft asset of the reserve\\n     * @param kToken The address of the associated kToken contract\\n     * @param stableDebtToken The address of the associated stable rate debt token\\n     * @param variableDebtToken The address of the associated variable rate debt token\\n     * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n     **/\\n    event ReserveInitialized(\\n        uint256 indexed reserveId,\\n        address indexed asset,\\n        address indexed kToken,\\n        address stableDebtToken,\\n        address variableDebtToken,\\n        address interestRateStrategyAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve is activated\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveActivated(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve is deactivated\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveDeactivated(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve is frozen\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveFrozen(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve is unfrozen\\n     * @param reserveId The id of the reserve\\n     **/\\n    event ReserveUnfrozen(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve factor is updated\\n     * @param reserveId The id of the reserve\\n     * @param factor The new reserve factor\\n     **/\\n    event ReserveFactorChanged(uint256 indexed reserveId, uint256 factor);\\n\\n    /**\\n     * @dev Emitted when a borrow ratio is updated\\n     * @param reserveId The id of the reserve\\n     * @param ratio The new borrow ratio\\n     **/\\n    event ReserveBorrowRatioChanged(uint256 indexed reserveId, uint256 ratio);\\n\\n    /**\\n     * @dev Emitted when a fixed borrow perdio is updated\\n     * @param reserveId The id of the reserve\\n     * @param period The new fixed borrow period\\n     **/\\n    event ReservePeriodChanged(uint256 indexed reserveId, uint256 period);\\n\\n    /**\\n     * @dev Emitted when a fixed borrow perdio is updated\\n     * @param reserveId The id of the reserve\\n     * @param time The new minimum borrow time\\n     **/\\n    event ReserveMinBorrowTimeChanged(uint256 indexed reserveId, uint256 time);\\n\\n    /**\\n     * @dev Emitted when borrowing is enabled on a reserve\\n     * @param reserveId The id of the reserve\\n     * @param stableRateEnabled True if stable rate borrowing is enabled, false otherwise\\n     **/\\n    event BorrowingEnabledOnReserve(\\n        uint256 indexed reserveId,\\n        bool stableRateEnabled\\n    );\\n\\n    /**\\n     * @dev Emitted when borrowing is disabled on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    event BorrowingDisabledOnReserve(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when stable rate borrowing is enabled on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    event StableRateEnabledOnReserve(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when stable rate borrowing is disabled on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    event StableRateDisabledOnReserve(uint256 indexed reserveId);\\n\\n    /**\\n     * @dev Emitted when a reserve liquidation threshold is updated\\n     * @param reserveId The id of the reserve\\n     * @param threshold The new liquidation threshold of the reserve\\n     **/\\n    event ReserveLiquidationThresholdChanged(\\n        uint256 indexed reserveId,\\n        uint256 threshold\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve liquidation duration is updated\\n     * @param reserveId The id of the reserve\\n     * @param duration The duration of the liquidation\\n     **/\\n    event ReserveLiquidationDurationChanged(\\n        uint256 indexed reserveId,\\n        uint256 duration\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve bid duration is updated\\n     * @param reserveId The id of the reserve\\n     * @param duration The duration of each auction\\n     **/\\n    event ReserveBidDurationChanged(\\n        uint256 indexed reserveId,\\n        uint256 duration\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve initial liquidity lock time is updated\\n     * @param reserveId The id of the reserve\\n     * @param lockTime The lock time\\n     **/\\n    event ReserveLockTimeChanged(uint256 indexed reserveId, uint256 lockTime);\\n\\n    /**\\n     * @dev Emitted when a reserve type is updated\\n     * @param reserveId The id of the reserve\\n     * @param reserveType The reserve type\\n     **/\\n    event ReserveTypeChanged(uint256 indexed reserveId, uint256 reserveType);\\n\\n    /**\\n     * @dev Emitted when a reserve initial liquidity is burned\\n     * @param reserveId The id of the reserve\\n     * @param amount The burned amount\\n     **/\\n    event ReserveInitialLiquidityBurned(\\n        uint256 indexed reserveId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve interest strategy contract is updated\\n     * @param reserveId The id of the reserve\\n     * @param strategy The new address of the interest strategy contract\\n     **/\\n    event ReserveInterestRateStrategyChanged(\\n        uint256 indexed reserveId,\\n        address strategy\\n    );\\n\\n    /**\\n     * @dev Emitted when an kToken implementation is upgraded\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The kToken proxy address\\n     * @param implementation The new kToken implementation\\n     **/\\n    event kTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of a stable debt token is upgraded\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The stable debt token proxy address\\n     * @param implementation The new kToken implementation\\n     **/\\n    event StableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of a variable debt token is upgraded\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The variable debt token proxy address\\n     * @param implementation The new kToken implementation\\n     **/\\n    event VariableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    function factoryInitReserve(\\n        DataTypes.InitReserveInput memory input,\\n        DataTypes.RateStrategyInput memory rateInput\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n\\n  function balanceOf(address user) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/KyokoPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./libraries/logic/ReserveConfiguration.sol\\\";\\nimport \\\"./libraries/utils/DataTypes.sol\\\";\\nimport \\\"./libraries/utils/PercentageMath.sol\\\";\\nimport \\\"./libraries/utils/Errors.sol\\\";\\nimport \\\"./interfaces/IKyokoPool.sol\\\";\\nimport \\\"./interfaces/IKyokoFactory.sol\\\";\\nimport \\\"./interfaces/IKyokoPoolAddressesProvider.sol\\\";\\nimport \\\"./interfaces/IKyokoPoolConfigurator.sol\\\";\\nimport \\\"./interfaces/IInterestRateStrategy.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title KyokoPoolConfigurator contract\\n * @author Kyoko\\n * @dev Implements the configuration methods for the Kyoko protocol\\n **/\\n\\ncontract KyokoPoolConfigurator is IKyokoPoolConfigurator, ContextUpgradeable {\\n    using PercentageMath for uint256;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    IKyokoPoolAddressesProvider internal _addressesProvider;\\n    IKyokoPool internal _pool;\\n    IWETH internal WETH;\\n    IKyokoFactory internal _factory;\\n    IInterestRateStrategy internal _rate;\\n\\n    modifier onlyPoolAdmin() {\\n        require(\\n            _addressesProvider.isAdmin(_msgSender()),\\n            Errors.CALLER_NOT_POOL_ADMIN\\n        );\\n        _;\\n    }\\n\\n    modifier onlyEmergencyAdmin() {\\n        require(\\n            _addressesProvider.isEmergencyAdmin(_msgSender()),\\n            Errors.KPC_CALLER_NOT_EMERGENCY_ADMIN\\n        );\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(\\n            _addressesProvider.isFactory(_msgSender()),\\n            Errors.KPC_CALLER_NOT_EMERGENCY_ADMIN\\n        );\\n        _;\\n    }\\n\\n    uint256 internal constant CONFIGURATOR_REVISION = 0x1;\\n\\n    function initialize(IKyokoPoolAddressesProvider provider, address weth)\\n        public\\n        initializer\\n    {\\n        _addressesProvider = provider;\\n        WETH = IWETH(weth);\\n        _pool = IKyokoPool(_addressesProvider.getKyokoPool()[0]);\\n        _rate = IInterestRateStrategy(_addressesProvider.getRateStrategy()[0]);\\n        _factory = IKyokoFactory(_addressesProvider.getKyokoPoolFactory()[0]);\\n    }\\n\\n    function updatePool() external onlyPoolAdmin {\\n        _pool = IKyokoPool(_addressesProvider.getKyokoPool()[0]);\\n    }\\n\\n    function updateRate() external onlyPoolAdmin {\\n        _rate = IInterestRateStrategy(_addressesProvider.getRateStrategy()[0]);\\n    }\\n\\n    function updateFactory() external onlyPoolAdmin {\\n        _factory = IKyokoFactory(_addressesProvider.getKyokoPoolFactory()[0]);\\n    }\\n\\n    /**\\n     * @dev Initializes reserves in batch\\n     **/\\n    function batchInitReserve(\\n        DataTypes.InitReserveInput[] memory input,\\n        DataTypes.RateStrategyInput[] memory rateInput\\n    ) external onlyPoolAdmin {\\n        IKyokoPool cachedPool = _pool;\\n        IInterestRateStrategy cachedRate = _rate;\\n        for (uint256 i = 0; i < input.length; i++) {\\n            _initReserve(cachedPool, input[i]);\\n            _initRate(cachedRate, rateInput[i]);\\n        }\\n    }\\n\\n    function factoryInitReserve(\\n        DataTypes.InitReserveInput memory input,\\n        DataTypes.RateStrategyInput memory rateInput\\n    ) external override onlyFactory {\\n        IKyokoPool cachedPool = _pool;\\n        IInterestRateStrategy cachedRate = _rate;\\n        _initReserve(cachedPool, input);\\n        _initRate(cachedRate, rateInput);\\n    }\\n\\n    function _initReserve(\\n        IKyokoPool pool,\\n        DataTypes.InitReserveInput memory input\\n    ) internal {\\n        pool.initReserve(\\n            input.underlyingAsset,\\n            input.kTokenImpl,\\n            input.stableDebtTokenImpl,\\n            input.variableDebtTokenImpl,\\n            input.interestRateStrategyAddress\\n        );\\n\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(input.reserveId);\\n\\n        currentConfig.setReserveFactor(input.factor);\\n\\n        currentConfig.setBorrowRatio(input.borrowRatio);\\n\\n        currentConfig.setPeriod(input.period);\\n\\n        currentConfig.setMinBorrowTime(input.minBorrowTime);\\n\\n        currentConfig.setActive(true);\\n        currentConfig.setFrozen(false);\\n        currentConfig.setBorrowingEnabled(true);\\n        currentConfig.setStableRateBorrowingEnabled(input.stableBorrowed);\\n\\n        currentConfig.setLiquidationThreshold(input.liqThreshold);\\n        currentConfig.setLiquidationTime(input.liqDuration);\\n        currentConfig.setBidTime(input.bidDuration);\\n        currentConfig.setLockTime(input.lockTime);\\n\\n        _pool.setConfiguration(input.reserveId, currentConfig.data);\\n\\n        emit ReserveInitialized(\\n            input.reserveId,\\n            input.underlyingAsset,\\n            input.kTokenImpl,\\n            input.stableDebtTokenImpl,\\n            input.variableDebtTokenImpl,\\n            input.interestRateStrategyAddress\\n        );\\n    }\\n\\n    function _initRate(\\n        IInterestRateStrategy rate,\\n        DataTypes.RateStrategyInput memory input\\n    ) internal {\\n        rate.setRate(\\n            input.reserveId,\\n            input.optimalUtilizationRate,\\n            input.baseVariableBorrowRate,\\n            input.variableSlope1,\\n            input.variableSlope2,\\n            input.baseStableBorrowRate,\\n            input.stableSlope1,\\n            input.stableSlope2\\n        );\\n    }\\n\\n    /**\\n     * @dev Activates a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    function activateReserve(uint256 reserveId) external onlyPoolAdmin {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setActive(true);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReserveActivated(reserveId);\\n    }\\n\\n    /**\\n     * @dev Deactivates a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    function deactivateReserve(uint256 reserveId) external onlyPoolAdmin {\\n        _checkNoLiquidity(reserveId);\\n\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setActive(false);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReserveDeactivated(reserveId);\\n    }\\n\\n    /**\\n     * @dev Freezes a reserve. A frozen reserve doesn't allow any new deposit, borrow\\n     *  but allows repayments, liquidations, rate rebalances and withdrawals\\n     * @param reserveId The id of the reserve\\n     **/\\n    function freezeReserve(uint256 reserveId) external onlyPoolAdmin {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setFrozen(true);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReserveFrozen(reserveId);\\n    }\\n\\n    /**\\n     * @dev Unfreezes a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    function unfreezeReserve(uint256 reserveId) external onlyPoolAdmin {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setFrozen(false);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReserveUnfrozen(reserveId);\\n    }\\n\\n    /**\\n     * @dev Updates the reserve factor of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param reserveFactor The new reserve factor of the reserve\\n     **/\\n    function setReserveFactor(uint256 reserveId, uint256 reserveFactor)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setReserveFactor(reserveFactor);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReserveFactorChanged(reserveId, reserveFactor);\\n    }\\n\\n    /**\\n     * @dev Updates the borrow ratio of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param ratio The new borrow ratio of the reserve\\n     **/\\n    function setBorrowRatio(uint256 reserveId, uint256 ratio)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setBorrowRatio(ratio);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReserveBorrowRatioChanged(reserveId, ratio);\\n    }\\n\\n    /**\\n     * @dev Updates the borrow ratio of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param period The new fixed borrow period of the reserve\\n     **/\\n    function setPeriod(uint256 reserveId, uint256 period)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setPeriod(period);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReservePeriodChanged(reserveId, period);\\n    }\\n\\n    /**\\n     * @dev Updates the borrow ratio of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param time The new minimum borrow time\\n     **/\\n    function setMinBorrowTime(uint256 reserveId, uint256 time)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setMinBorrowTime(time);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit ReserveMinBorrowTimeChanged(reserveId, time);\\n    }\\n\\n    /**\\n     * @dev Enables borrowing on a reserve\\n     * @param reserveId The id of the reserve\\n     * @param stableBorrowRateEnabled True if stable borrow rate needs to be enabled by default on this reserve\\n     **/\\n    function enableBorrowingOnReserve(\\n        uint256 reserveId,\\n        bool stableBorrowRateEnabled\\n    ) external onlyPoolAdmin {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setBorrowingEnabled(true);\\n        currentConfig.setStableRateBorrowingEnabled(stableBorrowRateEnabled);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit BorrowingEnabledOnReserve(reserveId, stableBorrowRateEnabled);\\n    }\\n\\n    /**\\n     * @dev Disables borrowing on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    function disableBorrowingOnReserve(uint256 reserveId)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setBorrowingEnabled(false);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n        emit BorrowingDisabledOnReserve(reserveId);\\n    }\\n\\n    /**\\n     * @dev Enable stable rate borrowing on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    function enableReserveStableRate(uint256 reserveId) external onlyPoolAdmin {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setStableRateBorrowingEnabled(true);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit StableRateEnabledOnReserve(reserveId);\\n    }\\n\\n    /**\\n     * @dev Disable stable rate borrowing on a reserve\\n     * @param reserveId The id of the reserve\\n     **/\\n    function disableReserveStableRate(uint256 reserveId)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n\\n        currentConfig.setStableRateBorrowingEnabled(false);\\n\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n\\n        emit StableRateDisabledOnReserve(reserveId);\\n    }\\n\\n    /**\\n     * @dev Sets the liquidation threshold of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param threshold The new liquidation threshold of the reserve\\n     **/\\n    function setLiquidationThreshold(uint256 reserveId, uint256 threshold)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n        currentConfig.setLiquidationThreshold(threshold);\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n        emit ReserveLiquidationThresholdChanged(reserveId, threshold);\\n    }\\n\\n    /**\\n     * @dev Sets the liquidation duration of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param duration The new liquidation duration of the reserve\\n     **/\\n    function setLiquidationDuration(uint256 reserveId, uint256 duration)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n        currentConfig.setLiquidationTime(duration);\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n        emit ReserveLiquidationDurationChanged(reserveId, duration);\\n    }\\n\\n    /**\\n     * @dev Sets the bid duration of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param duration The new bid duration of the reserve\\n     **/\\n    function setBidDuration(uint256 reserveId, uint256 duration)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n        currentConfig.setBidTime(duration);\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n        emit ReserveBidDurationChanged(reserveId, duration);\\n    }\\n\\n    /**\\n     * @dev Sets the lock time of initial liquidity\\n     * @param reserveId The id of the reserve\\n     * @param lockTime The new lock time\\n     **/\\n    function setLockTime(uint256 reserveId, uint256 lockTime)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n        currentConfig.setLockTime(lockTime);\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n        emit ReserveLockTimeChanged(reserveId, lockTime);\\n    }\\n\\n    /**\\n     * @dev Sets the type of reserve, 0 for perimissionless poo, 1 for blue chip, others for middle pool\\n     * @param reserveId The id of the reserve\\n     * @param reserveType The new reserve type\\n     **/\\n    function setType(uint256 reserveId, uint256 reserveType)\\n        external\\n        onlyPoolAdmin\\n    {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(reserveId);\\n        currentConfig.setType(reserveType);\\n        _pool.setConfiguration(reserveId, currentConfig.data);\\n        emit ReserveTypeChanged(reserveId, reserveType);\\n    }\\n\\n    /**\\n     * @dev Sets the interest rate strategy of a reserve\\n     * @param reserveId The id of the reserve\\n     * @param rateStrategyAddress The new address of the interest strategy contract\\n     **/\\n    function setReserveInterestRateStrategyAddress(\\n        uint256 reserveId,\\n        address rateStrategyAddress\\n    ) external onlyPoolAdmin {\\n        _pool.setReserveInterestRateStrategyAddress(\\n            reserveId,\\n            rateStrategyAddress\\n        );\\n        emit ReserveInterestRateStrategyChanged(reserveId, rateStrategyAddress);\\n    }\\n\\n    /**\\n     * @dev pauses or unpauses all the actions of the protocol, including kToken transfers\\n     * @param val true if protocol needs to be paused, false otherwise\\n     **/\\n    function setPoolPause(bool val) external onlyEmergencyAdmin {\\n        _pool.setPause(val);\\n    }\\n\\n    function updateNFT(\\n        uint256 reserveId,\\n        address asset,\\n        bool flag\\n    ) external onlyPoolAdmin {\\n        _pool.updateReserveNFT(reserveId, asset, flag);\\n    }\\n\\n    function setKyokoFactoryFactor(uint16 factor) external onlyPoolAdmin {\\n        _factory.setFactor(factor);\\n    }\\n\\n    function setKyokoFactoryInitialLiquidity(uint256 amount)\\n        external\\n        onlyPoolAdmin\\n    {\\n        _factory.setInitialLiquidity(amount);\\n    }\\n\\n    function setKyokoFactoryLiquidationThreshold(uint16 threshold)\\n        external\\n        onlyPoolAdmin\\n    {\\n        _factory.setLiqThreshold(threshold);\\n    }\\n\\n    function setKyokoFactoryLockTime(uint32 lockTime) external onlyPoolAdmin {\\n        _factory.setLockTime(lockTime);\\n    }\\n\\n    function setTokenFactory(address createKToken, address createDebtToken)\\n        external\\n        onlyPoolAdmin\\n    {\\n        _factory.setTokenFactory(createKToken, createDebtToken);\\n    }\\n\\n    function setVariableRate(\\n        uint256 reserveId,\\n        uint256 _baseVariableRate,\\n        uint256 _variableSlope1,\\n        uint256 _variableSlope2\\n    ) external onlyPoolAdmin {\\n        IInterestRateStrategy rate = _rate;\\n        rate.setVariableRate(\\n            reserveId,\\n            _baseVariableRate,\\n            _variableSlope1,\\n            _variableSlope2\\n        );\\n    }\\n\\n    function setStableRate(\\n        uint256 reserveId,\\n        uint256 _baseStableRate,\\n        uint256 _stableSlope1,\\n        uint256 _stableSlope2\\n    ) external onlyPoolAdmin {\\n        IInterestRateStrategy rate = _rate;\\n        rate.setStableRate(\\n            reserveId,\\n            _baseStableRate,\\n            _stableSlope1,\\n            _stableSlope2\\n        );\\n    }\\n\\n    function _checkNoLiquidity(uint256 reserveId) internal view {\\n        DataTypes.ReserveData memory reserveData = _pool.getReserveData(\\n            reserveId\\n        );\\n        address kToken = reserveData.kTokenAddress;\\n        uint256 availableLiquidity = IERC20Upgradeable(address(WETH)).balanceOf(\\n            kToken\\n        );\\n\\n        require(\\n            availableLiquidity == 0 && reserveData.currentLiquidityRate == 0,\\n            Errors.KPC_RESERVE_LIQUIDITY_NOT_0\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/logic/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"../utils/Errors.sol\\\";\\nimport \\\"../utils/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Kyoko\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n    uint256 constant RESERVE_FACTOR_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant BORROW_RATIO_MASK =                         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n    uint256 constant PERIOD_MASK =                               0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FFFFFFFF; // prettier-ignore\\n    uint256 constant MIN_BORROW_TIME_MASK =                      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000000000FFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK =                               0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant LIQUIDATION_THRESHOLD_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0001FFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_MASK =                            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant STABLE_BORROWING_MASK =                     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant LIQUIDATION_TIME_MASK =                     0xFFFFFFFFFFFFFFFFFFFFFFFFF8000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant BID_TIME_MASK =                             0xFFFFFFFFFFFFFFFFFFF8000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK =                               0xFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant LOCK_MASK =                                 0xFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant TYPE_MASK =                                 0xFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    /// @dev For the factor, the start bit is 0 (up to 15), hence no bitshifting is needed\\n    uint256 constant BORROW_RATIO_START_BIT_POSITION = 16;\\n    uint256 constant PERIOD_START_BIT_POSITION = 32;\\n    uint256 constant MIN_BORROW_TIME_START_BIT_POSITION = 72;\\n    uint256 constant IS_ACTIVE_START_BIT_POSITION = 112;\\n    uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 113;\\n    uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 129;\\n    uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 130;\\n    uint256 constant LIQUIDATION_TIME_START_BIT_POSITION = 131;\\n    uint256 constant BID_TIME_START_BIT_POSITION = 155;\\n    uint256 constant IS_FROZEN_START_BIT_POSITION = 179;\\n    uint256 constant LOCK_START_BIT_POSITION = 180;\\n    uint256 constant TYPE_START_BIT_POSITION = 212;\\n\\n    uint256 constant MAX_VALID_RESERVE_FACTOR = 10000;\\n    uint256 constant MAX_VALID_BORROW_RATIO = 10000;\\n    uint256 constant MAX_VALID_PERIOD = 30 days;\\n    uint256 constant MAX_VALID_MIN_BORROW_TIME = 15 days;\\n    uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n    uint256 constant MAX_VALID_LIQUIDATION_TIME = 30 days;\\n    uint256 constant MAX_VALID_BID_TIME = 15 days;\\n\\n    /**\\n     * @dev Sets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @param reserveFactor The reserve factor\\n     **/\\n    function setReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveFactor\\n    ) internal pure {\\n        require(\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n            Errors.RC_INVALID_RESERVE_FACTOR\\n        );\\n\\n        self.data = (self.data & RESERVE_FACTOR_MASK) | reserveFactor;\\n    }\\n\\n    /**\\n     * @dev Gets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @return The reserve factor\\n     **/\\n    function getReserveFactor(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return self.data & ~RESERVE_FACTOR_MASK;\\n    }\\n\\n    /**\\n     * @dev Sets the borrow ratio of the reserve\\n     * @param self The reserve configuration\\n     * @param ratio The new borrow ratio\\n     **/\\n    function setBorrowRatio(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ratio\\n    ) internal pure {\\n        require(\\n            ratio <= MAX_VALID_BORROW_RATIO,\\n            Errors.RC_INVALID_BORROW_RATIO\\n        );\\n\\n        self.data =\\n            (self.data & BORROW_RATIO_MASK) |\\n            (ratio << BORROW_RATIO_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the borrow ratio of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrow ratio\\n     **/\\n    function getBorrowRatio(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~BORROW_RATIO_MASK) >> BORROW_RATIO_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the fixed borrow period of the reserve\\n     * @param self The reserve configuration\\n     * @param period The new period\\n     **/\\n    function setPeriod(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 period\\n    ) internal pure {\\n        require(period <= MAX_VALID_PERIOD, Errors.RC_INVALID_PERIOD);\\n\\n        self.data =\\n            (self.data & PERIOD_MASK) |\\n            (period << PERIOD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the fixed borrow period of the reserve\\n     * @param self The reserve configuration\\n     * @return The fixed borrow period\\n     **/\\n    function getPeriod(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return (self.data & ~PERIOD_MASK) >> PERIOD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the miniumn borrow time of the reserve\\n     * @param self The reserve configuration\\n     * @param time The new minimum borrow time\\n     **/\\n    function setMinBorrowTime(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 time\\n    ) internal pure {\\n        require(\\n            time <= MAX_VALID_MIN_BORROW_TIME,\\n            Errors.RC_INVALID_MIN_BORROW_TIME\\n        );\\n\\n        self.data =\\n            (self.data & MIN_BORROW_TIME_MASK) |\\n            (time << MIN_BORROW_TIME_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the miniumn borrow time of the reserve\\n     * @param self The reserve configuration\\n     * @return The minimum borrow time\\n     **/\\n    function getMinBorrowTime(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~MIN_BORROW_TIME_MASK) >>\\n            MIN_BORROW_TIME_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @return The active state\\n     **/\\n    function getActive(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool) {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @param threshold The new liquidation threshold\\n     **/\\n    function setLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 threshold\\n    ) internal pure {\\n        require(\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n            Errors.RC_INVALID_LIQ_THRESHOLD\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation threshold\\n     **/\\n    function getLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Enables or disables borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\n     **/\\n    function setBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrowing state\\n     **/\\n    function getBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool) {\\n        return (self.data & ~BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Enables or disables stable rate borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n     **/\\n    function setStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & STABLE_BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) <<\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the stable rate borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The stable rate borrowing state\\n     **/\\n    function getStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool) {\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the liquidation duration of the reserve\\n     * @param self The reserve configuration\\n     * @param time The new liquidation duration\\n     **/\\n    function setLiquidationTime(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 time\\n    ) internal pure {\\n        require(time <= MAX_VALID_LIQUIDATION_TIME, Errors.RC_INVALID_LIQ_TIME);\\n\\n        self.data =\\n            (self.data & LIQUIDATION_TIME_MASK) |\\n            (time << LIQUIDATION_TIME_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation duration of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation duration\\n     **/\\n    function getLiquidationTime(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_TIME_MASK) >>\\n            LIQUIDATION_TIME_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the effective time of auction\\n     * @param self The reserve configuration\\n     * @param time The new auction duration\\n     **/\\n    function setBidTime(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 time\\n    ) internal pure {\\n        require(time <= MAX_VALID_BID_TIME, Errors.RC_INVALID_BID_TIME);\\n\\n        self.data =\\n            (self.data & BID_TIME_MASK) |\\n            (time << BID_TIME_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the effective time of auction\\n     * @param self The reserve configuration\\n     * @return The effective time of auction\\n     **/\\n    function getBidTime(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return (self.data & ~BID_TIME_MASK) >> BID_TIME_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @param frozen The frozen state\\n     **/\\n    function setFrozen(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool frozen\\n    ) internal pure {\\n        self.data =\\n            (self.data & FROZEN_MASK) |\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @return The frozen state\\n     **/\\n    function getFrozen(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool) {\\n        return (self.data & ~FROZEN_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the initial liquidity lock time of reserve\\n     * @param self The reserve configuration\\n     * @param lockTime The new lock\\n     **/\\n    function setLockTime(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 lockTime\\n    ) internal pure {\\n        self.data =\\n            (self.data & LOCK_MASK) |\\n            (lockTime << LOCK_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the lock time of initial liquidity\\n     * @param self The reserve configuration\\n     * @return The lock time of initial liquidity\\n     **/\\n    function getLockTime(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return (self.data & ~LOCK_MASK) >> LOCK_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the type of reserve, 0 for perimissionless poo, 1 for blue chip, others for middle pool\\n     * @param self The reserve configuration\\n     * @param reserveType The new type\\n     **/\\n    function setType(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveType\\n    ) internal pure {\\n        self.data =\\n            (self.data & TYPE_MASK) |\\n            (reserveType << TYPE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the type of reserve, 0 for perimissionless poo, 1 for blue chip, others for middle pool\\n     * @param self The reserve configuration\\n     * @return The type of reserve\\n     **/\\n    function getType(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return (self.data & ~TYPE_MASK) >> TYPE_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n     **/\\n    function getFlags(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool, bool, bool, bool) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_MASK) != 0,\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the configuration paramters of the reserve\\n     * @param self The reserve configuration\\n     * @return The state params representing factor, borrow ratio, minimum borrow time, liquidation threshold, liquidation duration, auction duration, lock time, reserve type\\n     **/\\n    function getParams(\\n        DataTypes.ReserveConfigurationMap storage self\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            dataLocal & ~RESERVE_FACTOR_MASK,\\n            (dataLocal & ~BORROW_RATIO_MASK) >> BORROW_RATIO_START_BIT_POSITION,\\n            (dataLocal & ~PERIOD_MASK) >> PERIOD_START_BIT_POSITION,\\n            (dataLocal & ~MIN_BORROW_TIME_MASK) >>\\n                MIN_BORROW_TIME_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_TIME_MASK) >>\\n                LIQUIDATION_TIME_START_BIT_POSITION,\\n            (dataLocal & ~BID_TIME_MASK) >> BID_TIME_START_BIT_POSITION,\\n            (dataLocal & ~LOCK_MASK) >> LOCK_START_BIT_POSITION,\\n            (dataLocal & ~TYPE_MASK) >> TYPE_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the configuration paramters of the reserve from a memory object\\n     * @param self The reserve configuration\\n     * @return The state params representing factor, borrow ratio, minimum borrow time, liquidation threshold, liquidation duration, auction duration, lock time, reserve type\\n     **/\\n    function getParamsMemory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 localData = self.data;\\n        return (\\n            localData & ~RESERVE_FACTOR_MASK,\\n            (localData & ~BORROW_RATIO_MASK) >> BORROW_RATIO_START_BIT_POSITION,\\n            (localData & ~PERIOD_MASK) >> PERIOD_START_BIT_POSITION,\\n            (localData & ~MIN_BORROW_TIME_MASK) >>\\n                MIN_BORROW_TIME_START_BIT_POSITION,\\n            (localData & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (localData & ~LIQUIDATION_TIME_MASK) >>\\n                LIQUIDATION_TIME_START_BIT_POSITION,\\n            (localData & ~BID_TIME_MASK) >> BID_TIME_START_BIT_POSITION,\\n            (localData & ~LOCK_MASK) >> LOCK_START_BIT_POSITION,\\n            (localData & ~TYPE_MASK) >> TYPE_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the configuration flags of the reserve from a memory object\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n     **/\\n    function getFlagsMemory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool, bool, bool, bool) {\\n        return (\\n            (self.data & ~ACTIVE_MASK) != 0,\\n            (self.data & ~FROZEN_MASK) != 0,\\n            (self.data & ~BORROWING_MASK) != 0,\\n            (self.data & ~STABLE_BORROWING_MASK) != 0\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        // variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        // the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address kTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint256 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        // bit 0-15: factor\\n        // bit 16-31: borrow ratio\\n        // bit 32-71: period\\n        // bit 72-111: min borrow time\\n        // bit 112: reserve is active\\n        // bit 113-128: Liq. threshold\\n        // bit 129: borrowing is enabled\\n        // bit 130: stable rate borrowing enabled\\n        // bit 131-154: liquidation duration\\n        // bit 155-178: auction duration\\n        // bit 179: reserve is frozen\\n        // bit 180-211: initial liquidity lock period\\n        // bit 212-219: reserve type\\n        uint256 data;\\n    }\\n\\n    struct Request {\\n        address user;\\n        address nft;\\n        uint256 id;\\n        InterestRateMode rateMode;\\n        uint256 reserveId;\\n    }\\n\\n    enum Status {\\n        BORROW,\\n        REPAY,\\n        AUCTION,\\n        WITHDRAW\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct BorrowInfo {\\n        uint256 reserveId;\\n        address nft;\\n        uint256 nftId;\\n        address user;\\n        uint64 startTime;\\n        uint256 principal;\\n        uint256 borrowId;\\n        uint64 liquidateTime;\\n        Status status;\\n        InterestRateMode rateMode;\\n    }\\n\\n    struct Auction {\\n        // ID for the Noun (ERC721 token ID)\\n        uint256 borrowId;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The time that the auction started\\n        uint256 startTime;\\n        // The time that the auction is scheduled to end\\n        uint256 endTime;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // Whether or not the auction has been settled\\n        bool settled;\\n    }\\n\\n    struct InitReserveInput {\\n        uint256 reserveId;\\n        address kTokenImpl;\\n        address stableDebtTokenImpl;\\n        address variableDebtTokenImpl;\\n        address interestRateStrategyAddress;\\n        address underlyingAsset;\\n        address treasury;\\n        uint16 factor;\\n        uint16 borrowRatio;\\n        uint40 period;\\n        uint40 minBorrowTime;\\n        uint16 liqThreshold;\\n        uint24 liqDuration;\\n        uint24 bidDuration;\\n        uint32 lockTime;\\n        bool stableBorrowed;\\n    }\\n\\n    struct RateStrategyInput {\\n        uint256 reserveId;\\n        uint256 optimalUtilizationRate;\\n        uint256 baseVariableBorrowRate;\\n        uint256 variableSlope1;\\n        uint256 variableSlope2;\\n        uint256 baseStableBorrowRate;\\n        uint256 stableSlope1;\\n        uint256 stableSlope2;\\n    }\\n    \\n    struct Rate {\\n        /**\\n         * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n         * Expressed in ray\\n         **/\\n        uint256 optimalUtilizationRate;\\n        /**\\n         * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\\n         * 1-optimal utilization rate. Added as a constant here for gas optimizations.\\n         * Expressed in ray\\n         **/\\n        uint256 excessUtilizationRate;\\n        // Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint256 baseVariableBorrowRate;\\n        // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope1;\\n        // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 variableRateSlope2;\\n        // Base stable borrow rate when Utilization rate = 0. Expressed in ray\\n        uint256 baseStableBorrowRate;\\n        // Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 stableRateSlope1;\\n        // Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n        uint256 stableRateSlope2;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\n/**\\n * @title Errors library\\n * @author Kyoko\\n * @notice Defines the error messages emitted by the different contracts of the Kyoko protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (KToken, VariableDebtToken and StableDebtToken)\\n *  - KT = KToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - KP = KyokoPool\\n *  - KF = KyokoFactory\\n *  - KPC = KyokoPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - KPCM = KyokoPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n  //common errors\\n  string public constant CALLER_NOT_POOL_ADMIN = '25'; // 'The caller must be the pool admin'\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '26'; // User borrows on behalf, but allowance are too small\\n  string public constant ERROR = '27'; // User borrows on behalf, but allowance are too small\\n\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // 'Amount must be greater than 0'\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // 'Action requires an active reserve'\\n  string public constant VL_RESERVE_FROZEN = '3'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '4'; // 'User cannot withdraw more than the available balance'\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '5'; // 'Invalid interest rate mode selected'\\n  string public constant VL_BORROWING_NOT_ENABLED = '6'; // 'Borrowing is not enabled'\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '7'; // stable borrowing not enabled\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '8'; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n  string public constant VL_NOT_NFT_OWNER = '9'; // 'User is not the owner of the nft'\\n  string public constant VL_NOT_SUPPORT = '10'; // 'User's nft for borrow is not support'\\n  string public constant VL_TOO_EARLY = '11'; // 'Action is earlier than requested'\\n  string public constant VL_TOO_LATE = '12'; // 'Action is later than requested'\\n  string public constant VL_BAD_STATUS = '13'; // 'Action with wrong borrow status'\\n  string public constant VL_INVALID_USER = '14'; // 'User is not borrow owner'\\n  string public constant VL_AUCTION_ALREADY_SETTLED = '15'; // 'Auction is already done'\\n  string public constant VL_BAD_PRICE_TO_REPAY = '16'; // 'The floor price below liquidation price'\\n  string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = '31'; // 'User does not have any stable rate loan for this reserve'\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '32'; // 'Interest rate rebalance conditions were not met'\\n  string public constant LP_LIQUIDATION_CALL_FAILED = '33'; // 'Liquidation call failed'\\n  string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = '34'; // 'The requested amount is too small for an action.'\\n  string public constant LP_CALLER_NOT_KYOKO_POOL_CONFIGURATOR = '35'; // 'The caller of the function is Kyoko pool configurator'\\n  string public constant LP_CALLER_NOT_KYOKO_POOL_ORACLE = '36'; // 'The caller of the function is not the Kyoko pool oracle'\\n  string public constant LP_CALLER_NOT_KYOKO_POOL_FACTORY = '37'; // 'The caller of the function is not the Kyoko pool factory'\\n  string public constant LP_NFT_ALREADY_EXIST = '38'; // 'The initial reserve nft is already exist'\\n  string public constant LP_WETH_TRANSFER_FAILED = '39'; // 'Failed to transfer eth and weth'\\n  string public constant LP_BORROW_FAILED = '41'; // 'Can't be borrowed'\\n  string public constant LP_LIQUIDITY_INSUFFICIENT = '42'; // 'Insufficient pool balance'\\n  string public constant LP_IS_PAUSED = '43'; // 'Pool is paused'\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '44';\\n  string public constant LP_NOT_CONTRACT = '45';\\n  string public constant LP_NFT_NOT_SUPPORT = '46';\\n  string public constant CT_CALLER_MUST_BE_KYOKO_POOL = '51'; // 'The caller of this function must be a Kyoko pool'\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '52'; // 'Reserve has already been initialized'\\n  string public constant KPC_RESERVE_LIQUIDITY_NOT_0 = '53'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant KPC_CALLER_NOT_EMERGENCY_ADMIN = '54'; // 'The caller must be the emergency admin'\\n  string public constant KPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '55'; // 'Health factor is not below the threshold'\\n  string public constant KPCM_LIQUIDATION_DISABLED = '56'; // 'Health factor is not below the threshold'\\n  string public constant KPCM_NO_ERRORS = '57'; // 'No errors'\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '58';\\n  string public constant MATH_ADDITION_OVERFLOW = '59';\\n  string public constant MATH_DIVISION_BY_ZERO = '60';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '61'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '62'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '63'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '64'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '65'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '66'; //invalid amount to mint\\n  string public constant CT_INVALID_BURN_AMOUNT = '67'; //invalid amount to burn\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant RC_INVALID_BORROW_RATIO = '72';\\n  string public constant RC_INVALID_PERIOD = '73';\\n  string public constant RC_INVALID_MIN_BORROW_TIME = '74';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '75';\\n  string public constant RC_INVALID_LIQ_TIME = '76';\\n  string public constant RC_INVALID_BID_TIME = '77';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '81';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '82';\\n  string public constant SDT_CREATION_FAILED = '83';\\n  string public constant VDT_CREATION_FAILED = '84';\\n  string public constant KF_LIQUIDITY_INSUFFICIENT = '85';\\n  string public constant KT_CREATION_FAILED = '86';\\n  string public constant KT_ERROR_CREATOR = '87';\\n  string public constant KT_INITIAL_LIQUIDITY_LOCK = '88';\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/utils/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.18;\\n\\nimport \\\"./Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Kyoko\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    if (value == 0 || percentage == 0) {\\n      return 0;\\n    }\\n\\n    require(\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param percentage The percentage of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n    require(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfPercentage = percentage / 2;\\n\\n    require(\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\n      Errors.MATH_MULTIPLICATION_OVERFLOW\\n    );\\n\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"BorrowingDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stableRateEnabled\",\"type\":\"bool\"}],\"name\":\"BorrowingEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"ReserveActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ReserveBidDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"ReserveBorrowRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"ReserveDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"ReserveFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReserveInitialLiquidityBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"ReserveInterestRateStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"ReserveLiquidationDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ReserveLiquidationThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"ReserveLockTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReserveMinBorrowTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"ReservePeriodChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reserveType\",\"type\":\"uint256\"}],\"name\":\"ReserveTypeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"ReserveUnfrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"StableDebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"StableRateDisabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"StableRateEnabledOnReserve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VariableDebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"kTokenUpgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"activateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"borrowRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"period\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"minBorrowTime\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"liqThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"liqDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"bidDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowed\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InitReserveInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableSlope2\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RateStrategyInput[]\",\"name\":\"rateInput\",\"type\":\"tuple[]\"}],\"name\":\"batchInitReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"deactivateReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"disableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"disableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"}],\"name\":\"enableBorrowingOnReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"enableReserveStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"borrowRatio\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"period\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"minBorrowTime\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"liqThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"liqDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"bidDuration\",\"type\":\"uint24\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowed\",\"type\":\"bool\"}],\"internalType\":\"struct DataTypes.InitReserveInput\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimalUtilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseVariableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseStableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableSlope2\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.RateStrategyInput\",\"name\":\"rateInput\",\"type\":\"tuple\"}],\"name\":\"factoryInitReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"freezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKyokoPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setBidDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setBorrowRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"}],\"name\":\"setKyokoFactoryFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setKyokoFactoryInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"}],\"name\":\"setKyokoFactoryLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"}],\"name\":\"setKyokoFactoryLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setLiquidationDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setMinBorrowTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setPoolPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseStableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stableSlope2\",\"type\":\"uint256\"}],\"name\":\"setStableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"createKToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"createDebtToken\",\"type\":\"address\"}],\"name\":\"setTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveType\",\"type\":\"uint256\"}],\"name\":\"setType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseVariableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_variableSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_variableSlope2\",\"type\":\"uint256\"}],\"name\":\"setVariableRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"}],\"name\":\"unfreezeReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"updateNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KyokoPoolConfigurator", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}