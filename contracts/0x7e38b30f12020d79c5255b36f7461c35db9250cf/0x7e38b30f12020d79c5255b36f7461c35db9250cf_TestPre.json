{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-10-27\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage)\r\n        private\r\n        pure\r\n    {\r\n        if (returndata.length > 0) {\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface Aggregator {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract TestPre is ReentrancyGuard, Ownable {\r\n    uint256 public overalllRaised;\r\n    uint256 public presaleId;\r\n    uint256 public USDT_MULTIPLIER;\r\n    uint256 public ETH_MULTIPLIER;\r\n    address public fundReceiver;\r\n    uint256 public uniqueBuyers;\r\n\r\n    struct PresaleData {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint256 price;\r\n        uint256 nextStagePrice;\r\n        uint256 Sold;\r\n        uint256 tokensToSell;\r\n        uint256 UsdtHardcap;\r\n        uint256 amountRaised;\r\n        bool Active;\r\n        bool isEnableClaim;\r\n    }\r\n\r\n    struct VestingData {\r\n        uint256 vestingStartTime;\r\n        uint256 initialClaimPercent;\r\n        uint256 vestingTime;\r\n        uint256 vestingPercentage;\r\n        uint256 totalClaimCycles;\r\n    }\r\n\r\n    struct UserData {\r\n        uint256 investedAmount;\r\n        uint256 claimAt;\r\n        uint256 claimAbleAmount;\r\n        uint256 claimedVestingAmount;\r\n        uint256 claimedAmount;\r\n        uint256 claimCount;\r\n        uint256 activePercentAmount;\r\n    }\r\n\r\n    IERC20Metadata public USDTInterface;\r\n    IERC20Metadata public USDCInterface;\r\n    Aggregator internal aggregatorInterface;\r\n\r\n    mapping(uint256 => bool) public paused;\r\n    mapping(uint256 => PresaleData) public presale;\r\n    mapping(uint256 => VestingData) public vesting;\r\n    mapping(address => mapping(uint256 => UserData)) public userClaimData;\r\n    mapping(address => bool) public isExcludeMinToken;\r\n    mapping(address => bool) public isBlackList;\r\n    mapping(address => bool) public isExist;\r\n\r\n    uint256 public MinTokenTobuy;\r\n    uint256 public currentSale;\r\n    address public SaleToken;\r\n\r\n    event PresaleCreated(\r\n        uint256 indexed _id,\r\n        uint256 _totalTokens,\r\n        uint256 _startTime,\r\n        uint256 _endTime\r\n    );\r\n\r\n    event PresaleUpdated(\r\n        bytes32 indexed key,\r\n        uint256 prevValue,\r\n        uint256 newValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event TokensBought(\r\n        address indexed user,\r\n        uint256 indexed id,\r\n        address indexed purchaseToken,\r\n        uint256 tokensBought,\r\n        uint256 amountPaid,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event TokensClaimed(\r\n        address indexed user,\r\n        uint256 indexed id,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event PresaleTokenAddressUpdated(\r\n        address indexed prevValue,\r\n        address indexed newValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\r\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\r\n\r\n    constructor(\r\n        address _oracle,\r\n        address _usdt,\r\n        address _usdc,\r\n        address _SaleToken,\r\n        uint256 _MinTokenTobuy\r\n    ) {\r\n        aggregatorInterface = Aggregator(_oracle);\r\n        SaleToken = _SaleToken;\r\n        MinTokenTobuy = _MinTokenTobuy;\r\n        USDTInterface = IERC20Metadata(_usdt);\r\n        USDCInterface = IERC20Metadata(_usdc);\r\n        ETH_MULTIPLIER = (10**18);\r\n        USDT_MULTIPLIER = (10**6);\r\n        fundReceiver = msg.sender;\r\n    }\r\n\r\n    function createPresale(\r\n        uint256 _price,\r\n        uint256 _nextStagePrice,\r\n        uint256 _tokensToSell,\r\n        uint256 _UsdtHardcap\r\n    ) external onlyOwner {\r\n        require(_price > 0, \"Zero price\");\r\n        require(_tokensToSell > 0, \"Zero tokens to sell\");\r\n\r\n        presaleId++;\r\n\r\n        presale[presaleId] = PresaleData(\r\n            0,\r\n            0,\r\n            _price,\r\n            _nextStagePrice,\r\n            0,\r\n            _tokensToSell,\r\n            _UsdtHardcap,\r\n            0,\r\n            false,\r\n            false\r\n        );\r\n\r\n        emit PresaleCreated(presaleId, _tokensToSell, 0, 0);\r\n    }\r\n\r\n    function setPresaleStage(uint256 _id) public onlyOwner {\r\n        require(presale[_id].tokensToSell > 0, \"Presale don't exist\");\r\n        if (currentSale != 0) {\r\n            presale[currentSale].endTime = block.timestamp;\r\n            presale[currentSale].Active = false;\r\n        }\r\n        presale[_id].startTime = block.timestamp;\r\n        presale[_id].Active = true;\r\n        currentSale = _id;\r\n    }\r\n\r\n    function setPresaleVesting(\r\n        uint256[] memory _id,\r\n        uint256[] memory vestingStartTime,\r\n        uint256[] memory _initialClaimPercent,\r\n        uint256[] memory _vestingTime,\r\n        uint256[] memory _vestingPercentage\r\n    ) public onlyOwner {\r\n        for (uint256 i = 0; i < _id.length; i++) {\r\n            vesting[_id[i]] = VestingData(\r\n                vestingStartTime[i],\r\n                _initialClaimPercent[i],\r\n                _vestingTime[i],\r\n                _vestingPercentage[i],\r\n                (1000 - _initialClaimPercent[i]) / _vestingPercentage[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    function updatePresaleVesting(\r\n        uint256 _id,\r\n        uint256 _vestingStartTime,\r\n        uint256 _initialClaimPercent,\r\n        uint256 _vestingTime,\r\n        uint256 _vestingPercentage\r\n    ) public onlyOwner {\r\n        vesting[_id].vestingStartTime = _vestingStartTime;\r\n        vesting[_id].initialClaimPercent = _initialClaimPercent;\r\n        vesting[_id].vestingTime = _vestingTime;\r\n        vesting[_id].vestingPercentage = _vestingPercentage;\r\n        vesting[_id].totalClaimCycles =\r\n            (100 - _initialClaimPercent) /\r\n            _vestingPercentage;\r\n    }\r\n\r\n    uint256 initialClaimPercent;\r\n    uint256 vestingTime;\r\n    uint256 vestingPercentage;\r\n    uint256 totalClaimCycles;\r\n\r\n    function enableClaim(uint256 _id, bool _status) public onlyOwner {\r\n        presale[_id].isEnableClaim = _status;\r\n    }\r\n\r\n    function updatePresale(\r\n        uint256 _id,\r\n        uint256 _price,\r\n        uint256 _nextStagePrice,\r\n        uint256 _tokensToSell,\r\n        uint256 _Hardcap,\r\n        bool isclaimAble\r\n    ) external onlyOwner {\r\n        require(_price > 0, \"Zero price\");\r\n        require(_tokensToSell > 0, \"Zero tokens to sell\");\r\n        require(_Hardcap > 0, \"Zero harcap\");\r\n        presale[_id].price = _price;\r\n        presale[_id].nextStagePrice = _nextStagePrice;\r\n        presale[_id].tokensToSell = _tokensToSell;\r\n        presale[_id].UsdtHardcap = _Hardcap;\r\n        presale[_id].isEnableClaim = isclaimAble;\r\n    }\r\n\r\n    function changeFundWallet(address _wallet) external onlyOwner {\r\n        require(_wallet != address(0), \"Invalid parameters\");\r\n        fundReceiver = _wallet;\r\n    }\r\n\r\n    function changeUSDTToken(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0), \"Zero token address\");\r\n        USDTInterface = IERC20Metadata(_newAddress);\r\n    }\r\n\r\n    function changeUSDCToken(address _newAddress) external onlyOwner {\r\n        require(_newAddress != address(0), \"Zero token address\");\r\n        USDCInterface = IERC20Metadata(_newAddress);\r\n    }\r\n\r\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\r\n        require(!paused[_id], \"Already paused\");\r\n        paused[_id] = true;\r\n        emit PresalePaused(_id, block.timestamp);\r\n    }\r\n\r\n    function unPausePresale(uint256 _id)\r\n        external\r\n        checkPresaleId(_id)\r\n        onlyOwner\r\n    {\r\n        require(paused[_id], \"Not paused\");\r\n        paused[_id] = false;\r\n        emit PresaleUnpaused(_id, block.timestamp);\r\n    }\r\n\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\r\n        price = (price * (10**10));\r\n        return uint256(price);\r\n    }\r\n\r\n    modifier checkPresaleId(uint256 _id) {\r\n        require(_id > 0 && _id == currentSale, \"Invalid presale id\");\r\n        _;\r\n    }\r\n\r\n    modifier checkSaleState(uint256 _id, uint256 amount) {\r\n        require(presale[_id].Active == true, \"preSAle not Active\");\r\n        require(\r\n            amount > 0 &&\r\n                amount <= presale[_id].tokensToSell - presale[_id].Sold,\r\n            \"Invalid sale amount\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function ExcludeAccouctFromMinBuy(address _user, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        isExcludeMinToken[_user] = _status;\r\n    }\r\n\r\n    function buyWithUSDT(uint256 usdAmount)\r\n        external\r\n        checkPresaleId(currentSale)\r\n        checkSaleState(currentSale, usdtToTokens(currentSale, usdAmount))\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(!paused[currentSale], \"Presale paused\");\r\n        require(\r\n            presale[currentSale].Active == true,\r\n            \"Presale is not active yet\"\r\n        );\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        require(\r\n            presale[currentSale].amountRaised + usdAmount <=\r\n                presale[currentSale].UsdtHardcap,\r\n            \"Amount should be less than leftHardcap\"\r\n        );\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n        }\r\n        uint256 tokens = usdtToTokens(currentSale, usdAmount);\r\n        presale[currentSale].Sold += tokens;\r\n        presale[currentSale].amountRaised += usdAmount;\r\n        overalllRaised += usdAmount;\r\n\r\n        if (isExcludeMinToken[msg.sender] == false) {\r\n            require(tokens >= MinTokenTobuy, \"Less than min amount\");\r\n        }\r\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\r\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\r\n            userClaimData[_msgSender()][currentSale].investedAmount += usdAmount;\r\n        } else {\r\n            userClaimData[_msgSender()][currentSale] = UserData(\r\n                usdAmount,\r\n                0,\r\n                tokens,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n        }\r\n\r\n        uint256 ourAllowance = USDTInterface.allowance(\r\n            _msgSender(),\r\n            address(this)\r\n        );\r\n        require(usdAmount <= ourAllowance, \"Make sure to add enough allowance\");\r\n        (bool success, ) = address(USDTInterface).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                _msgSender(),\r\n                fundReceiver,\r\n                usdAmount\r\n            )\r\n        );\r\n        require(success, \"Token payment failed\");\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            currentSale,\r\n            address(USDTInterface),\r\n            tokens,\r\n            usdAmount,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function changeClaimAddress(address _oldAddress, address _newWallet)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 1; i < presaleId; i++) {\r\n            require(isExist[_oldAddress], \"User not a participant\");\r\n            userClaimData[_newWallet][i].claimAbleAmount = userClaimData[\r\n                _oldAddress\r\n            ][i].claimAbleAmount;\r\n            userClaimData[_oldAddress][i].claimAbleAmount = 0;\r\n        }\r\n        isExist[_oldAddress] = false;\r\n        isExist[_newWallet] = true;\r\n    }\r\n\r\n    function blackListUser(address _user, bool _value) public onlyOwner {\r\n        isBlackList[_user] = _value;\r\n    }\r\n\r\n    function buyWithUSDC(uint256 usdcAmount)\r\n        external\r\n        checkPresaleId(currentSale)\r\n        checkSaleState(currentSale, usdtToTokens(currentSale, usdcAmount))\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        require(!paused[currentSale], \"Presale paused\");\r\n        require(\r\n            presale[currentSale].Active == true,\r\n            \"Presale is not active yet\"\r\n        );\r\n        require(\r\n            presale[currentSale].amountRaised + usdcAmount <=\r\n                presale[currentSale].UsdtHardcap,\r\n            \"Amount should be less than leftHardcap\"\r\n        );\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n        }\r\n        uint256 tokens = usdtToTokens(currentSale, usdcAmount);\r\n        presale[currentSale].Sold += tokens;\r\n        presale[currentSale].amountRaised += usdcAmount;\r\n        overalllRaised += usdcAmount;\r\n\r\n        if (isExcludeMinToken[msg.sender] == false) {\r\n            require(tokens >= MinTokenTobuy, \"Less than min amount\");\r\n        }\r\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\r\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\r\n            userClaimData[_msgSender()][currentSale].investedAmount += usdcAmount;\r\n        } else {\r\n            userClaimData[_msgSender()][currentSale] = UserData(\r\n                usdcAmount,\r\n                0,\r\n                tokens,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n            require(isExist[_msgSender()], \"User not a participant\");\r\n        }\r\n\r\n        uint256 ourAllowance = USDTInterface.allowance(\r\n            _msgSender(),\r\n            address(this)\r\n        );\r\n        require(\r\n            usdcAmount <= ourAllowance,\r\n            \"Make sure to add enough allowance\"\r\n        );\r\n        (bool success, ) = address(USDCInterface).call(\r\n            abi.encodeWithSignature(\r\n                \"transferFrom(address,address,uint256)\",\r\n                _msgSender(),\r\n                fundReceiver,\r\n                usdcAmount\r\n            )\r\n        );\r\n        require(success, \"Token payment failed\");\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            currentSale,\r\n            address(USDTInterface),\r\n            tokens,\r\n            usdcAmount,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function buyWithEth()\r\n        external\r\n        payable\r\n        checkPresaleId(currentSale)\r\n        checkSaleState(currentSale, ethToTokens(currentSale, msg.value))\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        uint256 usdAmount = (msg.value * getLatestPrice() * USDT_MULTIPLIER) /\r\n            (ETH_MULTIPLIER * ETH_MULTIPLIER);\r\n        require(\r\n            presale[currentSale].amountRaised + usdAmount <=\r\n                presale[currentSale].UsdtHardcap,\r\n            \"Amount should be less than leftHardcap\"\r\n        );\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        require(!paused[currentSale], \"Presale paused\");\r\n        require(\r\n            presale[currentSale].Active == true,\r\n            \"Presale is not active yet\"\r\n        );\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n        }\r\n\r\n        uint256 tokens = usdtToTokens(currentSale, usdAmount);\r\n        if (isExcludeMinToken[msg.sender] == false) {\r\n            require(tokens >= MinTokenTobuy, \"Insufficient amount!\");\r\n        }\r\n        presale[currentSale].Sold += tokens;\r\n        presale[currentSale].amountRaised += usdAmount;\r\n        overalllRaised += usdAmount;\r\n\r\n        if (userClaimData[_msgSender()][currentSale].claimAbleAmount > 0) {\r\n            userClaimData[_msgSender()][currentSale].claimAbleAmount += tokens;\r\n            userClaimData[_msgSender()][currentSale].investedAmount += usdAmount;\r\n        } else {\r\n            userClaimData[_msgSender()][currentSale] = UserData(\r\n                usdAmount,\r\n                0, // Last claimed at\r\n                tokens, // total tokens to be claimed\r\n                0, // vesting claimed amount\r\n                0, // claimed amount\r\n                0, // claim count\r\n                0 // vesting percent\r\n            );\r\n        }\r\n\r\n        sendValue(payable(fundReceiver), msg.value);\r\n        emit TokensBought(\r\n            _msgSender(),\r\n            currentSale,\r\n            address(0),\r\n            tokens,\r\n            msg.value,\r\n            block.timestamp\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function ethBuyHelper(uint256 _id, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 ethAmount)\r\n    {\r\n        uint256 usdPrice = (amount * presale[_id].price);\r\n        ethAmount =\r\n            (usdPrice * ETH_MULTIPLIER) /\r\n            (getLatestPrice() * 10**IERC20Metadata(SaleToken).decimals());\r\n    }\r\n\r\n    function usdtBuyHelper(uint256 _id, uint256 amount)\r\n        external\r\n        view\r\n        returns (uint256 usdPrice)\r\n    {\r\n        usdPrice =\r\n            (amount * presale[_id].price) /\r\n            10**IERC20Metadata(SaleToken).decimals();\r\n    }\r\n\r\n    function ethToTokens(uint256 _id, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256 _tokens)\r\n    {\r\n        uint256 usdAmount = (amount * getLatestPrice() * USDT_MULTIPLIER) /\r\n            (ETH_MULTIPLIER * ETH_MULTIPLIER);\r\n        _tokens = usdtToTokens(_id, usdAmount);\r\n    }\r\n\r\n    function usdtToTokens(uint256 _id, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256 _tokens)\r\n    {\r\n        _tokens = (amount * presale[_id].price) / USDT_MULTIPLIER;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Low balance\");\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"ETH Payment failed\");\r\n    }\r\n\r\n    function claimableAmount(address user, uint256 _id)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        UserData memory _user = userClaimData[user][_id];\r\n\r\n        require(_user.claimAbleAmount > 0, \"Nothing to claim\");\r\n        uint256 amount = _user.claimAbleAmount;\r\n        require(amount > 0, \"Already claimed\");\r\n        return amount;\r\n    }\r\n\r\n    function claimAmount(uint256 _id) public returns (bool) {\r\n        require(isExist[_msgSender()], \"User not a participant\");\r\n        uint256 amount = claimableAmount(msg.sender, _id);\r\n        require(amount > 0, \"No claimable amount\");\r\n        require(!isBlackList[msg.sender], \"Account is blackListed\");\r\n        require(SaleToken != address(0), \"Presale token address not set\");\r\n        require(\r\n            amount <= IERC20(SaleToken).balanceOf(address(this)),\r\n            \"Not enough tokens in the contract\"\r\n        );\r\n        require((presale[_id].isEnableClaim == true), \"Claim is not enable\");\r\n        uint256 transferAmount;\r\n        if (userClaimData[msg.sender][_id].claimCount == 0) {\r\n            transferAmount =\r\n                (amount * (vesting[_id].initialClaimPercent)) /\r\n                1000;\r\n            userClaimData[msg.sender][_id].activePercentAmount =\r\n                (amount * vesting[_id].vestingPercentage) /\r\n                1000;\r\n            bool status = IERC20(SaleToken).transfer(\r\n                msg.sender,\r\n                transferAmount\r\n            );\r\n            require(status, \"Token transfer failed\");\r\n            userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount;\r\n            userClaimData[msg.sender][_id].claimedAmount += transferAmount;\r\n            userClaimData[msg.sender][_id].claimCount++;\r\n        } else if (\r\n            userClaimData[msg.sender][_id].claimAbleAmount >\r\n            userClaimData[msg.sender][_id].activePercentAmount\r\n        ) {\r\n            uint256 duration = block.timestamp - vesting[_id].vestingStartTime;\r\n            uint256 multiplier = duration / vesting[_id].vestingTime;\r\n            if (multiplier > vesting[_id].totalClaimCycles) {\r\n                multiplier = vesting[_id].totalClaimCycles;\r\n            }\r\n            uint256 _amount = multiplier *\r\n                userClaimData[msg.sender][_id].activePercentAmount;\r\n            transferAmount =\r\n                _amount -\r\n                userClaimData[msg.sender][_id].claimedVestingAmount;\r\n            require(transferAmount > 0, \"Please wait till next claim\");\r\n            bool status = IERC20(SaleToken).transfer(\r\n                msg.sender,\r\n                transferAmount\r\n            );\r\n            require(status, \"Token transfer failed\");\r\n            userClaimData[msg.sender][_id].claimAbleAmount -= transferAmount;\r\n            userClaimData[msg.sender][_id]\r\n                .claimedVestingAmount += transferAmount;\r\n            userClaimData[msg.sender][_id].claimedAmount += transferAmount;\r\n            userClaimData[msg.sender][_id].claimCount++;\r\n        } else {\r\n            uint256 duration = block.timestamp - vesting[_id].vestingStartTime;\r\n            uint256 multiplier = duration / vesting[_id].vestingTime;\r\n            if (multiplier > vesting[_id].totalClaimCycles + 1) {\r\n                transferAmount = userClaimData[msg.sender][_id].claimAbleAmount;\r\n                require(transferAmount > 0, \"Please wait till next claim\");\r\n                bool status = IERC20(SaleToken).transfer(\r\n                    msg.sender,\r\n                    transferAmount\r\n                );\r\n                require(status, \"Token transfer failed\");\r\n                userClaimData[msg.sender][_id]\r\n                    .claimAbleAmount -= transferAmount;\r\n                userClaimData[msg.sender][_id].claimedAmount += transferAmount;\r\n                userClaimData[msg.sender][_id]\r\n                    .claimedVestingAmount += transferAmount;\r\n                userClaimData[msg.sender][_id].claimCount++;\r\n            } else {\r\n                revert(\"Wait for next claiim\");\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function WithdrawTokens(address _token, uint256 amount) external onlyOwner {\r\n        IERC20(_token).transfer(fundReceiver, amount);\r\n    }\r\n\r\n    function WithdrawContractFunds(uint256 amount) external onlyOwner {\r\n        sendValue(payable(fundReceiver), amount);\r\n    }\r\n\r\n    function ChangeTokenToSell(address _token) public onlyOwner {\r\n        SaleToken = _token;\r\n    }\r\n\r\n    function EditMinTokenToBuy(uint256 _amount) public onlyOwner {\r\n        MinTokenTobuy = _amount;\r\n    }\r\n\r\n    function ChangeOracleAddress(address _oracle) public onlyOwner {\r\n        aggregatorInterface = Aggregator(_oracle);\r\n    }\r\n\r\n    function blockStamp() public view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_SaleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_MinTokenTobuy\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"ChangeOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ChangeTokenToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EditMinTokenToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeAccouctFromMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinTokenTobuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SaleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDCInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"blackListUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdAmount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"changeClaimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"changeFundWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUSDTToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UsdtHardcap\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeMinToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overalllRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Sold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UsdtHardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountRaised\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Active\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnableClaim\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setPresaleStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"vestingStartTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialClaimPercent\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_vestingPercentage\",\"type\":\"uint256[]\"}],\"name\":\"setPresaleVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueBuyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextStagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Hardcap\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isclaimAble\",\"type\":\"bool\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePresaleVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userClaimData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimAbleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedVestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activePercentAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialClaimPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimCycles\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TestPre", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000ff8c479134a18918059493243943150776cf8cf20000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://63c77180e8d34f14c16682bffb9def570c1d528c7e724bec470feedaf158b56e"}