{"SourceCode": "pragma solidity ^0.8.18;\r\n\r\n//SPDX-License-Identifier: MIT Licensed\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Disperse {\r\n    IERC20 public TOKEN;\r\n\r\n    address public owner;  \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \" Not an owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner, address _TOKEN) {\r\n        owner = _owner;\r\n        TOKEN = IERC20(_TOKEN);\r\n    }\r\n \r\n \r\n       function disperseToken(\r\n        address[] calldata addresses,\r\n        uint256[] calldata amounts\r\n    ) public {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"Array sizes must be equal\"\r\n        );\r\n        uint256 i = 0;\r\n        while (i < addresses.length) {\r\n            uint256 _amount = amounts[i]*(1e18);\r\n            TOKEN.transferFrom(msg.sender, addresses[i], _amount);\r\n            i += 1;\r\n        }\r\n    }\r\n    // transfer ownership\r\n    function changeOwner(address payable _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    } \r\n\r\n    // to draw out tokens\r\n    function transferStuckTokens(\r\n        IERC20 token,\r\n        uint256 _value\r\n    ) external onlyOwner {\r\n        token.transfer(msg.sender, _value);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TOKEN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"disperseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Disperse", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000028893aa92df7b0d142a6e69598581ac32887edc3000000000000000000000000bf20fca6430985b700b87fdc4422bc2c1659e8c9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://49409859e718bb30a38f9a841fda8e8e0eb34c74c53ddcdf770731c1925079c2"}