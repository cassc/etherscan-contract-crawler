{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/templates/cloneable/erc721c/lazy-mint/basic-royalties/NFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"../LazyMintERC721CMetadataInitializable.sol\\\";\\nimport \\\"../../../../AccessControlledMinters.sol\\\";\\nimport \\\"@limitbreak/creator-token-contracts/contracts/programmable-royalties/BasicRoyalties.sol\\\";\\n\\ncontract NFT is \\n    AccessControlledMintersInitializable,\\n    LazyMintERC721CMetadataInitializable, \\n    BasicRoyaltiesInitializable {\\n\\n    constructor() {}\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, LazyMintERC721CInitializable, ERC2981) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function setDefaultRoyalty(address receiver, uint96 feeNumerator) public {\\n        _requireCallerIsContractOwner();\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n\\n    function setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) public {\\n        _requireCallerIsContractOwner();\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    function _requireCallerIsMinterOrContractOwner() internal view override {\\n        _requireCallerIsAllowedToMint();\\n    }\\n}\"\r\n    },\r\n    \"src/templates/cloneable/erc721c/lazy-mint/LazyMintERC721CMetadataInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"src/token/erc721/LazyMintERC721C.sol\\\";\\n\\nimport \\\"@limitbreak/creator-token-contracts/contracts/access/OwnableInitializable.sol\\\";\\nimport \\\"@limitbreak/creator-token-contracts/contracts/token/erc721/MetadataURI.sol\\\";\\n\\nabstract contract LazyMintERC721CMetadataInitializable is \\n    OwnableInitializable, \\n    MetadataURIInitializable, \\n    LazyMintERC721CInitializable {\\n    using Strings for uint256;\\n\\n    /// @notice Returns tokenURI if baseURI is set\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if(!_exists(tokenId)) {\\n            revert LazyMintERC721Base__TokenDoesNotExist();\\n        }\\n\\n        string memory baseURI = baseTokenURI;\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString(), suffixURI))\\n            : \\\"\\\";\\n    }\\n}\"\r\n    },\r\n    \"src/templates/AccessControlledMinters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@limitbreak/creator-token-contracts/contracts/access/OwnablePermissions.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\nabstract contract AccessControlledMinters is OwnablePermissions, AccessControlEnumerable {\\n\\n    error AccessControlledMinters__CallerDoesNotHaveAdminRole();\\n    error AccessControlledMinters__CannotTransferAdminRoleToSelf();\\n    error AccessControlledMinters__CannotTransferAdminRoleToZeroAddress();\\n\\n    /// @notice Value defining the `Minter Role`.\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /** \\n     * @notice Allows the current contract admin to transfer the `Admin Role` to a new address.\\n     * @dev    Throws if newAdmin is the zero-address\\n     * @dev    Throws if the caller is not the current admin.\\n     * @dev    Throws if the caller is an admin and tries to transfer admin to itself.\\n     *\\n     * @dev <h4>Postconditions:</h4>\\n     * @dev 1. The caller/former admin has had `Admin Role` revoked.\\n     * @dev 2. The new admin has been granted the `Admin Role`.\\n     */\\n    function transferAdminRole(address newAdmin) external {\\n        _requireCallerIsAdmin();\\n\\n        if(newAdmin == address(0)) {\\n            revert AccessControlledMinters__CannotTransferAdminRoleToZeroAddress();\\n        }\\n\\n        if(newAdmin == _msgSender()) {\\n            revert AccessControlledMinters__CannotTransferAdminRoleToSelf();\\n        }\\n\\n        _revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n    }\\n\\n    /** \\n     * @dev Validates that the caller is an admin\\n     * @dev Throws when the caller is not an admin\\n     */\\n    function _requireCallerIsAdmin() internal view {\\n        if(!hasRole(DEFAULT_ADMIN_ROLE, _msgSender())) {\\n            revert AccessControlledMinters__CallerDoesNotHaveAdminRole();\\n        }\\n    }\\n\\n    /**\\n     * @dev Validates that the caller is the contract owner or has been granted minter role\\n     * @dev Throws when the caller is not the contract owner and has not been granted minter role\\n     */\\n    function _requireCallerIsAllowedToMint() internal view {\\n        if(!hasRole(MINTER_ROLE, _msgSender())) {\\n            _requireCallerIsContractOwner();\\n        }\\n    }\\n}\\n\\nabstract contract AccessControlledMintersInitializable is AccessControlledMinters {\\n    error AccessControlledMintersInitializable__AdminAlreadyInitialized();\\n\\n    bool private _adminInitialized;\\n\\n    /// @dev Initializes access control enumerable default admin.\\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\\n    function initializeAdmin(address admin) public {\\n        _requireCallerIsContractOwner();\\n\\n        if(_adminInitialized) {\\n            revert AccessControlledMintersInitializable__AdminAlreadyInitialized();\\n        }\\n\\n        _adminInitialized = true;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\n    }\\n}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/programmable-royalties/BasicRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\n\\n/**\\n * @title BasicRoyaltiesBase\\n * @author Limit Break, Inc.\\n * @dev Base functionality of an NFT mix-in contract implementing the most basic form of programmable royalties.\\n */\\nabstract contract BasicRoyaltiesBase is ERC2981 {\\n\\n    event DefaultRoyaltySet(address indexed receiver, uint96 feeNumerator);\\n    event TokenRoyaltySet(uint256 indexed tokenId, address indexed receiver, uint96 feeNumerator);\\n\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual override {\\n        super._setDefaultRoyalty(receiver, feeNumerator);\\n        emit DefaultRoyaltySet(receiver, feeNumerator);\\n    }\\n\\n    function _setTokenRoyalty(uint256 tokenId, address receiver, uint96 feeNumerator) internal virtual override {\\n        super._setTokenRoyalty(tokenId, receiver, feeNumerator);\\n        emit TokenRoyaltySet(tokenId, receiver, feeNumerator);\\n    }\\n}\\n\\n/**\\n * @title BasicRoyalties\\n * @author Limit Break, Inc.\\n * @notice Constructable BasicRoyalties Contract implementation.\\n */\\nabstract contract BasicRoyalties is BasicRoyaltiesBase {\\n    constructor(address receiver, uint96 feeNumerator) {\\n        _setDefaultRoyalty(receiver, feeNumerator);\\n    }\\n}\\n\\n/**\\n * @title BasicRoyaltiesInitializable\\n * @author Limit Break, Inc.\\n * @notice Initializable BasicRoyalties Contract implementation to allow for EIP-1167 clones. \\n */\\nabstract contract BasicRoyaltiesInitializable is BasicRoyaltiesBase {}\"\r\n    },\r\n    \"src/token/erc721/LazyMintERC721C.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./LazyMintERC721.sol\\\";\\nimport \\\"@limitbreak/creator-token-contracts/contracts/utils/CreatorTokenBase.sol\\\";\\n\\nabstract contract LazyMintERC721C is LazyMintERC721, CreatorTokenBase {\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(ICreatorToken).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @dev Ties the open-zeppelin _beforeTokenTransfer hook to more granular transfer validation logic\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateBeforeTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Ties the open-zeppelin _afterTokenTransfer hook to more granular transfer validation logic\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateAfterTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\\nabstract contract LazyMintERC721CInitializable is LazyMintERC721Initializable, CreatorTokenBase {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(ICreatorToken).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @dev Ties the open-zeppelin _beforeTokenTransfer hook to more granular transfer validation logic\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateBeforeTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev Ties the open-zeppelin _afterTokenTransfer hook to more granular transfer validation logic\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize) internal virtual override {\\n        for (uint256 i = 0; i < batchSize;) {\\n            _validateAfterTransfer(from, to, firstTokenId + i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/access/OwnableInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./OwnablePermissions.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract OwnableInitializable is OwnablePermissions, Ownable {\\n\\n    error InitializableOwnable__OwnerAlreadyInitialized();\\n\\n    bool private _ownerInitialized;\\n\\n    /**\\n     * @dev When EIP-1167 is used to clone a contract that inherits Ownable permissions,\\n     * this is required to assign the initial contract owner, as the constructor is\\n     * not called during the cloning process.\\n     */\\n    function initializeOwner(address owner_) public {\\n      if (owner() != address(0) || _ownerInitialized) {\\n          revert InitializableOwnable__OwnerAlreadyInitialized();\\n      }\\n\\n      _transferOwnership(owner_);\\n    }\\n\\n    function _requireCallerIsContractOwner() internal view virtual override {\\n        _checkOwner();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/token/erc721/MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../access/OwnablePermissions.sol\\\";\\n\\nabstract contract MetadataURI is OwnablePermissions {\\n\\n    /// @dev Base token uri\\n    string public baseTokenURI;\\n\\n    /// @dev Token uri suffix/extension\\n    string public suffixURI;\\n\\n    /// @dev Emitted when base URI is set.\\n    event BaseURISet(string baseTokenURI);\\n\\n    /// @dev Emitted when suffix URI is set.\\n    event SuffixURISet(string suffixURI);\\n\\n    /// @notice Sets base URI\\n    function setBaseURI(string memory baseTokenURI_) public {\\n        _requireCallerIsContractOwner();\\n        baseTokenURI = baseTokenURI_;\\n        emit BaseURISet(baseTokenURI_);\\n    }\\n\\n    /// @notice Sets suffix URI\\n    function setSuffixURI(string memory suffixURI_) public {\\n        _requireCallerIsContractOwner();\\n        suffixURI = suffixURI_;\\n        emit SuffixURISet(suffixURI_);\\n    }\\n}\\n\\nabstract contract MetadataURIInitializable is MetadataURI {\\n    error MetadataURIInitializable__URIAlreadyInitialized();\\n\\n    bool private _uriInitialized;\\n\\n    /// @dev Initializes parameters of tokens with uri values.\\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\\n    function initializeURI(string memory baseURI_, string memory suffixURI_) public {\\n        _requireCallerIsContractOwner();\\n\\n        if(_uriInitialized) {\\n            revert MetadataURIInitializable__URIAlreadyInitialized();\\n        }\\n\\n        _uriInitialized = true;\\n\\n        baseTokenURI = baseURI_;\\n        emit BaseURISet(baseURI_);\\n\\n        suffixURI = suffixURI_;\\n        emit SuffixURISet(suffixURI_);\\n    }\\n}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/access/OwnablePermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nabstract contract OwnablePermissions is Context {\\n    function _requireCallerIsContractOwner() internal view virtual;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/common/ERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/token/erc721/LazyMintERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport { TokenOwner } from \\\"../../DataTypes.sol\\\";\\n\\nimport \\\"@limitbreak/creator-token-contracts/contracts/access/OwnablePermissions.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract LazyMintERC721Base is OwnablePermissions, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    error LazyMintERC721Base__AddressZeroIsNotAValidOwner();\\n    error LazyMintERC721Base__AmountExceedsMaxRemainingSupply();\\n    error LazyMintERC721Base__AmountMustBeGreaterThanZero();\\n    error LazyMintERC721Base__ApprovalToCurrentOwner();\\n    error LazyMintERC721Base__ApproveCallerIsNotTokenOwnerOrApprovedForAll();\\n    error LazyMintERC721Base__ApproveToCaller();\\n    error LazyMintERC721Base__MaxSupplyMustBeGreaterThanZero();\\n    error LazyMintERC721Base__MaxTokensPerConsecutiveTransferMustBeGreaterThanZero();\\n    error LazyMintERC721Base__MaxTokensPerConsecutiveTransferUpperLimitExceeded();\\n    error LazyMintERC721Base__TokenDoesNotExist();\\n    error LazyMintERC721Base__TransferCallerIsNotOwnerNorApproved();\\n    error LazyMintERC721Base__TransferFromIncorrectOwner();\\n    error LazyMintERC721Base__TransferToNonERC721Receiver();\\n    error LazyMintERC721Base__TransferToTheZeroAddress();\\n    error LazyMintERC721Base__TransferToNonERC721ReceiverImplementer();\\n\\n    address public constant DEFAULT_TOKEN_OWNER = address(0x00000089E8825c9A59B4503398fAACF2e9A9CDb0);\\n\\n    // Never allow more than 1 million tokens per consecutive transfer event\\n    uint256 public constant MAX_TOKENS_PER_CONSECUTIVE_TRANSFER_UPPER_LIMIT = 1_000_000;\\n\\n    uint256 private _amountCreated;\\n\\n    uint256 private _remainingMintableSupply;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address and a flag on whether it has left original default owner wallet   \\n    mapping(uint256 => TokenOwner) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    event ConsecutiveTransfer(\\n        uint256 indexed fromTokenId, \\n        uint256 toTokenId, \\n        address indexed fromAddress, \\n        address indexed toAddress);\\n\\n    // The recommended value for `maxTokensPerConsecutiveTransfer` is 5000, as this limit is imposed by OpenSea.\\n    // This value could go up or down in the future, so it is capped only by \\n    // `MAX_TOKENS_PER_CONSECUTIVE_TRANSFER_UPPER_LIMIT` (1 million).\\n    function mint(uint256 amount, uint256 maxTokensPerConsecutiveTransfer) external {\\n        _requireCallerIsMinterOrContractOwner();\\n\\n        if (amount == 0) {\\n            revert LazyMintERC721Base__AmountMustBeGreaterThanZero();\\n        }\\n\\n        if (amount > _remainingMintableSupply) {\\n            revert LazyMintERC721Base__AmountExceedsMaxRemainingSupply();\\n        }\\n\\n        if (maxTokensPerConsecutiveTransfer == 0) {\\n            revert LazyMintERC721Base__MaxTokensPerConsecutiveTransferMustBeGreaterThanZero();\\n        }\\n\\n        if (maxTokensPerConsecutiveTransfer > MAX_TOKENS_PER_CONSECUTIVE_TRANSFER_UPPER_LIMIT) {\\n            revert LazyMintERC721Base__MaxTokensPerConsecutiveTransferUpperLimitExceeded();\\n        }\\n        \\n        _balances[DEFAULT_TOKEN_OWNER] += amount;\\n\\n        unchecked {\\n            uint256 tokenStartId = _amountCreated + 1;\\n            uint256 tokenStopId = tokenStartId + amount - 1;\\n            for (tokenStartId; tokenStartId <= tokenStopId; tokenStartId += maxTokensPerConsecutiveTransfer) {\\n                uint256 tokenEndId = tokenStartId + maxTokensPerConsecutiveTransfer - 1;\\n                if (tokenEndId > tokenStopId) {\\n                    tokenEndId = tokenStopId;\\n                }\\n\\n                emit ConsecutiveTransfer(tokenStartId, tokenEndId, address(0), DEFAULT_TOKEN_OWNER);\\n            }\\n\\n            _amountCreated += amount;\\n            _remainingMintableSupply -= amount;\\n        }\\n    }\\n\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner_ = ownerOf(tokenId);\\n        if (to == owner_) {\\n            revert LazyMintERC721Base__ApprovalToCurrentOwner();\\n        }\\n\\n        if (!(_msgSender() == owner_ || isApprovedForAll(owner_, _msgSender()))) {\\n            revert LazyMintERC721Base__ApproveCallerIsNotTokenOwnerOrApprovedForAll();\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner_, to, tokenId);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (_msgSender() == operator) {\\n            revert LazyMintERC721Base__ApproveToCaller();\\n        }\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        (address owner_, TokenOwner storage tokenOwner_) = _ownerOf(tokenId);\\n\\n        bool isApprovedOrOwner_ = \\n        (\\n            _msgSender() == owner_ || \\n            _operatorApprovals[owner_][_msgSender()] || \\n            _tokenApprovals[tokenId] == _msgSender()\\n        );\\n       \\n        if (!isApprovedOrOwner_) {\\n            revert LazyMintERC721Base__TransferCallerIsNotOwnerNorApproved();\\n        }\\n\\n        _transfer(owner_, tokenOwner_, from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        transferFrom(from, to, tokenId);\\n\\n        if (!_checkOnERC721Received(from, to, tokenId, data)) {\\n            revert LazyMintERC721Base__TransferToNonERC721Receiver();\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function amountCreated() public view returns (uint256) {\\n        return _amountCreated;\\n    }\\n\\n    function remainingMintableSupply() public view returns (uint256) {\\n        return _remainingMintableSupply;\\n    }\\n\\n    function balanceOf(address owner_) public view virtual override returns (uint256) {\\n        if (owner_ == address(0)) {\\n            revert LazyMintERC721Base__AddressZeroIsNotAValidOwner();\\n        }\\n\\n        return _balances[owner_];\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address owner_) {\\n        (owner_, ) = _ownerOf(tokenId);\\n    }\\n\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) {\\n            revert LazyMintERC721Base__TokenDoesNotExist();\\n        }\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory);\\n\\n    function _transfer(\\n        address owner_,\\n        TokenOwner storage tokenOwner_,\\n        address from,\\n        address to,\\n        uint256 tokenId) internal virtual {\\n\\n        if (owner_ != from) {\\n            revert LazyMintERC721Base__TransferFromIncorrectOwner();\\n        }\\n        \\n        if (to == address(0)) {\\n            revert LazyMintERC721Base__TransferToTheZeroAddress();\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n\\n            if (tokenOwner_.transferCount < type(uint88).max) {\\n                ++tokenOwner_.transferCount;\\n            }\\n        }\\n\\n        tokenOwner_.transferred = true;\\n        tokenOwner_.ownerAddress = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    function _safeTransfer(\\n        address owner_,\\n        TokenOwner storage tokenOwner_,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data) internal virtual {\\n\\n        _transfer(owner_, tokenOwner_, from, to, tokenId);\\n\\n        if (!_checkOnERC721Received(from, to, tokenId, data)) {\\n            revert LazyMintERC721Base__TransferToNonERC721Receiver();\\n        }\\n    }\\n\\n    function _burn(address owner_, uint256 tokenId) internal virtual {\\n        _beforeTokenTransfer(owner_, address(0), tokenId, 1);\\n\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            _balances[owner_] -= 1;\\n        }\\n\\n        _owners[tokenId].transferred = true;\\n        _owners[tokenId].ownerAddress = address(0);\\n\\n        emit Transfer(owner_, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner_, address(0), tokenId, 1);\\n    }\\n\\n    function _setMaxSupplyNameAndSymbol(uint256 maxSupply_, string memory name_, string memory symbol_) internal virtual {\\n        if (maxSupply_ == 0) {\\n            revert LazyMintERC721Base__MaxSupplyMustBeGreaterThanZero();\\n        }\\n\\n        _remainingMintableSupply = maxSupply_;\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        if(_isValidTokenId(tokenId)) {\\n            TokenOwner memory tokenOwner = _owners[tokenId];\\n            return tokenOwner.ownerAddress != address(0) || !tokenOwner.transferred;\\n        } else {\\n            return false;   \\n        }\\n    }\\n\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address owner_, TokenOwner storage tokenOwner_) {\\n        tokenOwner_ = _owners[tokenId];\\n        if (tokenOwner_.transferred) {\\n            if (tokenOwner_.ownerAddress == address(0)) {\\n                revert LazyMintERC721Base__TokenDoesNotExist();\\n            }\\n\\n            owner_ = tokenOwner_.ownerAddress;\\n        } else {\\n            if (!_isValidTokenId(tokenId)) {\\n                revert LazyMintERC721Base__TokenDoesNotExist();\\n            }\\n\\n            owner_ = DEFAULT_TOKEN_OWNER;\\n        }\\n    }\\n\\n    function _isValidTokenId(uint256 tokenId) internal view returns (bool) {\\n        return tokenId <= _amountCreated && tokenId > 0;\\n    }\\n\\n    /** \\n     * @dev Validates that the caller is a minter\\n     * @dev Throws when the caller is not a minter\\n     */\\n    function _requireCallerIsMinterOrContractOwner() internal view virtual {\\n        _requireCallerIsContractOwner();\\n    }\\n\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert LazyMintERC721Base__TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n}\\n\\nabstract contract LazyMintERC721 is LazyMintERC721Base {\\n    constructor(uint256 maxSupply_, string memory name_, string memory symbol_) {\\n        _setMaxSupplyNameAndSymbol(maxSupply_, name_, symbol_);\\n    }\\n}\\n\\nabstract contract LazyMintERC721Initializable is LazyMintERC721Base {\\n\\n    error LazyMintERC721Initializable__AlreadyInitializedERC721();\\n\\n    /// @notice Specifies whether or not the contract is initialized\\n    bool private _erc721Initialized;\\n\\n    /// @dev Initializes parameters of ERC721 tokens.\\n    /// These cannot be set in the constructor because this contract is optionally compatible with EIP-1167.\\n    function initializeERC721(uint256 maxSupply_, string memory name_, string memory symbol_) public {\\n        _requireCallerIsContractOwner();\\n\\n        if(_erc721Initialized) {\\n            revert LazyMintERC721Initializable__AlreadyInitializedERC721();\\n        }\\n\\n        _erc721Initialized = true;\\n\\n        _setMaxSupplyNameAndSymbol(maxSupply_, name_, symbol_);\\n    }\\n}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/utils/CreatorTokenBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../access/OwnablePermissions.sol\\\";\\nimport \\\"../interfaces/ICreatorToken.sol\\\";\\nimport \\\"../interfaces/ICreatorTokenTransferValidator.sol\\\";\\nimport \\\"../utils/TransferValidation.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title CreatorTokenBase\\n * @author Limit Break, Inc.\\n * @notice CreatorTokenBase is an abstract contract that provides basic functionality for managing token \\n * transfer policies through an implementation of ICreatorTokenTransferValidator. This contract is intended to be used\\n * as a base for creator-specific token contracts, enabling customizable transfer restrictions and security policies.\\n *\\n * <h4>Features:</h4>\\n * <ul>Ownable: This contract can have an owner who can set and update the transfer validator.</ul>\\n * <ul>TransferValidation: Implements the basic token transfer validation interface.</ul>\\n * <ul>ICreatorToken: Implements the interface for creator tokens, providing view functions for token security policies.</ul>\\n *\\n * <h4>Benefits:</h4>\\n * <ul>Provides a flexible and modular way to implement custom token transfer restrictions and security policies.</ul>\\n * <ul>Allows creators to enforce policies such as whitelisted operators and permitted contract receivers.</ul>\\n * <ul>Can be easily integrated into other token contracts as a base contract.</ul>\\n *\\n * <h4>Intended Usage:</h4>\\n * <ul>Use as a base contract for creator token implementations that require advanced transfer restrictions and \\n *   security policies.</ul>\\n * <ul>Set and update the ICreatorTokenTransferValidator implementation contract to enforce desired policies for the \\n *   creator token.</ul>\\n */\\nabstract contract CreatorTokenBase is OwnablePermissions, TransferValidation, ICreatorToken {\\n    \\n    error CreatorTokenBase__InvalidTransferValidatorContract();\\n    error CreatorTokenBase__SetTransferValidatorFirst();\\n\\n    address public constant DEFAULT_TRANSFER_VALIDATOR = address(0x0000721C310194CcfC01E523fc93C9cCcFa2A0Ac);\\n    TransferSecurityLevels public constant DEFAULT_TRANSFER_SECURITY_LEVEL = TransferSecurityLevels.One;\\n    uint120 public constant DEFAULT_OPERATOR_WHITELIST_ID = uint120(1);\\n\\n    ICreatorTokenTransferValidator private transferValidator;\\n\\n    /**\\n     * @notice Allows the contract owner to set the transfer validator to the official validator contract\\n     *         and set the security policy to the recommended default settings.\\n     * @dev    May be overridden to change the default behavior of an individual collection.\\n     */\\n    function setToDefaultSecurityPolicy() public virtual {\\n        _requireCallerIsContractOwner();\\n        setTransferValidator(DEFAULT_TRANSFER_VALIDATOR);\\n        ICreatorTokenTransferValidator(DEFAULT_TRANSFER_VALIDATOR).setTransferSecurityLevelOfCollection(address(this), DEFAULT_TRANSFER_SECURITY_LEVEL);\\n        ICreatorTokenTransferValidator(DEFAULT_TRANSFER_VALIDATOR).setOperatorWhitelistOfCollection(address(this), DEFAULT_OPERATOR_WHITELIST_ID);\\n    }\\n\\n    /**\\n     * @notice Allows the contract owner to set the transfer validator to a custom validator contract\\n     *         and set the security policy to their own custom settings.\\n     */\\n    function setToCustomValidatorAndSecurityPolicy(\\n        address validator, \\n        TransferSecurityLevels level, \\n        uint120 operatorWhitelistId, \\n        uint120 permittedContractReceiversAllowlistId) public {\\n        _requireCallerIsContractOwner();\\n\\n        setTransferValidator(validator);\\n\\n        ICreatorTokenTransferValidator(validator).\\n            setTransferSecurityLevelOfCollection(address(this), level);\\n\\n        ICreatorTokenTransferValidator(validator).\\n            setOperatorWhitelistOfCollection(address(this), operatorWhitelistId);\\n\\n        ICreatorTokenTransferValidator(validator).\\n            setPermittedContractReceiverAllowlistOfCollection(address(this), permittedContractReceiversAllowlistId);\\n    }\\n\\n    /**\\n     * @notice Allows the contract owner to set the security policy to their own custom settings.\\n     * @dev    Reverts if the transfer validator has not been set.\\n     */\\n    function setToCustomSecurityPolicy(\\n        TransferSecurityLevels level, \\n        uint120 operatorWhitelistId, \\n        uint120 permittedContractReceiversAllowlistId) public {\\n        _requireCallerIsContractOwner();\\n\\n        ICreatorTokenTransferValidator validator = getTransferValidator();\\n        if (address(validator) == address(0)) {\\n            revert CreatorTokenBase__SetTransferValidatorFirst();\\n        }\\n\\n        validator.setTransferSecurityLevelOfCollection(address(this), level);\\n        validator.setOperatorWhitelistOfCollection(address(this), operatorWhitelistId);\\n        validator.setPermittedContractReceiverAllowlistOfCollection(address(this), permittedContractReceiversAllowlistId);\\n    }\\n\\n    /**\\n     * @notice Sets the transfer validator for the token contract.\\n     *\\n     * @dev    Throws when provided validator contract is not the zero address and doesn't support \\n     *         the ICreatorTokenTransferValidator interface. \\n     * @dev    Throws when the caller is not the contract owner.\\n     *\\n     * @dev    <h4>Postconditions:</h4>\\n     *         1. The transferValidator address is updated.\\n     *         2. The `TransferValidatorUpdated` event is emitted.\\n     *\\n     * @param transferValidator_ The address of the transfer validator contract.\\n     */\\n    function setTransferValidator(address transferValidator_) public {\\n        _requireCallerIsContractOwner();\\n\\n        bool isValidTransferValidator = false;\\n\\n        if(transferValidator_.code.length > 0) {\\n            try IERC165(transferValidator_).supportsInterface(type(ICreatorTokenTransferValidator).interfaceId) \\n                returns (bool supportsInterface) {\\n                isValidTransferValidator = supportsInterface;\\n            } catch {}\\n        }\\n\\n        if(transferValidator_ != address(0) && !isValidTransferValidator) {\\n            revert CreatorTokenBase__InvalidTransferValidatorContract();\\n        }\\n\\n        emit TransferValidatorUpdated(address(transferValidator), transferValidator_);\\n\\n        transferValidator = ICreatorTokenTransferValidator(transferValidator_);\\n    }\\n\\n    /**\\n     * @notice Returns the transfer validator contract address for this token contract.\\n     */\\n    function getTransferValidator() public view override returns (ICreatorTokenTransferValidator) {\\n        return transferValidator;\\n    }\\n\\n    /**\\n     * @notice Returns the security policy for this token contract, which includes:\\n     *         Transfer security level, operator whitelist id, permitted contract receiver allowlist id.\\n     */\\n    function getSecurityPolicy() public view override returns (CollectionSecurityPolicy memory) {\\n        if (address(transferValidator) != address(0)) {\\n            return transferValidator.getCollectionSecurityPolicy(address(this));\\n        }\\n\\n        return CollectionSecurityPolicy({\\n            transferSecurityLevel: TransferSecurityLevels.Zero,\\n            operatorWhitelistId: 0,\\n            permittedContractReceiversId: 0\\n        });\\n    }\\n\\n    /**\\n     * @notice Returns the list of all whitelisted operators for this token contract.\\n     * @dev    This can be an expensive call and should only be used in view-only functions.\\n     */\\n    function getWhitelistedOperators() public view override returns (address[] memory) {\\n        if (address(transferValidator) != address(0)) {\\n            return transferValidator.getWhitelistedOperators(\\n                transferValidator.getCollectionSecurityPolicy(address(this)).operatorWhitelistId);\\n        }\\n\\n        return new address[](0);\\n    }\\n\\n    /**\\n     * @notice Returns the list of permitted contract receivers for this token contract.\\n     * @dev    This can be an expensive call and should only be used in view-only functions.\\n     */\\n    function getPermittedContractReceivers() public view override returns (address[] memory) {\\n        if (address(transferValidator) != address(0)) {\\n            return transferValidator.getPermittedContractReceivers(\\n                transferValidator.getCollectionSecurityPolicy(address(this)).permittedContractReceiversId);\\n        }\\n\\n        return new address[](0);\\n    }\\n\\n    /**\\n     * @notice Checks if an operator is whitelisted for this token contract.\\n     * @param operator The address of the operator to check.\\n     */\\n    function isOperatorWhitelisted(address operator) public view override returns (bool) {\\n        if (address(transferValidator) != address(0)) {\\n            return transferValidator.isOperatorWhitelisted(\\n                transferValidator.getCollectionSecurityPolicy(address(this)).operatorWhitelistId, operator);\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Checks if a contract receiver is permitted for this token contract.\\n     * @param receiver The address of the receiver to check.\\n     */\\n    function isContractReceiverPermitted(address receiver) public view override returns (bool) {\\n        if (address(transferValidator) != address(0)) {\\n            return transferValidator.isContractReceiverPermitted(\\n                transferValidator.getCollectionSecurityPolicy(address(this)).permittedContractReceiversId, receiver);\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Determines if a transfer is allowed based on the token contract's security policy.  Use this function\\n     *         to simulate whether or not a transfer made by the specified `caller` from the `from` address to the `to`\\n     *         address would be allowed by this token's security policy.\\n     *\\n     * @notice This function only checks the security policy restrictions and does not check whether token ownership\\n     *         or approvals are in place. \\n     *\\n     * @param caller The address of the simulated caller.\\n     * @param from   The address of the sender.\\n     * @param to     The address of the receiver.\\n     * @return       True if the transfer is allowed, false otherwise.\\n     */\\n    function isTransferAllowed(address caller, address from, address to) public view override returns (bool) {\\n        if (address(transferValidator) != address(0)) {\\n            try transferValidator.applyCollectionTransferPolicy(caller, from, to) {\\n                return true;\\n            } catch {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Pre-validates a token transfer, reverting if the transfer is not allowed by this token's security policy.\\n     *      Inheriting contracts are responsible for overriding the _beforeTokenTransfer function, or its equivalent\\n     *      and calling _validateBeforeTransfer so that checks can be properly applied during token transfers.\\n     *\\n     * @dev Throws when the transfer doesn't comply with the collection's transfer policy, if the transferValidator is\\n     *      set to a non-zero address.\\n     *\\n     * @param caller  The address of the caller.\\n     * @param from    The address of the sender.\\n     * @param to      The address of the receiver.\\n     */\\n    function _preValidateTransfer(\\n        address caller, \\n        address from, \\n        address to, \\n        uint256 /*tokenId*/, \\n        uint256 /*value*/) internal virtual override {\\n        if (address(transferValidator) != address(0)) {\\n            transferValidator.applyCollectionTransferPolicy(caller, from, to);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nstruct TokenOwner {\\n    bool transferred;\\n    uint88 transferCount;\\n    address ownerAddress;\\n}\\n\\nstruct SignatureECDSA {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\nstruct Redemption721 {\\n    uint256 nonce;\\n    uint256 expiration;\\n    address destination;\\n    address tokenAddress;\\n    uint256 tokenId;\\n}\\n\\nstruct RedemptionBatch721 {\\n    uint256 nonce;\\n    uint256 expiration;\\n    address destination;\\n    address[] tokenAddresses;\\n    uint256[] tokenIds;\\n}\\n\\nstruct Redemption1155 {\\n    uint256 nonce;\\n    uint256 expiration;\\n    address destination;\\n    address tokenAddress;\\n    uint256[] tokenIds;\\n    uint256[] amounts;\\n}\\n\\nstruct TokenTypeSupply {\\n    bool registered;\\n    uint120 amountCreated;\\n    uint120 remainingMintableSupply;\\n}\\n\\nstruct AuthorizedMint1155 {\\n    uint256 nonce;\\n    uint256 expiration;\\n    address destination;\\n    uint256 id;\\n    uint120 amount;\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/interfaces/ICreatorToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ICreatorTokenTransferValidator.sol\\\";\\n\\ninterface ICreatorToken {\\n    event TransferValidatorUpdated(address oldValidator, address newValidator);\\n\\n    function getTransferValidator() external view returns (ICreatorTokenTransferValidator);\\n    function getSecurityPolicy() external view returns (CollectionSecurityPolicy memory);\\n    function getWhitelistedOperators() external view returns (address[] memory);\\n    function getPermittedContractReceivers() external view returns (address[] memory);\\n    function isOperatorWhitelisted(address operator) external view returns (bool);\\n    function isContractReceiverPermitted(address receiver) external view returns (bool);\\n    function isTransferAllowed(address caller, address from, address to) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/interfaces/ICreatorTokenTransferValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IEOARegistry.sol\\\";\\nimport \\\"./ITransferSecurityRegistry.sol\\\";\\nimport \\\"./ITransferValidator.sol\\\";\\n\\ninterface ICreatorTokenTransferValidator is ITransferSecurityRegistry, ITransferValidator, IEOARegistry {}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/utils/TransferValidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title TransferValidation\\n * @author Limit Break, Inc.\\n * @notice A mix-in that can be combined with ERC-721 contracts to provide more granular hooks.\\n * Openzeppelin's ERC721 contract only provides hooks for before and after transfer.  This allows\\n * developers to validate or customize transfers within the context of a mint, a burn, or a transfer.\\n */\\nabstract contract TransferValidation is Context {\\n    \\n    error ShouldNotMintToBurnAddress();\\n\\n    /// @dev Inheriting contracts should call this function in the _beforeTokenTransfer function to get more granular hooks.\\n    function _validateBeforeTransfer(address from, address to, uint256 tokenId) internal virtual {\\n        bool fromZeroAddress = from == address(0);\\n        bool toZeroAddress = to == address(0);\\n\\n        if(fromZeroAddress && toZeroAddress) {\\n            revert ShouldNotMintToBurnAddress();\\n        } else if(fromZeroAddress) {\\n            _preValidateMint(_msgSender(), to, tokenId, msg.value);\\n        } else if(toZeroAddress) {\\n            _preValidateBurn(_msgSender(), from, tokenId, msg.value);\\n        } else {\\n            _preValidateTransfer(_msgSender(), from, to, tokenId, msg.value);\\n        }\\n    }\\n\\n    /// @dev Inheriting contracts should call this function in the _afterTokenTransfer function to get more granular hooks.\\n    function _validateAfterTransfer(address from, address to, uint256 tokenId) internal virtual {\\n        bool fromZeroAddress = from == address(0);\\n        bool toZeroAddress = to == address(0);\\n\\n        if(fromZeroAddress && toZeroAddress) {\\n            revert ShouldNotMintToBurnAddress();\\n        } else if(fromZeroAddress) {\\n            _postValidateMint(_msgSender(), to, tokenId, msg.value);\\n        } else if(toZeroAddress) {\\n            _postValidateBurn(_msgSender(), from, tokenId, msg.value);\\n        } else {\\n            _postValidateTransfer(_msgSender(), from, to, tokenId, msg.value);\\n        }\\n    }\\n\\n    /// @dev Optional validation hook that fires before a mint\\n    function _preValidateMint(address caller, address to, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a mint\\n    function _postValidateMint(address caller, address to, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires before a burn\\n    function _preValidateBurn(address caller, address from, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a burn\\n    function _postValidateBurn(address caller, address from, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires before a transfer\\n    function _preValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 value) internal virtual {}\\n\\n    /// @dev Optional validation hook that fires after a transfer\\n    function _postValidateTransfer(address caller, address from, address to, uint256 tokenId, uint256 value) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/interfaces/IEOARegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface IEOARegistry is IERC165 {\\n    function isVerifiedEOA(address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/interfaces/ITransferSecurityRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/TransferPolicy.sol\\\";\\n\\ninterface ITransferSecurityRegistry {\\n    event AddedToAllowlist(AllowlistTypes indexed kind, uint256 indexed id, address indexed account);\\n    event CreatedAllowlist(AllowlistTypes indexed kind, uint256 indexed id, string indexed name);\\n    event ReassignedAllowlistOwnership(AllowlistTypes indexed kind, uint256 indexed id, address indexed newOwner);\\n    event RemovedFromAllowlist(AllowlistTypes indexed kind, uint256 indexed id, address indexed account);\\n    event SetAllowlist(AllowlistTypes indexed kind, address indexed collection, uint120 indexed id);\\n    event SetTransferSecurityLevel(address indexed collection, TransferSecurityLevels level);\\n\\n    function createOperatorWhitelist(string calldata name) external returns (uint120);\\n    function createPermittedContractReceiverAllowlist(string calldata name) external returns (uint120);\\n    function reassignOwnershipOfOperatorWhitelist(uint120 id, address newOwner) external;\\n    function reassignOwnershipOfPermittedContractReceiverAllowlist(uint120 id, address newOwner) external;\\n    function renounceOwnershipOfOperatorWhitelist(uint120 id) external;\\n    function renounceOwnershipOfPermittedContractReceiverAllowlist(uint120 id) external;\\n    function setTransferSecurityLevelOfCollection(address collection, TransferSecurityLevels level) external;\\n    function setOperatorWhitelistOfCollection(address collection, uint120 id) external;\\n    function setPermittedContractReceiverAllowlistOfCollection(address collection, uint120 id) external;\\n    function addOperatorToWhitelist(uint120 id, address operator) external;\\n    function addPermittedContractReceiverToAllowlist(uint120 id, address receiver) external;\\n    function removeOperatorFromWhitelist(uint120 id, address operator) external;\\n    function removePermittedContractReceiverFromAllowlist(uint120 id, address receiver) external;\\n    function getCollectionSecurityPolicy(address collection) external view returns (CollectionSecurityPolicy memory);\\n    function getWhitelistedOperators(uint120 id) external view returns (address[] memory);\\n    function getPermittedContractReceivers(uint120 id) external view returns (address[] memory);\\n    function isOperatorWhitelisted(uint120 id, address operator) external view returns (bool);\\n    function isContractReceiverPermitted(uint120 id, address receiver) external view returns (bool);\\n}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/interfaces/ITransferValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../utils/TransferPolicy.sol\\\";\\n\\ninterface ITransferValidator {\\n    function applyCollectionTransferPolicy(address caller, address from, address to) external view;\\n}\"\r\n    },\r\n    \"lib/creator-token-contracts/contracts/utils/TransferPolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nenum AllowlistTypes {\\n    Operators,\\n    PermittedContractReceivers\\n}\\n\\nenum ReceiverConstraints {\\n    None,\\n    NoCode,\\n    EOA\\n}\\n\\nenum CallerConstraints {\\n    None,\\n    OperatorWhitelistEnableOTC,\\n    OperatorWhitelistDisableOTC\\n}\\n\\nenum StakerConstraints {\\n    None,\\n    CallerIsTxOrigin,\\n    EOA\\n}\\n\\nenum TransferSecurityLevels {\\n    Zero,\\n    One,\\n    Two,\\n    Three,\\n    Four,\\n    Five,\\n    Six\\n}\\n\\nstruct TransferSecurityPolicy {\\n    CallerConstraints callerConstraints;\\n    ReceiverConstraints receiverConstraints;\\n}\\n\\nstruct CollectionSecurityPolicy {\\n    TransferSecurityLevels transferSecurityLevel;\\n    uint120 operatorWhitelistId;\\n    uint120 permittedContractReceiversId;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@limitbreak/creator-token-contracts/=lib/creator-token-contracts/\",\r\n      \"@solady/=lib/solady/src/\",\r\n      \"creator-token-contracts/=lib/creator-token-contracts/contracts/\",\r\n      \"hardhat/=lib/creator-token-contracts/node_modules/hardhat/\",\r\n      \"murky/=lib/creator-token-contracts/lib/murky/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solady/=lib/solady/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlledMintersInitializable__AdminAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessControlledMinters__CallerDoesNotHaveAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessControlledMinters__CannotTransferAdminRoleToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessControlledMinters__CannotTransferAdminRoleToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenBase__InvalidTransferValidatorContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CreatorTokenBase__SetTransferValidatorFirst\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitializableOwnable__OwnerAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__AddressZeroIsNotAValidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__AmountExceedsMaxRemainingSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__AmountMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__ApproveCallerIsNotTokenOwnerOrApprovedForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__MaxSupplyMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__MaxTokensPerConsecutiveTransferMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__MaxTokensPerConsecutiveTransferUpperLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__TransferCallerIsNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__TransferToNonERC721Receiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Base__TransferToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LazyMintERC721Initializable__AlreadyInitializedERC721\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MetadataURIInitializable__URIAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShouldNotMintToBurnAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"BaseURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"DefaultRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"suffixURI\",\"type\":\"string\"}],\"name\":\"SuffixURISet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"TokenRoyaltySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValidator\",\"type\":\"address\"}],\"name\":\"TransferValidatorUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_OPERATOR_WHITELIST_ID\",\"outputs\":[{\"internalType\":\"uint120\",\"name\":\"\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_TOKEN_OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_TRANSFER_SECURITY_LEVEL\",\"outputs\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_TRANSFER_VALIDATOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_PER_CONSECUTIVE_TRANSFER_UPPER_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountCreated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPermittedContractReceivers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSecurityPolicy\",\"outputs\":[{\"components\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"transferSecurityLevel\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"operatorWhitelistId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"permittedContractReceiversId\",\"type\":\"uint120\"}],\"internalType\":\"struct CollectionSecurityPolicy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferValidator\",\"outputs\":[{\"internalType\":\"contract ICreatorTokenTransferValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"initializeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"name\":\"initializeERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initializeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"suffixURI_\",\"type\":\"string\"}],\"name\":\"initializeURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"isContractReceiverPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperatorWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"isTransferAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTokensPerConsecutiveTransfer\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingMintableSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setDefaultRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"suffixURI_\",\"type\":\"string\"}],\"name\":\"setSuffixURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"operatorWhitelistId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"permittedContractReceiversAllowlistId\",\"type\":\"uint120\"}],\"name\":\"setToCustomSecurityPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"enum TransferSecurityLevels\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"operatorWhitelistId\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"permittedContractReceiversAllowlistId\",\"type\":\"uint120\"}],\"name\":\"setToCustomValidatorAndSecurityPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setToDefaultSecurityPolicy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"feeNumerator\",\"type\":\"uint96\"}],\"name\":\"setTokenRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"transferValidator_\",\"type\":\"address\"}],\"name\":\"setTransferValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suffixURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdminRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NFT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "50000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}