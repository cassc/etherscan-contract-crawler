{"SourceCode": "pragma solidity ^0.4.13;\r\n\r\nlibrary MerkleProof {\r\n  /*\r\n   * @dev Verifies a Merkle proof proving the existence of a leaf in a Merkle tree. Assumes that each pair of leaves\r\n   * and each pair of pre-images is sorted.\r\n   * @param _proof Merkle proof containing sibling hashes on the branch from the leaf to the root of the Merkle tree\r\n   * @param _root Merkle root\r\n   * @param _leaf Leaf of Merkle tree\r\n   */\r\n  function verifyProof(bytes _proof, bytes32 _root, bytes32 _leaf) public pure returns (bool) {\r\n    // Check if proof length is a multiple of 32\r\n    if (_proof.length % 32 != 0) return false;\r\n\r\n    bytes32 proofElement;\r\n    bytes32 computedHash = _leaf;\r\n\r\n    for (uint256 i = 32; i <= _proof.length; i += 32) {\r\n      assembly {\r\n        // Load the current element of the proof\r\n        proofElement := mload(add(_proof, i))\r\n      }\r\n\r\n      if (computedHash < proofElement) {\r\n        // Hash(current computed hash + current element of the proof)\r\n        computedHash = keccak256(computedHash, proofElement);\r\n      } else {\r\n        // Hash(current element of the proof + current computed hash)\r\n        computedHash = keccak256(proofElement, computedHash);\r\n      }\r\n    }\r\n\r\n    // Check if the computed hash (root) is equal to the provided root\r\n    return computedHash == _root;\r\n  }\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param _value The amount of token to be burned.\r\n     */\r\n    function burn(uint256 _value) public {\r\n        require(_value > 0);\r\n        require(_value <= balances[msg.sender]);\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n}\r\n\r\ncontract DelayedReleaseToken is StandardToken {\r\n\r\n    /* Temporary administrator address, only used for the initial token release, must be initialized by token constructor. */\r\n    address temporaryAdmin;\r\n\r\n    /* Whether or not the delayed token release has occurred. */\r\n    bool hasBeenReleased = false;\r\n\r\n    /* Number of tokens to be released, must be initialized by token constructor. */\r\n    uint numberOfDelayedTokens;\r\n\r\n    /* Event for convenience. */\r\n    event TokensReleased(address destination, uint numberOfTokens);\r\n\r\n    /**\r\n     * @dev Release the previously specified amount of tokens to the provided address\r\n     * @param destination Address for which tokens will be released (minted) \r\n     */\r\n    function releaseTokens(address destination) public {\r\n        require((msg.sender == temporaryAdmin) && (!hasBeenReleased));\r\n        hasBeenReleased = true;\r\n        balances[destination] = numberOfDelayedTokens;\r\n        Transfer(address(0), destination, numberOfDelayedTokens); \r\n        TokensReleased(destination, numberOfDelayedTokens);\r\n    }\r\n\r\n}\r\n\r\ncontract UTXORedeemableToken is StandardToken {\r\n\r\n    /* Root hash of the UTXO Merkle tree, must be initialized by token constructor. */\r\n    bytes32 public rootUTXOMerkleTreeHash;\r\n\r\n    /* Redeemed UTXOs. */\r\n    mapping(bytes32 => bool) redeemedUTXOs;\r\n\r\n    /* Multiplier - tokens per Satoshi, must be initialized by token constructor. */\r\n    uint public multiplier;\r\n\r\n    /* Total tokens redeemed so far. */\r\n    uint public totalRedeemed = 0;\r\n\r\n    /* Maximum redeemable tokens, must be initialized by token constructor. */\r\n    uint public maximumRedeemable;\r\n\r\n    /* Redemption event, containing all relevant data for later analysis if desired. */\r\n    event UTXORedeemed(bytes32 txid, uint8 outputIndex, uint satoshis, bytes proof, bytes pubKey, uint8 v, bytes32 r, bytes32 s, address indexed redeemer, uint numberOfTokens);\r\n\r\n    /**\r\n     * @dev Extract a bytes32 subarray from an arbitrary length bytes array.\r\n     * @param data Bytes array from which to extract the subarray\r\n     * @param pos Starting position from which to copy\r\n     * @return Extracted length 32 byte array\r\n     */\r\n    function extract(bytes data, uint pos) private pure returns (bytes32 result) { \r\n        for (uint i = 0; i < 32; i++) {\r\n            result ^= (bytes32(0xff00000000000000000000000000000000000000000000000000000000000000) & data[i + pos]) >> (i * 8);\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    /**\r\n     * @dev Validate that a provided ECSDA signature was signed by the specified address\r\n     * @param hash Hash of signed data\r\n     * @param v v parameter of ECDSA signature\r\n     * @param r r parameter of ECDSA signature\r\n     * @param s s parameter of ECDSA signature\r\n     * @param expected Address claiming to have created this signature\r\n     * @return Whether or not the signature was valid\r\n     */\r\n    function validateSignature (bytes32 hash, uint8 v, bytes32 r, bytes32 s, address expected) public pure returns (bool) {\r\n        return ecrecover(hash, v, r, s) == expected;\r\n    }\r\n\r\n    /**\r\n     * @dev Validate that the hash of a provided address was signed by the ECDSA public key associated with the specified Ethereum address\r\n     * @param addr Address signed\r\n     * @param pubKey Uncompressed ECDSA public key claiming to have created this signature\r\n     * @param v v parameter of ECDSA signature\r\n     * @param r r parameter of ECDSA signature\r\n     * @param s s parameter of ECDSA signature\r\n     * @return Whether or not the signature was valid\r\n     */\r\n    function ecdsaVerify (address addr, bytes pubKey, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {\r\n        return validateSignature(sha256(addr), v, r, s, pubKeyToEthereumAddress(pubKey));\r\n    }\r\n\r\n    /**\r\n     * @dev Convert an uncompressed ECDSA public key into an Ethereum address\r\n     * @param pubKey Uncompressed ECDSA public key to convert\r\n     * @return Ethereum address generated from the ECDSA public key\r\n     */\r\n    function pubKeyToEthereumAddress (bytes pubKey) public pure returns (address) {\r\n        return address(uint(keccak256(pubKey)) & 0x000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the Bitcoin-style address associated with an ECDSA public key\r\n     * @param pubKey ECDSA public key to convert\r\n     * @param isCompressed Whether or not the Bitcoin address was generated from a compressed key\r\n     * @return Raw Bitcoin address (no base58-check encoding)\r\n     */\r\n    function pubKeyToBitcoinAddress(bytes pubKey, bool isCompressed) public pure returns (bytes20) {\r\n        /* Helpful references:\r\n           - https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses \r\n           - https://github.com/cryptocoinjs/ecurve/blob/master/lib/point.js\r\n        */\r\n\r\n        /* x coordinate - first 32 bytes of public key */\r\n        uint x = uint(extract(pubKey, 0));\r\n        /* y coordinate - second 32 bytes of public key */\r\n        uint y = uint(extract(pubKey, 32)); \r\n        uint8 startingByte;\r\n        if (isCompressed) {\r\n            /* Hash the compressed public key format. */\r\n            startingByte = y % 2 == 0 ? 0x02 : 0x03;\r\n            return ripemd160(sha256(startingByte, x));\r\n        } else {\r\n            /* Hash the uncompressed public key format. */\r\n            startingByte = 0x04;\r\n            return ripemd160(sha256(startingByte, x, y));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Verify a Merkle proof using the UTXO Merkle tree\r\n     * @param proof Generated Merkle tree proof\r\n     * @param merkleLeafHash Hash asserted to be present in the Merkle tree\r\n     * @return Whether or not the proof is valid\r\n     */\r\n    function verifyProof(bytes proof, bytes32 merkleLeafHash) public constant returns (bool) {\r\n        return MerkleProof.verifyProof(proof, rootUTXOMerkleTreeHash, merkleLeafHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Convenience helper function to check if a UTXO can be redeemed\r\n     * @param txid Transaction hash\r\n     * @param originalAddress Raw Bitcoin address (no base58-check encoding)\r\n     * @param outputIndex Output index of UTXO\r\n     * @param satoshis Amount of UTXO in satoshis\r\n     * @param proof Merkle tree proof\r\n     * @return Whether or not the UTXO can be redeemed\r\n     */\r\n    function canRedeemUTXO(bytes32 txid, bytes20 originalAddress, uint8 outputIndex, uint satoshis, bytes proof) public constant returns (bool) {\r\n        /* Calculate the hash of the Merkle leaf associated with this UTXO. */\r\n        bytes32 merkleLeafHash = keccak256(txid, originalAddress, outputIndex, satoshis);\r\n    \r\n        /* Verify the proof. */\r\n        return canRedeemUTXOHash(merkleLeafHash, proof);\r\n    }\r\n      \r\n    /**\r\n     * @dev Verify that a UTXO with the specified Merkle leaf hash can be redeemed\r\n     * @param merkleLeafHash Merkle tree hash of the UTXO to be checked\r\n     * @param proof Merkle tree proof\r\n     * @return Whether or not the UTXO with the specified hash can be redeemed\r\n     */\r\n    function canRedeemUTXOHash(bytes32 merkleLeafHash, bytes proof) public constant returns (bool) {\r\n        /* Check that the UTXO has not yet been redeemed and that it exists in the Merkle tree. */\r\n        return((redeemedUTXOs[merkleLeafHash] == false) && verifyProof(proof, merkleLeafHash));\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem a UTXO, crediting a proportional amount of tokens (if valid) to the sending address\r\n     * @param txid Transaction hash\r\n     * @param outputIndex Output index of the UTXO\r\n     * @param satoshis Amount of UTXO in satoshis\r\n     * @param proof Merkle tree proof\r\n     * @param pubKey Uncompressed ECDSA public key to which the UTXO was sent\r\n     * @param isCompressed Whether the Bitcoin address was generated from a compressed public key\r\n     * @param v v parameter of ECDSA signature\r\n     * @param r r parameter of ECDSA signature\r\n     * @param s s parameter of ECDSA signature\r\n     * @return The number of tokens redeemed, if successful\r\n     */\r\n    function redeemUTXO (bytes32 txid, uint8 outputIndex, uint satoshis, bytes proof, bytes pubKey, bool isCompressed, uint8 v, bytes32 r, bytes32 s) public returns (uint tokensRedeemed) {\r\n\r\n        /* Calculate original Bitcoin-style address associated with the provided public key. */\r\n        bytes20 originalAddress = pubKeyToBitcoinAddress(pubKey, isCompressed);\r\n\r\n        /* Calculate the UTXO Merkle leaf hash. */\r\n        bytes32 merkleLeafHash = keccak256(txid, originalAddress, outputIndex, satoshis);\r\n\r\n        /* Verify that the UTXO can be redeemed. */\r\n        require(canRedeemUTXOHash(merkleLeafHash, proof));\r\n\r\n        /* Claimant must sign the Ethereum address to which they wish to remit the redeemed tokens. */\r\n        require(ecdsaVerify(msg.sender, pubKey, v, r, s));\r\n\r\n        /* Mark the UTXO as redeemed. */\r\n        redeemedUTXOs[merkleLeafHash] = true;\r\n\r\n        /* Calculate the redeemed tokens. */\r\n        tokensRedeemed = SafeMath.mul(satoshis, multiplier);\r\n\r\n        /* Track total redeemed tokens. */\r\n        totalRedeemed = SafeMath.add(totalRedeemed, tokensRedeemed);\r\n\r\n        /* Sanity check. */\r\n        require(totalRedeemed <= maximumRedeemable);\r\n\r\n        /* Credit the redeemer. */ \r\n        balances[msg.sender] = SafeMath.add(balances[msg.sender], tokensRedeemed);\r\n\r\n        /* Mark the transfer event. */\r\n        Transfer(address(0), msg.sender, tokensRedeemed);\r\n\r\n        /* Mark the UTXO redemption event. */\r\n        UTXORedeemed(txid, outputIndex, satoshis, proof, pubKey, v, r, s, msg.sender, tokensRedeemed);\r\n        \r\n        /* Return the number of tokens redeemed. */\r\n        return tokensRedeemed;\r\n\r\n    }\r\n\r\n}\r\n\r\ncontract WyvernToken is DelayedReleaseToken, UTXORedeemableToken, BurnableToken {\r\n\r\n    uint constant public decimals     = 18;\r\n    string constant public name       = \"Project Wyvern Token\";\r\n    string constant public symbol     = \"WYV\";\r\n\r\n    /* Amount of tokens per Wyvern. */\r\n    uint constant public MULTIPLIER       = 1;\r\n\r\n    /* Constant for conversion from satoshis to tokens. */\r\n    uint constant public SATS_TO_TOKENS   = MULTIPLIER * (10 ** decimals) / (10 ** 8);\r\n\r\n    /* Total mint amount, in tokens (will be reached when all UTXOs are redeemed). */\r\n    uint constant public MINT_AMOUNT      = 2000000 * MULTIPLIER * (10 ** decimals);\r\n\r\n    /**\r\n      * @dev Initialize the Wyvern token\r\n      * @param merkleRoot Merkle tree root of the UTXO set\r\n      * @param totalUtxoAmount Total satoshis of the UTXO set\r\n      */\r\n    function WyvernToken (bytes32 merkleRoot, uint totalUtxoAmount) public {\r\n        /* Total number of tokens that can be redeemed from UTXOs. */\r\n        uint utxoTokens = SATS_TO_TOKENS * totalUtxoAmount;\r\n\r\n        /* Configure DelayedReleaseToken. */\r\n        temporaryAdmin = msg.sender;\r\n        numberOfDelayedTokens = MINT_AMOUNT - utxoTokens;\r\n\r\n        /* Configure UTXORedeemableToken. */\r\n        rootUTXOMerkleTreeHash = merkleRoot;\r\n        totalSupply = MINT_AMOUNT;\r\n        maximumRedeemable = utxoTokens;\r\n        multiplier = SATS_TO_TOKENS;\r\n    }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"txid\",\"type\":\"bytes32\"},{\"name\":\"originalAddress\",\"type\":\"bytes20\"},{\"name\":\"outputIndex\",\"type\":\"uint8\"},{\"name\":\"satoshis\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"canRedeemUTXO\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumRedeemable\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"proof\",\"type\":\"bytes\"},{\"name\":\"merkleLeafHash\",\"type\":\"bytes32\"}],\"name\":\"verifyProof\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"pubKeyToEthereumAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_AMOUNT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"merkleLeafHash\",\"type\":\"bytes32\"},{\"name\":\"proof\",\"type\":\"bytes\"}],\"name\":\"canRedeemUTXOHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"},{\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"validateSignature\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"txid\",\"type\":\"bytes32\"},{\"name\":\"outputIndex\",\"type\":\"uint8\"},{\"name\":\"satoshis\",\"type\":\"uint256\"},{\"name\":\"proof\",\"type\":\"bytes\"},{\"name\":\"pubKey\",\"type\":\"bytes\"},{\"name\":\"isCompressed\",\"type\":\"bool\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"redeemUTXO\",\"outputs\":[{\"name\":\"tokensRedeemed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"pubKey\",\"type\":\"bytes\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ecdsaVerify\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pubKey\",\"type\":\"bytes\"},{\"name\":\"isCompressed\",\"type\":\"bool\"}],\"name\":\"pubKeyToBitcoinAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes20\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rootUTXOMerkleTreeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRedeemed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SATS_TO_TOKENS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"name\":\"totalUtxoAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"txid\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"outputIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"satoshis\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"proof\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"pubKey\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"v\",\"type\":\"uint8\"},{\"indexed\":false,\"name\":\"r\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"UTXORedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"destination\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokensReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "WyvernToken", "CompilerVersion": "v0.4.18+commit.9cf6e910", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "bfdda2cdd0ddffbde454c05ba311161075f0baa7ee43681b8cd44669883ba4450000000000000000000000000000000000000000000000000000a92519f20ed2", "EVMVersion": "Default", "Library": "MerkleProof:cc3bf5a8e925f7b70238eda8dbe51b2a5ea8ae2c", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://993b0602a8a20d6ec31e355ba41211525d085bd607717cf30adcef404a7c0c08"}