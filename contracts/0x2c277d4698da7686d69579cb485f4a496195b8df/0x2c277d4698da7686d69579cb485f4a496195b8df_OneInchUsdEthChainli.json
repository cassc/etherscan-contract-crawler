{"SourceCode": "// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/oracles/onchainSubIds/chainlink/OneInchUsdEthOracleSubId.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n\r\ninterface IShortAggregatorInterface {\r\n  function latestAnswer() external view returns (int256);\r\n}\r\n\r\ncontract OneInchUsdEthOracleSubId {\r\n  using SafeMath for uint256;\r\n\r\n  function getResult() public view returns (uint256) {\r\n    // Instance of Chainlink 1INCH/USD price feed\r\n    uint256 oneInchUsdPrice = uint256(IShortAggregatorInterface(0xc929ad75B72593967DE83E7F7Cda0493458261D9).latestAnswer());\r\n\r\n    // Data are provided with 8 decimals, adjust to 18 decimals\r\n    uint256 result = oneInchUsdPrice.mul(1e10);\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n// File: contracts/oracles/chainlink/OneInchUsdEthChainlinkOracleId.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n\r\n/// @title Opium.Interface.IOracleId contract is an interface that every oracleId should implement\r\ninterface IOracleId {\r\n    /// @notice Requests data from `oracleId` one time\r\n    /// @param timestamp uint256 Timestamp at which data are needed\r\n    function fetchData(uint256 timestamp) external payable;\r\n\r\n    /// @notice Requests data from `oracleId` multiple times\r\n    /// @param timestamp uint256 Timestamp at which data are needed for the first time\r\n    /// @param period uint256 Period in seconds between multiple timestamps\r\n    /// @param times uint256 How many timestamps are requested\r\n    function recursivelyFetchData(uint256 timestamp, uint256 period, uint256 times) external payable;\r\n\r\n    /// @notice Requests and returns price in ETH for one request. This function could be called as `view` function. Oraclize API for price calculations restricts making this function as view.\r\n    /// @return fetchPrice uint256 Price of one data request in ETH\r\n    function calculateFetchPrice() external returns (uint256 fetchPrice);\r\n\r\n    // Event with oracleId metadata JSON string (for DIB.ONE derivative explorer)\r\n    event MetadataSet(string metadata);\r\n}\r\n\r\ninterface IOracleAggregator {\r\n  function __callback(uint256 timestamp, uint256 data) external;\r\n  function hasData(address oracleId, uint256 timestamp) external view returns(bool result);\r\n}\r\n\r\ncontract OneInchUsdEthChainlinkOracleId is OneInchUsdEthOracleSubId, IOracleId {\r\n  event Provided(uint256 indexed timestamp, uint256 result);\r\n\r\n  // Opium\r\n  IOracleAggregator public oracleAggregator;\r\n\r\n  // Governance\r\n  address public _owner;\r\n  uint256 public EMERGENCY_PERIOD;\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, \"N.O\"); // N.O = not an owner\r\n    _;\r\n  }\r\n\r\n  constructor(IOracleAggregator _oracleAggregator, uint256 _emergencyPeriod) public {\r\n    // Opium\r\n    oracleAggregator = _oracleAggregator;\r\n\r\n    // Governance\r\n    _owner = msg.sender;\r\n    EMERGENCY_PERIOD = _emergencyPeriod;\r\n    /*\r\n    {\r\n      \"author\": \"Opium.Team\",\r\n      \"description\": \"1INCH/USD Oracle ID\",\r\n      \"asset\": \"1INCH/USD\",\r\n      \"type\": \"onchain\",\r\n      \"source\": \"chainlink\",\r\n      \"logic\": \"none\",\r\n      \"path\": \"latestAnswer()\"\r\n    }\r\n    */\r\n    emit MetadataSet(\"{\\\"author\\\":\\\"Opium.Team\\\",\\\"description\\\":\\\"1INCH/USD Oracle ID\\\",\\\"asset\\\":\\\"1INCH/USD\\\",\\\"type\\\":\\\"onchain\\\",\\\"source\\\":\\\"chainlink\\\",\\\"logic\\\":\\\"none\\\",\\\"path\\\":\\\"latestAnswer()\\\"}\");\r\n  }\r\n\r\n  /** OPIUM INTERFACE */\r\n  function fetchData(uint256 _timestamp) external payable override {\r\n    _timestamp;\r\n    revert(\"N.S\"); // N.S = not supported\r\n  }\r\n\r\n  function recursivelyFetchData(uint256 _timestamp, uint256 _period, uint256 _times) external payable override {\r\n    _timestamp;\r\n    _period;\r\n    _times;\r\n    revert(\"N.S\"); // N.S = not supported\r\n  }\r\n\r\n  function calculateFetchPrice() external override returns (uint256) {\r\n    return 0;\r\n  }\r\n  \r\n  /** RESOLVER */\r\n  function _callback(uint256 _timestamp) public {\r\n    require(\r\n      !oracleAggregator.hasData(address(this), _timestamp) &&\r\n      _timestamp < now,\r\n      \"N.A\" // N.A = Only when no data and after timestamp allowed\r\n    );\r\n\r\n    uint256 result = getResult();\r\n    oracleAggregator.__callback(_timestamp, result);\r\n\r\n    emit Provided(_timestamp, result);\r\n  }\r\n\r\n  /** GOVERNANCE */\r\n  /** \r\n    Emergency callback allows to push data manually in case EMERGENCY_PERIOD elapsed and no data were provided\r\n   */\r\n  function emergencyCallback(uint256 _timestamp, uint256 _result) public onlyOwner {\r\n    require(\r\n      !oracleAggregator.hasData(address(this), _timestamp) &&\r\n      _timestamp + EMERGENCY_PERIOD  < now,\r\n      \"N.E\" // N.E = Only when no data and after emergency period allowed\r\n    );\r\n\r\n    oracleAggregator.__callback(_timestamp, _result);\r\n\r\n    emit Provided(_timestamp, _result);\r\n  }\r\n\r\n  function changeOwner(address _newOwner) public onlyOwner {\r\n    require(_newOwner != address(0));\r\n    _owner = _newOwner;\r\n  }\r\n\r\n  function changeEmergencyPeriod(uint256 _newEmergencyPeriod) public onlyOwner {\r\n    EMERGENCY_PERIOD = _newEmergencyPeriod;\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IOracleAggregator\",\"name\":\"_oracleAggregator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emergencyPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Provided\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMERGENCY_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"_callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateFetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newEmergencyPeriod\",\"type\":\"uint256\"}],\"name\":\"changeEmergencyPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"emergencyCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"fetchData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"contract IOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"recursivelyFetchData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "OneInchUsdEthChainlinkOracleId", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b69890912e40a7849fca058bb118cfe7d70932c4000000000000000000000000000000000000000000000000000000000000a8c0", "EVMVersion": "petersburg", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://16ddfea26f616f0204a460a5a59be65f2b057cfbc2d1105f0e0a0407f073713e"}