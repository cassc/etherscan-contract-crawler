{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/dynamic-contracts/extension/ContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IContractMetadata.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Contract Metadata\\n *  @notice  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *           for you contract.\\n *           Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\nlibrary ContractMetadataStorage {\\n    bytes32 public constant CONTRACT_METADATA_STORAGE_POSITION = keccak256(\\\"contract.metadata.storage\\\");\\n\\n    struct Data {\\n        /// @notice Returns the contract metadata URI.\\n        string contractURI;\\n    }\\n\\n    function contractMetadataStorage() internal pure returns (Data storage contractMetadataData) {\\n        bytes32 position = CONTRACT_METADATA_STORAGE_POSITION;\\n        assembly {\\n            contractMetadataData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract ContractMetadata is IContractMetadata {\\n    /**\\n     *  @notice         Lets a contract admin set the URI for contract-level metadata.\\n     *  @dev            Caller should be authorized to setup contractURI, e.g. contract admin.\\n     *                  See {_canSetContractURI}.\\n     *                  Emits {ContractURIUpdated Event}.\\n     *\\n     *  @param _uri     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function setContractURI(string memory _uri) external override {\\n        if (!_canSetContractURI()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupContractURI(_uri);\\n    }\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        string memory prevURI = data.contractURI;\\n        data.contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n\\n    /// @notice Returns the contract metadata URI.\\n    function contractURI() public view virtual override returns (string memory) {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        return data.contractURI;\\n    }\\n\\n    /// @dev Returns whether contract metadata can be set in the given execution context.\\n    function _canSetContractURI() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../extension/interface/IERC2771Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\n\\nlibrary ERC2771ContextStorage {\\n    bytes32 public constant ERC2771_CONTEXT_STORAGE_POSITION = keccak256(\\\"erc2771.context.storage\\\");\\n\\n    struct Data {\\n        mapping(address => bool) trustedForwarder;\\n    }\\n\\n    function erc2771ContextStorage() internal pure returns (Data storage erc2771ContextData) {\\n        bytes32 position = ERC2771_CONTEXT_STORAGE_POSITION;\\n        assembly {\\n            erc2771ContextData.slot := position\\n        }\\n    }\\n}\\n\\ncontract ERC2771Context is IERC2771Context {\\n    constructor(address[] memory trustedForwarder) {\\n        ERC2771ContextStorage.Data storage data = ERC2771ContextStorage.erc2771ContextStorage();\\n\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\\n            data.trustedForwarder[trustedForwarder[i]] = true;\\n        }\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        ERC2771ContextStorage.Data storage data = ERC2771ContextStorage.erc2771ContextStorage();\\n        return data.trustedForwarder[forwarder];\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../lib/TWAddress.sol\\\";\\n\\nlibrary InitStorage {\\n    /// @dev The location of the storage of the entrypoint contract's data.\\n    bytes32 constant INIT_STORAGE_POSITION = keccak256(\\\"init.storage\\\");\\n\\n    /// @dev Layout of the entrypoint contract's storage.\\n    struct Data {\\n        uint8 initialized;\\n        bool initializing;\\n    }\\n\\n    /// @dev Returns the entrypoint contract's data at the relevant storage location.\\n    function initStorage() internal pure returns (Data storage initData) {\\n        bytes32 position = INIT_STORAGE_POSITION;\\n        assembly {\\n            initData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        uint8 _initialized = data.initialized;\\n        bool _initializing = data.initializing;\\n\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!TWAddress.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        data.initialized = 1;\\n        if (isTopLevelCall) {\\n            data.initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            data.initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        uint8 _initialized = data.initialized;\\n        bool _initializing = data.initializing;\\n\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        data.initialized = version;\\n        data.initializing = true;\\n        _;\\n        data.initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        require(data.initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        InitStorage.Data storage data = InitStorage.initStorage();\\n        uint8 _initialized = data.initialized;\\n        bool _initializing = data.initializing;\\n\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            data.initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/OperatorFilterToggle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IOperatorFilterToggle.sol\\\";\\n\\nlibrary OperatorFilterToggleStorage {\\n    bytes32 public constant OPERATOR_FILTER_TOGGLE_STORAGE_POSITION = keccak256(\\\"operator.filter.toggle.storage\\\");\\n\\n    struct Data {\\n        bool operatorRestriction;\\n    }\\n\\n    function operatorFilterToggleStorage() internal pure returns (Data storage operatorFilterToggleData) {\\n        bytes32 position = OPERATOR_FILTER_TOGGLE_STORAGE_POSITION;\\n        assembly {\\n            operatorFilterToggleData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract OperatorFilterToggle is IOperatorFilterToggle {\\n    function operatorRestriction() external view override returns (bool) {\\n        OperatorFilterToggleStorage.Data storage data = OperatorFilterToggleStorage.operatorFilterToggleStorage();\\n        return data.operatorRestriction;\\n    }\\n\\n    function setOperatorRestriction(bool _restriction) external {\\n        require(_canSetOperatorRestriction(), \\\"Not authorized to set operator restriction.\\\");\\n        _setOperatorRestriction(_restriction);\\n    }\\n\\n    function _setOperatorRestriction(bool _restriction) internal {\\n        OperatorFilterToggleStorage.Data storage data = OperatorFilterToggleStorage.operatorFilterToggleStorage();\\n\\n        data.operatorRestriction = _restriction;\\n        emit OperatorRestriction(_restriction);\\n    }\\n\\n    function _canSetOperatorRestriction() internal virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IOwnable.sol\\\";\\n\\n/**\\n *  @title   Ownable\\n *  @notice  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *           information about who the contract's owner is.\\n */\\n\\nlibrary OwnableStorage {\\n    bytes32 public constant OWNABLE_STORAGE_POSITION = keccak256(\\\"ownable.storage\\\");\\n\\n    struct Data {\\n        /// @dev Owner of the contract (purpose: OpenSea compatibility)\\n        address _owner;\\n    }\\n\\n    function ownableStorage() internal pure returns (Data storage ownableData) {\\n        bytes32 position = OWNABLE_STORAGE_POSITION;\\n        assembly {\\n            ownableData.slot := position\\n        }\\n    }\\n}\\n\\nabstract contract Ownable is IOwnable {\\n    /// @dev Reverts if caller is not the owner.\\n    modifier onlyOwner() {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n        if (msg.sender != data._owner) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     *  @notice Returns the owner of the contract.\\n     */\\n    function owner() public view override returns (address) {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n        return data._owner;\\n    }\\n\\n    /**\\n     *  @notice Lets an authorized wallet set a new owner for the contract.\\n     *  @param _newOwner The address to set as the new owner of the contract.\\n     */\\n    function setOwner(address _newOwner) external override {\\n        if (!_canSetOwner()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupOwner(_newOwner);\\n    }\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n\\n        address _prevOwner = data._owner;\\n        data._owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n\\n    /// @dev Returns whether owner can be set in the given execution context.\\n    function _canSetOwner() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPermissions.sol\\\";\\nimport \\\"../../lib/TWStrings.sol\\\";\\n\\n/**\\n *  @title   Permissions\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\\n */\\n\\nlibrary PermissionsStorage {\\n    bytes32 public constant PERMISSIONS_STORAGE_POSITION = keccak256(\\\"permissions.storage\\\");\\n\\n    struct Data {\\n        /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\\n        mapping(bytes32 => mapping(address => bool)) _hasRole;\\n        /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\\n        mapping(bytes32 => bytes32) _getRoleAdmin;\\n    }\\n\\n    function permissionsStorage() internal pure returns (Data storage permissionsData) {\\n        bytes32 position = PERMISSIONS_STORAGE_POSITION;\\n        assembly {\\n            permissionsData.slot := position\\n        }\\n    }\\n}\\n\\ncontract Permissions is IPermissions {\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role.\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._hasRole[role][account];\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role;\\n     *                  role restrictions can be swtiched on and off.\\n     *\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *                  Role restrictions can be swtiched on and off:\\n     *                      - If address(0) has ROLE, then the ROLE restrictions\\n     *                        don't apply.\\n     *                      - If address(0) does not have ROLE, then the ROLE\\n     *                        restrictions will apply.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        if (!data._hasRole[role][address(0)]) {\\n            return data._hasRole[role][account];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice         Returns the admin role that controls the specified role.\\n     *  @dev            See {grantRole} and {revokeRole}.\\n     *                  To change a role's admin, use {_setRoleAdmin}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._getRoleAdmin[role];\\n    }\\n\\n    /**\\n     *  @notice         Grants a role to an account, if not previously granted.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleGranted Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account to which the role is being granted.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(data._getRoleAdmin[role], _msgSender());\\n        if (data._hasRole[role][account]) {\\n            revert(\\\"Can only grant to non holders\\\");\\n        }\\n        _setupRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from an account.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(data._getRoleAdmin[role], _msgSender());\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from the account.\\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        if (_msgSender() != account) {\\n            revert(\\\"Can only renounce for self\\\");\\n        }\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        bytes32 previousAdminRole = data._getRoleAdmin[role];\\n        data._getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        data._hasRole[role][account] = true;\\n        emit RoleGranted(role, account, _msgSender());\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        _checkRole(role, account);\\n        delete data._hasRole[role][account];\\n        emit RoleRevoked(role, account, _msgSender());\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        if (!data._hasRole[role][account]) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\\n        if (!hasRoleWithSwitch(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/PlatformFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPlatformFee.sol\\\";\\n\\n/**\\n *  @author  thirdweb.com\\n */\\nlibrary PlatformFeeStorage {\\n    bytes32 public constant PLATFORM_FEE_STORAGE_POSITION = keccak256(\\\"platform.fee.storage\\\");\\n\\n    struct Data {\\n        /// @dev The address that receives all platform fees from all sales.\\n        address platformFeeRecipient;\\n        /// @dev The % of primary sales collected as platform fees.\\n        uint16 platformFeeBps;\\n        /// @dev The flat amount collected by the contract as fees on primary sales.\\n        uint256 flatPlatformFee;\\n        /// @dev Fee type variants: percentage fee and flat fee\\n        IPlatformFee.PlatformFeeType platformFeeType;\\n    }\\n\\n    function platformFeeStorage() internal pure returns (Data storage platformFeeData) {\\n        bytes32 position = PLATFORM_FEE_STORAGE_POSITION;\\n        assembly {\\n            platformFeeData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n *  @author  thirdweb.com\\n *\\n *  @title   Platform Fee\\n *  @notice  Thirdweb's `PlatformFee` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of platform fee and the platform fee basis points, and lets the inheriting contract perform conditional logic\\n *           that uses information about platform fees, if desired.\\n */\\n\\nabstract contract PlatformFee is IPlatformFee {\\n    /// @dev Returns the platform fee recipient and bps.\\n    function getPlatformFeeInfo() public view override returns (address, uint16) {\\n        PlatformFeeStorage.Data storage data = PlatformFeeStorage.platformFeeStorage();\\n        return (data.platformFeeRecipient, uint16(data.platformFeeBps));\\n    }\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getFlatPlatformFeeInfo() public view returns (address, uint256) {\\n        PlatformFeeStorage.Data storage data = PlatformFeeStorage.platformFeeStorage();\\n        return (data.platformFeeRecipient, data.flatPlatformFee);\\n    }\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getPlatformFeeType() public view returns (PlatformFeeType) {\\n        return PlatformFeeStorage.platformFeeStorage().platformFeeType;\\n    }\\n\\n    /// @notice Lets a module admin set platform fee type.\\n    function setPlatformFeeType(PlatformFeeType _feeType) external {\\n        if (!_canSetPlatformFeeInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupPlatformFeeType(_feeType);\\n    }\\n\\n    /// @notice Lets a module admin set a flat fee on primary sales.\\n    function setFlatPlatformFeeInfo(address _platformFeeRecipient, uint256 _flatFee) external {\\n        if (!_canSetPlatformFeeInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupFlatPlatformFeeInfo(_platformFeeRecipient, _flatFee);\\n    }\\n\\n    /// @notice Updates the platform fee recipient and bps.\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external override {\\n        if (!_canSetPlatformFeeInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupPlatformFeeInfo(_platformFeeRecipient, _platformFeeBps);\\n    }\\n\\n    /// @dev Sets platform fee type.\\n    function _setupPlatformFeeType(PlatformFeeType _feeType) internal {\\n        PlatformFeeStorage.platformFeeStorage().platformFeeType = _feeType;\\n\\n        emit PlatformFeeTypeUpdated(_feeType);\\n    }\\n\\n    /// @dev Sets a flat fee on primary sales.\\n    function _setupFlatPlatformFeeInfo(address _platformFeeRecipient, uint256 _flatFee) internal {\\n        PlatformFeeStorage.platformFeeStorage().flatPlatformFee = _flatFee;\\n        PlatformFeeStorage.platformFeeStorage().platformFeeRecipient = _platformFeeRecipient;\\n\\n        emit FlatPlatformFeeUpdated(_platformFeeRecipient, _flatFee);\\n    }\\n\\n    /// @dev Lets a contract admin update the platform fee recipient and bps\\n    function _setupPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) internal {\\n        PlatformFeeStorage.Data storage data = PlatformFeeStorage.platformFeeStorage();\\n        if (_platformFeeBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        data.platformFeeBps = uint16(_platformFeeBps);\\n        data.platformFeeRecipient = _platformFeeRecipient;\\n\\n        emit PlatformFeeInfoUpdated(_platformFeeRecipient, _platformFeeBps);\\n    }\\n\\n    /// @dev Returns whether platform fee info can be set in the given execution context.\\n    function _canSetPlatformFeeInfo() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/PrimarySale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IPrimarySale.sol\\\";\\n\\nlibrary PrimarySaleStorage {\\n    bytes32 public constant PRIMARY_SALE_STORAGE_POSITION = keccak256(\\\"primary.sale.storage\\\");\\n\\n    struct Data {\\n        address recipient;\\n    }\\n\\n    function primarySaleStorage() internal pure returns (Data storage primarySaleData) {\\n        bytes32 position = PRIMARY_SALE_STORAGE_POSITION;\\n        assembly {\\n            primarySaleData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n *  @title   Primary Sale\\n *  @notice  Thirdweb's `PrimarySale` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of primary sales, and lets the inheriting contract perform conditional logic that uses information about\\n *           primary sales, if desired.\\n */\\n\\nabstract contract PrimarySale is IPrimarySale {\\n    /// @dev Returns primary sale recipient address.\\n    function primarySaleRecipient() public view override returns (address) {\\n        PrimarySaleStorage.Data storage data = PrimarySaleStorage.primarySaleStorage();\\n        return data.recipient;\\n    }\\n\\n    /**\\n     *  @notice         Updates primary sale recipient.\\n     *  @dev            Caller should be authorized to set primary sales info.\\n     *                  See {_canSetPrimarySaleRecipient}.\\n     *                  Emits {PrimarySaleRecipientUpdated Event}; See {_setupPrimarySaleRecipient}.\\n     *\\n     *  @param _saleRecipient   Address to be set as new recipient of primary sales.\\n     */\\n    function setPrimarySaleRecipient(address _saleRecipient) external override {\\n        if (!_canSetPrimarySaleRecipient()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n        _setupPrimarySaleRecipient(_saleRecipient);\\n    }\\n\\n    /// @dev Lets a contract admin set the recipient for all primary sales.\\n    function _setupPrimarySaleRecipient(address _saleRecipient) internal {\\n        PrimarySaleStorage.Data storage data = PrimarySaleStorage.primarySaleStorage();\\n        data.recipient = _saleRecipient;\\n        emit PrimarySaleRecipientUpdated(_saleRecipient);\\n    }\\n\\n    /// @dev Returns whether primary sale recipient can be set in the given execution context.\\n    function _canSetPrimarySaleRecipient() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/extension/Royalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../extension/interface/IRoyalty.sol\\\";\\n\\nlibrary RoyaltyStorage {\\n    bytes32 public constant ROYALTY_STORAGE_POSITION = keccak256(\\\"royalty.storage\\\");\\n\\n    struct Data {\\n        /// @dev The (default) address that receives all royalty value.\\n        address royaltyRecipient;\\n        /// @dev The (default) % of a sale to take as royalty (in basis points).\\n        uint16 royaltyBps;\\n        /// @dev Token ID => royalty recipient and bps for token\\n        mapping(uint256 => IRoyalty.RoyaltyInfo) royaltyInfoForToken;\\n    }\\n\\n    function royaltyStorage() internal pure returns (Data storage royaltyData) {\\n        bytes32 position = ROYALTY_STORAGE_POSITION;\\n        assembly {\\n            royaltyData.slot := position\\n        }\\n    }\\n}\\n\\n/**\\n *  @title   Royalty\\n *  @notice  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *           the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *           that uses information about royalty fees, if desired.\\n *\\n *  @dev     The `Royalty` contract is ERC2981 compliant.\\n */\\n\\nabstract contract Royalty is IRoyalty {\\n    /**\\n     *  @notice   View royalty info for a given token and sale price.\\n     *  @dev      Returns royalty amount and recipient for `tokenId` and `salePrice`.\\n     *  @param tokenId          The tokenID of the NFT for which to query royalty info.\\n     *  @param salePrice        Sale price of the token.\\n     *\\n     *  @return receiver        Address of royalty recipient account.\\n     *  @return royaltyAmount   Royalty amount calculated at current royaltyBps value.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        (address recipient, uint256 bps) = getRoyaltyInfoForToken(tokenId);\\n        receiver = recipient;\\n        royaltyAmount = (salePrice * bps) / 10_000;\\n    }\\n\\n    /**\\n     *  @notice          View royalty info for a given token.\\n     *  @dev             Returns royalty recipient and bps for `_tokenId`.\\n     *  @param _tokenId  The tokenID of the NFT for which to query royalty info.\\n     */\\n    function getRoyaltyInfoForToken(uint256 _tokenId) public view override returns (address, uint16) {\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        RoyaltyInfo memory royaltyForToken = data.royaltyInfoForToken[_tokenId];\\n\\n        return\\n            royaltyForToken.recipient == address(0)\\n                ? (data.royaltyRecipient, uint16(data.royaltyBps))\\n                : (royaltyForToken.recipient, uint16(royaltyForToken.bps));\\n    }\\n\\n    /**\\n     *  @notice Returns the defualt royalty recipient and BPS for this contract's NFTs.\\n     */\\n    function getDefaultRoyaltyInfo() external view override returns (address, uint16) {\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n        return (data.royaltyRecipient, uint16(data.royaltyBps));\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps.\\n     *  @dev            Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\\n     *\\n     *  @param _royaltyRecipient   Address to be set as default royalty recipient.\\n     *  @param _royaltyBps         Updated royalty bps.\\n     */\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /// @dev Lets a contract admin update the default royalty recipient and bps.\\n    function _setupDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) internal {\\n        if (_royaltyBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        data.royaltyRecipient = _royaltyRecipient;\\n        data.royaltyBps = uint16(_royaltyBps);\\n\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n\\n    /**\\n     *  @notice         Updates default royalty recipient and bps for a particular token.\\n     *  @dev            Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.\\n     *                  See {_canSetRoyaltyInfo}.\\n     *                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\\n     *\\n     *  @param _recipient   Address to be set as royalty recipient for given token Id.\\n     *  @param _bps         Updated royalty bps for the token Id.\\n     */\\n    function setRoyaltyInfoForToken(\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) external override {\\n        if (!_canSetRoyaltyInfo()) {\\n            revert(\\\"Not authorized\\\");\\n        }\\n\\n        _setupRoyaltyInfoForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Lets a contract admin set the royalty recipient and bps for a particular token Id.\\n    function _setupRoyaltyInfoForToken(\\n        uint256 _tokenId,\\n        address _recipient,\\n        uint256 _bps\\n    ) internal {\\n        if (_bps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        data.royaltyInfoForToken[_tokenId] = RoyaltyInfo({ recipient: _recipient, bps: _bps });\\n\\n        emit RoyaltyForToken(_tokenId, _recipient, _bps);\\n    }\\n\\n    /// @dev Returns whether royalty info can be set in the given execution context.\\n    function _canSetRoyaltyInfo() internal view virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/ContractMetadataInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { ContractMetadataStorage } from \\\"../extension/ContractMetadata.sol\\\";\\n\\ncontract ContractMetadataInit {\\n    event ContractURIUpdated(string prevURI, string newURI);\\n\\n    /// @dev Lets a contract admin set the URI for contract-level metadata.\\n    function _setupContractURI(string memory _uri) internal {\\n        ContractMetadataStorage.Data storage data = ContractMetadataStorage.contractMetadataStorage();\\n        string memory prevURI = data.contractURI;\\n        data.contractURI = _uri;\\n\\n        emit ContractURIUpdated(prevURI, _uri);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/DefaultOperatorFiltererInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../extension/interface/IOperatorFilterRegistry.sol\\\";\\nimport { OperatorFilterToggleStorage } from \\\"../extension/OperatorFilterToggle.sol\\\";\\n\\ncontract DefaultOperatorFiltererInit {\\n    event OperatorRestriction(bool restriction);\\n\\n    IOperatorFilterRegistry constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    function _setupOperatorFilterer() internal {\\n        __DefaultOperatorFilterer_init();\\n    }\\n\\n    function __DefaultOperatorFilterer_init() private {\\n        __OperatorFilterer_init(DEFAULT_SUBSCRIPTION, true);\\n\\n        OperatorFilterToggleStorage.Data storage data = OperatorFilterToggleStorage.operatorFilterToggleStorage();\\n        data.operatorRestriction = true;\\n\\n        emit OperatorRestriction(true);\\n    }\\n\\n    function __OperatorFilterer_init(address subscriptionOrRegistrantToCopy, bool subscribe) private {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isRegistered(address(this))) {\\n                if (subscribe) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    if (subscriptionOrRegistrantToCopy != address(0)) {\\n                        OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                    } else {\\n                        OPERATOR_FILTER_REGISTRY.register(address(this));\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/ERC2771ContextInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { ERC2771ContextStorage } from \\\"../extension/ERC2771Context.sol\\\";\\nimport \\\"../extension/Initializable.sol\\\";\\n\\ncontract ERC2771ContextInit is Initializable {\\n    function __ERC2771Context_init(address[] memory trustedForwarder) internal onlyInitializing {\\n        __ERC2771Context_init_unchained(trustedForwarder);\\n    }\\n\\n    function __ERC2771Context_init_unchained(address[] memory trustedForwarder) internal onlyInitializing {\\n        ERC2771ContextStorage.Data storage data = ERC2771ContextStorage.erc2771ContextStorage();\\n\\n        for (uint256 i = 0; i < trustedForwarder.length; i++) {\\n            data.trustedForwarder[trustedForwarder[i]] = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/ERC721AQueryableInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../eip/queryable/ERC721AStorage.sol\\\";\\nimport \\\"../../eip/queryable/ERC721A__Initializable.sol\\\";\\n\\ncontract ERC721AQueryableInit is ERC721A__Initializable {\\n    function __ERC721A_init(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        __ERC721A_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721A_init_unchained(string memory name_, string memory symbol_) internal onlyInitializingERC721A {\\n        ERC721AStorage.layout()._name = name_;\\n        ERC721AStorage.layout()._symbol = symbol_;\\n        ERC721AStorage.layout()._currentIndex = _startTokenId();\\n    }\\n\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/OwnableInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { OwnableStorage } from \\\"../extension/Ownable.sol\\\";\\n\\ncontract OwnableInit {\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n\\n    /// @dev Lets a contract admin set a new owner for the contract. The new owner must be a contract admin.\\n    function _setupOwner(address _newOwner) internal {\\n        OwnableStorage.Data storage data = OwnableStorage.ownableStorage();\\n\\n        address _prevOwner = data._owner;\\n        data._owner = _newOwner;\\n\\n        emit OwnerUpdated(_prevOwner, _newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/PermissionsInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { PermissionsStorage } from \\\"../extension/Permissions.sol\\\";\\n\\ncontract PermissionsInit {\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        data._hasRole[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        bytes32 previousAdminRole = data._getRoleAdmin[role];\\n        data._getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/PlatformFeeInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { PlatformFeeStorage } from \\\"../extension/PlatformFee.sol\\\";\\n\\ncontract PlatformFeeInit {\\n    event PlatformFeeInfoUpdated(address indexed platformFeeRecipient, uint256 platformFeeBps);\\n\\n    /// @dev Lets a contract admin update the platform fee recipient and bps\\n    function _setupPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) internal {\\n        PlatformFeeStorage.Data storage data = PlatformFeeStorage.platformFeeStorage();\\n        if (_platformFeeBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        data.platformFeeBps = uint16(_platformFeeBps);\\n        data.platformFeeRecipient = _platformFeeRecipient;\\n\\n        emit PlatformFeeInfoUpdated(_platformFeeRecipient, _platformFeeBps);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/PrimarySaleInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { PrimarySaleStorage } from \\\"../extension/PrimarySale.sol\\\";\\n\\ncontract PrimarySaleInit {\\n    /// @dev Emitted when a new sale recipient is set.\\n    event PrimarySaleRecipientUpdated(address indexed recipient);\\n\\n    /// @dev Lets a contract admin set the recipient for all primary sales.\\n    function _setupPrimarySaleRecipient(address _saleRecipient) internal {\\n        PrimarySaleStorage.Data storage data = PrimarySaleStorage.primarySaleStorage();\\n        data.recipient = _saleRecipient;\\n        emit PrimarySaleRecipientUpdated(_saleRecipient);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/dynamic-contracts/init/RoyaltyInit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport { RoyaltyStorage, IRoyalty } from \\\"../extension/Royalty.sol\\\";\\n\\ncontract RoyaltyInit {\\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Lets a contract admin update the default royalty recipient and bps.\\n    function _setupDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) internal {\\n        if (_royaltyBps > 10_000) {\\n            revert(\\\"Exceeds max bps\\\");\\n        }\\n\\n        RoyaltyStorage.Data storage data = RoyaltyStorage.royaltyStorage();\\n\\n        data.royaltyRecipient = _royaltyRecipient;\\n        data.royaltyBps = uint16(_royaltyBps);\\n\\n        emit DefaultRoyalty(_royaltyRecipient, _royaltyBps);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/interface/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be payed in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/eip/queryable/ERC721AStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC721AStorage {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    struct Layout {\\n        // =============================================================\\n        //                            STORAGE\\n        // =============================================================\\n\\n        // The next token ID to be minted.\\n        uint256 _currentIndex;\\n        // The number of tokens burned.\\n        uint256 _burnCounter;\\n        // Token name\\n        string _name;\\n        // Token symbol\\n        string _symbol;\\n        // Mapping from token ID to ownership details\\n        // An empty struct value does not necessarily mean the token is unowned.\\n        // See {_packedOwnershipOf} implementation for details.\\n        //\\n        // Bits Layout:\\n        // - [0..159]   `addr`\\n        // - [160..223] `startTimestamp`\\n        // - [224]      `burned`\\n        // - [225]      `nextInitialized`\\n        // - [232..255] `extraData`\\n        mapping(uint256 => uint256) _packedOwnerships;\\n        // Mapping owner address to address data.\\n        //\\n        // Bits Layout:\\n        // - [0..63]    `balance`\\n        // - [64..127]  `numberMinted`\\n        // - [128..191] `numberBurned`\\n        // - [192..255] `aux`\\n        mapping(address => uint256) _packedAddressData;\\n        // Mapping from token ID to approved address.\\n        mapping(uint256 => ERC721AStorage.TokenApprovalRef) _tokenApprovals;\\n        // Mapping from owner to operator approvals\\n        mapping(address => mapping(address => bool)) _operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"ERC721A.contracts.storage.ERC721A\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eip/queryable/ERC721A__Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable diamond facet contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\n\\nimport { ERC721A__InitializableStorage } from \\\"./ERC721A__InitializableStorage.sol\\\";\\n\\nabstract contract ERC721A__Initializable {\\n    using ERC721A__InitializableStorage for ERC721A__InitializableStorage.Layout;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializerERC721A() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing\\n                ? _isConstructor()\\n                : !ERC721A__InitializableStorage.layout()._initialized,\\n            \\\"ERC721A__Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !ERC721A__InitializableStorage.layout()._initializing;\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = true;\\n            ERC721A__InitializableStorage.layout()._initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            ERC721A__InitializableStorage.layout()._initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializingERC721A() {\\n        require(\\n            ERC721A__InitializableStorage.layout()._initializing,\\n            \\\"ERC721A__Initializable: contract is not initializing\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eip/queryable/ERC721A__InitializableStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base storage for the  initialization function for upgradeable diamond facet contracts\\n **/\\n\\nlibrary ERC721A__InitializableStorage {\\n    struct Layout {\\n        /*\\n         * Indicates that the contract has been initialized.\\n         */\\n        bool _initialized;\\n        /*\\n         * Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT = keccak256(\\\"ERC721A.contracts.storage.initializable.facet\\\");\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../lib/TWAddress.sol\\\";\\nimport \\\"./interface/IMulticall.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ncontract Multicall is IMulticall {\\n    /**\\n     *  @notice Receives and executes a batch of function calls on this contract.\\n     *  @dev Receives and executes a batch of function calls on this contract.\\n     *\\n     *  @param data The bytes data that makes up the batch of function calls to execute.\\n     *  @return results The bytes data that makes up the result of the batch of function calls executed.\\n     */\\n    function multicall(bytes[] calldata data) external virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = TWAddress.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IContractMetadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `ContractMetadata` is a contract extension for any base contracts. It lets you set a metadata URI\\n *  for you contract.\\n *\\n *  Additionally, `ContractMetadata` is necessary for NFT contracts that want royalties to get distributed on OpenSea.\\n */\\n\\ninterface IContractMetadata {\\n    /// @dev Returns the metadata URI of the contract.\\n    function contractURI() external view returns (string memory);\\n\\n    /**\\n     *  @dev Sets contract URI for the storefront-level metadata of the contract.\\n     *       Only module admin can call this function.\\n     */\\n    function setContractURI(string calldata _uri) external;\\n\\n    /// @dev Emitted when the contract URI is updated.\\n    event ContractURIUpdated(string prevURI, string newURI);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IERC2771Context {\\n    function isTrustedForwarder(address forwarder) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\ninterface IMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n\\n    function register(address registrant) external;\\n\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n\\n    function unregister(address addr) external;\\n\\n    function updateOperator(\\n        address registrant,\\n        address operator,\\n        bool filtered\\n    ) external;\\n\\n    function updateOperators(\\n        address registrant,\\n        address[] calldata operators,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHash(\\n        address registrant,\\n        bytes32 codehash,\\n        bool filtered\\n    ) external;\\n\\n    function updateCodeHashes(\\n        address registrant,\\n        bytes32[] calldata codeHashes,\\n        bool filtered\\n    ) external;\\n\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n\\n    function subscriptionOf(address addr) external returns (address registrant);\\n\\n    function subscribers(address registrant) external returns (address[] memory);\\n\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n\\n    function filteredOperators(address addr) external returns (address[] memory);\\n\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n\\n    function isRegistered(address addr) external returns (bool);\\n\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IOperatorFilterToggle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\ninterface IOperatorFilterToggle {\\n    event OperatorRestriction(bool restriction);\\n\\n    function operatorRestriction() external view returns (bool);\\n\\n    function setOperatorRestriction(bool restriction) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Ownable` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  who the 'owner' of the inheriting smart contract is, and lets the inheriting contract perform conditional logic that uses\\n *  information about who the contract's owner is.\\n */\\n\\ninterface IOwnable {\\n    /// @dev Returns the owner of the contract.\\n    function owner() external view returns (address);\\n\\n    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.\\n    function setOwner(address _newOwner) external;\\n\\n    /// @dev Emitted when a new Owner is set.\\n    event OwnerUpdated(address indexed prevOwner, address indexed newOwner);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IPermissions {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPlatformFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `PlatformFee` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of platform fee and the platform fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about platform fees, if desired.\\n */\\n\\ninterface IPlatformFee {\\n    /// @dev Fee type variants: percentage fee and flat fee\\n    enum PlatformFeeType {\\n        Bps,\\n        Flat\\n    }\\n\\n    /// @dev Returns the platform fee bps and recipient.\\n    function getPlatformFeeInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the fees on primary sales.\\n    function setPlatformFeeInfo(address _platformFeeRecipient, uint256 _platformFeeBps) external;\\n\\n    /// @dev Emitted when fee on primary sales is updated.\\n    event PlatformFeeInfoUpdated(address indexed platformFeeRecipient, uint256 platformFeeBps);\\n\\n    /// @dev Emitted when the flat platform fee is updated.\\n    event FlatPlatformFeeUpdated(address platformFeeRecipient, uint256 flatFee);\\n\\n    /// @dev Emitted when the platform fee type is updated.\\n    event PlatformFeeTypeUpdated(PlatformFeeType feeType);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IPrimarySale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n *  Thirdweb's `Primary` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of primary sales, and lets the inheriting contract perform conditional logic that uses information about\\n *  primary sales, if desired.\\n */\\n\\ninterface IPrimarySale {\\n    /// @dev The adress that receives all primary sales value.\\n    function primarySaleRecipient() external view returns (address);\\n\\n    /// @dev Lets a module admin set the default recipient of all primary sales.\\n    function setPrimarySaleRecipient(address _saleRecipient) external;\\n\\n    /// @dev Emitted when a new sale recipient is set.\\n    event PrimarySaleRecipientUpdated(address indexed recipient);\\n}\\n\"\r\n    },\r\n    \"contracts/extension/interface/IRoyalty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"../../eip/interface/IERC2981.sol\\\";\\n\\n/**\\n *  Thirdweb's `Royalty` is a contract extension to be used with any base contract. It exposes functions for setting and reading\\n *  the recipient of royalty fee and the royalty fee basis points, and lets the inheriting contract perform conditional logic\\n *  that uses information about royalty fees, if desired.\\n *\\n *  The `Royalty` contract is ERC2981 compliant.\\n */\\n\\ninterface IRoyalty is IERC2981 {\\n    struct RoyaltyInfo {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    /// @dev Returns the royalty recipient and fee bps.\\n    function getDefaultRoyaltyInfo() external view returns (address, uint16);\\n\\n    /// @dev Lets a module admin update the royalty bps and recipient.\\n    function setDefaultRoyaltyInfo(address _royaltyRecipient, uint256 _royaltyBps) external;\\n\\n    /// @dev Lets a module admin set the royalty recipient for a particular token Id.\\n    function setRoyaltyInfoForToken(\\n        uint256 tokenId,\\n        address recipient,\\n        uint256 bps\\n    ) external;\\n\\n    /// @dev Returns the royalty recipient for a particular token Id.\\n    function getRoyaltyInfoForToken(uint256 tokenId) external view returns (address, uint16);\\n\\n    /// @dev Emitted when royalty info is updated.\\n    event DefaultRoyalty(address indexed newRoyaltyRecipient, uint256 newRoyaltyBps);\\n\\n    /// @dev Emitted when royalty recipient for tokenId is set\\n    event RoyaltyForToken(uint256 indexed tokenId, address indexed royaltyRecipient, uint256 royaltyBps);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TWAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/TWStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary TWStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/open-edition/OpenEditionERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.11;\\n\\n/// @author thirdweb\\n\\n//   $$\\\\     $$\\\\       $$\\\\                 $$\\\\                         $$\\\\\\n//   $$ |    $$ |      \\\\__|                $$ |                        $$ |\\n// $$$$$$\\\\   $$$$$$$\\\\  $$\\\\  $$$$$$\\\\   $$$$$$$ |$$\\\\  $$\\\\  $$\\\\  $$$$$$\\\\  $$$$$$$\\\\\\n// \\\\_$$  _|  $$  __$$\\\\ $$ |$$  __$$\\\\ $$  __$$ |$$ | $$ | $$ |$$  __$$\\\\ $$  __$$\\\\\\n//   $$ |    $$ |  $$ |$$ |$$ |  \\\\__|$$ /  $$ |$$ | $$ | $$ |$$$$$$$$ |$$ |  $$ |\\n//   $$ |$$\\\\ $$ |  $$ |$$ |$$ |      $$ |  $$ |$$ | $$ | $$ |$$   ____|$$ |  $$ |\\n//   \\\\$$$$  |$$ |  $$ |$$ |$$ |      \\\\$$$$$$$ |\\\\$$$$$\\\\$$$$  |\\\\$$$$$$$\\\\ $$$$$$$  |\\n//    \\\\____/ \\\\__|  \\\\__|\\\\__|\\\\__|       \\\\_______| \\\\_____\\\\____/  \\\\_______|\\\\_______/\\n\\nimport \\\"lib/dynamic-contracts/src/presets/BaseRouter.sol\\\";\\n\\nimport \\\"../dynamic-contracts/extension/Initializable.sol\\\";\\nimport \\\"../extension/Multicall.sol\\\";\\nimport \\\"../dynamic-contracts/init/ContractMetadataInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/RoyaltyInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/PrimarySaleInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/OwnableInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/PermissionsInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/PlatformFeeInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/ERC2771ContextInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/ERC721AQueryableInit.sol\\\";\\nimport \\\"../dynamic-contracts/init/DefaultOperatorFiltererInit.sol\\\";\\n\\ncontract OpenEditionERC721 is\\n    Initializable,\\n    BaseRouter,\\n    Multicall,\\n    ERC721AQueryableInit,\\n    ERC2771ContextInit,\\n    ContractMetadataInit,\\n    RoyaltyInit,\\n    PrimarySaleInit,\\n    PlatformFeeInit,\\n    OwnableInit,\\n    PermissionsInit,\\n    DefaultOperatorFiltererInit\\n{\\n    /// @dev Only MINTER_ROLE holders can sign off on `MintRequest`s.\\n    bytes32 private constant EXTENSION_ROLE = keccak256(\\\"EXTENSION_ROLE\\\");\\n\\n    constructor(Extension[] memory _extensions) BaseRouter(_extensions) {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initiliazes the contract, like a constructor.\\n    function initialize(\\n        address _defaultAdmin,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _contractURI,\\n        address[] memory _trustedForwarders,\\n        address _saleRecipient,\\n        address _royaltyRecipient,\\n        uint128 _royaltyBps,\\n        uint128 _platformFeeBps,\\n        address _platformFeeRecipient\\n    ) external initializer initializerERC721A {\\n        // Initialize inherited contracts, most base-like -> most derived.\\n        __ERC2771Context_init(_trustedForwarders);\\n        __ERC721A_init(_name, _symbol);\\n\\n        _setupContractURI(_contractURI);\\n        _setupOwner(_defaultAdmin);\\n        _setupOperatorFilterer();\\n\\n        _setupDefaultRoyaltyInfo(_royaltyRecipient, _royaltyBps);\\n        _setupPrimarySaleRecipient(_saleRecipient);\\n        _setupPlatformFeeInfo(_platformFeeRecipient, _platformFeeBps);\\n\\n        _setupRoles(_defaultAdmin);\\n    }\\n\\n    function _setupRoles(address _defaultAdmin) internal {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);\\n        _setupRole(keccak256(\\\"MINTER_ROLE\\\"), _defaultAdmin);\\n        _setupRole(keccak256(\\\"TRANSFER_ROLE\\\"), _defaultAdmin);\\n        _setupRole(keccak256(\\\"TRANSFER_ROLE\\\"), address(0));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev The start token ID for the contract.\\n    function _startTokenId() internal pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /// @dev Returns whether a extension can be set in the given execution context.\\n    function _canSetExtension() internal view virtual override returns (bool) {\\n        return _hasRole(EXTENSION_ROLE, msg.sender);\\n    }\\n\\n    /// @dev Checks whether an account has a particular role.\\n    function _hasRole(bytes32 _role, address _account) internal view returns (bool) {\\n        PermissionsStorage.Data storage data = PermissionsStorage.permissionsStorage();\\n        return data._hasRole[_role][_account];\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/core/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IRouter.sol\\\";\\n\\nabstract contract Router is IRouter {\\n\\n    fallback() external payable virtual {\\n    /// @dev delegate calls the appropriate implementation smart contract for a given function.\\n        address implementation = getImplementationForFunction(msg.sig);\\n        _delegate(implementation);\\n    }\\n\\n    receive() external payable virtual {}\\n\\n    /// @dev delegateCalls an `implementation` smart contract.\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /// @dev Unimplemented. Returns the implementation contract address for a given function signature.\\n    function getImplementationForFunction(bytes4 _functionSelector) public view virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IBaseRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDefaultExtensionSet.sol\\\";\\n\\ninterface IBaseRouter is IDefaultExtensionSet {\\n    /*///////////////////////////////////////////////////////////////\\n                        External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Adds a new extension to the router.\\n    function addExtension(Extension memory extension) external;\\n\\n    /// @dev Updates an existing extension in the router, or overrides a default extension.\\n    function updateExtension(Extension memory extension) external;\\n\\n    /// @dev Removes an existing extension from the router.\\n    function removeExtension(string memory extensionName) external;\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IDefaultExtensionSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IExtension.sol\\\";\\n\\ninterface IDefaultExtensionSet is IExtension {\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns all extensions stored.\\n    function getAllExtensions() external view returns (Extension[] memory);\\n\\n    /// @dev Returns all functions that belong to the given extension contract.\\n    function getAllFunctionsOfExtension(string memory extensionName) external view returns (ExtensionFunction[] memory);\\n\\n    /// @dev Returns the extension metadata for a given function.\\n    function getExtensionForFunction(bytes4 functionSelector) external view returns (ExtensionMetadata memory);\\n\\n    /// @dev Returns the extension's implementation smart contract address.\\n    function getExtensionImplementation(string memory extensionName) external view returns (address);\\n\\n    /// @dev Returns the extension metadata and functions for a given extension.\\n    function getExtension(string memory extensionName) external view returns (Extension memory);\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IExtension.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IExtension {\\n    /*///////////////////////////////////////////////////////////////\\n                                Structs\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice A extension's metadata.\\n     *\\n     *  @param name             The unique name of the extension.\\n     *  @param metadataURI      The URI where the metadata for the extension lives.\\n     *  @param implementation   The implementation smart contract address of the extension.\\n     */\\n    struct ExtensionMetadata {\\n        string name;\\n        string metadataURI;\\n        address implementation;\\n    }\\n\\n    /**\\n     *  @notice An interface to describe a extension's function.\\n     *\\n     *  @param functionSelector    The 4 byte selector of the function.\\n     *  @param functionSignature   Function signature as a string. E.g. \\\"transfer(address,address,uint256)\\\"\\n     */\\n    struct ExtensionFunction {\\n        bytes4 functionSelector;\\n        string functionSignature;\\n    }\\n\\n    /**\\n     *  @notice An interface to describe an extension.\\n     *\\n     *  @param metadata     The extension's metadata; it's name, metadata URI and implementation contract address.\\n     *  @param functions    The functions that belong to the extension.\\n     */\\n    struct Extension {\\n        ExtensionMetadata metadata;\\n        ExtensionFunction[] functions;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Emitted when a extension is added; emitted for each function of the extension.\\n    event ExtensionAdded(address indexed extensionAddress, bytes4 indexed functionSelector, string functionSignature);\\n\\n    /// @dev Emitted when extension is updated; emitted for each function of the extension.\\n    event ExtensionUpdated(\\n        address indexed oldExtensionAddress,\\n        address indexed newExtensionAddress,\\n        bytes4 indexed functionSelector,\\n        string functionSignature\\n    );\\n\\n    /// @dev Emitted when a extension is removed; emitted for each function of the extension.\\n    event ExtensionRemoved(address indexed extensionAddress, bytes4 indexed functionSelector, string functionSignature);\\n}\\n\"\r\n    },\r\n    \"lib/dynamic-contracts/src/interface/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRouter {\\n    fallback() external payable;\\n    receive() external payable;\\n\\n    function getImplementationForFunction(bytes4 _functionSelector) external view returns (address);\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/BaseRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\n// Interface\\nimport \\\"../interface/IBaseRouter.sol\\\";\\n\\n// Core\\nimport \\\"../core/Router.sol\\\";\\n\\n// Utils\\nimport \\\"./utils/StringSet.sol\\\";\\nimport \\\"./utils/DefaultExtensionSet.sol\\\";\\nimport \\\"./utils/ExtensionState.sol\\\";\\n\\nabstract contract BaseRouter is IBaseRouter, Router, ExtensionState {\\n    using StringSet for StringSet.Set;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The DefaultExtensionSet that stores default extensions of the router.\\n    address public immutable defaultExtensionSet;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(Extension[] memory _extensions) {\\n\\n        DefaultExtensionSet map = new DefaultExtensionSet();\\n        defaultExtensionSet = address(map);\\n\\n        uint256 len = _extensions.length;\\n\\n        for (uint256 i = 0; i < len; i += 1) {\\n            map.setExtension(_extensions[i]);\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Adds a new extension to the router.\\n    function addExtension(Extension memory _extension) external {\\n        require(_canSetExtension(), \\\"BaseRouter: caller not authorized.\\\");\\n\\n        _addExtension(_extension);\\n    }\\n\\n    /// @dev Updates an existing extension in the router, or overrides a default extension.\\n    function updateExtension(Extension memory _extension) external {\\n        require(_canSetExtension(), \\\"BaseRouter: caller not authorized.\\\");\\n\\n        _updateExtension(_extension);\\n    }\\n\\n    /// @dev Removes an existing extension from the router.\\n    function removeExtension(string memory _extensionName) external {\\n        require(_canSetExtension(), \\\"BaseRouter: caller not authorized.\\\");\\n\\n        _removeExtension(_extensionName);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice Returns all extensions stored. Override default lugins stored in router are\\n     *          given precedence over default extensions in DefaultExtensionSet.\\n     */\\n    function getAllExtensions() external view returns (Extension[] memory allExtensions) {\\n        Extension[] memory defaultExtensions = IDefaultExtensionSet(defaultExtensionSet).getAllExtensions();\\n        uint256 defaultExtensionsLen = defaultExtensions.length;\\n\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        string[] memory names = data.extensionNames.values();\\n        uint256 namesLen = names.length;\\n\\n        uint256 overrides = 0;\\n        for (uint256 i = 0; i < defaultExtensionsLen; i += 1) {\\n            if (data.extensionNames.contains(defaultExtensions[i].metadata.name)) {\\n                overrides += 1;\\n            }\\n        }\\n\\n        uint256 total = (namesLen + defaultExtensionsLen) - overrides;\\n\\n        allExtensions = new Extension[](total);\\n        uint256 idx = 0;\\n\\n        for (uint256 i = 0; i < defaultExtensionsLen; i += 1) {\\n            string memory name = defaultExtensions[i].metadata.name;\\n            if (!data.extensionNames.contains(name)) {\\n                allExtensions[idx] = defaultExtensions[i];\\n                idx += 1;\\n            }\\n        }\\n\\n        for (uint256 i = 0; i < namesLen; i += 1) {\\n            allExtensions[idx] = data.extensions[names[i]];\\n            idx += 1;\\n        }\\n    }\\n\\n    /// @dev Returns the extension metadata and functions for a given extension.\\n    function getExtension(string memory _extensionName) public view returns (Extension memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        bool isLocalExtension = data.extensionNames.contains(_extensionName);\\n\\n        return isLocalExtension ? data.extensions[_extensionName] : IDefaultExtensionSet(defaultExtensionSet).getExtension(_extensionName);\\n    }\\n\\n    /// @dev Returns the extension's implementation smart contract address.\\n    function getExtensionImplementation(string memory _extensionName) external view returns (address) {\\n        return getExtension(_extensionName).metadata.implementation;\\n    }\\n\\n    /// @dev Returns all functions that belong to the given extension contract.\\n    function getAllFunctionsOfExtension(string memory _extensionName) external view returns (ExtensionFunction[] memory) {\\n        return getExtension(_extensionName).functions;\\n    }\\n\\n    /// @dev Returns the extension metadata for a given function.\\n    function getExtensionForFunction(bytes4 _functionSelector) public view returns (ExtensionMetadata memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        ExtensionMetadata memory metadata = data.extensionMetadata[_functionSelector];\\n\\n        bool isLocalExtension = metadata.implementation != address(0);\\n\\n        return isLocalExtension ? metadata : IDefaultExtensionSet(defaultExtensionSet).getExtensionForFunction(_functionSelector);\\n    }\\n\\n    /// @dev Returns the extension implementation address stored in router, for the given function.\\n    function getImplementationForFunction(bytes4 _functionSelector)\\n        public\\n        view\\n        override\\n        returns (address extensionAddress)\\n    {\\n        return getExtensionForFunction(_functionSelector).implementation;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Returns whether a extension can be set in the given execution context.\\n    function _canSetExtension() internal view virtual returns (bool);\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/utils/DefaultExtensionSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\n// Interface\\nimport \\\"../../interface/IDefaultExtensionSet.sol\\\";\\n\\n// Extensions\\nimport \\\"./ExtensionState.sol\\\";\\n\\ncontract DefaultExtensionSet is IDefaultExtensionSet, ExtensionState {\\n    using StringSet for StringSet.Set;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            State variables\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The deployer of DefaultExtensionSet.\\n    address private deployer;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor() {\\n        deployer = msg.sender;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            External functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Stores a extension in the DefaultExtensionSet.\\n    function setExtension(Extension memory _extension) external {\\n        require(msg.sender == deployer, \\\"DefaultExtensionSet: unauthorized caller.\\\");\\n        _addExtension(_extension);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            View functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Returns all extensions stored.\\n    function getAllExtensions() external view returns (Extension[] memory allExtensions) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        string[] memory names = data.extensionNames.values();\\n        uint256 len = names.length;\\n\\n        allExtensions = new Extension[](len);\\n\\n        for (uint256 i = 0; i < len; i += 1) {\\n            allExtensions[i] = data.extensions[names[i]];\\n        }\\n    }\\n\\n    /// @notice Returns the extension metadata and functions for a given extension.\\n    function getExtension(string memory _extensionName) public view returns (Extension memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        require(data.extensionNames.contains(_extensionName), \\\"DefaultExtensionSet: extension does not exist.\\\");\\n        return data.extensions[_extensionName];\\n    }\\n\\n    /// @notice Returns the extension's implementation smart contract address.\\n    function getExtensionImplementation(string memory _extensionName) external view returns (address) {\\n        return getExtension(_extensionName).metadata.implementation;\\n    }\\n\\n    /// @notice Returns all functions that belong to the given extension contract.\\n    function getAllFunctionsOfExtension(string memory _extensionName) external view returns (ExtensionFunction[] memory) {\\n        return getExtension(_extensionName).functions;\\n    }\\n\\n    /// @notice Returns the extension metadata for a given function.\\n    function getExtensionForFunction(bytes4 _functionSelector) external view returns (ExtensionMetadata memory) {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n        ExtensionMetadata memory metadata = data.extensionMetadata[_functionSelector];\\n        require(metadata.implementation != address(0), \\\"DefaultExtensionSet: no extension for function.\\\");\\n        return metadata;\\n    }\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/utils/ExtensionState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\n// Interface\\nimport \\\"../../interface/IExtension.sol\\\";\\n\\n// Extensions\\nimport \\\"./StringSet.sol\\\";\\n\\nlibrary ExtensionStateStorage {\\n    bytes32 public constant EXTENSION_STATE_STORAGE_POSITION = keccak256(\\\"extension.state.storage\\\");\\n\\n    struct Data {\\n        /// @dev Set of names of all extensions stored.\\n        StringSet.Set extensionNames;\\n        /// @dev Mapping from extension name => `Extension` i.e. extension metadata and functions.\\n        mapping(string => IExtension.Extension) extensions;\\n        /// @dev Mapping from function selector => extension metadata of the extension the function belongs to.\\n        mapping(bytes4 => IExtension.ExtensionMetadata) extensionMetadata;\\n    }\\n\\n    function extensionStateStorage() internal pure returns (Data storage extensionStateData) {\\n        bytes32 position = EXTENSION_STATE_STORAGE_POSITION;\\n        assembly {\\n            extensionStateData.slot := position\\n        }\\n    }\\n}\\n\\ncontract ExtensionState is IExtension {\\n    using StringSet for StringSet.Set;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Stores a new extension in the contract.\\n    function _addExtension(Extension memory _extension) internal {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        string memory name = _extension.metadata.name;\\n\\n        require(data.extensionNames.add(name), \\\"ExtensionState: extension already exists.\\\");\\n        data.extensions[name].metadata = _extension.metadata;\\n\\n        require(_extension.metadata.implementation != address(0), \\\"ExtensionState: adding extension without implementation.\\\");\\n\\n        uint256 len = _extension.functions.length;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            require(\\n                _extension.functions[i].functionSelector ==\\n                    bytes4(keccak256(abi.encodePacked(_extension.functions[i].functionSignature))),\\n                \\\"ExtensionState: fn selector and signature mismatch.\\\"\\n            );\\n            require(\\n                data.extensionMetadata[_extension.functions[i].functionSelector].implementation == address(0),\\n                \\\"ExtensionState: extension already exists for function.\\\"\\n            );\\n\\n            data.extensionMetadata[_extension.functions[i].functionSelector] = _extension.metadata;\\n            data.extensions[name].functions.push(_extension.functions[i]);\\n\\n            emit ExtensionAdded(\\n                _extension.metadata.implementation,\\n                _extension.functions[i].functionSelector,\\n                _extension.functions[i].functionSignature\\n            );\\n        }\\n    }\\n\\n    /// @dev Updates / overrides an existing extension in the contract.\\n    function _updateExtension(Extension memory _extension) internal {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        string memory name = _extension.metadata.name;\\n        require(data.extensionNames.contains(name), \\\"ExtensionState: extension does not exist.\\\");\\n\\n        address oldImplementation = data.extensions[name].metadata.implementation;\\n        require(_extension.metadata.implementation != oldImplementation, \\\"ExtensionState: re-adding same extension.\\\");\\n\\n        data.extensions[name].metadata = _extension.metadata;\\n\\n        ExtensionFunction[] memory oldFunctions = data.extensions[name].functions;\\n        uint256 oldFunctionsLen = oldFunctions.length;\\n\\n        delete data.extensions[name].functions;\\n\\n        for (uint256 i = 0; i < oldFunctionsLen; i += 1) {\\n            delete data.extensionMetadata[oldFunctions[i].functionSelector];\\n        }\\n\\n        uint256 len = _extension.functions.length;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            require(\\n                _extension.functions[i].functionSelector ==\\n                    bytes4(keccak256(abi.encodePacked(_extension.functions[i].functionSignature))),\\n                \\\"ExtensionState: fn selector and signature mismatch.\\\"\\n            );\\n\\n            data.extensionMetadata[_extension.functions[i].functionSelector] = _extension.metadata;\\n            data.extensions[name].functions.push(_extension.functions[i]);\\n\\n            emit ExtensionUpdated(\\n                oldImplementation,\\n                _extension.metadata.implementation,\\n                _extension.functions[i].functionSelector,\\n                _extension.functions[i].functionSignature\\n            );\\n        }\\n    }\\n\\n    /// @dev Removes an existing extension from the contract.\\n    function _removeExtension(string memory _extensionName) internal {\\n        ExtensionStateStorage.Data storage data = ExtensionStateStorage.extensionStateStorage();\\n\\n        require(data.extensionNames.remove(_extensionName), \\\"ExtensionState: extension does not exist.\\\");\\n\\n        address implementation = data.extensions[_extensionName].metadata.implementation;\\n        ExtensionFunction[] memory extensionFunctions = data.extensions[_extensionName].functions;\\n        delete data.extensions[_extensionName];\\n\\n        uint256 len = extensionFunctions.length;\\n        for (uint256 i = 0; i < len; i += 1) {\\n            emit ExtensionRemoved(\\n                implementation,\\n                extensionFunctions[i].functionSelector,\\n                extensionFunctions[i].functionSignature\\n            );\\n            delete data.extensionMetadata[extensionFunctions[i].functionSelector];\\n        }\\n    }\\n}\"\r\n    },\r\n    \"lib/dynamic-contracts/src/presets/utils/StringSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\n// @author: thirdweb (https://github.com/thirdweb-dev/dynamic-contracts)\\n\\npragma solidity ^0.8.0;\\n\\nlibrary StringSet {\\n    struct Set {\\n        // Storage of set values\\n        string[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(string => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, string memory value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, string memory value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                string memory lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, string memory value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (string memory) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (string[] memory) {\\n        return set._values;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Set storage set, string memory value) internal returns (bool) {\\n        return _add(set, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Set storage set, string memory value) internal returns (bool) {\\n        return _remove(set, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Set storage set, string memory value) internal view returns (bool) {\\n        return _contains(set, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Set storage set) internal view returns (uint256) {\\n        return _length(set);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Set storage set, uint256 index) internal view returns (string memory) {\\n        return _at(set, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Set storage set) internal view returns (string[] memory) {\\n        return _values(set);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"remappings\": [\r\n      \":@chainlink/=lib/chainlink/\",\r\n      \":@ds-test/=lib/ds-test/src/\",\r\n      \":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \":@std/=lib/forge-std/src/\",\r\n      \":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \":ERC721A/=lib/ERC721A/contracts/\",\r\n      \":chainlink/=lib/chainlink/\",\r\n      \":contracts/=contracts/\",\r\n      \":ds-test/=lib/ds-test/src/\",\r\n      \":dynamic-contracts/=lib/dynamic-contracts/src/\",\r\n      \":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\r\n      \":erc721a/=lib/ERC721A/\",\r\n      \":forge-std/=lib/forge-std/src/\",\r\n      \":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \":openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension[]\",\"name\":\"_extensions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"ExtensionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"extensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"ExtensionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldExtensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newExtensionAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"name\":\"ExtensionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"restriction\",\"type\":\"bool\"}],\"name\":\"OperatorRestriction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFeeBps\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"PrimarySaleRecipientUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension\",\"name\":\"_extension\",\"type\":\"tuple\"}],\"name\":\"addExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExtensionSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllExtensions\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension[]\",\"name\":\"allExtensions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"getAllFunctionsOfExtension\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"getExtension\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"getExtensionForFunction\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"getExtensionImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"getImplementationForFunction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"extensionAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_trustedForwarders\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_saleRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_platformFeeBps\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extensionName\",\"type\":\"string\"}],\"name\":\"removeExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"internalType\":\"struct IExtension.ExtensionMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"functionSignature\",\"type\":\"string\"}],\"internalType\":\"struct IExtension.ExtensionFunction[]\",\"name\":\"functions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IExtension.Extension\",\"name\":\"_extension\",\"type\":\"tuple\"}],\"name\":\"updateExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OpenEditionERC721", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}