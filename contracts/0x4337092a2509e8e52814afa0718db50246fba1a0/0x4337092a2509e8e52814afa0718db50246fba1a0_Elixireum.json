{"SourceCode": "/**\r\n     * Elixireum Token is a community driven token built on top of the Ethereum blockchain (ERC-20) .\r\n     * Our Elixir wallet assets will be used in legit projects with great potentials at earliest stage.\r\n     * Our goal is to assist our invistors to achieve their financial freedom and to help new legit projects in early stages.\r\n     * TAXFEE: 7%  \r\n     * 1% Reflection. \r\n     * 2% Auto Liquidity.\r\n     * 4% Development/ELIXIR Wallet.  \r\n     * Twitter: https://twitter.com/Elixireumtoken\r\n     * Telegram: https://t.me/ElixireumToken_Portal\r\n     */\r\n\r\n\r\n\r\n\r\n// Sources flattened with hardhat v2.8.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.4.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.4.2\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.4.2\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol@v1.0.1\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// File @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol@v1.1.0-beta.0\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/AGM.sol\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\n// (Uni|Pancake)Swap libs are interchangeable\r\n\r\n\r\n\r\n\r\n/*\r\n    For lines that are marked ERC20 Token Standard, learn more at https://eips.ethereum.org/EIPS/eip-20. \r\n*/\r\ncontract ExtendedReflections is Context, IERC20, Ownable {\r\n\r\n    // Keeps track of balances for address that are included in receiving reward.\r\n    mapping (address => uint256) private _reflectionBalances;\r\n\r\n    // Keeps track of balances for address that are excluded from receiving reward.\r\n    mapping (address => uint256) private _tokenBalances;\r\n\r\n    // Keeps track of which address are excluded from fee.\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    // Keeps track of which address are excluded from reward.\r\n    mapping (address => bool) private _isExcludedFromReward;\r\n    \r\n    // An array of addresses that are excluded from reward.\r\n    address[] private _excludedFromReward;\r\n\r\n    // ERC20 Token Standard\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    // Liquidity pool provider router\r\n    IUniswapV2Router02 internal _uniswapV2Router;\r\n\r\n    // This Token and WETH pair contract address.\r\n    address internal _uniswapV2Pair;\r\n\r\n    // Where burnt tokens are sent to. This is an address that no one can have accesses to.\r\n    address private constant burnAccount = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public marketingAddress;\r\n\r\n    // Decimals of taxReward. Used for have tax less than 1%.\r\n    uint32 private _taxRewardDecimals;\r\n\r\n    // Decimals of taxLiquify. Used for have tax less than 1%.\r\n    uint32 private _taxLiquifyDecimals;\r\n\r\n    // Decimals of taxMarketing. Used for have tax less than 1%.\r\n    uint32 private _taxMarketingDecimals;\r\n\r\n    // This percent of a transaction will be redistribute to all holders.\r\n    uint32[] private _taxReward = [0,0,0];\r\n\r\n    // This percent of a transaction will be added to the liquidity pool. More details at https://github.com/Sheldenshi/ERC20Deflationary.\r\n    uint32[] private _taxLiquify = [0,0,0];\r\n\r\n    // This percent of a transaction will be transferred to Marketing wallet.\r\n    uint32[] private _taxMarketing = [0,0,0];\r\n\r\n    // ERC20 Token Standard\r\n    uint32 private _decimals;\r\n\r\n    // ERC20 Token Standard\r\n    uint256 private _totalSupply;\r\n\r\n    // Current supply:= total supply - burnt tokens\r\n    uint256 private _currentSupply;\r\n\r\n    // A number that helps distributing fees to all holders respectively.\r\n    uint256 private _reflectionTotal;\r\n\r\n    // Total amount of tokens rewarded / distributing. \r\n    uint256 private _totalRewarded;\r\n\r\n    // Total amount of tokens burnt.\r\n    uint256 private _totalBurnt;\r\n\r\n    // A threshold for swap and liquify.\r\n    uint256 private _minTokensBeforeSwap;\r\n\r\n    // ERC20 Token Standard\r\n    string private _name;\r\n    // ERC20 Token Standard\r\n    string private _symbol;\r\n\r\n    // Whether a previous call of SwapAndLiquify process is still in process.\r\n    bool private _inSwapAndLiquify;\r\n\r\n    bool private _autoSwapAndLiquifyEnabled;\r\n    bool private _rewardEnabled;\r\n    bool private _marketingRewardEnabled;\r\n\r\n    uint256 private _marketingPending;\r\n    \r\n    // Prevent reentrancy.\r\n    modifier lockTheSwap {\r\n        require(!_inSwapAndLiquify, \"Currently in swap and liquify.\");\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    // Return values of _getValues function.\r\n    struct ValuesFromAmount {\r\n        // Amount of tokens for to transfer.\r\n        uint256 amount;\r\n        // Amount tokens charged to reward.\r\n        uint256 tRewardFee;\r\n        // Amount tokens charged to add to liquidity.\r\n        uint256 tLiquifyFee;\r\n\r\n        uint256 tMarketingFee;\r\n        // Amount tokens after fees.\r\n        uint256 tTransferAmount;\r\n        // Reflection of amount.\r\n        uint256 rAmount;\r\n        // Reflection of reward fee.\r\n        uint256 rRewardFee;\r\n        // Reflection of liquify fee.\r\n        uint256 rLiquifyFee;\r\n\r\n        uint256 rMarketingFee;\r\n        // Reflection of transfer amount.\r\n        uint256 rTransferAmount;\r\n    }\r\n\r\n    /*\r\n        Events\r\n    */\r\n    event Burn(address from, uint256 amount);\r\n    event AMMPairUpdated(address pair, bool value);\r\n    event TaxRewardUpdate(uint32[] previousTax, uint32 previousDecimals, uint32[] currentTax, uint32 currentDecimal);\r\n    event TaxLiquifyUpdate(uint32[] previousTax, uint32 previousDecimals, uint32[] currentTax, uint32 currentDecimal);\r\n    event TaxMarketingUpdate(uint32[] previousTax, uint32 previousDecimals, uint32[] currentTax, uint32 currentDecimal);\r\n    event MinTokensBeforeSwapUpdated(uint256 previous, uint256 current);\r\n    event MarketingAddressUpdated(address previous, address current);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensAddedToLiquidity\r\n    );\r\n    event ExcludeAccountFromReward(address account);\r\n    event IncludeAccountInReward(address account);\r\n    event ExcludeAccountFromFee(address account);\r\n    event IncludeAccountInFee(address account);\r\n    event EnabledReward();\r\n    event EnabledAutoSwapAndLiquify();\r\n    event EnabledMarketingReward();\r\n    event DisabledReward();\r\n    event DisabledAutoSwapAndLiquify();\r\n    event DisabledMarketingReward();\r\n    event Airdrop(uint256 amount);\r\n    \r\n    constructor (string memory name_, string memory symbol_, uint32 decimals_, uint256 tokenSupply_) {\r\n        // Sets the values for `name`, `symbol`, `totalSupply`, `currentSupply`, and `rTotal`.\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = tokenSupply_ * (10 ** decimals_);\r\n        _currentSupply = _totalSupply;\r\n        _reflectionTotal = (~uint256(0) - (~uint256(0) % _totalSupply));\r\n\r\n        // Mint\r\n        _reflectionBalances[_msgSender()] = _reflectionTotal;\r\n\r\n        // exclude owner and this contract from fee.\r\n        excludeAccountFromFee(owner());\r\n        excludeAccountFromFee(address(this));\r\n\r\n        // exclude owner, burnAccount, and this contract from receiving rewards.\r\n        excludeAccountFromReward(owner());\r\n        excludeAccountFromReward(burnAccount);\r\n        excludeAccountFromReward(address(this));\r\n\r\n        excludeAccountFromLimits(owner());\r\n        excludeAccountFromLimits(address(this));\r\n        excludeAccountFromLimits(burnAccount);\r\n        \r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    // allow the contract to receive ETH\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint32) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of this token and WETH pair.\r\n     */\r\n    function uniswapV2Pair() public view virtual returns (address) {\r\n        return _uniswapV2Pair;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current reward tax.\r\n     */\r\n    function taxReward(uint32 mode) public view virtual returns (uint32) {\r\n        return _taxReward[mode];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current liquify tax.\r\n     */\r\n    function taxLiquify(uint32 mode) public view virtual returns (uint32) {\r\n        return _taxLiquify[mode];\r\n    }\r\n\r\n    function taxMarketing(uint32 mode) public view virtual returns (uint32) {\r\n        return _taxMarketing[mode];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current reward tax decimals.\r\n     */\r\n    function taxRewardDecimals() public view virtual returns (uint32) {\r\n        return _taxRewardDecimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current liquify tax decimals.\r\n     */\r\n    function taxLiquifyDecimals() public view virtual returns (uint32) {\r\n        return _taxLiquifyDecimals;\r\n    }\r\n\r\n    function taxMarketingDecimals() public view virtual returns (uint32) {\r\n        return _taxMarketingDecimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if reward feature is enabled.\r\n     */\r\n    function rewardEnabled() public view virtual returns (bool) {\r\n        return _rewardEnabled;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if auto swap and liquify feature is enabled.\r\n     */\r\n    function autoSwapAndLiquifyEnabled() public view virtual returns (bool) {\r\n        return _autoSwapAndLiquifyEnabled;\r\n    }\r\n\r\n\r\n    function marketingRewardEnabled() public view virtual returns (bool) {\r\n        return _marketingRewardEnabled;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the threshold before swap and liquify.\r\n     */\r\n    function minTokensBeforeSwap() external view virtual returns (uint256) {\r\n        return _minTokensBeforeSwap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current supply of the token. \r\n     * (currentSupply := totalSupply - totalBurnt)\r\n     */\r\n    function currentSupply() external view virtual returns (uint256) {\r\n        return _currentSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burnt. \r\n     */\r\n    function totalBurnt() external view virtual returns (uint256) {\r\n        return _totalBurnt;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        if (_isExcludedFromReward[account]) return _tokenBalances[account];\r\n        return tokenFromReflection(_reflectionBalances[account]);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an account is excluded from reward. \r\n     */\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcludedFromReward[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether an account is excluded from fee. \r\n     */\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        require(_allowances[sender][_msgSender()] >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Burn} event indicating the amount burnt.\r\n     * Emits a {Transfer} event with `to` set to the burn address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != burnAccount, \"ERC20: burn from the burn address\");\r\n\r\n        uint256 accountBalance = balanceOf(account);\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        uint256 rAmount = _getRAmount(amount);\r\n\r\n        // Transfer from account to the burnAccount\r\n        if (_isExcludedFromReward[account]) {\r\n            _tokenBalances[account] -= amount;\r\n        } \r\n        _reflectionBalances[account] -= rAmount;\r\n\r\n        _tokenBalances[burnAccount] += amount;\r\n        _reflectionBalances[burnAccount] += rAmount;\r\n\r\n        _currentSupply -= amount;\r\n\r\n        _totalBurnt += amount;\r\n\r\n        emit Burn(account, amount);\r\n        emit Transfer(account, burnAccount, amount);\r\n    }\r\n    \r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balanceOf(sender) >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        if (sender != owner() && recipient != owner())\r\n            _beforeTokenTransfer(sender);\r\n\r\n        bool buying = false;\r\n\r\n        if (AMMPairs[sender]) {\r\n            buying = true;\r\n        }\r\n\r\n        bool selling = false;\r\n\r\n        if (AMMPairs[recipient]) {\r\n            selling = true;\r\n\r\n            if (sender == owner() && _listingTime == 0) {\r\n                _listingTime = block.timestamp;\r\n            }\r\n        }\r\n\r\n        ValuesFromAmount memory values = _getValues(amount, !(!_isExcludedFromFee[sender] || (buying && !_isExcludedFromFee[recipient])), selling);\r\n\r\n        if (buying && !isExcludedFromLimits[recipient]) {\r\n            require(values.tTransferAmount <= maxBuyAmount, \"Anti-whale: Buy amount exceeds max limit\");\r\n        }\r\n        if (selling && !isExcludedFromLimits[sender]) {\r\n            require(values.tTransferAmount <= maxSellAmount, \"Anti-whale: Sell amount exceeds max limit\");\r\n        }\r\n        if (!isExcludedFromLimits[recipient]) {\r\n            require(balanceOf(recipient) + values.tTransferAmount <= maxWalletAmount, \"Anti-whale: Wallet amount exceeds max limit\");\r\n        }\r\n\r\n        if (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\r\n            _transferFromExcluded(sender, recipient, values);\r\n        } else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n            _transferToExcluded(sender, recipient, values);\r\n        } else if (!_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\r\n            _transferStandard(sender, recipient, values);\r\n        } else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n            _transferBothExcluded(sender, recipient, values);\r\n        } else {\r\n            _transferStandard(sender, recipient, values);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, values.tTransferAmount);\r\n\r\n        if (!_isExcludedFromFee[sender] || (buying && !_isExcludedFromFee[recipient])) {\r\n            _afterTokenTransfer(values);\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address sender) internal virtual {\r\n        uint256 contractBalance = _tokenBalances[address(this)];\r\n\r\n        // whether the current contract balances makes the threshold to swap and liquify.\r\n        bool overMinTokensBeforeSwap = contractBalance >= _minTokensBeforeSwap;\r\n\r\n        if (overMinTokensBeforeSwap && !AMMPairs[sender]) {\r\n            if (_marketingRewardEnabled && !_inSwapAndLiquify) {\r\n                sendFeeToAddress(marketingAddress, _marketingPending);\r\n\r\n                _marketingPending = 0;\r\n            }\r\n\r\n            if (_autoSwapAndLiquifyEnabled && !_inSwapAndLiquify) {\r\n                swapAndLiquify(_tokenBalances[address(this)]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev Performs all the functionalities that are enabled.\r\n      */\r\n    function _afterTokenTransfer(ValuesFromAmount memory values) internal virtual {\r\n        // Reflect\r\n        if (_rewardEnabled) {\r\n            _distributeFee(values.rRewardFee, values.tRewardFee);\r\n        }\r\n\r\n        // Marketing Reward\r\n        if (_marketingRewardEnabled) {\r\n            // add marketing fee to this contract.\r\n            _tokenBalances[address(this)] += values.tMarketingFee;\r\n            _reflectionBalances[address(this)] += values.rMarketingFee;\r\n\r\n            _marketingPending += values.tMarketingFee;\r\n        }\r\n        \r\n        // Add to liquidity pool\r\n        if (_autoSwapAndLiquifyEnabled) {\r\n            // add liquidity fee to this contract.\r\n            _tokenBalances[address(this)] += values.tLiquifyFee;\r\n            _reflectionBalances[address(this)] += values.rLiquifyFee;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs transfer between two accounts that are both included in receiving reward.\r\n     */\r\n    function _transferStandard(address sender, address recipient, ValuesFromAmount memory values) private {\r\n        _reflectionBalances[sender] = _reflectionBalances[sender] - values.rAmount;\r\n        _reflectionBalances[recipient] = _reflectionBalances[recipient] + values.rTransferAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs transfer from an included account to an excluded account.\r\n     * (included and excluded from receiving reward.)\r\n     */\r\n    function _transferToExcluded(address sender, address recipient, ValuesFromAmount memory values) private {\r\n        _reflectionBalances[sender] = _reflectionBalances[sender] - values.rAmount;\r\n        _tokenBalances[recipient] = _tokenBalances[recipient] + values.tTransferAmount;\r\n        _reflectionBalances[recipient] = _reflectionBalances[recipient] + values.rTransferAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs transfer from an excluded account to an included account.\r\n     * (included and excluded from receiving reward.)\r\n     */\r\n    function _transferFromExcluded(address sender, address recipient, ValuesFromAmount memory values) private {\r\n        _tokenBalances[sender] = _tokenBalances[sender] - values.amount;\r\n        _reflectionBalances[sender] = _reflectionBalances[sender] - values.rAmount;\r\n        _reflectionBalances[recipient] = _reflectionBalances[recipient] + values.rTransferAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs transfer between two accounts that are both excluded in receiving reward.\r\n     */\r\n    function _transferBothExcluded(address sender, address recipient, ValuesFromAmount memory values) private {\r\n        _tokenBalances[sender] = _tokenBalances[sender] - values.amount;\r\n        _reflectionBalances[sender] = _reflectionBalances[sender] - values.rAmount;\r\n        _tokenBalances[recipient] = _tokenBalances[recipient] + values.tTransferAmount;\r\n        _reflectionBalances[recipient] = _reflectionBalances[recipient] + values.rTransferAmount;\r\n    }\r\n    \r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(account, _msgSender(), currentAllowance - amount);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    /**\r\n      * @dev Excludes an account from receiving reward.\r\n      *\r\n      * Emits a {ExcludeAccountFromReward} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `account` is included in receiving reward.\r\n      */\r\n    function excludeAccountFromReward(address account) public onlyOwner {\r\n        require(!_isExcludedFromReward[account], \"Account already excluded from reward\");\r\n        if(_reflectionBalances[account] > 0) {\r\n            _tokenBalances[account] = tokenFromReflection(_reflectionBalances[account]);\r\n        }\r\n        _isExcludedFromReward[account] = true;\r\n        _excludedFromReward.push(account);\r\n        \r\n        emit ExcludeAccountFromReward(account);\r\n    }\r\n\r\n    /**\r\n      * @dev Includes an account from receiving reward.\r\n      *\r\n      * Emits a {IncludeAccountInReward} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `account` is excluded in receiving reward.\r\n      */\r\n    function includeAccountInReward(address account) public onlyOwner {\r\n        require(_isExcludedFromReward[account], \"Account is already included.\");\r\n\r\n        for (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n            if (_excludedFromReward[i] == account) {\r\n                _excludedFromReward[i] = _excludedFromReward[_excludedFromReward.length - 1];\r\n                _tokenBalances[account] = 0;\r\n                _isExcludedFromReward[account] = false;\r\n                _excludedFromReward.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit IncludeAccountInReward(account);\r\n    }\r\n\r\n     /**\r\n      * @dev Excludes an account from fee.\r\n      *\r\n      * Emits a {ExcludeAccountFromFee} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `account` is included in fee.\r\n      */\r\n    function excludeAccountFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n\r\n        emit ExcludeAccountFromFee(account);\r\n    }\r\n\r\n    /**\r\n      * @dev Includes an account from fee.\r\n      *\r\n      * Emits a {IncludeAccountFromFee} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `account` is excluded in fee.\r\n      */\r\n    function includeAccountInFee(address account) public onlyOwner {\r\n        require(_isExcludedFromFee[account], \"Account is already included.\");\r\n\r\n        _isExcludedFromFee[account] = false;\r\n        \r\n        emit IncludeAccountInFee(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Airdrop tokens to all holders that are included from reward. \r\n     *  Requirements:\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function airdrop(uint256 amount) public {\r\n        address sender = _msgSender();\r\n        //require(!_isExcludedFromReward[sender], \"Excluded addresses cannot call this function\");\r\n        require(balanceOf(sender) >= amount, \"The caller must have balance >= amount.\");\r\n        ValuesFromAmount memory values = _getValues(amount, false, false);\r\n        if (_isExcludedFromReward[sender]) {\r\n            _tokenBalances[sender] -= values.amount;\r\n        }\r\n        _reflectionBalances[sender] -= values.rAmount;\r\n        \r\n        _reflectionTotal = _reflectionTotal - values.rAmount;\r\n        _totalRewarded += amount;\r\n        emit Airdrop(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the reflected amount of a token.\r\n     *  Requirements:\r\n     * - `amount` must be less than total supply.\r\n     */\r\n    function reflectionFromToken(uint256 amount, bool deductTransferFee, bool selling) internal view returns(uint256) {\r\n        require(amount <= _totalSupply, \"Amount must be less than supply\");\r\n        ValuesFromAmount memory values = _getValues(amount, deductTransferFee, selling);\r\n        return values.rTransferAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Used to figure out the balance after reflection.\r\n     * Requirements:\r\n     * - `rAmount` must be less than reflectTotal.\r\n     */\r\n    function tokenFromReflection(uint256 rAmount) internal view returns(uint256) {\r\n        require(rAmount <= _reflectionTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Swap half of contract's token balance for ETH,\r\n     * and pair it up with the other half to add to the\r\n     * liquidity pool.\r\n     *\r\n     * Emits {SwapAndLiquify} event indicating the amount of tokens swapped to eth,\r\n     * the amount of ETH added to the LP, and the amount of tokens added to the LP.\r\n     */\r\n    function swapAndLiquify(uint256 contractBalance) private {\r\n        // Split the contract balance into two halves.\r\n        uint256 tokensToSwap = contractBalance / 2;\r\n        uint256 tokensAddToLiquidity = contractBalance - tokensToSwap;\r\n\r\n        // Contract's current ETH balance.\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // Swap half of the tokens to ETH.\r\n        swapTokensForEth(address(this), tokensToSwap);\r\n\r\n        // Figure out the exact amount of tokens received from swapping.\r\n        uint256 ethAddToLiquify = address(this).balance - initialBalance;\r\n\r\n        // Add to the LP of this token and WETH pair (half ETH and half this token).\r\n        addLiquidity(ethAddToLiquify, tokensAddToLiquidity);\r\n\r\n        emit SwapAndLiquify(tokensToSwap, ethAddToLiquify, tokensAddToLiquidity);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Swap `amount` tokens for ETH.\r\n     *\r\n     * Emits {Transfer} event. From this contract to the token and WETH Pair.\r\n     */\r\n    function swapTokensForEth(address recipient, uint256 amount) private lockTheSwap {\r\n        // Generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(_uniswapV2Router), amount);\r\n\r\n        // Swap tokens to ETH\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amount, \r\n            0, \r\n            path, \r\n            recipient,\r\n            block.timestamp + 60 * 1000\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * @dev Add `ethAmount` of ETH and `tokenAmount` of tokens to the LP.\r\n     * Depends on the current rate for the pair between this token and WETH,\r\n     * `ethAmount` and `tokenAmount` might not match perfectly. \r\n     * Dust(leftover) ETH or token will be refunded to this contract\r\n     * (usually very small quantity).\r\n     *\r\n     * Emits {Transfer} event. From this contract to the token and WETH Pai.\r\n     */\r\n    function addLiquidity(uint256 ethAmount, uint256 tokenAmount) private lockTheSwap {\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n\r\n        // Add the ETH and token to LP.\r\n        // The LP tokens will be sent to burnAccount.\r\n        // No one will have access to them, so the liquidity will be locked forever.\r\n        _uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this), \r\n            tokenAmount, \r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            burnAccount, // the LP is sent to burnAccount. \r\n            block.timestamp + 60 * 1000\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Distribute the `tRewardFee` tokens to all holders that are included in receiving reward.\r\n     * amount received is based on how many token one owns.  \r\n     */\r\n    function _distributeFee(uint256 rRewardFee, uint256 tRewardFee) private {\r\n        // This would decrease rate, thus increase amount reward receive based on one's balance.\r\n        _reflectionTotal = _reflectionTotal - rRewardFee;\r\n        _totalRewarded += tRewardFee;\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns fees and transfer amount in both tokens and reflections.\r\n     * tXXXX stands for tokenXXXX\r\n     * rXXXX stands for reflectionXXXX\r\n     * More details can be found at comments for ValuesForAmount Struct.\r\n     */\r\n    function _getValues(uint256 amount, bool deductTransferFee, bool selling) private view returns (ValuesFromAmount memory) {\r\n        ValuesFromAmount memory values;\r\n        values.amount = amount;\r\n        _getTValues(values, deductTransferFee, selling);\r\n        _getRValues(values, deductTransferFee);\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds fees and transfer amount in tokens to `values`.\r\n     * tXXXX stands for tokenXXXX\r\n     * More details can be found at comments for ValuesForAmount Struct.\r\n     */\r\n    function _getTValues(ValuesFromAmount memory values, bool deductTransferFee, bool selling) view private {\r\n        \r\n        if (deductTransferFee) {\r\n            values.tTransferAmount = values.amount;\r\n        } else {\r\n            // calculate fee\r\n            uint32 index = 0;\r\n            if (selling && _listingTime + highTaxCooldown <= block.timestamp) index=1;\r\n            else if (selling && _listingTime + highTaxCooldown > block.timestamp) index=2;\r\n\r\n            values.tRewardFee = _calculateTax(values.amount, _taxReward[index], _taxRewardDecimals);\r\n            values.tLiquifyFee = _calculateTax(values.amount, _taxLiquify[index], _taxLiquifyDecimals);\r\n            values.tMarketingFee = _calculateTax(values.amount, _taxMarketing[index], _taxMarketingDecimals);\r\n\r\n            // amount after fee\r\n            values.tTransferAmount = values.amount - values.tRewardFee - values.tLiquifyFee - values.tMarketingFee;\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Adds fees and transfer amount in reflection to `values`.\r\n     * rXXXX stands for reflectionXXXX\r\n     * More details can be found at comments for ValuesForAmount Struct.\r\n     */\r\n    function _getRValues(ValuesFromAmount memory values, bool deductTransferFee) view private {\r\n        uint256 currentRate = _getRate();\r\n\r\n        values.rAmount = values.amount * currentRate;\r\n\r\n        if (deductTransferFee) {\r\n            values.rTransferAmount = values.rAmount;\r\n        } else {\r\n            values.rAmount = values.amount * currentRate;\r\n\r\n            values.rRewardFee = values.tRewardFee * currentRate;\r\n            values.rLiquifyFee = values.tLiquifyFee * currentRate;\r\n            values.rMarketingFee = values.tMarketingFee * currentRate;\r\n\r\n            values.rTransferAmount = values.rAmount - values.rRewardFee - values.rLiquifyFee - values.rMarketingFee;\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * @dev Returns `amount` in reflection.\r\n     */\r\n    function _getRAmount(uint256 amount) private view returns (uint256) {\r\n        uint256 currentRate = _getRate();\r\n        return amount * currentRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current reflection rate.\r\n     */\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current reflection supply and token supply.\r\n     */\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _reflectionTotal;\r\n        uint256 tSupply = _totalSupply;      \r\n        for (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n            if (_reflectionBalances[_excludedFromReward[i]] > rSupply || _tokenBalances[_excludedFromReward[i]] > tSupply) return (_reflectionTotal, _totalSupply);\r\n            rSupply = rSupply - _reflectionBalances[_excludedFromReward[i]];\r\n            tSupply = tSupply - _tokenBalances[_excludedFromReward[i]];\r\n        }\r\n        if (rSupply < _reflectionTotal / _totalSupply) return (_reflectionTotal, _totalSupply);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns fee based on `amount` and `taxRate`\r\n     */\r\n    function _calculateTax(uint256 amount, uint32 tax, uint32 taxDecimals_) private pure returns (uint256) {\r\n        return amount * tax / (10 ** taxDecimals_) / (10 ** 2);\r\n    }\r\n\r\n    /*\r\n        Owner functions\r\n    */\r\n\r\n    /**\r\n     * @dev Enables the reward feature.\r\n     * Distribute transaction amount * `taxReward_` amount of tokens each transaction when enabled.\r\n     *\r\n     * Emits a {EnabledReward} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - reward feature mush be disabled.\r\n     * - tax must be greater than 0.\r\n     * - tax decimals + 2 must be less than token decimals. \r\n     * (because tax rate is in percentage)\r\n    */\r\n    function enableReward(uint32[] memory taxReward_, uint32 taxRewardDecimals_) public onlyOwner {\r\n        require(!_rewardEnabled, \"Reward feature is already enabled.\");\r\n        require(taxReward_[0] > 0 || taxReward_[1] > 0 || taxReward_[2] > 0, \"Tax must be greater than 0.\");\r\n        require(taxRewardDecimals_ + 2  <= decimals(), \"Tax decimals must be less than token decimals - 2\");\r\n\r\n        _rewardEnabled = true;\r\n        setTaxReward(taxReward_, taxRewardDecimals_);\r\n\r\n        emit EnabledReward();\r\n    }\r\n\r\n    /**\r\n      * @dev Enables the auto swap and liquify feature.\r\n      * Swaps half of transaction amount * `taxLiquify_` amount of tokens \r\n      * to ETH and pair with the other half of tokens to the LP each transaction when enabled.\r\n      *\r\n      * Emits a {EnabledAutoSwapAndLiquify} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - auto swap and liquify feature mush be disabled.\r\n      * - tax must be greater than 0.\r\n      * - tax decimals + 2 must be less than token decimals. \r\n      * (because tax rate is in percentage)\r\n      */\r\n    function enableAutoSwapAndLiquify(uint32[] memory taxLiquify_, uint32 taxLiquifyDecimals_, address routerAddress, uint256 minTokensBeforeSwap_) public onlyOwner {\r\n        require(!_autoSwapAndLiquifyEnabled, \"Auto swap and liquify feature is already enabled.\");\r\n        require(taxLiquify_[0] > 0 || taxLiquify_[1] > 0 || taxLiquify_[2] > 0, \"Tax must be greater than 0.\");\r\n        require(taxLiquifyDecimals_ + 2  <= decimals(), \"Tax decimals must be less than token decimals - 2\");\r\n\r\n        _minTokensBeforeSwap = minTokensBeforeSwap_;\r\n\r\n        initSwap(routerAddress);\r\n\r\n        // enable\r\n        _autoSwapAndLiquifyEnabled = true;\r\n        setTaxLiquify(taxLiquify_, taxLiquifyDecimals_);\r\n        \r\n        emit EnabledAutoSwapAndLiquify();\r\n    }\r\n\r\n    function initSwap(address routerAddress) public onlyOwner {\r\n        // init Router\r\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n\r\n        _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).getPair(address(this), uniswapV2Router.WETH());\r\n\r\n        if (_uniswapV2Pair == address(0)) {\r\n            _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n                .createPair(address(this), uniswapV2Router.WETH());\r\n        }\r\n        \r\n        _uniswapV2Router = uniswapV2Router;\r\n\r\n        _setAMMPair(_uniswapV2Pair, true);\r\n\r\n        excludeAccountFromLimits(address(uniswapV2Router));\r\n        if (!_isExcludedFromReward[address(uniswapV2Router)])\r\n            excludeAccountFromReward(address(uniswapV2Router));\r\n        excludeAccountFromFee(address(uniswapV2Router));\r\n    }\r\n\r\n    function enableMarketingTax(uint32[] memory taxMarketing_, uint32 taxMarketingDecimals_, address marketingAddress_) public onlyOwner {\r\n        require(!_marketingRewardEnabled, \"Marketing tax feature is already enabled.\");\r\n        require(taxMarketing_[0] > 0 || taxMarketing_[1] > 0 || taxMarketing_[2] > 0, \"Tax must be greater than 0.\");\r\n        require(taxMarketingDecimals_ + 2  <= decimals(), \"Tax decimals must be less than token decimals - 2\");\r\n\r\n        _marketingRewardEnabled = true;\r\n        setMarketingTax(taxMarketing_, taxMarketingDecimals_);\r\n        setMarketingAddress(marketingAddress_);\r\n\r\n        emit EnabledMarketingReward();\r\n    }\r\n\r\n    /**\r\n      * @dev Disables the reward feature.\r\n      *\r\n      * Emits a {DisabledReward} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - reward feature mush be enabled.\r\n      */\r\n    function disableReward() public onlyOwner {\r\n        require(_rewardEnabled, \"Reward feature is already disabled.\");\r\n\r\n        setTaxReward(new uint32[](3), 0);\r\n        _rewardEnabled = false;\r\n        \r\n        emit DisabledReward();\r\n    }\r\n\r\n    /**\r\n      * @dev Disables the auto swap and liquify feature.\r\n      *\r\n      * Emits a {DisabledAutoSwapAndLiquify} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - auto swap and liquify feature mush be enabled.\r\n      */\r\n    function disableAutoSwapAndLiquify() public onlyOwner {\r\n        require(_autoSwapAndLiquifyEnabled, \"Auto swap and liquify feature is already disabled.\");\r\n\r\n        setTaxLiquify(new uint32[](3), 0);\r\n        _autoSwapAndLiquifyEnabled = false;\r\n         \r\n        emit DisabledAutoSwapAndLiquify();\r\n    }\r\n\r\n\r\n    function disableMarketingTax() public onlyOwner {\r\n        require(_marketingRewardEnabled, \"Marketing reward feature is already disabled.\");\r\n\r\n        setMarketingTax(new uint32[](3), 0);\r\n        setMarketingAddress(address(0x0));\r\n        _marketingRewardEnabled = false;\r\n        \r\n        emit DisabledMarketingReward();\r\n    }\r\n\r\n     /**\r\n      * @dev Updates `_minTokensBeforeSwap`\r\n      *\r\n      * Emits a {MinTokensBeforeSwap} event.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `minTokensBeforeSwap_` must be less than _currentSupply.\r\n      */\r\n    function setMinTokensBeforeSwap(uint256 minTokensBeforeSwap_) public onlyOwner {\r\n        require(minTokensBeforeSwap_ < _currentSupply, \"minTokensBeforeSwap must be lower than current supply.\");\r\n\r\n        uint256 previous = _minTokensBeforeSwap;\r\n        _minTokensBeforeSwap = minTokensBeforeSwap_;\r\n\r\n        emit MinTokensBeforeSwapUpdated(previous, _minTokensBeforeSwap);\r\n    }\r\n\r\n    function setTaxReward(uint32[] memory taxReward_, uint32 taxRewardDecimals_) public onlyOwner {\r\n        require(_rewardEnabled, \"Reward feature must be enabled. Try the EnableReward function.\");\r\n\r\n        uint32[] memory previousTax = _taxReward;\r\n        uint32 previousDecimals = _taxRewardDecimals;\r\n        _taxReward = taxReward_;\r\n        _taxRewardDecimals = taxRewardDecimals_;\r\n\r\n        checkMaxTaxLimit();\r\n        emit TaxRewardUpdate(previousTax, previousDecimals, taxReward_, taxRewardDecimals_);\r\n    }\r\n\r\n    function setTaxLiquify(uint32[] memory taxLiquify_, uint32 taxLiquifyDecimals_) public onlyOwner {\r\n        require(_autoSwapAndLiquifyEnabled, \"Auto swap and liquify feature must be enabled. Try the EnableAutoSwapAndLiquify function.\");\r\n\r\n        uint32[] memory previousTax = _taxLiquify;\r\n        uint32 previousDecimals = _taxLiquifyDecimals;\r\n        _taxLiquify = taxLiquify_;\r\n        _taxLiquifyDecimals = taxLiquifyDecimals_;\r\n\r\n        checkMaxTaxLimit();\r\n        emit TaxLiquifyUpdate(previousTax, previousDecimals, taxLiquify_, taxLiquifyDecimals_);\r\n    }\r\n\r\n    function setMarketingTax(uint32[] memory taxMarketing_, uint32 taxMarketingDecimals_) public onlyOwner {\r\n        require(_marketingRewardEnabled, \"Marketing reward feature must be enabled. Try the EnableMarketingTax function.\");\r\n\r\n        uint32[] memory previousTax = _taxMarketing;\r\n        uint32 previousDecimals = _taxMarketingDecimals;\r\n        _taxMarketing = taxMarketing_;\r\n        _taxMarketingDecimals = taxMarketingDecimals_;\r\n\r\n        checkMaxTaxLimit();\r\n        emit TaxMarketingUpdate(previousTax, previousDecimals, taxMarketing_, taxMarketingDecimals_);\r\n    }\r\n\r\n    function setMarketingAddress(address marketingAddress_) public onlyOwner {\r\n        address previous = marketingAddress;\r\n        marketingAddress = marketingAddress_;\r\n\r\n        if (!_isExcludedFromReward[marketingAddress])\r\n            excludeAccountFromReward(marketingAddress);\r\n        excludeAccountFromLimits(marketingAddress);\r\n        excludeAccountFromFee(marketingAddress);\r\n\r\n        emit MarketingAddressUpdated(previous, marketingAddress_);\r\n    }\r\n\r\n    function sendFeeToAddress(address _addr, uint256 _tAmount) private {\r\n        swapTokensForEth(_addr, _tAmount);\r\n    }\r\n\r\n    function checkMaxTaxLimit() private view {\r\n        uint256 testAmount = 10 ** 18;\r\n        uint256 limit = 25 * 10 ** 16;\r\n        require(_calculateTax(testAmount, _taxReward[0], _taxRewardDecimals)\r\n            + _calculateTax(testAmount, _taxLiquify[0], _taxLiquifyDecimals)\r\n            + _calculateTax(testAmount, _taxMarketing[0], _taxMarketingDecimals) <= limit, \"Total tax too high\");\r\n        require(_calculateTax(testAmount, _taxReward[1], _taxRewardDecimals)\r\n            + _calculateTax(testAmount, _taxLiquify[1], _taxLiquifyDecimals)\r\n            + _calculateTax(testAmount, _taxMarketing[1], _taxMarketingDecimals) <= limit, \"Total tax too high\");\r\n        require(_calculateTax(testAmount, _taxReward[2], _taxRewardDecimals)\r\n            + _calculateTax(testAmount, _taxLiquify[2], _taxLiquifyDecimals)\r\n            + _calculateTax(testAmount, _taxMarketing[2], _taxMarketingDecimals) <= limit, \"Total tax too high\");\r\n    }\r\n\r\n    // ##############\r\n    // Features added\r\n    // ##############\r\n\r\n    uint256 public maxBuyAmount;\r\n    uint256 public maxSellAmount;\r\n    uint256 public maxWalletAmount;\r\n\r\n    uint256 public highTaxCooldown;\r\n\r\n    mapping (address => bool) public isExcludedFromLimits;\r\n    mapping (address => bool) public AMMPairs;\r\n\r\n    uint256 private _listingTime;\r\n\r\n    function setAMMPair(address pair, bool value) public onlyOwner {\r\n        require(pair != _uniswapV2Pair, \"The main pair cannot be removed from AMMPairs.\");\r\n\r\n        _setAMMPair(pair, value);\r\n    }\r\n\r\n    function _setAMMPair(address pair, bool value) private {\r\n        AMMPairs[pair] = value;\r\n\r\n        if(value) {\r\n            if (!_isExcludedFromReward[pair])\r\n                excludeAccountFromReward(pair);\r\n            excludeAccountFromLimits(pair);\r\n            excludeAccountFromFee(pair);\r\n        }\r\n\r\n        emit AMMPairUpdated(pair, value);\r\n    }\r\n\r\n    function excludeAccountFromLimits(address account) public onlyOwner {\r\n        isExcludedFromLimits[account] = true;\r\n    }\r\n\r\n    function includeAccountInLimits(address account) public onlyOwner {\r\n        isExcludedFromLimits[account] = false;\r\n    }\r\n\r\n    function changeMaxBuyAmount(uint256 amount) public onlyOwner {\r\n        maxBuyAmount = amount;\r\n    }\r\n\r\n    function changeMaxSellAmount(uint256 amount) public onlyOwner {\r\n        maxSellAmount = amount;\r\n    }\r\n\r\n    function changeMaxWalletAmount(uint256 amount) public onlyOwner {\r\n        maxWalletAmount = amount;\r\n    }\r\n\r\n    function changeHighTaxCooldown(uint256 newCooldown) public onlyOwner {\r\n        require(highTaxCooldown <= 48 hours, \"Cooldown too long.\");\r\n        highTaxCooldown = newCooldown;\r\n    }\r\n}\r\n\r\ncontract Elixireum is ExtendedReflections {\r\n\r\n    uint256 private _tokenSupply = 1_000_000_000_000;\r\n\r\n    // 0-BUY + TRANSFER, 1-SELL, 2-SELL FIRST 24h\r\n    uint32[] private _taxReward = [1,1,1];\r\n    uint32[] private _taxLiquify = [2,2,2];\r\n    uint32[] private _taxMarketing = [4,4,4];\r\n\r\n    uint256 private _highTaxCooldown = 1 hours;\r\n\r\n    uint32 private _taxDecimals = 0;\r\n    uint32 private _decimals = 18;\r\n\r\n    uint256 private _minTokensBeforeSwap = 10_000_000 * (10 ** _decimals);\r\n\r\n    uint256 private _maxBuyAmount = 10_000_000_000 * (10 ** _decimals);\r\n    uint256 private _maxSellAmount = 10_000_000_000 * (10 ** _decimals);\r\n    uint256 private _maxWalletAmount = 20_000_000_000 * (10 ** _decimals);\r\n\r\n    /**\r\n     * @dev Choose proper router address according to your network:\r\n     * Ethereum mainnet: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D (Uniswap)\r\n     * BSC mainnet: 0x10ED43C718714eb63d5aA57B78B54704E256024E (PancakeSwap)\r\n     * BSC testnet: 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n     */\r\n\r\n    address private _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    constructor (address _marketingAddress) ExtendedReflections(\"Elixir of Crypto\", \"Elixireum\", _decimals, _tokenSupply) {\r\n        enableReward(_taxReward, _taxDecimals);\r\n        enableMarketingTax(_taxMarketing, _taxDecimals, _marketingAddress);\r\n        enableAutoSwapAndLiquify(_taxLiquify, _taxDecimals, _routerAddress, _minTokensBeforeSwap);\r\n\r\n        changeMaxBuyAmount(_maxBuyAmount);\r\n        changeMaxSellAmount(_maxSellAmount);\r\n        changeMaxWalletAmount(_maxWalletAmount);\r\n        changeHighTaxCooldown(_highTaxCooldown);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AMMPairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Airdrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisabledAutoSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisabledMarketingReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisabledReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledAutoSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledMarketingReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnabledReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeAccountFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludeAccountFromReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeAccountInFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludeAccountInReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"MarketingAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensAddedToLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"previousTax\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousDecimals\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"currentTax\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentDecimal\",\"type\":\"uint32\"}],\"name\":\"TaxLiquifyUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"previousTax\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousDecimals\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"currentTax\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentDecimal\",\"type\":\"uint32\"}],\"name\":\"TaxMarketingUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"previousTax\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousDecimals\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"currentTax\",\"type\":\"uint32[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentDecimal\",\"type\":\"uint32\"}],\"name\":\"TaxRewardUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AMMPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCooldown\",\"type\":\"uint256\"}],\"name\":\"changeHighTaxCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"changeMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAutoSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"taxLiquify_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"taxLiquifyDecimals_\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap_\",\"type\":\"uint256\"}],\"name\":\"enableAutoSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"taxMarketing_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"taxMarketingDecimals_\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"marketingAddress_\",\"type\":\"address\"}],\"name\":\"enableMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"taxReward_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"taxRewardDecimals_\",\"type\":\"uint32\"}],\"name\":\"enableReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highTaxCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccountInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccountInLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccountInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"initSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingRewardEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAMMPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAddress_\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"taxMarketing_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"taxMarketingDecimals_\",\"type\":\"uint32\"}],\"name\":\"setMarketingTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap_\",\"type\":\"uint256\"}],\"name\":\"setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"taxLiquify_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"taxLiquifyDecimals_\",\"type\":\"uint32\"}],\"name\":\"setTaxLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"taxReward_\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32\",\"name\":\"taxRewardDecimals_\",\"type\":\"uint32\"}],\"name\":\"setTaxReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"mode\",\"type\":\"uint32\"}],\"name\":\"taxLiquify\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxLiquifyDecimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"mode\",\"type\":\"uint32\"}],\"name\":\"taxMarketing\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxMarketingDecimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"mode\",\"type\":\"uint32\"}],\"name\":\"taxReward\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRewardDecimals\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Elixireum", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f6a2be5462f71395630e159ddc157425704a62e8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://feda42ed7d413577a137649d9090300f7b1877c3ad9c2f0298cb573376f85795"}