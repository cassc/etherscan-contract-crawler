{"SourceCode": "/// tinlake_manager.sol -- Tinlake dss adapter\r\n\r\n// 2020 Lucas Vogelsang <lucas@centrifuge.io>,\r\n// 2020 Martin Lundfall <martin.lundfall@gmail.com>\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity =0.5.12;\r\n\r\ninterface GemLike {\r\n    function decimals() external view returns (uint256);\r\n    function transfer(address,uint256) external returns (bool);\r\n    function transferFrom(address,address,uint256) external returns (bool);\r\n    function approve(address,uint256) external returns (bool);\r\n    function totalSupply() external returns (uint256);\r\n    function balanceOf(address) external returns (uint256);\r\n}\r\n\r\ninterface JoinLike {\r\n    function join(address,uint256) external;\r\n    function exit(address,uint256) external;\r\n}\r\n\r\ninterface EndLike {\r\n    function debt() external returns (uint256);\r\n}\r\n\r\ninterface RedeemLike {\r\n    function redeemOrder(uint256) external;\r\n    function disburse(uint256) external returns (uint256,uint256,uint256,uint256);\r\n}\r\n\r\ninterface VatLike {\r\n    function urns(bytes32,address) external returns (uint256,uint256);\r\n    function ilks(bytes32) external returns (uint256,uint256,uint256,uint256,uint256);\r\n    function live() external returns(uint);\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function gem() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n}\r\n\r\ninterface MIP21UrnLike {\r\n    function lock(uint256 wad) external;\r\n    function free(uint256 wad) external;\r\n    // n.b. DAI can only go to the output conduit\r\n    function draw(uint256 wad) external;\r\n    // n.b. anyone can wipe\r\n    function wipe(uint256 wad) external;\r\n    function quit() external;\r\n    function gemJoin() external returns (address);\r\n}\r\n\r\ninterface MIP21LiquidationLike {\r\n    function ilks(bytes32 ilk) external returns (string memory, address, uint48, uint48);\r\n}\r\n\r\ncontract TinlakeManager {\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n\r\n    function rely(address usr) external auth {\r\n        wards[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n    function deny(address usr) external auth {\r\n        wards[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"TinlakeMgr/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // Events\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event Draw(uint256 wad);\r\n    event Wipe(uint256 wad);\r\n    event Join(uint256 wad);\r\n    event Exit(uint256 wad);\r\n    event Tell(uint256 wad);\r\n    event Unwind(uint256 payBack);\r\n    event Cull(uint256 tab);\r\n    event Recover(uint256 recovered, uint256 payBack);\r\n    event Cage();\r\n    event File(bytes32 indexed what, address indexed data);\r\n    event Migrate(address indexed dst);\r\n\r\n    bool public safe; // Soft liquidation not triggered\r\n    bool public glad; // Write-off not triggered\r\n    bool public live; // Global settlement not triggered\r\n\r\n    uint256 public tab;  // Dai owed\r\n\r\n    // --- Contracts ---\r\n    // dss components\r\n    VatLike public vat;\r\n    GemLike public dai;\r\n    EndLike public end;\r\n    address public vow;\r\n    JoinLike public daiJoin;\r\n\r\n    // Tinlake components\r\n    GemLike      public gem;\r\n    RedeemLike   public pool;\r\n\r\n    // MIP21 RWAUrn\r\n    MIP21UrnLike public urn;\r\n    MIP21LiquidationLike public liq;\r\n\r\n    address public tranche;\r\n    address public owner;\r\n\r\n    constructor(address dai_,   address daiJoin_,\r\n                address drop_,  address pool_,\r\n                address tranche_, address end_,\r\n                address vat_, address vow_\r\n                ) public {\r\n        dai = GemLike(dai_);\r\n        daiJoin = JoinLike(daiJoin_);\r\n        vat = VatLike(vat_);\r\n        vow = vow_;\r\n        end = EndLike(end_);\r\n        gem = GemLike(drop_);\r\n\r\n        pool = RedeemLike(pool_);\r\n\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n\r\n        safe = true;\r\n        glad = true;\r\n        live = true;\r\n\r\n        tranche = tranche_;\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant RAY = 10 ** 27;\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x);\r\n    }\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x);\r\n    }\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(x, sub(y, 1)) / y;\r\n    }\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x > y ? y : x;\r\n    }\r\n\r\n\r\n    // --- Gem Operation ---\r\n    // moves the rwaToken into the vault\r\n    // requires that mgr contract holds the rwaToken\r\n    function lock(uint256 wad) public auth {\r\n        GemLike(GemJoinLike(urn.gemJoin()).gem()).approve(address(urn), uint256(wad));\r\n        urn.lock(wad);\r\n    }\r\n    // removes the rwaToken from the vault\r\n    function free(uint256 wad) public auth {\r\n        urn.free(wad);\r\n    }\r\n\r\n    // --- DROP Operation ---\r\n    // join & exit move the gem directly into/from the urn\r\n    function join(uint256 wad) public auth {\r\n        require(safe && live, \"TinlakeManager/bad-state\");\r\n        require(int256(wad) >= 0, \"TinlakeManager/overflow\");\r\n        gem.transferFrom(msg.sender, address(this), wad);\r\n        emit Join(wad);\r\n    }\r\n\r\n    function exit(uint256 wad) public auth {\r\n        require(safe && live, \"TinlakeManager/bad-state\");\r\n        require(wad <= 2 ** 255, \"TinlakeManager/overflow\");\r\n        gem.transfer(msg.sender, wad);\r\n        emit Exit(wad);\r\n    }\r\n\r\n    // --- DAI Operation ---\r\n    // draw & wipe call daiJoin.exit/join immediately\r\n    function draw(uint256 wad) public auth {\r\n        require(safe && live, \"TinlakeManager/bad-state\");\r\n        urn.draw(wad);\r\n        dai.transfer(msg.sender, wad);\r\n        emit Draw(wad);\r\n    }\r\n\r\n    function wipe(uint256 wad) public {\r\n        require(safe && live, \"TinlakeManager/bad-state\");\r\n        dai.transferFrom(msg.sender, address(urn), wad);\r\n        urn.wipe(wad);\r\n        emit Wipe(wad);\r\n    }\r\n\r\n    // Take DAI from the urn in case there is any in the Urn\r\n    // can be dealt with through migrate() after ES\r\n    function quit() public auth {\r\n        urn.quit();\r\n    }\r\n\r\n    // --- Administration ---\r\n    function migrate(address dst) public auth {\r\n        dai.approve(dst, uint256(-1));\r\n        gem.approve(dst, uint256(-1));\r\n        live = false;\r\n        emit Migrate(dst);\r\n    }\r\n\r\n    function file(bytes32 what, address data) public auth {\r\n        emit File(what, data);\r\n        if (what == \"urn\") {\r\n            urn = MIP21UrnLike(data);\r\n            dai.approve(data, uint256(-1));\r\n        }\r\n        else if (what == \"liq\") {\r\n            liq = MIP21LiquidationLike(data);\r\n        }\r\n        else if (what == \"owner\") {\r\n            owner = data;\r\n        }\r\n        else if (what == \"vow\") {\r\n            vow = data;\r\n        }\r\n        else if (what == \"end\") {\r\n            end = EndLike(data);\r\n        }\r\n        else if (what == \"pool\") {\r\n            pool = RedeemLike(data);\r\n        }\r\n        else if (what == \"tranche\") {\r\n            tranche = data;\r\n        }\r\n        else revert(\"TinlakeMgr/file-unknown-param\");\r\n    }\r\n\r\n    // --- Liquidation ---\r\n    // triggers a soft liquidation of the DROP collateral\r\n    // a redeemOrder is submitted to receive DAI back\r\n    function tell() public {\r\n        require(safe, \"TinlakeMgr/not-safe\");\r\n        bytes32 ilk = GemJoinLike(urn.gemJoin()).ilk();\r\n\r\n        (,,, uint48 toc) = liq.ilks(ilk);\r\n        require(toc != 0, \"TinlakeMgr/not-liquidated\");\r\n\r\n        (, uint256 art) = vat.urns(ilk, address(urn));\r\n        (, uint256 rate, , ,) = vat.ilks(ilk);\r\n        tab = mul(art, rate);\r\n\r\n        uint256 ink = gem.balanceOf(address(this));\r\n        safe = false;\r\n        gem.approve(tranche, ink);\r\n        pool.redeemOrder(ink);\r\n        emit Tell(ink);\r\n    }\r\n\r\n    // triggers the payout of a DROP redemption\r\n    // method can be called multiple times until all DROP is redeemed\r\n    function unwind(uint256 endEpoch) public {\r\n        require(!safe && glad && live, \"TinlakeMgr/not-soft-liquidation\");\r\n\r\n        (uint256 redeemed, , ,) = pool.disburse(endEpoch);\r\n        bytes32 ilk = GemJoinLike(urn.gemJoin()).ilk();\r\n\r\n        (, uint256 art) = vat.urns(ilk, address(urn));\r\n        (, uint256 rate, , ,) = vat.ilks(ilk);\r\n        uint256 tab_ = mul(art, rate);\r\n\r\n        uint256 payBack = min(redeemed, divup(tab_, RAY));\r\n        dai.transferFrom(address(this), address(urn), payBack);\r\n        urn.wipe(payBack);\r\n\r\n        // Return possible remainder to the owner\r\n        dai.transfer(owner, dai.balanceOf(address(this)));\r\n        tab = sub(tab_, mul(payBack, RAY));\r\n        emit Unwind(payBack);\r\n    }\r\n\r\n    // --- Write-off ---\r\n    // can be called after RwaLiquidationOracle.cull()\r\n    function cull() public {\r\n        require(!safe && glad && live, \"TinlakeMgr/bad-state\");\r\n        bytes32 ilk = GemJoinLike(urn.gemJoin()).ilk();\r\n\r\n        (uint256 ink, uint256 art) = vat.urns(ilk, address(urn));\r\n        require(ink == 0 && art == 0, \"TinlakeMgr/not-written-off\");\r\n\r\n        (,, uint48 tau, uint48 toc) = liq.ilks(ilk);\r\n        require(toc != 0, \"TinlakeMgr/not-liquidated\");\r\n        require(block.timestamp >= add(toc, tau), \"TinlakeMgr/early-cull\");\r\n\r\n        glad = false;\r\n        emit Cull(tab);\r\n    }\r\n\r\n    // recovers DAI from the Tinlake pool by triggering a payout\r\n    // method can be called multiple times until all DROP is redeemed\r\n    function recover(uint256 endEpoch) public {\r\n        require(!glad, \"TinlakeMgr/not-written-off\");\r\n\r\n        (uint256 recovered, , ,) = pool.disburse(endEpoch);\r\n        uint256 payBack;\r\n        if (end.debt() == 0) {\r\n            payBack = min(recovered, tab / RAY);\r\n            dai.approve(address(daiJoin), payBack);\r\n            daiJoin.join(vow, payBack);\r\n            tab = sub(tab, mul(payBack, RAY));\r\n        }\r\n        dai.transfer(owner, dai.balanceOf(address(this)));\r\n        emit Recover(recovered, payBack);\r\n    }\r\n\r\n    function cage() external {\r\n        require(!glad, \"TinlakeMgr/bad-state\");\r\n        require(wards[msg.sender] == 1 || vat.live() == 0, \"TinlakeMgr/not-authorized\");\r\n        live = false;\r\n        emit Cage();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dai_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"drop_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tranche_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"end_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vow_\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Cage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"}],\"name\":\"Cull\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recovered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payBack\",\"type\":\"uint256\"}],\"name\":\"Recover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Tell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payBack\",\"type\":\"uint256\"}],\"name\":\"Unwind\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Wipe\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cull\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract GemLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract JoinLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"contract EndLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"contract GemLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"glad\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"join\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liq\",\"outputs\":[{\"internalType\":\"contract MIP21LiquidationLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract RedeemLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"quit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tab\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"tell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tranche\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"endEpoch\",\"type\":\"uint256\"}],\"name\":\"unwind\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"urn\",\"outputs\":[{\"internalType\":\"contract MIP21UrnLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TinlakeManager", "CompilerVersion": "v0.5.12+commit.7709ece9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a280000000000000000000000005b2f0521875b188c0afc925b1598e1ff246f930600000000000000000000000021335b1b19964ef33787138122fd1cdc6ded8186000000000000000000000000b101ed16ad86cb5cc92dadc357ad994ab6c663a5000000000000000000000000bb856d1742fd182a90239d7ae85706c2fe4e592200000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b000000000000000000000000a950524441892a31ebddf91d3ceefa04bf454466", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://c650da6c6841159262cbfae82d82c626fc72b9f570ff4f3ab6ea4d29b28a1299"}