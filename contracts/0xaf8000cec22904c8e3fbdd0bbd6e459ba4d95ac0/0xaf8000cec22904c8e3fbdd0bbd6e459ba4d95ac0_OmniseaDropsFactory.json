{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/v3/OmniseaDropsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"../interfaces/IOmniseaERC721Psi.sol\\\";\\r\\nimport \\\"./OmniseaERC721PsiProxy.sol\\\";\\r\\nimport \\\"../interfaces/IOmniseaDropsFactory.sol\\\";\\r\\nimport { CreateParams } from \\\"../structs/erc721/ERC721Structs.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract OmniseaDropsFactory is IOmniseaDropsFactory, ReentrancyGuard {\\r\\n    address internal _manager;\\r\\n    address public owner;\\r\\n    address public scheduler;\\r\\n    address public universalONFT;\\r\\n    address public omniseaERC721Psi;\\r\\n    mapping(address => bool) public drops;\\r\\n\\r\\n    event Created(address indexed collection);\\r\\n\\r\\n    constructor(address _scheduler, address _universalONFT, address _omniseaERC721Psi) {\\r\\n        owner = msg.sender;\\r\\n        scheduler = _scheduler;\\r\\n        universalONFT = _universalONFT;\\r\\n        omniseaERC721Psi = _omniseaERC721Psi;\\r\\n    }\\r\\n\\r\\n    function create(CreateParams calldata _params) external override nonReentrant {\\r\\n        OmniseaERC721PsiProxy proxy = new OmniseaERC721PsiProxy(omniseaERC721Psi);\\r\\n        address proxyAddress = address(proxy);\\r\\n        IOmniseaERC721Psi(proxyAddress).initialize(_params, msg.sender, _manager, scheduler, universalONFT);\\r\\n        drops[proxyAddress] = true;\\r\\n        emit Created(proxyAddress);\\r\\n    }\\r\\n\\r\\n    function setManager(address manager_) external {\\r\\n        require(msg.sender == owner);\\r\\n        _manager = manager_;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IOmniseaERC721Psi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { CreateParams } from \\\"../structs/erc721/ERC721Structs.sol\\\";\\n\\n/**\\n * @dev Interface of the IOmniseaUniversalONFT: Universal ONFT Core through delegation\\n */\\ninterface IOmniseaERC721Psi is IERC165 {\\n    function initialize(CreateParams memory params, address _owner, address _dropsManagerAddress, address _scheduler, address _universalONFT) external;\\n    function mint(address _minter, uint24 _quantity, bytes32[] memory _merkleProof, uint8 _phaseId) external;\\n    function mintPrice(uint8 _phaseId) external view returns (uint256);\\n    function exists(uint256 tokenId) external view returns (bool);\\n    function owner() external view returns (address);\\n    function dropsManager() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/contracts/v3/OmniseaERC721PsiProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract OmniseaERC721PsiProxy {\\r\\n    address private _proxy;\\r\\n\\r\\n    constructor(address proxy_) {\\r\\n        _proxy = proxy_;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        _delegate(_proxy);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        _delegate(_proxy);\\r\\n    }\\r\\n\\r\\n    function _delegate(address _proxyTo) internal {\\r\\n        assembly {\\r\\n            let ptr := mload(0x40)\\r\\n            calldatacopy(ptr, 0, calldatasize())\\r\\n            let result := delegatecall(gas(), _proxyTo, ptr, calldatasize(), 0, 0)\\r\\n            let size := returndatasize()\\r\\n            returndatacopy(ptr, 0, size)\\r\\n\\r\\n            switch result\\r\\n            case 0 { revert(ptr, size) }\\r\\n            default { return(ptr, size) }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IOmniseaDropsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport {CreateParams} from \\\"../structs/erc721/ERC721Structs.sol\\\";\\r\\n\\r\\ninterface IOmniseaDropsFactory {\\r\\n    function create(CreateParams calldata params) external;\\r\\n    function drops(address) external returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/structs/erc721/ERC721Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nstruct CreateParams {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string uri;\\r\\n    string tokensURI;\\r\\n    uint24 maxSupply;\\r\\n    bool isZeroIndexed;\\r\\n    uint24 royaltyAmount;\\r\\n    uint256 endTime;\\r\\n}\\r\\n\\r\\nstruct MintParams {\\r\\n    address collection;\\r\\n    uint24 quantity;\\r\\n    bytes32[] merkleProof;\\r\\n    uint8 phaseId;\\r\\n}\\r\\n\\r\\nstruct OmnichainMintParams {\\r\\n    address collection;\\r\\n    uint24 quantity;\\r\\n    uint256 paid;\\r\\n    uint8 phaseId;\\r\\n    address minter;\\r\\n}\\r\\n\\r\\nstruct Phase {\\r\\n    uint256 from;\\r\\n    uint256 to;\\r\\n    uint24 maxPerAddress;\\r\\n    uint256 price;\\r\\n    bytes32 merkleRoot;\\r\\n}\\r\\n\\r\\nstruct BasicCollectionParams {\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string uri;\\r\\n    string tokensURI;\\r\\n    uint24 maxSupply;\\r\\n    address owner;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_scheduler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_universalONFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_omniseaERC721Psi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokensURI\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"maxSupply\",\"type\":\"uint24\"},{\"internalType\":\"bool\",\"name\":\"isZeroIndexed\",\"type\":\"bool\"},{\"internalType\":\"uint24\",\"name\":\"royaltyAmount\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"internalType\":\"struct CreateParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"drops\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"omniseaERC721Psi\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scheduler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager_\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"universalONFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OmniseaDropsFactory", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000078e1cce9ec28f61f0749737ce8cab14b7eb685ca00000000000000000000000051ad7fe22a4a7cef856f655cd2ff8e1d492fb8b00000000000000000000000008692a822520681641e214dcd91aaef6c5873d98a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}