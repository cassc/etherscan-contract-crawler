{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/WaymontSafeExternalSigner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"lib/safe-contracts/contracts/Safe.sol\\\";\\r\\nimport \\\"lib/safe-contracts/contracts/EIP712DomainSeparator.sol\\\";\\r\\nimport \\\"lib/safe-contracts/contracts/CheckSignaturesEIP1271.sol\\\";\\r\\nimport \\\"lib/safe-contracts/contracts/common/Enum.sol\\\";\\r\\n\\r\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\n\\r\\nimport \\\"./WaymontSafePolicyGuardianSigner.sol\\\";\\r\\n\\r\\n/// @title WaymontSafeExternalSigner\\r\\n/// @notice Smart contract signer (via ERC-1271) for Safes allowing execution of transactions signed together through merkle trees and/or without incremental nonces.\\r\\n/// This contract is meant to be used with Safe contracts v1.4.1 (https://github.com/safe-global/safe-contracts/tree/v1.4.1). It can also be used with v1.4.0.\\r\\ncontract WaymontSafeExternalSigner is EIP712DomainSeparator, CheckSignaturesEIP1271 {\\r\\n    // @dev Equivalent of `Safe.SAFE_TX_TYPEHASH` but for transactions verified by this contract specifically.\\r\\n    // Computed as: `keccak256(\\\"WaymontSafeExternalSignerTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 uniqueId,uint256 groupUniqueId,uint256 deadline)\\\");`\\r\\n    bytes32 private constant EXTERNAL_SIGNER_SAFE_TX_TYPEHASH = 0xf641ab1aa14257ef40a4f6202602bc27847e79f0aa3bac95aa170c03c99d6290;\\r\\n\\r\\n    /// @notice Address of the `WaymontSafePolicyGuardianSigner` contract.\\r\\n    /// @dev Whether or not this variable is set controls whether or not this contract should ensure that the policy guardian is enabled on the Safe when making reusable function calls.\\r\\n    WaymontSafePolicyGuardianSigner public policyGuardianSigner;\\r\\n\\r\\n    /// @notice Blacklist for function calls that have already been dispatched or that have been revoked.\\r\\n    mapping(uint256 => bool) public functionCallUniqueIdBlacklist;\\r\\n\\r\\n    /// @notice Quantity of gas (in ETH) allocated to reusable smart actions.\\r\\n    uint256 public reusableFunctionCallGasTank;\\r\\n\\r\\n    /// @dev Initializes the contract by setting the `Safe`, signers, and threshold.\\r\\n    /// Can only be called once (because `setupOwners` can only be called once).\\r\\n    /// @param _safe The `Safe` of which this signer contract will be an owner.\\r\\n    /// @param signers The signers underlying this signer contract.\\r\\n    /// @param threshold The threshold required of signers underlying this signer contract.\\r\\n    /// @param _policyGuardianSigner Whether or not this variable is set controls whether or not this contract should ensure that the policy guardian is enabled on the Safe when making reusable function calls. Currently there are no plans to ever set this to false but keeping it as an option keeps the contracts flexible (so they can be used without the policy guardian if desired in the future).\\r\\n    function initialize(Safe _safe, address[] calldata signers, uint256 threshold, WaymontSafePolicyGuardianSigner _policyGuardianSigner) external {\\r\\n        // Input validation\\r\\n        require(_safe.isOwner(address(this)), \\\"The Safe is not owned by this Waymont signer contract.\\\");\\r\\n\\r\\n        // Call `setupOwners` (can only be called once)\\r\\n        setupOwners(signers, threshold);\\r\\n\\r\\n        // Set the `Safe` and `WaymontSafePolicyGuardianSigner`\\r\\n        safe = _safe;\\r\\n        policyGuardianSigner = _policyGuardianSigner;\\r\\n    }\\r\\n\\r\\n    /// @notice Blacklists a function call unique ID.\\r\\n    /// @param uniqueId The function call unique ID to be blacklisted.\\r\\n    function blacklistFunctionCall(uint256 uniqueId) external {\\r\\n        require(msg.sender == address(safe), \\\"Sender is not the safe.\\\");\\r\\n        functionCallUniqueIdBlacklist[uniqueId] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the gas tank available to reusable function calls.\\r\\n    /// @param value The amount of ETH that should be in the gas tank.\\r\\n    function setGasTank(uint256 value) external {\\r\\n        require(msg.sender == address(safe), \\\"Sender is not the safe.\\\");\\r\\n        reusableFunctionCallGasTank = value;\\r\\n    }\\r\\n\\r\\n    /// @notice Signature validation function used by the `Safe` overlying this contract to validate underlying signers attached to this contract.\\r\\n    /// @param _data Data signed in `_signature`.\\r\\n    /// @param _signature Signature byte array associated with `_data`.\\r\\n    /// @dev MUST return the bytes4 magic value 0x20c13b0b when function passes.\\r\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\\r\\n    /// MUST allow external calls.\\r\\n    function isValidSignature(bytes calldata _data, bytes memory _signature) external view returns (bytes4) {\\r\\n        // Check signatures\\r\\n        checkSignatures(keccak256(_data), _signature);\\r\\n\\r\\n        // Return success by default\\r\\n        return bytes4(0x20c13b0b);\\r\\n    }\\r\\n\\r\\n    /// @notice Additional parameters used by `WaymontSafeExternalSigner.execTransaction` (that are not part of `Safe.execTransaction`).\\r\\n    /// @param externalSignatures The signatures from this `WaymontSafeExternalSigner` contract's set of signers (to be validated by this contract).\\r\\n    /// @param uniqueId If specified (as greater than 0), acts as a single-use, non-incremental nonce (that can be blacklisted). WARNING: If using a merkle tree, make sure to use random `uniqueId` values to prevent the unauthorized submission of transactions using signatures and merkle proofs that have already been revealed. If you are using reusable function calls, this is not an option, so you must rely on the policy guardian (which the function below ensures is enabled if set in this contract's storage) or, alternatively, the presence of signers other than this contract that use normal single-use signatures.\\r\\n    /// @param groupUniqueId If specified (as greater than 0), acts as a multi-use, non-incremental unique ID that can be blacklisted. Must specify if `uniqueId` is not specified.\\r\\n    /// @param deadline Transactions must be executed before the deadline. Set to `0xFF00000000000000000000000000000000000000000000000000000000000000` for no deadline (saves gas over using `type(uint256).max` due to the presence of more zero bytes (cheaper) over non-zero bytes in function calldata).\\r\\n    /// @param merkleProof Array containing the sibling hashes on the branch from the leaf to the root of the merkle tree.\\r\\n    struct AdditionalExecTransactionParams {\\r\\n        bytes externalSignatures;\\r\\n        uint256 uniqueId;\\r\\n        uint256 groupUniqueId;\\r\\n        uint256 deadline;\\r\\n        bytes32[] merkleProof;\\r\\n    }\\r\\n\\r\\n    /// @notice Proxy for `Safe.execTransaction` allowing execution of transactions signed together through merkle trees and/or without incremental nonces.\\r\\n    /// @dev See `Safe.execTransaction` for a description of the first 10 params.\\r\\n    /// WARNING: If using a merkle tree, make sure to use random `uniqueId` values to prevent the unauthorized submission of transactions using signatures and merkle proofs that have already been revealed. If you are using reusable function calls, this is not an option, so you must rely on the policy guardian (which the function below ensures is enabled if set in this contract's storage) or, alternatively, the presence of signers other than this contract that use normal single-use signatures.\\r\\n    /// NOTE: Gas tank deductions for reusable function calls are based on the (estimated) `safeTxGas + baseGas`, unlike the refunds themselves, which are based on the (actual) `gasUsed + baseGas`.\\r\\n    /// @param additionalParams See struct type above for more info.\\r\\n    function execTransaction(\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        bytes calldata data,\\r\\n        Enum.Operation operation,\\r\\n        uint256 safeTxGas,\\r\\n        uint256 baseGas,\\r\\n        uint256 gasPrice,\\r\\n        address gasToken,\\r\\n        address payable refundReceiver,\\r\\n        bytes memory safeSignatures,\\r\\n        AdditionalExecTransactionParams memory additionalParams\\r\\n    ) external returns (bool success) {\\r\\n        // Validate deadline\\r\\n        require(block.timestamp <= additionalParams.deadline, \\\"This TX is expired/past its deadline.\\\");\\r\\n\\r\\n        // If specified, validate unique ID not used/blacklisted; if not specified and policy guardian is required, validate that policy guardian signature is required; if group unique ID specified, validate not blacklisted\\r\\n        require(additionalParams.uniqueId > 0 || additionalParams.groupUniqueId > 0, \\\"Must specify either a unique ID or group unique ID to have the ability to prevent the repeat use of this function call.\\\");\\r\\n        if (additionalParams.uniqueId > 0) require(!functionCallUniqueIdBlacklist[additionalParams.uniqueId], \\\"Function call unique ID has already been used or has been blacklisted.\\\");\\r\\n        else if (address(policyGuardianSigner) != address(0)) require(safe.isOwner(address(policyGuardianSigner)) && safe.getThreshold() == safe.getOwners().length && policyGuardianSigner.policyGuardian() != address(0) && !policyGuardianSigner.policyGuardianDisabled(safe), \\\"Policy guardian must be enabled to submit reusable transactions.\\\");\\r\\n        if (additionalParams.groupUniqueId > 0) require(!functionCallUniqueIdBlacklist[additionalParams.groupUniqueId], \\\"Function call group unique ID has been blacklisted.\\\");\\r\\n\\r\\n        // Scope to avoid \\\"stack too deep\\\"\\r\\n        {\\r\\n            // Compute newTxHash\\r\\n            bytes32 newSafeTxHash = keccak256(abi.encode(EXTERNAL_SIGNER_SAFE_TX_TYPEHASH, to, value, keccak256(data), operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, additionalParams.uniqueId, additionalParams.groupUniqueId, additionalParams.deadline));\\r\\n            bytes32 newTxHash = keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), newSafeTxHash));\\r\\n\\r\\n            // Process merkle proof\\r\\n            newTxHash = MerkleProof.processProof(additionalParams.merkleProof, newTxHash);\\r\\n\\r\\n            // Check signatures\\r\\n            checkSignatures(newTxHash, additionalParams.externalSignatures);\\r\\n        }\\r\\n\\r\\n        // If uniqueId is reusable, subtract from gas tank (checked math will revert if not enough)\\r\\n        if (additionalParams.uniqueId == 0) reusableFunctionCallGasTank -= (baseGas + safeTxGas) * (gasPrice < tx.gasprice || gasToken != address(0) ? gasPrice : tx.gasprice);\\r\\n        // If uniqueId is not reusable, blacklist unique ID's future use\\r\\n        else functionCallUniqueIdBlacklist[additionalParams.uniqueId] = true;\\r\\n\\r\\n        // Execute the transaction\\r\\n        // Hashes are automatically approved by the sender with v == 1 and r == approver (this contract)\\r\\n        // See line 316-321 of safe-contracts v1.4.0 Safe.sol: https://github.com/safe-global/safe-contracts/blob/v1.4.0/contracts/Safe.sol#L316-L321\\r\\n        return safe.execTransaction(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, safeSignatures);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/Safe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/ModuleManager.sol\\\";\\nimport \\\"./base/OwnerManager.sol\\\";\\nimport \\\"./base/FallbackManager.sol\\\";\\nimport \\\"./base/GuardManager.sol\\\";\\nimport \\\"./common/NativeCurrencyPaymentFallback.sol\\\";\\nimport \\\"./common/Singleton.sol\\\";\\nimport \\\"./common/SignatureDecoder.sol\\\";\\nimport \\\"./common/SecuredTokenTransfer.sol\\\";\\nimport \\\"./common/StorageAccessible.sol\\\";\\nimport \\\"./interfaces/ISignatureValidator.sol\\\";\\nimport \\\"./external/SafeMath.sol\\\";\\n\\n/**\\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\\n * @dev Most important concepts:\\n *      - Threshold: Number of required confirmations for a Safe transaction.\\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\\n *        approve transactions. Managed in `OwnerManager`.\\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\\n *      - Guard: Guard is a contract that can execute pre- and post- transaction checks. Managed in `GuardManager`.\\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\\n *      For the events-based implementation see `SafeL2.sol`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\ncontract Safe is\\n    Singleton,\\n    NativeCurrencyPaymentFallback,\\n    ModuleManager,\\n    OwnerManager,\\n    SignatureDecoder,\\n    SecuredTokenTransfer,\\n    ISignatureValidatorConstants,\\n    FallbackManager,\\n    StorageAccessible,\\n    GuardManager\\n{\\n    using SafeMath for uint256;\\n\\n    string public constant VERSION = \\\"1.4.0\\\";\\n\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    // keccak256(\\n    //     \\\"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\\\"\\n    // );\\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\\n\\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\\n    event SignMsg(bytes32 indexed msgHash);\\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\\n\\n    uint256 public nonce;\\n    bytes32 private _deprecatedDomainSeparator;\\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\\n    mapping(bytes32 => uint256) public signedMessages;\\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\\n\\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\\n    constructor() {\\n        /**\\n         * By setting the threshold it is not possible to call setup anymore,\\n         * so we create a Safe with 0 owners and threshold 1.\\n         * This is an unusable Safe, perfect for the singleton\\n         */\\n        threshold = 1;\\n    }\\n\\n    /**\\n     * @notice Sets an initial storage of the Safe contract.\\n     * @dev This method can only be called once.\\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     * @param to Contract address for optional delegate call.\\n     * @param data Data payload for optional delegate call.\\n     * @param fallbackHandler Handler for fallback calls to this contract\\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\\n     * @param payment Value that should be paid\\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\\n     */\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external {\\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\\n        setupOwners(_owners, _threshold);\\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\\n        setupModules(to, data);\\n\\n        if (payment > 0) {\\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\\n        }\\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\\n    }\\n\\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\\n     * @dev The fees are always transferred, even if the user transaction fails.\\n     *      This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      - if the `gasToken` is a contract or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address of Safe transaction.\\n     * @param value Ether value of Safe transaction.\\n     * @param data Data payload of Safe transaction.\\n     * @param operation Operation type of Safe transaction.\\n     * @param safeTxGas Gas that should be used for the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @return success Boolean indicating transaction's success.\\n     */\\n    function execTransaction(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures\\n    ) public payable virtual returns (bool success) {\\n        bytes32 txHash;\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            bytes memory txHashData = encodeTransactionData(\\n                // Transaction info\\n                to,\\n                value,\\n                data,\\n                operation,\\n                safeTxGas,\\n                // Payment info\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                // Signature info\\n                nonce\\n            );\\n            // Increase nonce and execute transaction.\\n            nonce++;\\n            txHash = keccak256(txHashData);\\n            checkSignatures(txHash, txHashData, signatures);\\n        }\\n        address guard = getGuard();\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkTransaction(\\n                    // Transaction info\\n                    to,\\n                    value,\\n                    data,\\n                    operation,\\n                    safeTxGas,\\n                    // Payment info\\n                    baseGas,\\n                    gasPrice,\\n                    gasToken,\\n                    refundReceiver,\\n                    // Signature info\\n                    signatures,\\n                    msg.sender\\n                );\\n            }\\n        }\\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \\\"GS010\\\");\\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\\n        {\\n            uint256 gasUsed = gasleft();\\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\\n            gasUsed = gasUsed.sub(gasleft());\\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\\n            require(success || safeTxGas != 0 || gasPrice != 0, \\\"GS013\\\");\\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\\n            uint256 payment = 0;\\n            if (gasPrice > 0) {\\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\\n            }\\n            if (success) emit ExecutionSuccess(txHash, payment);\\n            else emit ExecutionFailure(txHash, payment);\\n        }\\n        {\\n            if (guard != address(0)) {\\n                Guard(guard).checkAfterExecution(txHash, success);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Handles the payment for a Safe transaction.\\n     * @param gasUsed Gas used by the Safe transaction.\\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\\n     * @param gasPrice Gas price that should be used for the payment calculation.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @return payment The amount of payment made in the specified token.\\n     */\\n    function handlePayment(\\n        uint256 gasUsed,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver\\n    ) private returns (uint256 payment) {\\n        // solhint-disable-next-line avoid-tx-origin\\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\\n        if (gasToken == address(0)) {\\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\\n            require(receiver.send(payment), \\\"GS011\\\");\\n        } else {\\n            payment = gasUsed.add(baseGas).mul(gasPrice);\\n            require(transferToken(gasToken, receiver, payment), \\\"GS012\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, data, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param data That should be signed (this is passed to an external validator contract)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(bytes32 dataHash, bytes memory data, bytes memory signatures, uint256 requiredSignatures) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                require(keccak256(data) == dataHash, \\\"GS027\\\");\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \\\"GS024\\\");\\n            } else if (v == 1) {\\n                // If v is 1 then it is an approved hash\\n                // When handling approved hashes the address of the approver is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \\\"GS025\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n\\n    /**\\n     * @notice Marks hash `hashToApprove` as approved.\\n     * @dev This can be used with a pre-approved hash transaction signature.\\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\\n     */\\n    function approveHash(bytes32 hashToApprove) external {\\n        require(owners[msg.sender] != address(0), \\\"GS030\\\");\\n        approvedHashes[msg.sender][hashToApprove] = 1;\\n        emit ApproveHash(hashToApprove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Returns the ID of the chain the contract is currently deployed on.\\n     * @return The ID of the current chain as a uint256.\\n     */\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n\\n    /**\\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Gas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash bytes.\\n     */\\n    function encodeTransactionData(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes memory) {\\n        bytes32 safeTxHash = keccak256(\\n            abi.encode(\\n                SAFE_TX_TYPEHASH,\\n                to,\\n                value,\\n                keccak256(data),\\n                operation,\\n                safeTxGas,\\n                baseGas,\\n                gasPrice,\\n                gasToken,\\n                refundReceiver,\\n                _nonce\\n            )\\n        );\\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\\n    }\\n\\n    /**\\n     * @notice Returns transaction hash to be signed by owners.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @param safeTxGas Fas that should be used for the safe transaction.\\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\\n     * @param gasPrice Maximum gas price that should be used for this transaction.\\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\\n     * @param _nonce Transaction nonce.\\n     * @return Transaction hash.\\n     */\\n    function getTransactionHash(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address refundReceiver,\\n        uint256 _nonce\\n    ) public view returns (bytes32) {\\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/EIP712DomainSeparator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title EIP712DomainSeparator - An abstract contract with only `domainSeparator` isolated from `Safe`.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract EIP712DomainSeparator {\\n    // keccak256(\\n    //     \\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\"\\n    // );\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\\n\\n    /**\\n     * @notice Returns the ID of the chain the contract is currently deployed on.\\n     * @return The ID of the current chain as a uint256.\\n     */\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        return id;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\\n     * @return bytes32 The domain separator hash.\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/CheckSignaturesEIP1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"./base/IsolatedOwnerManager.sol\\\";\\nimport \\\"./common/SignatureDecoder.sol\\\";\\nimport \\\"./interfaces/IStandardSignatureValidator.sol\\\";\\nimport \\\"./external/SafeMath.sol\\\";\\n\\n/**\\n * @title CheckSignaturesEIP1271 - An abstract contract with only `checkSignatures` isolated from `Safe` (forked from `ad9b3190d4889abeeaa02c5c05138d9c327f2460`, which contains the same contracts as `v1.4.0`) with non-legacy EIP-1271 support (copied from the newer commit `1cfa95710057e33832600e6b9ad5ececca8f7839`).\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract CheckSignaturesEIP1271 is IsolatedOwnerManager, SignatureDecoder, IStandardSignatureValidatorConstants {\\n    using SafeMath for uint256;\\n\\n    // This constructor ensures that this contract can only be used as a singleton for proxy contracts\\n    constructor() {\\n        /**\\n         * By setting the threshold it is not possible to call setupOwners anymore,\\n         * so we create a contract with 0 owners and threshold 1.\\n         * This is an unusable contract, perfect for the singleton\\n         */\\n        threshold = 1;\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) public view {\\n        // Load threshold to avoid multiple storage loads\\n        uint256 _threshold = threshold;\\n        // Check that a threshold is set\\n        require(_threshold > 0, \\\"GS001\\\");\\n        checkNSignatures(dataHash, signatures, _threshold);\\n    }\\n\\n    /**\\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param signatures Signature data that should be verified.\\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     * @param requiredSignatures Amount of required valid signatures.\\n     */\\n    function checkNSignatures(bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) public view {\\n        // Check that the provided signature data is not too short\\n        require(signatures.length >= requiredSignatures.mul(65), \\\"GS020\\\");\\n        // There cannot be an owner with address 0.\\n        address lastOwner = address(0);\\n        address currentOwner;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        uint256 i;\\n        for (i = 0; i < requiredSignatures; i++) {\\n            (v, r, s) = signatureSplit(signatures, i);\\n            if (v == 0) {\\n                // If v is 0 then it is a contract signature\\n                // When handling contract signatures the address of the contract is encoded into r\\n                currentOwner = address(uint160(uint256(r)));\\n\\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\\n                // Here we only check that the pointer is not pointing inside the part that is being processed\\n                require(uint256(s) >= requiredSignatures.mul(65), \\\"GS021\\\");\\n\\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\\n                require(uint256(s).add(32) <= signatures.length, \\\"GS022\\\");\\n\\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\\n                uint256 contractSignatureLen;\\n                /* solhint-disable no-inline-assembly */\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\\n                }\\n                /* solhint-enable no-inline-assembly */\\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \\\"GS023\\\");\\n\\n                // Check signature\\n                bytes memory contractSignature;\\n                /* solhint-disable no-inline-assembly */\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\\n                    contractSignature := add(add(signatures, s), 0x20)\\n                }\\n                /* solhint-enable no-inline-assembly */\\n                // NOTE: The following line is copied from the newer commit `1cfa95710057e33832600e6b9ad5ececca8f7839` to `safe-global/safe-contracts`; this differs from the `safe-contracts` commit from which this repository has been forked (`ad9b3190d4889abeeaa02c5c05138d9c327f2460`, which contains the same contracts as `v1.4.0`), in which a legacy implementation of EIP-1271 is used\\n                require(IStandardSignatureValidator(currentOwner).isValidSignature(dataHash, contractSignature) == EIP1271_MAGIC_VALUE, \\\"GS024\\\");\\n            } else if (v > 30) {\\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", dataHash)), v - 4, r, s);\\n            } else {\\n                // Default is the ecrecover flow with the provided data hash\\n                // Use ecrecover with the messageHash for EOA signatures\\n                currentOwner = ecrecover(dataHash, v, r, s);\\n            }\\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \\\"GS026\\\");\\n            lastOwner = currentOwner;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/Enum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Enum - Collection of enums used in Safe contracts.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/WaymontSafePolicyGuardianSigner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19;\\n\\nimport \\\"lib/safe-contracts/contracts/Safe.sol\\\";\\nimport \\\"lib/safe-contracts/contracts/EIP712DomainSeparator.sol\\\";\\n\\n/// @title WaymontSafePolicyGuardianSigner\\n/// @notice Smart contract signer (via ERC-1271) for Safes wrapping an EOA and supporting changing the EOA or bypassing this signer (for all Safes) from a global manager address as well as bypassing this signer after a timelock on a specific Safe.\\n/// This contract is meant to be used with Safe contracts v1.4.1 (https://github.com/safe-global/safe-contracts/tree/v1.4.1). It can also be used with v1.4.0.\\ncontract WaymontSafePolicyGuardianSigner is EIP712DomainSeparator {\\n    /// @dev Typehash for `queueDisablePolicyGuardian`: `keccak256(\\\"QueueDisablePolicyGuardian(uint256 nonce)\\\")`.\\n    bytes32 private constant QUEUE_DISABLE_POLICY_GUARDIAN_TYPEHASH = 0xd5fa5ce164fba34243c3b3b9c5346acc2eae6f31655b86516d465566d0ba53f7;\\n\\n    /// @dev Typehash for `unqueueDisablePolicyGuardian`: `keccak256(\\\"UnqueueDisablePolicyGuardian(uint256 nonce)\\\")`.\\n    bytes32 private constant UNQUEUE_DISABLE_POLICY_GUARDIAN_TYPEHASH = 0x16dda714d491dced303c8770c04d1539fd0000764e8745d3fe40945bb0d59dcf;\\n\\n    /// @dev Typehash for `disablePolicyGuardian`: `keccak256(\\\"DisablePolicyGuardian(uint256 nonce)\\\")`.\\n    bytes32 private constant DISABLE_POLICY_GUARDIAN_TYPEHASH = 0x1fa738809572ae202e6e8b28ae7d08f5972c3ae85e70f8bc386515bb47925975;\\n\\n    /// @notice Default policy guardian timelock (in seconds): 2 weeks.\\n    uint256 public constant DEFAULT_POLICY_GUARDIAN_TIMELOCK = 2 weeks;\\n\\n    /// @notice Minimum policy guardian timelock (in seconds): 15 minutes.\\n    uint256 public constant MIN_POLICY_GUARDIAN_TIMELOCK = 15 minutes;\\n\\n    /// @notice Maximum policy guardian timelock (in seconds): 180 days.\\n    uint256 public constant MAX_POLICY_GUARDIAN_TIMELOCK = 180 days;\\n\\n    /// @notice Time to expiry after a signature has been queued (in seconds): 1 week.\\n    uint256 public constant QUEUED_SIGNATURE_EXPIRATION = 1 weeks;\\n\\n    /// @notice The primary policy guardian address.\\n    /// WARNING: If this variable is set to the zero address, wallets will not require signatures from either policy guardian address--so do NOT set this variable to the zero address unless you are sure you want to allow all transactions to bypass the policy guardian's firewall.\\n    /// The (primary or secondary) policy guardian must sign all transactions for a `Wallet`, unless the policy guardian is deactivated on a `Wallet` or if the primary `policyGuardian` is set to the zero address here, in which case all transactinos will bypass the policy guardian's firewall.\\n    /// The (primary or secondary) policy guardian can act as off-chain transaction policy node(s) permitting realtime/AI-based fraud detection, symmetric/access-token-based authentication mechanisms, and/or instant onboarding to the Waymont chain.\\n    /// The (primary or secondary) policy guardian can be disabled/enabled via a user-specified timelock on the `Wallet`.\\n    address public policyGuardian;\\n\\n    /// @notice The secondary policy guardian address.\\n    /// WARNING: Even if the secondary guardian address is set, if the primary guardian address is not set, the `Wallet` contract does not require a signature from either policy guardian address.\\n    /// The secondary policy guardian is used as a fallback guardian.\\n    /// If using a secondary policy guardian, ideally, it is the less-used of the two guardians to conserve some gas.\\n    address public secondaryPolicyGuardian;\\n\\n    /// @notice Whether or not the policy guardian has been permanently disabled across all wallets.\\n    bool public policyGuardianPermanentlyDisabled;\\n\\n    /// @notice The pending policy guardian manager.\\n    address public pendingPolicyGuardianManager;\\n\\n    /// @notice The policy guardian manager.\\n    address public policyGuardianManager;\\n\\n    /// @notice For each `Safe`, custom timelock after which the policy guardian can be disabled (in seconds). If not set for a specific `Safe`, defaults to `DEFAULT_POLICY_GUARDIAN_TIMELOCK`.\\n    mapping(Safe => uint256) public customPolicyGuardianTimelocks;\\n\\n    /// @notice For each `Safe`, whether or not the policy guardian is disabled.\\n    mapping(Safe => bool) public policyGuardianDisabled;\\n\\n    /// @notice For each safe, last timestamp disabling the policy guardian was queued/requested.\\n    mapping(Safe => uint256) public disablePolicyGuardianQueueTimestamps;\\n\\n    /// @notice For each safe, incremental nonce to prevent signature reuse on this contract.\\n    mapping(Safe => uint256) public nonces;\\n\\n    /// @dev Temporarily approved data hash.\\n    bytes32 internal _tempApprovedDataHash;\\n\\n    /// @notice Event emitted when the primary policy guardian is changed.\\n    event PolicyGuardianChanged(address _policyGuardian);\\n\\n    /// @notice Event emitted when the policy guardian is disabled globally.\\n    /// @param permanently Whether or not the policy guardian was globally disabled permanently (if not, if it can be re-enabled later on).\\n    event PolicyGuardianDisabledGlobally(bool permanently);\\n\\n    /// @notice Event emitted when the secondary policy guardian is changed.\\n    event SecondaryPolicyGuardianChanged(address _policyGuardian);\\n\\n    /// @notice Event emitted when the policy guardian manager is changed.\\n    event PolicyGuardianManagerChanged(address _policyGuardianManager);\\n\\n    /// @notice Event emitted when the pending policy guardian manager is changed.\\n    event PendingPolicyGuardianManagerChanged(address _pendingPolicyGuardianManager);\\n\\n    /// @notice Event emitted when queuing the action of disabling the policy guardian on a `Safe`.\\n    /// Useful for sending security notifications to `Safe` owners if the policy guardian cannot find record of itself sending the transaction hash associated with a `DisablePolicyGuardianQueued` event.\\n    event DisablePolicyGuardianQueued(Safe indexed safe);\\n\\n    /// @notice Event emitted when unqueuing the action of disabling the policy guardian on a `Safe`.\\n    event DisablePolicyGuardianUnqueued(Safe indexed safe);\\n\\n    /// @notice Event emitted when executing the action of disabling the policy guardian on a `Safe`.\\n    event PolicyGuardianDisabledOnSafe(Safe indexed safe, bool withoutPolicyGuardian);\\n\\n    /// @notice Event emitted when the policy guardian timelock is changed for a `Safe`.\\n    event PolicyGuardianTimelockChanged(Safe indexed safe, uint256 policyGuardianTimelock);\\n\\n    /// @dev Constructor to initialize the contract by setting the policy guardian manager.\\n    constructor(address _policyGuardianManager) {\\n        require(_policyGuardianManager != address(0), \\\"Invalid policy guardian manager.\\\");\\n        policyGuardianManager = _policyGuardianManager;\\n        emit PolicyGuardianManagerChanged(_policyGuardianManager);\\n    }\\n\\n    /// @dev Access control for the policy guardian manager.\\n    modifier onlyPolicyGuardianManager() {\\n        require(msg.sender == policyGuardianManager, \\\"Sender is not the policy guardian manager.\\\");\\n        _;\\n    }\\n\\n    /// @notice Sets the primary policy guardian address.\\n    function setPolicyGuardian(address _policyGuardian) external onlyPolicyGuardianManager {\\n        require(!policyGuardianPermanentlyDisabled, \\\"Policy guardian has been permanently disabled.\\\");\\n        require(_policyGuardian != address(0), \\\"Cannot set policy guardian to the zero address. Use the disablePolicyGuardianGlobally function instead.\\\");\\n        policyGuardian = _policyGuardian;\\n        emit PolicyGuardianChanged(_policyGuardian);\\n    }\\n\\n    /// @notice Sets the secondary policy guardian address.\\n    /// WARNING: Even if the secondary guardian address is set, if the primary guardian address is not set, the `Wallet` contract will not require signatures from either policy guardian address.\\n    function setSecondaryPolicyGuardian(address _policyGuardian) external onlyPolicyGuardianManager {\\n        secondaryPolicyGuardian = _policyGuardian;\\n        emit SecondaryPolicyGuardianChanged(_policyGuardian);\\n    }\\n    \\n    /// @notice Globally disables the policy guardian: i.e., makes it so that any and ALL wallets will NOT require signatures from either policy guardian address.\\n    /// WARNING: Do NOT call this function unless you are sure you want to allow all transactions through the policy guardian's firewall on ALL `Safe`s using this `WaymontSafePolicyGuardianSigner`.\\n    function disablePolicyGuardianGlobally() external onlyPolicyGuardianManager {\\n        require(policyGuardian != address(0), \\\"Policy guardian already disabled.\\\");\\n        policyGuardian = address(0);\\n        emit PolicyGuardianChanged(address(0));\\n        emit PolicyGuardianDisabledGlobally(false); // Emit with flag `permanently` equal to `false` since the policy guardian can be re-enabled later on\\n    }\\n\\n    /// @notice Permanently disables the policy guardian on all wallets.\\n    /// WARNING: Do NOT call this function unless you are sure you want to PERMANENTLY allow all transactions through the policy guardian's firewall on ALL `Safe`s using this `WaymontSafePolicyGuardianSigner`.\\n    function disablePolicyGuardianPermanently() external onlyPolicyGuardianManager {\\n        require(!policyGuardianPermanentlyDisabled, \\\"Policy guardian already permanently disabled.\\\");\\n        policyGuardianPermanentlyDisabled = true;\\n        policyGuardian = address(0);\\n        emit PolicyGuardianChanged(address(0));\\n        emit PolicyGuardianDisabledGlobally(true); // Emit with flag `permanently` equal to `true` since the policy guardian can NOT be re-enabled later on\\n    }\\n\\n    /// @notice Sets the pending policy guardian manager.\\n    function setPendingPolicyGuardianManager(address _policyGuardianManager) external onlyPolicyGuardianManager {\\n        pendingPolicyGuardianManager = _policyGuardianManager;\\n        emit PendingPolicyGuardianManagerChanged(_policyGuardianManager);\\n    }\\n\\n    /// @notice Accepts the policy guardian manager role.\\n    function acceptPolicyGuardianManager() external {\\n        require(msg.sender == pendingPolicyGuardianManager, \\\"Sender is not the pending policy guardian manager.\\\");\\n        policyGuardianManager = msg.sender;\\n        pendingPolicyGuardianManager = address(0);\\n        emit PolicyGuardianManagerChanged(msg.sender);\\n    }\\n\\n    /// @dev Validates `signatures` on `underlyingTypehash`.\\n    /// @param signatures Signatures from `threshold - 1` signers (excluding the policy guardian).\\n    function _validateSignatures(Safe safe, bytes32 underlyingTypehash, bytes memory signatures) internal {\\n        // Generate underlying hash\\n        bytes32 underlyingHash = keccak256(abi.encode(underlyingTypehash, safe, nonces[safe]++));\\n\\n        // Generate overlying signed data\\n        bytes memory data = abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), underlyingHash);\\n\\n        // Validate threshold\\n        require(safe.getThreshold() > 1, \\\"Cannot disable the policy guardian since the threshold on the Safe is one.\\\");\\n\\n        // Mark data as signed so the call inside `safe.checkSignatures` to `this.isValidSignature` will succeed\\n        _tempApprovedDataHash = keccak256(data);\\n\\n        // Check that `data` has been signed by `signatures` across all signers including this contract\\n        safe.checkSignatures(keccak256(data), data, signatures);\\n\\n        // Delete temporary storage for gas refund\\n        delete _tempApprovedDataHash;\\n    }\\n\\n    /// @notice Returns the policy guardian timelock for `safe`.\\n    /// @dev When `customPolicyGuardianTimelocks[safe]` is set to 0, the default timelock is used for `safe`.\\n    function getPolicyGuardianTimelock(Safe safe) public view returns (uint256 policyGuardianTimelock) {\\n        policyGuardianTimelock = customPolicyGuardianTimelocks[safe];\\n        if (policyGuardianTimelock == 0) policyGuardianTimelock = DEFAULT_POLICY_GUARDIAN_TIMELOCK;\\n    }\\n\\n    /// @notice Change the policy guardian timelock.\\n    /// Also enables validation of the policy guardian signature (if not already enabled). \\n    /// Off chain policy guardian logic: if changing the timelock when the policy guardian is already enabled, require that the user waits for the old timelock to pass after queueing it off-chain.\\n    /// @param policyGuardianTimelock The desired timelock required to disable the policy guardian without the policy guardian's signature.\\n    function setPolicyGuardianTimelock(uint256 policyGuardianTimelock) external {\\n        require(policyGuardianTimelock >= MIN_POLICY_GUARDIAN_TIMELOCK, \\\"Policy guardian timelock must be at least 15 minutes. Call disablePolicyGuardian to disable it.\\\");\\n        require(policyGuardianTimelock <= MAX_POLICY_GUARDIAN_TIMELOCK, \\\"Policy guardian timelock cannot be more than 180 days.\\\");\\n        Safe safe = Safe(payable(msg.sender));\\n        customPolicyGuardianTimelocks[safe] = policyGuardianTimelock;\\n        policyGuardianDisabled[safe] = false;\\n        disablePolicyGuardianQueueTimestamps[safe] = 0;\\n        emit PolicyGuardianTimelockChanged(safe, policyGuardianTimelock);\\n    }\\n\\n    /// @notice Disable validation of the policy guardian signature.\\n    /// WARNING: Do NOT call this function unless you are sure you want to allow all transactions from `Safe(msg.sender)` through the policy guardian's firewall.\\n    /// Off chain policy guardian logic: require that the user waits for the old timelock to pass after queueing it off-chain.\\n    function disablePolicyGuardian() external {\\n        Safe safe = Safe(payable(msg.sender));\\n        policyGuardianDisabled[safe] = true;\\n        disablePolicyGuardianQueueTimestamps[safe] = 0;\\n        emit PolicyGuardianDisabledOnSafe(safe, false);\\n    }\\n\\n    /// @notice Queues a timelocked action.\\n    /// @param signatures Signatures from `threshold - 1` signers (excluding the policy guardian).\\n    function queueDisablePolicyGuardian(Safe safe, bytes calldata signatures) external {\\n        // Ensure not already disabled\\n        require(!policyGuardianDisabled[safe], \\\"Policy guardian already disabled.\\\");\\n\\n        // Validate signatures\\n        _validateSignatures(safe, QUEUE_DISABLE_POLICY_GUARDIAN_TYPEHASH, signatures);\\n\\n        // Mark down queue timestamp\\n        disablePolicyGuardianQueueTimestamps[safe] = block.timestamp;\\n\\n        // Emit event\\n        emit DisablePolicyGuardianQueued(safe);\\n    }\\n\\n    /// @notice Unqueues a timelocked action.\\n    /// @param signatures Signatures from `threshold - 1` signers (excluding the policy guardian).\\n    function unqueueDisablePolicyGuardian(Safe safe, bytes calldata signatures) external {\\n        // Ensure not already disabled\\n        require(!policyGuardianDisabled[safe], \\\"Policy guardian already disabled.\\\");\\n\\n        // Validate signatures\\n        _validateSignatures(safe, UNQUEUE_DISABLE_POLICY_GUARDIAN_TYPEHASH, signatures);\\n\\n        // Reset queue timestamp\\n        disablePolicyGuardianQueueTimestamps[safe] = 0;\\n\\n        // Emit event\\n        emit DisablePolicyGuardianUnqueued(safe);\\n    }\\n\\n    /// @notice Disable the policy guardian (by setting `policyGuardianDisabled[safe] = true`) after the on-chain timelock has passed (without needing a signature from the policy guardian).\\n    /// Requires that the user waits for the old timelock to pass (after calling `queueAction`).\\n    /// @param signatures Signatures from `threshold - 1` signers (excluding the policy guardian).\\n    function disablePolicyGuardianWithoutPolicyGuardian(Safe safe, bytes calldata signatures) external {\\n        // Ensure not already disabled\\n        require(!policyGuardianDisabled[safe], \\\"Policy guardian already disabled.\\\");\\n\\n        // Validate signatures\\n        _validateSignatures(safe, DISABLE_POLICY_GUARDIAN_TYPEHASH, signatures);\\n\\n        // Check timelock\\n        uint256 timestamp = disablePolicyGuardianQueueTimestamps[safe];\\n        require(timestamp > 0, \\\"Action not queued.\\\");\\n        uint256 minExecutionTimestamp = timestamp + getPolicyGuardianTimelock(safe);\\n        require(block.timestamp >= minExecutionTimestamp, \\\"Timelock not satisfied.\\\");\\n        require(block.timestamp <= minExecutionTimestamp + QUEUED_SIGNATURE_EXPIRATION, \\\"Queued signatures are only usable for 1 week until they expire.\\\");\\n\\n        // Disable it\\n        policyGuardianDisabled[safe] = true;\\n\\n        // Emit event\\n        emit PolicyGuardianDisabledOnSafe(safe, true);\\n    }\\n\\n    /// @notice Signature validation function used by the `Safe` overlying this contract to validate underlying signers attached to this contract.\\n    /// @param _data Data signed in `_signature`.\\n    /// @param _signature Signature byte array associated with `_data`.\\n    /// @dev MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n    /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\\n    /// MUST allow external calls.\\n    function isValidSignature(bytes calldata _data, bytes memory _signature) external view returns (bytes4) {\\n        // Require signature is 65 bytes\\n        require(_signature.length == 65, \\\"Invalid signature length.\\\");\\n\\n        // Decode signature from bytes\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(_signature, 0x20))\\n            s := mload(add(_signature, 0x40))\\n            v := byte(0, mload(add(_signature, 0x60)))\\n        }\\n\\n        // Recover signer from signature\\n        bytes32 dataHash = keccak256(_data);\\n        address signer = ecrecover(dataHash, v, r, s);\\n\\n        // Check that signer is policy guardian or that policy guardian is disabled (and return success if so)\\n        address _policyGuardian = policyGuardian;\\n        if (signer == _policyGuardian || (signer == secondaryPolicyGuardian && signer != address(0)) || _policyGuardian == address(0) || policyGuardianPermanentlyDisabled || policyGuardianDisabled[Safe(payable(msg.sender))]) return bytes4(0x20c13b0b);\\n        \\n        // Otherwise, check `_tempApprovedDataHash` (and return success if equal)\\n        if (dataHash != 0 && _tempApprovedDataHash == dataHash) return bytes4(0x20c13b0b);\\n\\n        // Return failure by default\\n        revert(\\\"Invalid policy guardian signature.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/base/ModuleManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"./Executor.sol\\\";\\n\\n/**\\n * @title Module Manager - A contract managing Safe modules\\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\\n           \u26a0\ufe0f WARNING: Modules are a security risk since they can execute arbitrary transactions, \\n           so only trusted and audited modules should be added to a Safe. A malicious module can\\n           completely takeover a Safe.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract ModuleManager is SelfAuthorized, Executor {\\n    event EnabledModule(address indexed module);\\n    event DisabledModule(address indexed module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    address internal constant SENTINEL_MODULES = address(0x1);\\n\\n    mapping(address => address) internal modules;\\n\\n    /**\\n     * @notice Setup function sets the initial storage of the contract.\\n     *         Optionally executes a delegate call to another contract to setup the modules.\\n     * @param to Optional destination address of call to execute.\\n     * @param data Optional data of call to execute.\\n     */\\n    function setupModules(address to, bytes memory data) internal {\\n        require(modules[SENTINEL_MODULES] == address(0), \\\"GS100\\\");\\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\\n        if (to != address(0)) {\\n            require(isContract(to), \\\"GS002\\\");\\n            // Setup has to complete successfully or transaction fails.\\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \\\"GS000\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Enables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param module Module to be whitelisted.\\n     */\\n    function enableModule(address module) public authorized {\\n        // Module address cannot be null or sentinel.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        // Module cannot be added twice.\\n        require(modules[module] == address(0), \\\"GS102\\\");\\n        modules[module] = modules[SENTINEL_MODULES];\\n        modules[SENTINEL_MODULES] = module;\\n        emit EnabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Disables the module `module` for the Safe.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevModule Previous module in the modules linked list.\\n     * @param module Module to be removed.\\n     */\\n    function disableModule(address prevModule, address module) public authorized {\\n        // Validate module address and check that it corresponds to module index.\\n        require(module != address(0) && module != SENTINEL_MODULES, \\\"GS101\\\");\\n        require(modules[prevModule] == module, \\\"GS103\\\");\\n        modules[prevModule] = modules[module];\\n        modules[module] = address(0);\\n        emit DisabledModule(module);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\\n     * @dev Function is virtual to allow overriding for L2 singleton to emit an event for indexing.\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     */\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public virtual returns (bool success) {\\n        // Only whitelisted modules are allowed.\\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \\\"GS104\\\");\\n        // Execute transaction without further confirmations.\\n        success = execute(to, value, data, operation, type(uint256).max);\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\\n     * @param to Destination address of module transaction.\\n     * @param value Ether value of module transaction.\\n     * @param data Data payload of module transaction.\\n     * @param operation Operation type of module transaction.\\n     * @return success Boolean flag indicating if the call succeeded.\\n     * @return returnData Data returned by the call.\\n     */\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if an module is enabled\\n     * @return True if the module is enabled\\n     */\\n    function isModuleEnabled(address module) public view returns (bool) {\\n        return SENTINEL_MODULES != module && modules[module] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns an array of modules.\\n     *         If all entries fit into a single page, the next pointer will be 0x1.\\n     *         If another page is present, next will be the last element of the returned array.\\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\\n     * @return array Array of modules.\\n     * @return next Start of the next page.\\n     */\\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\\n        require(start == SENTINEL_MODULES || isModuleEnabled(start), \\\"GS105\\\");\\n        require(pageSize > 0, \\\"GS106\\\");\\n        // Init array with max page size\\n        array = new address[](pageSize);\\n\\n        // Populate return array\\n        uint256 moduleCount = 0;\\n        next = modules[start];\\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\\n            array[moduleCount] = next;\\n            next = modules[next];\\n            moduleCount++;\\n        }\\n\\n        /**\\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \\n          \\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \\n          included to the current page, nor will it be included in the next one if you pass it as a start.\\n        */\\n        if (next != SENTINEL_MODULES) {\\n            next = array[moduleCount - 1];\\n        }\\n        // Set correct size of returned array\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            mstore(array, moduleCount)\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns true if `account` is a contract.\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     *      as the code is not actually created until after the constructor finishes.\\n     * @param account The address being queried\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/base/OwnerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract OwnerManager is SelfAuthorized {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/base/FallbackManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/SelfAuthorized.sol\\\";\\n\\n/**\\n * @title Fallback Manager - A contract managing fallback calls made to this contract\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract FallbackManager is SelfAuthorized {\\n    event ChangedFallbackHandler(address indexed handler);\\n\\n    // keccak256(\\\"fallback_manager.handler.address\\\")\\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\\n\\n    /**\\n     *  @notice Internal function to set the fallback handler.\\n     *  @param handler contract to handle fallback calls.\\n     */\\n    function internalSetFallbackHandler(address handler) internal {\\n        /*\\n            If a fallback handler is set to self, then the following attack vector is opened:\\n            Imagine we have a function like this:\\n            function withdraw() internal authorized {\\n                withdrawalAddress.call.value(address(this).balance)(\\\"\\\");\\n            }\\n\\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\\n        */\\n        require(handler != address(this), \\\"GS400\\\");\\n\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, handler)\\n        }\\n    }\\n\\n    /**\\n     * @notice Set Fallback Handler to `handler` for the Safe.\\n     * @dev Only fallback calls without value and with data will be forwarded.\\n     *      This can only be done via a Safe transaction.\\n     *      Cannot be set to the Safe itself.\\n     * @param handler contract to handle fallback calls.\\n     */\\n    function setFallbackHandler(address handler) public authorized {\\n        internalSetFallbackHandler(handler);\\n        emit ChangedFallbackHandler(handler);\\n    }\\n\\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\\n    //      and having the original caller address may enable additional verification scenarios.\\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\\n    fallback() external {\\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let handler := sload(slot)\\n            if iszero(handler) {\\n                return(0, 0)\\n            }\\n            calldatacopy(0, 0, calldatasize())\\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\\n            // Then the address without padding is stored right after the calldata\\n            mstore(calldatasize(), shl(96, caller()))\\n            // Add 20 bytes for the address appended add the end\\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            if iszero(success) {\\n                revert(0, returndatasize())\\n            }\\n            return(0, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/base/GuardManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../common/Enum.sol\\\";\\nimport \\\"../common/SelfAuthorized.sol\\\";\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ninterface Guard is IERC165 {\\n    function checkTransaction(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 safeTxGas,\\n        uint256 baseGas,\\n        uint256 gasPrice,\\n        address gasToken,\\n        address payable refundReceiver,\\n        bytes memory signatures,\\n        address msgSender\\n    ) external;\\n\\n    function checkAfterExecution(bytes32 txHash, bool success) external;\\n}\\n\\nabstract contract BaseGuard is Guard {\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\n        return\\n            interfaceId == type(Guard).interfaceId || // 0xe6d7a83a\\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\\n    }\\n}\\n\\n/**\\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract GuardManager is SelfAuthorized {\\n    event ChangedGuard(address indexed guard);\\n\\n    // keccak256(\\\"guard_manager.guard.address\\\")\\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\\n\\n    /**\\n     * @dev Set a guard that checks transactions before execution\\n     *      This can only be done via a Safe transaction.\\n     *      \u26a0\ufe0f IMPORTANT: Since a guard has full power to block Safe transaction execution,\\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\\n     *        audit the guard code and design recovery mechanisms.\\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\\n     */\\n    function setGuard(address guard) external authorized {\\n        if (guard != address(0)) {\\n            require(Guard(guard).supportsInterface(type(Guard).interfaceId), \\\"GS300\\\");\\n        }\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, guard)\\n        }\\n        emit ChangedGuard(guard);\\n    }\\n\\n    /**\\n     * @dev Internal method to retrieve the current guard\\n     *      We do not have a public method because we're short on bytecode size limit,\\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\\n     *      with the slot `GUARD_STORAGE_SLOT`\\n     * @return guard The address of the guard\\n     */\\n    function getGuard() internal view returns (address guard) {\\n        bytes32 slot = GUARD_STORAGE_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            guard := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/NativeCurrencyPaymentFallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract NativeCurrencyPaymentFallback {\\n    event SafeReceived(address indexed sender, uint256 value);\\n\\n    /**\\n     * @notice Receive function accepts native currency transactions.\\n     * @dev Emits an event with sender and received value.\\n     */\\n    receive() external payable {\\n        emit SafeReceived(msg.sender, msg.value);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/Singleton.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Singleton {\\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\\n    // It should also always be ensured the address is stored alone (uses a full word)\\n    address private singleton;\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/SignatureDecoder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SignatureDecoder - Decodes signatures encoded as bytes\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SignatureDecoder {\\n    /**\\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\\n     *      Compact means uint8 is not padded to 32 bytes.\\n     * @param pos Which signature to read.\\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\\n     * @param signatures Concatenated {r, s, v} signatures.\\n     * @return v Recovery ID or Safe signature type.\\n     * @return r Output value r of the signature.\\n     * @return s Output value s of the signature.\\n     */\\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let signaturePos := mul(0x41, pos)\\n            r := mload(add(signatures, add(signaturePos, 0x20)))\\n            s := mload(add(signatures, add(signaturePos, 0x40)))\\n            /**\\n             * Here we are loading the last 32 bytes, including 31 bytes\\n             * of 's'. There is no 'mload8' to do this.\\n             * 'byte' is not working due to the Solidity parser, so lets\\n             * use the second best option, 'and'\\n             */\\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/SecuredTokenTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SecuredTokenTransfer - Secure token transfer.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SecuredTokenTransfer {\\n    /**\\n     * @notice Transfers a token and returns a boolean if it was a success\\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\\n     *      It doesn't check if the `token` address is a contract or not.\\n     * @param token Token that should be transferred\\n     * @param receiver Receiver to whom the token should be transferred\\n     * @param amount The amount of tokens that should be transferred\\n     * @return transferred Returns true if the transfer was successful\\n     */\\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\\n        // 0xa9059cbb - keccack(\\\"transfer(address,uint256)\\\")\\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // We write the return value to scratch space.\\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            switch returndatasize()\\n            case 0 {\\n                transferred := success\\n            }\\n            case 0x20 {\\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\\n            }\\n            default {\\n                transferred := 0\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/StorageAccessible.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\\n *         It removes a method from the original contract not needed for the Safe contracts.\\n * @author Gnosis Developers\\n */\\nabstract contract StorageAccessible {\\n    /**\\n     * @notice Reads `length` bytes of storage in the currents contract\\n     * @param offset - the offset in the current contract's storage in words to start reading from\\n     * @param length - the number of words (32 bytes) of data to read\\n     * @return the bytes that were read.\\n     */\\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\\n        bytes memory result = new bytes(length * 32);\\n        for (uint256 index = 0; index < length; index++) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                let word := sload(add(offset, index))\\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Performs a delegatecall on a targetContract in the context of self.\\n     * Internally reverts execution to avoid side effects (making it static).\\n     *\\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\\n     * Specifically, the `returndata` after a call to this method will be:\\n     * `success:bool || response.length:uint256 || response:bytes`.\\n     *\\n     * @param targetContract Address of the contract containing the code to execute.\\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\\n     */\\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\\n\\n            mstore(0x00, success)\\n            mstore(0x20, returndatasize())\\n            returndatacopy(0x40, 0, returndatasize())\\n            revert(0, add(returndatasize(), 0x40))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/interfaces/ISignatureValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @notice Legacy EIP1271 method to validate a signature.\\n     * @param _data Arbitrary length data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/external/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SafeMath\\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\\n */\\nlibrary SafeMath {\\n    /**\\n     * @notice Multiplies two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Product of a and b\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n     * @param a First number\\n     * @param b Second number\\n     * @return Difference of a and b\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Adds two numbers, reverts on overflow.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Sum of a and b\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Returns the largest of two numbers.\\n     * @param a First number\\n     * @param b Second number\\n     * @return Largest of a and b\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/base/IsolatedOwnerManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/SafeAuthorized.sol\\\";\\n\\n/**\\n * @title IsolatedOwnerManager - Manages Safe owners and a threshold to authorize transactions.\\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\\n *      is more efficient than using a dynamic array.\\n * @author Stefan George - @Georgi87\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract IsolatedOwnerManager is SafeAuthorized {\\n    event AddedOwner(address indexed owner);\\n    event RemovedOwner(address indexed owner);\\n    event ChangedThreshold(uint256 threshold);\\n\\n    address internal constant SENTINEL_OWNERS = address(0x1);\\n\\n    mapping(address => address) internal owners;\\n    uint256 internal ownerCount;\\n    uint256 internal threshold;\\n\\n    /**\\n     * @notice Sets the initial storage of the contract.\\n     * @param _owners List of Safe owners.\\n     * @param _threshold Number of required confirmations for a Safe transaction.\\n     */\\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\\n        // Threshold can only be 0 at initialization.\\n        // Check ensures that setup function can only be called once.\\n        require(threshold == 0, \\\"GS200\\\");\\n        // Validate that threshold is smaller than number of added owners.\\n        require(_threshold <= _owners.length, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        // Initializing Safe owners.\\n        address currentOwner = SENTINEL_OWNERS;\\n        for (uint256 i = 0; i < _owners.length; i++) {\\n            // Owner address cannot be null.\\n            address owner = _owners[i];\\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \\\"GS203\\\");\\n            // No duplicate owners allowed.\\n            require(owners[owner] == address(0), \\\"GS204\\\");\\n            owners[currentOwner] = owner;\\n            currentOwner = owner;\\n        }\\n        owners[currentOwner] = SENTINEL_OWNERS;\\n        ownerCount = _owners.length;\\n        threshold = _threshold;\\n    }\\n\\n    /**\\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param owner New owner address.\\n     * @param _threshold New threshold.\\n     */\\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[owner] == address(0), \\\"GS204\\\");\\n        owners[owner] = owners[SENTINEL_OWNERS];\\n        owners[SENTINEL_OWNERS] = owner;\\n        ownerCount++;\\n        emit AddedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\\n     * @param owner Owner address to be removed.\\n     * @param _threshold New threshold.\\n     */\\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public authorized {\\n        // Only allow to remove an owner, if threshold can still be reached.\\n        require(ownerCount - 1 >= _threshold, \\\"GS201\\\");\\n        // Validate owner address and check that it corresponds to owner index.\\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == owner, \\\"GS205\\\");\\n        owners[prevOwner] = owners[owner];\\n        owners[owner] = address(0);\\n        ownerCount--;\\n        emit RemovedOwner(owner);\\n        // Change threshold if threshold was changed.\\n        if (threshold != _threshold) changeThreshold(_threshold);\\n    }\\n\\n    /**\\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\\n     * @param oldOwner Owner address to be replaced.\\n     * @param newOwner New owner address.\\n     */\\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public authorized {\\n        // Owner address cannot be null, the sentinel or the Safe itself.\\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \\\"GS203\\\");\\n        // No duplicate owners allowed.\\n        require(owners[newOwner] == address(0), \\\"GS204\\\");\\n        // Validate oldOwner address and check that it corresponds to owner index.\\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \\\"GS203\\\");\\n        require(owners[prevOwner] == oldOwner, \\\"GS205\\\");\\n        owners[newOwner] = owners[oldOwner];\\n        owners[prevOwner] = newOwner;\\n        owners[oldOwner] = address(0);\\n        emit RemovedOwner(oldOwner);\\n        emit AddedOwner(newOwner);\\n    }\\n\\n    /**\\n     * @notice Changes the threshold of the Safe to `_threshold`.\\n     * @dev This can only be done via a Safe transaction.\\n     * @param _threshold New threshold.\\n     */\\n    function changeThreshold(uint256 _threshold) public authorized {\\n        // Validate that threshold is smaller than number of owners.\\n        require(_threshold <= ownerCount, \\\"GS201\\\");\\n        // There has to be at least one Safe owner.\\n        require(_threshold >= 1, \\\"GS202\\\");\\n        threshold = _threshold;\\n        emit ChangedThreshold(threshold);\\n    }\\n\\n    /**\\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\\n     * @return Threshold number.\\n     */\\n    function getThreshold() public view returns (uint256) {\\n        return threshold;\\n    }\\n\\n    /**\\n     * @notice Returns if `owner` is an owner of the Safe.\\n     * @return Boolean if owner is an owner of the Safe.\\n     */\\n    function isOwner(address owner) public view returns (bool) {\\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\\n    }\\n\\n    /**\\n     * @notice Returns a list of Safe owners.\\n     * @return Array of Safe owners.\\n     */\\n    function getOwners() public view returns (address[] memory) {\\n        address[] memory array = new address[](ownerCount);\\n\\n        // populate return array\\n        uint256 index = 0;\\n        address currentOwner = owners[SENTINEL_OWNERS];\\n        while (currentOwner != SENTINEL_OWNERS) {\\n            array[index] = currentOwner;\\n            currentOwner = owners[currentOwner];\\n            index++;\\n        }\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/interfaces/IStandardSignatureValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Code here is for the standard EIP-1271 interface, copied from newer commit `1cfa95710057e33832600e6b9ad5ececca8f7839` to `safe-global/safe-contracts`\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract IStandardSignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\\n}\\n\\nabstract contract IStandardSignatureValidator is IStandardSignatureValidatorConstants {\\n    /**\\n     * @notice EIP1271 method to validate a signature.\\n     * @param _hash Hash of the data signed on the behalf of address(this).\\n     * @param _signature Signature byte array associated with _data.\\n     *\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/SelfAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SelfAuthorized {\\n    function requireSelfCall() private view {\\n        require(msg.sender == address(this), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSelfCall();\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/base/Executor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\nimport \\\"../common/Enum.sol\\\";\\n\\n/**\\n * @title Executor - A contract that can execute transactions\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract Executor {\\n    /**\\n     * @notice Executes either a delegatecall or a call with provided parameters.\\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\\n     *      - if the contract at `to` address has code or not\\n     *      It is the responsibility of the caller to perform such checks.\\n     * @param to Destination address.\\n     * @param value Ether value.\\n     * @param data Data payload.\\n     * @param operation Operation type.\\n     * @return success boolean flag indicating if the call succeeded.\\n     */\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation,\\n        uint256 txGas\\n    ) internal returns (bool success) {\\n        if (operation == Enum.Operation.DelegateCall) {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        } else {\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n     * See the corresponding EIP section\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/safe-contracts/contracts/common/SafeAuthorized.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../Safe.sol\\\";\\n\\n/**\\n * @title SafeAuthorized - Authorizes a `Safe` to perform actions to the current contract.\\n * @author Richard Meissner - @rmeissner\\n */\\nabstract contract SafeAuthorized {\\n    Safe public safe;\\n\\n    function requireSafeCall() private view {\\n        require(msg.sender == address(safe), \\\"GS031\\\");\\n    }\\n\\n    modifier authorized() {\\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\\n        requireSafeCall();\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"safe-contracts/=lib/safe-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"AddedOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ChangedThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemovedOwner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"addOwnerWithThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"}],\"name\":\"blacklistFunctionCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"changeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignatures\",\"type\":\"uint256\"}],\"name\":\"checkNSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signatures\",\"type\":\"bytes\"}],\"name\":\"checkSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"safeSignatures\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"externalSignatures\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupUniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct WaymontSafeExternalSigner.AdditionalExecTransactionParams\",\"name\":\"additionalParams\",\"type\":\"tuple\"}],\"name\":\"execTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"functionCallUniqueIdBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Safe\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"contract WaymontSafePolicyGuardianSigner\",\"name\":\"_policyGuardianSigner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyGuardianSigner\",\"outputs\":[{\"internalType\":\"contract WaymontSafePolicyGuardianSigner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reusableFunctionCallGasTank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"contract Safe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setGasTank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"swapOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WaymontSafeExternalSigner", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}