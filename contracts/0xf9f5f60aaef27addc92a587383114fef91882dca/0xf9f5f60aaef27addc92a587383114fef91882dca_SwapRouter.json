{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract IWETH is IERC20 {\\n    function deposit() external virtual payable;\\n    function withdraw(uint256 amount) virtual external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/core/SwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ISwapRouter.sol\\\";\\nimport \\\"../interfaces/ISwitchEvent.sol\\\";\\nimport \\\"../interfaces/IUniswapFactory.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\nimport \\\"../lib/UniswapExchangeLib.sol\\\";\\nimport \\\"../lib/DataTypes.sol\\\";\\n\\ncontract SwapRouter is Ownable, ISwapRouter {\\n    using UniswapExchangeLib for IUniswapExchange;\\n    using UniversalERC20 for IERC20;\\n    using SafeERC20 for IERC20;\\n\\n    ISwitchEvent public switchEvent;\\n    uint256 public dexCount;\\n    uint256 public pathCount;\\n    uint256 public pathSplit;\\n    IWETH public weth; // chain's native token\\n    IWETH public otherToken; //could be weth on a non-eth chain or other mid token(like busd)\\n    address public paraswapProxy;\\n    address public augustusSwapper;\\n    address[] public factories;\\n\\n    event SwitchEventSet(address switchEvent);\\n    event ParaswapProxySet(address paraswapProxy);\\n    event AugustusSwapperSet(address augustusSwapper);\\n    event WETHSet(address _weth);\\n    event OtherTokenSet(address _otherToken);\\n    event PathCountSet(uint256 _pathCount);\\n    event PathSplitSet(uint256 _pathSplit);\\n    event FactoriesSet(address[] _factories);\\n\\n    constructor(\\n        address _weth,\\n        address _otherToken,\\n        uint256 _pathCount,\\n        uint256 _pathSplit,\\n        address[] memory _factories,\\n        address _switchEventAddress,\\n        address _paraswapProxy,\\n        address _augustusSwapper\\n    ) {\\n        switchEvent = ISwitchEvent(_switchEventAddress);\\n        paraswapProxy = _paraswapProxy;\\n        augustusSwapper = _augustusSwapper;\\n\\n        weth = IWETH(_weth);\\n        otherToken = IWETH(_otherToken);\\n        pathCount = _pathCount;\\n        pathSplit = _pathSplit;\\n        dexCount = _factories.length;\\n\\n        for (uint256 i; i < dexCount; ) {\\n            factories.push(_factories[i]);\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc ISwapRouter\\n    function swap(SwapRequest calldata swapRequest)\\n        external\\n        payable\\n        override\\n        returns (uint256 unspent, uint256 returnAmount)\\n    {\\n        uint256 prevDstBal = swapRequest.dstToken.universalBalanceOf(\\n            address(this)\\n        );\\n\\n        require(swapRequest.amountIn != 0, \\\"zero\\\");\\n        swapRequest.srcToken.universalTransferFrom(\\n            msg.sender,\\n            address(this),\\n            swapRequest.amountIn\\n        );\\n\\n        uint256 prevSrcBal = swapRequest.srcToken.universalBalanceOf(\\n            address(this)\\n        ) - swapRequest.amountIn;\\n\\n        uint256 spentAmount;\\n        // If amountIn is less than minimum, we couldn't use any aggregator\\n        if (swapRequest.amountIn >= swapRequest.amountMinSpend) {\\n            require(\\n                !swapRequest.useParaswap ||\\n                    _swapOnParaswap(\\n                        swapRequest.srcToken,\\n                        swapRequest.amountIn,\\n                        swapRequest.paraswapData\\n                    ) ||\\n                    !swapRequest.raiseError,\\n                \\\"Paraswap swap failed\\\"\\n            );\\n\\n            _swapExternal(\\n                swapRequest.srcToken,\\n                swapRequest.splitSwapData,\\n                swapRequest.raiseError\\n            );\\n\\n            uint256 currSrcBal = swapRequest.srcToken.universalBalanceOf(\\n                address(this)\\n            );\\n            require(currSrcBal >= prevSrcBal, \\\"Too much swapped\\\");\\n            spentAmount = prevSrcBal + swapRequest.amountIn - currSrcBal;\\n        }\\n\\n        if (\\n            swapRequest.distribution.length != 0 &&\\n            swapRequest.distribution.length < dexCount * pathCount &&\\n            swapRequest.amountIn != spentAmount\\n        ) {\\n            _swapForSingleSwap(\\n                swapRequest.srcToken,\\n                swapRequest.dstToken,\\n                swapRequest.amountIn - spentAmount,\\n                swapRequest.distribution,\\n                swapRequest.raiseError\\n            );\\n        }\\n\\n        uint256 finalSrcBal = swapRequest.srcToken.universalBalanceOf(\\n            address(this)\\n        );\\n        uint256 finalDstBal = swapRequest.dstToken.universalBalanceOf(\\n            address(this)\\n        );\\n\\n        unspent = finalSrcBal - prevSrcBal;\\n        returnAmount = finalDstBal - prevDstBal;\\n\\n        if (unspent != 0) {\\n            swapRequest.srcToken.universalTransfer(msg.sender, unspent);\\n        }\\n\\n        if (returnAmount != 0) {\\n            swapRequest.dstToken.universalTransfer(msg.sender, returnAmount);\\n        }\\n\\n        require(returnAmount >= swapRequest.amountOutMin);\\n    }\\n\\n    function _swapOnParaswap(\\n        IERC20 token,\\n        uint256 amount,\\n        bytes memory callData\\n    ) internal returns (bool success) {\\n        if (callData.length == 0) {\\n            return true;\\n        }\\n        uint256 value;\\n        if (token.isETH()) {\\n            value = amount;\\n        } else {\\n            token.universalApprove(paraswapProxy, amount);\\n        }\\n\\n        (success, ) = augustusSwapper.call{value: value}(callData);\\n    }\\n\\n    function _swapExternal(\\n        IERC20 srcToken,\\n        DataTypes.SplitSwapInfo[] memory splitSwapData,\\n        bool raiseError\\n    ) internal {\\n        if (splitSwapData.length != 0) {\\n            uint256 len = splitSwapData.length;\\n            for (uint256 i; i < len; ) {\\n                try this.swapExternal(srcToken, splitSwapData[i]) {} catch {\\n                    require(!raiseError, \\\"External swap failed\\\");\\n                }\\n\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n\\n    function swapExternal(\\n        IERC20 srcToken,\\n        DataTypes.SplitSwapInfo memory splitSwapData\\n    ) external {\\n        require(\\n            msg.sender == address(this),\\n            \\\"Msg.sender can be contract it self\\\"\\n        );\\n\\n        if (splitSwapData.spender == address(0) && !srcToken.isETH()) {\\n            // Manually transfer instead of approve\\n            srcToken.universalTransfer(\\n                splitSwapData.swapContract,\\n                splitSwapData.amount\\n            );\\n        } else {\\n            srcToken.universalApprove(\\n                splitSwapData.spender,\\n                splitSwapData.amount\\n            );\\n        }\\n        (bool success, ) = splitSwapData.swapContract.call{\\n            value: srcToken.isETH() ? splitSwapData.amount : 0\\n        }(splitSwapData.swapData);\\n\\n        require(success, \\\"External swap failed\\\");\\n    }\\n\\n    function _swapForSingleSwap(\\n        IERC20 srcToken,\\n        IERC20 dstToken,\\n        uint256 amount,\\n        uint256[] memory distribution,\\n        bool raiseError\\n    ) private returns (uint256 returnAmount, uint256 parts) {\\n        uint256 lastNonZeroIndex = 0;\\n        uint256 len = distribution.length;\\n        for (uint256 i; i < len; ) {\\n            if (distribution[i] > 0) {\\n                parts += distribution[i];\\n                lastNonZeroIndex = i;\\n            }\\n\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        require(parts > 0 || !raiseError, \\\"invalid distribution param\\\");\\n\\n        // break function to avoid stack too deep error\\n        returnAmount = _swapInternalForSingleSwap(\\n            distribution,\\n            amount,\\n            parts,\\n            lastNonZeroIndex,\\n            srcToken,\\n            dstToken\\n        );\\n        require(returnAmount > 0 || !raiseError, \\\"Swap failed from dex\\\");\\n\\n        switchEvent.emitSwapped(\\n            msg.sender,\\n            address(this),\\n            IERC20(srcToken),\\n            IERC20(dstToken),\\n            amount,\\n            returnAmount,\\n            0\\n        );\\n    }\\n\\n    function _swapInternalForSingleSwap(\\n        uint256[] memory distribution,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 lastNonZeroIndex,\\n        IERC20 fromToken,\\n        IERC20 dstToken\\n    ) internal returns (uint256 totalAmount) {\\n        uint256 remainingAmount = amount;\\n        uint256 swappedAmount = 0;\\n        uint256 len = distribution.length;\\n        for (uint256 i; i < len; i++) {\\n            if (distribution[i] == 0) {\\n                continue;\\n            }\\n            uint256 swapAmount = (amount * distribution[i]) / parts;\\n            if (i == lastNonZeroIndex) {\\n                swapAmount = remainingAmount;\\n            }\\n            remainingAmount -= swapAmount;\\n            if (i % pathCount == 0) {\\n                swappedAmount = _swap(\\n                    fromToken,\\n                    dstToken,\\n                    swapAmount,\\n                    IUniswapFactory(factories[i / pathCount])\\n                );\\n            } else if (i % pathCount == 1) {\\n                swappedAmount = _swapETH(\\n                    fromToken,\\n                    dstToken,\\n                    swapAmount,\\n                    IUniswapFactory(factories[i / pathCount])\\n                );\\n            } else {\\n                swappedAmount = _swapOtherToken(\\n                    fromToken,\\n                    dstToken,\\n                    swapAmount,\\n                    IUniswapFactory(factories[i / pathCount])\\n                );\\n            }\\n            totalAmount += swappedAmount;\\n        }\\n    }\\n\\n    // Swap helpers\\n    function _swapInternal(\\n        IERC20 fromToken,\\n        IERC20 dstToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    ) internal returns (uint256 returnAmount) {\\n        if (fromToken.isETH()) {\\n            weth.deposit{value: amount}();\\n        }\\n\\n        IERC20 fromTokenReal = fromToken.isETH() ? weth : fromToken;\\n        IERC20 toTokenReal = dstToken.isETH() ? weth : dstToken;\\n        IUniswapExchange exchange = factory.getPair(fromTokenReal, toTokenReal);\\n        bool needSync;\\n        bool needSkim;\\n        (returnAmount, needSync, needSkim) = exchange.getReturn(\\n            fromTokenReal,\\n            toTokenReal,\\n            amount\\n        );\\n        if (needSync) {\\n            exchange.sync();\\n        } else if (needSkim) {\\n            exchange.skim(0x46Fd07da395799F113a7584563b8cB886F33c2bc);\\n        }\\n\\n        fromTokenReal.universalTransfer(address(exchange), amount);\\n        if (uint160(address(fromTokenReal)) < uint160(address(toTokenReal))) {\\n            exchange.swap(0, returnAmount, address(this), \\\"\\\");\\n        } else {\\n            exchange.swap(returnAmount, 0, address(this), \\\"\\\");\\n        }\\n\\n        if (dstToken.isETH()) {\\n            weth.withdraw(weth.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function _swapOverMid(\\n        IERC20 fromToken,\\n        IERC20 midToken,\\n        IERC20 dstToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    ) internal returns (uint256 returnAmount) {\\n        returnAmount = _swapInternal(\\n            midToken,\\n            dstToken,\\n            _swapInternal(fromToken, midToken, amount, factory),\\n            factory\\n        );\\n    }\\n\\n    function _swap(\\n        IERC20 fromToken,\\n        IERC20 dstToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    ) internal returns (uint256 returnAmount) {\\n        returnAmount = _swapInternal(fromToken, dstToken, amount, factory);\\n    }\\n\\n    function _swapETH(\\n        IERC20 fromToken,\\n        IERC20 dstToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    ) internal returns (uint256 returnAmount) {\\n        returnAmount = _swapOverMid(fromToken, weth, dstToken, amount, factory);\\n    }\\n\\n    function _swapOtherToken(\\n        IERC20 fromToken,\\n        IERC20 dstToken,\\n        uint256 amount,\\n        IUniswapFactory factory\\n    ) internal returns (uint256 returnAmount) {\\n        returnAmount = _swapOverMid(\\n            fromToken,\\n            otherToken,\\n            dstToken,\\n            amount,\\n            factory\\n        );\\n    }\\n\\n    function setWETH(address _weth) external onlyOwner {\\n        weth = IWETH(_weth);\\n        emit WETHSet(_weth);\\n    }\\n\\n    function setOtherToken(address _otherToken) external onlyOwner {\\n        otherToken = IWETH(_otherToken);\\n        emit OtherTokenSet(_otherToken);\\n    }\\n\\n    function setPathCount(uint256 _pathCount) external onlyOwner {\\n        pathCount = _pathCount;\\n        emit PathCountSet(_pathCount);\\n    }\\n\\n    function setPathSplit(uint256 _pathSplit) external onlyOwner {\\n        pathSplit = _pathSplit;\\n        emit PathSplitSet(_pathSplit);\\n    }\\n\\n    function setFactories(address[] memory _factories) external onlyOwner {\\n        dexCount = _factories.length;\\n        for (uint256 i = 0; i < _factories.length; i++) {\\n            factories.push(_factories[i]);\\n        }\\n        emit FactoriesSet(_factories);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../lib/DataTypes.sol\\\";\\n\\ninterface ISwapRouter {\\n    struct SwapRequest {\\n        IERC20 srcToken; // Source token address\\n        IERC20 dstToken; // Destination token address\\n        uint256 amountIn; // Source token amount to swap\\n        uint256 amountMinSpend; // Minimum token amount to be swapped by aggregator.\\n        //If this is lower than amountIn, it will skip dex aggregator swap.\\n        uint256 amountOutMin; // Minimum output amount in desitnation token.\\n        bool useParaswap; // Flag to use paraswap or not.\\n        bytes paraswapData; // Paraswap calldata\\n        DataTypes.SplitSwapInfo[] splitSwapData; // Split swap data array for using several dex aggregators\\n        uint256[] distribution; // internal swap params at uni v2 like amms.\\n        bool raiseError; // true to revert, false to continue without reverting.\\n    }\\n\\n    /**\\n     * Swap source token to destination token by dex aggreagors and internal swap.\\n     * Sometimes, we couldn't swap all src token amount. This happens when dex aggreagator\\n     * payload amount is lower than amountIn.\\n     * @param swapRequest SwapRequest struct param\\n     * @return unspent unswapped source token amount\\n     * @return returnAmount received destination token amount\\n     */\\n    function swap(SwapRequest memory swapRequest)\\n        external\\n        payable\\n        returns (uint256 unspent, uint256 returnAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISwitchEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../lib/DataTypes.sol\\\";\\n\\ninterface ISwitchEvent {\\n    function emitSwapped(\\n        address from,\\n        address recipient,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 fromAmount,\\n        uint256 destAmount,\\n        uint256 reward\\n    ) external;\\n\\n    function emitParaswapSwapped(\\n        address from,\\n        IERC20 fromToken,\\n        uint256 fromAmount\\n    ) external;\\n\\n    function emitCrosschainSwapRequest(\\n        bytes32 id,\\n        bytes32 bridgeTransferId,\\n        bytes32 bridge, // bridge slug\\n        address from, // user address\\n        address fromToken, // source token on sending chain\\n        address bridgeToken, // bridge token on sending chain\\n        address destToken, // dest token on receiving chain\\n        uint256 fromAmount, // source token amount on sending chain\\n        uint256 bridgeAmount, // swapped amount on sending chain\\n        uint256 dstAmount, // estimated amount of dest token on receiving chain\\n        DataTypes.SwapStatus status\\n    ) external;\\n\\n    function emitCrosschainContractCallRequest(\\n        bytes32 id,\\n        bytes32 bridgeTransferId,\\n        bytes32 bridge, // bridge slug\\n        address from, // user address\\n        address toContractAddress, // The address of the contract to interact with\\n        address toApprovalAddress, // the approval address for contract call\\n        address fromToken, // source token on sending chain\\n        address callToken, // contract call token on receiving chain\\n        uint256 fromAmount, // source token amount on sending chain\\n        uint256 estimatedCallAmount, // estimated amount of contract call token on receiving chain\\n        DataTypes.ContractCallStatus status\\n    ) external;\\n\\n    function emitCrosschainSwapDone(\\n        bytes32 id,\\n        bytes32 bridge,\\n        address from, // user address\\n        address bridgeToken, // source token on receiving chain\\n        address destToken, // dest token on receiving chain\\n        uint256 bridgeAmount, // bridge token amount on receiving chain\\n        uint256 destAmount, //dest token amount on receiving chain\\n        DataTypes.SwapStatus status\\n    ) external;\\n\\n    function emitCrosschainContractCallDone(\\n        bytes32 id,\\n        bytes32 bridge,\\n        address from, // user address\\n        address toContractAddress, // The address of the contract to interact with\\n        address toApprovalAddress, // the approval address for contract call\\n        address bridgeToken, // source token on receiving chain\\n        address callToken, // call token on receiving chain\\n        uint256 bridgeAmount, // bridge token amount on receiving chain\\n        uint256 estimatedCallAmount, //dest token amount on receiving chain\\n        DataTypes.ContractCallStatus status\\n    ) external;\\n\\n    function emitSingleChainContractCallDone(\\n        address from, // user address\\n        address toContractAddress, // The address of the contract to interact with\\n        address toApprovalAddress, // the approval address for contract call\\n        address fromToken, // source token on receiving chain\\n        address callToken, // call token on receiving chain\\n        uint256 fromAmount, // from token amount on receiving chain\\n        uint256 callAmount, //dest token amount on receiving chain\\n        DataTypes.ContractCallStatus status\\n    ) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\ninterface IUniswapExchange {\\n    function getReserves() external view returns(uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IUniswapExchange.sol\\\";\\n\\ninterface IUniswapFactory {\\n    function getPair(IERC20 tokenA, IERC20 tokenB) external view returns (IUniswapExchange pair);\\n}\\n\"\r\n    },\r\n    \"contracts/lib/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n/**\\n * @title DataTypes\\n * @dev Definition of shared types\\n */\\nlibrary DataTypes {\\n    /// @notice Type for representing a swapping status type\\n    enum SwapStatus {\\n        Null,\\n        Succeeded,\\n        Failed,\\n        Fallback\\n    }\\n\\n    enum ContractCallStatus {\\n        Null,\\n        Succeeded,\\n        Failed,\\n        Fallback\\n    }\\n\\n    /// @notice Type for representing a paraswap usage status\\n    enum ParaswapUsageStatus {\\n        None,\\n        OnSrcChain,\\n        OnDestChain,\\n        Both\\n    }\\n\\n    /// @notice Split Swap params\\n    struct SplitSwapInfo {\\n        uint256 amount;\\n        address swapContract;\\n        address spender;\\n        bytes swapData;\\n    }\\n\\n    /// @notice Swap params\\n    struct SwapInfo {\\n        address srcToken;\\n        address dstToken;\\n    }\\n\\n    struct ContractCallInfo {\\n        address toContractAddress; // The address of the contract to interact with.\\n        address toApprovalAddress; // the approval address for contract call\\n        address contractOutputsToken; // Some contract interactions will output a token (e.g. staking)\\n        uint32 toContractGasLimit; // The estimated gas used by the destination call.\\n        bytes toContractCallData; // The callData to be sent to the contract for the interaction on the destination chain.\\n    }\\n\\n    struct ContractCallRequest {\\n        bytes32 id;\\n        bytes32 bridge;\\n        address srcToken;\\n        address bridgeToken;\\n        address callToken;\\n        address recipient;\\n        uint256 srcAmount;\\n        uint256 bridgeDstAmount;\\n        uint256 estimatedCallAmount;\\n        uint256[] dstDistribution;\\n        bytes dstParaswapData;\\n        ContractCallInfo callInfo;\\n        ParaswapUsageStatus paraswapUsageStatus;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/UniswapExchangeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"../interfaces/IUniswapExchange.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./UniversalERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary UniswapExchangeLib {\\n    using Math for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    function getReturn(\\n        IUniswapExchange exchange,\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint amountIn\\n    )\\n        internal\\n        view\\n        returns (uint256 result, bool needSync, bool needSkim)\\n    {\\n        uint256 reserveIn = fromToken.universalBalanceOf(address(exchange));\\n        uint256 reserveOut = destToken.universalBalanceOf(address(exchange));\\n        (uint112 reserve0, uint112 reserve1,) = exchange.getReserves();\\n        if (fromToken > destToken) {\\n            (reserve0, reserve1) = (reserve1, reserve0);\\n        }\\n        needSync = (reserveIn < reserve0 || reserveOut < reserve1);\\n        needSkim = !needSync && (reserveIn > reserve0 || reserveOut > reserve1);\\n\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * Math.min(reserveOut, reserve1);\\n        uint256 denominator = Math.min(reserveIn, reserve0) * 1000 + amountInWithFee;\\n        result = (denominator == 0) ? 0 : numerator / denominator;\\n    }\\n}\\n\\n\\n\\n\"\r\n    },\r\n    \"contracts/lib/UniversalERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary UniversalERC20 {\\n\\n    using SafeERC20 for IERC20;\\n\\n    address private constant ZERO_ADDRESS = address(0x0000000000000000000000000000000000000000);\\n    address private constant ETH_ADDRESS = address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n        returns (bool)\\n    {\\n        if (amount == 0) {\\n            return true;\\n        }\\n        if (isETH(token)) {\\n            payable(to).transfer(amount);\\n            return true;\\n        } else {\\n            token.safeTransfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, \\\"Wrong useage of ETH.universalTransferFrom()\\\");\\n            if (to != address(this)) {\\n                payable(to).transfer(amount);\\n            }\\n            // commented following lines for passing celer fee properly.\\n//            if (msg.value > amount) {\\n//                payable(msg.sender).transfer(msg.value - amount);\\n//            }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalTransferFromSenderToThis(\\n        IERC20 token,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            if (msg.value > amount) {\\n                // Return remainder if exist\\n                payable(msg.sender).transfer(msg.value - amount);\\n            }\\n        } else {\\n            token.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    function universalApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    )\\n        internal\\n    {\\n        if (!isETH(token)) {\\n            if (amount == 0) {\\n                token.safeApprove(to, 0);\\n                return;\\n            }\\n\\n            uint256 approvedAmount = token.allowance(address(this), to);\\n            if (approvedAmount > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, amount);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns(bool) {\\n        return (address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS));\\n    }\\n\\n    // function notExist(IERC20 token) internal pure returns(bool) {\\n    //     return (address(token) == address(-1));\\n    // }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_otherToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pathCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pathSplit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_switchEventAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paraswapProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_augustusSwapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"augustusSwapper\",\"type\":\"address\"}],\"name\":\"AugustusSwapperSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"}],\"name\":\"FactoriesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_otherToken\",\"type\":\"address\"}],\"name\":\"OtherTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paraswapProxy\",\"type\":\"address\"}],\"name\":\"ParaswapProxySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pathCount\",\"type\":\"uint256\"}],\"name\":\"PathCountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pathSplit\",\"type\":\"uint256\"}],\"name\":\"PathSplitSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"switchEvent\",\"type\":\"address\"}],\"name\":\"SwitchEventSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"WETHSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"augustusSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherToken\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paraswapProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pathCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pathSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_factories\",\"type\":\"address[]\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otherToken\",\"type\":\"address\"}],\"name\":\"setOtherToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pathCount\",\"type\":\"uint256\"}],\"name\":\"setPathCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pathSplit\",\"type\":\"uint256\"}],\"name\":\"setPathSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMinSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useParaswap\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"paraswapData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.SplitSwapInfo[]\",\"name\":\"splitSwapData\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"raiseError\",\"type\":\"bool\"}],\"internalType\":\"struct ISwapRouter.SwapRequest\",\"name\":\"swapRequest\",\"type\":\"tuple\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unspent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct DataTypes.SplitSwapInfo\",\"name\":\"splitSwapData\",\"type\":\"tuple\"}],\"name\":\"swapExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchEvent\",\"outputs\":[{\"internalType\":\"contract ISwitchEvent\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SwapRouter", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000b4fbf271143f4fbf7b91a5ded31805e42b2208d600000000000000000000000007865c6e87b9f70255377e024ace6630c1eaa37f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001000000000000000000000000002a0d5e651d2270327c3e1acb04427fc9a4bce47f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}