{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IKernel.sol\\\";\\nimport \\\"./Bridge.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract Governance is Bridge {\\n    using SafeMath for uint256;\\n\\n    enum ProposalState {\\n        WarmUp,\\n        Active,\\n        Canceled,\\n        Failed,\\n        Accepted,\\n        Queued,\\n        Grace,\\n        Expired,\\n        Executed,\\n        Abrogated\\n    }\\n\\n    struct Receipt {\\n        // Whether or not a vote has been cast\\n        bool hasVoted;\\n        // The number of votes the voter had, which were cast\\n        uint256 votes;\\n        // support\\n        bool support;\\n    }\\n\\n    struct AbrogationProposal {\\n        address creator;\\n        uint256 createTime;\\n        string description;\\n\\n        uint256 forVotes;\\n        uint256 againstVotes;\\n\\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    struct ProposalParameters {\\n        uint256 warmUpDuration;\\n        uint256 activeDuration;\\n        uint256 queueDuration;\\n        uint256 gracePeriodDuration;\\n        uint256 acceptanceThreshold;\\n        uint256 minQuorum;\\n    }\\n\\n    struct Proposal {\\n        // proposal identifiers\\n        // unique id\\n        uint256 id;\\n        // Creator of the proposal\\n        address proposer;\\n        // proposal description\\n        string description;\\n        string title;\\n\\n        // proposal technical details\\n        // ordered list of target addresses to be made\\n        address[] targets;\\n        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\n        uint256[] values;\\n        // The ordered list of function signatures to be called\\n        string[] signatures;\\n        // The ordered list of calldata to be passed to each call\\n        bytes[] calldatas;\\n\\n        // proposal creation time - 1\\n        uint256 createTime;\\n\\n        // votes status\\n        // The timestamp that the proposal will be available for execution, set once the vote succeeds\\n        uint256 eta;\\n        // Current number of votes in favor of this proposal\\n        uint256 forVotes;\\n        // Current number of votes in opposition to this proposal\\n        uint256 againstVotes;\\n\\n        bool canceled;\\n        bool executed;\\n\\n        // Receipts of ballots for the entire set of voters\\n        mapping(address => Receipt) receipts;\\n\\n        ProposalParameters parameters;\\n    }\\n\\n    uint256 public lastProposalId;\\n    mapping(uint256 => Proposal) public proposals;\\n    mapping(uint256 => AbrogationProposal) public abrogationProposals;\\n    mapping(address => uint256) public latestProposalIds;\\n    IKernel kernel;\\n    bool isInitialized;\\n    bool public isActive;\\n\\n    event ProposalCreated(uint256 indexed proposalId);\\n    event Vote(uint256 indexed proposalId, address indexed user, bool support, uint256 power);\\n    event VoteCanceled(uint256 indexed proposalId, address indexed user);\\n    event ProposalQueued(uint256 indexed proposalId, address caller, uint256 eta);\\n    event ProposalExecuted(uint256 indexed proposalId, address caller);\\n    event ProposalCanceled(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalStarted(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalExecuted(uint256 indexed proposalId, address caller);\\n    event AbrogationProposalVote(uint256 indexed proposalId, address indexed user, bool support, uint256 power);\\n    event AbrogationProposalVoteCancelled(uint256 indexed proposalId, address indexed user);\\n\\n    receive() external payable {}\\n\\n    // executed only once\\n    function initialize(address _kernel) public {\\n        require(isInitialized == false, \\\"Contract already initialized.\\\");\\n        require(_kernel != address(0), \\\"kernel must not be 0x0\\\");\\n\\n        kernel = IKernel(_kernel);\\n        isInitialized = true;\\n    }\\n\\n    function activate() public {\\n        require(!isActive, \\\"DAO already active\\\");\\n        require(kernel.entrStaked() >= ACTIVATION_THRESHOLD, \\\"Threshold not met yet\\\");\\n\\n        isActive = true;\\n    }\\n\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas,\\n        string memory description,\\n        string memory title\\n    )\\n    public returns (uint256)\\n    {\\n        if (!isActive) {\\n            require(kernel.entrStaked() >= ACTIVATION_THRESHOLD, \\\"DAO not yet active\\\");\\n            isActive = true;\\n        }\\n\\n        require(\\n            kernel.votingPowerAtTs(msg.sender, block.timestamp - 1) >= _getCreationThreshold(),\\n            \\\"Creation threshold not met\\\"\\n        );\\n        require(\\n            targets.length == values.length && targets.length == signatures.length && targets.length == calldatas.length,\\n            \\\"Proposal function information arity mismatch\\\"\\n        );\\n        require(targets.length != 0, \\\"Must provide actions\\\");\\n        require(targets.length <= PROPOSAL_MAX_ACTIONS, \\\"Too many actions on a vote\\\");\\n        require(bytes(title).length > 0, \\\"title can't be empty\\\");\\n        require(bytes(description).length > 0, \\\"description can't be empty\\\");\\n\\n        // check if user has another running vote\\n        uint256 previousProposalId = latestProposalIds[msg.sender];\\n        if (previousProposalId != 0) {\\n            require(_isLiveState(previousProposalId) == false, \\\"One live proposal per proposer\\\");\\n        }\\n\\n        uint256 newProposalId = lastProposalId + 1;\\n        Proposal storage newProposal = proposals[newProposalId];\\n        newProposal.id = newProposalId;\\n        newProposal.proposer = msg.sender;\\n        newProposal.description = description;\\n        newProposal.title = title;\\n        newProposal.targets = targets;\\n        newProposal.values = values;\\n        newProposal.signatures = signatures;\\n        newProposal.calldatas = calldatas;\\n        newProposal.createTime = block.timestamp - 1;\\n        newProposal.parameters.warmUpDuration = warmUpDuration;\\n        newProposal.parameters.activeDuration = activeDuration;\\n        newProposal.parameters.queueDuration = queueDuration;\\n        newProposal.parameters.gracePeriodDuration = gracePeriodDuration;\\n        newProposal.parameters.acceptanceThreshold = acceptanceThreshold;\\n        newProposal.parameters.minQuorum = minQuorum;\\n\\n        lastProposalId = newProposalId;\\n        latestProposalIds[msg.sender] = newProposalId;\\n\\n        emit ProposalCreated(newProposalId);\\n\\n        return newProposalId;\\n    }\\n\\n    function queue(uint256 proposalId) public {\\n        require(state(proposalId) == ProposalState.Accepted, \\\"Proposal can only be queued if it is succeeded\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        uint256 eta = proposal.createTime + proposal.parameters.warmUpDuration + proposal.parameters.activeDuration + proposal.parameters.queueDuration;\\n        proposal.eta = eta;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            require(\\n                !queuedTransactions[_getTxHash(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta)],\\n                \\\"proposal action already queued at eta\\\"\\n            );\\n\\n            queueTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], eta);\\n        }\\n\\n        emit ProposalQueued(proposalId, msg.sender, eta);\\n    }\\n\\n    function execute(uint256 proposalId) public payable {\\n        require(_canBeExecuted(proposalId), \\\"Cannot be executed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.executed = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            executeTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit ProposalExecuted(proposalId, msg.sender);\\n    }\\n\\n    function cancelProposal(uint256 proposalId) public {\\n        require(_isCancellableState(proposalId), \\\"Proposal in state that does not allow cancellation\\\");\\n        require(_canCancelProposal(proposalId), \\\"Cancellation requirements not met\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.canceled = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit ProposalCanceled(proposalId, msg.sender);\\n    }\\n\\n    function castVote(uint256 proposalId, bool support) public {\\n        require(state(proposalId) == ProposalState.Active, \\\"Voting is closed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[msg.sender];\\n\\n        // exit if user already voted\\n        require(receipt.hasVoted == false || receipt.hasVoted && receipt.support != support, \\\"Already voted this option\\\");\\n\\n        uint256 votes = kernel.votingPowerAtTs(msg.sender, _getSnapshotTimestamp(proposal));\\n        require(votes > 0, \\\"no voting power\\\");\\n\\n        // means it changed its vote\\n        if (receipt.hasVoted) {\\n            if (receipt.support) {\\n                proposal.forVotes = proposal.forVotes.sub(receipt.votes);\\n            } else {\\n                proposal.againstVotes = proposal.againstVotes.sub(receipt.votes);\\n            }\\n        }\\n\\n        if (support) {\\n            proposal.forVotes = proposal.forVotes.add(votes);\\n        } else {\\n            proposal.againstVotes = proposal.againstVotes.add(votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.votes = votes;\\n        receipt.support = support;\\n\\n        emit Vote(proposalId, msg.sender, support, votes);\\n    }\\n\\n    function cancelVote(uint256 proposalId) public {\\n        require(state(proposalId) == ProposalState.Active, \\\"Voting is closed\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n        Receipt storage receipt = proposal.receipts[msg.sender];\\n\\n        uint256 votes = kernel.votingPowerAtTs(msg.sender, _getSnapshotTimestamp(proposal));\\n\\n        require(receipt.hasVoted, \\\"Cannot cancel if not voted yet\\\");\\n\\n        if (receipt.support) {\\n            proposal.forVotes = proposal.forVotes.sub(votes);\\n        } else {\\n            proposal.againstVotes = proposal.againstVotes.sub(votes);\\n        }\\n\\n        receipt.hasVoted = false;\\n        receipt.votes = 0;\\n        receipt.support = false;\\n\\n        emit VoteCanceled(proposalId, msg.sender);\\n    }\\n\\n    // ======================================================================================================\\n    // Abrogation proposal methods\\n    // ======================================================================================================\\n\\n    // the Abrogation Proposal is a mechanism for the DAO participants to veto the execution of a proposal that was already\\n    // accepted and it is currently queued. For the Abrogation Proposal to pass, 50% + 1 of the vENTR holders\\n    // must vote FOR the Abrogation Proposal\\n    function startAbrogationProposal(uint256 proposalId, string memory description) public {\\n        require(state(proposalId) == ProposalState.Queued, \\\"Proposal must be in queue\\\");\\n        require(\\n            kernel.votingPowerAtTs(msg.sender, block.timestamp - 1) >= _getCreationThreshold(),\\n            \\\"Creation threshold not met\\\"\\n        );\\n\\n        AbrogationProposal storage ap = abrogationProposals[proposalId];\\n\\n        require(ap.createTime == 0, \\\"Abrogation proposal already exists\\\");\\n        require(bytes(description).length > 0, \\\"description can't be empty\\\");\\n\\n        ap.createTime = block.timestamp;\\n        ap.creator = msg.sender;\\n        ap.description = description;\\n\\n        emit AbrogationProposalStarted(proposalId, msg.sender);\\n    }\\n\\n    // abrogateProposal cancels a proposal if there's an Abrogation Proposal that passed\\n    function abrogateProposal(uint256 proposalId) public {\\n        require(state(proposalId) == ProposalState.Abrogated, \\\"Cannot be abrogated\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        require(proposal.canceled == false, \\\"Cannot be abrogated\\\");\\n\\n        proposal.canceled = true;\\n\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            cancelTransaction(proposal.targets[i], proposal.values[i], proposal.signatures[i], proposal.calldatas[i], proposal.eta);\\n        }\\n\\n        emit AbrogationProposalExecuted(proposalId, msg.sender);\\n    }\\n\\n    function abrogationProposal_castVote(uint256 proposalId, bool support) public {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        AbrogationProposal storage abrogationProposal = abrogationProposals[proposalId];\\n        require(\\n            state(proposalId) == ProposalState.Queued && abrogationProposal.createTime != 0,\\n            \\\"Abrogation Proposal not active\\\"\\n        );\\n\\n        Receipt storage receipt = abrogationProposal.receipts[msg.sender];\\n        require(\\n            receipt.hasVoted == false || receipt.hasVoted && receipt.support != support,\\n            \\\"Already voted this option\\\"\\n        );\\n\\n        uint256 votes = kernel.votingPowerAtTs(msg.sender, abrogationProposal.createTime - 1);\\n        require(votes > 0, \\\"no voting power\\\");\\n\\n        // means it changed its vote\\n        if (receipt.hasVoted) {\\n            if (receipt.support) {\\n                abrogationProposal.forVotes = abrogationProposal.forVotes.sub(receipt.votes);\\n            } else {\\n                abrogationProposal.againstVotes = abrogationProposal.againstVotes.sub(receipt.votes);\\n            }\\n        }\\n\\n        if (support) {\\n            abrogationProposal.forVotes = abrogationProposal.forVotes.add(votes);\\n        } else {\\n            abrogationProposal.againstVotes = abrogationProposal.againstVotes.add(votes);\\n        }\\n\\n        receipt.hasVoted = true;\\n        receipt.votes = votes;\\n        receipt.support = support;\\n\\n        emit AbrogationProposalVote(proposalId, msg.sender, support, votes);\\n    }\\n\\n    function abrogationProposal_cancelVote(uint256 proposalId) public {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        AbrogationProposal storage abrogationProposal = abrogationProposals[proposalId];\\n        Receipt storage receipt = abrogationProposal.receipts[msg.sender];\\n\\n        require(\\n            state(proposalId) == ProposalState.Queued && abrogationProposal.createTime != 0,\\n            \\\"Abrogation Proposal not active\\\"\\n        );\\n\\n        uint256 votes = kernel.votingPowerAtTs(msg.sender, abrogationProposal.createTime - 1);\\n\\n        require(receipt.hasVoted, \\\"Cannot cancel if not voted yet\\\");\\n\\n        if (receipt.support) {\\n            abrogationProposal.forVotes = abrogationProposal.forVotes.sub(votes);\\n        } else {\\n            abrogationProposal.againstVotes = abrogationProposal.againstVotes.sub(votes);\\n        }\\n\\n        receipt.hasVoted = false;\\n        receipt.votes = 0;\\n        receipt.support = false;\\n\\n        emit AbrogationProposalVoteCancelled(proposalId, msg.sender);\\n    }\\n\\n    // ======================================================================================================\\n    // views\\n    // ======================================================================================================\\n\\n    function state(uint256 proposalId) public view returns (ProposalState) {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (proposal.canceled) {\\n            return ProposalState.Canceled;\\n        }\\n\\n        if (proposal.executed) {\\n            return ProposalState.Executed;\\n        }\\n\\n        if (block.timestamp <= proposal.createTime + proposal.parameters.warmUpDuration) {\\n            return ProposalState.WarmUp;\\n        }\\n\\n        if (block.timestamp <= proposal.createTime + proposal.parameters.warmUpDuration + proposal.parameters.activeDuration) {\\n            return ProposalState.Active;\\n        }\\n\\n        if ((proposal.forVotes + proposal.againstVotes) < _getQuorum(proposal) ||\\n            (proposal.forVotes < _getMinForVotes(proposal))) {\\n            return ProposalState.Failed;\\n        }\\n\\n        if (proposal.eta == 0) {\\n            return ProposalState.Accepted;\\n        }\\n\\n        if (block.timestamp < proposal.eta) {\\n            return ProposalState.Queued;\\n        }\\n\\n        if (_proposalAbrogated(proposalId)) {\\n            return ProposalState.Abrogated;\\n        }\\n\\n        if (block.timestamp <= proposal.eta + proposal.parameters.gracePeriodDuration) {\\n            return ProposalState.Grace;\\n        }\\n\\n        return ProposalState.Expired;\\n    }\\n\\n    function getReceipt(uint256 proposalId, address voter) public view returns (Receipt memory) {\\n        return proposals[proposalId].receipts[voter];\\n    }\\n\\n    function getProposalParameters(uint256 proposalId) public view returns (ProposalParameters memory) {\\n        return proposals[proposalId].parameters;\\n    }\\n\\n    function getAbrogationProposalReceipt(uint256 proposalId, address voter) public view returns (Receipt memory) {\\n        return abrogationProposals[proposalId].receipts[voter];\\n    }\\n\\n    function getActions(uint256 proposalId) public view returns (\\n        address[] memory targets,\\n        uint256[] memory values,\\n        string[] memory signatures,\\n        bytes[] memory calldatas\\n    ) {\\n        Proposal storage p = proposals[proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    function getProposalQuorum(uint256 proposalId) public view returns (uint256) {\\n        require(0 < proposalId && proposalId <= lastProposalId, \\\"invalid proposal id\\\");\\n\\n        return _getQuorum(proposals[proposalId]);\\n    }\\n\\n    // ======================================================================================================\\n    // internal methods\\n    // ======================================================================================================\\n\\n    function _canCancelProposal(uint256 proposalId) internal view returns (bool){\\n        Proposal storage proposal = proposals[proposalId];\\n\\n        if (msg.sender == proposal.proposer ||\\n            kernel.votingPower(proposal.proposer) < _getCreationThreshold()\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function _isCancellableState(uint256 proposalId) internal view returns (bool) {\\n        ProposalState s = state(proposalId);\\n\\n        return s == ProposalState.WarmUp || s == ProposalState.Active;\\n    }\\n\\n    function _isLiveState(uint256 proposalId) internal view returns (bool) {\\n        ProposalState s = state(proposalId);\\n\\n        return s == ProposalState.WarmUp ||\\n        s == ProposalState.Active ||\\n        s == ProposalState.Accepted ||\\n        s == ProposalState.Queued ||\\n        s == ProposalState.Grace;\\n    }\\n\\n    function _canBeExecuted(uint256 proposalId) internal view returns (bool) {\\n        return state(proposalId) == ProposalState.Grace;\\n    }\\n\\n    function _getMinForVotes(Proposal storage proposal) internal view returns (uint256) {\\n        return (proposal.forVotes + proposal.againstVotes).mul(proposal.parameters.acceptanceThreshold).div(100);\\n    }\\n\\n    function _getCreationThreshold() internal view returns (uint256) {\\n        return kernel.entrStaked().div(100);\\n    }\\n\\n    // Returns the timestamp of the snapshot for a given proposal\\n    // If the current block's timestamp is equal to `proposal.createTime + warmUpDuration` then the state function\\n    // will return WarmUp as state which will prevent any vote to be cast which will gracefully avoid any flashloan attack\\n    function _getSnapshotTimestamp(Proposal storage proposal) internal view returns (uint256) {\\n        return proposal.createTime + proposal.parameters.warmUpDuration;\\n    }\\n\\n    function _getQuorum(Proposal storage proposal) internal view returns (uint256) {\\n        return kernel.entrStakedAtTs(_getSnapshotTimestamp(proposal)).mul(proposal.parameters.minQuorum).div(100);\\n    }\\n\\n    function _proposalAbrogated(uint256 proposalId) internal view returns (bool) {\\n        Proposal storage p = proposals[proposalId];\\n        AbrogationProposal storage cp = abrogationProposals[proposalId];\\n\\n        if (cp.createTime == 0 || block.timestamp < p.eta) {\\n            return false;\\n        }\\n\\n        return cp.forVotes >= kernel.entrStakedAtTs(cp.createTime - 1).div(2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKernel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\ninterface IKernel {\\n    struct Stake {\\n        uint256 timestamp;\\n        uint256 amount;\\n        uint256 expiryTimestamp;\\n        address delegatedTo;\\n    }\\n\\n    // deposit allows a user to add more ENTR to his staked balance\\n    function deposit(uint256 amount) external;\\n\\n    // withdraw allows a user to withdraw funds if the balance is not locked\\n    function withdraw(uint256 amount) external;\\n\\n    // lock a user's currently staked balance until timestamp & add the bonus to his voting power\\n    function lock(uint256 timestamp) external;\\n\\n    // delegate allows a user to delegate his voting power to another user\\n    function delegate(address to) external;\\n\\n    // stopDelegate allows a user to take back the delegated voting power\\n    function stopDelegate() external;\\n\\n    // balanceOf returns the current ENTR balance of a user (bonus not included)\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    // balanceAtTs returns the amount of ENTR that the user currently staked (bonus NOT included)\\n    function balanceAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // stakeAtTs returns the Stake object of the user that was valid at `timestamp`\\n    function stakeAtTs(address user, uint256 timestamp) external view returns (Stake memory);\\n\\n    // votingPower returns the voting power (bonus included) + delegated voting power for a user at the current block\\n    function votingPower(address user) external view returns (uint256);\\n\\n    // votingPowerAtTs returns the voting power (bonus included) + delegated voting power for a user at a point in time\\n    function votingPowerAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // entrStaked returns the total raw amount of ENTR staked at the current block\\n    function entrStaked() external view returns (uint256);\\n\\n    // entrStakedAtTs returns the total raw amount of ENTR users have deposited into the contract\\n    // it does not include any bonus\\n    function entrStakedAtTs(uint256 timestamp) external view returns (uint256);\\n\\n    // delegatedPower returns the total voting power that a user received from other users\\n    function delegatedPower(address user) external view returns (uint256);\\n\\n    // delegatedPowerAtTs returns the total voting power that a user received from other users at a point in time\\n    function delegatedPowerAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // multiplierAtTs calculates the multiplier at a given timestamp based on the user's stake a the given timestamp\\n    // it includes the decay mechanism\\n    function multiplierAtTs(address user, uint256 timestamp) external view returns (uint256);\\n\\n    // userLockedUntil returns the timestamp until the user's balance is locked\\n    function userLockedUntil(address user) external view returns (uint256);\\n\\n    // userDidDelegate returns the address to which a user delegated their voting power; address(0) if not delegated\\n    function userDelegatedTo(address user) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/Bridge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nimport \\\"./Parameters.sol\\\";\\n\\nabstract contract Bridge is Parameters {\\n\\n    mapping(bytes32 => bool) public queuedTransactions;\\n\\n    function queueTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal returns (bytes32) {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n        queuedTransactions[txHash] = true;\\n\\n        return txHash;\\n    }\\n\\n    function cancelTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n        queuedTransactions[txHash] = false;\\n    }\\n\\n    function executeTransaction(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal returns (bytes memory) {\\n        bytes32 txHash = _getTxHash(target, value, signature, data, eta);\\n\\n        require(block.timestamp >= eta, \\\"executeTransaction: Transaction hasn't surpassed time lock.\\\");\\n        require(block.timestamp <= eta + gracePeriodDuration, \\\"executeTransaction: Transaction is stale.\\\");\\n\\n        queuedTransactions[txHash] = false;\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\n        }\\n\\n        // solium-disable-next-line security/no-call-value\\n        (bool success, bytes memory returnData) = target.call{value : value}(callData);\\n        require(success, string(returnData));\\n\\n        return returnData;\\n    }\\n\\n    function _getTxHash(address target, uint256 value, string memory signature, bytes memory data, uint256 eta) internal returns (bytes32) {\\n        return keccak256(abi.encode(target, value, signature, data, eta));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Parameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.7.6;\\n\\nabstract contract Parameters {\\n    uint256 public warmUpDuration = 2 days;\\n    uint256 public activeDuration = 2 days;\\n    uint256 public queueDuration = 1 days;\\n    uint256 public gracePeriodDuration = 4 days;\\n\\n    uint256 public acceptanceThreshold = 60;\\n    uint256 public minQuorum = 40;\\n\\n    uint256 constant ACTIVATION_THRESHOLD = 5_000_000 * 10**18;\\n    uint256 constant PROPOSAL_MAX_ACTIONS = 10;\\n\\n    modifier onlyDAO() {\\n        require(msg.sender == address(this), \\\"Only DAO can call\\\");\\n        _;\\n    }\\n\\n    function setWarmUpDuration(uint256 period) public onlyDAO {\\n        warmUpDuration = period;\\n    }\\n\\n    function setActiveDuration(uint256 period) public onlyDAO {\\n        require(period >= 4 hours, \\\"period must be > 0\\\");\\n        activeDuration = period;\\n    }\\n\\n    function setQueueDuration(uint256 period) public onlyDAO {\\n        queueDuration = period;\\n    }\\n\\n    function setGracePeriodDuration(uint256 period) public onlyDAO {\\n        require(period >= 4 hours, \\\"period must be > 0\\\");\\n        gracePeriodDuration = period;\\n    }\\n\\n    function setAcceptanceThreshold(uint256 threshold) public onlyDAO {\\n        require(threshold <= 100, \\\"Maximum is 100.\\\");\\n        require(threshold > 50, \\\"Minimum is 50.\\\");\\n\\n        acceptanceThreshold = threshold;\\n    }\\n\\n    function setMinQuorum(uint256 quorum) public onlyDAO {\\n        require(quorum > 5, \\\"quorum must be greater than 5\\\");\\n        require(quorum <= 100, \\\"Maximum is 100.\\\");\\n\\n        minQuorum = quorum;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AbrogationProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AbrogationProposalStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"AbrogationProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AbrogationProposalVoteCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"VoteCanceled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"abrogateProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"abrogationProposal_cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"abrogationProposal_castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"abrogationProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptanceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancelVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getAbrogationProposalReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"internalType\":\"struct Governance.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalParameters\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"warmUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.ProposalParameters\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getProposalQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"internalType\":\"struct Governance.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriodDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kernel\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minQuorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"createTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"warmUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriodDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuorum\",\"type\":\"uint256\"}],\"internalType\":\"struct Governance.ProposalParameters\",\"name\":\"parameters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setAcceptanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setActiveDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setGracePeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quorum\",\"type\":\"uint256\"}],\"name\":\"setMinQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setQueueDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setWarmUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"startAbrogationProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Governance.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"warmUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Governance", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "9999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}