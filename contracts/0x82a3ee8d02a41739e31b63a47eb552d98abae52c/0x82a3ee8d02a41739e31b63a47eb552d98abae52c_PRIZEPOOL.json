{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IOE is IERC20 {\\n    function getIsOdd() external view returns(bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\ninterface IPool {\\n    function addBuyer(address buyerAddress, uint256 amount, bool isOdd) external;\\n\\n    function updateBuyer(address buyerAddress, uint256 amount, bool isOdd) external;\\n\\n    function deleteBuyer(address buyerAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nabstract contract Context {\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function waiveOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/PRIZEPOOL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/IOE.sol\\\";\\n\\ncontract PRIZEPOOL is Ownable, IPool {\\n\\n    uint256 public evenAmount;\\n    uint256 public oddAmount;\\n\\n    uint256 public lastBalance;\\n\\n    struct withdrawItem {\\n        uint256 amount;\\n        uint256 time;\\n    }\\n\\n    struct oeStorage {\\n        uint256 odd;\\n        uint256 even;\\n        uint256 oddIndex;\\n        uint256 evenIndex;\\n        uint256 balance;\\n    }\\n\\n    event AddOdd(address user, uint256 amount);\\n    event AddEven(address user, uint256 amount);\\n\\n    event RemoveOdd(address user);\\n    event RemoveEven(address user);\\n\\n    event Update(address user, uint256 newOdd, uint256 newEven);\\n\\n    event Withdraw(address user, uint256 amount);\\n\\n    mapping(address => withdrawItem[]) public withdraws;\\n    mapping(address => oeStorage) public users;\\n    address[] public evenUsers;\\n    address[] public oddUsers;\\n\\n    address public token;\\n\\n    modifier onlyToken() {\\n        require(token == _msgSender() || owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n    function setTokenAddress(address _token) external onlyOwner {\\n        require(_token != address(0), 'Error: zero address');\\n        token = _token;\\n    }\\n\\n    function getListOfUsers(bool isOdd) external view returns(address[] memory){\\n        if (isOdd) {\\n            return oddUsers;\\n        }\\n        return evenUsers;\\n    }\\n\\n    function getUserWithdraws(address user) external view returns(withdrawItem[] memory) {\\n        return withdraws[user];\\n    }\\n\\n    function addBuyer(address buyerAddress, uint256 amount, bool isOdd) external onlyToken {\\n        if (buyerAddress == address(0) || buyerAddress == token) {\\n            return;\\n        }\\n        if (isOdd) {\\n            oddAmount += amount;\\n\\n            if (users[buyerAddress].odd == 0) {\\n                oddUsers.push(buyerAddress);\\n                users[buyerAddress].oddIndex = oddUsers.length;\\n            }\\n\\n            users[buyerAddress].odd += amount;\\n            emit AddOdd(buyerAddress, amount);\\n        } else {\\n            evenAmount += amount;\\n\\n            if (users[buyerAddress].even == 0) {\\n                evenUsers.push(buyerAddress);\\n                users[buyerAddress].evenIndex = evenUsers.length;\\n            }\\n\\n            users[buyerAddress].even += amount;\\n            emit AddEven(buyerAddress, amount);\\n        }\\n    }\\n\\n    function updateBuyer(address buyerAddress, uint256 amount, bool isOdd) external onlyToken {\\n        if (buyerAddress == address(0) || buyerAddress == token) {\\n            return;\\n        }\\n        uint256 balance = IOE(token).balanceOf(buyerAddress) - amount;\\n        if (isOdd) {\\n            if (users[buyerAddress].evenIndex > 0) {\\n                _updateEvenArrays(buyerAddress);\\n\\n                evenAmount -= users[buyerAddress].even;\\n                users[buyerAddress].even = 0;\\n            }\\n\\n            if (balance > 0) {\\n                oddAmount -= users[buyerAddress].odd;\\n                oddAmount += balance;\\n\\n                if (users[buyerAddress].oddIndex == 0) {\\n                    oddUsers.push(buyerAddress);\\n                    users[buyerAddress].oddIndex = oddUsers.length;\\n                }\\n                users[buyerAddress].odd = balance;\\n            }\\n        } else {\\n            if (users[buyerAddress].oddIndex > 0) {\\n                _updateOddArrays(buyerAddress);\\n\\n                oddAmount -= users[buyerAddress].odd;\\n                users[buyerAddress].odd = 0;\\n            }\\n\\n            if (balance > 0) {\\n                evenAmount -= users[buyerAddress].even;\\n                evenAmount += balance;\\n\\n                if (users[buyerAddress].evenIndex == 0) {\\n                    evenUsers.push(buyerAddress);\\n                    users[buyerAddress].evenIndex = evenUsers.length;\\n                }\\n                users[buyerAddress].even = balance;\\n            }\\n        }\\n        emit Update(buyerAddress, users[buyerAddress].odd, users[buyerAddress].even);\\n    }\\n\\n    function _updateEvenArrays(address buyerAddress) internal {\\n        address lastEvenUser = evenUsers[evenUsers.length - 1];\\n\\n        evenUsers[users[buyerAddress].evenIndex - 1] = lastEvenUser;\\n        evenUsers.pop();\\n\\n        users[lastEvenUser].evenIndex = users[buyerAddress].evenIndex;\\n        users[buyerAddress].evenIndex = 0;\\n    }\\n\\n    function _updateOddArrays(address buyerAddress) internal {\\n        address lastOddUser = oddUsers[oddUsers.length - 1];\\n\\n        oddUsers[users[buyerAddress].oddIndex - 1] = lastOddUser;\\n        oddUsers.pop();\\n\\n        users[lastOddUser].oddIndex = users[buyerAddress].oddIndex;\\n        users[buyerAddress].oddIndex = 0;\\n    }\\n\\n    function deleteBuyer(address buyerAddress) external onlyToken {\\n        if (buyerAddress == address(0) || buyerAddress == token) {\\n            return;\\n        }\\n        if (users[buyerAddress].oddIndex > 0) {\\n            _updateOddArrays(buyerAddress);\\n            oddAmount -= users[buyerAddress].odd;\\n            users[buyerAddress].odd = 0;\\n\\n            emit RemoveOdd(buyerAddress);\\n        }\\n        if (users[buyerAddress].evenIndex > 0) {\\n            _updateEvenArrays(buyerAddress);\\n            evenAmount -= users[buyerAddress].even;\\n            users[buyerAddress].even = 0;\\n\\n            emit RemoveEven(buyerAddress);\\n        }\\n    }\\n\\n    function withdrawByUser() external {\\n        require(users[msg.sender].balance > 0, 'Error balance amount');\\n\\n        lastBalance -= users[msg.sender].balance;\\n        uint256 transferBalance = users[msg.sender].balance;\\n        users[msg.sender].balance = 0;\\n\\n        payable(msg.sender).transfer(transferBalance);\\n\\n        withdrawItem memory item = withdrawItem(transferBalance, block.timestamp);\\n        withdraws[msg.sender].push(item);\\n        emit Withdraw(msg.sender, transferBalance);\\n    }\\n\\n    function activatePool() external onlyOwner {\\n        bool isOdd = IOE(token).getIsOdd();\\n        uint256 balance = address(this).balance - lastBalance;\\n\\n        uint256 amount = 0;\\n        if (isOdd) {\\n            uint256 unit = balance * 1 ether / oddAmount;\\n\\n            for (uint256 i = 0; i < oddUsers.length; i++) {\\n                amount = unit * users[oddUsers[i]].odd;\\n                users[oddUsers[i]].balance += amount / 1 ether;\\n            }\\n        } else {\\n            uint256 unit = balance * 1 ether / evenAmount;\\n\\n            for (uint256 i = 0; i < evenUsers.length; i++) {\\n                amount = unit * users[evenUsers[i]].even;\\n                users[evenUsers[i]].balance += amount / 1 ether;\\n            }\\n        }\\n        lastBalance = address(this).balance;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddEven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddOdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemoveEven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RemoveOdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOdd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEven\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"activatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOdd\",\"type\":\"bool\"}],\"name\":\"addBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"name\":\"deleteBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"evenUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isOdd\",\"type\":\"bool\"}],\"name\":\"getListOfUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserWithdraws\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct PRIZEPOOL.withdrawItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oddAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oddUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOdd\",\"type\":\"bool\"}],\"name\":\"updateBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"odd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"even\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oddIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"evenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawByUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraws\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PRIZEPOOL", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}